; ModuleID = 'builtins-x86_64'
source_filename = "builtins-x86_64"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-unknown"

%target.Target.Cpu.Feature.Set = type { [5 x i64] }
%target.Target.Cpu.Model = type { { ptr, i64 }, { ptr, i64 }, %target.Target.Cpu.Feature.Set }
%target.Target.Cpu = type { ptr, %target.Target.Cpu.Feature.Set, i6, [7 x i8] }
%target.Target.Os.LinuxVersionRange = type { %SemanticVersion.Range, %SemanticVersion }
%SemanticVersion.Range = type { %SemanticVersion, %SemanticVersion }
%SemanticVersion = type { i64, i64, i64, { ptr, i64 }, { ptr, i64 } }
%compiler_rt.atomics.SpinlockTable = type { [64 x %compiler_rt.atomics.SpinlockTable.Spinlock] }
%compiler_rt.atomics.SpinlockTable.Spinlock = type { i64, [56 x i8] }
%"atomic.Atomic.Atomic(u8)" = type { i8 }
%Thread.Mutex = type { %Thread.Mutex.DebugImpl }
%Thread.Mutex.DebugImpl = type { %"atomic.Atomic.Atomic(u32)", %Thread.Mutex.FutexImpl }
%"atomic.Atomic.Atomic(u32)" = type { i32 }
%Thread.Mutex.FutexImpl = type { %"atomic.Atomic.Atomic(u32)" }
%os.linux.Sigaction = type { %os.linux.Sigaction.Sigaction__union_6246, [32 x i32], i32, [4 x i8], ptr }
%os.linux.Sigaction.Sigaction__union_6246 = type { ptr }
%fmt.FormatOptions = type { { i64, i8, [7 x i8] }, { i64, i8, [7 x i8] }, i2, i8, [6 x i8] }
%"compiler_rt.common.HalveInt(i32,false)" = type { i32 }
%"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407" = type { i16, i16 }
%"compiler_rt.common.HalveInt(i32,true)" = type { i32 }
%"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416" = type { i16, i16 }
%"compiler_rt.common.HalveInt(i128,false)" = type { i128 }
%"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425" = type { i64, i64 }
%"compiler_rt.common.HalveInt(i128,true)" = type { i128 }
%"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434" = type { i64, i64 }
%"compiler_rt.common.HalveInt(i64,false)" = type { i64 }
%"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443" = type { i32, i32 }
%"compiler_rt.common.HalveInt(i64,true)" = type { i64 }
%"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452" = type { i32, i32 }
%math.F80 = type { i64, i16, [6 x i8] }
%"compiler_rt.mulc3.Complex(f16)" = type { half, half }
%"compiler_rt.mulc3.Complex(f32)" = type { float, float }
%"compiler_rt.mulc3.Complex(f64)" = type { double, double }
%"compiler_rt.mulc3.Complex(f80)" = type { x86_fp80, x86_fp80 }
%"compiler_rt.mulc3.Complex(f128)" = type { fp128, fp128 }
%compiler_rt.fma.dd = type { double, double }
%"math.frexp.Frexp(f64)" = type { double, i32, [4 x i8] }
%compiler_rt.fma.dd128 = type { fp128, fp128 }
%"math.frexp.Frexp(f128)" = type { fp128, i32, [12 x i8] }
%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))" = type { %fs.file.File }
%fs.file.File = type { i32 }
%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))" = type { ptr }
%"io.fixed_buffer_stream.FixedBufferStream([]u8)" = type { { ptr, i64 }, i64 }
%os.linux.k_sigaction__struct_6785 = type { ptr, i64, ptr, [2 x i32] }
%os.linux.timespec = type { i64, i64 }

@builtin.object_format = internal unnamed_addr constant i4 2, align 1
@target.Target.Cpu.Feature.Set.empty = internal unnamed_addr constant %target.Target.Cpu.Feature.Set zeroinitializer, align 8
@target.x86.cpu.x86_64 = internal unnamed_addr constant %target.Target.Cpu.Model { { ptr, i64 } { ptr @target.x86.cpu.x86_64__anon_2436, i64 6 }, { ptr, i64 } { ptr @target.x86.cpu.x86_64__anon_2437, i64 6 }, %target.Target.Cpu.Feature.Set { [5 x i64] [i64 37383395344400, i64 -4611686013930960896, i64 285213184, i64 0, i64 0] } }, align 8
@target.x86.cpu.x86_64__anon_2436 = internal unnamed_addr constant [7 x i8] c"x86_64\00", align 1
@target.x86.cpu.x86_64__anon_2437 = internal unnamed_addr constant [7 x i8] c"x86-64\00", align 1
@builtin.cpu = internal unnamed_addr constant %target.Target.Cpu { ptr @target.x86.cpu.x86_64, %target.Target.Cpu.Feature.Set { [5 x i64] [i64 37383395344400, i64 -4611686013930960896, i64 285213440, i64 0, i64 0] }, i6 -27, [7 x i8] undef }, align 8
@builtin.zig_backend = internal unnamed_addr constant i64 2, align 8
@start.simplified_logic = internal unnamed_addr constant i1 false, align 1
@builtin.output_mode = internal unnamed_addr constant i2 -2, align 1
@main.boolToStrZig__anon_3352 = internal unnamed_addr constant [5 x i8] c"true\00", align 1
@main.boolToStrZig__anon_3353 = internal unnamed_addr constant [6 x i8] c"false\00", align 1
@builtin.panic_messages.integer_overflow__anon_3384 = internal unnamed_addr constant [17 x i8] c"integer overflow\00", align 1
@0 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.is_test = internal unnamed_addr constant i1 false, align 1
@compiler_rt.common.linkage = internal unnamed_addr constant i2 -2, align 1
@builtin.os = internal unnamed_addr global { { %target.Target.Os.LinuxVersionRange, i2, [7 x i8] }, i6, [7 x i8] } { { %target.Target.Os.LinuxVersionRange, i2, [7 x i8] } { %target.Target.Os.LinuxVersionRange { %SemanticVersion.Range { %SemanticVersion { i64 3, i64 16, i64 0, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer }, %SemanticVersion { i64 5, i64 10, i64 81, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer } }, %SemanticVersion { i64 2, i64 19, i64 0, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer } }, i2 -2, [7 x i8] undef }, i6 8, [7 x i8] undef }, align 8
@builtin.abi = internal unnamed_addr constant i6 0, align 1
@builtin.target = internal unnamed_addr global { %target.Target.Cpu, { { %target.Target.Os.LinuxVersionRange, i2, [7 x i8] }, i6, [7 x i8] }, i6, i4, [6 x i8] } { %target.Target.Cpu { ptr @target.x86.cpu.x86_64, %target.Target.Cpu.Feature.Set { [5 x i64] [i64 37383395344400, i64 -4611686013930960896, i64 285213440, i64 0, i64 0] }, i6 -27, [7 x i8] undef }, { { %target.Target.Os.LinuxVersionRange, i2, [7 x i8] }, i6, [7 x i8] } { { %target.Target.Os.LinuxVersionRange, i2, [7 x i8] } { %target.Target.Os.LinuxVersionRange { %SemanticVersion.Range { %SemanticVersion { i64 3, i64 16, i64 0, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer }, %SemanticVersion { i64 5, i64 10, i64 81, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer } }, %SemanticVersion { i64 2, i64 19, i64 0, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer } }, i2 -2, [7 x i8] undef }, i6 8, [7 x i8] undef }, i6 0, i4 2, [6 x i8] undef }, align 8
@compiler_rt.common.visibility = internal unnamed_addr constant i2 0, align 1
@builtin.panic_messages.cast_truncated_data__anon_3387 = internal unnamed_addr constant [28 x i8] c"integer cast truncated bits\00", align 1
@1 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@2 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@3 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@4 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@5 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@6 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@7 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@8 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@9 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@10 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@11 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@12 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@13 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@14 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@15 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@16 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@17 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@18 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.common.want_aeabi = internal unnamed_addr constant i1 false, align 1
@19 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@20 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@21 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.divide_by_zero__anon_3466 = internal unnamed_addr constant [17 x i8] c"division by zero\00", align 1
@22 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@23 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.negative_to_unsigned__anon_3467 = internal unnamed_addr constant [51 x i8] c"attempt to cast negative value to unsigned integer\00", align 1
@compiler_rt.common.want_windows_v2u64_abi = internal unnamed_addr constant i1 false, align 1
@compiler_rt.absv.absv__anon_3473 = internal unnamed_addr constant [27 x i8] c"compiler_rt absv: overflow\00", align 1
@24 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@25 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@26 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.negv.negvXi__anon_3474 = internal unnamed_addr constant [27 x i8] c"compiler_rt negv: overflow\00", align 1
@27 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@28 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@29 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@30 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@31 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.common.gnu_f16_abi = internal unnamed_addr constant i1 false, align 1
@32 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@33 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@34 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@35 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@36 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.common.want_ppc_abi = internal unnamed_addr constant i1 false, align 1
@compiler_rt.common.want_sparc_abi = internal unnamed_addr constant i1 false, align 1
@37 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@38 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@39 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@40 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@41 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@42 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@43 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@44 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@45 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@46 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@47 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@48 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@49 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@50 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@51 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@52 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@53 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@54 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@55 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@56 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@57 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@58 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@59 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@60 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@61 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@62 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.shift_rhs_too_big__anon_3609 = internal unnamed_addr constant [43 x i8] c"shift amount is greater than the type size\00", align 1
@63 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@64 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@65 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@66 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@67 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@68 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@69 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@70 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@71 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@72 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@73 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@74 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@75 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@76 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@77 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@78 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@79 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@80 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@81 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@82 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@83 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@84 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@85 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@86 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@87 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@88 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@89 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@90 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@91 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@92 = private unnamed_addr constant [2 x float] [float 5.000000e-01, float -5.000000e-01], align 4
@builtin.panic_messages.integer_part_out_of_bounds__anon_3812 = internal unnamed_addr constant [51 x i8] c"integer part of floating point value out of bounds\00", align 1
@93 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@94 = private unnamed_addr constant [2 x double] [double 5.000000e-01, double -5.000000e-01], align 8
@95 = private unnamed_addr constant [16 x double] [double 0x3FE6A09E667F3BCD, double 0x3FE7A11473EB0187, double 0x3FE8ACE5422AA0DB, double 0x3FE9C49182A3F090, double 0x3FEAE89F995AD3AD, double 0x3FEC199BDD85529C, double 0x3FED5818DCFBA487, double 0x3FEEA4AFA2A490DA, double 1.000000e+00, double 0x3FF0B5586CF9890F, double 0x3FF172B83C7D517B, double 0x3FF2387A6E756238, double 0x3FF306FE0A31B715, double 0x3FF3DEA64C123422, double 0x3FF4BFDAD5362A27, double 0x3FF5AB07DD485429], align 8
@96 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@97 = private unnamed_addr constant [512 x double] [double 0x3FE6A09E667F3D5D, double 0x3D39880000000000, double 0x3FE6B052FA751744, double 0x3CD8000000000000, double 0x3FE6C012750BD9FE, double 0xBD28780000000000, double 0x3FE6CFDCDDD476BF, double 0x3D1EC00000000000, double 0x3FE6DFB23C651A29, double 0xBCD8000000000000, double 0x3FE6EF9298593AE3, double 0xBCBC000000000000, double 0x3FE6FF7DF9519386, double 0xBD2FD80000000000, double 0x3FE70F7466F42DA3, double 0xBD2C880000000000, double 0x3FE71F75E8EC5FC3, double 0x3D13C00000000000, double 0x3FE72F8286EACF05, double 0xBD38300000000000, double 0x3FE73F9A48A58152, double 0xBD00C00000000000, double 0x3FE74FBD35D7CCFC, double 0x3D2F880000000000, double 0x3FE75FEB564267F1, double 0x3D03E00000000000, double 0x3FE77024B1AB6D48, double 0xBD27D00000000000, double 0x3FE780694FDE5D38, double 0xBCDD000000000000, double 0x3FE790B938AC1D00, double 0x3CE3000000000000, double 0x3FE7A11473EB0178, double 0xBCED000000000000, double 0x3FE7B17B0976D060, double 0x3D20400000000000, double 0x3FE7C1ED0130C133, double 0x3CA0000000000000, double 0x3FE7D26A62FF8636, double 0xBD26900000000000, double 0x3FE7E2F336CF4E3B, double 0xBD02E00000000000, double 0x3FE7F3878491C3E8, double 0xBD24580000000000, double 0x3FE80427543E1B4E, double 0x3D33000000000000, double 0x3FE814D2ADD1071A, double 0x3D0F000000000000, double 0x3FE82589994CCD7E, double 0xBD21C00000000000, double 0x3FE8364C1EB942D0, double 0x3D29D00000000000, double 0x3FE8471A4623CAB5, double 0x3D47100000000000, double 0x3FE857F4179F5BBC, double 0x3D22600000000000, double 0x3FE868D99B4491AF, double 0xBD32C40000000000, double 0x3FE879CAD931A395, double 0xBD23000000000000, double 0x3FE88AC7D98A65B8, double 0xBD2A800000000000, double 0x3FE89BD0A4785800, double 0xBCED000000000000, double 0x3FE8ACE5422AA223, double 0x3D33280000000000, double 0x3FE8BE05BAD619FA, double 0x3D42B40000000000, double 0x3FE8CF3216B54383, double 0xBD2ED00000000000, double 0x3FE8E06A5E08664C, double 0xBD20500000000000, double 0x3FE8F1AE99157807, double 0x3D28280000000000, double 0x3FE902FED0282C0E, double 0xBD1CB00000000000, double 0x3FE9145B0B91FF96, double 0xBD05E00000000000, double 0x3FE925C353AA2FF9, double 0x3CF5400000000000, double 0x3FE93737B0CDC64A, double 0x3D17200000000000, double 0x3FE948B82B5F98AE, double 0xBD09000000000000, double 0x3FE95A44CBC852CB, double 0x3D25680000000000, double 0x3FE96BDD9A766F21, double 0xBD36D00000000000, double 0x3FE97D829FDE4E2A, double 0xBD01000000000000, double 0x3FE98F33E47A23A3, double 0x3D2D000000000000, double 0x3FE9A0F170CA0604, double 0xBD38A40000000000, double 0x3FE9B2BB4D53FF89, double 0x3D355C0000000000, double 0x3FE9C49182A3F15B, double 0x3D26B80000000000, double 0x3FE9D674194BB8C5, double 0xBCEC000000000000, double 0x3FE9E86319E3238E, double 0x3D17D00000000000, double 0x3FE9FA5E8D07F302, double 0x3D16400000000000, double 0x3FEA0C667B5DE54D, double 0xBCF5000000000000, double 0x3FEA1E7AED8EB8F6, double 0x3D09E00000000000, double 0x3FEA309BEC4A2E27, double 0x3D2AD80000000000, double 0x3FEA42C980460A5D, double 0xBD1AF00000000000, double 0x3FEA5503B23E259B, double 0x3D0B600000000000, double 0x3FEA674A8AF46213, double 0x3D38880000000000, double 0x3FEA799E1330B3A7, double 0x3D11200000000000, double 0x3FEA8BFE53C12E8D, double 0x3D06C00000000000, double 0x3FEA9E6B5579FCD2, double 0xBD29B80000000000, double 0x3FEAB0E521356FB8, double 0x3D2B700000000000, double 0x3FEAC36BBFD3F381, double 0x3CD9000000000000, double 0x3FEAD5FF3A3C2780, double 0x3CE4000000000000, double 0x3FEAE89F995AD2A3, double 0xBD2C900000000000, double 0x3FEAFB4CE622F367, double 0x3D16500000000000, double 0x3FEB0E07298DB790, double 0x3D2FD40000000000, double 0x3FEB20CE6C9A89A9, double 0x3D12700000000000, double 0x3FEB33A2B84F1A4B, double 0x3D4D470000000000, double 0x3FEB468415B747E7, double 0xBD38380000000000, double 0x3FEB59728DE5593A, double 0x3C98000000000000, double 0x3FEB6C6E29F1C56A, double 0x3D0AD00000000000, double 0x3FEB7F76F2FB5E50, double 0x3CDE800000000000, double 0x3FEB928CF22749B2, double 0xBD04C00000000000, double 0x3FEBA5B030A10603, double 0xBD0D700000000000, double 0x3FEBB8E0B79A6F66, double 0x3D0D900000000000, double 0x3FEBCC1E904BC1FF, double 0x3D02A00000000000, double 0x3FEBDF69C3F3A16F, double 0xBD1F780000000000, double 0x3FEBF2C25BD71DB8, double 0xBD10A00000000000, double 0x3FEC06286141B2E9, double 0xBD11400000000000, double 0x3FEC199BDD8552E0, double 0x3D0BE00000000000, double 0x3FEC2D1CD9FA64EE, double 0xBD09400000000000, double 0x3FEC40AB5FFFD02F, double 0xBD0ED00000000000, double 0x3FEC544778FAFD15, double 0x3D39660000000000, double 0x3FEC67F12E57D0CB, double 0xBD1A100000000000, double 0x3FEC7BA88988C1B6, double 0xBD58458000000000, double 0x3FEC8F6D9406E733, double 0xBD1A480000000000, double 0x3FECA3405751C4DF, double 0x3CCB000000000000, double 0x3FECB720DCEF9094, double 0x3D01400000000000, double 0x3FECCB0F2E6D1689, double 0x3CF0200000000000, double 0x3FECDF0B555DC412, double 0x3CF3600000000000, double 0x3FECF3155B5BAB3B, double 0xBD06900000000000, double 0x3FED072D4A0789BC, double 0x3D09A00000000000, double 0x3FED1B532B08C8FA, double 0xBD15E00000000000, double 0x3FED2F87080D8A85, double 0x3D1D280000000000, double 0x3FED43C8EACAA203, double 0x3D01A00000000000, double 0x3FED5818DCFBA491, double 0x3CDF000000000000, double 0x3FED6C76E862E6A1, double 0xBD03A00000000000, double 0x3FED80E316C9834E, double 0xBD0CD80000000000, double 0x3FED955D71FF6090, double 0x3CF4C00000000000, double 0x3FEDA9E603DB32AE, double 0x3CFF900000000000, double 0x3FEDBE7CD63A8325, double 0x3CE9800000000000, double 0x3FEDD321F301B445, double 0xBCF5200000000000, double 0x3FEDE7D5641C05BF, double 0xBD1D700000000000, double 0x3FEDFC97337B9AEC, double 0xBD16140000000000, double 0x3FEE11676B197D5E, double 0x3D0B480000000000, double 0x3FEE264614F5A3E7, double 0x3D40CE0000000000, double 0x3FEE3B333B16EE5C, double 0x3D0C680000000000, double 0x3FEE502EE78B3FB4, double 0xBD09300000000000, double 0x3FEE653924676D68, double 0xBCE5000000000000, double 0x3FEE7A51FBC74C44, double 0xBD07F80000000000, double 0x3FEE8F7977CDB726, double 0xBCF3700000000000, double 0x3FEEA4AFA2A490E8, double 0x3CE5D00000000000, double 0x3FEEB9F4867CCAE4, double 0x3D161A0000000000, double 0x3FEECF482D8E680D, double 0x3CF5500000000000, double 0x3FEEE4AAA2188514, double 0x3CC6400000000000, double 0x3FEEFA1BEE615A13, double 0xBCEE800000000000, double 0x3FEF0F9C1CB64106, double 0xBCFA880000000000, double 0x3FEF252B376BB963, double 0xBD2C900000000000, double 0x3FEF3AC948DD7275, double 0x3CAA000000000000, double 0x3FEF50765B6E4524, double 0xBCF4F00000000000, double 0x3FEF6632798844FD, double 0x3CCA800000000000, double 0x3FEF7BFDAD9CBE38, double 0x3CFABC0000000000, double 0x3FEF91D802243C82, double 0xBCD4600000000000, double 0x3FEFA7C1819E908E, double 0xBD0B0C0000000000, double 0x3FEFBDBA3692D511, double 0xBCC0E00000000000, double 0x3FEFD3C22B8F7194, double 0xBD10DE8000000000, double 0x3FEFE9D96B2A23EE, double 0x3CEE430000000000, double 1.000000e+00, double 0.000000e+00, double 0x3FF00B1AFA5ABCBE, double 0xBCB3400000000000, double 0x3FF0163DA9FB3303, double 0xBD12170000000000, double 0x3FF02168143B0282, double 0x3CBA400000000000, double 0x3FF02C9A3E77806C, double 0x3CEF980000000000, double 0x3FF037D42E11BBCA, double 0xBCC7400000000000, double 0x3FF04315E86E7F89, double 0x3CD8300000000000, double 0x3FF04E5F72F65467, double 0xBD1A3F0000000000, double 0x3FF059B0D315855A, double 0xBD02840000000000, double 0x3FF0650A0E3C1F95, double 0x3CF1600000000000, double 0x3FF0706B29DDF71A, double 0x3D15240000000000, double 0x3FF07BD42B72A82D, double 0xBCE9A00000000000, double 0x3FF0874518759BD0, double 0x3CE6400000000000, double 0x3FF092BDF66607C8, double 0xBD00780000000000, double 0x3FF09E3ECAC6F383, double 0xBC98000000000000, double 0x3FF0A9C79B1F3930, double 0x3CFFA00000000000, double 0x3FF0B5586CF988FC, double 0xBCFAC80000000000, double 0x3FF0C0F145E46C8A, double 0x3CD9C00000000000, double 0x3FF0CC922B724816, double 0x3D05200000000000, double 0x3FF0D83B23395DD8, double 0xBCFAD00000000000, double 0x3FF0E3EC32D3D1F3, double 0x3D1BAC0000000000, double 0x3FF0EFA55FDFA9A6, double 0xBD04E80000000000, double 0x3FF0FB66AFFED2F0, double 0xBD0D300000000000, double 0x3FF1073028D7234B, double 0x3CF1500000000000, double 0x3FF11301D0125B5B, double 0x3CEC000000000000, double 0x3FF11EDBAB5E2AF9, double 0x3D16BC0000000000, double 0x3FF12ABDC06C31D5, double 0x3CE8400000000000, double 0x3FF136A814F2047D, double 0xBD0ED00000000000, double 0x3FF1429AAEA92DE9, double 0x3CE8E00000000000, double 0x3FF14E95934F3138, double 0x3CEB400000000000, double 0x3FF15A98C8A58E71, double 0x3D05300000000000, double 0x3FF166A45471C3DF, double 0x3D03380000000000, double 0x3FF172B83C7D5211, double 0x3D28D40000000000, double 0x3FF17ED48695BB9F, double 0xBD05D00000000000, double 0x3FF18AF9388C8D93, double 0xBD1C880000000000, double 0x3FF1972658375D66, double 0x3D11F00000000000, double 0x3FF1A35BEB6FCBA7, double 0x3D10480000000000, double 0x3FF1AF99F81387E3, double 0xBD47390000000000, double 0x3FF1BBE084045D54, double 0x3D24E40000000000, double 0x3FF1C82F95281C43, double 0xBD0A200000000000, double 0x3FF1D4873168B9B2, double 0x3CE3800000000000, double 0x3FF1E0E75EB44031, double 0x3CEAC00000000000, double 0x3FF1ED5022FCD938, double 0x3D01900000000000, double 0x3FF1F9C18438CDF7, double 0xBD1B780000000000, double 0x3FF2063B88628D8F, double 0x3D2D940000000000, double 0x3FF212BE3578A81E, double 0x3CD8000000000000, double 0x3FF21F49917DDD41, double 0x3D2B340000000000, double 0x3FF22BDDA2791323, double 0x3D19F80000000000, double 0x3FF2387A6E7561E7, double 0xBD19C80000000000, double 0x3FF2451FFB821427, double 0x3D02300000000000, double 0x3FF251CE4FB2A602, double 0xBD13480000000000, double 0x3FF25E85711ECEB0, double 0x3D12700000000000, double 0x3FF26B4565E27D16, double 0x3D11D00000000000, double 0x3FF2780E341DE00F, double 0x3D31EE0000000000, double 0x3FF284DFE1F5633E, double 0xBD14C00000000000, double 0x3FF291BA7591BB30, double 0xBD13D80000000000, double 0x3FF29E9DF51FDF09, double 0x3D08B00000000000, double 0x3FF2AB8A66D10E9B, double 0xBD227C0000000000, double 0x3FF2B87FD0DADA3A, double 0x3D2A340000000000, double 0x3FF2C57E39771AF9, double 0xBD10800000000000, double 0x3FF2D285A6E402D9, double 0xBD0ED00000000000, double 0x3FF2DF961F641579, double 0xBCF4200000000000, double 0x3FF2ECAFA93E2ECF, double 0xBD24980000000000, double 0x3FF2F9D24ABD8822, double 0xBD16300000000000, double 0x3FF306FE0A31B625, double 0xBD32360000000000, double 0x3FF31432EDEEA50B, double 0xBD70DF8000000000, double 0x3FF32170FC4CD7B8, double 0xBD22480000000000, double 0x3FF32EB83BA8E9A2, double 0xBD25980000000000, double 0x3FF33C08B2641766, double 0x3D1ED00000000000, double 0x3FF3496266E3FA27, double 0xBCDC000000000000, double 0x3FF356C55F929F0F, double 0xBD30D80000000000, double 0x3FF36431A2DE88B9, double 0x3D22C80000000000, double 0x3FF371A7373AAA39, double 0x3D20600000000000, double 0x3FF37F26231E74FE, double 0xBD16600000000000, double 0x3FF38CAE6D05D838, double 0xBD0AE00000000000, double 0x3FF39A401B713EC3, double 0xBD44720000000000, double 0x3FF3A7DB34E5A020, double 0x3D08200000000000, double 0x3FF3B57FBFEC6E95, double 0x3D3E800000000000, double 0x3FF3C32DC313A8F2, double 0x3CEF800000000000, double 0x3FF3D0E544EDE122, double 0xBD17A00000000000, double 0x3FF3DEA64C1234BB, double 0x3D26300000000000, double 0x3FF3EC70DF1C4ECC, double 0xBD48A60000000000, double 0x3FF3FA4504AC7E8C, double 0xBD3CDC0000000000, double 0x3FF40822C367A0BB, double 0x3D25B80000000000, double 0x3FF4160A21F72E95, double 0x3D1EC00000000000, double 0x3FF423FB27094646, double 0xBD13600000000000, double 0x3FF431F5D950A920, double 0x3D23980000000000, double 0x3FF43FFA3F84B9EB, double 0x3CFA000000000000, double 0x3FF44E0860618919, double 0xBCF6C00000000000, double 0x3FF45C2042A7D201, double 0xBD0BC00000000000, double 0x3FF46A41ED1D0016, double 0xBD12800000000000, double 0x3FF4786D668B3326, double 0x3D30E00000000000, double 0x3FF486A2B5C13C00, double 0xBD2D400000000000, double 0x3FF494E1E192AF04, double 0x3D0C200000000000, double 0x3FF4A32AF0D7D372, double 0xBD1E500000000000, double 0x3FF4B17DEA6DB801, double 0x3D07800000000000, double 0x3FF4BFDAD53629E1, double 0xBD13800000000000, double 0x3FF4CE41B817C132, double 0x3D00800000000000, double 0x3FF4DCB299FDDDDB, double 0x3D2C700000000000, double 0x3FF4EB2D81D8AB96, double 0xBD1CE00000000000, double 0x3FF4F9B2769D2D02, double 0x3D19200000000000, double 0x3FF508417F4531C1, double 0xBD08C00000000000, double 0x3FF516DAA2CF662A, double 0xBCFA000000000000, double 0x3FF5257DE83F51EA, double 0x3D4A080000000000, double 0x3FF5342B569D4EDA, double 0xBD26D80000000000, double 0x3FF542E2F4F6AC1A, double 0xBD32440000000000, double 0x3FF551A4CA5D94DB, double 0x3D483C0000000000, double 0x3FF56070DDE9116B, double 0x3D24B00000000000, double 0x3FF56F4736B529DE, double 0x3D415A0000000000, double 0x3FF57E27DBE2C40E, double 0xBD29E00000000000, double 0x3FF58D12D497C76F, double 0xBD23080000000000, double 0x3FF59C0827FF0B4C, double 0x3D4DEC0000000000, double 0x3FF5AB07DD485427, double 0xBCC4000000000000, double 0x3FF5BA11FBA87AF4, double 0x3D30080000000000, double 0x3FF5C9268A59460B, double 0xBD26C80000000000, double 0x3FF5D84590998E3F, double 0x3D469A0000000000, double 0x3FF5E76F15AD20E1, double 0xBD1B400000000000, double 0x3FF5F6A320DCEBCA, double 0x3D17700000000000, double 0x3FF605E1B976DCB8, double 0x3D26F80000000000, double 0x3FF6152AE6CDF715, double 0x3D01000000000000, double 0x3FF6247EB03A5531, double 0xBD15D00000000000, double 0x3FF633DD1D1929B5, double 0xBD12D00000000000, double 0x3FF6434634CCC313, double 0xBCEA800000000000, double 0x3FF652B9FEBC8EFA, double 0xBD28600000000000, double 0x3FF6623882553397, double 0x3D71FE0000000000, double 0x3FF671C1C708328E, double 0xBD37200000000000, double 0x3FF68155D44CA97E, double 0x3CE6800000000000, double 0x3FF690F4B19E9471, double 0xBD29780000000000], align 8
@98 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@99 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@100 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@101 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@102 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@103 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@104 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@105 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@106 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@107 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@108 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@109 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@110 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@111 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@112 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@113 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@114 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.memcpy_len_mismatch__anon_3898 = internal unnamed_addr constant [41 x i8] c"@memcpy arguments have non-equal lengths\00", align 1
@115 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.memcpy_alias__anon_3899 = internal unnamed_addr constant [24 x i8] c"@memcpy arguments alias\00", align 1
@builtin.link_libc = internal unnamed_addr constant i1 false, align 1
@compiler_rt.arm.arch = internal unnamed_addr constant i6 -27, align 1
@compiler_rt.aulldiv.arch = internal unnamed_addr constant i6 -27, align 1
@compiler_rt.aullrem.arch = internal unnamed_addr constant i6 -27, align 1
@compiler_rt.atomics.cpu = internal unnamed_addr constant %target.Target.Cpu { ptr @target.x86.cpu.x86_64, %target.Target.Cpu.Feature.Set { [5 x i64] [i64 37383395344400, i64 -4611686013930960896, i64 285213440, i64 0, i64 0] }, i6 -27, [7 x i8] undef }, align 8
@compiler_rt.atomics.arch = internal unnamed_addr constant i6 -27, align 1
@compiler_rt.atomics.supports_atomic_ops = internal unnamed_addr constant i1 true, align 1
@compiler_rt.atomics.linkage = internal unnamed_addr constant i2 -2, align 1
@compiler_rt.atomics.visibility = internal unnamed_addr constant i2 0, align 1
@compiler_rt.atomics.spinlocks = internal unnamed_addr global %compiler_rt.atomics.SpinlockTable { [64 x %compiler_rt.atomics.SpinlockTable.Spinlock] [%compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }] }, align 64
@116 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@117 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@118 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@119 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.stack_probe.arch = internal unnamed_addr constant i6 -27, align 1
@compiler_rt.stack_probe.linkage = internal unnamed_addr constant i2 -2, align 1
@compiler_rt.memset.__memset__anon_4032 = internal unnamed_addr constant [16 x i8] c"buffer overflow\00", align 1
@120 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.integer_overflow = internal unnamed_addr constant ptr @builtin.panic_messages.integer_overflow__anon_3384, align 8
@builtin.panic_messages.cast_truncated_data = internal unnamed_addr constant ptr @builtin.panic_messages.cast_truncated_data__anon_3387, align 8
@"compiler_rt.common.HalveInt(i32,false).bits" = internal unnamed_addr constant i16 16, align 2
@compiler_rt.common.native_endian = internal unnamed_addr constant i1 true, align 1
@"compiler_rt.common.HalveInt(i32,true).bits" = internal unnamed_addr constant i16 16, align 2
@"compiler_rt.common.HalveInt(i128,false).bits" = internal unnamed_addr constant i16 64, align 2
@"compiler_rt.common.HalveInt(i128,true).bits" = internal unnamed_addr constant i16 64, align 2
@"compiler_rt.common.HalveInt(i64,false).bits" = internal unnamed_addr constant i16 32, align 2
@"compiler_rt.common.HalveInt(i64,true).bits" = internal unnamed_addr constant i16 32, align 2
@121 = private unnamed_addr constant [2 x i32] zeroinitializer, align 4
@builtin.panic_messages.divide_by_zero = internal unnamed_addr constant ptr @builtin.panic_messages.divide_by_zero__anon_3466, align 8
@builtin.panic_messages.negative_to_unsigned = internal unnamed_addr constant ptr @builtin.panic_messages.negative_to_unsigned__anon_3467, align 8
@122 = private unnamed_addr constant [2 x i64] zeroinitializer, align 8
@123 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@124 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.shift_rhs_too_big = internal unnamed_addr constant ptr @builtin.panic_messages.shift_rhs_too_big__anon_3609, align 8
@125 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@126 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@127 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@128 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@129 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@130 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@131 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@132 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@133 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@134 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@135 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@136 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@137 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@138 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@139 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@140 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@141 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@142 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@143 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@144 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@145 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@146 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@147 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@148 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.comparef.LE.Unordered = internal unnamed_addr constant i32 1, align 4
@compiler_rt.comparef.GE.Unordered = internal unnamed_addr constant i32 -1, align 4
@math.nan_u16 = internal unnamed_addr constant i16 31745, align 2
@math.nan_f16 = internal unnamed_addr constant half 0xH7C01, align 2
@149 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@math.nan_u32 = internal unnamed_addr constant i32 2139095041, align 4
@math.nan_f32 = internal unnamed_addr constant float 0x7FF0000020000000, align 4
@150 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@math.nan_u64 = internal unnamed_addr constant i64 9218868437227405313, align 8
@math.nan_f64 = internal unnamed_addr constant double 0x7FF0000000000001, align 8
@151 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@math.nan_u128 = internal unnamed_addr constant i128 170135991163610696904058773219554885633, align 8
@math.nan_f128 = internal unnamed_addr constant fp128 0xL00000000000000017FFF000000000000, align 16
@152 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@math.nan_f80 = internal unnamed_addr constant x86_fp80 0xK7FFFA000000000000000, align 16
@153 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@154 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@155 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@156 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@157 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@158 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@159 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@160 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@161 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@162 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@163 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@164 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@165 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@166 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.integer_part_out_of_bounds = internal unnamed_addr constant ptr @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, align 8
@compiler_rt.exp2.exp2ft = internal unnamed_addr constant [16 x double] [double 0x3FE6A09E667F3BCD, double 0x3FE7A11473EB0187, double 0x3FE8ACE5422AA0DB, double 0x3FE9C49182A3F090, double 0x3FEAE89F995AD3AD, double 0x3FEC199BDD85529C, double 0x3FED5818DCFBA487, double 0x3FEEA4AFA2A490DA, double 1.000000e+00, double 0x3FF0B5586CF9890F, double 0x3FF172B83C7D517B, double 0x3FF2387A6E756238, double 0x3FF306FE0A31B715, double 0x3FF3DEA64C123422, double 0x3FF4BFDAD5362A27, double 0x3FF5AB07DD485429], align 8
@compiler_rt.exp2.exp2dt = internal unnamed_addr constant [512 x double] [double 0x3FE6A09E667F3D5D, double 0x3D39880000000000, double 0x3FE6B052FA751744, double 0x3CD8000000000000, double 0x3FE6C012750BD9FE, double 0xBD28780000000000, double 0x3FE6CFDCDDD476BF, double 0x3D1EC00000000000, double 0x3FE6DFB23C651A29, double 0xBCD8000000000000, double 0x3FE6EF9298593AE3, double 0xBCBC000000000000, double 0x3FE6FF7DF9519386, double 0xBD2FD80000000000, double 0x3FE70F7466F42DA3, double 0xBD2C880000000000, double 0x3FE71F75E8EC5FC3, double 0x3D13C00000000000, double 0x3FE72F8286EACF05, double 0xBD38300000000000, double 0x3FE73F9A48A58152, double 0xBD00C00000000000, double 0x3FE74FBD35D7CCFC, double 0x3D2F880000000000, double 0x3FE75FEB564267F1, double 0x3D03E00000000000, double 0x3FE77024B1AB6D48, double 0xBD27D00000000000, double 0x3FE780694FDE5D38, double 0xBCDD000000000000, double 0x3FE790B938AC1D00, double 0x3CE3000000000000, double 0x3FE7A11473EB0178, double 0xBCED000000000000, double 0x3FE7B17B0976D060, double 0x3D20400000000000, double 0x3FE7C1ED0130C133, double 0x3CA0000000000000, double 0x3FE7D26A62FF8636, double 0xBD26900000000000, double 0x3FE7E2F336CF4E3B, double 0xBD02E00000000000, double 0x3FE7F3878491C3E8, double 0xBD24580000000000, double 0x3FE80427543E1B4E, double 0x3D33000000000000, double 0x3FE814D2ADD1071A, double 0x3D0F000000000000, double 0x3FE82589994CCD7E, double 0xBD21C00000000000, double 0x3FE8364C1EB942D0, double 0x3D29D00000000000, double 0x3FE8471A4623CAB5, double 0x3D47100000000000, double 0x3FE857F4179F5BBC, double 0x3D22600000000000, double 0x3FE868D99B4491AF, double 0xBD32C40000000000, double 0x3FE879CAD931A395, double 0xBD23000000000000, double 0x3FE88AC7D98A65B8, double 0xBD2A800000000000, double 0x3FE89BD0A4785800, double 0xBCED000000000000, double 0x3FE8ACE5422AA223, double 0x3D33280000000000, double 0x3FE8BE05BAD619FA, double 0x3D42B40000000000, double 0x3FE8CF3216B54383, double 0xBD2ED00000000000, double 0x3FE8E06A5E08664C, double 0xBD20500000000000, double 0x3FE8F1AE99157807, double 0x3D28280000000000, double 0x3FE902FED0282C0E, double 0xBD1CB00000000000, double 0x3FE9145B0B91FF96, double 0xBD05E00000000000, double 0x3FE925C353AA2FF9, double 0x3CF5400000000000, double 0x3FE93737B0CDC64A, double 0x3D17200000000000, double 0x3FE948B82B5F98AE, double 0xBD09000000000000, double 0x3FE95A44CBC852CB, double 0x3D25680000000000, double 0x3FE96BDD9A766F21, double 0xBD36D00000000000, double 0x3FE97D829FDE4E2A, double 0xBD01000000000000, double 0x3FE98F33E47A23A3, double 0x3D2D000000000000, double 0x3FE9A0F170CA0604, double 0xBD38A40000000000, double 0x3FE9B2BB4D53FF89, double 0x3D355C0000000000, double 0x3FE9C49182A3F15B, double 0x3D26B80000000000, double 0x3FE9D674194BB8C5, double 0xBCEC000000000000, double 0x3FE9E86319E3238E, double 0x3D17D00000000000, double 0x3FE9FA5E8D07F302, double 0x3D16400000000000, double 0x3FEA0C667B5DE54D, double 0xBCF5000000000000, double 0x3FEA1E7AED8EB8F6, double 0x3D09E00000000000, double 0x3FEA309BEC4A2E27, double 0x3D2AD80000000000, double 0x3FEA42C980460A5D, double 0xBD1AF00000000000, double 0x3FEA5503B23E259B, double 0x3D0B600000000000, double 0x3FEA674A8AF46213, double 0x3D38880000000000, double 0x3FEA799E1330B3A7, double 0x3D11200000000000, double 0x3FEA8BFE53C12E8D, double 0x3D06C00000000000, double 0x3FEA9E6B5579FCD2, double 0xBD29B80000000000, double 0x3FEAB0E521356FB8, double 0x3D2B700000000000, double 0x3FEAC36BBFD3F381, double 0x3CD9000000000000, double 0x3FEAD5FF3A3C2780, double 0x3CE4000000000000, double 0x3FEAE89F995AD2A3, double 0xBD2C900000000000, double 0x3FEAFB4CE622F367, double 0x3D16500000000000, double 0x3FEB0E07298DB790, double 0x3D2FD40000000000, double 0x3FEB20CE6C9A89A9, double 0x3D12700000000000, double 0x3FEB33A2B84F1A4B, double 0x3D4D470000000000, double 0x3FEB468415B747E7, double 0xBD38380000000000, double 0x3FEB59728DE5593A, double 0x3C98000000000000, double 0x3FEB6C6E29F1C56A, double 0x3D0AD00000000000, double 0x3FEB7F76F2FB5E50, double 0x3CDE800000000000, double 0x3FEB928CF22749B2, double 0xBD04C00000000000, double 0x3FEBA5B030A10603, double 0xBD0D700000000000, double 0x3FEBB8E0B79A6F66, double 0x3D0D900000000000, double 0x3FEBCC1E904BC1FF, double 0x3D02A00000000000, double 0x3FEBDF69C3F3A16F, double 0xBD1F780000000000, double 0x3FEBF2C25BD71DB8, double 0xBD10A00000000000, double 0x3FEC06286141B2E9, double 0xBD11400000000000, double 0x3FEC199BDD8552E0, double 0x3D0BE00000000000, double 0x3FEC2D1CD9FA64EE, double 0xBD09400000000000, double 0x3FEC40AB5FFFD02F, double 0xBD0ED00000000000, double 0x3FEC544778FAFD15, double 0x3D39660000000000, double 0x3FEC67F12E57D0CB, double 0xBD1A100000000000, double 0x3FEC7BA88988C1B6, double 0xBD58458000000000, double 0x3FEC8F6D9406E733, double 0xBD1A480000000000, double 0x3FECA3405751C4DF, double 0x3CCB000000000000, double 0x3FECB720DCEF9094, double 0x3D01400000000000, double 0x3FECCB0F2E6D1689, double 0x3CF0200000000000, double 0x3FECDF0B555DC412, double 0x3CF3600000000000, double 0x3FECF3155B5BAB3B, double 0xBD06900000000000, double 0x3FED072D4A0789BC, double 0x3D09A00000000000, double 0x3FED1B532B08C8FA, double 0xBD15E00000000000, double 0x3FED2F87080D8A85, double 0x3D1D280000000000, double 0x3FED43C8EACAA203, double 0x3D01A00000000000, double 0x3FED5818DCFBA491, double 0x3CDF000000000000, double 0x3FED6C76E862E6A1, double 0xBD03A00000000000, double 0x3FED80E316C9834E, double 0xBD0CD80000000000, double 0x3FED955D71FF6090, double 0x3CF4C00000000000, double 0x3FEDA9E603DB32AE, double 0x3CFF900000000000, double 0x3FEDBE7CD63A8325, double 0x3CE9800000000000, double 0x3FEDD321F301B445, double 0xBCF5200000000000, double 0x3FEDE7D5641C05BF, double 0xBD1D700000000000, double 0x3FEDFC97337B9AEC, double 0xBD16140000000000, double 0x3FEE11676B197D5E, double 0x3D0B480000000000, double 0x3FEE264614F5A3E7, double 0x3D40CE0000000000, double 0x3FEE3B333B16EE5C, double 0x3D0C680000000000, double 0x3FEE502EE78B3FB4, double 0xBD09300000000000, double 0x3FEE653924676D68, double 0xBCE5000000000000, double 0x3FEE7A51FBC74C44, double 0xBD07F80000000000, double 0x3FEE8F7977CDB726, double 0xBCF3700000000000, double 0x3FEEA4AFA2A490E8, double 0x3CE5D00000000000, double 0x3FEEB9F4867CCAE4, double 0x3D161A0000000000, double 0x3FEECF482D8E680D, double 0x3CF5500000000000, double 0x3FEEE4AAA2188514, double 0x3CC6400000000000, double 0x3FEEFA1BEE615A13, double 0xBCEE800000000000, double 0x3FEF0F9C1CB64106, double 0xBCFA880000000000, double 0x3FEF252B376BB963, double 0xBD2C900000000000, double 0x3FEF3AC948DD7275, double 0x3CAA000000000000, double 0x3FEF50765B6E4524, double 0xBCF4F00000000000, double 0x3FEF6632798844FD, double 0x3CCA800000000000, double 0x3FEF7BFDAD9CBE38, double 0x3CFABC0000000000, double 0x3FEF91D802243C82, double 0xBCD4600000000000, double 0x3FEFA7C1819E908E, double 0xBD0B0C0000000000, double 0x3FEFBDBA3692D511, double 0xBCC0E00000000000, double 0x3FEFD3C22B8F7194, double 0xBD10DE8000000000, double 0x3FEFE9D96B2A23EE, double 0x3CEE430000000000, double 1.000000e+00, double 0.000000e+00, double 0x3FF00B1AFA5ABCBE, double 0xBCB3400000000000, double 0x3FF0163DA9FB3303, double 0xBD12170000000000, double 0x3FF02168143B0282, double 0x3CBA400000000000, double 0x3FF02C9A3E77806C, double 0x3CEF980000000000, double 0x3FF037D42E11BBCA, double 0xBCC7400000000000, double 0x3FF04315E86E7F89, double 0x3CD8300000000000, double 0x3FF04E5F72F65467, double 0xBD1A3F0000000000, double 0x3FF059B0D315855A, double 0xBD02840000000000, double 0x3FF0650A0E3C1F95, double 0x3CF1600000000000, double 0x3FF0706B29DDF71A, double 0x3D15240000000000, double 0x3FF07BD42B72A82D, double 0xBCE9A00000000000, double 0x3FF0874518759BD0, double 0x3CE6400000000000, double 0x3FF092BDF66607C8, double 0xBD00780000000000, double 0x3FF09E3ECAC6F383, double 0xBC98000000000000, double 0x3FF0A9C79B1F3930, double 0x3CFFA00000000000, double 0x3FF0B5586CF988FC, double 0xBCFAC80000000000, double 0x3FF0C0F145E46C8A, double 0x3CD9C00000000000, double 0x3FF0CC922B724816, double 0x3D05200000000000, double 0x3FF0D83B23395DD8, double 0xBCFAD00000000000, double 0x3FF0E3EC32D3D1F3, double 0x3D1BAC0000000000, double 0x3FF0EFA55FDFA9A6, double 0xBD04E80000000000, double 0x3FF0FB66AFFED2F0, double 0xBD0D300000000000, double 0x3FF1073028D7234B, double 0x3CF1500000000000, double 0x3FF11301D0125B5B, double 0x3CEC000000000000, double 0x3FF11EDBAB5E2AF9, double 0x3D16BC0000000000, double 0x3FF12ABDC06C31D5, double 0x3CE8400000000000, double 0x3FF136A814F2047D, double 0xBD0ED00000000000, double 0x3FF1429AAEA92DE9, double 0x3CE8E00000000000, double 0x3FF14E95934F3138, double 0x3CEB400000000000, double 0x3FF15A98C8A58E71, double 0x3D05300000000000, double 0x3FF166A45471C3DF, double 0x3D03380000000000, double 0x3FF172B83C7D5211, double 0x3D28D40000000000, double 0x3FF17ED48695BB9F, double 0xBD05D00000000000, double 0x3FF18AF9388C8D93, double 0xBD1C880000000000, double 0x3FF1972658375D66, double 0x3D11F00000000000, double 0x3FF1A35BEB6FCBA7, double 0x3D10480000000000, double 0x3FF1AF99F81387E3, double 0xBD47390000000000, double 0x3FF1BBE084045D54, double 0x3D24E40000000000, double 0x3FF1C82F95281C43, double 0xBD0A200000000000, double 0x3FF1D4873168B9B2, double 0x3CE3800000000000, double 0x3FF1E0E75EB44031, double 0x3CEAC00000000000, double 0x3FF1ED5022FCD938, double 0x3D01900000000000, double 0x3FF1F9C18438CDF7, double 0xBD1B780000000000, double 0x3FF2063B88628D8F, double 0x3D2D940000000000, double 0x3FF212BE3578A81E, double 0x3CD8000000000000, double 0x3FF21F49917DDD41, double 0x3D2B340000000000, double 0x3FF22BDDA2791323, double 0x3D19F80000000000, double 0x3FF2387A6E7561E7, double 0xBD19C80000000000, double 0x3FF2451FFB821427, double 0x3D02300000000000, double 0x3FF251CE4FB2A602, double 0xBD13480000000000, double 0x3FF25E85711ECEB0, double 0x3D12700000000000, double 0x3FF26B4565E27D16, double 0x3D11D00000000000, double 0x3FF2780E341DE00F, double 0x3D31EE0000000000, double 0x3FF284DFE1F5633E, double 0xBD14C00000000000, double 0x3FF291BA7591BB30, double 0xBD13D80000000000, double 0x3FF29E9DF51FDF09, double 0x3D08B00000000000, double 0x3FF2AB8A66D10E9B, double 0xBD227C0000000000, double 0x3FF2B87FD0DADA3A, double 0x3D2A340000000000, double 0x3FF2C57E39771AF9, double 0xBD10800000000000, double 0x3FF2D285A6E402D9, double 0xBD0ED00000000000, double 0x3FF2DF961F641579, double 0xBCF4200000000000, double 0x3FF2ECAFA93E2ECF, double 0xBD24980000000000, double 0x3FF2F9D24ABD8822, double 0xBD16300000000000, double 0x3FF306FE0A31B625, double 0xBD32360000000000, double 0x3FF31432EDEEA50B, double 0xBD70DF8000000000, double 0x3FF32170FC4CD7B8, double 0xBD22480000000000, double 0x3FF32EB83BA8E9A2, double 0xBD25980000000000, double 0x3FF33C08B2641766, double 0x3D1ED00000000000, double 0x3FF3496266E3FA27, double 0xBCDC000000000000, double 0x3FF356C55F929F0F, double 0xBD30D80000000000, double 0x3FF36431A2DE88B9, double 0x3D22C80000000000, double 0x3FF371A7373AAA39, double 0x3D20600000000000, double 0x3FF37F26231E74FE, double 0xBD16600000000000, double 0x3FF38CAE6D05D838, double 0xBD0AE00000000000, double 0x3FF39A401B713EC3, double 0xBD44720000000000, double 0x3FF3A7DB34E5A020, double 0x3D08200000000000, double 0x3FF3B57FBFEC6E95, double 0x3D3E800000000000, double 0x3FF3C32DC313A8F2, double 0x3CEF800000000000, double 0x3FF3D0E544EDE122, double 0xBD17A00000000000, double 0x3FF3DEA64C1234BB, double 0x3D26300000000000, double 0x3FF3EC70DF1C4ECC, double 0xBD48A60000000000, double 0x3FF3FA4504AC7E8C, double 0xBD3CDC0000000000, double 0x3FF40822C367A0BB, double 0x3D25B80000000000, double 0x3FF4160A21F72E95, double 0x3D1EC00000000000, double 0x3FF423FB27094646, double 0xBD13600000000000, double 0x3FF431F5D950A920, double 0x3D23980000000000, double 0x3FF43FFA3F84B9EB, double 0x3CFA000000000000, double 0x3FF44E0860618919, double 0xBCF6C00000000000, double 0x3FF45C2042A7D201, double 0xBD0BC00000000000, double 0x3FF46A41ED1D0016, double 0xBD12800000000000, double 0x3FF4786D668B3326, double 0x3D30E00000000000, double 0x3FF486A2B5C13C00, double 0xBD2D400000000000, double 0x3FF494E1E192AF04, double 0x3D0C200000000000, double 0x3FF4A32AF0D7D372, double 0xBD1E500000000000, double 0x3FF4B17DEA6DB801, double 0x3D07800000000000, double 0x3FF4BFDAD53629E1, double 0xBD13800000000000, double 0x3FF4CE41B817C132, double 0x3D00800000000000, double 0x3FF4DCB299FDDDDB, double 0x3D2C700000000000, double 0x3FF4EB2D81D8AB96, double 0xBD1CE00000000000, double 0x3FF4F9B2769D2D02, double 0x3D19200000000000, double 0x3FF508417F4531C1, double 0xBD08C00000000000, double 0x3FF516DAA2CF662A, double 0xBCFA000000000000, double 0x3FF5257DE83F51EA, double 0x3D4A080000000000, double 0x3FF5342B569D4EDA, double 0xBD26D80000000000, double 0x3FF542E2F4F6AC1A, double 0xBD32440000000000, double 0x3FF551A4CA5D94DB, double 0x3D483C0000000000, double 0x3FF56070DDE9116B, double 0x3D24B00000000000, double 0x3FF56F4736B529DE, double 0x3D415A0000000000, double 0x3FF57E27DBE2C40E, double 0xBD29E00000000000, double 0x3FF58D12D497C76F, double 0xBD23080000000000, double 0x3FF59C0827FF0B4C, double 0x3D4DEC0000000000, double 0x3FF5AB07DD485427, double 0xBCC4000000000000, double 0x3FF5BA11FBA87AF4, double 0x3D30080000000000, double 0x3FF5C9268A59460B, double 0xBD26C80000000000, double 0x3FF5D84590998E3F, double 0x3D469A0000000000, double 0x3FF5E76F15AD20E1, double 0xBD1B400000000000, double 0x3FF5F6A320DCEBCA, double 0x3D17700000000000, double 0x3FF605E1B976DCB8, double 0x3D26F80000000000, double 0x3FF6152AE6CDF715, double 0x3D01000000000000, double 0x3FF6247EB03A5531, double 0xBD15D00000000000, double 0x3FF633DD1D1929B5, double 0xBD12D00000000000, double 0x3FF6434634CCC313, double 0xBCEA800000000000, double 0x3FF652B9FEBC8EFA, double 0xBD28600000000000, double 0x3FF6623882553397, double 0x3D71FE0000000000, double 0x3FF671C1C708328E, double 0xBD37200000000000, double 0x3FF68155D44CA97E, double 0x3CE6800000000000, double 0x3FF690F4B19E9471, double 0xBD29780000000000], align 8
@167 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@168 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@169 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.udivmodei4.endian = internal unnamed_addr constant i1 true, align 1
@compiler_rt.udivmodei4.max_limbs = internal unnamed_addr constant i64 2048, align 8
@170 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@171 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.memcpy_len_mismatch = internal unnamed_addr constant ptr @builtin.panic_messages.memcpy_len_mismatch__anon_3898, align 8
@builtin.panic_messages.memcpy_alias = internal unnamed_addr constant ptr @builtin.panic_messages.memcpy_alias__anon_3899, align 8
@compiler_rt.clear_cache.arch = internal unnamed_addr constant i6 -27, align 1
@compiler_rt.clear_cache.os = internal unnamed_addr constant i6 8, align 1
@debug.panic_stage = internal thread_local unnamed_addr global i64 0, align 8
@debug.panicking = internal unnamed_addr global %"atomic.Atomic.Atomic(u8)" zeroinitializer, align 1
@debug.panic_mutex = internal unnamed_addr global %Thread.Mutex zeroinitializer, align 4
@compiler_rt.udivmod.is_test = internal unnamed_addr constant i1 false, align 1
@"compiler_rt.common.HalveInt(u64,false).bits" = internal unnamed_addr constant i16 32, align 2
@"compiler_rt.common.HalveInt(u128,false).bits" = internal unnamed_addr constant i16 64, align 2
@172 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@173 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@174 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@175 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@176 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@177 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@178 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.rem_pio2f.toint = internal unnamed_addr constant double 0x4338000000000000, align 8
@179 = private unnamed_addr constant [4 x i32] [i32 3, i32 4, i32 4, i32 6], align 4
@180 = private unnamed_addr constant [690 x i32] [i32 10680707, i32 7228996, i32 1387004, i32 2578385, i32 16069853, i32 12639074, i32 9804092, i32 4427841, i32 16666979, i32 11263675, i32 12935607, i32 2387514, i32 4345298, i32 14681673, i32 3074569, i32 13734428, i32 16653803, i32 1880361, i32 10960616, i32 8533493, i32 3062596, i32 8710556, i32 7349940, i32 6258241, i32 3772886, i32 3769171, i32 3798172, i32 8675211, i32 12450088, i32 3874808, i32 9961438, i32 366607, i32 15675153, i32 9132554, i32 7151469, i32 3571407, i32 2607881, i32 12013382, i32 4155038, i32 6285869, i32 7677882, i32 13102053, i32 15825725, i32 473591, i32 9065106, i32 15363067, i32 6271263, i32 9264392, i32 5636912, i32 4652155, i32 7056368, i32 13614112, i32 10155062, i32 1944035, i32 9527646, i32 15080200, i32 6658437, i32 6231200, i32 6832269, i32 16767104, i32 5075751, i32 3212806, i32 1398474, i32 7579849, i32 6349435, i32 12618859, i32 4703257, i32 12806093, i32 14477321, i32 2786137, i32 12875403, i32 9837734, i32 14528324, i32 13719321, i32 343717, i32 16713477, i32 4161075, i32 15217346, i32 14569368, i32 3308987, i32 12795174, i32 15690526, i32 6224031, i32 3809077, i32 13300351, i32 1935345, i32 2199676, i32 8135786, i32 16412373, i32 7810352, i32 4406037, i32 12981429, i32 10295747, i32 12764333, i32 4279596, i32 6094860, i32 4619654, i32 2978275, i32 10143387, i32 25139, i32 8180404, i32 9938868, i32 13980983, i32 16137943, i32 1577123, i32 16545357, i32 2792804, i32 11261808, i32 16284771, i32 5746810, i32 15144215, i32 5654976, i32 14276155, i32 3703975, i32 13312804, i32 7834326, i32 2315354, i32 12132096, i32 1772273, i32 14667289, i32 16724383, i32 6954598, i32 6379417, i32 4717484, i32 14188414, i32 12018978, i32 9037874, i32 6340582, i32 13485295, i32 603756, i32 13909853, i32 14147094, i32 14564184, i32 9608158, i32 2630354, i32 15238696, i32 5069026, i32 3328710, i32 1499912, i32 13336032, i32 5292055, i32 10952179, i32 6021144, i32 3412782, i32 6427267, i32 84099, i32 6000373, i32 8368301, i32 15919390, i32 4409928, i32 13854480, i32 14212522, i32 4349870, i32 13525354, i32 10758154, i32 11835859, i32 15902214, i32 8353628, i32 8635043, i32 8928353, i32 7893898, i32 5934255, i32 12441455, i32 6530605, i32 13352948, i32 15696269, i32 6799654, i32 4573781, i32 3594698, i32 13805608, i32 9265602, i32 7850258, i32 1320452, i32 10176018, i32 12868036, i32 4507080, i32 9548365, i32 15931136, i32 11355092, i32 15026473, i32 1103357, i32 16563712, i32 13407262, i32 15650416, i32 16072211, i32 8450540, i32 12838835, i32 2685127, i32 9700755, i32 4092353, i32 11733294, i32 15942923, i32 10228360, i32 8069291, i32 10466606, i32 12751431, i32 3093115, i32 7165196, i32 9480050, i32 2090859, i32 9882417, i32 4855417, i32 14842177, i32 9035764, i32 9934056, i32 8709858, i32 9908633, i32 7073160, i32 3563359, i32 982459, i32 11835976, i32 7119975, i32 4354673, i32 3300749, i32 12064159, i32 648636, i32 2437517, i32 3765495, i32 1836336, i32 68621, i32 6817867, i32 5828140, i32 9480775, i32 190324, i32 2414269, i32 10911223, i32 7489646, i32 15668895, i32 10917006, i32 16159156, i32 5329873, i32 15862479, i32 3381280, i32 8276981, i32 6841266, i32 6242013, i32 220480, i32 8358277, i32 2708053, i32 12608567, i32 1103981, i32 3295282, i32 7687259, i32 13922638, i32 7230533, i32 12650763, i32 6944042, i32 13985300, i32 10290983, i32 5243997, i32 14367668, i32 12941034, i32 1571207, i32 8219465, i32 12199709, i32 2714006, i32 11324614, i32 5510317, i32 7004816, i32 9034120, i32 5272108, i32 12493828, i32 9701239, i32 7352563, i32 2620416, i32 11039210, i32 4833894, i32 4055140, i32 8641943, i32 9912227, i32 16618563, i32 9209357, i32 14565681, i32 10303890, i32 9203933, i32 15185687, i32 3923720, i32 2832149, i32 10518620, i32 9666650, i32 9572624, i32 14215183, i32 11501676, i32 4980699, i32 1019960, i32 7739481, i32 1418594, i32 12307297, i32 12159431, i32 12402704, i32 324306, i32 2585929, i32 16168683, i32 12264155, i32 11146250, i32 3090057, i32 7766884, i32 3357449, i32 1741838, i32 11156049, i32 12755741, i32 11464111, i32 1189468, i32 5096045, i32 10254893, i32 9918144, i32 8601347, i32 16183305, i32 9191467, i32 10039661, i32 504889, i32 1384460, i32 6013912, i32 12882677, i32 4959686, i32 10865230, i32 13449127, i32 3582438, i32 9736875, i32 6832861, i32 14574361, i32 15699062, i32 5409640, i32 3660796, i32 11248046, i32 3216863, i32 10595840, i32 14351116, i32 6704484, i32 11994605, i32 3171625, i32 12539479, i32 3866439, i32 12188010, i32 15974005, i32 14652200, i32 3178667, i32 16157798, i32 1428228, i32 402170, i32 1959129, i32 10793789, i32 9378647, i32 642358, i32 15286862, i32 10796563, i32 11871027, i32 1747696, i32 11035983, i32 10863058, i32 999179, i32 13465691, i32 7797027, i32 297851, i32 7477129, i32 5482182, i32 14839407, i32 60399, i32 5786267, i32 12049092, i32 12215978, i32 13619062, i32 1901265, i32 3010993, i32 12687756, i32 7843267, i32 14305414, i32 10509815, i32 16023750, i32 3141804, i32 10153181, i32 12344383, i32 7200464, i32 2082704, i32 11983658, i32 3810723, i32 10137344, i32 9655213, i32 284598, i32 11808041, i32 8290379, i32 10946522, i32 961142, i32 10574203, i32 2757142, i32 2996188, i32 16639482, i32 16702345, i32 16629385, i32 7108324, i32 16558342, i32 7372862, i32 1404549, i32 16746493, i32 474664, i32 3368801, i32 8788010, i32 15383885, i32 11528115, i32 7237007, i32 3762069, i32 6012721, i32 4773764, i32 1498928, i32 4402631, i32 3498277, i32 13529289, i32 12110640, i32 16608447, i32 10616996, i32 14969861, i32 10542426, i32 4681505, i32 13767266, i32 8674489, i32 4809072, i32 14702187, i32 86681, i32 3626320, i32 12047646, i32 12906803, i32 6254099, i32 14954589, i32 11087493, i32 12825117, i32 3551905, i32 10794760, i32 13939178, i32 2225942, i32 14969231, i32 7864103, i32 8389388, i32 2965645, i32 10538319, i32 10069280, i32 13869747, i32 679215, i32 4389300, i32 13359633, i32 13680253, i32 12704667, i32 12392363, i32 8495818, i32 6056456, i32 1529134, i32 5570599, i32 15733887, i32 8783841, i32 6556436, i32 9257366, i32 14597767, i32 2817498, i32 11937131, i32 3443067, i32 16708357, i32 10403769, i32 5204584, i32 11020874, i32 5948495, i32 12384301, i32 9984727, i32 9816052, i32 9260301, i32 10893856, i32 6248356, i32 11616020, i32 9779328, i32 73932, i32 8838513, i32 11984585, i32 16081087, i32 1140045, i32 7014145, i32 11317388, i32 13680818, i32 4740433, i32 981790, i32 12808853, i32 3868323, i32 3489984, i32 8117254, i32 13387232, i32 16394574, i32 13159126, i32 4322280, i32 14574716, i32 14181531, i32 3260121, i32 12818340, i32 13916279, i32 12968809, i32 1301232, i32 3947194, i32 4593734, i32 6255957, i32 16104914, i32 13013614, i32 6106796, i32 15549454, i32 4341276, i32 8897633, i32 15334697, i32 15980263, i32 13270050, i32 3510639, i32 12967944, i32 9295871, i32 14838382, i32 13041072, i32 12650643, i32 7626108, i32 11709803, i32 10317517, i32 8090174, i32 6951366, i32 11128823, i32 14644009, i32 12241333, i32 5308599, i32 897762, i32 2407028, i32 6323685, i32 9099380, i32 2888973, i32 792705, i32 9725566, i32 1452289, i32 7764639, i32 12516861, i32 15680854, i32 3571417, i32 1300972, i32 12171915, i32 16553924, i32 2598961, i32 12807921, i32 3589524, i32 5679320, i32 11905204, i32 969935, i32 2984210, i32 3430255, i32 9000492, i32 14929561, i32 12132566, i32 11165291, i32 10234430, i32 13393681, i32 4852733, i32 16512225, i32 7158670, i32 2918114, i32 8705257, i32 11121916, i32 13758191, i32 13186350, i32 6371631, i32 4464952, i32 13162779, i32 720001, i32 6966011, i32 14162991, i32 8696915, i32 9214286, i32 13378132, i32 14439722, i32 14075584, i32 9836811, i32 12087322, i32 6591849, i32 6314534, i32 15618623, i32 987519, i32 1160692, i32 16108540, i32 2997300, i32 15645748, i32 13393384, i32 6315741, i32 10194535, i32 15676306, i32 12064713, i32 10180705, i32 12343265, i32 13009745, i32 1064664, i32 4747741, i32 14490669, i32 10557615, i32 4598817, i32 14152537, i32 9992921, i32 12604574, i32 16418383, i32 16516694, i32 11434469, i32 3547785, i32 2272568, i32 14455655, i32 11200597, i32 3679874, i32 10217418, i32 10751313, i32 11613081, i32 972713, i32 4719977, i32 15774309, i32 10979455, i32 9915528, i32 3592697, i32 11768353, i32 4883067, i32 2215832, i32 14458688, i32 5588956, i32 3831009, i32 4385639, i32 14654974, i32 6280286, i32 10774395, i32 8039610, i32 10679893, i32 2328619, i32 5618241, i32 552537, i32 8792609, i32 8603449, i32 15131529, i32 13934309, i32 4258633, i32 15292159, i32 13242140, i32 9066949, i32 2882196, i32 12960211, i32 13616399, i32 11426523, i32 8832327, i32 6439813, i32 3900961, i32 9730348, i32 8872208, i32 8080426, i32 1715328, i32 1228611, i32 9447048, i32 8993912, i32 14992552, i32 8117221, i32 12729028, i32 15397926, i32 9070583, i32 12554765, i32 2859877, i32 11637565, i32 752829, i32 14438820, i32 6544679, i32 14541161, i32 1676442, i32 9775528, i32 2674280, i32 11857161, i32 2137924, i32 13277262, i32 6521456, i32 2325630, i32 3324175, i32 9368999, i32 15160852, i32 586017, i32 2792885, i32 5078639, i32 5314981, i32 11270581, i32 14081922, i32 6413718, i32 144918, i32 10435268, i32 10592899, i32 7204210, i32 8031545, i32 11122818, i32 6042219, i32 5973830, i32 15545344, i32 7798994, i32 5633276, i32 5069057, i32 8417760], align 4
@181 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.unreach__anon_6090 = internal unnamed_addr constant [25 x i8] c"reached unreachable code\00", align 1
@182 = private unnamed_addr constant [8 x double] [double 0x3FF921FB40000000, double 0x3E74442D00000000, double 0x3CF8469880000000, double 0x3B78CC5160000000, double 0x39F01B8380000000, double 0x387A252040000000, double 0x36E3822280000000, double 0x3569F31D00000000], align 8
@183 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@184 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@debug.panicExtra__anon_4340__anon_6091 = internal unnamed_addr constant [16 x i8] c"(msg truncated)\00", align 1
@185 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.corrupt_switch__anon_6237 = internal unnamed_addr constant [24 x i8] c"switch on corrupt value\00", align 1
@186 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@187 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@188 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.clear_cache.linkage = internal unnamed_addr constant i2 -2, align 1
@189 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.mode = internal unnamed_addr constant i2 0, align 1
@debug.runtime_safety = internal unnamed_addr constant i1 true, align 1
@debug.native_os = internal unnamed_addr constant i6 8, align 1
@debug.have_segfault_handling_support = internal unnamed_addr constant i1 true, align 1
@debug.default_enable_segfault_handler = internal unnamed_addr constant i1 true, align 1
@std.options.enable_segfault_handler = internal unnamed_addr constant i1 true, align 1
@debug.enable_segfault_handler = internal unnamed_addr constant i1 true, align 1
@190 = private unnamed_addr constant %os.linux.Sigaction { %os.linux.Sigaction.Sigaction__union_6246 zeroinitializer, [32 x i32] zeroinitializer, i32 0, [4 x i8] undef, ptr null }, align 8
@builtin.single_threaded = internal unnamed_addr constant i1 false, align 1
@Thread.target = internal unnamed_addr global { %target.Target.Cpu, { { %target.Target.Os.LinuxVersionRange, i2, [7 x i8] }, i6, [7 x i8] }, i6, i4, [6 x i8] } { %target.Target.Cpu { ptr @target.x86.cpu.x86_64, %target.Target.Cpu.Feature.Set { [5 x i64] [i64 37383395344400, i64 -4611686013930960896, i64 285213440, i64 0, i64 0] }, i6 -27, [7 x i8] undef }, { { %target.Target.Os.LinuxVersionRange, i2, [7 x i8] }, i6, [7 x i8] } { { %target.Target.Os.LinuxVersionRange, i2, [7 x i8] } { %target.Target.Os.LinuxVersionRange { %SemanticVersion.Range { %SemanticVersion { i64 3, i64 16, i64 0, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer }, %SemanticVersion { i64 5, i64 10, i64 81, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer } }, %SemanticVersion { i64 2, i64 19, i64 0, { ptr, i64 } zeroinitializer, { ptr, i64 } zeroinitializer } }, i2 -2, [7 x i8] undef }, i6 8, [7 x i8] undef }, i6 0, i4 2, [6 x i8] undef }, align 8
@Thread.Mutex.DebugImpl.lock__anon_6310 = internal unnamed_addr constant [18 x i8] c"Deadlock detected\00", align 1
@191 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@os.is_windows = internal unnamed_addr constant i1 false, align 1
@std.options.io_mode = internal unnamed_addr constant i1 false, align 1
@io.mode = internal unnamed_addr constant i1 false, align 1
@io.is_async = internal unnamed_addr constant i1 false, align 1
@debug.panicImpl__anon_6072 = internal unnamed_addr constant [18 x i8] c"thread {} panic: \00", align 1
@192 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@os.linux.all_mask = internal unnamed_addr constant [32 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 4
@os.abort.global.abort_entered = internal unnamed_addr global i1 false, align 1
@os.abort__anon_6378 = internal unnamed_addr constant %os.linux.Sigaction { %os.linux.Sigaction.Sigaction__union_6246 zeroinitializer, [32 x i32] zeroinitializer, i32 0, [4 x i8] undef, ptr null }, align 8
@193 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@os.abort__anon_6380 = internal unnamed_addr constant [32 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32], align 4
@194 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@debug.panicImpl__anon_6074 = internal unnamed_addr constant [5 x i8] c"{s}\0A\00", align 1
@debug.panicImpl__anon_6076 = internal unnamed_addr constant [36 x i8] c"Panicked during a panic. Aborting.\0A\00", align 1
@compiler_rt.rem_pio2_large.init_jk = internal unnamed_addr constant [4 x i32] [i32 3, i32 4, i32 4, i32 6], align 4
@195 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.rem_pio2_large.ipio2 = internal unnamed_addr constant [690 x i32] [i32 10680707, i32 7228996, i32 1387004, i32 2578385, i32 16069853, i32 12639074, i32 9804092, i32 4427841, i32 16666979, i32 11263675, i32 12935607, i32 2387514, i32 4345298, i32 14681673, i32 3074569, i32 13734428, i32 16653803, i32 1880361, i32 10960616, i32 8533493, i32 3062596, i32 8710556, i32 7349940, i32 6258241, i32 3772886, i32 3769171, i32 3798172, i32 8675211, i32 12450088, i32 3874808, i32 9961438, i32 366607, i32 15675153, i32 9132554, i32 7151469, i32 3571407, i32 2607881, i32 12013382, i32 4155038, i32 6285869, i32 7677882, i32 13102053, i32 15825725, i32 473591, i32 9065106, i32 15363067, i32 6271263, i32 9264392, i32 5636912, i32 4652155, i32 7056368, i32 13614112, i32 10155062, i32 1944035, i32 9527646, i32 15080200, i32 6658437, i32 6231200, i32 6832269, i32 16767104, i32 5075751, i32 3212806, i32 1398474, i32 7579849, i32 6349435, i32 12618859, i32 4703257, i32 12806093, i32 14477321, i32 2786137, i32 12875403, i32 9837734, i32 14528324, i32 13719321, i32 343717, i32 16713477, i32 4161075, i32 15217346, i32 14569368, i32 3308987, i32 12795174, i32 15690526, i32 6224031, i32 3809077, i32 13300351, i32 1935345, i32 2199676, i32 8135786, i32 16412373, i32 7810352, i32 4406037, i32 12981429, i32 10295747, i32 12764333, i32 4279596, i32 6094860, i32 4619654, i32 2978275, i32 10143387, i32 25139, i32 8180404, i32 9938868, i32 13980983, i32 16137943, i32 1577123, i32 16545357, i32 2792804, i32 11261808, i32 16284771, i32 5746810, i32 15144215, i32 5654976, i32 14276155, i32 3703975, i32 13312804, i32 7834326, i32 2315354, i32 12132096, i32 1772273, i32 14667289, i32 16724383, i32 6954598, i32 6379417, i32 4717484, i32 14188414, i32 12018978, i32 9037874, i32 6340582, i32 13485295, i32 603756, i32 13909853, i32 14147094, i32 14564184, i32 9608158, i32 2630354, i32 15238696, i32 5069026, i32 3328710, i32 1499912, i32 13336032, i32 5292055, i32 10952179, i32 6021144, i32 3412782, i32 6427267, i32 84099, i32 6000373, i32 8368301, i32 15919390, i32 4409928, i32 13854480, i32 14212522, i32 4349870, i32 13525354, i32 10758154, i32 11835859, i32 15902214, i32 8353628, i32 8635043, i32 8928353, i32 7893898, i32 5934255, i32 12441455, i32 6530605, i32 13352948, i32 15696269, i32 6799654, i32 4573781, i32 3594698, i32 13805608, i32 9265602, i32 7850258, i32 1320452, i32 10176018, i32 12868036, i32 4507080, i32 9548365, i32 15931136, i32 11355092, i32 15026473, i32 1103357, i32 16563712, i32 13407262, i32 15650416, i32 16072211, i32 8450540, i32 12838835, i32 2685127, i32 9700755, i32 4092353, i32 11733294, i32 15942923, i32 10228360, i32 8069291, i32 10466606, i32 12751431, i32 3093115, i32 7165196, i32 9480050, i32 2090859, i32 9882417, i32 4855417, i32 14842177, i32 9035764, i32 9934056, i32 8709858, i32 9908633, i32 7073160, i32 3563359, i32 982459, i32 11835976, i32 7119975, i32 4354673, i32 3300749, i32 12064159, i32 648636, i32 2437517, i32 3765495, i32 1836336, i32 68621, i32 6817867, i32 5828140, i32 9480775, i32 190324, i32 2414269, i32 10911223, i32 7489646, i32 15668895, i32 10917006, i32 16159156, i32 5329873, i32 15862479, i32 3381280, i32 8276981, i32 6841266, i32 6242013, i32 220480, i32 8358277, i32 2708053, i32 12608567, i32 1103981, i32 3295282, i32 7687259, i32 13922638, i32 7230533, i32 12650763, i32 6944042, i32 13985300, i32 10290983, i32 5243997, i32 14367668, i32 12941034, i32 1571207, i32 8219465, i32 12199709, i32 2714006, i32 11324614, i32 5510317, i32 7004816, i32 9034120, i32 5272108, i32 12493828, i32 9701239, i32 7352563, i32 2620416, i32 11039210, i32 4833894, i32 4055140, i32 8641943, i32 9912227, i32 16618563, i32 9209357, i32 14565681, i32 10303890, i32 9203933, i32 15185687, i32 3923720, i32 2832149, i32 10518620, i32 9666650, i32 9572624, i32 14215183, i32 11501676, i32 4980699, i32 1019960, i32 7739481, i32 1418594, i32 12307297, i32 12159431, i32 12402704, i32 324306, i32 2585929, i32 16168683, i32 12264155, i32 11146250, i32 3090057, i32 7766884, i32 3357449, i32 1741838, i32 11156049, i32 12755741, i32 11464111, i32 1189468, i32 5096045, i32 10254893, i32 9918144, i32 8601347, i32 16183305, i32 9191467, i32 10039661, i32 504889, i32 1384460, i32 6013912, i32 12882677, i32 4959686, i32 10865230, i32 13449127, i32 3582438, i32 9736875, i32 6832861, i32 14574361, i32 15699062, i32 5409640, i32 3660796, i32 11248046, i32 3216863, i32 10595840, i32 14351116, i32 6704484, i32 11994605, i32 3171625, i32 12539479, i32 3866439, i32 12188010, i32 15974005, i32 14652200, i32 3178667, i32 16157798, i32 1428228, i32 402170, i32 1959129, i32 10793789, i32 9378647, i32 642358, i32 15286862, i32 10796563, i32 11871027, i32 1747696, i32 11035983, i32 10863058, i32 999179, i32 13465691, i32 7797027, i32 297851, i32 7477129, i32 5482182, i32 14839407, i32 60399, i32 5786267, i32 12049092, i32 12215978, i32 13619062, i32 1901265, i32 3010993, i32 12687756, i32 7843267, i32 14305414, i32 10509815, i32 16023750, i32 3141804, i32 10153181, i32 12344383, i32 7200464, i32 2082704, i32 11983658, i32 3810723, i32 10137344, i32 9655213, i32 284598, i32 11808041, i32 8290379, i32 10946522, i32 961142, i32 10574203, i32 2757142, i32 2996188, i32 16639482, i32 16702345, i32 16629385, i32 7108324, i32 16558342, i32 7372862, i32 1404549, i32 16746493, i32 474664, i32 3368801, i32 8788010, i32 15383885, i32 11528115, i32 7237007, i32 3762069, i32 6012721, i32 4773764, i32 1498928, i32 4402631, i32 3498277, i32 13529289, i32 12110640, i32 16608447, i32 10616996, i32 14969861, i32 10542426, i32 4681505, i32 13767266, i32 8674489, i32 4809072, i32 14702187, i32 86681, i32 3626320, i32 12047646, i32 12906803, i32 6254099, i32 14954589, i32 11087493, i32 12825117, i32 3551905, i32 10794760, i32 13939178, i32 2225942, i32 14969231, i32 7864103, i32 8389388, i32 2965645, i32 10538319, i32 10069280, i32 13869747, i32 679215, i32 4389300, i32 13359633, i32 13680253, i32 12704667, i32 12392363, i32 8495818, i32 6056456, i32 1529134, i32 5570599, i32 15733887, i32 8783841, i32 6556436, i32 9257366, i32 14597767, i32 2817498, i32 11937131, i32 3443067, i32 16708357, i32 10403769, i32 5204584, i32 11020874, i32 5948495, i32 12384301, i32 9984727, i32 9816052, i32 9260301, i32 10893856, i32 6248356, i32 11616020, i32 9779328, i32 73932, i32 8838513, i32 11984585, i32 16081087, i32 1140045, i32 7014145, i32 11317388, i32 13680818, i32 4740433, i32 981790, i32 12808853, i32 3868323, i32 3489984, i32 8117254, i32 13387232, i32 16394574, i32 13159126, i32 4322280, i32 14574716, i32 14181531, i32 3260121, i32 12818340, i32 13916279, i32 12968809, i32 1301232, i32 3947194, i32 4593734, i32 6255957, i32 16104914, i32 13013614, i32 6106796, i32 15549454, i32 4341276, i32 8897633, i32 15334697, i32 15980263, i32 13270050, i32 3510639, i32 12967944, i32 9295871, i32 14838382, i32 13041072, i32 12650643, i32 7626108, i32 11709803, i32 10317517, i32 8090174, i32 6951366, i32 11128823, i32 14644009, i32 12241333, i32 5308599, i32 897762, i32 2407028, i32 6323685, i32 9099380, i32 2888973, i32 792705, i32 9725566, i32 1452289, i32 7764639, i32 12516861, i32 15680854, i32 3571417, i32 1300972, i32 12171915, i32 16553924, i32 2598961, i32 12807921, i32 3589524, i32 5679320, i32 11905204, i32 969935, i32 2984210, i32 3430255, i32 9000492, i32 14929561, i32 12132566, i32 11165291, i32 10234430, i32 13393681, i32 4852733, i32 16512225, i32 7158670, i32 2918114, i32 8705257, i32 11121916, i32 13758191, i32 13186350, i32 6371631, i32 4464952, i32 13162779, i32 720001, i32 6966011, i32 14162991, i32 8696915, i32 9214286, i32 13378132, i32 14439722, i32 14075584, i32 9836811, i32 12087322, i32 6591849, i32 6314534, i32 15618623, i32 987519, i32 1160692, i32 16108540, i32 2997300, i32 15645748, i32 13393384, i32 6315741, i32 10194535, i32 15676306, i32 12064713, i32 10180705, i32 12343265, i32 13009745, i32 1064664, i32 4747741, i32 14490669, i32 10557615, i32 4598817, i32 14152537, i32 9992921, i32 12604574, i32 16418383, i32 16516694, i32 11434469, i32 3547785, i32 2272568, i32 14455655, i32 11200597, i32 3679874, i32 10217418, i32 10751313, i32 11613081, i32 972713, i32 4719977, i32 15774309, i32 10979455, i32 9915528, i32 3592697, i32 11768353, i32 4883067, i32 2215832, i32 14458688, i32 5588956, i32 3831009, i32 4385639, i32 14654974, i32 6280286, i32 10774395, i32 8039610, i32 10679893, i32 2328619, i32 5618241, i32 552537, i32 8792609, i32 8603449, i32 15131529, i32 13934309, i32 4258633, i32 15292159, i32 13242140, i32 9066949, i32 2882196, i32 12960211, i32 13616399, i32 11426523, i32 8832327, i32 6439813, i32 3900961, i32 9730348, i32 8872208, i32 8080426, i32 1715328, i32 1228611, i32 9447048, i32 8993912, i32 14992552, i32 8117221, i32 12729028, i32 15397926, i32 9070583, i32 12554765, i32 2859877, i32 11637565, i32 752829, i32 14438820, i32 6544679, i32 14541161, i32 1676442, i32 9775528, i32 2674280, i32 11857161, i32 2137924, i32 13277262, i32 6521456, i32 2325630, i32 3324175, i32 9368999, i32 15160852, i32 586017, i32 2792885, i32 5078639, i32 5314981, i32 11270581, i32 14081922, i32 6413718, i32 144918, i32 10435268, i32 10592899, i32 7204210, i32 8031545, i32 11122818, i32 6042219, i32 5973830, i32 15545344, i32 7798994, i32 5633276, i32 5069057, i32 8417760], align 4
@builtin.panic_messages.unreach = internal unnamed_addr constant ptr @builtin.panic_messages.unreach__anon_6090, align 8
@compiler_rt.rem_pio2_large.PIo2 = internal unnamed_addr constant [8 x double] [double 0x3FF921FB40000000, double 0x3E74442D00000000, double 0x3CF8469880000000, double 0x3B78CC5160000000, double 0x39F01B8380000000, double 0x387A252040000000, double 0x36E3822280000000, double 0x3569F31D00000000], align 8
@compiler_rt.rem_pio2.toint = internal unnamed_addr constant double 0x4338000000000000, align 8
@builtin.panicOutOfBounds__anon_4339 = internal unnamed_addr constant [40 x i8] c"index out of bounds: index {d}, len {d}\00", align 1
@196 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@builtin.panic_messages.corrupt_switch = internal unnamed_addr constant ptr @builtin.panic_messages.corrupt_switch__anon_6237, align 8
@builtin.panicStartGreaterThanEnd__anon_4344 = internal unnamed_addr constant [45 x i8] c"start index {d} is larger than end index {d}\00", align 1
@197 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@os.linux.native_arch = internal unnamed_addr constant i6 -27, align 1
@os.linux.is_mips = internal unnamed_addr constant i1 false, align 1
@os.linux.is_sparc = internal unnamed_addr constant i1 false, align 1
@os.linux.SIG__struct_6268.DFL = internal unnamed_addr constant ptr null, align 8
@os.linux.empty_sigset = internal unnamed_addr constant [32 x i32] zeroinitializer, align 4
@os.empty_sigset = internal unnamed_addr constant [32 x i32] zeroinitializer, align 4
@Thread.use_pthreads = internal unnamed_addr constant i1 false, align 1
@Thread.LinuxThreadImpl.tls_thread_id = internal thread_local unnamed_addr global { i32, i8, [3 x i8] } { i32 undef, i8 0, [3 x i8] undef }, align 4
@fmt.max_format_args = internal unnamed_addr constant i16 32, align 2
@198 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 0, i3 1, [1 x i8] undef }, align 2
@199 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 0, i3 2, [1 x i8] undef }, align 2
@200 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 0, i3 3, [1 x i8] undef }, align 2
@201 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 0, i3 -4, [1 x i8] undef }, align 2
@202 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 19, i3 undef, [1 x i8] undef }, align 2
@203 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 20, [6 x i8] undef }, align 8
@204 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@205 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@os.linux.app_mask = internal unnamed_addr constant [32 x i32] [i32 -4, i32 2147483647, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 4
@206 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@207 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@__zig_err_name_table = private unnamed_addr constant ptr @278, align 8
@fmt.formatType__anon_6413__anon_6749 = internal unnamed_addr constant [8 x i8] c"{ ... }\00", align 1
@builtin.strip_debug_info = internal unnamed_addr constant i1 true, align 1
@debug.dumpStackTrace__anon_6417 = internal unnamed_addr constant [49 x i8] c"Unable to dump stack trace: debug info stripped\0A\00", align 1
@208 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@209 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@210 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@"compiler_rt.common.HalveInt(u32,false).bits" = internal unnamed_addr constant i16 16, align 2
@211 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@212 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@fmt.ANY = internal unnamed_addr constant ptr @fmt.ANY__anon_6581, align 8
@fmt.ANY__anon_6581 = internal unnamed_addr constant [4 x i8] c"any\00", align 1
@fmt.digits2__anon_6781 = internal unnamed_addr constant [201 x i8] c"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899\00", align 1
@213 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@214 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@215 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@216 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@217 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@218 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@219 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@220 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 21, [2 x i8] undef }, align 4
@221 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@222 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 22, [2 x i8] undef }, align 4
@223 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 21, [2 x i8] undef }, align 4
@224 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@225 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 22, [2 x i8] undef }, align 4
@226 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 23, [2 x i8] undef }, align 4
@227 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 21, [2 x i8] undef }, align 4
@228 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@229 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 22, [2 x i8] undef }, align 4
@230 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 24, [2 x i8] undef }, align 4
@os.unexpected_error_tracing = internal unnamed_addr constant i1 true, align 1
@debug.stderr_mutex = internal unnamed_addr global %Thread.Mutex zeroinitializer, align 4
@builtin.panicUnwrapError__anon_6674 = internal unnamed_addr constant [29 x i8] c"attempt to unwrap error: {s}\00", align 1
@231 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@232 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@233 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 0, i16 0, [6 x i8] undef }, align 8
@234 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 6, [6 x i8] undef }, align 8
@235 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@fs.file.is_windows = internal unnamed_addr constant i1 false, align 1
@236 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 0, i16 0, [6 x i8] undef }, align 8
@237 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 8, [6 x i8] undef }, align 8
@238 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@239 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 15, [6 x i8] undef }, align 8
@240 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 13, [6 x i8] undef }, align 8
@241 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 3, [6 x i8] undef }, align 8
@242 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 4, [6 x i8] undef }, align 8
@243 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 5, [6 x i8] undef }, align 8
@244 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 6, [6 x i8] undef }, align 8
@245 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 9, [6 x i8] undef }, align 8
@246 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 10, [6 x i8] undef }, align 8
@247 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 16, [6 x i8] undef }, align 8
@248 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 7, [6 x i8] undef }, align 8
@os.unexpectedErrno__anon_6783 = internal unnamed_addr constant [23 x i8] c"unexpected errno: {d}\0A\00", align 1
@249 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@250 = private unnamed_addr constant { i32, i8, [3 x i8] } { i32 undef, i8 0, [3 x i8] undef }, align 4
@251 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@252 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@253 = private unnamed_addr constant [9 x i8] c"Overflow\00", align 1
@254 = private unnamed_addr constant [15 x i8] c"DivisionByZero\00", align 1
@255 = private unnamed_addr constant [10 x i8] c"DiskQuota\00", align 1
@256 = private unnamed_addr constant [11 x i8] c"FileTooBig\00", align 1
@257 = private unnamed_addr constant [12 x i8] c"InputOutput\00", align 1
@258 = private unnamed_addr constant [12 x i8] c"NoSpaceLeft\00", align 1
@259 = private unnamed_addr constant [11 x i8] c"DeviceBusy\00", align 1
@260 = private unnamed_addr constant [16 x i8] c"InvalidArgument\00", align 1
@261 = private unnamed_addr constant [13 x i8] c"AccessDenied\00", align 1
@262 = private unnamed_addr constant [11 x i8] c"BrokenPipe\00", align 1
@263 = private unnamed_addr constant [16 x i8] c"SystemResources\00", align 1
@264 = private unnamed_addr constant [17 x i8] c"OperationAborted\00", align 1
@265 = private unnamed_addr constant [18 x i8] c"NotOpenForWriting\00", align 1
@266 = private unnamed_addr constant [14 x i8] c"LockViolation\00", align 1
@267 = private unnamed_addr constant [11 x i8] c"WouldBlock\00", align 1
@268 = private unnamed_addr constant [22 x i8] c"ConnectionResetByPeer\00", align 1
@269 = private unnamed_addr constant [11 x i8] c"Unexpected\00", align 1
@270 = private unnamed_addr constant [22 x i8] c"OperationNotSupported\00", align 1
@271 = private unnamed_addr constant [21 x i8] c"Utf8InvalidStartByte\00", align 1
@272 = private unnamed_addr constant [15 x i8] c"TruncatedInput\00", align 1
@273 = private unnamed_addr constant [25 x i8] c"Utf8ExpectedContinuation\00", align 1
@274 = private unnamed_addr constant [21 x i8] c"Utf8OverlongEncoding\00", align 1
@275 = private unnamed_addr constant [25 x i8] c"Utf8EncodesSurrogateHalf\00", align 1
@276 = private unnamed_addr constant [22 x i8] c"Utf8CodepointTooLarge\00", align 1
@277 = private unnamed_addr constant [8 x i8] c"Timeout\00", align 1
@278 = private unnamed_addr constant [26 x { ptr, i64 }] [{ ptr, i64 } undef, { ptr, i64 } { ptr @253, i64 8 }, { ptr, i64 } { ptr @254, i64 14 }, { ptr, i64 } { ptr @255, i64 9 }, { ptr, i64 } { ptr @256, i64 10 }, { ptr, i64 } { ptr @257, i64 11 }, { ptr, i64 } { ptr @258, i64 11 }, { ptr, i64 } { ptr @259, i64 10 }, { ptr, i64 } { ptr @260, i64 15 }, { ptr, i64 } { ptr @261, i64 12 }, { ptr, i64 } { ptr @262, i64 10 }, { ptr, i64 } { ptr @263, i64 15 }, { ptr, i64 } { ptr @264, i64 16 }, { ptr, i64 } { ptr @265, i64 17 }, { ptr, i64 } { ptr @266, i64 13 }, { ptr, i64 } { ptr @267, i64 10 }, { ptr, i64 } { ptr @268, i64 21 }, { ptr, i64 } { ptr @269, i64 10 }, { ptr, i64 } { ptr @270, i64 21 }, { ptr, i64 } { ptr @271, i64 20 }, { ptr, i64 } { ptr @272, i64 14 }, { ptr, i64 } { ptr @273, i64 24 }, { ptr, i64 } { ptr @274, i64 20 }, { ptr, i64 } { ptr @275, i64 24 }, { ptr, i64 } { ptr @276, i64 21 }, { ptr, i64 } { ptr @277, i64 7 }], align 8

; Function Attrs: nounwind uwtable
define dso_local ptr @boolToStrZig(i1 zeroext %0) #0 {
  br i1 %0, label %2, label %3

2:                                                ; preds = %1
  ret ptr @main.boolToStrZig__anon_3352

3:                                                ; preds = %1
  ret ptr @main.boolToStrZig__anon_3353
}

; Function Attrs: nounwind uwtable
define dso_local i32 @add(i32 %0, i32 %1) #0 {
  %3 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %0, i32 %1)
  %4 = extractvalue { i32, i1 } %3, 1
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

6:                                                ; preds = %2
  %7 = extractvalue { i32, i1 } %3, 0
  ret i32 %7
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #1

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @builtin.default_panic(ptr nonnull readonly align 1 %0, i64 %1, ptr align 8 %2, ptr nonnull readonly align 8 %3) unnamed_addr #2 {
  %5 = alloca { i64, i8, [7 x i8] }, align 8
  %6 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %7 = insertvalue { ptr, i64 } %6, i64 %1, 1
  %8 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 1
  %9 = load i8, ptr %8, align 1
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %17, label %20

11:                                               ; preds = %20, %17
  %12 = phi i64 [ %19, %17 ], [ %22, %20 ]
  %13 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %5, i32 0, i32 0
  store i64 %12, ptr %13, align 8
  %14 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %5, i32 0, i32 1
  store i8 1, ptr %14, align 1
  %15 = extractvalue { ptr, i64 } %7, 0
  %16 = extractvalue { ptr, i64 } %7, 1
  call fastcc void @debug.panicImpl(ptr readonly align 8 %2, ptr nonnull readonly align 8 %5, ptr nonnull readonly align 1 %15, i64 %16)
  unreachable

17:                                               ; preds = %4
  %18 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 0
  %19 = load i64, ptr %18, align 8
  br label %11

20:                                               ; preds = %4
  %21 = call fastcc ptr @llvm.returnaddress(i32 0)
  %22 = ptrtoint ptr %21 to i64
  br label %11
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__clzsi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, ptr %4, align 4
  store i32 %0, ptr %4, align 4
  store i32 32, ptr %3, align 4
  store i32 0, ptr %2, align 4
  %5 = load i32, ptr %4, align 4
  %6 = lshr i32 %5, 16
  store i32 %6, ptr %2, align 4
  %7 = load i32, ptr %2, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %14, label %18

9:                                                ; preds = %18, %20
  %10 = load i32, ptr %4, align 4
  %11 = lshr i32 %10, 8
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %28, label %32

14:                                               ; preds = %1
  %15 = load i32, ptr %3, align 4
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 16)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %19, label %20

18:                                               ; preds = %1
  br label %9

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i32, i1 } %16, 0
  store i32 %21, ptr %3, align 4
  %22 = load i32, ptr %2, align 4
  store i32 %22, ptr %4, align 4
  br label %9

23:                                               ; preds = %32, %34
  %24 = load i32, ptr %4, align 4
  %25 = lshr i32 %24, 4
  store i32 %25, ptr %2, align 4
  %26 = load i32, ptr %2, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %42, label %46

28:                                               ; preds = %9
  %29 = load i32, ptr %3, align 4
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %29, i32 8)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %33, label %34

32:                                               ; preds = %9
  br label %23

33:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

34:                                               ; preds = %28
  %35 = extractvalue { i32, i1 } %30, 0
  store i32 %35, ptr %3, align 4
  %36 = load i32, ptr %2, align 4
  store i32 %36, ptr %4, align 4
  br label %23

37:                                               ; preds = %46, %48
  %38 = load i32, ptr %4, align 4
  %39 = lshr i32 %38, 2
  store i32 %39, ptr %2, align 4
  %40 = load i32, ptr %2, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %56, label %60

42:                                               ; preds = %23
  %43 = load i32, ptr %3, align 4
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %43, i32 4)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %23
  br label %37

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i32, i1 } %44, 0
  store i32 %49, ptr %3, align 4
  %50 = load i32, ptr %2, align 4
  store i32 %50, ptr %4, align 4
  br label %37

51:                                               ; preds = %60, %62
  %52 = load i32, ptr %4, align 4
  %53 = lshr i32 %52, 1
  store i32 %53, ptr %2, align 4
  %54 = load i32, ptr %2, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %69, label %73

56:                                               ; preds = %37
  %57 = load i32, ptr %3, align 4
  %58 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %57, i32 2)
  %59 = extractvalue { i32, i1 } %58, 1
  br i1 %59, label %61, label %62

60:                                               ; preds = %37
  br label %51

61:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %56
  %63 = extractvalue { i32, i1 } %58, 0
  store i32 %63, ptr %3, align 4
  %64 = load i32, ptr %2, align 4
  store i32 %64, ptr %4, align 4
  br label %51

65:                                               ; preds = %73, %75
  %66 = load i32, ptr %4, align 4
  store i32 %66, ptr %2, align 4
  %67 = load i32, ptr %2, align 4
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %83, label %86

69:                                               ; preds = %51
  %70 = load i32, ptr %3, align 4
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %70, i32 1)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %74, label %75

73:                                               ; preds = %51
  br label %65

74:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %69
  %76 = extractvalue { i32, i1 } %71, 0
  store i32 %76, ptr %3, align 4
  %77 = load i32, ptr %2, align 4
  store i32 %77, ptr %4, align 4
  br label %65

78:                                               ; preds = %86, %83
  %79 = load i32, ptr %3, align 4
  %80 = load i32, ptr %4, align 4
  %81 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %79, i32 %80)
  %82 = extractvalue { i32, i1 } %81, 1
  br i1 %82, label %87, label %88

83:                                               ; preds = %65
  %84 = load i32, ptr %3, align 4
  store i32 %84, ptr %3, align 4
  %85 = load i32, ptr %2, align 4
  store i32 %85, ptr %4, align 4
  br label %78

86:                                               ; preds = %65
  br label %78

87:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %78
  %89 = extractvalue { i32, i1 } %81, 0
  ret i32 %89
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__clzdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, ptr %4, align 8
  store i64 %0, ptr %4, align 8
  store i64 64, ptr %3, align 8
  store i64 0, ptr %2, align 8
  %5 = load i64, ptr %4, align 8
  %6 = lshr i64 %5, 32
  store i64 %6, ptr %2, align 8
  %7 = load i64, ptr %2, align 8
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %14, label %18

9:                                                ; preds = %18, %20
  %10 = load i64, ptr %4, align 8
  %11 = lshr i64 %10, 16
  store i64 %11, ptr %2, align 8
  %12 = load i64, ptr %2, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %28, label %32

14:                                               ; preds = %1
  %15 = load i64, ptr %3, align 8
  %16 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %15, i64 32)
  %17 = extractvalue { i64, i1 } %16, 1
  br i1 %17, label %19, label %20

18:                                               ; preds = %1
  br label %9

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i64, i1 } %16, 0
  store i64 %21, ptr %3, align 8
  %22 = load i64, ptr %2, align 8
  store i64 %22, ptr %4, align 8
  br label %9

23:                                               ; preds = %32, %34
  %24 = load i64, ptr %4, align 8
  %25 = lshr i64 %24, 8
  store i64 %25, ptr %2, align 8
  %26 = load i64, ptr %2, align 8
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %42, label %46

28:                                               ; preds = %9
  %29 = load i64, ptr %3, align 8
  %30 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %29, i64 16)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %33, label %34

32:                                               ; preds = %9
  br label %23

33:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

34:                                               ; preds = %28
  %35 = extractvalue { i64, i1 } %30, 0
  store i64 %35, ptr %3, align 8
  %36 = load i64, ptr %2, align 8
  store i64 %36, ptr %4, align 8
  br label %23

37:                                               ; preds = %46, %48
  %38 = load i64, ptr %4, align 8
  %39 = lshr i64 %38, 4
  store i64 %39, ptr %2, align 8
  %40 = load i64, ptr %2, align 8
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %56, label %60

42:                                               ; preds = %23
  %43 = load i64, ptr %3, align 8
  %44 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %43, i64 8)
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %23
  br label %37

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i64, i1 } %44, 0
  store i64 %49, ptr %3, align 8
  %50 = load i64, ptr %2, align 8
  store i64 %50, ptr %4, align 8
  br label %37

51:                                               ; preds = %60, %62
  %52 = load i64, ptr %4, align 8
  %53 = lshr i64 %52, 2
  store i64 %53, ptr %2, align 8
  %54 = load i64, ptr %2, align 8
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %70, label %74

56:                                               ; preds = %37
  %57 = load i64, ptr %3, align 8
  %58 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  br i1 %59, label %61, label %62

60:                                               ; preds = %37
  br label %51

61:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %56
  %63 = extractvalue { i64, i1 } %58, 0
  store i64 %63, ptr %3, align 8
  %64 = load i64, ptr %2, align 8
  store i64 %64, ptr %4, align 8
  br label %51

65:                                               ; preds = %74, %76
  %66 = load i64, ptr %4, align 8
  %67 = lshr i64 %66, 1
  store i64 %67, ptr %2, align 8
  %68 = load i64, ptr %2, align 8
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %83, label %87

70:                                               ; preds = %51
  %71 = load i64, ptr %3, align 8
  %72 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %71, i64 2)
  %73 = extractvalue { i64, i1 } %72, 1
  br i1 %73, label %75, label %76

74:                                               ; preds = %51
  br label %65

75:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %70
  %77 = extractvalue { i64, i1 } %72, 0
  store i64 %77, ptr %3, align 8
  %78 = load i64, ptr %2, align 8
  store i64 %78, ptr %4, align 8
  br label %65

79:                                               ; preds = %87, %89
  %80 = load i64, ptr %4, align 8
  store i64 %80, ptr %2, align 8
  %81 = load i64, ptr %2, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %97, label %100

83:                                               ; preds = %65
  %84 = load i64, ptr %3, align 8
  %85 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %84, i64 1)
  %86 = extractvalue { i64, i1 } %85, 1
  br i1 %86, label %88, label %89

87:                                               ; preds = %65
  br label %79

88:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

89:                                               ; preds = %83
  %90 = extractvalue { i64, i1 } %85, 0
  store i64 %90, ptr %3, align 8
  %91 = load i64, ptr %2, align 8
  store i64 %91, ptr %4, align 8
  br label %79

92:                                               ; preds = %100, %97
  %93 = load i64, ptr %3, align 8
  %94 = load i64, ptr %4, align 8
  %95 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %93, i64 %94)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %101, label %102

97:                                               ; preds = %79
  %98 = load i64, ptr %3, align 8
  store i64 %98, ptr %3, align 8
  %99 = load i64, ptr %2, align 8
  store i64 %99, ptr %4, align 8
  br label %92

100:                                              ; preds = %79
  br label %92

101:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %92
  %103 = extractvalue { i64, i1 } %95, 0
  %104 = sub i64 2147483647, %103
  %105 = icmp ule i64 %104, 4294967295
  br i1 %105, label %108, label %109

106:                                              ; preds = %108
  %107 = trunc i64 %103 to i32
  ret i32 %107

108:                                              ; preds = %102
  br label %106

109:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @1)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__clzti2(i128 %0) #0 {
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  store i128 %0, ptr %4, align 8
  store i128 %0, ptr %4, align 8
  store i128 128, ptr %3, align 8
  store i128 0, ptr %2, align 8
  %5 = load i128, ptr %4, align 8
  %6 = lshr i128 %5, 64
  store i128 %6, ptr %2, align 8
  %7 = load i128, ptr %2, align 8
  %8 = icmp ne i128 %7, 0
  br i1 %8, label %14, label %18

9:                                                ; preds = %18, %20
  %10 = load i128, ptr %4, align 8
  %11 = lshr i128 %10, 32
  store i128 %11, ptr %2, align 8
  %12 = load i128, ptr %2, align 8
  %13 = icmp ne i128 %12, 0
  br i1 %13, label %28, label %32

14:                                               ; preds = %1
  %15 = load i128, ptr %3, align 8
  %16 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %15, i128 64)
  %17 = extractvalue { i128, i1 } %16, 1
  br i1 %17, label %19, label %20

18:                                               ; preds = %1
  br label %9

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i128, i1 } %16, 0
  store i128 %21, ptr %3, align 8
  %22 = load i128, ptr %2, align 8
  store i128 %22, ptr %4, align 8
  br label %9

23:                                               ; preds = %32, %34
  %24 = load i128, ptr %4, align 8
  %25 = lshr i128 %24, 16
  store i128 %25, ptr %2, align 8
  %26 = load i128, ptr %2, align 8
  %27 = icmp ne i128 %26, 0
  br i1 %27, label %42, label %46

28:                                               ; preds = %9
  %29 = load i128, ptr %3, align 8
  %30 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %29, i128 32)
  %31 = extractvalue { i128, i1 } %30, 1
  br i1 %31, label %33, label %34

32:                                               ; preds = %9
  br label %23

33:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

34:                                               ; preds = %28
  %35 = extractvalue { i128, i1 } %30, 0
  store i128 %35, ptr %3, align 8
  %36 = load i128, ptr %2, align 8
  store i128 %36, ptr %4, align 8
  br label %23

37:                                               ; preds = %46, %48
  %38 = load i128, ptr %4, align 8
  %39 = lshr i128 %38, 8
  store i128 %39, ptr %2, align 8
  %40 = load i128, ptr %2, align 8
  %41 = icmp ne i128 %40, 0
  br i1 %41, label %56, label %60

42:                                               ; preds = %23
  %43 = load i128, ptr %3, align 8
  %44 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %43, i128 16)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %23
  br label %37

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i128, i1 } %44, 0
  store i128 %49, ptr %3, align 8
  %50 = load i128, ptr %2, align 8
  store i128 %50, ptr %4, align 8
  br label %37

51:                                               ; preds = %60, %62
  %52 = load i128, ptr %4, align 8
  %53 = lshr i128 %52, 4
  store i128 %53, ptr %2, align 8
  %54 = load i128, ptr %2, align 8
  %55 = icmp ne i128 %54, 0
  br i1 %55, label %70, label %74

56:                                               ; preds = %37
  %57 = load i128, ptr %3, align 8
  %58 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %57, i128 8)
  %59 = extractvalue { i128, i1 } %58, 1
  br i1 %59, label %61, label %62

60:                                               ; preds = %37
  br label %51

61:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %56
  %63 = extractvalue { i128, i1 } %58, 0
  store i128 %63, ptr %3, align 8
  %64 = load i128, ptr %2, align 8
  store i128 %64, ptr %4, align 8
  br label %51

65:                                               ; preds = %74, %76
  %66 = load i128, ptr %4, align 8
  %67 = lshr i128 %66, 2
  store i128 %67, ptr %2, align 8
  %68 = load i128, ptr %2, align 8
  %69 = icmp ne i128 %68, 0
  br i1 %69, label %84, label %88

70:                                               ; preds = %51
  %71 = load i128, ptr %3, align 8
  %72 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %71, i128 4)
  %73 = extractvalue { i128, i1 } %72, 1
  br i1 %73, label %75, label %76

74:                                               ; preds = %51
  br label %65

75:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %70
  %77 = extractvalue { i128, i1 } %72, 0
  store i128 %77, ptr %3, align 8
  %78 = load i128, ptr %2, align 8
  store i128 %78, ptr %4, align 8
  br label %65

79:                                               ; preds = %88, %90
  %80 = load i128, ptr %4, align 8
  %81 = lshr i128 %80, 1
  store i128 %81, ptr %2, align 8
  %82 = load i128, ptr %2, align 8
  %83 = icmp ne i128 %82, 0
  br i1 %83, label %97, label %101

84:                                               ; preds = %65
  %85 = load i128, ptr %3, align 8
  %86 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %85, i128 2)
  %87 = extractvalue { i128, i1 } %86, 1
  br i1 %87, label %89, label %90

88:                                               ; preds = %65
  br label %79

89:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %84
  %91 = extractvalue { i128, i1 } %86, 0
  store i128 %91, ptr %3, align 8
  %92 = load i128, ptr %2, align 8
  store i128 %92, ptr %4, align 8
  br label %79

93:                                               ; preds = %101, %103
  %94 = load i128, ptr %4, align 8
  store i128 %94, ptr %2, align 8
  %95 = load i128, ptr %2, align 8
  %96 = icmp ne i128 %95, 0
  br i1 %96, label %111, label %114

97:                                               ; preds = %79
  %98 = load i128, ptr %3, align 8
  %99 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %98, i128 1)
  %100 = extractvalue { i128, i1 } %99, 1
  br i1 %100, label %102, label %103

101:                                              ; preds = %79
  br label %93

102:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %97
  %104 = extractvalue { i128, i1 } %99, 0
  store i128 %104, ptr %3, align 8
  %105 = load i128, ptr %2, align 8
  store i128 %105, ptr %4, align 8
  br label %93

106:                                              ; preds = %114, %111
  %107 = load i128, ptr %3, align 8
  %108 = load i128, ptr %4, align 8
  %109 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %107, i128 %108)
  %110 = extractvalue { i128, i1 } %109, 1
  br i1 %110, label %115, label %116

111:                                              ; preds = %93
  %112 = load i128, ptr %3, align 8
  store i128 %112, ptr %3, align 8
  %113 = load i128, ptr %2, align 8
  store i128 %113, ptr %4, align 8
  br label %106

114:                                              ; preds = %93
  br label %106

115:                                              ; preds = %106
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %106
  %117 = extractvalue { i128, i1 } %109, 0
  %118 = sub i128 2147483647, %117
  %119 = icmp ule i128 %118, 4294967295
  br i1 %119, label %122, label %123

120:                                              ; preds = %122
  %121 = trunc i128 %117 to i32
  ret i32 %121

122:                                              ; preds = %116
  br label %120

123:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @2)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.ssub.with.overflow.i128(i128, i128) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ctzsi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, ptr %4, align 4
  store i32 %0, ptr %4, align 4
  store i32 1, ptr %3, align 4
  store i32 -1, ptr %2, align 4
  %5 = load i32, ptr %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %103, %16
  %8 = phi i32 [ 32, %16 ], [ %104, %103 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i32, ptr %2, align 4
  %11 = lshr i32 %10, 16
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = and i32 %12, %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %29, %31
  %19 = load i32, ptr %2, align 4
  %20 = lshr i32 %19, 8
  store i32 %20, ptr %2, align 4
  %21 = load i32, ptr %4, align 4
  %22 = load i32, ptr %2, align 4
  %23 = and i32 %21, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i32, ptr %3, align 4
  %27 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %26, i32 16)
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i32, i1 } %27, 0
  store i32 %32, ptr %3, align 4
  %33 = load i32, ptr %4, align 4
  %34 = lshr i32 %33, 16
  store i32 %34, ptr %4, align 4
  br label %18

35:                                               ; preds = %46, %48
  %36 = load i32, ptr %2, align 4
  %37 = lshr i32 %36, 4
  store i32 %37, ptr %2, align 4
  %38 = load i32, ptr %4, align 4
  %39 = load i32, ptr %2, align 4
  %40 = and i32 %38, %39
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i32, ptr %3, align 4
  %44 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %43, i32 8)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i32, i1 } %44, 0
  store i32 %49, ptr %3, align 4
  %50 = load i32, ptr %4, align 4
  %51 = lshr i32 %50, 8
  store i32 %51, ptr %4, align 4
  br label %35

52:                                               ; preds = %63, %65
  %53 = load i32, ptr %2, align 4
  %54 = lshr i32 %53, 2
  store i32 %54, ptr %2, align 4
  %55 = load i32, ptr %4, align 4
  %56 = load i32, ptr %2, align 4
  %57 = and i32 %55, %56
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i32, ptr %3, align 4
  %61 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %60, i32 4)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i32, i1 } %61, 0
  store i32 %66, ptr %3, align 4
  %67 = load i32, ptr %4, align 4
  %68 = lshr i32 %67, 4
  store i32 %68, ptr %4, align 4
  br label %52

69:                                               ; preds = %80, %82
  %70 = load i32, ptr %2, align 4
  %71 = lshr i32 %70, 1
  store i32 %71, ptr %2, align 4
  %72 = load i32, ptr %4, align 4
  %73 = load i32, ptr %2, align 4
  %74 = and i32 %72, %73
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %92, label %96

76:                                               ; preds = %52
  %77 = load i32, ptr %3, align 4
  %78 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %77, i32 2)
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i32, i1 } %78, 0
  store i32 %83, ptr %3, align 4
  %84 = load i32, ptr %4, align 4
  %85 = lshr i32 %84, 2
  store i32 %85, ptr %4, align 4
  br label %69

86:                                               ; preds = %96, %98
  %87 = load i32, ptr %3, align 4
  %88 = load i32, ptr %4, align 4
  %89 = and i32 %88, 1
  %90 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %87, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %102, label %103

92:                                               ; preds = %69
  %93 = load i32, ptr %3, align 4
  %94 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %93, i32 1)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %97, label %98

96:                                               ; preds = %69
  br label %86

97:                                               ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %92
  %99 = extractvalue { i32, i1 } %94, 0
  store i32 %99, ptr %3, align 4
  %100 = load i32, ptr %4, align 4
  %101 = lshr i32 %100, 1
  store i32 %101, ptr %4, align 4
  br label %86

102:                                              ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %86
  %104 = extractvalue { i32, i1 } %90, 0
  br label %7
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ctzdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, ptr %4, align 8
  store i64 %0, ptr %4, align 8
  store i64 1, ptr %3, align 8
  store i64 -1, ptr %2, align 8
  %5 = load i64, ptr %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %124, %16
  %8 = phi i32 [ 64, %16 ], [ %125, %124 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i64, ptr %2, align 8
  %11 = lshr i64 %10, 32
  store i64 %11, ptr %2, align 8
  %12 = load i64, ptr %4, align 8
  %13 = load i64, ptr %2, align 8
  %14 = and i64 %12, %13
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %29, %31
  %19 = load i64, ptr %2, align 8
  %20 = lshr i64 %19, 16
  store i64 %20, ptr %2, align 8
  %21 = load i64, ptr %4, align 8
  %22 = load i64, ptr %2, align 8
  %23 = and i64 %21, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i64, ptr %3, align 8
  %27 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %26, i64 32)
  %28 = extractvalue { i64, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i64, i1 } %27, 0
  store i64 %32, ptr %3, align 8
  %33 = load i64, ptr %4, align 8
  %34 = lshr i64 %33, 32
  store i64 %34, ptr %4, align 8
  br label %18

35:                                               ; preds = %46, %48
  %36 = load i64, ptr %2, align 8
  %37 = lshr i64 %36, 8
  store i64 %37, ptr %2, align 8
  %38 = load i64, ptr %4, align 8
  %39 = load i64, ptr %2, align 8
  %40 = and i64 %38, %39
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i64, ptr %3, align 8
  %44 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %43, i64 16)
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i64, i1 } %44, 0
  store i64 %49, ptr %3, align 8
  %50 = load i64, ptr %4, align 8
  %51 = lshr i64 %50, 16
  store i64 %51, ptr %4, align 8
  br label %35

52:                                               ; preds = %63, %65
  %53 = load i64, ptr %2, align 8
  %54 = lshr i64 %53, 4
  store i64 %54, ptr %2, align 8
  %55 = load i64, ptr %4, align 8
  %56 = load i64, ptr %2, align 8
  %57 = and i64 %55, %56
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i64, ptr %3, align 8
  %61 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %60, i64 8)
  %62 = extractvalue { i64, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i64, i1 } %61, 0
  store i64 %66, ptr %3, align 8
  %67 = load i64, ptr %4, align 8
  %68 = lshr i64 %67, 8
  store i64 %68, ptr %4, align 8
  br label %52

69:                                               ; preds = %80, %82
  %70 = load i64, ptr %2, align 8
  %71 = lshr i64 %70, 2
  store i64 %71, ptr %2, align 8
  %72 = load i64, ptr %4, align 8
  %73 = load i64, ptr %2, align 8
  %74 = and i64 %72, %73
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %93, label %97

76:                                               ; preds = %52
  %77 = load i64, ptr %3, align 8
  %78 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %77, i64 4)
  %79 = extractvalue { i64, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i64, i1 } %78, 0
  store i64 %83, ptr %3, align 8
  %84 = load i64, ptr %4, align 8
  %85 = lshr i64 %84, 4
  store i64 %85, ptr %4, align 8
  br label %69

86:                                               ; preds = %97, %99
  %87 = load i64, ptr %2, align 8
  %88 = lshr i64 %87, 1
  store i64 %88, ptr %2, align 8
  %89 = load i64, ptr %4, align 8
  %90 = load i64, ptr %2, align 8
  %91 = and i64 %89, %90
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %109, label %113

93:                                               ; preds = %69
  %94 = load i64, ptr %3, align 8
  %95 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %94, i64 2)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %69
  br label %86

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i64, i1 } %95, 0
  store i64 %100, ptr %3, align 8
  %101 = load i64, ptr %4, align 8
  %102 = lshr i64 %101, 2
  store i64 %102, ptr %4, align 8
  br label %86

103:                                              ; preds = %113, %115
  %104 = load i64, ptr %3, align 8
  %105 = load i64, ptr %4, align 8
  %106 = and i64 %105, 1
  %107 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %104, i64 %106)
  %108 = extractvalue { i64, i1 } %107, 1
  br i1 %108, label %119, label %120

109:                                              ; preds = %86
  %110 = load i64, ptr %3, align 8
  %111 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %110, i64 1)
  %112 = extractvalue { i64, i1 } %111, 1
  br i1 %112, label %114, label %115

113:                                              ; preds = %86
  br label %103

114:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

115:                                              ; preds = %109
  %116 = extractvalue { i64, i1 } %111, 0
  store i64 %116, ptr %3, align 8
  %117 = load i64, ptr %4, align 8
  %118 = lshr i64 %117, 1
  store i64 %118, ptr %4, align 8
  br label %103

119:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

120:                                              ; preds = %103
  %121 = extractvalue { i64, i1 } %107, 0
  %122 = sub i64 2147483647, %121
  %123 = icmp ule i64 %122, 4294967295
  br i1 %123, label %126, label %127

124:                                              ; preds = %126
  %125 = trunc i64 %121 to i32
  br label %7

126:                                              ; preds = %120
  br label %124

127:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @3)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ctzti2(i128 %0) #0 {
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  store i128 %0, ptr %4, align 8
  store i128 %0, ptr %4, align 8
  store i128 1, ptr %3, align 8
  store i128 -1, ptr %2, align 8
  %5 = load i128, ptr %4, align 8
  %6 = icmp eq i128 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %141, %16
  %8 = phi i32 [ 128, %16 ], [ %142, %141 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i128, ptr %2, align 8
  %11 = lshr i128 %10, 64
  store i128 %11, ptr %2, align 8
  %12 = load i128, ptr %4, align 8
  %13 = load i128, ptr %2, align 8
  %14 = and i128 %12, %13
  %15 = icmp eq i128 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %29, %31
  %19 = load i128, ptr %2, align 8
  %20 = lshr i128 %19, 32
  store i128 %20, ptr %2, align 8
  %21 = load i128, ptr %4, align 8
  %22 = load i128, ptr %2, align 8
  %23 = and i128 %21, %22
  %24 = icmp eq i128 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i128, ptr %3, align 8
  %27 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %26, i128 64)
  %28 = extractvalue { i128, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i128, i1 } %27, 0
  store i128 %32, ptr %3, align 8
  %33 = load i128, ptr %4, align 8
  %34 = lshr i128 %33, 64
  store i128 %34, ptr %4, align 8
  br label %18

35:                                               ; preds = %46, %48
  %36 = load i128, ptr %2, align 8
  %37 = lshr i128 %36, 16
  store i128 %37, ptr %2, align 8
  %38 = load i128, ptr %4, align 8
  %39 = load i128, ptr %2, align 8
  %40 = and i128 %38, %39
  %41 = icmp eq i128 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i128, ptr %3, align 8
  %44 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %43, i128 32)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i128, i1 } %44, 0
  store i128 %49, ptr %3, align 8
  %50 = load i128, ptr %4, align 8
  %51 = lshr i128 %50, 32
  store i128 %51, ptr %4, align 8
  br label %35

52:                                               ; preds = %63, %65
  %53 = load i128, ptr %2, align 8
  %54 = lshr i128 %53, 8
  store i128 %54, ptr %2, align 8
  %55 = load i128, ptr %4, align 8
  %56 = load i128, ptr %2, align 8
  %57 = and i128 %55, %56
  %58 = icmp eq i128 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i128, ptr %3, align 8
  %61 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %60, i128 16)
  %62 = extractvalue { i128, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i128, i1 } %61, 0
  store i128 %66, ptr %3, align 8
  %67 = load i128, ptr %4, align 8
  %68 = lshr i128 %67, 16
  store i128 %68, ptr %4, align 8
  br label %52

69:                                               ; preds = %80, %82
  %70 = load i128, ptr %2, align 8
  %71 = lshr i128 %70, 4
  store i128 %71, ptr %2, align 8
  %72 = load i128, ptr %4, align 8
  %73 = load i128, ptr %2, align 8
  %74 = and i128 %72, %73
  %75 = icmp eq i128 %74, 0
  br i1 %75, label %93, label %97

76:                                               ; preds = %52
  %77 = load i128, ptr %3, align 8
  %78 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %77, i128 8)
  %79 = extractvalue { i128, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i128, i1 } %78, 0
  store i128 %83, ptr %3, align 8
  %84 = load i128, ptr %4, align 8
  %85 = lshr i128 %84, 8
  store i128 %85, ptr %4, align 8
  br label %69

86:                                               ; preds = %97, %99
  %87 = load i128, ptr %2, align 8
  %88 = lshr i128 %87, 2
  store i128 %88, ptr %2, align 8
  %89 = load i128, ptr %4, align 8
  %90 = load i128, ptr %2, align 8
  %91 = and i128 %89, %90
  %92 = icmp eq i128 %91, 0
  br i1 %92, label %110, label %114

93:                                               ; preds = %69
  %94 = load i128, ptr %3, align 8
  %95 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %94, i128 4)
  %96 = extractvalue { i128, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %69
  br label %86

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i128, i1 } %95, 0
  store i128 %100, ptr %3, align 8
  %101 = load i128, ptr %4, align 8
  %102 = lshr i128 %101, 4
  store i128 %102, ptr %4, align 8
  br label %86

103:                                              ; preds = %114, %116
  %104 = load i128, ptr %2, align 8
  %105 = lshr i128 %104, 1
  store i128 %105, ptr %2, align 8
  %106 = load i128, ptr %4, align 8
  %107 = load i128, ptr %2, align 8
  %108 = and i128 %106, %107
  %109 = icmp eq i128 %108, 0
  br i1 %109, label %126, label %130

110:                                              ; preds = %86
  %111 = load i128, ptr %3, align 8
  %112 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %111, i128 2)
  %113 = extractvalue { i128, i1 } %112, 1
  br i1 %113, label %115, label %116

114:                                              ; preds = %86
  br label %103

115:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %110
  %117 = extractvalue { i128, i1 } %112, 0
  store i128 %117, ptr %3, align 8
  %118 = load i128, ptr %4, align 8
  %119 = lshr i128 %118, 2
  store i128 %119, ptr %4, align 8
  br label %103

120:                                              ; preds = %130, %132
  %121 = load i128, ptr %3, align 8
  %122 = load i128, ptr %4, align 8
  %123 = and i128 %122, 1
  %124 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %121, i128 %123)
  %125 = extractvalue { i128, i1 } %124, 1
  br i1 %125, label %136, label %137

126:                                              ; preds = %103
  %127 = load i128, ptr %3, align 8
  %128 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %127, i128 1)
  %129 = extractvalue { i128, i1 } %128, 1
  br i1 %129, label %131, label %132

130:                                              ; preds = %103
  br label %120

131:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %126
  %133 = extractvalue { i128, i1 } %128, 0
  store i128 %133, ptr %3, align 8
  %134 = load i128, ptr %4, align 8
  %135 = lshr i128 %134, 1
  store i128 %135, ptr %4, align 8
  br label %120

136:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %120
  %138 = extractvalue { i128, i1 } %124, 0
  %139 = sub i128 2147483647, %138
  %140 = icmp ule i128 %139, 4294967295
  br i1 %140, label %143, label %144

141:                                              ; preds = %143
  %142 = trunc i128 %138 to i32
  br label %7

143:                                              ; preds = %137
  br label %141

144:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @4)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.sadd.with.overflow.i128(i128, i128) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ffssi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, ptr %4, align 4
  store i32 %0, ptr %4, align 4
  store i32 1, ptr %3, align 4
  store i32 -1, ptr %2, align 4
  %5 = load i32, ptr %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %108, %16
  %8 = phi i32 [ 0, %16 ], [ %109, %108 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i32, ptr %2, align 4
  %11 = lshr i32 %10, 16
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = and i32 %12, %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %29, %31
  %19 = load i32, ptr %2, align 4
  %20 = lshr i32 %19, 8
  store i32 %20, ptr %2, align 4
  %21 = load i32, ptr %4, align 4
  %22 = load i32, ptr %2, align 4
  %23 = and i32 %21, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i32, ptr %3, align 4
  %27 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %26, i32 16)
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i32, i1 } %27, 0
  store i32 %32, ptr %3, align 4
  %33 = load i32, ptr %4, align 4
  %34 = lshr i32 %33, 16
  store i32 %34, ptr %4, align 4
  br label %18

35:                                               ; preds = %46, %48
  %36 = load i32, ptr %2, align 4
  %37 = lshr i32 %36, 4
  store i32 %37, ptr %2, align 4
  %38 = load i32, ptr %4, align 4
  %39 = load i32, ptr %2, align 4
  %40 = and i32 %38, %39
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i32, ptr %3, align 4
  %44 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %43, i32 8)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i32, i1 } %44, 0
  store i32 %49, ptr %3, align 4
  %50 = load i32, ptr %4, align 4
  %51 = lshr i32 %50, 8
  store i32 %51, ptr %4, align 4
  br label %35

52:                                               ; preds = %63, %65
  %53 = load i32, ptr %2, align 4
  %54 = lshr i32 %53, 2
  store i32 %54, ptr %2, align 4
  %55 = load i32, ptr %4, align 4
  %56 = load i32, ptr %2, align 4
  %57 = and i32 %55, %56
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i32, ptr %3, align 4
  %61 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %60, i32 4)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i32, i1 } %61, 0
  store i32 %66, ptr %3, align 4
  %67 = load i32, ptr %4, align 4
  %68 = lshr i32 %67, 4
  store i32 %68, ptr %4, align 4
  br label %52

69:                                               ; preds = %80, %82
  %70 = load i32, ptr %2, align 4
  %71 = lshr i32 %70, 1
  store i32 %71, ptr %2, align 4
  %72 = load i32, ptr %4, align 4
  %73 = load i32, ptr %2, align 4
  %74 = and i32 %72, %73
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %92, label %96

76:                                               ; preds = %52
  %77 = load i32, ptr %3, align 4
  %78 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %77, i32 2)
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i32, i1 } %78, 0
  store i32 %83, ptr %3, align 4
  %84 = load i32, ptr %4, align 4
  %85 = lshr i32 %84, 2
  store i32 %85, ptr %4, align 4
  br label %69

86:                                               ; preds = %96, %98
  %87 = load i32, ptr %3, align 4
  %88 = load i32, ptr %4, align 4
  %89 = and i32 %88, 1
  %90 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %87, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %102, label %103

92:                                               ; preds = %69
  %93 = load i32, ptr %3, align 4
  %94 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %93, i32 1)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %97, label %98

96:                                               ; preds = %69
  br label %86

97:                                               ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %92
  %99 = extractvalue { i32, i1 } %94, 0
  store i32 %99, ptr %3, align 4
  %100 = load i32, ptr %4, align 4
  %101 = lshr i32 %100, 1
  store i32 %101, ptr %4, align 4
  br label %86

102:                                              ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %86
  %104 = extractvalue { i32, i1 } %90, 0
  %105 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %104, i32 1)
  %106 = extractvalue { i32, i1 } %105, 1
  br i1 %106, label %107, label %108

107:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

108:                                              ; preds = %103
  %109 = extractvalue { i32, i1 } %105, 0
  br label %7
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ffsdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, ptr %4, align 8
  store i64 %0, ptr %4, align 8
  store i64 1, ptr %3, align 8
  store i64 -1, ptr %2, align 8
  %5 = load i64, ptr %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %131, %16
  %8 = phi i32 [ 0, %16 ], [ %132, %131 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i64, ptr %2, align 8
  %11 = lshr i64 %10, 32
  store i64 %11, ptr %2, align 8
  %12 = load i64, ptr %4, align 8
  %13 = load i64, ptr %2, align 8
  %14 = and i64 %12, %13
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %29, %31
  %19 = load i64, ptr %2, align 8
  %20 = lshr i64 %19, 16
  store i64 %20, ptr %2, align 8
  %21 = load i64, ptr %4, align 8
  %22 = load i64, ptr %2, align 8
  %23 = and i64 %21, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i64, ptr %3, align 8
  %27 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %26, i64 32)
  %28 = extractvalue { i64, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i64, i1 } %27, 0
  store i64 %32, ptr %3, align 8
  %33 = load i64, ptr %4, align 8
  %34 = lshr i64 %33, 32
  store i64 %34, ptr %4, align 8
  br label %18

35:                                               ; preds = %46, %48
  %36 = load i64, ptr %2, align 8
  %37 = lshr i64 %36, 8
  store i64 %37, ptr %2, align 8
  %38 = load i64, ptr %4, align 8
  %39 = load i64, ptr %2, align 8
  %40 = and i64 %38, %39
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i64, ptr %3, align 8
  %44 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %43, i64 16)
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i64, i1 } %44, 0
  store i64 %49, ptr %3, align 8
  %50 = load i64, ptr %4, align 8
  %51 = lshr i64 %50, 16
  store i64 %51, ptr %4, align 8
  br label %35

52:                                               ; preds = %63, %65
  %53 = load i64, ptr %2, align 8
  %54 = lshr i64 %53, 4
  store i64 %54, ptr %2, align 8
  %55 = load i64, ptr %4, align 8
  %56 = load i64, ptr %2, align 8
  %57 = and i64 %55, %56
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i64, ptr %3, align 8
  %61 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %60, i64 8)
  %62 = extractvalue { i64, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i64, i1 } %61, 0
  store i64 %66, ptr %3, align 8
  %67 = load i64, ptr %4, align 8
  %68 = lshr i64 %67, 8
  store i64 %68, ptr %4, align 8
  br label %52

69:                                               ; preds = %80, %82
  %70 = load i64, ptr %2, align 8
  %71 = lshr i64 %70, 2
  store i64 %71, ptr %2, align 8
  %72 = load i64, ptr %4, align 8
  %73 = load i64, ptr %2, align 8
  %74 = and i64 %72, %73
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %93, label %97

76:                                               ; preds = %52
  %77 = load i64, ptr %3, align 8
  %78 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %77, i64 4)
  %79 = extractvalue { i64, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i64, i1 } %78, 0
  store i64 %83, ptr %3, align 8
  %84 = load i64, ptr %4, align 8
  %85 = lshr i64 %84, 4
  store i64 %85, ptr %4, align 8
  br label %69

86:                                               ; preds = %97, %99
  %87 = load i64, ptr %2, align 8
  %88 = lshr i64 %87, 1
  store i64 %88, ptr %2, align 8
  %89 = load i64, ptr %4, align 8
  %90 = load i64, ptr %2, align 8
  %91 = and i64 %89, %90
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %109, label %113

93:                                               ; preds = %69
  %94 = load i64, ptr %3, align 8
  %95 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %94, i64 2)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %69
  br label %86

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i64, i1 } %95, 0
  store i64 %100, ptr %3, align 8
  %101 = load i64, ptr %4, align 8
  %102 = lshr i64 %101, 2
  store i64 %102, ptr %4, align 8
  br label %86

103:                                              ; preds = %113, %115
  %104 = load i64, ptr %3, align 8
  %105 = load i64, ptr %4, align 8
  %106 = and i64 %105, 1
  %107 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %104, i64 %106)
  %108 = extractvalue { i64, i1 } %107, 1
  br i1 %108, label %119, label %120

109:                                              ; preds = %86
  %110 = load i64, ptr %3, align 8
  %111 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %110, i64 1)
  %112 = extractvalue { i64, i1 } %111, 1
  br i1 %112, label %114, label %115

113:                                              ; preds = %86
  br label %103

114:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

115:                                              ; preds = %109
  %116 = extractvalue { i64, i1 } %111, 0
  store i64 %116, ptr %3, align 8
  %117 = load i64, ptr %4, align 8
  %118 = lshr i64 %117, 1
  store i64 %118, ptr %4, align 8
  br label %103

119:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

120:                                              ; preds = %103
  %121 = extractvalue { i64, i1 } %107, 0
  %122 = sub i64 2147483647, %121
  %123 = icmp ule i64 %122, 4294967295
  br i1 %123, label %128, label %129

124:                                              ; preds = %128
  %125 = trunc i64 %121 to i32
  %126 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %125, i32 1)
  %127 = extractvalue { i32, i1 } %126, 1
  br i1 %127, label %130, label %131

128:                                              ; preds = %120
  br label %124

129:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @5)
  unreachable

130:                                              ; preds = %124
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

131:                                              ; preds = %124
  %132 = extractvalue { i32, i1 } %126, 0
  br label %7
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ffsti2(i128 %0) #0 {
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  store i128 %0, ptr %4, align 8
  store i128 %0, ptr %4, align 8
  store i128 1, ptr %3, align 8
  store i128 -1, ptr %2, align 8
  %5 = load i128, ptr %4, align 8
  %6 = icmp eq i128 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %148, %16
  %8 = phi i32 [ 0, %16 ], [ %149, %148 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i128, ptr %2, align 8
  %11 = lshr i128 %10, 64
  store i128 %11, ptr %2, align 8
  %12 = load i128, ptr %4, align 8
  %13 = load i128, ptr %2, align 8
  %14 = and i128 %12, %13
  %15 = icmp eq i128 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %29, %31
  %19 = load i128, ptr %2, align 8
  %20 = lshr i128 %19, 32
  store i128 %20, ptr %2, align 8
  %21 = load i128, ptr %4, align 8
  %22 = load i128, ptr %2, align 8
  %23 = and i128 %21, %22
  %24 = icmp eq i128 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i128, ptr %3, align 8
  %27 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %26, i128 64)
  %28 = extractvalue { i128, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i128, i1 } %27, 0
  store i128 %32, ptr %3, align 8
  %33 = load i128, ptr %4, align 8
  %34 = lshr i128 %33, 64
  store i128 %34, ptr %4, align 8
  br label %18

35:                                               ; preds = %46, %48
  %36 = load i128, ptr %2, align 8
  %37 = lshr i128 %36, 16
  store i128 %37, ptr %2, align 8
  %38 = load i128, ptr %4, align 8
  %39 = load i128, ptr %2, align 8
  %40 = and i128 %38, %39
  %41 = icmp eq i128 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i128, ptr %3, align 8
  %44 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %43, i128 32)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i128, i1 } %44, 0
  store i128 %49, ptr %3, align 8
  %50 = load i128, ptr %4, align 8
  %51 = lshr i128 %50, 32
  store i128 %51, ptr %4, align 8
  br label %35

52:                                               ; preds = %63, %65
  %53 = load i128, ptr %2, align 8
  %54 = lshr i128 %53, 8
  store i128 %54, ptr %2, align 8
  %55 = load i128, ptr %4, align 8
  %56 = load i128, ptr %2, align 8
  %57 = and i128 %55, %56
  %58 = icmp eq i128 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i128, ptr %3, align 8
  %61 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %60, i128 16)
  %62 = extractvalue { i128, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i128, i1 } %61, 0
  store i128 %66, ptr %3, align 8
  %67 = load i128, ptr %4, align 8
  %68 = lshr i128 %67, 16
  store i128 %68, ptr %4, align 8
  br label %52

69:                                               ; preds = %80, %82
  %70 = load i128, ptr %2, align 8
  %71 = lshr i128 %70, 4
  store i128 %71, ptr %2, align 8
  %72 = load i128, ptr %4, align 8
  %73 = load i128, ptr %2, align 8
  %74 = and i128 %72, %73
  %75 = icmp eq i128 %74, 0
  br i1 %75, label %93, label %97

76:                                               ; preds = %52
  %77 = load i128, ptr %3, align 8
  %78 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %77, i128 8)
  %79 = extractvalue { i128, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i128, i1 } %78, 0
  store i128 %83, ptr %3, align 8
  %84 = load i128, ptr %4, align 8
  %85 = lshr i128 %84, 8
  store i128 %85, ptr %4, align 8
  br label %69

86:                                               ; preds = %97, %99
  %87 = load i128, ptr %2, align 8
  %88 = lshr i128 %87, 2
  store i128 %88, ptr %2, align 8
  %89 = load i128, ptr %4, align 8
  %90 = load i128, ptr %2, align 8
  %91 = and i128 %89, %90
  %92 = icmp eq i128 %91, 0
  br i1 %92, label %110, label %114

93:                                               ; preds = %69
  %94 = load i128, ptr %3, align 8
  %95 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %94, i128 4)
  %96 = extractvalue { i128, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %69
  br label %86

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i128, i1 } %95, 0
  store i128 %100, ptr %3, align 8
  %101 = load i128, ptr %4, align 8
  %102 = lshr i128 %101, 4
  store i128 %102, ptr %4, align 8
  br label %86

103:                                              ; preds = %114, %116
  %104 = load i128, ptr %2, align 8
  %105 = lshr i128 %104, 1
  store i128 %105, ptr %2, align 8
  %106 = load i128, ptr %4, align 8
  %107 = load i128, ptr %2, align 8
  %108 = and i128 %106, %107
  %109 = icmp eq i128 %108, 0
  br i1 %109, label %126, label %130

110:                                              ; preds = %86
  %111 = load i128, ptr %3, align 8
  %112 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %111, i128 2)
  %113 = extractvalue { i128, i1 } %112, 1
  br i1 %113, label %115, label %116

114:                                              ; preds = %86
  br label %103

115:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %110
  %117 = extractvalue { i128, i1 } %112, 0
  store i128 %117, ptr %3, align 8
  %118 = load i128, ptr %4, align 8
  %119 = lshr i128 %118, 2
  store i128 %119, ptr %4, align 8
  br label %103

120:                                              ; preds = %130, %132
  %121 = load i128, ptr %3, align 8
  %122 = load i128, ptr %4, align 8
  %123 = and i128 %122, 1
  %124 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %121, i128 %123)
  %125 = extractvalue { i128, i1 } %124, 1
  br i1 %125, label %136, label %137

126:                                              ; preds = %103
  %127 = load i128, ptr %3, align 8
  %128 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %127, i128 1)
  %129 = extractvalue { i128, i1 } %128, 1
  br i1 %129, label %131, label %132

130:                                              ; preds = %103
  br label %120

131:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %126
  %133 = extractvalue { i128, i1 } %128, 0
  store i128 %133, ptr %3, align 8
  %134 = load i128, ptr %4, align 8
  %135 = lshr i128 %134, 1
  store i128 %135, ptr %4, align 8
  br label %120

136:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %120
  %138 = extractvalue { i128, i1 } %124, 0
  %139 = sub i128 2147483647, %138
  %140 = icmp ule i128 %139, 4294967295
  br i1 %140, label %145, label %146

141:                                              ; preds = %145
  %142 = trunc i128 %138 to i32
  %143 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %142, i32 1)
  %144 = extractvalue { i32, i1 } %143, 1
  br i1 %144, label %147, label %148

145:                                              ; preds = %137
  br label %141

146:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @6)
  unreachable

147:                                              ; preds = %141
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

148:                                              ; preds = %141
  %149 = extractvalue { i32, i1 } %143, 0
  br label %7
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__paritysi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = load i32, ptr %2, align 4
  %5 = lshr i32 %4, 16
  %6 = xor i32 %3, %5
  store i32 %6, ptr %2, align 4
  %7 = load i32, ptr %2, align 4
  %8 = load i32, ptr %2, align 4
  %9 = lshr i32 %8, 8
  %10 = xor i32 %7, %9
  store i32 %10, ptr %2, align 4
  %11 = load i32, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = lshr i32 %12, 4
  %14 = xor i32 %11, %13
  store i32 %14, ptr %2, align 4
  %15 = load i32, ptr %2, align 4
  %16 = and i32 %15, 15
  store i32 %16, ptr %2, align 4
  %17 = load i32, ptr %2, align 4
  %18 = sub i32 15, %17
  %19 = icmp ule i32 %18, 15
  br i1 %19, label %26, label %27

20:                                               ; preds = %26
  %21 = trunc i32 %17 to i4
  %22 = zext i4 %21 to i16
  %23 = lshr i16 27030, %22
  %24 = and i16 %23, 1
  %25 = zext i16 %24 to i32
  ret i32 %25

26:                                               ; preds = %1
  br label %20

27:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @7)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__paritydi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, ptr %2, align 8
  store i64 %0, ptr %2, align 8
  %3 = load i64, ptr %2, align 8
  %4 = load i64, ptr %2, align 8
  %5 = lshr i64 %4, 32
  %6 = xor i64 %3, %5
  store i64 %6, ptr %2, align 8
  %7 = load i64, ptr %2, align 8
  %8 = load i64, ptr %2, align 8
  %9 = lshr i64 %8, 16
  %10 = xor i64 %7, %9
  store i64 %10, ptr %2, align 8
  %11 = load i64, ptr %2, align 8
  %12 = load i64, ptr %2, align 8
  %13 = lshr i64 %12, 8
  %14 = xor i64 %11, %13
  store i64 %14, ptr %2, align 8
  %15 = load i64, ptr %2, align 8
  %16 = load i64, ptr %2, align 8
  %17 = lshr i64 %16, 4
  %18 = xor i64 %15, %17
  store i64 %18, ptr %2, align 8
  %19 = load i64, ptr %2, align 8
  %20 = and i64 %19, 15
  store i64 %20, ptr %2, align 8
  %21 = load i64, ptr %2, align 8
  %22 = sub i64 15, %21
  %23 = icmp ule i64 %22, 15
  br i1 %23, label %30, label %31

24:                                               ; preds = %30
  %25 = trunc i64 %21 to i4
  %26 = zext i4 %25 to i16
  %27 = lshr i16 27030, %26
  %28 = and i16 %27, 1
  %29 = zext i16 %28 to i32
  ret i32 %29

30:                                               ; preds = %1
  br label %24

31:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @8)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__parityti2(i128 %0) #0 {
  %2 = alloca i128, align 8
  store i128 %0, ptr %2, align 8
  store i128 %0, ptr %2, align 8
  %3 = load i128, ptr %2, align 8
  %4 = load i128, ptr %2, align 8
  %5 = lshr i128 %4, 64
  %6 = xor i128 %3, %5
  store i128 %6, ptr %2, align 8
  %7 = load i128, ptr %2, align 8
  %8 = load i128, ptr %2, align 8
  %9 = lshr i128 %8, 32
  %10 = xor i128 %7, %9
  store i128 %10, ptr %2, align 8
  %11 = load i128, ptr %2, align 8
  %12 = load i128, ptr %2, align 8
  %13 = lshr i128 %12, 16
  %14 = xor i128 %11, %13
  store i128 %14, ptr %2, align 8
  %15 = load i128, ptr %2, align 8
  %16 = load i128, ptr %2, align 8
  %17 = lshr i128 %16, 8
  %18 = xor i128 %15, %17
  store i128 %18, ptr %2, align 8
  %19 = load i128, ptr %2, align 8
  %20 = load i128, ptr %2, align 8
  %21 = lshr i128 %20, 4
  %22 = xor i128 %19, %21
  store i128 %22, ptr %2, align 8
  %23 = load i128, ptr %2, align 8
  %24 = and i128 %23, 15
  store i128 %24, ptr %2, align 8
  %25 = load i128, ptr %2, align 8
  %26 = sub i128 15, %25
  %27 = icmp ule i128 %26, 15
  br i1 %27, label %34, label %35

28:                                               ; preds = %34
  %29 = trunc i128 %25 to i4
  %30 = zext i4 %29 to i16
  %31 = lshr i16 27030, %30
  %32 = and i16 %31, 1
  %33 = zext i16 %32 to i32
  ret i32 %33

34:                                               ; preds = %1
  br label %28

35:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @9)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__popcountsi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = load i32, ptr %2, align 4
  %5 = lshr i32 %4, 1
  %6 = and i32 %5, 1431655765
  %7 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %3, i32 %6)
  %8 = extractvalue { i32, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %1
  %11 = extractvalue { i32, i1 } %7, 0
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = lshr i32 %12, 2
  %14 = and i32 %13, 858993459
  %15 = load i32, ptr %2, align 4
  %16 = and i32 %15, 858993459
  %17 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %14, i32 %16)
  %18 = extractvalue { i32, i1 } %17, 1
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %10
  %21 = extractvalue { i32, i1 } %17, 0
  store i32 %21, ptr %2, align 4
  %22 = load i32, ptr %2, align 4
  %23 = load i32, ptr %2, align 4
  %24 = lshr i32 %23, 4
  %25 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %22, i32 %24)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %20
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %20
  %29 = extractvalue { i32, i1 } %25, 0
  store i32 %29, ptr %2, align 4
  %30 = load i32, ptr %2, align 4
  %31 = and i32 %30, 252645135
  store i32 %31, ptr %2, align 4
  %32 = load i32, ptr %2, align 4
  %33 = mul i32 %32, 16843009
  store i32 %33, ptr %2, align 4
  %34 = load i32, ptr %2, align 4
  %35 = lshr i32 %34, 24
  store i32 %35, ptr %2, align 4
  %36 = load i32, ptr %2, align 4
  %37 = sub i32 2147483647, %36
  %38 = icmp ule i32 %37, 2147483647
  br i1 %38, label %40, label %41

39:                                               ; preds = %40
  ret i32 %36

40:                                               ; preds = %28
  br label %39

41:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @10)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.usub.with.overflow.i32(i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__popcountdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, ptr %2, align 8
  %3 = load i64, ptr %2, align 8
  %4 = load i64, ptr %2, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %5, 6148914691236517205
  %7 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %3, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %1
  %11 = extractvalue { i64, i1 } %7, 0
  store i64 %11, ptr %2, align 8
  %12 = load i64, ptr %2, align 8
  %13 = lshr i64 %12, 2
  %14 = and i64 %13, 3689348814741910323
  %15 = load i64, ptr %2, align 8
  %16 = and i64 %15, 3689348814741910323
  %17 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %14, i64 %16)
  %18 = extractvalue { i64, i1 } %17, 1
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %10
  %21 = extractvalue { i64, i1 } %17, 0
  store i64 %21, ptr %2, align 8
  %22 = load i64, ptr %2, align 8
  %23 = load i64, ptr %2, align 8
  %24 = lshr i64 %23, 4
  %25 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %22, i64 %24)
  %26 = extractvalue { i64, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %20
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %20
  %29 = extractvalue { i64, i1 } %25, 0
  store i64 %29, ptr %2, align 8
  %30 = load i64, ptr %2, align 8
  %31 = and i64 %30, 1085102592571150095
  store i64 %31, ptr %2, align 8
  %32 = load i64, ptr %2, align 8
  %33 = mul i64 %32, 72340172838076673
  store i64 %33, ptr %2, align 8
  %34 = load i64, ptr %2, align 8
  %35 = lshr i64 %34, 56
  store i64 %35, ptr %2, align 8
  %36 = load i64, ptr %2, align 8
  %37 = sub i64 2147483647, %36
  %38 = icmp ule i64 %37, 2147483647
  br i1 %38, label %41, label %42

39:                                               ; preds = %41
  %40 = trunc i64 %36 to i32
  ret i32 %40

41:                                               ; preds = %28
  br label %39

42:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @11)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__popcountti2(i128 %0) #0 {
  %2 = alloca i128, align 8
  store i128 %0, ptr %2, align 8
  %3 = load i128, ptr %2, align 8
  %4 = load i128, ptr %2, align 8
  %5 = lshr i128 %4, 1
  %6 = and i128 %5, 113427455640312821154458202477256070485
  %7 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 %3, i128 %6)
  %8 = extractvalue { i128, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %1
  %11 = extractvalue { i128, i1 } %7, 0
  store i128 %11, ptr %2, align 8
  %12 = load i128, ptr %2, align 8
  %13 = lshr i128 %12, 2
  %14 = and i128 %13, 68056473384187692692674921486353642291
  %15 = load i128, ptr %2, align 8
  %16 = and i128 %15, 68056473384187692692674921486353642291
  %17 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %14, i128 %16)
  %18 = extractvalue { i128, i1 } %17, 1
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %10
  %21 = extractvalue { i128, i1 } %17, 0
  store i128 %21, ptr %2, align 8
  %22 = load i128, ptr %2, align 8
  %23 = load i128, ptr %2, align 8
  %24 = lshr i128 %23, 4
  %25 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %22, i128 %24)
  %26 = extractvalue { i128, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %20
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %20
  %29 = extractvalue { i128, i1 } %25, 0
  store i128 %29, ptr %2, align 8
  %30 = load i128, ptr %2, align 8
  %31 = and i128 %30, 20016609818878733144904388672456953615
  store i128 %31, ptr %2, align 8
  %32 = load i128, ptr %2, align 8
  %33 = mul i128 %32, 1334440654591915542993625911497130241
  store i128 %33, ptr %2, align 8
  %34 = load i128, ptr %2, align 8
  %35 = lshr i128 %34, 120
  store i128 %35, ptr %2, align 8
  %36 = load i128, ptr %2, align 8
  %37 = sub i128 2147483647, %36
  %38 = icmp ule i128 %37, 2147483647
  br i1 %38, label %41, label %42

39:                                               ; preds = %41
  %40 = trunc i128 %36 to i32
  ret i32 %40

41:                                               ; preds = %28
  br label %39

42:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @12)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.usub.with.overflow.i128(i128, i128) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.uadd.with.overflow.i128(i128, i128) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__bswapsi2(i32 %0) #0 {
  %2 = and i32 %0, -16777216
  %3 = lshr i32 %2, 24
  %4 = and i32 %0, 16711680
  %5 = lshr i32 %4, 8
  %6 = or i32 %3, %5
  %7 = and i32 %0, 65280
  %8 = shl i32 %7, 8
  %9 = or i32 %6, %8
  %10 = and i32 %0, 255
  %11 = shl i32 %10, 24
  %12 = or i32 %9, %11
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__bswapdi2(i64 %0) #0 {
  %2 = and i64 %0, -72057594037927936
  %3 = lshr i64 %2, 56
  %4 = and i64 %0, 71776119061217280
  %5 = lshr i64 %4, 40
  %6 = or i64 %3, %5
  %7 = and i64 %0, 280375465082880
  %8 = lshr i64 %7, 24
  %9 = or i64 %6, %8
  %10 = and i64 %0, 1095216660480
  %11 = lshr i64 %10, 8
  %12 = or i64 %9, %11
  %13 = and i64 %0, 4278190080
  %14 = shl i64 %13, 8
  %15 = or i64 %12, %14
  %16 = and i64 %0, 16711680
  %17 = shl i64 %16, 24
  %18 = or i64 %15, %17
  %19 = and i64 %0, 65280
  %20 = shl i64 %19, 40
  %21 = or i64 %18, %20
  %22 = and i64 %0, 255
  %23 = shl i64 %22, 56
  %24 = or i64 %21, %23
  ret i64 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__bswapti2(i128 %0) #0 {
  %2 = and i128 %0, -1329227995784915872903807060280344576
  %3 = lshr i128 %2, 120
  %4 = and i128 %0, 1324035698926381045275276563951124480
  %5 = lshr i128 %4, 104
  %6 = or i128 %3, %5
  %7 = and i128 %0, 5172014448931175958106549077934080
  %8 = lshr i128 %7, 88
  %9 = or i128 %6, %8
  %10 = and i128 %0, 20203181441137406086353707335680
  %11 = lshr i128 %10, 72
  %12 = or i128 %9, %11
  %13 = and i128 %0, 78918677504442992524819169280
  %14 = lshr i128 %13, 56
  %15 = or i128 %12, %14
  %16 = and i128 %0, 308276084001730439550074880
  %17 = lshr i128 %16, 40
  %18 = or i128 %15, %17
  %19 = and i128 %0, 1204203453131759529492480
  %20 = lshr i128 %19, 24
  %21 = or i128 %18, %20
  %22 = and i128 %0, 4703919738795935662080
  %23 = lshr i128 %22, 8
  %24 = or i128 %21, %23
  %25 = and i128 %0, 18374686479671623680
  %26 = shl i128 %25, 8
  %27 = or i128 %24, %26
  %28 = and i128 %0, 71776119061217280
  %29 = shl i128 %28, 24
  %30 = or i128 %27, %29
  %31 = and i128 %0, 280375465082880
  %32 = shl i128 %31, 40
  %33 = or i128 %30, %32
  %34 = and i128 %0, 1095216660480
  %35 = shl i128 %34, 56
  %36 = or i128 %33, %35
  %37 = and i128 %0, 4278190080
  %38 = shl i128 %37, 72
  %39 = or i128 %36, %38
  %40 = and i128 %0, 16711680
  %41 = shl i128 %40, 88
  %42 = or i128 %39, %41
  %43 = and i128 %0, 65280
  %44 = shl i128 %43, 104
  %45 = or i128 %42, %44
  %46 = and i128 %0, 255
  %47 = shl i128 %46, 120
  %48 = or i128 %45, %47
  ret i128 %48
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__cmpsi2(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp sgt i32 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp slt i32 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__cmpdi2(i64 %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp sgt i64 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp slt i64 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__cmpti2(i128 %0, i128 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp sgt i128 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp slt i128 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ucmpsi2(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp ugt i32 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp ult i32 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ucmpdi2(i64 %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp ugt i64 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp ult i64 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ucmpti2(i128 %0, i128 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp ugt i128 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp ult i128 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ashlsi3(i32 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i32,false)", align 4
  %5 = alloca %"compiler_rt.common.HalveInt(i32,false)", align 4
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  store i32 %0, ptr %6, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 4, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 16
  br i1 %16, label %22, label %32

17:                                               ; preds = %19, %46
  %18 = phi i32 [ %0, %46 ], [ %21, %19 ]
  ret i32 %18

19:                                               ; preds = %45, %39
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %21 = load i32, ptr %20, align 4
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %23, i32 0, i32 0
  store i16 0, ptr %24, align 2
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %25, i32 0, i32 1
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  %28 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %27, i32 0, i32 0
  %29 = load i16, ptr %28, align 2
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 16)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %2
  %33 = icmp eq i32 %1, 0
  br i1 %33, label %46, label %47

34:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %22
  %36 = extractvalue { i32, i1 } %30, 0
  %37 = sub i32 15, %36
  %38 = icmp ule i32 %37, 15
  br i1 %38, label %43, label %44

39:                                               ; preds = %43
  %40 = trunc i32 %36 to i4
  %41 = zext i4 %40 to i16
  %42 = shl i16 %29, %41
  store i16 %42, ptr %26, align 2
  br label %19

43:                                               ; preds = %35
  br label %39

44:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @13)
  unreachable

45:                                               ; preds = %87
  br label %19

46:                                               ; preds = %32
  br label %17

47:                                               ; preds = %32
  %48 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %49 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %48, i32 0, i32 0
  %50 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %50, i32 0, i32 0
  %52 = load i16, ptr %51, align 2
  %53 = sub i32 15, %1
  %54 = icmp ule i32 %53, 15
  br i1 %54, label %66, label %67

55:                                               ; preds = %66
  %56 = trunc i32 %1 to i4
  %57 = zext i4 %56 to i16
  %58 = shl i16 %52, %57
  store i16 %58, ptr %49, align 2
  %59 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %60 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %59, i32 0, i32 1
  %61 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  %62 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %61, i32 0, i32 1
  %63 = load i16, ptr %62, align 2
  %64 = sub i32 15, %1
  %65 = icmp ule i32 %64, 15
  br i1 %65, label %80, label %81

66:                                               ; preds = %47
  br label %55

67:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @13)
  unreachable

68:                                               ; preds = %80
  %69 = trunc i32 %1 to i4
  %70 = zext i4 %69 to i16
  %71 = shl i16 %63, %70
  store i16 %71, ptr %60, align 2
  %72 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %73 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %72, i32 0, i32 1
  %74 = load i16, ptr %73, align 2
  %75 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  %76 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %75, i32 0, i32 0
  %77 = load i16, ptr %76, align 2
  %78 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16, i32 %1)
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %82, label %83

80:                                               ; preds = %55
  br label %68

81:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @13)
  unreachable

82:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %68
  %84 = extractvalue { i32, i1 } %78, 0
  %85 = sub i32 15, %84
  %86 = icmp ule i32 %85, 15
  br i1 %86, label %92, label %93

87:                                               ; preds = %92
  %88 = trunc i32 %84 to i4
  %89 = zext i4 %88 to i16
  %90 = lshr i16 %77, %89
  %91 = or i16 %74, %90
  store i16 %91, ptr %73, align 2
  br label %45

92:                                               ; preds = %83
  br label %87

93:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @13)
  unreachable
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ashrsi3(i32 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i32,true)", align 4
  %5 = alloca %"compiler_rt.common.HalveInt(i32,true)", align 4
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %5, i32 0, i32 0
  store i32 %0, ptr %6, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 4, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 16
  br i1 %16, label %22, label %36

17:                                               ; preds = %19, %50
  %18 = phi i32 [ %0, %50 ], [ %21, %19 ]
  ret i32 %18

19:                                               ; preds = %49, %43
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %4, i32 0, i32 0
  %21 = load i32, ptr %20, align 4
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %23, i32 0, i32 1
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %5, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %25, i32 0, i32 1
  %27 = load i16, ptr %26, align 2
  %28 = ashr i16 %27, 15
  store i16 %28, ptr %24, align 2
  %29 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %4, i32 0, i32 0
  %30 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %29, i32 0, i32 0
  %31 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %5, i32 0, i32 0
  %32 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %31, i32 0, i32 1
  %33 = load i16, ptr %32, align 2
  %34 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 16)
  %35 = extractvalue { i32, i1 } %34, 1
  br i1 %35, label %38, label %39

36:                                               ; preds = %2
  %37 = icmp eq i32 %1, 0
  br i1 %37, label %50, label %51

38:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

39:                                               ; preds = %22
  %40 = extractvalue { i32, i1 } %34, 0
  %41 = sub i32 15, %40
  %42 = icmp ule i32 %41, 15
  br i1 %42, label %47, label %48

43:                                               ; preds = %47
  %44 = trunc i32 %40 to i4
  %45 = zext i4 %44 to i16
  %46 = ashr i16 %33, %45
  store i16 %46, ptr %30, align 2
  br label %19

47:                                               ; preds = %39
  br label %43

48:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @14)
  unreachable

49:                                               ; preds = %91
  br label %19

50:                                               ; preds = %36
  br label %17

51:                                               ; preds = %36
  %52 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %4, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %52, i32 0, i32 1
  %54 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %5, i32 0, i32 0
  %55 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %54, i32 0, i32 1
  %56 = load i16, ptr %55, align 2
  %57 = sub i32 15, %1
  %58 = icmp ule i32 %57, 15
  br i1 %58, label %70, label %71

59:                                               ; preds = %70
  %60 = trunc i32 %1 to i4
  %61 = zext i4 %60 to i16
  %62 = ashr i16 %56, %61
  store i16 %62, ptr %53, align 2
  %63 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %4, i32 0, i32 0
  %64 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %63, i32 0, i32 0
  %65 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %5, i32 0, i32 0
  %66 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %65, i32 0, i32 1
  %67 = load i16, ptr %66, align 2
  %68 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16, i32 %1)
  %69 = extractvalue { i32, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %51
  br label %59

71:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @14)
  unreachable

72:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %59
  %74 = extractvalue { i32, i1 } %68, 0
  %75 = sub i32 15, %74
  %76 = icmp ule i32 %75, 15
  br i1 %76, label %89, label %90

77:                                               ; preds = %89
  %78 = trunc i32 %74 to i4
  %79 = zext i4 %78 to i16
  %80 = shl i16 %67, %79
  store i16 %80, ptr %64, align 2
  %81 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %4, i32 0, i32 0
  %82 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %81, i32 0, i32 0
  %83 = load i16, ptr %82, align 2
  %84 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true)", ptr %5, i32 0, i32 0
  %85 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,true).HalveInt(i32,true)__struct_3416", ptr %84, i32 0, i32 0
  %86 = load i16, ptr %85, align 2
  %87 = sub i32 15, %1
  %88 = icmp ule i32 %87, 15
  br i1 %88, label %96, label %97

89:                                               ; preds = %73
  br label %77

90:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @14)
  unreachable

91:                                               ; preds = %96
  %92 = trunc i32 %1 to i4
  %93 = zext i4 %92 to i16
  %94 = lshr i16 %86, %93
  %95 = or i16 %83, %94
  store i16 %95, ptr %82, align 2
  br label %49

96:                                               ; preds = %77
  br label %91

97:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @14)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__lshrsi3(i32 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i32,false)", align 4
  %5 = alloca %"compiler_rt.common.HalveInt(i32,false)", align 4
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  store i32 %0, ptr %6, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 4, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 16
  br i1 %16, label %22, label %32

17:                                               ; preds = %19, %46
  %18 = phi i32 [ %0, %46 ], [ %21, %19 ]
  ret i32 %18

19:                                               ; preds = %45, %39
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %21 = load i32, ptr %20, align 4
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %23, i32 0, i32 1
  store i16 0, ptr %24, align 2
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %25, i32 0, i32 0
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  %28 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %27, i32 0, i32 1
  %29 = load i16, ptr %28, align 2
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 16)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %2
  %33 = icmp eq i32 %1, 0
  br i1 %33, label %46, label %47

34:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %22
  %36 = extractvalue { i32, i1 } %30, 0
  %37 = sub i32 15, %36
  %38 = icmp ule i32 %37, 15
  br i1 %38, label %43, label %44

39:                                               ; preds = %43
  %40 = trunc i32 %36 to i4
  %41 = zext i4 %40 to i16
  %42 = lshr i16 %29, %41
  store i16 %42, ptr %26, align 2
  br label %19

43:                                               ; preds = %35
  br label %39

44:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @15)
  unreachable

45:                                               ; preds = %87
  br label %19

46:                                               ; preds = %32
  br label %17

47:                                               ; preds = %32
  %48 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %49 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %48, i32 0, i32 1
  %50 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %50, i32 0, i32 1
  %52 = load i16, ptr %51, align 2
  %53 = sub i32 15, %1
  %54 = icmp ule i32 %53, 15
  br i1 %54, label %66, label %67

55:                                               ; preds = %66
  %56 = trunc i32 %1 to i4
  %57 = zext i4 %56 to i16
  %58 = lshr i16 %52, %57
  store i16 %58, ptr %49, align 2
  %59 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %60 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %59, i32 0, i32 0
  %61 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  %62 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %61, i32 0, i32 1
  %63 = load i16, ptr %62, align 2
  %64 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16, i32 %1)
  %65 = extractvalue { i32, i1 } %64, 1
  br i1 %65, label %68, label %69

66:                                               ; preds = %47
  br label %55

67:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @15)
  unreachable

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %55
  %70 = extractvalue { i32, i1 } %64, 0
  %71 = sub i32 15, %70
  %72 = icmp ule i32 %71, 15
  br i1 %72, label %85, label %86

73:                                               ; preds = %85
  %74 = trunc i32 %70 to i4
  %75 = zext i4 %74 to i16
  %76 = shl i16 %63, %75
  store i16 %76, ptr %60, align 2
  %77 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %4, i32 0, i32 0
  %78 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %77, i32 0, i32 0
  %79 = load i16, ptr %78, align 2
  %80 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false)", ptr %5, i32 0, i32 0
  %81 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3407", ptr %80, i32 0, i32 0
  %82 = load i16, ptr %81, align 2
  %83 = sub i32 15, %1
  %84 = icmp ule i32 %83, 15
  br i1 %84, label %92, label %93

85:                                               ; preds = %69
  br label %73

86:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @15)
  unreachable

87:                                               ; preds = %92
  %88 = trunc i32 %1 to i4
  %89 = zext i4 %88 to i16
  %90 = lshr i16 %82, %89
  %91 = or i16 %79, %90
  store i16 %91, ptr %78, align 2
  br label %45

92:                                               ; preds = %73
  br label %87

93:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @15)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__ashlti3(i128 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 8
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  store i128 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 64
  br i1 %16, label %22, label %32

17:                                               ; preds = %19, %46
  %18 = phi i128 [ %0, %46 ], [ %21, %19 ]
  ret i128 %18

19:                                               ; preds = %45, %39
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %21 = load i128, ptr %20, align 8
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %23, i32 0, i32 0
  store i64 0, ptr %24, align 8
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %25, i32 0, i32 1
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %28 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %27, i32 0, i32 0
  %29 = load i64, ptr %28, align 8
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 64)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %2
  %33 = icmp eq i32 %1, 0
  br i1 %33, label %46, label %47

34:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %22
  %36 = extractvalue { i32, i1 } %30, 0
  %37 = sub i32 63, %36
  %38 = icmp ule i32 %37, 63
  br i1 %38, label %43, label %44

39:                                               ; preds = %43
  %40 = trunc i32 %36 to i6
  %41 = zext i6 %40 to i64
  %42 = shl i64 %29, %41
  store i64 %42, ptr %26, align 8
  br label %19

43:                                               ; preds = %35
  br label %39

44:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @16)
  unreachable

45:                                               ; preds = %87
  br label %19

46:                                               ; preds = %32
  br label %17

47:                                               ; preds = %32
  %48 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %49 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %48, i32 0, i32 0
  %50 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %50, i32 0, i32 0
  %52 = load i64, ptr %51, align 8
  %53 = sub i32 63, %1
  %54 = icmp ule i32 %53, 63
  br i1 %54, label %66, label %67

55:                                               ; preds = %66
  %56 = trunc i32 %1 to i6
  %57 = zext i6 %56 to i64
  %58 = shl i64 %52, %57
  store i64 %58, ptr %49, align 8
  %59 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %60 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %59, i32 0, i32 1
  %61 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %62 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %61, i32 0, i32 1
  %63 = load i64, ptr %62, align 8
  %64 = sub i32 63, %1
  %65 = icmp ule i32 %64, 63
  br i1 %65, label %80, label %81

66:                                               ; preds = %47
  br label %55

67:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @16)
  unreachable

68:                                               ; preds = %80
  %69 = trunc i32 %1 to i6
  %70 = zext i6 %69 to i64
  %71 = shl i64 %63, %70
  store i64 %71, ptr %60, align 8
  %72 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %73 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %72, i32 0, i32 1
  %74 = load i64, ptr %73, align 8
  %75 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %76 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %75, i32 0, i32 0
  %77 = load i64, ptr %76, align 8
  %78 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 64, i32 %1)
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %82, label %83

80:                                               ; preds = %55
  br label %68

81:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @16)
  unreachable

82:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %68
  %84 = extractvalue { i32, i1 } %78, 0
  %85 = sub i32 63, %84
  %86 = icmp ule i32 %85, 63
  br i1 %86, label %92, label %93

87:                                               ; preds = %92
  %88 = trunc i32 %84 to i6
  %89 = zext i6 %88 to i64
  %90 = lshr i64 %77, %89
  %91 = or i64 %74, %90
  store i64 %91, ptr %73, align 8
  br label %45

92:                                               ; preds = %83
  br label %87

93:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @16)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__ashrti3(i128 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i128,true)", align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i128,true)", align 8
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %5, i32 0, i32 0
  store i128 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 64
  br i1 %16, label %22, label %36

17:                                               ; preds = %19, %50
  %18 = phi i128 [ %0, %50 ], [ %21, %19 ]
  ret i128 %18

19:                                               ; preds = %49, %43
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %4, i32 0, i32 0
  %21 = load i128, ptr %20, align 8
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %23, i32 0, i32 1
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %5, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %25, i32 0, i32 1
  %27 = load i64, ptr %26, align 8
  %28 = ashr i64 %27, 63
  store i64 %28, ptr %24, align 8
  %29 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %4, i32 0, i32 0
  %30 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %29, i32 0, i32 0
  %31 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %5, i32 0, i32 0
  %32 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %31, i32 0, i32 1
  %33 = load i64, ptr %32, align 8
  %34 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 64)
  %35 = extractvalue { i32, i1 } %34, 1
  br i1 %35, label %38, label %39

36:                                               ; preds = %2
  %37 = icmp eq i32 %1, 0
  br i1 %37, label %50, label %51

38:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

39:                                               ; preds = %22
  %40 = extractvalue { i32, i1 } %34, 0
  %41 = sub i32 63, %40
  %42 = icmp ule i32 %41, 63
  br i1 %42, label %47, label %48

43:                                               ; preds = %47
  %44 = trunc i32 %40 to i6
  %45 = zext i6 %44 to i64
  %46 = ashr i64 %33, %45
  store i64 %46, ptr %30, align 8
  br label %19

47:                                               ; preds = %39
  br label %43

48:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @17)
  unreachable

49:                                               ; preds = %91
  br label %19

50:                                               ; preds = %36
  br label %17

51:                                               ; preds = %36
  %52 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %4, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %52, i32 0, i32 1
  %54 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %5, i32 0, i32 0
  %55 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %54, i32 0, i32 1
  %56 = load i64, ptr %55, align 8
  %57 = sub i32 63, %1
  %58 = icmp ule i32 %57, 63
  br i1 %58, label %70, label %71

59:                                               ; preds = %70
  %60 = trunc i32 %1 to i6
  %61 = zext i6 %60 to i64
  %62 = ashr i64 %56, %61
  store i64 %62, ptr %53, align 8
  %63 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %4, i32 0, i32 0
  %64 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %63, i32 0, i32 0
  %65 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %5, i32 0, i32 0
  %66 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %65, i32 0, i32 1
  %67 = load i64, ptr %66, align 8
  %68 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 64, i32 %1)
  %69 = extractvalue { i32, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %51
  br label %59

71:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @17)
  unreachable

72:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %59
  %74 = extractvalue { i32, i1 } %68, 0
  %75 = sub i32 63, %74
  %76 = icmp ule i32 %75, 63
  br i1 %76, label %89, label %90

77:                                               ; preds = %89
  %78 = trunc i32 %74 to i6
  %79 = zext i6 %78 to i64
  %80 = shl i64 %67, %79
  store i64 %80, ptr %64, align 8
  %81 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %4, i32 0, i32 0
  %82 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %81, i32 0, i32 0
  %83 = load i64, ptr %82, align 8
  %84 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true)", ptr %5, i32 0, i32 0
  %85 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,true).HalveInt(i128,true)__struct_3434", ptr %84, i32 0, i32 0
  %86 = load i64, ptr %85, align 8
  %87 = sub i32 63, %1
  %88 = icmp ule i32 %87, 63
  br i1 %88, label %96, label %97

89:                                               ; preds = %73
  br label %77

90:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @17)
  unreachable

91:                                               ; preds = %96
  %92 = trunc i32 %1 to i6
  %93 = zext i6 %92 to i64
  %94 = lshr i64 %86, %93
  %95 = or i64 %83, %94
  store i64 %95, ptr %82, align 8
  br label %49

96:                                               ; preds = %77
  br label %91

97:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @17)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__lshrti3(i128 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 8
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  store i128 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 64
  br i1 %16, label %22, label %32

17:                                               ; preds = %19, %46
  %18 = phi i128 [ %0, %46 ], [ %21, %19 ]
  ret i128 %18

19:                                               ; preds = %45, %39
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %21 = load i128, ptr %20, align 8
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %23, i32 0, i32 1
  store i64 0, ptr %24, align 8
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %25, i32 0, i32 0
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %28 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %27, i32 0, i32 1
  %29 = load i64, ptr %28, align 8
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 64)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %2
  %33 = icmp eq i32 %1, 0
  br i1 %33, label %46, label %47

34:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %22
  %36 = extractvalue { i32, i1 } %30, 0
  %37 = sub i32 63, %36
  %38 = icmp ule i32 %37, 63
  br i1 %38, label %43, label %44

39:                                               ; preds = %43
  %40 = trunc i32 %36 to i6
  %41 = zext i6 %40 to i64
  %42 = lshr i64 %29, %41
  store i64 %42, ptr %26, align 8
  br label %19

43:                                               ; preds = %35
  br label %39

44:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @18)
  unreachable

45:                                               ; preds = %87
  br label %19

46:                                               ; preds = %32
  br label %17

47:                                               ; preds = %32
  %48 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %49 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %48, i32 0, i32 1
  %50 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %50, i32 0, i32 1
  %52 = load i64, ptr %51, align 8
  %53 = sub i32 63, %1
  %54 = icmp ule i32 %53, 63
  br i1 %54, label %66, label %67

55:                                               ; preds = %66
  %56 = trunc i32 %1 to i6
  %57 = zext i6 %56 to i64
  %58 = lshr i64 %52, %57
  store i64 %58, ptr %49, align 8
  %59 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %60 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %59, i32 0, i32 0
  %61 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %62 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %61, i32 0, i32 1
  %63 = load i64, ptr %62, align 8
  %64 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 64, i32 %1)
  %65 = extractvalue { i32, i1 } %64, 1
  br i1 %65, label %68, label %69

66:                                               ; preds = %47
  br label %55

67:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @18)
  unreachable

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %55
  %70 = extractvalue { i32, i1 } %64, 0
  %71 = sub i32 63, %70
  %72 = icmp ule i32 %71, 63
  br i1 %72, label %85, label %86

73:                                               ; preds = %85
  %74 = trunc i32 %70 to i6
  %75 = zext i6 %74 to i64
  %76 = shl i64 %63, %75
  store i64 %76, ptr %60, align 8
  %77 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %78 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %77, i32 0, i32 0
  %79 = load i64, ptr %78, align 8
  %80 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %81 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %80, i32 0, i32 0
  %82 = load i64, ptr %81, align 8
  %83 = sub i32 63, %1
  %84 = icmp ule i32 %83, 63
  br i1 %84, label %92, label %93

85:                                               ; preds = %69
  br label %73

86:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @18)
  unreachable

87:                                               ; preds = %92
  %88 = trunc i32 %1 to i6
  %89 = zext i6 %88 to i64
  %90 = lshr i64 %82, %89
  %91 = or i64 %79, %90
  store i64 %91, ptr %78, align 8
  br label %45

92:                                               ; preds = %73
  br label %87

93:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @18)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__ashldi3(i64 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i64,false)", align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i64,false)", align 8
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  store i64 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 32
  br i1 %16, label %22, label %32

17:                                               ; preds = %19, %46
  %18 = phi i64 [ %0, %46 ], [ %21, %19 ]
  ret i64 %18

19:                                               ; preds = %45, %39
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %21 = load i64, ptr %20, align 8
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %23, i32 0, i32 0
  store i32 0, ptr %24, align 4
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %25, i32 0, i32 1
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %28 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %27, i32 0, i32 0
  %29 = load i32, ptr %28, align 4
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 32)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %2
  %33 = icmp eq i32 %1, 0
  br i1 %33, label %46, label %47

34:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %22
  %36 = extractvalue { i32, i1 } %30, 0
  %37 = sub i32 31, %36
  %38 = icmp ule i32 %37, 31
  br i1 %38, label %43, label %44

39:                                               ; preds = %43
  %40 = trunc i32 %36 to i5
  %41 = zext i5 %40 to i32
  %42 = shl i32 %29, %41
  store i32 %42, ptr %26, align 4
  br label %19

43:                                               ; preds = %35
  br label %39

44:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @19)
  unreachable

45:                                               ; preds = %87
  br label %19

46:                                               ; preds = %32
  br label %17

47:                                               ; preds = %32
  %48 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %49 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %48, i32 0, i32 0
  %50 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %50, i32 0, i32 0
  %52 = load i32, ptr %51, align 4
  %53 = sub i32 31, %1
  %54 = icmp ule i32 %53, 31
  br i1 %54, label %66, label %67

55:                                               ; preds = %66
  %56 = trunc i32 %1 to i5
  %57 = zext i5 %56 to i32
  %58 = shl i32 %52, %57
  store i32 %58, ptr %49, align 4
  %59 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %60 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %59, i32 0, i32 1
  %61 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %62 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %61, i32 0, i32 1
  %63 = load i32, ptr %62, align 4
  %64 = sub i32 31, %1
  %65 = icmp ule i32 %64, 31
  br i1 %65, label %80, label %81

66:                                               ; preds = %47
  br label %55

67:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @19)
  unreachable

68:                                               ; preds = %80
  %69 = trunc i32 %1 to i5
  %70 = zext i5 %69 to i32
  %71 = shl i32 %63, %70
  store i32 %71, ptr %60, align 4
  %72 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %73 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %72, i32 0, i32 1
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %76 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %75, i32 0, i32 0
  %77 = load i32, ptr %76, align 4
  %78 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32, i32 %1)
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %82, label %83

80:                                               ; preds = %55
  br label %68

81:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @19)
  unreachable

82:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %68
  %84 = extractvalue { i32, i1 } %78, 0
  %85 = sub i32 31, %84
  %86 = icmp ule i32 %85, 31
  br i1 %86, label %92, label %93

87:                                               ; preds = %92
  %88 = trunc i32 %84 to i5
  %89 = zext i5 %88 to i32
  %90 = lshr i32 %77, %89
  %91 = or i32 %74, %90
  store i32 %91, ptr %73, align 4
  br label %45

92:                                               ; preds = %83
  br label %87

93:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @19)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__ashrdi3(i64 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i64,true)", align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i64,true)", align 8
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %5, i32 0, i32 0
  store i64 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 32
  br i1 %16, label %22, label %36

17:                                               ; preds = %19, %50
  %18 = phi i64 [ %0, %50 ], [ %21, %19 ]
  ret i64 %18

19:                                               ; preds = %49, %43
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %4, i32 0, i32 0
  %21 = load i64, ptr %20, align 8
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %23, i32 0, i32 1
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %5, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %25, i32 0, i32 1
  %27 = load i32, ptr %26, align 4
  %28 = ashr i32 %27, 31
  store i32 %28, ptr %24, align 4
  %29 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %4, i32 0, i32 0
  %30 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %29, i32 0, i32 0
  %31 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %5, i32 0, i32 0
  %32 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %31, i32 0, i32 1
  %33 = load i32, ptr %32, align 4
  %34 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 32)
  %35 = extractvalue { i32, i1 } %34, 1
  br i1 %35, label %38, label %39

36:                                               ; preds = %2
  %37 = icmp eq i32 %1, 0
  br i1 %37, label %50, label %51

38:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

39:                                               ; preds = %22
  %40 = extractvalue { i32, i1 } %34, 0
  %41 = sub i32 31, %40
  %42 = icmp ule i32 %41, 31
  br i1 %42, label %47, label %48

43:                                               ; preds = %47
  %44 = trunc i32 %40 to i5
  %45 = zext i5 %44 to i32
  %46 = ashr i32 %33, %45
  store i32 %46, ptr %30, align 4
  br label %19

47:                                               ; preds = %39
  br label %43

48:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @20)
  unreachable

49:                                               ; preds = %91
  br label %19

50:                                               ; preds = %36
  br label %17

51:                                               ; preds = %36
  %52 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %4, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %52, i32 0, i32 1
  %54 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %5, i32 0, i32 0
  %55 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %54, i32 0, i32 1
  %56 = load i32, ptr %55, align 4
  %57 = sub i32 31, %1
  %58 = icmp ule i32 %57, 31
  br i1 %58, label %70, label %71

59:                                               ; preds = %70
  %60 = trunc i32 %1 to i5
  %61 = zext i5 %60 to i32
  %62 = ashr i32 %56, %61
  store i32 %62, ptr %53, align 4
  %63 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %4, i32 0, i32 0
  %64 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %63, i32 0, i32 0
  %65 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %5, i32 0, i32 0
  %66 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %65, i32 0, i32 1
  %67 = load i32, ptr %66, align 4
  %68 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32, i32 %1)
  %69 = extractvalue { i32, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %51
  br label %59

71:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @20)
  unreachable

72:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %59
  %74 = extractvalue { i32, i1 } %68, 0
  %75 = sub i32 31, %74
  %76 = icmp ule i32 %75, 31
  br i1 %76, label %89, label %90

77:                                               ; preds = %89
  %78 = trunc i32 %74 to i5
  %79 = zext i5 %78 to i32
  %80 = shl i32 %67, %79
  store i32 %80, ptr %64, align 4
  %81 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %4, i32 0, i32 0
  %82 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %81, i32 0, i32 0
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true)", ptr %5, i32 0, i32 0
  %85 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,true).HalveInt(i64,true)__struct_3452", ptr %84, i32 0, i32 0
  %86 = load i32, ptr %85, align 4
  %87 = sub i32 31, %1
  %88 = icmp ule i32 %87, 31
  br i1 %88, label %96, label %97

89:                                               ; preds = %73
  br label %77

90:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @20)
  unreachable

91:                                               ; preds = %96
  %92 = trunc i32 %1 to i5
  %93 = zext i5 %92 to i32
  %94 = lshr i32 %86, %93
  %95 = or i32 %83, %94
  store i32 %95, ptr %82, align 4
  br label %49

96:                                               ; preds = %77
  br label %91

97:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @20)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__lshrdi3(i64 %0, i32 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i64,false)", align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i64,false)", align 8
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  store i64 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %7 = ptrtoint ptr %4 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %3 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp sge i32 %1, 32
  br i1 %16, label %22, label %32

17:                                               ; preds = %19, %46
  %18 = phi i64 [ %0, %46 ], [ %21, %19 ]
  ret i64 %18

19:                                               ; preds = %45, %39
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %21 = load i64, ptr %20, align 8
  br label %17

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %23, i32 0, i32 1
  store i32 0, ptr %24, align 4
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %25, i32 0, i32 0
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %28 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %27, i32 0, i32 1
  %29 = load i32, ptr %28, align 4
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 32)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %2
  %33 = icmp eq i32 %1, 0
  br i1 %33, label %46, label %47

34:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %22
  %36 = extractvalue { i32, i1 } %30, 0
  %37 = sub i32 31, %36
  %38 = icmp ule i32 %37, 31
  br i1 %38, label %43, label %44

39:                                               ; preds = %43
  %40 = trunc i32 %36 to i5
  %41 = zext i5 %40 to i32
  %42 = lshr i32 %29, %41
  store i32 %42, ptr %26, align 4
  br label %19

43:                                               ; preds = %35
  br label %39

44:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @21)
  unreachable

45:                                               ; preds = %87
  br label %19

46:                                               ; preds = %32
  br label %17

47:                                               ; preds = %32
  %48 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %49 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %48, i32 0, i32 1
  %50 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %50, i32 0, i32 1
  %52 = load i32, ptr %51, align 4
  %53 = sub i32 31, %1
  %54 = icmp ule i32 %53, 31
  br i1 %54, label %66, label %67

55:                                               ; preds = %66
  %56 = trunc i32 %1 to i5
  %57 = zext i5 %56 to i32
  %58 = lshr i32 %52, %57
  store i32 %58, ptr %49, align 4
  %59 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %60 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %59, i32 0, i32 0
  %61 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %62 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %61, i32 0, i32 1
  %63 = load i32, ptr %62, align 4
  %64 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32, i32 %1)
  %65 = extractvalue { i32, i1 } %64, 1
  br i1 %65, label %68, label %69

66:                                               ; preds = %47
  br label %55

67:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @21)
  unreachable

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %55
  %70 = extractvalue { i32, i1 } %64, 0
  %71 = sub i32 31, %70
  %72 = icmp ule i32 %71, 31
  br i1 %72, label %85, label %86

73:                                               ; preds = %85
  %74 = trunc i32 %70 to i5
  %75 = zext i5 %74 to i32
  %76 = shl i32 %63, %75
  store i32 %76, ptr %60, align 4
  %77 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %78 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %77, i32 0, i32 0
  %79 = load i32, ptr %78, align 4
  %80 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %81 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %80, i32 0, i32 0
  %82 = load i32, ptr %81, align 4
  %83 = sub i32 31, %1
  %84 = icmp ule i32 %83, 31
  br i1 %84, label %92, label %93

85:                                               ; preds = %69
  br label %73

86:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @21)
  unreachable

87:                                               ; preds = %92
  %88 = trunc i32 %1 to i5
  %89 = zext i5 %88 to i32
  %90 = lshr i32 %82, %89
  %91 = or i32 %79, %90
  store i32 %91, ptr %78, align 4
  br label %45

92:                                               ; preds = %73
  br label %87

93:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @21)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__negsi2(i32 %0) #0 {
  %2 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %0)
  %3 = extractvalue { i32, i1 } %2, 1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

5:                                                ; preds = %1
  %6 = extractvalue { i32, i1 } %2, 0
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__negdi2(i64 %0) #0 {
  %2 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %0)
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

5:                                                ; preds = %1
  %6 = extractvalue { i64, i1 } %2, 0
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__negti2(i128 %0) #0 {
  %2 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 0, i128 %0)
  %3 = extractvalue { i128, i1 } %2, 1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

5:                                                ; preds = %1
  %6 = extractvalue { i128, i1 } %2, 0
  ret i128 %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__divmodti4(i128 %0, i128 %1, ptr nonnull align 8 %2) #0 {
  %4 = call i128 @__divti3(i128 %0, i128 %1)
  %5 = call fastcc { i128, i1 } @llvm.smul.with.overflow.i128(i128 %4, i128 %1)
  %6 = extractvalue { i128, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %3
  %9 = extractvalue { i128, i1 } %5, 0
  %10 = sub i128 %0, %9
  store i128 %10, ptr %2, align 8
  ret i128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__divti3(i128 %0, i128 %1) #0 {
  %3 = ashr i128 %0, 127
  %4 = ashr i128 %1, 127
  %5 = xor i128 %0, %3
  %6 = sub i128 %5, %3
  %7 = xor i128 %1, %4
  %8 = sub i128 %7, %4
  %9 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3472(i128 %6, i128 %8, ptr align 8 null)
  %10 = xor i128 %3, %4
  %11 = xor i128 %9, %10
  %12 = sub i128 %11, %10
  ret i128 %12
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.smul.with.overflow.i128(i128, i128) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__udivmoddi4(i64 %0, i64 %1, ptr align 8 %2) #0 {
  %4 = call fastcc i64 @compiler_rt.udivmod.udivmod__anon_3465(i64 %0, i64 %1, ptr align 8 %2)
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.udivmod.udivmod__anon_3465(i64 %0, i64 %1, ptr align 8 %2) unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i6, align 1
  %8 = alloca [2 x i32], align 4
  %9 = alloca [2 x i32], align 4
  %10 = alloca [2 x i32], align 8
  %11 = alloca [2 x i32], align 4
  %12 = alloca [2 x i32], align 8
  %13 = alloca [2 x i32], align 4
  %14 = icmp ugt i64 %1, %0
  br i1 %14, label %19, label %21

15:                                               ; preds = %21
  store i64 %0, ptr %12, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %13, ptr align 4 %12, i64 8, i1 false)
  store i64 %1, ptr %10, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %11, ptr align 4 %10, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %9, i8 undef, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %8, i8 undef, i64 8, i1 false)
  %16 = getelementptr inbounds [2 x i32], ptr %11, i64 0, i64 1
  %17 = load i32, ptr %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %43, label %50

19:                                               ; preds = %3
  %20 = icmp ne ptr %2, null
  br i1 %20, label %23, label %24

21:                                               ; preds = %3
  br label %15

22:                                               ; preds = %24, %23
  ret i64 0

23:                                               ; preds = %19
  store i64 %0, ptr %2, align 8
  br label %22

24:                                               ; preds = %19
  br label %22

25:                                               ; preds = %50
  %26 = getelementptr inbounds [2 x i32], ptr %11, i64 0, i64 1
  %27 = load i32, ptr %26, align 4
  %28 = call i32 @llvm.ctlz.i32(i32 %27, i1 false)
  %29 = trunc i32 %28 to i6
  %30 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 1
  %31 = load i32, ptr %30, align 4
  %32 = call i32 @llvm.ctlz.i32(i32 %31, i1 false)
  %33 = trunc i32 %32 to i6
  %34 = sub nuw i6 %29, %33
  store i6 %34, ptr %7, align 1
  %35 = load i64, ptr %13, align 4
  store i64 %35, ptr %6, align 8
  %36 = load i64, ptr %11, align 4
  %37 = load i6, ptr %7, align 1
  %38 = zext i6 %37 to i64
  %39 = shl i64 %36, %38
  store i64 %39, ptr %5, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %9, ptr align 4 @121, i64 8, i1 false)
  store i64 0, ptr %4, align 8
  %40 = load i6, ptr %7, align 1
  %41 = add nuw i6 %40, 1
  %42 = zext i6 %41 to i64
  br label %90

43:                                               ; preds = %15
  %44 = getelementptr inbounds [2 x i32], ptr %8, i64 0, i64 1
  store i32 0, ptr %44, align 4
  %45 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 1
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr inbounds [2 x i32], ptr %11, i64 0, i64 0
  %48 = load i32, ptr %47, align 4
  %49 = icmp ult i32 %46, %48
  br i1 %49, label %53, label %64

50:                                               ; preds = %15
  br label %25

51:                                               ; preds = %64, %53
  %52 = icmp ne ptr %2, null
  br i1 %52, label %85, label %87

53:                                               ; preds = %43
  %54 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 1
  store i32 0, ptr %54, align 4
  %55 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 0
  %56 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 1
  %57 = load i32, ptr %56, align 4
  %58 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 0
  %59 = load i32, ptr %58, align 4
  %60 = getelementptr inbounds [2 x i32], ptr %11, i64 0, i64 0
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr inbounds [2 x i32], ptr %8, i64 0, i64 0
  %63 = call fastcc i32 @compiler_rt.udivmod.divwide__anon_4038(i32 %57, i32 %59, i32 %61, ptr nonnull align 4 %62)
  store i32 %63, ptr %55, align 4
  br label %51

64:                                               ; preds = %43
  %65 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 1
  %66 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 1
  %67 = load i32, ptr %66, align 4
  %68 = getelementptr inbounds [2 x i32], ptr %11, i64 0, i64 0
  %69 = load i32, ptr %68, align 4
  %70 = udiv i32 %67, %69
  store i32 %70, ptr %65, align 4
  %71 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 0
  %72 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 1
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr inbounds [2 x i32], ptr %11, i64 0, i64 0
  %75 = load i32, ptr %74, align 4
  %76 = urem i32 %73, %75
  %77 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 0
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr inbounds [2 x i32], ptr %11, i64 0, i64 0
  %80 = load i32, ptr %79, align 4
  %81 = getelementptr inbounds [2 x i32], ptr %8, i64 0, i64 0
  %82 = call fastcc i32 @compiler_rt.udivmod.divwide__anon_4038(i32 %76, i32 %78, i32 %80, ptr nonnull align 4 %81)
  store i32 %82, ptr %71, align 4
  br label %51

83:                                               ; preds = %87, %85
  %84 = load i64, ptr %9, align 4
  ret i64 %84

85:                                               ; preds = %51
  %86 = load i64, ptr %8, align 4
  store i64 %86, ptr %2, align 8
  br label %83

87:                                               ; preds = %51
  br label %83

88:                                               ; preds = %115
  %89 = icmp ne ptr %2, null
  br i1 %89, label %118, label %120

90:                                               ; preds = %93, %25
  %91 = load i64, ptr %4, align 8
  %92 = icmp ult i64 %91, %42
  br i1 %92, label %95, label %115

93:                                               ; preds = %95
  %94 = add nuw i64 %91, 1
  store i64 %94, ptr %4, align 8
  br label %90

95:                                               ; preds = %90
  %96 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 0
  %97 = load i32, ptr %96, align 4
  %98 = shl i32 %97, 1
  store i32 %98, ptr %96, align 4
  %99 = load i64, ptr %5, align 8
  %100 = load i64, ptr %6, align 8
  %101 = sub i64 %99, %100
  %102 = sub i64 %101, 1
  %103 = ashr i64 %102, 63
  %104 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 0
  %105 = load i32, ptr %104, align 4
  %106 = and i64 %103, 1
  %107 = trunc i64 %106 to i32
  %108 = or i32 %105, %107
  store i32 %108, ptr %104, align 4
  %109 = load i64, ptr %6, align 8
  %110 = load i64, ptr %5, align 8
  %111 = and i64 %110, %103
  %112 = sub nuw i64 %109, %111
  store i64 %112, ptr %6, align 8
  %113 = load i64, ptr %5, align 8
  %114 = lshr i64 %113, 1
  store i64 %114, ptr %5, align 8
  br label %93

115:                                              ; preds = %90
  br label %88

116:                                              ; preds = %120, %118
  %117 = load i64, ptr %9, align 4
  ret i64 %117

118:                                              ; preds = %88
  %119 = load i64, ptr %6, align 8
  store i64 %119, ptr %2, align 8
  br label %116

120:                                              ; preds = %88
  br label %116
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__divmoddi4(i64 %0, i64 %1, ptr nonnull align 8 %2) #0 {
  %4 = call i64 @__divdi3(i64 %0, i64 %1)
  %5 = call fastcc { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %1)
  %6 = extractvalue { i64, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %3
  %9 = extractvalue { i64, i1 } %5, 0
  %10 = sub i64 %0, %9
  store i64 %10, ptr %2, align 8
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__divdi3(i64 %0, i64 %1) #0 {
  %3 = xor i64 %0, %1
  %4 = ashr i64 %3, 63
  %5 = ashr i64 %0, 63
  %6 = xor i64 %0, %5
  %7 = ashr i64 %0, 63
  %8 = sub i64 %6, %7
  %9 = ashr i64 %1, 63
  %10 = xor i64 %1, %9
  %11 = ashr i64 %1, 63
  %12 = sub i64 %10, %11
  %13 = call i64 @__udivmoddi4(i64 %8, i64 %12, ptr align 8 null)
  %14 = xor i64 %13, %4
  %15 = sub i64 %14, %4
  ret i64 %15
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__divsi3(i32 %0, i32 %1) #0 {
  %3 = xor i32 %0, %1
  %4 = ashr i32 %3, 31
  %5 = ashr i32 %0, 31
  %6 = xor i32 %0, %5
  %7 = ashr i32 %0, 31
  %8 = sub i32 %6, %7
  %9 = ashr i32 %1, 31
  %10 = xor i32 %1, %9
  %11 = ashr i32 %1, 31
  %12 = sub i32 %10, %11
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %18, label %19

14:                                               ; preds = %18
  %15 = udiv i32 %8, %12
  %16 = xor i32 %15, %4
  %17 = sub i32 %16, %4
  ret i32 %17

18:                                               ; preds = %2
  br label %14

19:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @22)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__udivsi3(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %12, label %13

8:                                                ; preds = %67, %39, %33, %23, %12
  %9 = phi i32 [ 0, %12 ], [ 0, %23 ], [ 0, %33 ], [ %0, %39 ], [ %72, %67 ]
  ret i32 %9

10:                                               ; preds = %13
  %11 = icmp eq i32 %0, 0
  br i1 %11, label %23, label %24

12:                                               ; preds = %2
  br label %8

13:                                               ; preds = %2
  br label %10

14:                                               ; preds = %24
  %15 = call i32 @llvm.ctlz.i32(i32 %1, i1 false)
  %16 = trunc i32 %15 to i6
  %17 = zext i6 %16 to i32
  %18 = call i32 @llvm.ctlz.i32(i32 %0, i1 false)
  %19 = trunc i32 %18 to i6
  %20 = zext i6 %19 to i32
  %21 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %17, i32 %20)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %14

25:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %14
  %27 = extractvalue { i32, i1 } %21, 0
  store i32 %27, ptr %6, align 4
  %28 = load i32, ptr %6, align 4
  %29 = icmp ugt i32 %28, 31
  br i1 %29, label %33, label %34

30:                                               ; preds = %34
  %31 = load i32, ptr %6, align 4
  %32 = icmp eq i32 %31, 31
  br i1 %32, label %39, label %40

33:                                               ; preds = %26
  br label %8

34:                                               ; preds = %26
  br label %30

35:                                               ; preds = %40
  %36 = load i32, ptr %6, align 4
  %37 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %36, i32 1)
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %41, label %42

39:                                               ; preds = %30
  br label %8

40:                                               ; preds = %30
  br label %35

41:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

42:                                               ; preds = %35
  %43 = extractvalue { i32, i1 } %37, 0
  store i32 %43, ptr %6, align 4
  %44 = load i32, ptr %6, align 4
  %45 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 32, i32 %44)
  %46 = extractvalue { i32, i1 } %45, 1
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i32, i1 } %45, 0
  %50 = sub i32 31, %49
  %51 = icmp ule i32 %50, 31
  br i1 %51, label %59, label %60

52:                                               ; preds = %59
  %53 = trunc i32 %49 to i5
  %54 = zext i5 %53 to i32
  %55 = shl i32 %0, %54
  store i32 %55, ptr %5, align 4
  %56 = load i32, ptr %6, align 4
  %57 = sub i32 31, %56
  %58 = icmp ule i32 %57, 31
  br i1 %58, label %65, label %66

59:                                               ; preds = %48
  br label %52

60:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @23)
  unreachable

61:                                               ; preds = %65
  %62 = trunc i32 %56 to i5
  %63 = zext i5 %62 to i32
  %64 = lshr i32 %0, %63
  store i32 %64, ptr %4, align 4
  store i32 0, ptr %3, align 4
  br label %73

65:                                               ; preds = %52
  br label %61

66:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @23)
  unreachable

67:                                               ; preds = %93
  %68 = load i32, ptr %5, align 4
  %69 = shl i32 %68, 1
  %70 = load i32, ptr %3, align 4
  %71 = or i32 %69, %70
  store i32 %71, ptr %5, align 4
  %72 = load i32, ptr %5, align 4
  br label %8

73:                                               ; preds = %76, %61
  %74 = load i32, ptr %6, align 4
  %75 = icmp ugt i32 %74, 0
  br i1 %75, label %77, label %93

76:                                               ; preds = %108
  br label %73

77:                                               ; preds = %73
  %78 = load i32, ptr %4, align 4
  %79 = shl i32 %78, 1
  %80 = load i32, ptr %5, align 4
  %81 = lshr i32 %80, 31
  %82 = or i32 %79, %81
  store i32 %82, ptr %4, align 4
  %83 = load i32, ptr %5, align 4
  %84 = shl i32 %83, 1
  %85 = load i32, ptr %3, align 4
  %86 = or i32 %84, %85
  store i32 %86, ptr %5, align 4
  %87 = load i32, ptr %4, align 4
  %88 = sub i32 %1, %87
  %89 = sub i32 %88, 1
  %90 = ashr i32 %89, 31
  %91 = and i32 %90, 1
  %92 = icmp sge i32 %91, 0
  br i1 %92, label %99, label %100

93:                                               ; preds = %73
  br label %67

94:                                               ; preds = %99
  store i32 %91, ptr %3, align 4
  %95 = load i32, ptr %4, align 4
  %96 = and i32 %1, %90
  %97 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %95, i32 %96)
  %98 = extractvalue { i32, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %77
  br label %94

100:                                              ; preds = %77
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @23)
  unreachable

101:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %94
  %103 = extractvalue { i32, i1 } %97, 0
  store i32 %103, ptr %4, align 4
  %104 = load i32, ptr %6, align 4
  %105 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %104, i32 1)
  %106 = extractvalue { i32, i1 } %105, 1
  br i1 %106, label %107, label %108

107:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

108:                                              ; preds = %102
  %109 = extractvalue { i32, i1 } %105, 0
  store i32 %109, ptr %6, align 4
  br label %76
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__udivdi3(i64 %0, i64 %1) #0 {
  %3 = call i64 @__udivmoddi4(i64 %0, i64 %1, ptr align 8 null)
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__modsi3(i32 %0, i32 %1) #0 {
  %3 = call i32 @__divsi3(i32 %0, i32 %1)
  %4 = call fastcc { i32, i1 } @llvm.smul.with.overflow.i32(i32 %3, i32 %1)
  %5 = extractvalue { i32, i1 } %4, 1
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

7:                                                ; preds = %2
  %8 = extractvalue { i32, i1 } %4, 0
  %9 = sub i32 %0, %8
  ret i32 %9
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__moddi3(i64 %0, i64 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca i64, align 8
  %5 = ashr i64 %0, 63
  %6 = xor i64 %0, %5
  %7 = ashr i64 %0, 63
  %8 = sub i64 %6, %7
  %9 = ashr i64 %1, 63
  %10 = xor i64 %1, %9
  %11 = ashr i64 %1, 63
  %12 = sub i64 %10, %11
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %13 = ptrtoint ptr %4 to i64
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %13, ptr %15, align 8
  %16 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %19, align 8
  %20 = ptrtoint ptr %3 to i64
  %21 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %20, i64 0)
  %22 = call i64 @__udivmoddi4(i64 %8, i64 %12, ptr align 8 %4)
  %23 = load i64, ptr %4, align 8
  %24 = ashr i64 %0, 63
  %25 = xor i64 %23, %24
  %26 = ashr i64 %0, 63
  %27 = sub i64 %25, %26
  ret i64 %27
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__umodsi3(i32 %0, i32 %1) #0 {
  %3 = call i32 @__udivsi3(i32 %0, i32 %1)
  %4 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 %3, i32 %1)
  %5 = extractvalue { i32, i1 } %4, 1
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

7:                                                ; preds = %2
  %8 = extractvalue { i32, i1 } %4, 0
  %9 = sub i32 %0, %8
  ret i32 %9
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__umoddi3(i64 %0, i64 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca i64, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %5 = ptrtoint ptr %4 to i64
  %6 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %6, align 8
  %7 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %5, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %11, align 8
  %12 = ptrtoint ptr %3 to i64
  %13 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %12, i64 0)
  %14 = call i64 @__udivmoddi4(i64 %0, i64 %1, ptr align 8 %4)
  %15 = load i64, ptr %4, align 8
  ret i64 %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__divmodsi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = call i32 @__divsi3(i32 %0, i32 %1)
  %5 = call fastcc { i32, i1 } @llvm.smul.with.overflow.i32(i32 %4, i32 %1)
  %6 = extractvalue { i32, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %3
  %9 = extractvalue { i32, i1 } %5, 0
  %10 = sub i32 %0, %9
  store i32 %10, ptr %2, align 4
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__udivmodsi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = call i32 @__udivsi3(i32 %0, i32 %1)
  %5 = call fastcc { i32, i1 } @llvm.smul.with.overflow.i32(i32 %4, i32 %1)
  %6 = extractvalue { i32, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %3
  %9 = extractvalue { i32, i1 } %5, 0
  %10 = sub i32 %0, %9
  store i32 %10, ptr %2, align 4
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__mulsi3(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, ptr %5, align 4
  store i32 %1, ptr %4, align 4
  store i32 0, ptr %3, align 4
  br label %8

6:                                                ; preds = %16
  %7 = load i32, ptr %3, align 4
  ret i32 %7

8:                                                ; preds = %11, %2
  %9 = load i32, ptr %5, align 4
  %10 = icmp ugt i32 %9, 0
  br i1 %10, label %12, label %16

11:                                               ; preds = %17
  br label %8

12:                                               ; preds = %8
  %13 = load i32, ptr %5, align 4
  %14 = and i32 %13, 1
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %22, label %26

16:                                               ; preds = %8
  br label %6

17:                                               ; preds = %26, %22
  %18 = load i32, ptr %5, align 4
  %19 = lshr i32 %18, 1
  store i32 %19, ptr %5, align 4
  %20 = load i32, ptr %4, align 4
  %21 = shl i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %11

22:                                               ; preds = %12
  %23 = load i32, ptr %3, align 4
  %24 = load i32, ptr %4, align 4
  %25 = add i32 %23, %24
  store i32 %25, ptr %3, align 4
  br label %17

26:                                               ; preds = %12
  br label %17
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__muldi3(i64 %0, i64 %1) #0 {
  %3 = alloca %"compiler_rt.common.HalveInt(i64,false)", align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i64,false)", align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i64,false)", align 8
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  store i64 %0, ptr %6, align 8
  %7 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  store i64 %1, ptr %7, align 8
  %8 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %3, i32 0, i32 0
  %9 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %10 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %9, i32 0, i32 0
  %11 = load i32, ptr %10, align 4
  %12 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %13 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %12, i32 0, i32 0
  %14 = load i32, ptr %13, align 4
  %15 = call fastcc i64 @compiler_rt.mulXi3.muldXi__anon_3469(i32 %11, i32 %14)
  store i64 %15, ptr %8, align 8
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %3, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %16, i32 0, i32 1
  %18 = load i32, ptr %17, align 4
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %19, i32 0, i32 1
  %21 = load i32, ptr %20, align 4
  %22 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %22, i32 0, i32 0
  %24 = load i32, ptr %23, align 4
  %25 = mul i32 %21, %24
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %26, i32 0, i32 0
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %4, i32 0, i32 0
  %30 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %29, i32 0, i32 1
  %31 = load i32, ptr %30, align 4
  %32 = mul i32 %28, %31
  %33 = add i32 %25, %32
  %34 = add i32 %18, %33
  store i32 %34, ptr %17, align 4
  %35 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %3, i32 0, i32 0
  %36 = load i64, ptr %35, align 8
  ret i64 %36
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.mulXi3.muldXi__anon_3469(i32 %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca [6 x i64], align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i64,false)", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 8, i1 false)
  %6 = ptrtoint ptr %5 to i64
  %7 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %6, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 8, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %12, align 8
  %13 = ptrtoint ptr %4 to i64
  %14 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %13, i64 0)
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %15, i32 0, i32 0
  %17 = and i32 %0, 65535
  %18 = and i32 %1, 65535
  %19 = mul i32 %17, %18
  store i32 %19, ptr %16, align 4
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %21 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %20, i32 0, i32 0
  %22 = load i32, ptr %21, align 4
  %23 = lshr i32 %22, 16
  store i32 %23, ptr %3, align 4
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %24, i32 0, i32 0
  %26 = load i32, ptr %25, align 4
  %27 = and i32 %26, 65535
  store i32 %27, ptr %25, align 4
  %28 = load i32, ptr %3, align 4
  %29 = lshr i32 %0, 16
  %30 = and i32 %1, 65535
  %31 = mul i32 %29, %30
  %32 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %28, i32 %31)
  %33 = extractvalue { i32, i1 } %32, 1
  br i1 %33, label %34, label %35

34:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %2
  %36 = extractvalue { i32, i1 } %32, 0
  store i32 %36, ptr %3, align 4
  %37 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %38 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %37, i32 0, i32 0
  %39 = load i32, ptr %38, align 4
  %40 = load i32, ptr %3, align 4
  %41 = and i32 %40, 65535
  %42 = shl i32 %41, 16
  %43 = add i32 %39, %42
  store i32 %43, ptr %38, align 4
  %44 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %45 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %44, i32 0, i32 1
  %46 = load i32, ptr %3, align 4
  %47 = lshr i32 %46, 16
  store i32 %47, ptr %45, align 4
  %48 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %49 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %48, i32 0, i32 0
  %50 = load i32, ptr %49, align 4
  %51 = lshr i32 %50, 16
  store i32 %51, ptr %3, align 4
  %52 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %52, i32 0, i32 0
  %54 = load i32, ptr %53, align 4
  %55 = and i32 %54, 65535
  store i32 %55, ptr %53, align 4
  %56 = load i32, ptr %3, align 4
  %57 = lshr i32 %1, 16
  %58 = and i32 %0, 65535
  %59 = mul i32 %57, %58
  %60 = add i32 %56, %59
  store i32 %60, ptr %3, align 4
  %61 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %62 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %61, i32 0, i32 0
  %63 = load i32, ptr %62, align 4
  %64 = load i32, ptr %3, align 4
  %65 = and i32 %64, 65535
  %66 = shl i32 %65, 16
  %67 = add i32 %63, %66
  store i32 %67, ptr %62, align 4
  %68 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %69 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %68, i32 0, i32 1
  %70 = load i32, ptr %69, align 4
  %71 = load i32, ptr %3, align 4
  %72 = lshr i32 %71, 16
  %73 = add i32 %70, %72
  store i32 %73, ptr %69, align 4
  %74 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %75 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3443", ptr %74, i32 0, i32 1
  %76 = load i32, ptr %75, align 4
  %77 = lshr i32 %0, 16
  %78 = lshr i32 %1, 16
  %79 = mul i32 %77, %78
  %80 = add i32 %76, %79
  store i32 %80, ptr %75, align 4
  %81 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false)", ptr %5, i32 0, i32 0
  %82 = load i64, ptr %81, align 8
  ret i64 %82
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__multi3(i128 %0, i128 %1) #0 {
  %3 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 8
  %4 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 8
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  store i128 %0, ptr %6, align 8
  %7 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  store i128 %1, ptr %7, align 8
  %8 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %3, i32 0, i32 0
  %9 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %10 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %9, i32 0, i32 0
  %11 = load i64, ptr %10, align 8
  %12 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %13 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %12, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = call fastcc i128 @compiler_rt.mulXi3.muldXi__anon_3471(i64 %11, i64 %14)
  store i128 %15, ptr %8, align 8
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %3, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %16, i32 0, i32 1
  %18 = load i64, ptr %17, align 8
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %19, i32 0, i32 1
  %21 = load i64, ptr %20, align 8
  %22 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %22, i32 0, i32 0
  %24 = load i64, ptr %23, align 8
  %25 = mul i64 %21, %24
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %26, i32 0, i32 0
  %28 = load i64, ptr %27, align 8
  %29 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %30 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %29, i32 0, i32 1
  %31 = load i64, ptr %30, align 8
  %32 = mul i64 %28, %31
  %33 = add i64 %25, %32
  %34 = add i64 %18, %33
  store i64 %34, ptr %17, align 8
  %35 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %3, i32 0, i32 0
  %36 = load i128, ptr %35, align 8
  ret i128 %36
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.mulXi3.muldXi__anon_3471(i64 %0, i64 %1) unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca [6 x i64], align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 16, i1 false)
  %6 = ptrtoint ptr %5 to i64
  %7 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %6, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 16, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %12, align 8
  %13 = ptrtoint ptr %4 to i64
  %14 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %13, i64 0)
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %15, i32 0, i32 0
  %17 = and i64 %0, 4294967295
  %18 = and i64 %1, 4294967295
  %19 = mul i64 %17, %18
  store i64 %19, ptr %16, align 8
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %21 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %20, i32 0, i32 0
  %22 = load i64, ptr %21, align 8
  %23 = lshr i64 %22, 32
  store i64 %23, ptr %3, align 8
  %24 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %25 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %24, i32 0, i32 0
  %26 = load i64, ptr %25, align 8
  %27 = and i64 %26, 4294967295
  store i64 %27, ptr %25, align 8
  %28 = load i64, ptr %3, align 8
  %29 = lshr i64 %0, 32
  %30 = and i64 %1, 4294967295
  %31 = mul i64 %29, %30
  %32 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %28, i64 %31)
  %33 = extractvalue { i64, i1 } %32, 1
  br i1 %33, label %34, label %35

34:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %2
  %36 = extractvalue { i64, i1 } %32, 0
  store i64 %36, ptr %3, align 8
  %37 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %38 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %37, i32 0, i32 0
  %39 = load i64, ptr %38, align 8
  %40 = load i64, ptr %3, align 8
  %41 = and i64 %40, 4294967295
  %42 = shl i64 %41, 32
  %43 = add i64 %39, %42
  store i64 %43, ptr %38, align 8
  %44 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %45 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %44, i32 0, i32 1
  %46 = load i64, ptr %3, align 8
  %47 = lshr i64 %46, 32
  store i64 %47, ptr %45, align 8
  %48 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %49 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %48, i32 0, i32 0
  %50 = load i64, ptr %49, align 8
  %51 = lshr i64 %50, 32
  store i64 %51, ptr %3, align 8
  %52 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %52, i32 0, i32 0
  %54 = load i64, ptr %53, align 8
  %55 = and i64 %54, 4294967295
  store i64 %55, ptr %53, align 8
  %56 = load i64, ptr %3, align 8
  %57 = lshr i64 %1, 32
  %58 = and i64 %0, 4294967295
  %59 = mul i64 %57, %58
  %60 = add i64 %56, %59
  store i64 %60, ptr %3, align 8
  %61 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %62 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %61, i32 0, i32 0
  %63 = load i64, ptr %62, align 8
  %64 = load i64, ptr %3, align 8
  %65 = and i64 %64, 4294967295
  %66 = shl i64 %65, 32
  %67 = add i64 %63, %66
  store i64 %67, ptr %62, align 8
  %68 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %69 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %68, i32 0, i32 1
  %70 = load i64, ptr %69, align 8
  %71 = load i64, ptr %3, align 8
  %72 = lshr i64 %71, 32
  %73 = add i64 %70, %72
  store i64 %73, ptr %69, align 8
  %74 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %75 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3425", ptr %74, i32 0, i32 1
  %76 = load i64, ptr %75, align 8
  %77 = lshr i64 %0, 32
  %78 = lshr i64 %1, 32
  %79 = mul i64 %77, %78
  %80 = add i64 %76, %79
  store i64 %80, ptr %75, align 8
  %81 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %82 = load i128, ptr %81, align 8
  ret i128 %82
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.udivmod.udivmod__anon_3472(i128 %0, i128 %1, ptr align 8 %2) unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = alloca i128, align 8
  %6 = alloca i128, align 8
  %7 = alloca i7, align 1
  %8 = alloca [2 x i64], align 8
  %9 = alloca [2 x i64], align 8
  %10 = alloca [2 x i64], align 8
  %11 = alloca [2 x i64], align 8
  %12 = alloca [2 x i64], align 8
  %13 = alloca [2 x i64], align 8
  %14 = icmp ugt i128 %1, %0
  br i1 %14, label %19, label %21

15:                                               ; preds = %21
  store i128 %0, ptr %12, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %13, ptr align 8 %12, i64 16, i1 false)
  store i128 %1, ptr %10, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 undef, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 undef, i64 16, i1 false)
  %16 = getelementptr inbounds [2 x i64], ptr %11, i64 0, i64 1
  %17 = load i64, ptr %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %43, label %50

19:                                               ; preds = %3
  %20 = icmp ne ptr %2, null
  br i1 %20, label %23, label %24

21:                                               ; preds = %3
  br label %15

22:                                               ; preds = %24, %23
  ret i128 0

23:                                               ; preds = %19
  store i128 %0, ptr %2, align 8
  br label %22

24:                                               ; preds = %19
  br label %22

25:                                               ; preds = %50
  %26 = getelementptr inbounds [2 x i64], ptr %11, i64 0, i64 1
  %27 = load i64, ptr %26, align 8
  %28 = call i64 @llvm.ctlz.i64(i64 %27, i1 false)
  %29 = trunc i64 %28 to i7
  %30 = getelementptr inbounds [2 x i64], ptr %13, i64 0, i64 1
  %31 = load i64, ptr %30, align 8
  %32 = call i64 @llvm.ctlz.i64(i64 %31, i1 false)
  %33 = trunc i64 %32 to i7
  %34 = sub nuw i7 %29, %33
  store i7 %34, ptr %7, align 1
  %35 = load i128, ptr %13, align 8
  store i128 %35, ptr %6, align 8
  %36 = load i128, ptr %11, align 8
  %37 = load i7, ptr %7, align 1
  %38 = zext i7 %37 to i128
  %39 = shl i128 %36, %38
  store i128 %39, ptr %5, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 @122, i64 16, i1 false)
  store i64 0, ptr %4, align 8
  %40 = load i7, ptr %7, align 1
  %41 = add nuw i7 %40, 1
  %42 = zext i7 %41 to i64
  br label %90

43:                                               ; preds = %15
  %44 = getelementptr inbounds [2 x i64], ptr %8, i64 0, i64 1
  store i64 0, ptr %44, align 8
  %45 = getelementptr inbounds [2 x i64], ptr %13, i64 0, i64 1
  %46 = load i64, ptr %45, align 8
  %47 = getelementptr inbounds [2 x i64], ptr %11, i64 0, i64 0
  %48 = load i64, ptr %47, align 8
  %49 = icmp ult i64 %46, %48
  br i1 %49, label %53, label %64

50:                                               ; preds = %15
  br label %25

51:                                               ; preds = %64, %53
  %52 = icmp ne ptr %2, null
  br i1 %52, label %85, label %87

53:                                               ; preds = %43
  %54 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 1
  store i64 0, ptr %54, align 8
  %55 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 0
  %56 = getelementptr inbounds [2 x i64], ptr %13, i64 0, i64 1
  %57 = load i64, ptr %56, align 8
  %58 = getelementptr inbounds [2 x i64], ptr %13, i64 0, i64 0
  %59 = load i64, ptr %58, align 8
  %60 = getelementptr inbounds [2 x i64], ptr %11, i64 0, i64 0
  %61 = load i64, ptr %60, align 8
  %62 = getelementptr inbounds [2 x i64], ptr %8, i64 0, i64 0
  %63 = call fastcc i64 @compiler_rt.udivmod.divwide__anon_4044(i64 %57, i64 %59, i64 %61, ptr nonnull align 8 %62)
  store i64 %63, ptr %55, align 8
  br label %51

64:                                               ; preds = %43
  %65 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 1
  %66 = getelementptr inbounds [2 x i64], ptr %13, i64 0, i64 1
  %67 = load i64, ptr %66, align 8
  %68 = getelementptr inbounds [2 x i64], ptr %11, i64 0, i64 0
  %69 = load i64, ptr %68, align 8
  %70 = udiv i64 %67, %69
  store i64 %70, ptr %65, align 8
  %71 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 0
  %72 = getelementptr inbounds [2 x i64], ptr %13, i64 0, i64 1
  %73 = load i64, ptr %72, align 8
  %74 = getelementptr inbounds [2 x i64], ptr %11, i64 0, i64 0
  %75 = load i64, ptr %74, align 8
  %76 = urem i64 %73, %75
  %77 = getelementptr inbounds [2 x i64], ptr %13, i64 0, i64 0
  %78 = load i64, ptr %77, align 8
  %79 = getelementptr inbounds [2 x i64], ptr %11, i64 0, i64 0
  %80 = load i64, ptr %79, align 8
  %81 = getelementptr inbounds [2 x i64], ptr %8, i64 0, i64 0
  %82 = call fastcc i64 @compiler_rt.udivmod.divwide__anon_4044(i64 %76, i64 %78, i64 %80, ptr nonnull align 8 %81)
  store i64 %82, ptr %71, align 8
  br label %51

83:                                               ; preds = %87, %85
  %84 = load i128, ptr %9, align 8
  ret i128 %84

85:                                               ; preds = %51
  %86 = load i128, ptr %8, align 8
  store i128 %86, ptr %2, align 8
  br label %83

87:                                               ; preds = %51
  br label %83

88:                                               ; preds = %115
  %89 = icmp ne ptr %2, null
  br i1 %89, label %118, label %120

90:                                               ; preds = %93, %25
  %91 = load i64, ptr %4, align 8
  %92 = icmp ult i64 %91, %42
  br i1 %92, label %95, label %115

93:                                               ; preds = %95
  %94 = add nuw i64 %91, 1
  store i64 %94, ptr %4, align 8
  br label %90

95:                                               ; preds = %90
  %96 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 0
  %97 = load i64, ptr %96, align 8
  %98 = shl i64 %97, 1
  store i64 %98, ptr %96, align 8
  %99 = load i128, ptr %5, align 8
  %100 = load i128, ptr %6, align 8
  %101 = sub i128 %99, %100
  %102 = sub i128 %101, 1
  %103 = ashr i128 %102, 127
  %104 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 0
  %105 = load i64, ptr %104, align 8
  %106 = and i128 %103, 1
  %107 = trunc i128 %106 to i64
  %108 = or i64 %105, %107
  store i64 %108, ptr %104, align 8
  %109 = load i128, ptr %6, align 8
  %110 = load i128, ptr %5, align 8
  %111 = and i128 %110, %103
  %112 = sub nuw i128 %109, %111
  store i128 %112, ptr %6, align 8
  %113 = load i128, ptr %5, align 8
  %114 = lshr i128 %113, 1
  store i128 %114, ptr %5, align 8
  br label %93

115:                                              ; preds = %90
  br label %88

116:                                              ; preds = %120, %118
  %117 = load i128, ptr %9, align 8
  ret i128 %117

118:                                              ; preds = %88
  %119 = load i128, ptr %6, align 8
  store i128 %119, ptr %2, align 8
  br label %116

120:                                              ; preds = %88
  br label %116
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__udivti3(i128 %0, i128 %1) #0 {
  %3 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3472(i128 %0, i128 %1, ptr align 8 null)
  ret i128 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__modti3(i128 %0, i128 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca i128, align 8
  %5 = ashr i128 %0, 127
  %6 = ashr i128 %1, 127
  %7 = xor i128 %0, %5
  %8 = sub i128 %7, %5
  %9 = xor i128 %1, %6
  %10 = sub i128 %9, %6
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %11 = ptrtoint ptr %4 to i64
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %11, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %15, align 8
  %16 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %17, align 8
  %18 = ptrtoint ptr %3 to i64
  %19 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %18, i64 0)
  %20 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3472(i128 %8, i128 %10, ptr align 8 %4)
  %21 = load i128, ptr %4, align 8
  %22 = xor i128 %21, %5
  %23 = sub i128 %22, %5
  ret i128 %23
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__umodti3(i128 %0, i128 %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca i128, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %5 = ptrtoint ptr %4 to i64
  %6 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %6, align 8
  %7 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %5, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %11, align 8
  %12 = ptrtoint ptr %3 to i64
  %13 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %12, i64 0)
  %14 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3472(i128 %0, i128 %1, ptr align 8 %4)
  %15 = load i128, ptr %4, align 8
  ret i128 %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__absvsi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = ashr i32 %0, 31
  %4 = load i32, ptr %2, align 4
  %5 = add i32 %4, %3
  store i32 %5, ptr %2, align 4
  %6 = load i32, ptr %2, align 4
  %7 = xor i32 %6, %3
  store i32 %7, ptr %2, align 4
  %8 = load i32, ptr %2, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %12, label %13

10:                                               ; preds = %13
  %11 = load i32, ptr %2, align 4
  ret i32 %11

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.absv.absv__anon_3473, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @24)
  unreachable

13:                                               ; preds = %1
  br label %10
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__absvdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, ptr %2, align 8
  %3 = ashr i64 %0, 63
  %4 = load i64, ptr %2, align 8
  %5 = add i64 %4, %3
  store i64 %5, ptr %2, align 8
  %6 = load i64, ptr %2, align 8
  %7 = xor i64 %6, %3
  store i64 %7, ptr %2, align 8
  %8 = load i64, ptr %2, align 8
  %9 = icmp slt i64 %8, 0
  br i1 %9, label %12, label %13

10:                                               ; preds = %13
  %11 = load i64, ptr %2, align 8
  ret i64 %11

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.absv.absv__anon_3473, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @25)
  unreachable

13:                                               ; preds = %1
  br label %10
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__absvti2(i128 %0) #0 {
  %2 = alloca i128, align 8
  store i128 %0, ptr %2, align 8
  %3 = ashr i128 %0, 127
  %4 = load i128, ptr %2, align 8
  %5 = add i128 %4, %3
  store i128 %5, ptr %2, align 8
  %6 = load i128, ptr %2, align 8
  %7 = xor i128 %6, %3
  store i128 %7, ptr %2, align 8
  %8 = load i128, ptr %2, align 8
  %9 = icmp slt i128 %8, 0
  br i1 %9, label %12, label %13

10:                                               ; preds = %13
  %11 = load i128, ptr %2, align 8
  ret i128 %11

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.absv.absv__anon_3473, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @26)
  unreachable

13:                                               ; preds = %1
  br label %10
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__negvsi2(i32 %0) #0 {
  %2 = icmp eq i32 %0, -2147483648
  br i1 %2, label %6, label %7

3:                                                ; preds = %7
  %4 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %0)
  %5 = extractvalue { i32, i1 } %4, 1
  br i1 %5, label %8, label %9

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.negv.negvXi__anon_3474, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @27)
  unreachable

7:                                                ; preds = %1
  br label %3

8:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

9:                                                ; preds = %3
  %10 = extractvalue { i32, i1 } %4, 0
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__negvdi2(i64 %0) #0 {
  %2 = icmp eq i64 %0, -9223372036854775808
  br i1 %2, label %6, label %7

3:                                                ; preds = %7
  %4 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %0)
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %8, label %9

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.negv.negvXi__anon_3474, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @28)
  unreachable

7:                                                ; preds = %1
  br label %3

8:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

9:                                                ; preds = %3
  %10 = extractvalue { i64, i1 } %4, 0
  ret i64 %10
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__negvti2(i128 %0) #0 {
  %2 = icmp eq i128 %0, -170141183460469231731687303715884105728
  br i1 %2, label %6, label %7

3:                                                ; preds = %7
  %4 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 0, i128 %0)
  %5 = extractvalue { i128, i1 } %4, 1
  br i1 %5, label %8, label %9

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.negv.negvXi__anon_3474, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @29)
  unreachable

7:                                                ; preds = %1
  br label %3

8:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

9:                                                ; preds = %3
  %10 = extractvalue { i128, i1 } %4, 0
  ret i128 %10
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__addosi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i32, align 4
  store i32 0, ptr %2, align 4
  %5 = add i32 %0, %1
  store i32 %5, ptr %4, align 4
  %6 = load i32, ptr %4, align 4
  %7 = xor i32 %6, %0
  %8 = load i32, ptr %4, align 4
  %9 = xor i32 %8, %1
  %10 = and i32 %7, %9
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %14, label %15

12:                                               ; preds = %15, %14
  %13 = load i32, ptr %4, align 4
  ret i32 %13

14:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %12

15:                                               ; preds = %3
  br label %12
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__addodi4(i64 %0, i64 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i64, align 8
  store i32 0, ptr %2, align 4
  %5 = add i64 %0, %1
  store i64 %5, ptr %4, align 8
  %6 = load i64, ptr %4, align 8
  %7 = xor i64 %6, %0
  %8 = load i64, ptr %4, align 8
  %9 = xor i64 %8, %1
  %10 = and i64 %7, %9
  %11 = icmp slt i64 %10, 0
  br i1 %11, label %14, label %15

12:                                               ; preds = %15, %14
  %13 = load i64, ptr %4, align 8
  ret i64 %13

14:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %12

15:                                               ; preds = %3
  br label %12
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__addoti4(i128 %0, i128 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i128, align 8
  store i32 0, ptr %2, align 4
  %5 = add i128 %0, %1
  store i128 %5, ptr %4, align 8
  %6 = load i128, ptr %4, align 8
  %7 = xor i128 %6, %0
  %8 = load i128, ptr %4, align 8
  %9 = xor i128 %8, %1
  %10 = and i128 %7, %9
  %11 = icmp slt i128 %10, 0
  br i1 %11, label %14, label %15

12:                                               ; preds = %15, %14
  %13 = load i128, ptr %4, align 8
  ret i128 %13

14:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %12

15:                                               ; preds = %3
  br label %12
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__subosi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i32, align 4
  store i32 0, ptr %2, align 4
  %5 = sub i32 %0, %1
  store i32 %5, ptr %4, align 4
  %6 = xor i32 %0, %1
  %7 = load i32, ptr %4, align 4
  %8 = xor i32 %7, %0
  %9 = and i32 %6, %8
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %13, label %14

11:                                               ; preds = %14, %13
  %12 = load i32, ptr %4, align 4
  ret i32 %12

13:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %11

14:                                               ; preds = %3
  br label %11
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__subodi4(i64 %0, i64 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i64, align 8
  store i32 0, ptr %2, align 4
  %5 = sub i64 %0, %1
  store i64 %5, ptr %4, align 8
  %6 = xor i64 %0, %1
  %7 = load i64, ptr %4, align 8
  %8 = xor i64 %7, %0
  %9 = and i64 %6, %8
  %10 = icmp slt i64 %9, 0
  br i1 %10, label %13, label %14

11:                                               ; preds = %14, %13
  %12 = load i64, ptr %4, align 8
  ret i64 %12

13:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %11

14:                                               ; preds = %3
  br label %11
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__suboti4(i128 %0, i128 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i128, align 8
  store i32 0, ptr %2, align 4
  %5 = sub i128 %0, %1
  store i128 %5, ptr %4, align 8
  %6 = xor i128 %0, %1
  %7 = load i128, ptr %4, align 8
  %8 = xor i128 %7, %0
  %9 = and i128 %6, %8
  %10 = icmp slt i128 %9, 0
  br i1 %10, label %13, label %14

11:                                               ; preds = %14, %13
  %12 = load i128, ptr %4, align 8
  ret i128 %12

13:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %11

14:                                               ; preds = %3
  br label %11
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__mulosi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i64, align 8
  store i32 0, ptr %2, align 4
  %5 = sext i32 %0 to i64
  %6 = sext i32 %1 to i64
  %7 = call fastcc { i64, i1 } @llvm.smul.with.overflow.i64(i64 %5, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %3
  %11 = extractvalue { i64, i1 } %7, 0
  store i64 %11, ptr %4, align 8
  %12 = load i64, ptr %4, align 8
  %13 = icmp slt i64 %12, -2147483648
  br i1 %13, label %19, label %20

14:                                               ; preds = %24, %23
  %15 = load i64, ptr %4, align 8
  %16 = trunc i64 %15 to i32
  ret i32 %16

17:                                               ; preds = %20, %19
  %18 = phi i1 [ true, %19 ], [ %22, %20 ]
  br i1 %18, label %23, label %24

19:                                               ; preds = %10
  br label %17

20:                                               ; preds = %10
  %21 = load i64, ptr %4, align 8
  %22 = icmp slt i64 2147483647, %21
  br label %17

23:                                               ; preds = %17
  store i32 1, ptr %2, align 4
  br label %14

24:                                               ; preds = %17
  br label %14
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__mulodi4(i64 %0, i64 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i64, align 8
  store i32 0, ptr %2, align 4
  %5 = mul i64 %0, %1
  store i64 %5, ptr %4, align 8
  %6 = icmp slt i64 %0, 0
  br i1 %6, label %11, label %13

7:                                                ; preds = %37, %36
  %8 = load i64, ptr %4, align 8
  ret i64 %8

9:                                                ; preds = %13, %11
  %10 = phi i1 [ %12, %11 ], [ false, %13 ]
  br i1 %10, label %16, label %17

11:                                               ; preds = %3
  %12 = icmp eq i64 %1, -9223372036854775808
  br label %9

13:                                               ; preds = %3
  br label %9

14:                                               ; preds = %19, %16
  %15 = phi i1 [ true, %16 ], [ %20, %19 ]
  br i1 %15, label %36, label %37

16:                                               ; preds = %9
  br label %14

17:                                               ; preds = %9
  %18 = icmp ne i64 %0, 0
  br i1 %18, label %21, label %26

19:                                               ; preds = %26, %31
  %20 = phi i1 [ %33, %31 ], [ false, %26 ]
  br label %14

21:                                               ; preds = %17
  %22 = load i64, ptr %4, align 8
  %23 = icmp ne i64 %22, -9223372036854775808
  %24 = icmp ne i64 %0, -1
  %25 = or i1 %23, %24
  br i1 %25, label %29, label %30

26:                                               ; preds = %17
  br label %19

27:                                               ; preds = %29
  %28 = icmp ne i64 %0, 0
  br i1 %28, label %34, label %35

29:                                               ; preds = %21
  br label %27

30:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @30)
  unreachable

31:                                               ; preds = %34
  %32 = sdiv i64 %22, %0
  %33 = icmp ne i64 %32, %1
  br label %19

34:                                               ; preds = %27
  br label %31

35:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @30)
  unreachable

36:                                               ; preds = %14
  store i32 1, ptr %2, align 4
  br label %7

37:                                               ; preds = %14
  br label %7
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__muloti4(i128 %0, i128 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i128, align 8
  store i32 0, ptr %2, align 4
  %5 = mul i128 %0, %1
  store i128 %5, ptr %4, align 8
  %6 = icmp slt i128 %0, 0
  br i1 %6, label %11, label %13

7:                                                ; preds = %37, %36
  %8 = load i128, ptr %4, align 8
  ret i128 %8

9:                                                ; preds = %13, %11
  %10 = phi i1 [ %12, %11 ], [ false, %13 ]
  br i1 %10, label %16, label %17

11:                                               ; preds = %3
  %12 = icmp eq i128 %1, -170141183460469231731687303715884105728
  br label %9

13:                                               ; preds = %3
  br label %9

14:                                               ; preds = %19, %16
  %15 = phi i1 [ true, %16 ], [ %20, %19 ]
  br i1 %15, label %36, label %37

16:                                               ; preds = %9
  br label %14

17:                                               ; preds = %9
  %18 = icmp ne i128 %0, 0
  br i1 %18, label %21, label %26

19:                                               ; preds = %26, %31
  %20 = phi i1 [ %33, %31 ], [ false, %26 ]
  br label %14

21:                                               ; preds = %17
  %22 = load i128, ptr %4, align 8
  %23 = icmp ne i128 %22, -170141183460469231731687303715884105728
  %24 = icmp ne i128 %0, -1
  %25 = or i1 %23, %24
  br i1 %25, label %29, label %30

26:                                               ; preds = %17
  br label %19

27:                                               ; preds = %29
  %28 = icmp ne i128 %0, 0
  br i1 %28, label %34, label %35

29:                                               ; preds = %21
  br label %27

30:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @31)
  unreachable

31:                                               ; preds = %34
  %32 = sdiv i128 %22, %0
  %33 = icmp ne i128 %32, %1
  br label %19

34:                                               ; preds = %27
  br label %31

35:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @31)
  unreachable

36:                                               ; preds = %14
  store i32 1, ptr %2, align 4
  br label %7

37:                                               ; preds = %14
  br label %7
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__extendhfsf2(half %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [6 x i64], align 8
  %4 = alloca i32, align 4
  %5 = bitcast half %0 to i16
  %6 = and i16 %5, 32767
  %7 = and i16 %5, -32768
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 4, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i16 %6, 1024
  %18 = icmp ult i16 %17, 30720
  br i1 %18, label %26, label %32

19:                                               ; preds = %37, %35
  %20 = load i32, ptr %4, align 4
  %21 = zext i16 %7 to i32
  %22 = shl i32 %21, 16
  %23 = or i32 %20, %22
  store i32 %23, ptr %2, align 4
  %24 = load i32, ptr %2, align 4
  %25 = bitcast i32 %24 to float
  ret float %25

26:                                               ; preds = %1
  %27 = zext i16 %6 to i32
  %28 = shl i32 %27, 13
  store i32 %28, ptr %4, align 4
  %29 = load i32, ptr %4, align 4
  %30 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %29, i32 939524096)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %1
  %33 = icmp uge i16 %6, 31744
  br i1 %33, label %38, label %49

34:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %26
  %36 = extractvalue { i32, i1 } %30, 0
  store i32 %36, ptr %4, align 4
  br label %19

37:                                               ; preds = %51, %38
  br label %19

38:                                               ; preds = %32
  store i32 2139095040, ptr %4, align 4
  %39 = load i32, ptr %4, align 4
  %40 = and i16 %6, 512
  %41 = zext i16 %40 to i32
  %42 = shl i32 %41, 13
  %43 = or i32 %39, %42
  store i32 %43, ptr %4, align 4
  %44 = load i32, ptr %4, align 4
  %45 = and i16 %6, 511
  %46 = zext i16 %45 to i32
  %47 = shl i32 %46, 13
  %48 = or i32 %44, %47
  store i32 %48, ptr %4, align 4
  br label %37

49:                                               ; preds = %32
  %50 = icmp ne i16 %6, 0
  br i1 %50, label %52, label %57

51:                                               ; preds = %57, %86
  br label %37

52:                                               ; preds = %49
  %53 = call i16 @llvm.ctlz.i16(i16 %6, i1 false)
  %54 = trunc i16 %53 to i5
  %55 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %54, i5 5)
  %56 = extractvalue { i5, i1 } %55, 1
  br i1 %56, label %58, label %59

57:                                               ; preds = %49
  store i32 0, ptr %4, align 4
  br label %51

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i5, i1 } %55, 0
  %61 = zext i5 %60 to i32
  %62 = zext i16 %6 to i32
  %63 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 13, i32 %61)
  %64 = extractvalue { i32, i1 } %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i32, i1 } %63, 0
  %68 = sub i32 31, %67
  %69 = icmp ule i32 %68, 31
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i32 %67 to i5
  %72 = zext i5 %71 to i32
  %73 = shl i32 %62, %72
  store i32 %73, ptr %4, align 4
  %74 = load i32, ptr %4, align 4
  %75 = xor i32 %74, 8388608
  store i32 %75, ptr %4, align 4
  %76 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 112, i32 %61)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @32)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %81
  %87 = extractvalue { i32, i1 } %83, 0
  %88 = load i32, ptr %4, align 4
  %89 = shl i32 %87, 23
  %90 = or i32 %88, %89
  store i32 %90, ptr %4, align 4
  br label %51
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.ctlz.i16(i16, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i5, i1 } @llvm.usub.with.overflow.i5(i5, i5) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__extendhfdf2(half %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca [6 x i64], align 8
  %4 = alloca i64, align 8
  %5 = bitcast half %0 to i16
  %6 = and i16 %5, 32767
  %7 = and i16 %5, -32768
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i16 %6, 1024
  %18 = icmp ult i16 %17, 30720
  br i1 %18, label %26, label %32

19:                                               ; preds = %37, %35
  %20 = load i64, ptr %4, align 8
  %21 = zext i16 %7 to i64
  %22 = shl i64 %21, 48
  %23 = or i64 %20, %22
  store i64 %23, ptr %2, align 8
  %24 = load i64, ptr %2, align 8
  %25 = bitcast i64 %24 to double
  ret double %25

26:                                               ; preds = %1
  %27 = zext i16 %6 to i64
  %28 = shl i64 %27, 42
  store i64 %28, ptr %4, align 8
  %29 = load i64, ptr %4, align 8
  %30 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %29, i64 4539628424389459968)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %1
  %33 = icmp uge i16 %6, 31744
  br i1 %33, label %38, label %49

34:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %26
  %36 = extractvalue { i64, i1 } %30, 0
  store i64 %36, ptr %4, align 8
  br label %19

37:                                               ; preds = %51, %38
  br label %19

38:                                               ; preds = %32
  store i64 9218868437227405312, ptr %4, align 8
  %39 = load i64, ptr %4, align 8
  %40 = and i16 %6, 512
  %41 = zext i16 %40 to i64
  %42 = shl i64 %41, 42
  %43 = or i64 %39, %42
  store i64 %43, ptr %4, align 8
  %44 = load i64, ptr %4, align 8
  %45 = and i16 %6, 511
  %46 = zext i16 %45 to i64
  %47 = shl i64 %46, 42
  %48 = or i64 %44, %47
  store i64 %48, ptr %4, align 8
  br label %37

49:                                               ; preds = %32
  %50 = icmp ne i16 %6, 0
  br i1 %50, label %52, label %57

51:                                               ; preds = %57, %86
  br label %37

52:                                               ; preds = %49
  %53 = call i16 @llvm.ctlz.i16(i16 %6, i1 false)
  %54 = trunc i16 %53 to i5
  %55 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %54, i5 5)
  %56 = extractvalue { i5, i1 } %55, 1
  br i1 %56, label %58, label %59

57:                                               ; preds = %49
  store i64 0, ptr %4, align 8
  br label %51

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i5, i1 } %55, 0
  %61 = zext i5 %60 to i32
  %62 = zext i16 %6 to i64
  %63 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 42, i32 %61)
  %64 = extractvalue { i32, i1 } %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i32, i1 } %63, 0
  %68 = sub i32 63, %67
  %69 = icmp ule i32 %68, 63
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i32 %67 to i6
  %72 = zext i6 %71 to i64
  %73 = shl i64 %62, %72
  store i64 %73, ptr %4, align 8
  %74 = load i64, ptr %4, align 8
  %75 = xor i64 %74, 4503599627370496
  store i64 %75, ptr %4, align 8
  %76 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 1008, i32 %61)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @33)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %81
  %87 = extractvalue { i32, i1 } %83, 0
  %88 = load i64, ptr %4, align 8
  %89 = zext i32 %87 to i64
  %90 = shl i64 %89, 52
  %91 = or i64 %88, %90
  store i64 %91, ptr %4, align 8
  br label %51
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__extendhftf2(half %0) #0 {
  %2 = alloca i128, align 16
  %3 = alloca [6 x i64], align 8
  %4 = alloca i128, align 8
  %5 = bitcast half %0 to i16
  %6 = and i16 %5, 32767
  %7 = and i16 %5, -32768
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i16 %6, 1024
  %18 = icmp ult i16 %17, 30720
  br i1 %18, label %26, label %32

19:                                               ; preds = %37, %35
  %20 = load i128, ptr %4, align 8
  %21 = zext i16 %7 to i128
  %22 = shl i128 %21, 112
  %23 = or i128 %20, %22
  store i128 %23, ptr %2, align 16
  %24 = load i128, ptr %2, align 16
  %25 = bitcast i128 %24 to fp128
  ret fp128 %25

26:                                               ; preds = %1
  %27 = zext i16 %6 to i128
  %28 = shl i128 %27, 102
  store i128 %28, ptr %4, align 8
  %29 = load i128, ptr %4, align 8
  %30 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %29, i128 84987514980498058623787163916674531328)
  %31 = extractvalue { i128, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %1
  %33 = icmp uge i16 %6, 31744
  br i1 %33, label %38, label %49

34:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %26
  %36 = extractvalue { i128, i1 } %30, 0
  store i128 %36, ptr %4, align 8
  br label %19

37:                                               ; preds = %51, %38
  br label %19

38:                                               ; preds = %32
  store i128 170135991163610696904058773219554885632, ptr %4, align 8
  %39 = load i128, ptr %4, align 8
  %40 = and i16 %6, 512
  %41 = zext i16 %40 to i128
  %42 = shl i128 %41, 102
  %43 = or i128 %39, %42
  store i128 %43, ptr %4, align 8
  %44 = load i128, ptr %4, align 8
  %45 = and i16 %6, 511
  %46 = zext i16 %45 to i128
  %47 = shl i128 %46, 102
  %48 = or i128 %44, %47
  store i128 %48, ptr %4, align 8
  br label %37

49:                                               ; preds = %32
  %50 = icmp ne i16 %6, 0
  br i1 %50, label %52, label %57

51:                                               ; preds = %57, %86
  br label %37

52:                                               ; preds = %49
  %53 = call i16 @llvm.ctlz.i16(i16 %6, i1 false)
  %54 = trunc i16 %53 to i5
  %55 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %54, i5 5)
  %56 = extractvalue { i5, i1 } %55, 1
  br i1 %56, label %58, label %59

57:                                               ; preds = %49
  store i128 0, ptr %4, align 8
  br label %51

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i5, i1 } %55, 0
  %61 = zext i5 %60 to i32
  %62 = zext i16 %6 to i128
  %63 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 102, i32 %61)
  %64 = extractvalue { i32, i1 } %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i32, i1 } %63, 0
  %68 = sub i32 127, %67
  %69 = icmp ule i32 %68, 127
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i32 %67 to i7
  %72 = zext i7 %71 to i128
  %73 = shl i128 %62, %72
  store i128 %73, ptr %4, align 8
  %74 = load i128, ptr %4, align 8
  %75 = xor i128 %74, 5192296858534827628530496329220096
  store i128 %75, ptr %4, align 8
  %76 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16368, i32 %61)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @34)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %81
  %87 = extractvalue { i32, i1 } %83, 0
  %88 = load i128, ptr %4, align 8
  %89 = zext i32 %87 to i128
  %90 = shl i128 %89, 112
  %91 = or i128 %88, %90
  store i128 %91, ptr %4, align 8
  br label %51
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__extendhfxf2(half %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca %math.F80, align 8
  %4 = bitcast half %0 to i16
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %5 = ptrtoint ptr %3 to i64
  %6 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %6, align 8
  %7 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %5, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %11, align 8
  %12 = ptrtoint ptr %2 to i64
  %13 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %12, i64 0)
  %14 = and i16 %4, 32767
  %15 = and i16 %4, -32768
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %21, label %22

17:                                               ; preds = %22, %21
  %18 = phi i16 [ -32768, %21 ], [ 0, %22 ]
  %19 = sub i16 %14, 1024
  %20 = icmp ult i16 %19, 30720
  br i1 %20, label %28, label %35

21:                                               ; preds = %1
  br label %17

22:                                               ; preds = %1
  br label %17

23:                                               ; preds = %46, %38
  %24 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %25 = load i16, ptr %24, align 2
  %26 = or i16 %25, %18
  store i16 %26, ptr %24, align 2
  %27 = call fastcc x86_fp80 @math.make_f80(ptr nonnull readonly align 8 %3)
  ret x86_fp80 %27

28:                                               ; preds = %17
  %29 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %30 = lshr i16 %14, 10
  store i16 %30, ptr %29, align 2
  %31 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %32 = load i16, ptr %31, align 2
  %33 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %32, i16 16368)
  %34 = extractvalue { i16, i1 } %33, 1
  br i1 %34, label %37, label %38

35:                                               ; preds = %17
  %36 = icmp uge i16 %14, 31744
  br i1 %36, label %47, label %62

37:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

38:                                               ; preds = %28
  %39 = extractvalue { i16, i1 } %33, 0
  store i16 %39, ptr %31, align 2
  %40 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %41 = zext i16 %14 to i64
  %42 = shl i64 %41, 53
  store i64 %42, ptr %40, align 8
  %43 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %44 = load i64, ptr %43, align 8
  %45 = or i64 %44, -9223372036854775808
  store i64 %45, ptr %43, align 8
  br label %23

46:                                               ; preds = %64, %47
  br label %23

47:                                               ; preds = %35
  %48 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 32767, ptr %48, align 2
  %49 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 -9223372036854775808, ptr %49, align 8
  %50 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %51 = load i64, ptr %50, align 8
  %52 = and i16 %14, 512
  %53 = zext i16 %52 to i64
  %54 = shl i64 %53, 53
  %55 = or i64 %51, %54
  store i64 %55, ptr %50, align 8
  %56 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %57 = load i64, ptr %56, align 8
  %58 = and i16 %14, 511
  %59 = zext i16 %58 to i64
  %60 = shl i64 %59, 53
  %61 = or i64 %57, %60
  store i64 %61, ptr %56, align 8
  br label %46

62:                                               ; preds = %35
  %63 = icmp ne i16 %14, 0
  br i1 %63, label %65, label %70

64:                                               ; preds = %70, %122
  br label %46

65:                                               ; preds = %62
  %66 = call i16 @llvm.ctlz.i16(i16 %14, i1 false)
  %67 = trunc i16 %66 to i5
  %68 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %67, i5 5)
  %69 = extractvalue { i5, i1 } %68, 1
  br i1 %69, label %73, label %74

70:                                               ; preds = %62
  %71 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 0, ptr %71, align 2
  %72 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 0, ptr %72, align 8
  br label %64

73:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %65
  %75 = extractvalue { i5, i1 } %68, 0
  %76 = zext i5 %75 to i16
  %77 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %78 = zext i16 %14 to i64
  %79 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 53, i16 %76)
  %80 = extractvalue { i16, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %74
  %83 = extractvalue { i16, i1 } %79, 0
  %84 = sub i16 63, %83
  %85 = icmp ule i16 %84, 63
  br i1 %85, label %96, label %97

86:                                               ; preds = %96
  %87 = trunc i16 %83 to i6
  %88 = zext i6 %87 to i64
  %89 = shl i64 %78, %88
  store i64 %89, ptr %77, align 8
  %90 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %91 = load i64, ptr %90, align 8
  %92 = or i64 %91, -9223372036854775808
  store i64 %92, ptr %90, align 8
  %93 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %94 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 10, i16 %76)
  %95 = extractvalue { i16, i1 } %94, 1
  br i1 %95, label %98, label %99

96:                                               ; preds = %82
  br label %86

97:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @35)
  unreachable

98:                                               ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %86
  %100 = extractvalue { i16, i1 } %94, 0
  %101 = sub i16 15, %100
  %102 = icmp ule i16 %101, 15
  br i1 %102, label %114, label %115

103:                                              ; preds = %114
  %104 = trunc i16 %100 to i4
  %105 = zext i4 %104 to i16
  %106 = lshr i16 %14, %105
  store i16 %106, ptr %93, align 2
  %107 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %108 = load i16, ptr %107, align 2
  %109 = xor i16 %108, 1
  store i16 %109, ptr %107, align 2
  %110 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %111 = load i16, ptr %110, align 2
  %112 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 16368, i16 %76)
  %113 = extractvalue { i16, i1 } %112, 1
  br i1 %113, label %116, label %117

114:                                              ; preds = %99
  br label %103

115:                                              ; preds = %99
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @35)
  unreachable

116:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

117:                                              ; preds = %103
  %118 = extractvalue { i16, i1 } %112, 0
  %119 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %118, i16 1)
  %120 = extractvalue { i16, i1 } %119, 1
  br i1 %120, label %121, label %122

121:                                              ; preds = %117
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

122:                                              ; preds = %117
  %123 = extractvalue { i16, i1 } %119, 0
  %124 = or i16 %111, %123
  store i16 %124, ptr %110, align 2
  br label %64
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i16, i1 } @llvm.uadd.with.overflow.i16(i16, i16) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i16, i1 } @llvm.usub.with.overflow.i16(i16, i16) #1

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @math.make_f80(ptr nonnull readonly align 8 %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %math.F80, ptr %0, i32 0, i32 1
  %3 = load i16, ptr %2, align 2
  %4 = zext i16 %3 to i80
  br i1 true, label %12, label %13

5:                                                ; preds = %12
  %6 = shl i80 %4, 64
  %7 = getelementptr inbounds %math.F80, ptr %0, i32 0, i32 0
  %8 = load i64, ptr %7, align 8
  %9 = zext i64 %8 to i80
  %10 = or i80 %6, %9
  %11 = bitcast i80 %10 to x86_fp80
  ret x86_fp80 %11

12:                                               ; preds = %1
  br label %5

13:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @123)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__extendsfdf2(float %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca [6 x i64], align 8
  %4 = alloca i64, align 8
  %5 = bitcast float %0 to i32
  %6 = and i32 %5, 2147483647
  %7 = and i32 %5, -2147483648
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i32 %6, 8388608
  %18 = icmp ult i32 %17, 2130706432
  br i1 %18, label %26, label %32

19:                                               ; preds = %37, %35
  %20 = load i64, ptr %4, align 8
  %21 = zext i32 %7 to i64
  %22 = shl i64 %21, 32
  %23 = or i64 %20, %22
  store i64 %23, ptr %2, align 8
  %24 = load i64, ptr %2, align 8
  %25 = bitcast i64 %24 to double
  ret double %25

26:                                               ; preds = %1
  %27 = zext i32 %6 to i64
  %28 = shl i64 %27, 29
  store i64 %28, ptr %4, align 8
  %29 = load i64, ptr %4, align 8
  %30 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %29, i64 4035225266123964416)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %1
  %33 = icmp uge i32 %6, 2139095040
  br i1 %33, label %38, label %49

34:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %26
  %36 = extractvalue { i64, i1 } %30, 0
  store i64 %36, ptr %4, align 8
  br label %19

37:                                               ; preds = %51, %38
  br label %19

38:                                               ; preds = %32
  store i64 9218868437227405312, ptr %4, align 8
  %39 = load i64, ptr %4, align 8
  %40 = and i32 %6, 4194304
  %41 = zext i32 %40 to i64
  %42 = shl i64 %41, 29
  %43 = or i64 %39, %42
  store i64 %43, ptr %4, align 8
  %44 = load i64, ptr %4, align 8
  %45 = and i32 %6, 4194303
  %46 = zext i32 %45 to i64
  %47 = shl i64 %46, 29
  %48 = or i64 %44, %47
  store i64 %48, ptr %4, align 8
  br label %37

49:                                               ; preds = %32
  %50 = icmp ne i32 %6, 0
  br i1 %50, label %52, label %57

51:                                               ; preds = %57, %86
  br label %37

52:                                               ; preds = %49
  %53 = call i32 @llvm.ctlz.i32(i32 %6, i1 false)
  %54 = trunc i32 %53 to i6
  %55 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %54, i6 8)
  %56 = extractvalue { i6, i1 } %55, 1
  br i1 %56, label %58, label %59

57:                                               ; preds = %49
  store i64 0, ptr %4, align 8
  br label %51

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i6, i1 } %55, 0
  %61 = zext i6 %60 to i32
  %62 = zext i32 %6 to i64
  %63 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 29, i32 %61)
  %64 = extractvalue { i32, i1 } %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i32, i1 } %63, 0
  %68 = sub i32 63, %67
  %69 = icmp ule i32 %68, 63
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i32 %67 to i6
  %72 = zext i6 %71 to i64
  %73 = shl i64 %62, %72
  store i64 %73, ptr %4, align 8
  %74 = load i64, ptr %4, align 8
  %75 = xor i64 %74, 4503599627370496
  store i64 %75, ptr %4, align 8
  %76 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 896, i32 %61)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @36)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %81
  %87 = extractvalue { i32, i1 } %83, 0
  %88 = load i64, ptr %4, align 8
  %89 = zext i32 %87 to i64
  %90 = shl i64 %89, 52
  %91 = or i64 %88, %90
  store i64 %91, ptr %4, align 8
  br label %51
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i6, i1 } @llvm.usub.with.overflow.i6(i6, i6) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__extendsftf2(float %0) #0 {
  %2 = alloca i128, align 16
  %3 = alloca [6 x i64], align 8
  %4 = alloca i128, align 8
  %5 = bitcast float %0 to i32
  %6 = and i32 %5, 2147483647
  %7 = and i32 %5, -2147483648
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i32 %6, 8388608
  %18 = icmp ult i32 %17, 2130706432
  br i1 %18, label %26, label %32

19:                                               ; preds = %37, %35
  %20 = load i128, ptr %4, align 8
  %21 = zext i32 %7 to i128
  %22 = shl i128 %21, 96
  %23 = or i128 %20, %22
  store i128 %23, ptr %2, align 16
  %24 = load i128, ptr %2, align 16
  %25 = bitcast i128 %24 to fp128
  ret fp128 %25

26:                                               ; preds = %1
  %27 = zext i32 %6 to i128
  %28 = shl i128 %27, 89
  store i128 %28, ptr %4, align 8
  %29 = load i128, ptr %4, align 8
  %30 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %29, i128 84405977732342157929391748327801880576)
  %31 = extractvalue { i128, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %1
  %33 = icmp uge i32 %6, 2139095040
  br i1 %33, label %38, label %49

34:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %26
  %36 = extractvalue { i128, i1 } %30, 0
  store i128 %36, ptr %4, align 8
  br label %19

37:                                               ; preds = %51, %38
  br label %19

38:                                               ; preds = %32
  store i128 170135991163610696904058773219554885632, ptr %4, align 8
  %39 = load i128, ptr %4, align 8
  %40 = and i32 %6, 4194304
  %41 = zext i32 %40 to i128
  %42 = shl i128 %41, 89
  %43 = or i128 %39, %42
  store i128 %43, ptr %4, align 8
  %44 = load i128, ptr %4, align 8
  %45 = and i32 %6, 4194303
  %46 = zext i32 %45 to i128
  %47 = shl i128 %46, 89
  %48 = or i128 %44, %47
  store i128 %48, ptr %4, align 8
  br label %37

49:                                               ; preds = %32
  %50 = icmp ne i32 %6, 0
  br i1 %50, label %52, label %57

51:                                               ; preds = %57, %86
  br label %37

52:                                               ; preds = %49
  %53 = call i32 @llvm.ctlz.i32(i32 %6, i1 false)
  %54 = trunc i32 %53 to i6
  %55 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %54, i6 8)
  %56 = extractvalue { i6, i1 } %55, 1
  br i1 %56, label %58, label %59

57:                                               ; preds = %49
  store i128 0, ptr %4, align 8
  br label %51

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i6, i1 } %55, 0
  %61 = zext i6 %60 to i32
  %62 = zext i32 %6 to i128
  %63 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 89, i32 %61)
  %64 = extractvalue { i32, i1 } %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i32, i1 } %63, 0
  %68 = sub i32 127, %67
  %69 = icmp ule i32 %68, 127
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i32 %67 to i7
  %72 = zext i7 %71 to i128
  %73 = shl i128 %62, %72
  store i128 %73, ptr %4, align 8
  %74 = load i128, ptr %4, align 8
  %75 = xor i128 %74, 5192296858534827628530496329220096
  store i128 %75, ptr %4, align 8
  %76 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16256, i32 %61)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @37)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %81
  %87 = extractvalue { i32, i1 } %83, 0
  %88 = load i128, ptr %4, align 8
  %89 = zext i32 %87 to i128
  %90 = shl i128 %89, 112
  %91 = or i128 %88, %90
  store i128 %91, ptr %4, align 8
  br label %51
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__extendsfxf2(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca %math.F80, align 8
  %4 = bitcast float %0 to i32
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %5 = ptrtoint ptr %3 to i64
  %6 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %6, align 8
  %7 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %5, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %11, align 8
  %12 = ptrtoint ptr %2 to i64
  %13 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %12, i64 0)
  %14 = and i32 %4, 2147483647
  %15 = and i32 %4, -2147483648
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %21, label %22

17:                                               ; preds = %22, %21
  %18 = phi i16 [ -32768, %21 ], [ 0, %22 ]
  %19 = sub i32 %14, 8388608
  %20 = icmp ult i32 %19, 2130706432
  br i1 %20, label %28, label %33

21:                                               ; preds = %1
  br label %17

22:                                               ; preds = %1
  br label %17

23:                                               ; preds = %52, %44
  %24 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %25 = load i16, ptr %24, align 2
  %26 = or i16 %25, %18
  store i16 %26, ptr %24, align 2
  %27 = call fastcc x86_fp80 @math.make_f80(ptr nonnull readonly align 8 %3)
  ret x86_fp80 %27

28:                                               ; preds = %17
  %29 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %30 = lshr i32 %14, 23
  %31 = sub i32 65535, %30
  %32 = icmp ule i32 %31, 65535
  br i1 %32, label %41, label %42

33:                                               ; preds = %17
  %34 = icmp uge i32 %14, 2139095040
  br i1 %34, label %53, label %68

35:                                               ; preds = %41
  %36 = trunc i32 %30 to i16
  store i16 %36, ptr %29, align 2
  %37 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %38 = load i16, ptr %37, align 2
  %39 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %38, i16 16256)
  %40 = extractvalue { i16, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %28
  br label %35

42:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @38)
  unreachable

43:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %35
  %45 = extractvalue { i16, i1 } %39, 0
  store i16 %45, ptr %37, align 2
  %46 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %47 = zext i32 %14 to i64
  %48 = shl i64 %47, 40
  store i64 %48, ptr %46, align 8
  %49 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %50 = load i64, ptr %49, align 8
  %51 = or i64 %50, -9223372036854775808
  store i64 %51, ptr %49, align 8
  br label %23

52:                                               ; preds = %70, %53
  br label %23

53:                                               ; preds = %33
  %54 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 32767, ptr %54, align 2
  %55 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 -9223372036854775808, ptr %55, align 8
  %56 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %57 = load i64, ptr %56, align 8
  %58 = and i32 %14, 4194304
  %59 = zext i32 %58 to i64
  %60 = shl i64 %59, 40
  %61 = or i64 %57, %60
  store i64 %61, ptr %56, align 8
  %62 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %63 = load i64, ptr %62, align 8
  %64 = and i32 %14, 4194303
  %65 = zext i32 %64 to i64
  %66 = shl i64 %65, 40
  %67 = or i64 %63, %66
  store i64 %67, ptr %62, align 8
  br label %52

68:                                               ; preds = %33
  %69 = icmp ne i32 %14, 0
  br i1 %69, label %71, label %76

70:                                               ; preds = %76, %129
  br label %52

71:                                               ; preds = %68
  %72 = call i32 @llvm.ctlz.i32(i32 %14, i1 false)
  %73 = trunc i32 %72 to i6
  %74 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %73, i6 8)
  %75 = extractvalue { i6, i1 } %74, 1
  br i1 %75, label %79, label %80

76:                                               ; preds = %68
  %77 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 0, ptr %77, align 2
  %78 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 0, ptr %78, align 8
  br label %70

79:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %71
  %81 = extractvalue { i6, i1 } %74, 0
  %82 = zext i6 %81 to i16
  %83 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %84 = zext i32 %14 to i64
  %85 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 40, i16 %82)
  %86 = extractvalue { i16, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %80
  %89 = extractvalue { i16, i1 } %85, 0
  %90 = sub i16 63, %89
  %91 = icmp ule i16 %90, 63
  br i1 %91, label %102, label %103

92:                                               ; preds = %102
  %93 = trunc i16 %89 to i6
  %94 = zext i6 %93 to i64
  %95 = shl i64 %84, %94
  store i64 %95, ptr %83, align 8
  %96 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %97 = load i64, ptr %96, align 8
  %98 = or i64 %97, -9223372036854775808
  store i64 %98, ptr %96, align 8
  %99 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %100 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 23, i16 %82)
  %101 = extractvalue { i16, i1 } %100, 1
  br i1 %101, label %104, label %105

102:                                              ; preds = %88
  br label %92

103:                                              ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @38)
  unreachable

104:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %92
  %106 = extractvalue { i16, i1 } %100, 0
  %107 = sub i16 31, %106
  %108 = icmp ule i16 %107, 31
  br i1 %108, label %121, label %122

109:                                              ; preds = %121
  %110 = trunc i16 %106 to i5
  %111 = zext i5 %110 to i32
  %112 = lshr i32 %14, %111
  %113 = trunc i32 %112 to i16
  store i16 %113, ptr %99, align 2
  %114 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %115 = load i16, ptr %114, align 2
  %116 = xor i16 %115, 1
  store i16 %116, ptr %114, align 2
  %117 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %118 = load i16, ptr %117, align 2
  %119 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 16256, i16 %82)
  %120 = extractvalue { i16, i1 } %119, 1
  br i1 %120, label %123, label %124

121:                                              ; preds = %105
  br label %109

122:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @38)
  unreachable

123:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

124:                                              ; preds = %109
  %125 = extractvalue { i16, i1 } %119, 0
  %126 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %125, i16 1)
  %127 = extractvalue { i16, i1 } %126, 1
  br i1 %127, label %128, label %129

128:                                              ; preds = %124
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

129:                                              ; preds = %124
  %130 = extractvalue { i16, i1 } %126, 0
  %131 = or i16 %118, %130
  store i16 %131, ptr %117, align 2
  br label %70
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__extenddftf2(double %0) #0 {
  %2 = alloca i128, align 16
  %3 = alloca [6 x i64], align 8
  %4 = alloca i128, align 8
  %5 = bitcast double %0 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = and i64 %5, -9223372036854775808
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i64 %6, 4503599627370496
  %18 = icmp ult i64 %17, 9214364837600034816
  br i1 %18, label %26, label %32

19:                                               ; preds = %37, %35
  %20 = load i128, ptr %4, align 8
  %21 = zext i64 %7 to i128
  %22 = shl i128 %21, 64
  %23 = or i128 %20, %22
  store i128 %23, ptr %2, align 16
  %24 = load i128, ptr %2, align 16
  %25 = bitcast i128 %24 to fp128
  ret fp128 %25

26:                                               ; preds = %1
  %27 = zext i64 %6 to i128
  %28 = shl i128 %27, 60
  store i128 %28, ptr %4, align 8
  %29 = load i128, ptr %4, align 8
  %30 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %29, i128 79753679747094952374228423616820674560)
  %31 = extractvalue { i128, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %1
  %33 = icmp uge i64 %6, 9218868437227405312
  br i1 %33, label %38, label %49

34:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %26
  %36 = extractvalue { i128, i1 } %30, 0
  store i128 %36, ptr %4, align 8
  br label %19

37:                                               ; preds = %51, %38
  br label %19

38:                                               ; preds = %32
  store i128 170135991163610696904058773219554885632, ptr %4, align 8
  %39 = load i128, ptr %4, align 8
  %40 = and i64 %6, 2251799813685248
  %41 = zext i64 %40 to i128
  %42 = shl i128 %41, 60
  %43 = or i128 %39, %42
  store i128 %43, ptr %4, align 8
  %44 = load i128, ptr %4, align 8
  %45 = and i64 %6, 2251799813685247
  %46 = zext i64 %45 to i128
  %47 = shl i128 %46, 60
  %48 = or i128 %44, %47
  store i128 %48, ptr %4, align 8
  br label %37

49:                                               ; preds = %32
  %50 = icmp ne i64 %6, 0
  br i1 %50, label %52, label %57

51:                                               ; preds = %57, %86
  br label %37

52:                                               ; preds = %49
  %53 = call i64 @llvm.ctlz.i64(i64 %6, i1 false)
  %54 = trunc i64 %53 to i7
  %55 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %54, i7 11)
  %56 = extractvalue { i7, i1 } %55, 1
  br i1 %56, label %58, label %59

57:                                               ; preds = %49
  store i128 0, ptr %4, align 8
  br label %51

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i7, i1 } %55, 0
  %61 = zext i7 %60 to i32
  %62 = zext i64 %6 to i128
  %63 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 60, i32 %61)
  %64 = extractvalue { i32, i1 } %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i32, i1 } %63, 0
  %68 = sub i32 127, %67
  %69 = icmp ule i32 %68, 127
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i32 %67 to i7
  %72 = zext i7 %71 to i128
  %73 = shl i128 %62, %72
  store i128 %73, ptr %4, align 8
  %74 = load i128, ptr %4, align 8
  %75 = xor i128 %74, 5192296858534827628530496329220096
  store i128 %75, ptr %4, align 8
  %76 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 15360, i32 %61)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @39)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %81
  %87 = extractvalue { i32, i1 } %83, 0
  %88 = load i128, ptr %4, align 8
  %89 = zext i32 %87 to i128
  %90 = shl i128 %89, 112
  %91 = or i128 %88, %90
  store i128 %91, ptr %4, align 8
  br label %51
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i7, i1 } @llvm.usub.with.overflow.i7(i7, i7) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__extenddfxf2(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca %math.F80, align 8
  %4 = bitcast double %0 to i64
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %5 = ptrtoint ptr %3 to i64
  %6 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %6, align 8
  %7 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %5, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %11, align 8
  %12 = ptrtoint ptr %2 to i64
  %13 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %12, i64 0)
  %14 = and i64 %4, 9223372036854775807
  %15 = and i64 %4, -9223372036854775808
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %21, label %22

17:                                               ; preds = %22, %21
  %18 = phi i16 [ -32768, %21 ], [ 0, %22 ]
  %19 = sub i64 %14, 4503599627370496
  %20 = icmp ult i64 %19, 9214364837600034816
  br i1 %20, label %28, label %33

21:                                               ; preds = %1
  br label %17

22:                                               ; preds = %1
  br label %17

23:                                               ; preds = %51, %44
  %24 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %25 = load i16, ptr %24, align 2
  %26 = or i16 %25, %18
  store i16 %26, ptr %24, align 2
  %27 = call fastcc x86_fp80 @math.make_f80(ptr nonnull readonly align 8 %3)
  ret x86_fp80 %27

28:                                               ; preds = %17
  %29 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %30 = lshr i64 %14, 52
  %31 = sub i64 65535, %30
  %32 = icmp ule i64 %31, 65535
  br i1 %32, label %41, label %42

33:                                               ; preds = %17
  %34 = icmp uge i64 %14, 9218868437227405312
  br i1 %34, label %52, label %65

35:                                               ; preds = %41
  %36 = trunc i64 %30 to i16
  store i16 %36, ptr %29, align 2
  %37 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %38 = load i16, ptr %37, align 2
  %39 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %38, i16 15360)
  %40 = extractvalue { i16, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %28
  br label %35

42:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @40)
  unreachable

43:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %35
  %45 = extractvalue { i16, i1 } %39, 0
  store i16 %45, ptr %37, align 2
  %46 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %47 = shl i64 %14, 11
  store i64 %47, ptr %46, align 8
  %48 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %49 = load i64, ptr %48, align 8
  %50 = or i64 %49, -9223372036854775808
  store i64 %50, ptr %48, align 8
  br label %23

51:                                               ; preds = %67, %52
  br label %23

52:                                               ; preds = %33
  %53 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 32767, ptr %53, align 2
  %54 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 -9223372036854775808, ptr %54, align 8
  %55 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %56 = load i64, ptr %55, align 8
  %57 = and i64 %14, 2251799813685248
  %58 = shl i64 %57, 11
  %59 = or i64 %56, %58
  store i64 %59, ptr %55, align 8
  %60 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %61 = load i64, ptr %60, align 8
  %62 = and i64 %14, 2251799813685247
  %63 = shl i64 %62, 11
  %64 = or i64 %61, %63
  store i64 %64, ptr %60, align 8
  br label %51

65:                                               ; preds = %33
  %66 = icmp ne i64 %14, 0
  br i1 %66, label %68, label %73

67:                                               ; preds = %73, %125
  br label %51

68:                                               ; preds = %65
  %69 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %70 = trunc i64 %69 to i7
  %71 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %70, i7 11)
  %72 = extractvalue { i7, i1 } %71, 1
  br i1 %72, label %76, label %77

73:                                               ; preds = %65
  %74 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 0, ptr %74, align 2
  %75 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 0, ptr %75, align 8
  br label %67

76:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %68
  %78 = extractvalue { i7, i1 } %71, 0
  %79 = zext i7 %78 to i16
  %80 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %81 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 11, i16 %79)
  %82 = extractvalue { i16, i1 } %81, 1
  br i1 %82, label %83, label %84

83:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %77
  %85 = extractvalue { i16, i1 } %81, 0
  %86 = sub i16 63, %85
  %87 = icmp ule i16 %86, 63
  br i1 %87, label %98, label %99

88:                                               ; preds = %98
  %89 = trunc i16 %85 to i6
  %90 = zext i6 %89 to i64
  %91 = shl i64 %14, %90
  store i64 %91, ptr %80, align 8
  %92 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %93 = load i64, ptr %92, align 8
  %94 = or i64 %93, -9223372036854775808
  store i64 %94, ptr %92, align 8
  %95 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %96 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 52, i16 %79)
  %97 = extractvalue { i16, i1 } %96, 1
  br i1 %97, label %100, label %101

98:                                               ; preds = %84
  br label %88

99:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @40)
  unreachable

100:                                              ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %88
  %102 = extractvalue { i16, i1 } %96, 0
  %103 = sub i16 63, %102
  %104 = icmp ule i16 %103, 63
  br i1 %104, label %117, label %118

105:                                              ; preds = %117
  %106 = trunc i16 %102 to i6
  %107 = zext i6 %106 to i64
  %108 = lshr i64 %14, %107
  %109 = trunc i64 %108 to i16
  store i16 %109, ptr %95, align 2
  %110 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %111 = load i16, ptr %110, align 2
  %112 = xor i16 %111, 1
  store i16 %112, ptr %110, align 2
  %113 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %114 = load i16, ptr %113, align 2
  %115 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 15360, i16 %79)
  %116 = extractvalue { i16, i1 } %115, 1
  br i1 %116, label %119, label %120

117:                                              ; preds = %101
  br label %105

118:                                              ; preds = %101
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @40)
  unreachable

119:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

120:                                              ; preds = %105
  %121 = extractvalue { i16, i1 } %115, 0
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %121, i16 1)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %120
  %126 = extractvalue { i16, i1 } %122, 0
  %127 = or i16 %114, %126
  store i16 %127, ptr %113, align 2
  br label %67
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__extendxftf2(x86_fp80 %0) #0 {
  %2 = alloca i128, align 16
  %3 = alloca [6 x i64], align 8
  %4 = alloca i128, align 8
  %5 = alloca %math.F80, align 8
  %6 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, x86_fp80 %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %8 = load i16, ptr %7, align 2
  %9 = and i16 %8, -32768
  %10 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %11 = load i16, ptr %10, align 2
  %12 = and i16 %11, 32767
  store i16 %12, ptr %10, align 2
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %13 = ptrtoint ptr %4 to i64
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %13, ptr %15, align 8
  %16 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %19, align 8
  %20 = ptrtoint ptr %3 to i64
  %21 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %20, i64 0)
  %22 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %23 = load i16, ptr %22, align 2
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %34, label %38

25:                                               ; preds = %44, %39
  %26 = load i128, ptr %4, align 8
  %27 = zext i16 %9 to i128
  %28 = shl i128 %27, 112
  %29 = or i128 %26, %28
  store i128 %29, ptr %2, align 16
  %30 = load i128, ptr %2, align 16
  %31 = bitcast i128 %30 to fp128
  ret fp128 %31

32:                                               ; preds = %38, %34
  %33 = phi i1 [ %37, %34 ], [ false, %38 ]
  br i1 %33, label %39, label %40

34:                                               ; preds = %1
  %35 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %36 = load i64, ptr %35, align 8
  %37 = icmp eq i64 %36, 0
  br label %32

38:                                               ; preds = %1
  br label %32

39:                                               ; preds = %32
  store i128 0, ptr %4, align 8
  br label %25

40:                                               ; preds = %32
  %41 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %42 = load i16, ptr %41, align 2
  %43 = icmp eq i16 %42, 32767
  br i1 %43, label %45, label %56

44:                                               ; preds = %61, %45
  br label %25

45:                                               ; preds = %40
  %46 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %47 = load i64, ptr %46, align 8
  %48 = zext i64 %47 to i128
  %49 = shl i128 %48, 49
  store i128 %49, ptr %4, align 8
  %50 = load i128, ptr %4, align 8
  %51 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %52 = load i16, ptr %51, align 2
  %53 = zext i16 %52 to i128
  %54 = shl i128 %53, 112
  %55 = or i128 %50, %54
  store i128 %55, ptr %4, align 8
  br label %44

56:                                               ; preds = %40
  %57 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %58 = load i64, ptr %57, align 8
  %59 = and i64 %58, -9223372036854775808
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %62, label %74

61:                                               ; preds = %107, %62
  br label %44

62:                                               ; preds = %56
  %63 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %64 = load i64, ptr %63, align 8
  %65 = and i64 %64, 9223372036854775807
  %66 = zext i64 %65 to i128
  %67 = shl i128 %66, 49
  store i128 %67, ptr %4, align 8
  %68 = load i128, ptr %4, align 8
  %69 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %70 = load i16, ptr %69, align 2
  %71 = zext i16 %70 to i128
  %72 = shl i128 %71, 112
  %73 = or i128 %68, %72
  store i128 %73, ptr %4, align 8
  br label %61

74:                                               ; preds = %56
  %75 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %76 = load i64, ptr %75, align 8
  %77 = call i64 @llvm.ctlz.i64(i64 %76, i1 false)
  %78 = trunc i64 %77 to i7
  %79 = zext i7 %78 to i32
  %80 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %81 = load i64, ptr %80, align 8
  %82 = zext i64 %81 to i128
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 49, i32 %79)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %74
  %87 = extractvalue { i32, i1 } %83, 0
  %88 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %87, i32 1)
  %89 = extractvalue { i32, i1 } %88, 1
  br i1 %89, label %90, label %91

90:                                               ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

91:                                               ; preds = %86
  %92 = extractvalue { i32, i1 } %88, 0
  %93 = sub i32 127, %92
  %94 = icmp ule i32 %93, 127
  br i1 %94, label %104, label %105

95:                                               ; preds = %104
  %96 = trunc i32 %92 to i7
  %97 = zext i7 %96 to i128
  %98 = shl i128 %82, %97
  store i128 %98, ptr %4, align 8
  %99 = load i128, ptr %4, align 8
  %100 = xor i128 %99, 5192296858534827628530496329220096
  store i128 %100, ptr %4, align 8
  %101 = load i128, ptr %4, align 8
  %102 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %79, i32 1)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %106, label %107

104:                                              ; preds = %91
  br label %95

105:                                              ; preds = %91
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @41)
  unreachable

106:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %95
  %108 = extractvalue { i32, i1 } %102, 0
  %109 = zext i32 %108 to i128
  %110 = shl i128 %109, 112
  %111 = or i128 %101, %110
  store i128 %111, ptr %4, align 8
  br label %61
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.break_f80(ptr noalias nonnull sret(%math.F80) %0, x86_fp80 %1) unnamed_addr #0 {
  %3 = bitcast x86_fp80 %1 to i80
  %4 = getelementptr inbounds %math.F80, ptr %0, i32 0, i32 0
  %5 = trunc i80 %3 to i64
  store i64 %5, ptr %4, align 8
  %6 = getelementptr inbounds %math.F80, ptr %0, i32 0, i32 1
  %7 = lshr i80 %3, 64
  br i1 true, label %10, label %11

8:                                                ; preds = %10
  %9 = trunc i80 %7 to i16
  store i16 %9, ptr %6, align 2
  ret void

10:                                               ; preds = %2
  br label %8

11:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @124)
  unreachable
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__truncsfhf2(float %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca [6 x i64], align 8
  %4 = alloca i16, align 2
  %5 = bitcast float %0 to i32
  %6 = and i32 %5, 2147483647
  %7 = and i32 %5, -2147483648
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 -86, i64 2, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 2, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i32 %6, 947912704
  %18 = sub i32 %6, 1199570944
  %19 = icmp ult i32 %17, %18
  br i1 %19, label %27, label %34

20:                                               ; preds = %57, %36
  %21 = load i16, ptr %4, align 2
  %22 = lshr i32 %7, 16
  %23 = trunc i32 %22 to i16
  %24 = or i16 %21, %23
  store i16 %24, ptr %2, align 2
  %25 = load i16, ptr %2, align 2
  %26 = bitcast i16 %25 to half
  ret half %26

27:                                               ; preds = %1
  %28 = lshr i32 %6, 13
  %29 = trunc i32 %28 to i16
  store i16 %29, ptr %4, align 2
  %30 = load i16, ptr %4, align 2
  %31 = sub i16 %30, -16384
  store i16 %31, ptr %4, align 2
  %32 = and i32 %6, 8191
  %33 = icmp ugt i32 %32, 4096
  br i1 %33, label %37, label %41

34:                                               ; preds = %1
  %35 = icmp ugt i32 %6, 2139095040
  br i1 %35, label %58, label %67

36:                                               ; preds = %46, %44
  br label %20

37:                                               ; preds = %27
  %38 = load i16, ptr %4, align 2
  %39 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %38, i16 1)
  %40 = extractvalue { i16, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %27
  %42 = icmp eq i32 %32, 4096
  br i1 %42, label %47, label %53

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i16, i1 } %39, 0
  store i16 %45, ptr %4, align 2
  br label %36

46:                                               ; preds = %53, %55
  br label %36

47:                                               ; preds = %41
  %48 = load i16, ptr %4, align 2
  %49 = load i16, ptr %4, align 2
  %50 = and i16 %49, 1
  %51 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %48, i16 %50)
  %52 = extractvalue { i16, i1 } %51, 1
  br i1 %52, label %54, label %55

53:                                               ; preds = %41
  br label %46

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i16, i1 } %51, 0
  store i16 %56, ptr %4, align 2
  br label %46

57:                                               ; preds = %74, %69
  br label %20

58:                                               ; preds = %34
  store i16 31744, ptr %4, align 2
  %59 = load i16, ptr %4, align 2
  %60 = or i16 %59, 512
  store i16 %60, ptr %4, align 2
  %61 = load i16, ptr %4, align 2
  %62 = and i32 %6, 4194303
  %63 = lshr i32 %62, 13
  %64 = and i32 %63, 511
  %65 = sub i32 65535, %64
  %66 = icmp ule i32 %65, 65535
  br i1 %66, label %72, label %73

67:                                               ; preds = %34
  %68 = icmp uge i32 %6, 1199570944
  br i1 %68, label %75, label %76

69:                                               ; preds = %72
  %70 = trunc i32 %64 to i16
  %71 = or i16 %61, %70
  store i16 %71, ptr %4, align 2
  br label %57

72:                                               ; preds = %58
  br label %69

73:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @42)
  unreachable

74:                                               ; preds = %91, %75
  br label %57

75:                                               ; preds = %67
  store i16 31744, ptr %4, align 2
  br label %74

76:                                               ; preds = %67
  %77 = lshr i32 %6, 23
  %78 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 112, i32 %77)
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %80, label %81

80:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %76
  %82 = extractvalue { i32, i1 } %78, 0
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %81
  %87 = extractvalue { i32, i1 } %83, 0
  %88 = and i32 %5, 8388607
  %89 = or i32 %88, 8388608
  %90 = icmp ugt i32 %87, 23
  br i1 %90, label %92, label %93

91:                                               ; preds = %127, %92
  br label %74

92:                                               ; preds = %86
  store i16 0, ptr %4, align 2
  br label %91

93:                                               ; preds = %86
  %94 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 32, i32 %87)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %96, label %97

96:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %93
  %98 = extractvalue { i32, i1 } %94, 0
  %99 = sub i32 31, %98
  %100 = icmp ule i32 %99, 31
  br i1 %100, label %109, label %110

101:                                              ; preds = %109
  %102 = trunc i32 %98 to i5
  %103 = zext i5 %102 to i32
  %104 = shl i32 %89, %103
  %105 = icmp ne i32 %104, 0
  %106 = zext i1 %105 to i32
  %107 = sub i32 31, %87
  %108 = icmp ule i32 %107, 31
  br i1 %108, label %119, label %120

109:                                              ; preds = %97
  br label %101

110:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @42)
  unreachable

111:                                              ; preds = %119
  %112 = trunc i32 %87 to i5
  %113 = zext i5 %112 to i32
  %114 = lshr i32 %89, %113
  %115 = or i32 %114, %106
  %116 = lshr i32 %115, 13
  %117 = sub i32 65535, %116
  %118 = icmp ule i32 %117, 65535
  br i1 %118, label %125, label %126

119:                                              ; preds = %101
  br label %111

120:                                              ; preds = %101
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @42)
  unreachable

121:                                              ; preds = %125
  %122 = trunc i32 %116 to i16
  store i16 %122, ptr %4, align 2
  %123 = and i32 %115, 8191
  %124 = icmp ugt i32 %123, 4096
  br i1 %124, label %128, label %132

125:                                              ; preds = %111
  br label %121

126:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @42)
  unreachable

127:                                              ; preds = %137, %135
  br label %91

128:                                              ; preds = %121
  %129 = load i16, ptr %4, align 2
  %130 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %129, i16 1)
  %131 = extractvalue { i16, i1 } %130, 1
  br i1 %131, label %134, label %135

132:                                              ; preds = %121
  %133 = icmp eq i32 %123, 4096
  br i1 %133, label %138, label %144

134:                                              ; preds = %128
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

135:                                              ; preds = %128
  %136 = extractvalue { i16, i1 } %130, 0
  store i16 %136, ptr %4, align 2
  br label %127

137:                                              ; preds = %144, %146
  br label %127

138:                                              ; preds = %132
  %139 = load i16, ptr %4, align 2
  %140 = load i16, ptr %4, align 2
  %141 = and i16 %140, 1
  %142 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %139, i16 %141)
  %143 = extractvalue { i16, i1 } %142, 1
  br i1 %143, label %145, label %146

144:                                              ; preds = %132
  br label %137

145:                                              ; preds = %138
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

146:                                              ; preds = %138
  %147 = extractvalue { i16, i1 } %142, 0
  store i16 %147, ptr %4, align 2
  br label %137
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__truncdfhf2(double %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca [6 x i64], align 8
  %4 = alloca i16, align 2
  %5 = bitcast double %0 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = and i64 %5, -9223372036854775808
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 -86, i64 2, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 2, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i64 %6, 4544132024016830464
  %18 = sub i64 %6, 4679240012837945344
  %19 = icmp ult i64 %17, %18
  br i1 %19, label %27, label %34

20:                                               ; preds = %57, %36
  %21 = load i16, ptr %4, align 2
  %22 = lshr i64 %7, 48
  %23 = trunc i64 %22 to i16
  %24 = or i16 %21, %23
  store i16 %24, ptr %2, align 2
  %25 = load i16, ptr %2, align 2
  %26 = bitcast i16 %25 to half
  ret half %26

27:                                               ; preds = %1
  %28 = lshr i64 %6, 42
  %29 = trunc i64 %28 to i16
  store i16 %29, ptr %4, align 2
  %30 = load i16, ptr %4, align 2
  %31 = sub i16 %30, -16384
  store i16 %31, ptr %4, align 2
  %32 = and i64 %6, 4398046511103
  %33 = icmp ugt i64 %32, 2199023255552
  br i1 %33, label %37, label %41

34:                                               ; preds = %1
  %35 = icmp ugt i64 %6, 9218868437227405312
  br i1 %35, label %58, label %67

36:                                               ; preds = %46, %44
  br label %20

37:                                               ; preds = %27
  %38 = load i16, ptr %4, align 2
  %39 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %38, i16 1)
  %40 = extractvalue { i16, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %27
  %42 = icmp eq i64 %32, 2199023255552
  br i1 %42, label %47, label %53

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i16, i1 } %39, 0
  store i16 %45, ptr %4, align 2
  br label %36

46:                                               ; preds = %53, %55
  br label %36

47:                                               ; preds = %41
  %48 = load i16, ptr %4, align 2
  %49 = load i16, ptr %4, align 2
  %50 = and i16 %49, 1
  %51 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %48, i16 %50)
  %52 = extractvalue { i16, i1 } %51, 1
  br i1 %52, label %54, label %55

53:                                               ; preds = %41
  br label %46

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i16, i1 } %51, 0
  store i16 %56, ptr %4, align 2
  br label %46

57:                                               ; preds = %74, %69
  br label %20

58:                                               ; preds = %34
  store i16 31744, ptr %4, align 2
  %59 = load i16, ptr %4, align 2
  %60 = or i16 %59, 512
  store i16 %60, ptr %4, align 2
  %61 = load i16, ptr %4, align 2
  %62 = and i64 %6, 2251799813685247
  %63 = lshr i64 %62, 42
  %64 = and i64 %63, 511
  %65 = sub i64 65535, %64
  %66 = icmp ule i64 %65, 65535
  br i1 %66, label %72, label %73

67:                                               ; preds = %34
  %68 = icmp uge i64 %6, 4679240012837945344
  br i1 %68, label %75, label %76

69:                                               ; preds = %72
  %70 = trunc i64 %64 to i16
  %71 = or i16 %61, %70
  store i16 %71, ptr %4, align 2
  br label %57

72:                                               ; preds = %58
  br label %69

73:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

74:                                               ; preds = %97, %75
  br label %57

75:                                               ; preds = %67
  store i16 31744, ptr %4, align 2
  br label %74

76:                                               ; preds = %67
  %77 = lshr i64 %6, 52
  %78 = sub i64 4294967295, %77
  %79 = icmp ule i64 %78, 4294967295
  br i1 %79, label %84, label %85

80:                                               ; preds = %84
  %81 = trunc i64 %77 to i32
  %82 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 1008, i32 %81)
  %83 = extractvalue { i32, i1 } %82, 1
  br i1 %83, label %86, label %87

84:                                               ; preds = %76
  br label %80

85:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

86:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %80
  %88 = extractvalue { i32, i1 } %82, 0
  %89 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %88, i32 1)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %91, label %92

91:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

92:                                               ; preds = %87
  %93 = extractvalue { i32, i1 } %89, 0
  %94 = and i64 %5, 4503599627370495
  %95 = or i64 %94, 4503599627370496
  %96 = icmp ugt i32 %93, 52
  br i1 %96, label %98, label %99

97:                                               ; preds = %133, %98
  br label %74

98:                                               ; preds = %92
  store i16 0, ptr %4, align 2
  br label %97

99:                                               ; preds = %92
  %100 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 64, i32 %93)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %99
  %104 = extractvalue { i32, i1 } %100, 0
  %105 = sub i32 63, %104
  %106 = icmp ule i32 %105, 63
  br i1 %106, label %115, label %116

107:                                              ; preds = %115
  %108 = trunc i32 %104 to i6
  %109 = zext i6 %108 to i64
  %110 = shl i64 %95, %109
  %111 = icmp ne i64 %110, 0
  %112 = zext i1 %111 to i64
  %113 = sub i32 63, %93
  %114 = icmp ule i32 %113, 63
  br i1 %114, label %125, label %126

115:                                              ; preds = %103
  br label %107

116:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

117:                                              ; preds = %125
  %118 = trunc i32 %93 to i6
  %119 = zext i6 %118 to i64
  %120 = lshr i64 %95, %119
  %121 = or i64 %120, %112
  %122 = lshr i64 %121, 42
  %123 = sub i64 65535, %122
  %124 = icmp ule i64 %123, 65535
  br i1 %124, label %131, label %132

125:                                              ; preds = %107
  br label %117

126:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

127:                                              ; preds = %131
  %128 = trunc i64 %122 to i16
  store i16 %128, ptr %4, align 2
  %129 = and i64 %121, 4398046511103
  %130 = icmp ugt i64 %129, 2199023255552
  br i1 %130, label %134, label %138

131:                                              ; preds = %117
  br label %127

132:                                              ; preds = %117
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

133:                                              ; preds = %143, %141
  br label %97

134:                                              ; preds = %127
  %135 = load i16, ptr %4, align 2
  %136 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %135, i16 1)
  %137 = extractvalue { i16, i1 } %136, 1
  br i1 %137, label %140, label %141

138:                                              ; preds = %127
  %139 = icmp eq i64 %129, 2199023255552
  br i1 %139, label %144, label %150

140:                                              ; preds = %134
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

141:                                              ; preds = %134
  %142 = extractvalue { i16, i1 } %136, 0
  store i16 %142, ptr %4, align 2
  br label %133

143:                                              ; preds = %150, %152
  br label %133

144:                                              ; preds = %138
  %145 = load i16, ptr %4, align 2
  %146 = load i16, ptr %4, align 2
  %147 = and i16 %146, 1
  %148 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %145, i16 %147)
  %149 = extractvalue { i16, i1 } %148, 1
  br i1 %149, label %151, label %152

150:                                              ; preds = %138
  br label %143

151:                                              ; preds = %144
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

152:                                              ; preds = %144
  %153 = extractvalue { i16, i1 } %148, 0
  store i16 %153, ptr %4, align 2
  br label %143
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__truncdfsf2(double %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [6 x i64], align 8
  %4 = alloca i32, align 4
  %5 = bitcast double %0 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = and i64 %5, -9223372036854775808
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 4, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i64 %6, 4039728865751334912
  %18 = sub i64 %6, 5183643171103440896
  %19 = icmp ult i64 %17, %18
  br i1 %19, label %27, label %34

20:                                               ; preds = %57, %36
  %21 = load i32, ptr %4, align 4
  %22 = lshr i64 %7, 32
  %23 = trunc i64 %22 to i32
  %24 = or i32 %21, %23
  store i32 %24, ptr %2, align 4
  %25 = load i32, ptr %2, align 4
  %26 = bitcast i32 %25 to float
  ret float %26

27:                                               ; preds = %1
  %28 = lshr i64 %6, 29
  %29 = trunc i64 %28 to i32
  store i32 %29, ptr %4, align 4
  %30 = load i32, ptr %4, align 4
  %31 = sub i32 %30, -1073741824
  store i32 %31, ptr %4, align 4
  %32 = and i64 %6, 536870911
  %33 = icmp ugt i64 %32, 268435456
  br i1 %33, label %37, label %41

34:                                               ; preds = %1
  %35 = icmp ugt i64 %6, 9218868437227405312
  br i1 %35, label %58, label %67

36:                                               ; preds = %46, %44
  br label %20

37:                                               ; preds = %27
  %38 = load i32, ptr %4, align 4
  %39 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %38, i32 1)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %27
  %42 = icmp eq i64 %32, 268435456
  br i1 %42, label %47, label %53

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i32, i1 } %39, 0
  store i32 %45, ptr %4, align 4
  br label %36

46:                                               ; preds = %53, %55
  br label %36

47:                                               ; preds = %41
  %48 = load i32, ptr %4, align 4
  %49 = load i32, ptr %4, align 4
  %50 = and i32 %49, 1
  %51 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %48, i32 %50)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %54, label %55

53:                                               ; preds = %41
  br label %46

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i32, i1 } %51, 0
  store i32 %56, ptr %4, align 4
  br label %46

57:                                               ; preds = %74, %69
  br label %20

58:                                               ; preds = %34
  store i32 2139095040, ptr %4, align 4
  %59 = load i32, ptr %4, align 4
  %60 = or i32 %59, 4194304
  store i32 %60, ptr %4, align 4
  %61 = load i32, ptr %4, align 4
  %62 = and i64 %6, 2251799813685247
  %63 = lshr i64 %62, 29
  %64 = and i64 %63, 4194303
  %65 = sub i64 4294967295, %64
  %66 = icmp ule i64 %65, 4294967295
  br i1 %66, label %72, label %73

67:                                               ; preds = %34
  %68 = icmp uge i64 %6, 5183643171103440896
  br i1 %68, label %75, label %76

69:                                               ; preds = %72
  %70 = trunc i64 %64 to i32
  %71 = or i32 %61, %70
  store i32 %71, ptr %4, align 4
  br label %57

72:                                               ; preds = %58
  br label %69

73:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

74:                                               ; preds = %97, %75
  br label %57

75:                                               ; preds = %67
  store i32 2139095040, ptr %4, align 4
  br label %74

76:                                               ; preds = %67
  %77 = lshr i64 %6, 52
  %78 = sub i64 4294967295, %77
  %79 = icmp ule i64 %78, 4294967295
  br i1 %79, label %84, label %85

80:                                               ; preds = %84
  %81 = trunc i64 %77 to i32
  %82 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 896, i32 %81)
  %83 = extractvalue { i32, i1 } %82, 1
  br i1 %83, label %86, label %87

84:                                               ; preds = %76
  br label %80

85:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

86:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %80
  %88 = extractvalue { i32, i1 } %82, 0
  %89 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %88, i32 1)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %91, label %92

91:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

92:                                               ; preds = %87
  %93 = extractvalue { i32, i1 } %89, 0
  %94 = and i64 %5, 4503599627370495
  %95 = or i64 %94, 4503599627370496
  %96 = icmp ugt i32 %93, 52
  br i1 %96, label %98, label %99

97:                                               ; preds = %133, %98
  br label %74

98:                                               ; preds = %92
  store i32 0, ptr %4, align 4
  br label %97

99:                                               ; preds = %92
  %100 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 64, i32 %93)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %99
  %104 = extractvalue { i32, i1 } %100, 0
  %105 = sub i32 63, %104
  %106 = icmp ule i32 %105, 63
  br i1 %106, label %115, label %116

107:                                              ; preds = %115
  %108 = trunc i32 %104 to i6
  %109 = zext i6 %108 to i64
  %110 = shl i64 %95, %109
  %111 = icmp ne i64 %110, 0
  %112 = zext i1 %111 to i64
  %113 = sub i32 63, %93
  %114 = icmp ule i32 %113, 63
  br i1 %114, label %125, label %126

115:                                              ; preds = %103
  br label %107

116:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

117:                                              ; preds = %125
  %118 = trunc i32 %93 to i6
  %119 = zext i6 %118 to i64
  %120 = lshr i64 %95, %119
  %121 = or i64 %120, %112
  %122 = lshr i64 %121, 29
  %123 = sub i64 4294967295, %122
  %124 = icmp ule i64 %123, 4294967295
  br i1 %124, label %131, label %132

125:                                              ; preds = %107
  br label %117

126:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

127:                                              ; preds = %131
  %128 = trunc i64 %122 to i32
  store i32 %128, ptr %4, align 4
  %129 = and i64 %121, 536870911
  %130 = icmp ugt i64 %129, 268435456
  br i1 %130, label %134, label %138

131:                                              ; preds = %117
  br label %127

132:                                              ; preds = %117
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

133:                                              ; preds = %143, %141
  br label %97

134:                                              ; preds = %127
  %135 = load i32, ptr %4, align 4
  %136 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %135, i32 1)
  %137 = extractvalue { i32, i1 } %136, 1
  br i1 %137, label %140, label %141

138:                                              ; preds = %127
  %139 = icmp eq i64 %129, 268435456
  br i1 %139, label %144, label %150

140:                                              ; preds = %134
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

141:                                              ; preds = %134
  %142 = extractvalue { i32, i1 } %136, 0
  store i32 %142, ptr %4, align 4
  br label %133

143:                                              ; preds = %150, %152
  br label %133

144:                                              ; preds = %138
  %145 = load i32, ptr %4, align 4
  %146 = load i32, ptr %4, align 4
  %147 = and i32 %146, 1
  %148 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %145, i32 %147)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %151, label %152

150:                                              ; preds = %138
  br label %143

151:                                              ; preds = %144
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

152:                                              ; preds = %144
  %153 = extractvalue { i32, i1 } %148, 0
  store i32 %153, ptr %4, align 4
  br label %143
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__truncxfhf2(x86_fp80 %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca [6 x i64], align 8
  %4 = alloca i16, align 2
  %5 = alloca %math.F80, align 8
  %6 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, x86_fp80 %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %8 = load i16, ptr %7, align 2
  %9 = and i16 %8, -32768
  %10 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %11 = load i16, ptr %10, align 2
  %12 = and i16 %11, 32767
  store i16 %12, ptr %10, align 2
  %13 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = and i64 %14, 9223372036854775807
  store i64 %15, ptr %13, align 8
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 -86, i64 2, i1 false)
  %16 = ptrtoint ptr %4 to i64
  %17 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %16, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 2, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %22, align 8
  %23 = ptrtoint ptr %3 to i64
  %24 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %23, i64 0)
  %25 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %26 = load i16, ptr %25, align 2
  %27 = sub i16 %26, 16369
  %28 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %29 = load i16, ptr %28, align 2
  %30 = sub i16 %29, 16399
  %31 = icmp ult i16 %27, %30
  br i1 %31, label %37, label %53

32:                                               ; preds = %78, %57
  %33 = load i16, ptr %4, align 2
  %34 = or i16 %33, %9
  store i16 %34, ptr %2, align 2
  %35 = load i16, ptr %2, align 2
  %36 = bitcast i16 %35 to half
  ret half %36

37:                                               ; preds = %1
  %38 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %39 = load i16, ptr %38, align 2
  %40 = shl i16 %39, 10
  store i16 %40, ptr %4, align 2
  %41 = load i16, ptr %4, align 2
  %42 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %43 = load i64, ptr %42, align 8
  %44 = lshr i64 %43, 53
  %45 = trunc i64 %44 to i16
  %46 = or i16 %41, %45
  store i16 %46, ptr %4, align 2
  %47 = load i16, ptr %4, align 2
  %48 = sub i16 %47, -16384
  store i16 %48, ptr %4, align 2
  %49 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %50 = load i64, ptr %49, align 8
  %51 = and i64 %50, 9007199254740991
  %52 = icmp ugt i64 %51, 4503599627370496
  br i1 %52, label %58, label %62

53:                                               ; preds = %1
  %54 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %55 = load i16, ptr %54, align 2
  %56 = icmp eq i16 %55, 32767
  br i1 %56, label %81, label %85

57:                                               ; preds = %67, %65
  br label %32

58:                                               ; preds = %37
  %59 = load i16, ptr %4, align 2
  %60 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %59, i16 1)
  %61 = extractvalue { i16, i1 } %60, 1
  br i1 %61, label %64, label %65

62:                                               ; preds = %37
  %63 = icmp eq i64 %51, 4503599627370496
  br i1 %63, label %68, label %74

64:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %58
  %66 = extractvalue { i16, i1 } %60, 0
  store i16 %66, ptr %4, align 2
  br label %57

67:                                               ; preds = %74, %76
  br label %57

68:                                               ; preds = %62
  %69 = load i16, ptr %4, align 2
  %70 = load i16, ptr %4, align 2
  %71 = and i16 %70, 1
  %72 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %69, i16 %71)
  %73 = extractvalue { i16, i1 } %72, 1
  br i1 %73, label %75, label %76

74:                                               ; preds = %62
  br label %67

75:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %68
  %77 = extractvalue { i16, i1 } %72, 0
  store i16 %77, ptr %4, align 2
  br label %67

78:                                               ; preds = %105, %100
  br label %32

79:                                               ; preds = %85, %81
  %80 = phi i1 [ %84, %81 ], [ false, %85 ]
  br i1 %80, label %86, label %96

81:                                               ; preds = %53
  %82 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %83 = load i64, ptr %82, align 8
  %84 = icmp ne i64 %83, 0
  br label %79

85:                                               ; preds = %53
  br label %79

86:                                               ; preds = %79
  store i16 31744, ptr %4, align 2
  %87 = load i16, ptr %4, align 2
  %88 = or i16 %87, 512
  store i16 %88, ptr %4, align 2
  %89 = load i16, ptr %4, align 2
  %90 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %91 = load i64, ptr %90, align 8
  %92 = lshr i64 %91, 53
  %93 = and i64 %92, 511
  %94 = sub i64 65535, %93
  %95 = icmp ule i64 %94, 65535
  br i1 %95, label %103, label %104

96:                                               ; preds = %79
  %97 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %98 = load i16, ptr %97, align 2
  %99 = icmp uge i16 %98, 16399
  br i1 %99, label %106, label %107

100:                                              ; preds = %103
  %101 = trunc i64 %93 to i16
  %102 = or i16 %89, %101
  store i16 %102, ptr %4, align 2
  br label %78

103:                                              ; preds = %86
  br label %100

104:                                              ; preds = %86
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @45)
  unreachable

105:                                              ; preds = %116, %106
  br label %78

106:                                              ; preds = %96
  store i16 31744, ptr %4, align 2
  br label %105

107:                                              ; preds = %96
  %108 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %109 = load i16, ptr %108, align 2
  %110 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 16368, i16 %109)
  %111 = extractvalue { i16, i1 } %110, 1
  br i1 %111, label %112, label %113

112:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %107
  %114 = extractvalue { i16, i1 } %110, 0
  %115 = icmp ugt i16 %114, 63
  br i1 %115, label %117, label %118

116:                                              ; preds = %151, %117
  br label %105

117:                                              ; preds = %113
  store i16 0, ptr %4, align 2
  br label %116

118:                                              ; preds = %113
  %119 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %120 = load i64, ptr %119, align 8
  %121 = sub i16 63, %114
  %122 = icmp ule i16 %121, 63
  br i1 %122, label %132, label %133

123:                                              ; preds = %132
  %124 = trunc i16 %114 to i6
  %125 = zext i6 %124 to i64
  %126 = shl i64 %120, %125
  %127 = icmp ne i64 %126, 0
  %128 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %129 = load i64, ptr %128, align 8
  %130 = sub i16 63, %114
  %131 = icmp ule i16 %130, 63
  br i1 %131, label %143, label %144

132:                                              ; preds = %118
  br label %123

133:                                              ; preds = %118
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @45)
  unreachable

134:                                              ; preds = %143
  %135 = trunc i16 %114 to i6
  %136 = zext i6 %135 to i64
  %137 = lshr i64 %129, %136
  %138 = zext i1 %127 to i64
  %139 = or i64 %137, %138
  %140 = lshr i64 %139, 53
  %141 = sub i64 65535, %140
  %142 = icmp ule i64 %141, 65535
  br i1 %142, label %149, label %150

143:                                              ; preds = %123
  br label %134

144:                                              ; preds = %123
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @45)
  unreachable

145:                                              ; preds = %149
  %146 = trunc i64 %140 to i16
  store i16 %146, ptr %4, align 2
  %147 = and i64 %139, 9007199254740991
  %148 = icmp ugt i64 %147, 4503599627370496
  br i1 %148, label %152, label %156

149:                                              ; preds = %134
  br label %145

150:                                              ; preds = %134
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @45)
  unreachable

151:                                              ; preds = %161, %159
  br label %116

152:                                              ; preds = %145
  %153 = load i16, ptr %4, align 2
  %154 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %153, i16 1)
  %155 = extractvalue { i16, i1 } %154, 1
  br i1 %155, label %158, label %159

156:                                              ; preds = %145
  %157 = icmp eq i64 %147, 4503599627370496
  br i1 %157, label %162, label %168

158:                                              ; preds = %152
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

159:                                              ; preds = %152
  %160 = extractvalue { i16, i1 } %154, 0
  store i16 %160, ptr %4, align 2
  br label %151

161:                                              ; preds = %168, %170
  br label %151

162:                                              ; preds = %156
  %163 = load i16, ptr %4, align 2
  %164 = load i16, ptr %4, align 2
  %165 = and i16 %164, 1
  %166 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %163, i16 %165)
  %167 = extractvalue { i16, i1 } %166, 1
  br i1 %167, label %169, label %170

168:                                              ; preds = %156
  br label %161

169:                                              ; preds = %162
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

170:                                              ; preds = %162
  %171 = extractvalue { i16, i1 } %166, 0
  store i16 %171, ptr %4, align 2
  br label %161
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__truncxfsf2(x86_fp80 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [6 x i64], align 8
  %4 = alloca i32, align 4
  %5 = alloca %math.F80, align 8
  %6 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, x86_fp80 %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %8 = load i16, ptr %7, align 2
  %9 = and i16 %8, -32768
  %10 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %11 = load i16, ptr %10, align 2
  %12 = and i16 %11, 32767
  store i16 %12, ptr %10, align 2
  %13 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = and i64 %14, 9223372036854775807
  store i64 %15, ptr %13, align 8
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %16 = ptrtoint ptr %4 to i64
  %17 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %16, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 4, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %22, align 8
  %23 = ptrtoint ptr %3 to i64
  %24 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %23, i64 0)
  %25 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %26 = load i16, ptr %25, align 2
  %27 = sub i16 %26, 16257
  %28 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %29 = load i16, ptr %28, align 2
  %30 = sub i16 %29, 16511
  %31 = icmp ult i16 %27, %30
  br i1 %31, label %39, label %56

32:                                               ; preds = %81, %60
  %33 = load i32, ptr %4, align 4
  %34 = zext i16 %9 to i32
  %35 = shl i32 %34, 16
  %36 = or i32 %33, %35
  store i32 %36, ptr %2, align 4
  %37 = load i32, ptr %2, align 4
  %38 = bitcast i32 %37 to float
  ret float %38

39:                                               ; preds = %1
  %40 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %41 = load i16, ptr %40, align 2
  %42 = zext i16 %41 to i32
  %43 = shl i32 %42, 23
  store i32 %43, ptr %4, align 4
  %44 = load i32, ptr %4, align 4
  %45 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %46 = load i64, ptr %45, align 8
  %47 = lshr i64 %46, 40
  %48 = trunc i64 %47 to i32
  %49 = or i32 %44, %48
  store i32 %49, ptr %4, align 4
  %50 = load i32, ptr %4, align 4
  %51 = sub i32 %50, -1073741824
  store i32 %51, ptr %4, align 4
  %52 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %53 = load i64, ptr %52, align 8
  %54 = and i64 %53, 1099511627775
  %55 = icmp ugt i64 %54, 549755813888
  br i1 %55, label %61, label %65

56:                                               ; preds = %1
  %57 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %58 = load i16, ptr %57, align 2
  %59 = icmp eq i16 %58, 32767
  br i1 %59, label %84, label %88

60:                                               ; preds = %70, %68
  br label %32

61:                                               ; preds = %39
  %62 = load i32, ptr %4, align 4
  %63 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %62, i32 1)
  %64 = extractvalue { i32, i1 } %63, 1
  br i1 %64, label %67, label %68

65:                                               ; preds = %39
  %66 = icmp eq i64 %54, 549755813888
  br i1 %66, label %71, label %77

67:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %61
  %69 = extractvalue { i32, i1 } %63, 0
  store i32 %69, ptr %4, align 4
  br label %60

70:                                               ; preds = %77, %79
  br label %60

71:                                               ; preds = %65
  %72 = load i32, ptr %4, align 4
  %73 = load i32, ptr %4, align 4
  %74 = and i32 %73, 1
  %75 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %72, i32 %74)
  %76 = extractvalue { i32, i1 } %75, 1
  br i1 %76, label %78, label %79

77:                                               ; preds = %65
  br label %70

78:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %71
  %80 = extractvalue { i32, i1 } %75, 0
  store i32 %80, ptr %4, align 4
  br label %70

81:                                               ; preds = %108, %103
  br label %32

82:                                               ; preds = %88, %84
  %83 = phi i1 [ %87, %84 ], [ false, %88 ]
  br i1 %83, label %89, label %99

84:                                               ; preds = %56
  %85 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %86 = load i64, ptr %85, align 8
  %87 = icmp ne i64 %86, 0
  br label %82

88:                                               ; preds = %56
  br label %82

89:                                               ; preds = %82
  store i32 2139095040, ptr %4, align 4
  %90 = load i32, ptr %4, align 4
  %91 = or i32 %90, 4194304
  store i32 %91, ptr %4, align 4
  %92 = load i32, ptr %4, align 4
  %93 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %94 = load i64, ptr %93, align 8
  %95 = lshr i64 %94, 40
  %96 = and i64 %95, 4194303
  %97 = sub i64 4294967295, %96
  %98 = icmp ule i64 %97, 4294967295
  br i1 %98, label %106, label %107

99:                                               ; preds = %82
  %100 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %101 = load i16, ptr %100, align 2
  %102 = icmp uge i16 %101, 16511
  br i1 %102, label %109, label %110

103:                                              ; preds = %106
  %104 = trunc i64 %96 to i32
  %105 = or i32 %92, %104
  store i32 %105, ptr %4, align 4
  br label %81

106:                                              ; preds = %89
  br label %103

107:                                              ; preds = %89
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @46)
  unreachable

108:                                              ; preds = %119, %109
  br label %81

109:                                              ; preds = %99
  store i32 2139095040, ptr %4, align 4
  br label %108

110:                                              ; preds = %99
  %111 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %112 = load i16, ptr %111, align 2
  %113 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 16256, i16 %112)
  %114 = extractvalue { i16, i1 } %113, 1
  br i1 %114, label %115, label %116

115:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %110
  %117 = extractvalue { i16, i1 } %113, 0
  %118 = icmp ugt i16 %117, 63
  br i1 %118, label %120, label %121

119:                                              ; preds = %154, %120
  br label %108

120:                                              ; preds = %116
  store i32 0, ptr %4, align 4
  br label %119

121:                                              ; preds = %116
  %122 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %123 = load i64, ptr %122, align 8
  %124 = sub i16 63, %117
  %125 = icmp ule i16 %124, 63
  br i1 %125, label %135, label %136

126:                                              ; preds = %135
  %127 = trunc i16 %117 to i6
  %128 = zext i6 %127 to i64
  %129 = shl i64 %123, %128
  %130 = icmp ne i64 %129, 0
  %131 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %132 = load i64, ptr %131, align 8
  %133 = sub i16 63, %117
  %134 = icmp ule i16 %133, 63
  br i1 %134, label %146, label %147

135:                                              ; preds = %121
  br label %126

136:                                              ; preds = %121
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @46)
  unreachable

137:                                              ; preds = %146
  %138 = trunc i16 %117 to i6
  %139 = zext i6 %138 to i64
  %140 = lshr i64 %132, %139
  %141 = zext i1 %130 to i64
  %142 = or i64 %140, %141
  %143 = lshr i64 %142, 40
  %144 = sub i64 4294967295, %143
  %145 = icmp ule i64 %144, 4294967295
  br i1 %145, label %152, label %153

146:                                              ; preds = %126
  br label %137

147:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @46)
  unreachable

148:                                              ; preds = %152
  %149 = trunc i64 %143 to i32
  store i32 %149, ptr %4, align 4
  %150 = and i64 %142, 1099511627775
  %151 = icmp ugt i64 %150, 549755813888
  br i1 %151, label %155, label %159

152:                                              ; preds = %137
  br label %148

153:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @46)
  unreachable

154:                                              ; preds = %164, %162
  br label %119

155:                                              ; preds = %148
  %156 = load i32, ptr %4, align 4
  %157 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %156, i32 1)
  %158 = extractvalue { i32, i1 } %157, 1
  br i1 %158, label %161, label %162

159:                                              ; preds = %148
  %160 = icmp eq i64 %150, 549755813888
  br i1 %160, label %165, label %171

161:                                              ; preds = %155
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

162:                                              ; preds = %155
  %163 = extractvalue { i32, i1 } %157, 0
  store i32 %163, ptr %4, align 4
  br label %154

164:                                              ; preds = %171, %173
  br label %154

165:                                              ; preds = %159
  %166 = load i32, ptr %4, align 4
  %167 = load i32, ptr %4, align 4
  %168 = and i32 %167, 1
  %169 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %166, i32 %168)
  %170 = extractvalue { i32, i1 } %169, 1
  br i1 %170, label %172, label %173

171:                                              ; preds = %159
  br label %164

172:                                              ; preds = %165
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

173:                                              ; preds = %165
  %174 = extractvalue { i32, i1 } %169, 0
  store i32 %174, ptr %4, align 4
  br label %164
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__truncxfdf2(x86_fp80 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca [6 x i64], align 8
  %4 = alloca i64, align 8
  %5 = alloca %math.F80, align 8
  %6 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, x86_fp80 %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %8 = load i16, ptr %7, align 2
  %9 = and i16 %8, -32768
  %10 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %11 = load i16, ptr %10, align 2
  %12 = and i16 %11, 32767
  store i16 %12, ptr %10, align 2
  %13 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = and i64 %14, 9223372036854775807
  store i64 %15, ptr %13, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %16 = ptrtoint ptr %4 to i64
  %17 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %16, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %22, align 8
  %23 = ptrtoint ptr %3 to i64
  %24 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %23, i64 0)
  %25 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %26 = load i16, ptr %25, align 2
  %27 = sub i16 %26, 15361
  %28 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %29 = load i16, ptr %28, align 2
  %30 = sub i16 %29, 17407
  %31 = icmp ult i16 %27, %30
  br i1 %31, label %39, label %55

32:                                               ; preds = %80, %59
  %33 = load i64, ptr %4, align 8
  %34 = zext i16 %9 to i64
  %35 = shl i64 %34, 48
  %36 = or i64 %33, %35
  store i64 %36, ptr %2, align 8
  %37 = load i64, ptr %2, align 8
  %38 = bitcast i64 %37 to double
  ret double %38

39:                                               ; preds = %1
  %40 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %41 = load i16, ptr %40, align 2
  %42 = zext i16 %41 to i64
  %43 = shl i64 %42, 52
  store i64 %43, ptr %4, align 8
  %44 = load i64, ptr %4, align 8
  %45 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %46 = load i64, ptr %45, align 8
  %47 = lshr i64 %46, 11
  %48 = or i64 %44, %47
  store i64 %48, ptr %4, align 8
  %49 = load i64, ptr %4, align 8
  %50 = sub i64 %49, -4611686018427387904
  store i64 %50, ptr %4, align 8
  %51 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %52 = load i64, ptr %51, align 8
  %53 = and i64 %52, 2047
  %54 = icmp ugt i64 %53, 1024
  br i1 %54, label %60, label %64

55:                                               ; preds = %1
  %56 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %57 = load i16, ptr %56, align 2
  %58 = icmp eq i16 %57, 32767
  br i1 %58, label %83, label %87

59:                                               ; preds = %69, %67
  br label %32

60:                                               ; preds = %39
  %61 = load i64, ptr %4, align 8
  %62 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %61, i64 1)
  %63 = extractvalue { i64, i1 } %62, 1
  br i1 %63, label %66, label %67

64:                                               ; preds = %39
  %65 = icmp eq i64 %53, 1024
  br i1 %65, label %70, label %76

66:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %60
  %68 = extractvalue { i64, i1 } %62, 0
  store i64 %68, ptr %4, align 8
  br label %59

69:                                               ; preds = %76, %78
  br label %59

70:                                               ; preds = %64
  %71 = load i64, ptr %4, align 8
  %72 = load i64, ptr %4, align 8
  %73 = and i64 %72, 1
  %74 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %71, i64 %73)
  %75 = extractvalue { i64, i1 } %74, 1
  br i1 %75, label %77, label %78

76:                                               ; preds = %64
  br label %69

77:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %70
  %79 = extractvalue { i64, i1 } %74, 0
  store i64 %79, ptr %4, align 8
  br label %69

80:                                               ; preds = %101, %88
  br label %32

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %97

83:                                               ; preds = %55
  %84 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %85 = load i64, ptr %84, align 8
  %86 = icmp ne i64 %85, 0
  br label %81

87:                                               ; preds = %55
  br label %81

88:                                               ; preds = %81
  store i64 9218868437227405312, ptr %4, align 8
  %89 = load i64, ptr %4, align 8
  %90 = or i64 %89, 2251799813685248
  store i64 %90, ptr %4, align 8
  %91 = load i64, ptr %4, align 8
  %92 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %93 = load i64, ptr %92, align 8
  %94 = lshr i64 %93, 11
  %95 = and i64 %94, 2251799813685247
  %96 = or i64 %91, %95
  store i64 %96, ptr %4, align 8
  br label %80

97:                                               ; preds = %81
  %98 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %99 = load i16, ptr %98, align 2
  %100 = icmp uge i16 %99, 17407
  br i1 %100, label %102, label %103

101:                                              ; preds = %112, %102
  br label %80

102:                                              ; preds = %97
  store i64 9218868437227405312, ptr %4, align 8
  br label %101

103:                                              ; preds = %97
  %104 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %105 = load i16, ptr %104, align 2
  %106 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 15360, i16 %105)
  %107 = extractvalue { i16, i1 } %106, 1
  br i1 %107, label %108, label %109

108:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

109:                                              ; preds = %103
  %110 = extractvalue { i16, i1 } %106, 0
  %111 = icmp ugt i16 %110, 63
  br i1 %111, label %113, label %114

112:                                              ; preds = %141, %113
  br label %101

113:                                              ; preds = %109
  store i64 0, ptr %4, align 8
  br label %112

114:                                              ; preds = %109
  %115 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %116 = load i64, ptr %115, align 8
  %117 = sub i16 63, %110
  %118 = icmp ule i16 %117, 63
  br i1 %118, label %128, label %129

119:                                              ; preds = %128
  %120 = trunc i16 %110 to i6
  %121 = zext i6 %120 to i64
  %122 = shl i64 %116, %121
  %123 = icmp ne i64 %122, 0
  %124 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %125 = load i64, ptr %124, align 8
  %126 = sub i16 63, %110
  %127 = icmp ule i16 %126, 63
  br i1 %127, label %139, label %140

128:                                              ; preds = %114
  br label %119

129:                                              ; preds = %114
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @47)
  unreachable

130:                                              ; preds = %139
  %131 = trunc i16 %110 to i6
  %132 = zext i6 %131 to i64
  %133 = lshr i64 %125, %132
  %134 = zext i1 %123 to i64
  %135 = or i64 %133, %134
  %136 = lshr i64 %135, 11
  store i64 %136, ptr %4, align 8
  %137 = and i64 %135, 2047
  %138 = icmp ugt i64 %137, 1024
  br i1 %138, label %142, label %146

139:                                              ; preds = %119
  br label %130

140:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @47)
  unreachable

141:                                              ; preds = %151, %149
  br label %112

142:                                              ; preds = %130
  %143 = load i64, ptr %4, align 8
  %144 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %143, i64 1)
  %145 = extractvalue { i64, i1 } %144, 1
  br i1 %145, label %148, label %149

146:                                              ; preds = %130
  %147 = icmp eq i64 %137, 1024
  br i1 %147, label %152, label %158

148:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

149:                                              ; preds = %142
  %150 = extractvalue { i64, i1 } %144, 0
  store i64 %150, ptr %4, align 8
  br label %141

151:                                              ; preds = %158, %160
  br label %141

152:                                              ; preds = %146
  %153 = load i64, ptr %4, align 8
  %154 = load i64, ptr %4, align 8
  %155 = and i64 %154, 1
  %156 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %153, i64 %155)
  %157 = extractvalue { i64, i1 } %156, 1
  br i1 %157, label %159, label %160

158:                                              ; preds = %146
  br label %151

159:                                              ; preds = %152
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

160:                                              ; preds = %152
  %161 = extractvalue { i64, i1 } %156, 0
  store i64 %161, ptr %4, align 8
  br label %151
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__trunctfhf2(fp128 %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca [6 x i64], align 8
  %4 = alloca i16, align 2
  %5 = bitcast fp128 %0 to i128
  %6 = and i128 %5, 170141183460469231731687303715884105727
  %7 = and i128 %5, -170141183460469231731687303715884105728
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 -86, i64 2, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 2, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i128 %6, 84992707277356593451415694413003751424
  %18 = sub i128 %6, 85148476183112638280271609302880354304
  %19 = icmp ult i128 %17, %18
  br i1 %19, label %27, label %34

20:                                               ; preds = %57, %36
  %21 = load i16, ptr %4, align 2
  %22 = lshr i128 %7, 112
  %23 = trunc i128 %22 to i16
  %24 = or i16 %21, %23
  store i16 %24, ptr %2, align 2
  %25 = load i16, ptr %2, align 2
  %26 = bitcast i16 %25 to half
  ret half %26

27:                                               ; preds = %1
  %28 = lshr i128 %6, 102
  %29 = trunc i128 %28 to i16
  store i16 %29, ptr %4, align 2
  %30 = load i16, ptr %4, align 2
  %31 = sub i16 %30, -16384
  store i16 %31, ptr %4, align 2
  %32 = and i128 %6, 5070602400912917605986812821503
  %33 = icmp ugt i128 %32, 2535301200456458802993406410752
  br i1 %33, label %37, label %41

34:                                               ; preds = %1
  %35 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br i1 %35, label %58, label %67

36:                                               ; preds = %46, %44
  br label %20

37:                                               ; preds = %27
  %38 = load i16, ptr %4, align 2
  %39 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %38, i16 1)
  %40 = extractvalue { i16, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %27
  %42 = icmp eq i128 %32, 2535301200456458802993406410752
  br i1 %42, label %47, label %53

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i16, i1 } %39, 0
  store i16 %45, ptr %4, align 2
  br label %36

46:                                               ; preds = %53, %55
  br label %36

47:                                               ; preds = %41
  %48 = load i16, ptr %4, align 2
  %49 = load i16, ptr %4, align 2
  %50 = and i16 %49, 1
  %51 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %48, i16 %50)
  %52 = extractvalue { i16, i1 } %51, 1
  br i1 %52, label %54, label %55

53:                                               ; preds = %41
  br label %46

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i16, i1 } %51, 0
  store i16 %56, ptr %4, align 2
  br label %46

57:                                               ; preds = %74, %69
  br label %20

58:                                               ; preds = %34
  store i16 31744, ptr %4, align 2
  %59 = load i16, ptr %4, align 2
  %60 = or i16 %59, 512
  store i16 %60, ptr %4, align 2
  %61 = load i16, ptr %4, align 2
  %62 = and i128 %6, 2596148429267413814265248164610047
  %63 = lshr i128 %62, 102
  %64 = and i128 %63, 511
  %65 = sub i128 65535, %64
  %66 = icmp ule i128 %65, 65535
  br i1 %66, label %72, label %73

67:                                               ; preds = %34
  %68 = icmp uge i128 %6, 85148476183112638280271609302880354304
  br i1 %68, label %75, label %76

69:                                               ; preds = %72
  %70 = trunc i128 %64 to i16
  %71 = or i16 %61, %70
  store i16 %71, ptr %4, align 2
  br label %57

72:                                               ; preds = %58
  br label %69

73:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

74:                                               ; preds = %97, %75
  br label %57

75:                                               ; preds = %67
  store i16 31744, ptr %4, align 2
  br label %74

76:                                               ; preds = %67
  %77 = lshr i128 %6, 112
  %78 = sub i128 4294967295, %77
  %79 = icmp ule i128 %78, 4294967295
  br i1 %79, label %84, label %85

80:                                               ; preds = %84
  %81 = trunc i128 %77 to i32
  %82 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16368, i32 %81)
  %83 = extractvalue { i32, i1 } %82, 1
  br i1 %83, label %86, label %87

84:                                               ; preds = %76
  br label %80

85:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

86:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %80
  %88 = extractvalue { i32, i1 } %82, 0
  %89 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %88, i32 1)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %91, label %92

91:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

92:                                               ; preds = %87
  %93 = extractvalue { i32, i1 } %89, 0
  %94 = and i128 %5, 5192296858534827628530496329220095
  %95 = or i128 %94, 5192296858534827628530496329220096
  %96 = icmp ugt i32 %93, 112
  br i1 %96, label %98, label %99

97:                                               ; preds = %133, %98
  br label %74

98:                                               ; preds = %92
  store i16 0, ptr %4, align 2
  br label %97

99:                                               ; preds = %92
  %100 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 128, i32 %93)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %99
  %104 = extractvalue { i32, i1 } %100, 0
  %105 = sub i32 127, %104
  %106 = icmp ule i32 %105, 127
  br i1 %106, label %115, label %116

107:                                              ; preds = %115
  %108 = trunc i32 %104 to i7
  %109 = zext i7 %108 to i128
  %110 = shl i128 %95, %109
  %111 = icmp ne i128 %110, 0
  %112 = zext i1 %111 to i128
  %113 = sub i32 127, %93
  %114 = icmp ule i32 %113, 127
  br i1 %114, label %125, label %126

115:                                              ; preds = %103
  br label %107

116:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

117:                                              ; preds = %125
  %118 = trunc i32 %93 to i7
  %119 = zext i7 %118 to i128
  %120 = lshr i128 %95, %119
  %121 = or i128 %120, %112
  %122 = lshr i128 %121, 102
  %123 = sub i128 65535, %122
  %124 = icmp ule i128 %123, 65535
  br i1 %124, label %131, label %132

125:                                              ; preds = %107
  br label %117

126:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

127:                                              ; preds = %131
  %128 = trunc i128 %122 to i16
  store i16 %128, ptr %4, align 2
  %129 = and i128 %121, 5070602400912917605986812821503
  %130 = icmp ugt i128 %129, 2535301200456458802993406410752
  br i1 %130, label %134, label %138

131:                                              ; preds = %117
  br label %127

132:                                              ; preds = %117
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

133:                                              ; preds = %143, %141
  br label %97

134:                                              ; preds = %127
  %135 = load i16, ptr %4, align 2
  %136 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %135, i16 1)
  %137 = extractvalue { i16, i1 } %136, 1
  br i1 %137, label %140, label %141

138:                                              ; preds = %127
  %139 = icmp eq i128 %129, 2535301200456458802993406410752
  br i1 %139, label %144, label %150

140:                                              ; preds = %134
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

141:                                              ; preds = %134
  %142 = extractvalue { i16, i1 } %136, 0
  store i16 %142, ptr %4, align 2
  br label %133

143:                                              ; preds = %150, %152
  br label %133

144:                                              ; preds = %138
  %145 = load i16, ptr %4, align 2
  %146 = load i16, ptr %4, align 2
  %147 = and i16 %146, 1
  %148 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %145, i16 %147)
  %149 = extractvalue { i16, i1 } %148, 1
  br i1 %149, label %151, label %152

150:                                              ; preds = %138
  br label %143

151:                                              ; preds = %144
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

152:                                              ; preds = %144
  %153 = extractvalue { i16, i1 } %148, 0
  store i16 %153, ptr %4, align 2
  br label %143
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__trunctfsf2(fp128 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [6 x i64], align 8
  %4 = alloca i32, align 4
  %5 = bitcast fp128 %0 to i128
  %6 = and i128 %5, 170141183460469231731687303715884105727
  %7 = and i128 %5, -170141183460469231731687303715884105728
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 4, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i128 %6, 84411170029200692757020278824131100672
  %18 = sub i128 %6, 85730013431268538974667024891753005056
  %19 = icmp ult i128 %17, %18
  br i1 %19, label %27, label %34

20:                                               ; preds = %57, %36
  %21 = load i32, ptr %4, align 4
  %22 = lshr i128 %7, 96
  %23 = trunc i128 %22 to i32
  %24 = or i32 %21, %23
  store i32 %24, ptr %2, align 4
  %25 = load i32, ptr %2, align 4
  %26 = bitcast i32 %25 to float
  ret float %26

27:                                               ; preds = %1
  %28 = lshr i128 %6, 89
  %29 = trunc i128 %28 to i32
  store i32 %29, ptr %4, align 4
  %30 = load i32, ptr %4, align 4
  %31 = sub i32 %30, -1073741824
  store i32 %31, ptr %4, align 4
  %32 = and i128 %6, 618970019642690137449562111
  %33 = icmp ugt i128 %32, 309485009821345068724781056
  br i1 %33, label %37, label %41

34:                                               ; preds = %1
  %35 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br i1 %35, label %58, label %67

36:                                               ; preds = %46, %44
  br label %20

37:                                               ; preds = %27
  %38 = load i32, ptr %4, align 4
  %39 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %38, i32 1)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %27
  %42 = icmp eq i128 %32, 309485009821345068724781056
  br i1 %42, label %47, label %53

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i32, i1 } %39, 0
  store i32 %45, ptr %4, align 4
  br label %36

46:                                               ; preds = %53, %55
  br label %36

47:                                               ; preds = %41
  %48 = load i32, ptr %4, align 4
  %49 = load i32, ptr %4, align 4
  %50 = and i32 %49, 1
  %51 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %48, i32 %50)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %54, label %55

53:                                               ; preds = %41
  br label %46

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i32, i1 } %51, 0
  store i32 %56, ptr %4, align 4
  br label %46

57:                                               ; preds = %74, %69
  br label %20

58:                                               ; preds = %34
  store i32 2139095040, ptr %4, align 4
  %59 = load i32, ptr %4, align 4
  %60 = or i32 %59, 4194304
  store i32 %60, ptr %4, align 4
  %61 = load i32, ptr %4, align 4
  %62 = and i128 %6, 2596148429267413814265248164610047
  %63 = lshr i128 %62, 89
  %64 = and i128 %63, 4194303
  %65 = sub i128 4294967295, %64
  %66 = icmp ule i128 %65, 4294967295
  br i1 %66, label %72, label %73

67:                                               ; preds = %34
  %68 = icmp uge i128 %6, 85730013431268538974667024891753005056
  br i1 %68, label %75, label %76

69:                                               ; preds = %72
  %70 = trunc i128 %64 to i32
  %71 = or i32 %61, %70
  store i32 %71, ptr %4, align 4
  br label %57

72:                                               ; preds = %58
  br label %69

73:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

74:                                               ; preds = %97, %75
  br label %57

75:                                               ; preds = %67
  store i32 2139095040, ptr %4, align 4
  br label %74

76:                                               ; preds = %67
  %77 = lshr i128 %6, 112
  %78 = sub i128 4294967295, %77
  %79 = icmp ule i128 %78, 4294967295
  br i1 %79, label %84, label %85

80:                                               ; preds = %84
  %81 = trunc i128 %77 to i32
  %82 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16256, i32 %81)
  %83 = extractvalue { i32, i1 } %82, 1
  br i1 %83, label %86, label %87

84:                                               ; preds = %76
  br label %80

85:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

86:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %80
  %88 = extractvalue { i32, i1 } %82, 0
  %89 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %88, i32 1)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %91, label %92

91:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

92:                                               ; preds = %87
  %93 = extractvalue { i32, i1 } %89, 0
  %94 = and i128 %5, 5192296858534827628530496329220095
  %95 = or i128 %94, 5192296858534827628530496329220096
  %96 = icmp ugt i32 %93, 112
  br i1 %96, label %98, label %99

97:                                               ; preds = %133, %98
  br label %74

98:                                               ; preds = %92
  store i32 0, ptr %4, align 4
  br label %97

99:                                               ; preds = %92
  %100 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 128, i32 %93)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %99
  %104 = extractvalue { i32, i1 } %100, 0
  %105 = sub i32 127, %104
  %106 = icmp ule i32 %105, 127
  br i1 %106, label %115, label %116

107:                                              ; preds = %115
  %108 = trunc i32 %104 to i7
  %109 = zext i7 %108 to i128
  %110 = shl i128 %95, %109
  %111 = icmp ne i128 %110, 0
  %112 = zext i1 %111 to i128
  %113 = sub i32 127, %93
  %114 = icmp ule i32 %113, 127
  br i1 %114, label %125, label %126

115:                                              ; preds = %103
  br label %107

116:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

117:                                              ; preds = %125
  %118 = trunc i32 %93 to i7
  %119 = zext i7 %118 to i128
  %120 = lshr i128 %95, %119
  %121 = or i128 %120, %112
  %122 = lshr i128 %121, 89
  %123 = sub i128 4294967295, %122
  %124 = icmp ule i128 %123, 4294967295
  br i1 %124, label %131, label %132

125:                                              ; preds = %107
  br label %117

126:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

127:                                              ; preds = %131
  %128 = trunc i128 %122 to i32
  store i32 %128, ptr %4, align 4
  %129 = and i128 %121, 618970019642690137449562111
  %130 = icmp ugt i128 %129, 309485009821345068724781056
  br i1 %130, label %134, label %138

131:                                              ; preds = %117
  br label %127

132:                                              ; preds = %117
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

133:                                              ; preds = %143, %141
  br label %97

134:                                              ; preds = %127
  %135 = load i32, ptr %4, align 4
  %136 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %135, i32 1)
  %137 = extractvalue { i32, i1 } %136, 1
  br i1 %137, label %140, label %141

138:                                              ; preds = %127
  %139 = icmp eq i128 %129, 309485009821345068724781056
  br i1 %139, label %144, label %150

140:                                              ; preds = %134
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

141:                                              ; preds = %134
  %142 = extractvalue { i32, i1 } %136, 0
  store i32 %142, ptr %4, align 4
  br label %133

143:                                              ; preds = %150, %152
  br label %133

144:                                              ; preds = %138
  %145 = load i32, ptr %4, align 4
  %146 = load i32, ptr %4, align 4
  %147 = and i32 %146, 1
  %148 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %145, i32 %147)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %151, label %152

150:                                              ; preds = %138
  br label %143

151:                                              ; preds = %144
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

152:                                              ; preds = %144
  %153 = extractvalue { i32, i1 } %148, 0
  store i32 %153, ptr %4, align 4
  br label %143
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__trunctfdf2(fp128 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca [6 x i64], align 8
  %4 = alloca i64, align 8
  %5 = bitcast fp128 %0 to i128
  %6 = and i128 %5, 170141183460469231731687303715884105727
  %7 = and i128 %5, -170141183460469231731687303715884105728
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %8 = ptrtoint ptr %4 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %3 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = sub i128 %6, 79758872043953487201856954113149894656
  %18 = sub i128 %6, 90382311416515744529830349602734211072
  %19 = icmp ult i128 %17, %18
  br i1 %19, label %27, label %34

20:                                               ; preds = %57, %36
  %21 = load i64, ptr %4, align 8
  %22 = lshr i128 %7, 64
  %23 = trunc i128 %22 to i64
  %24 = or i64 %21, %23
  store i64 %24, ptr %2, align 8
  %25 = load i64, ptr %2, align 8
  %26 = bitcast i64 %25 to double
  ret double %26

27:                                               ; preds = %1
  %28 = lshr i128 %6, 60
  %29 = trunc i128 %28 to i64
  store i64 %29, ptr %4, align 8
  %30 = load i64, ptr %4, align 8
  %31 = sub i64 %30, -4611686018427387904
  store i64 %31, ptr %4, align 8
  %32 = and i128 %6, 1152921504606846975
  %33 = icmp ugt i128 %32, 576460752303423488
  br i1 %33, label %37, label %41

34:                                               ; preds = %1
  %35 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br i1 %35, label %58, label %67

36:                                               ; preds = %46, %44
  br label %20

37:                                               ; preds = %27
  %38 = load i64, ptr %4, align 8
  %39 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %38, i64 1)
  %40 = extractvalue { i64, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %27
  %42 = icmp eq i128 %32, 576460752303423488
  br i1 %42, label %47, label %53

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i64, i1 } %39, 0
  store i64 %45, ptr %4, align 8
  br label %36

46:                                               ; preds = %53, %55
  br label %36

47:                                               ; preds = %41
  %48 = load i64, ptr %4, align 8
  %49 = load i64, ptr %4, align 8
  %50 = and i64 %49, 1
  %51 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %48, i64 %50)
  %52 = extractvalue { i64, i1 } %51, 1
  br i1 %52, label %54, label %55

53:                                               ; preds = %41
  br label %46

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i64, i1 } %51, 0
  store i64 %56, ptr %4, align 8
  br label %46

57:                                               ; preds = %74, %69
  br label %20

58:                                               ; preds = %34
  store i64 9218868437227405312, ptr %4, align 8
  %59 = load i64, ptr %4, align 8
  %60 = or i64 %59, 2251799813685248
  store i64 %60, ptr %4, align 8
  %61 = load i64, ptr %4, align 8
  %62 = and i128 %6, 2596148429267413814265248164610047
  %63 = lshr i128 %62, 60
  %64 = and i128 %63, 2251799813685247
  %65 = sub i128 18446744073709551615, %64
  %66 = icmp ule i128 %65, 18446744073709551615
  br i1 %66, label %72, label %73

67:                                               ; preds = %34
  %68 = icmp uge i128 %6, 90382311416515744529830349602734211072
  br i1 %68, label %75, label %76

69:                                               ; preds = %72
  %70 = trunc i128 %64 to i64
  %71 = or i64 %61, %70
  store i64 %71, ptr %4, align 8
  br label %57

72:                                               ; preds = %58
  br label %69

73:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

74:                                               ; preds = %97, %75
  br label %57

75:                                               ; preds = %67
  store i64 9218868437227405312, ptr %4, align 8
  br label %74

76:                                               ; preds = %67
  %77 = lshr i128 %6, 112
  %78 = sub i128 4294967295, %77
  %79 = icmp ule i128 %78, 4294967295
  br i1 %79, label %84, label %85

80:                                               ; preds = %84
  %81 = trunc i128 %77 to i32
  %82 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 15360, i32 %81)
  %83 = extractvalue { i32, i1 } %82, 1
  br i1 %83, label %86, label %87

84:                                               ; preds = %76
  br label %80

85:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

86:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %80
  %88 = extractvalue { i32, i1 } %82, 0
  %89 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %88, i32 1)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %91, label %92

91:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

92:                                               ; preds = %87
  %93 = extractvalue { i32, i1 } %89, 0
  %94 = and i128 %5, 5192296858534827628530496329220095
  %95 = or i128 %94, 5192296858534827628530496329220096
  %96 = icmp ugt i32 %93, 112
  br i1 %96, label %98, label %99

97:                                               ; preds = %133, %98
  br label %74

98:                                               ; preds = %92
  store i64 0, ptr %4, align 8
  br label %97

99:                                               ; preds = %92
  %100 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 128, i32 %93)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %99
  %104 = extractvalue { i32, i1 } %100, 0
  %105 = sub i32 127, %104
  %106 = icmp ule i32 %105, 127
  br i1 %106, label %115, label %116

107:                                              ; preds = %115
  %108 = trunc i32 %104 to i7
  %109 = zext i7 %108 to i128
  %110 = shl i128 %95, %109
  %111 = icmp ne i128 %110, 0
  %112 = zext i1 %111 to i128
  %113 = sub i32 127, %93
  %114 = icmp ule i32 %113, 127
  br i1 %114, label %125, label %126

115:                                              ; preds = %103
  br label %107

116:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

117:                                              ; preds = %125
  %118 = trunc i32 %93 to i7
  %119 = zext i7 %118 to i128
  %120 = lshr i128 %95, %119
  %121 = or i128 %120, %112
  %122 = lshr i128 %121, 60
  %123 = sub i128 18446744073709551615, %122
  %124 = icmp ule i128 %123, 18446744073709551615
  br i1 %124, label %131, label %132

125:                                              ; preds = %107
  br label %117

126:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

127:                                              ; preds = %131
  %128 = trunc i128 %122 to i64
  store i64 %128, ptr %4, align 8
  %129 = and i128 %121, 1152921504606846975
  %130 = icmp ugt i128 %129, 576460752303423488
  br i1 %130, label %134, label %138

131:                                              ; preds = %117
  br label %127

132:                                              ; preds = %117
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

133:                                              ; preds = %143, %141
  br label %97

134:                                              ; preds = %127
  %135 = load i64, ptr %4, align 8
  %136 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %135, i64 1)
  %137 = extractvalue { i64, i1 } %136, 1
  br i1 %137, label %140, label %141

138:                                              ; preds = %127
  %139 = icmp eq i128 %129, 576460752303423488
  br i1 %139, label %144, label %150

140:                                              ; preds = %134
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

141:                                              ; preds = %134
  %142 = extractvalue { i64, i1 } %136, 0
  store i64 %142, ptr %4, align 8
  br label %133

143:                                              ; preds = %150, %152
  br label %133

144:                                              ; preds = %138
  %145 = load i64, ptr %4, align 8
  %146 = load i64, ptr %4, align 8
  %147 = and i64 %146, 1
  %148 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %145, i64 %147)
  %149 = extractvalue { i64, i1 } %148, 1
  br i1 %149, label %151, label %152

150:                                              ; preds = %138
  br label %143

151:                                              ; preds = %144
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

152:                                              ; preds = %144
  %153 = extractvalue { i64, i1 } %148, 0
  store i64 %153, ptr %4, align 8
  br label %143
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__trunctfxf2(fp128 %0) #0 {
  %2 = alloca { i64, i1, [7 x i8] }, align 8
  %3 = alloca { i64, i1, [7 x i8] }, align 8
  %4 = alloca [6 x i64], align 8
  %5 = alloca %math.F80, align 8
  %6 = bitcast fp128 %0 to i128
  %7 = and i128 %6, 170141183460469231731687303715884105727
  %8 = and i128 %6, -170141183460469231731687303715884105728
  %9 = icmp ne i128 %8, 0
  br i1 %9, label %22, label %23

10:                                               ; preds = %23, %22
  %11 = phi i16 [ -32768, %22 ], [ 0, %23 ]
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 16, i1 false)
  %12 = ptrtoint ptr %5 to i64
  %13 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %12, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 16, ptr %15, align 8
  %16 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %18, align 8
  %19 = ptrtoint ptr %4 to i64
  %20 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %19, i64 0)
  %21 = icmp ugt i128 %7, 170135991163610696904058773219554885632
  br i1 %21, label %29, label %37

22:                                               ; preds = %1
  br label %10

23:                                               ; preds = %1
  br label %10

24:                                               ; preds = %114, %29
  %25 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %26 = load i16, ptr %25, align 2
  %27 = or i16 %26, %11
  store i16 %27, ptr %25, align 2
  %28 = call fastcc x86_fp80 @math.make_f80(ptr nonnull readonly align 8 %5)
  ret x86_fp80 %28

29:                                               ; preds = %10
  %30 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  store i16 32767, ptr %30, align 2
  %31 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  store i64 -9223372036854775808, ptr %31, align 8
  %32 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %33 = load i64, ptr %32, align 8
  %34 = lshr i128 %7, 49
  %35 = trunc i128 %34 to i64
  %36 = or i64 %33, %35
  store i64 %36, ptr %32, align 8
  br label %24

37:                                               ; preds = %10
  %38 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %39 = lshr i128 %7, 49
  %40 = trunc i128 %39 to i64
  %41 = or i64 %40, -9223372036854775808
  store i64 %41, ptr %38, align 8
  %42 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %43 = lshr i128 %7, 112
  %44 = trunc i128 %43 to i16
  store i16 %44, ptr %42, align 2
  %45 = and i128 %7, 562949953421311
  %46 = icmp ugt i128 %45, 281474976710656
  br i1 %46, label %51, label %69

47:                                               ; preds = %81, %72
  %48 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %49 = load i16, ptr %48, align 2
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %115, label %119

51:                                               ; preds = %37
  %52 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %53 = load i64, ptr %52, align 8
  %54 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %53, i64 1)
  %55 = extractvalue { i64, i1 } %54, 0
  %56 = extractvalue { i64, i1 } %54, 1
  %57 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 0
  store i64 %55, ptr %57, align 8
  %58 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 1
  store i1 %56, ptr %58, align 1
  %59 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %60 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 0
  %61 = load i64, ptr %60, align 8
  store i64 %61, ptr %59, align 8
  %62 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %63 = load i16, ptr %62, align 2
  %64 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 1
  %65 = load i1, ptr %64, align 1
  %66 = zext i1 %65 to i16
  %67 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %63, i16 %66)
  %68 = extractvalue { i16, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %37
  %70 = icmp eq i128 %45, 281474976710656
  br i1 %70, label %82, label %103

71:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %51
  %73 = extractvalue { i16, i1 } %67, 0
  store i16 %73, ptr %62, align 2
  %74 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %75 = load i64, ptr %74, align 8
  %76 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 1
  %77 = load i1, ptr %76, align 1
  %78 = zext i1 %77 to i64
  %79 = shl i64 %78, 63
  %80 = or i64 %75, %79
  store i64 %80, ptr %74, align 8
  br label %47

81:                                               ; preds = %103, %105
  br label %47

82:                                               ; preds = %69
  %83 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %84 = load i64, ptr %83, align 8
  %85 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %86 = load i64, ptr %85, align 8
  %87 = and i64 %86, 1
  %88 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %84, i64 %87)
  %89 = extractvalue { i64, i1 } %88, 0
  %90 = extractvalue { i64, i1 } %88, 1
  %91 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %2, i32 0, i32 0
  store i64 %89, ptr %91, align 8
  %92 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %2, i32 0, i32 1
  store i1 %90, ptr %92, align 1
  %93 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %94 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %2, i32 0, i32 0
  %95 = load i64, ptr %94, align 8
  store i64 %95, ptr %93, align 8
  %96 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %97 = load i16, ptr %96, align 2
  %98 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %2, i32 0, i32 1
  %99 = load i1, ptr %98, align 1
  %100 = zext i1 %99 to i16
  %101 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %97, i16 %100)
  %102 = extractvalue { i16, i1 } %101, 1
  br i1 %102, label %104, label %105

103:                                              ; preds = %69
  br label %81

104:                                              ; preds = %82
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %82
  %106 = extractvalue { i16, i1 } %101, 0
  store i16 %106, ptr %96, align 2
  %107 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %108 = load i64, ptr %107, align 8
  %109 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %2, i32 0, i32 1
  %110 = load i1, ptr %109, align 1
  %111 = zext i1 %110 to i64
  %112 = shl i64 %111, 63
  %113 = or i64 %108, %112
  store i64 %113, ptr %107, align 8
  br label %81

114:                                              ; preds = %119, %115
  br label %24

115:                                              ; preds = %47
  %116 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %117 = load i64, ptr %116, align 8
  %118 = and i64 %117, 9223372036854775807
  store i64 %118, ptr %116, align 8
  br label %114

119:                                              ; preds = %47
  br label %114
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixhfsi(half %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast half %0 to i16
  %6 = lshr i16 %5, 15
  %7 = icmp ne i16 %6, 0
  %8 = shl i16 %5, 1
  %9 = lshr i16 %8, 11
  %10 = zext i16 %9 to i32
  %11 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %10, i32 15)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %77, %79, %42, %23
  %14 = phi i32 [ 0, %23 ], [ %43, %42 ], [ %82, %79 ], [ %78, %77 ]
  ret i32 %14

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %1
  %17 = extractvalue { i32, i1 } %11, 0
  %18 = and i16 %5, 1023
  %19 = or i16 %18, 1024
  %20 = icmp slt i32 %17, 0
  br i1 %20, label %23, label %24

21:                                               ; preds = %24
  %22 = icmp sge i32 %17, 0
  br i1 %22, label %38, label %39

23:                                               ; preds = %16
  br label %13

24:                                               ; preds = %16
  br label %21

25:                                               ; preds = %41
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %26 = ptrtoint ptr %3 to i64
  %27 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %26, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %32, align 8
  %33 = ptrtoint ptr %2 to i64
  %34 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %33, i64 0)
  %35 = icmp slt i32 %17, 10
  br i1 %35, label %47, label %50

36:                                               ; preds = %38
  %37 = icmp uge i32 %17, 16
  br i1 %37, label %40, label %41

38:                                               ; preds = %21
  br label %36

39:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @51)
  unreachable

40:                                               ; preds = %36
  br i1 %7, label %44, label %45

41:                                               ; preds = %36
  br label %25

42:                                               ; preds = %45, %44
  %43 = load i32, ptr %4, align 4
  br label %13

44:                                               ; preds = %40
  store i32 -2147483648, ptr %4, align 4
  br label %42

45:                                               ; preds = %40
  store i32 2147483647, ptr %4, align 4
  br label %42

46:                                               ; preds = %71, %59
  br i1 %7, label %79, label %83

47:                                               ; preds = %25
  %48 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %17)
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %54, label %55

50:                                               ; preds = %25
  %51 = zext i16 %19 to i32
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %17, i32 10)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %66, label %67

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i32, i1 } %48, 0
  %57 = sub i32 15, %56
  %58 = icmp ule i32 %57, 15
  br i1 %58, label %64, label %65

59:                                               ; preds = %64
  %60 = trunc i32 %56 to i4
  %61 = zext i4 %60 to i16
  %62 = lshr i16 %19, %61
  %63 = zext i16 %62 to i32
  store i32 %63, ptr %3, align 4
  br label %46

64:                                               ; preds = %55
  br label %59

65:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @51)
  unreachable

66:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %50
  %68 = extractvalue { i32, i1 } %52, 0
  %69 = sub i32 31, %68
  %70 = icmp ule i32 %69, 31
  br i1 %70, label %75, label %76

71:                                               ; preds = %75
  %72 = trunc i32 %68 to i5
  %73 = zext i5 %72 to i32
  %74 = shl i32 %51, %73
  store i32 %74, ptr %3, align 4
  br label %46

75:                                               ; preds = %67
  br label %71

76:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @51)
  unreachable

77:                                               ; preds = %83
  %78 = load i32, ptr %3, align 4
  br label %13

79:                                               ; preds = %46
  %80 = load i32, ptr %3, align 4
  %81 = xor i32 %80, -1
  %82 = add i32 %81, 1
  br label %13

83:                                               ; preds = %46
  br label %77
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixhfdi(half %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast half %0 to i16
  %6 = lshr i16 %5, 15
  %7 = icmp ne i16 %6, 0
  %8 = shl i16 %5, 1
  %9 = lshr i16 %8, 11
  %10 = zext i16 %9 to i32
  %11 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %10, i32 15)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %77, %79, %42, %23
  %14 = phi i64 [ 0, %23 ], [ %43, %42 ], [ %82, %79 ], [ %78, %77 ]
  ret i64 %14

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %1
  %17 = extractvalue { i32, i1 } %11, 0
  %18 = and i16 %5, 1023
  %19 = or i16 %18, 1024
  %20 = icmp slt i32 %17, 0
  br i1 %20, label %23, label %24

21:                                               ; preds = %24
  %22 = icmp sge i32 %17, 0
  br i1 %22, label %38, label %39

23:                                               ; preds = %16
  br label %13

24:                                               ; preds = %16
  br label %21

25:                                               ; preds = %41
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %26 = ptrtoint ptr %3 to i64
  %27 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %26, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %32, align 8
  %33 = ptrtoint ptr %2 to i64
  %34 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %33, i64 0)
  %35 = icmp slt i32 %17, 10
  br i1 %35, label %47, label %50

36:                                               ; preds = %38
  %37 = icmp uge i32 %17, 16
  br i1 %37, label %40, label %41

38:                                               ; preds = %21
  br label %36

39:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @52)
  unreachable

40:                                               ; preds = %36
  br i1 %7, label %44, label %45

41:                                               ; preds = %36
  br label %25

42:                                               ; preds = %45, %44
  %43 = load i64, ptr %4, align 8
  br label %13

44:                                               ; preds = %40
  store i64 -9223372036854775808, ptr %4, align 8
  br label %42

45:                                               ; preds = %40
  store i64 9223372036854775807, ptr %4, align 8
  br label %42

46:                                               ; preds = %71, %59
  br i1 %7, label %79, label %83

47:                                               ; preds = %25
  %48 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %17)
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %54, label %55

50:                                               ; preds = %25
  %51 = zext i16 %19 to i64
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %17, i32 10)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %66, label %67

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i32, i1 } %48, 0
  %57 = sub i32 15, %56
  %58 = icmp ule i32 %57, 15
  br i1 %58, label %64, label %65

59:                                               ; preds = %64
  %60 = trunc i32 %56 to i4
  %61 = zext i4 %60 to i16
  %62 = lshr i16 %19, %61
  %63 = zext i16 %62 to i64
  store i64 %63, ptr %3, align 8
  br label %46

64:                                               ; preds = %55
  br label %59

65:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @52)
  unreachable

66:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %50
  %68 = extractvalue { i32, i1 } %52, 0
  %69 = sub i32 63, %68
  %70 = icmp ule i32 %69, 63
  br i1 %70, label %75, label %76

71:                                               ; preds = %75
  %72 = trunc i32 %68 to i6
  %73 = zext i6 %72 to i64
  %74 = shl i64 %51, %73
  store i64 %74, ptr %3, align 8
  br label %46

75:                                               ; preds = %67
  br label %71

76:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @52)
  unreachable

77:                                               ; preds = %83
  %78 = load i64, ptr %3, align 8
  br label %13

79:                                               ; preds = %46
  %80 = load i64, ptr %3, align 8
  %81 = xor i64 %80, -1
  %82 = add i64 %81, 1
  br label %13

83:                                               ; preds = %46
  br label %77
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixhfti(half %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = bitcast half %0 to i16
  %6 = lshr i16 %5, 15
  %7 = icmp ne i16 %6, 0
  %8 = shl i16 %5, 1
  %9 = lshr i16 %8, 11
  %10 = zext i16 %9 to i32
  %11 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %10, i32 15)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %77, %79, %42, %23
  %14 = phi i128 [ 0, %23 ], [ %43, %42 ], [ %82, %79 ], [ %78, %77 ]
  ret i128 %14

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %1
  %17 = extractvalue { i32, i1 } %11, 0
  %18 = and i16 %5, 1023
  %19 = or i16 %18, 1024
  %20 = icmp slt i32 %17, 0
  br i1 %20, label %23, label %24

21:                                               ; preds = %24
  %22 = icmp sge i32 %17, 0
  br i1 %22, label %38, label %39

23:                                               ; preds = %16
  br label %13

24:                                               ; preds = %16
  br label %21

25:                                               ; preds = %41
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %26 = ptrtoint ptr %3 to i64
  %27 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %26, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %32, align 8
  %33 = ptrtoint ptr %2 to i64
  %34 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %33, i64 0)
  %35 = icmp slt i32 %17, 10
  br i1 %35, label %47, label %50

36:                                               ; preds = %38
  %37 = icmp uge i32 %17, 16
  br i1 %37, label %40, label %41

38:                                               ; preds = %21
  br label %36

39:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @53)
  unreachable

40:                                               ; preds = %36
  br i1 %7, label %44, label %45

41:                                               ; preds = %36
  br label %25

42:                                               ; preds = %45, %44
  %43 = load i128, ptr %4, align 8
  br label %13

44:                                               ; preds = %40
  store i128 -170141183460469231731687303715884105728, ptr %4, align 8
  br label %42

45:                                               ; preds = %40
  store i128 170141183460469231731687303715884105727, ptr %4, align 8
  br label %42

46:                                               ; preds = %71, %59
  br i1 %7, label %79, label %83

47:                                               ; preds = %25
  %48 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %17)
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %54, label %55

50:                                               ; preds = %25
  %51 = zext i16 %19 to i128
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %17, i32 10)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %66, label %67

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i32, i1 } %48, 0
  %57 = sub i32 15, %56
  %58 = icmp ule i32 %57, 15
  br i1 %58, label %64, label %65

59:                                               ; preds = %64
  %60 = trunc i32 %56 to i4
  %61 = zext i4 %60 to i16
  %62 = lshr i16 %19, %61
  %63 = zext i16 %62 to i128
  store i128 %63, ptr %3, align 8
  br label %46

64:                                               ; preds = %55
  br label %59

65:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @53)
  unreachable

66:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %50
  %68 = extractvalue { i32, i1 } %52, 0
  %69 = sub i32 127, %68
  %70 = icmp ule i32 %69, 127
  br i1 %70, label %75, label %76

71:                                               ; preds = %75
  %72 = trunc i32 %68 to i7
  %73 = zext i7 %72 to i128
  %74 = shl i128 %51, %73
  store i128 %74, ptr %3, align 8
  br label %46

75:                                               ; preds = %67
  br label %71

76:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @53)
  unreachable

77:                                               ; preds = %83
  %78 = load i128, ptr %3, align 8
  br label %13

79:                                               ; preds = %46
  %80 = load i128, ptr %3, align 8
  %81 = xor i128 %80, -1
  %82 = add i128 %81, 1
  br label %13

83:                                               ; preds = %46
  br label %77
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixsfsi(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast float %0 to i32
  %6 = lshr i32 %5, 31
  %7 = icmp ne i32 %6, 0
  %8 = shl i32 %5, 1
  %9 = lshr i32 %8, 24
  %10 = sub i32 2147483647, %9
  %11 = icmp ule i32 %10, 2147483647
  br i1 %11, label %17, label %18

12:                                               ; preds = %89, %91, %46, %27
  %13 = phi i32 [ 0, %27 ], [ %47, %46 ], [ %94, %91 ], [ %90, %89 ]
  ret i32 %13

14:                                               ; preds = %17
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 127)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %14

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i32 %5, 8388607
  %23 = or i32 %22, 8388608
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %27, label %28

25:                                               ; preds = %28
  %26 = icmp sge i32 %21, 0
  br i1 %26, label %42, label %43

27:                                               ; preds = %20
  br label %12

28:                                               ; preds = %20
  br label %25

29:                                               ; preds = %45
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %30 = ptrtoint ptr %3 to i64
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %30, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %36, align 8
  %37 = ptrtoint ptr %2 to i64
  %38 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %37, i64 0)
  %39 = icmp slt i32 %21, 23
  br i1 %39, label %51, label %54

40:                                               ; preds = %42
  %41 = icmp uge i32 %21, 31
  br i1 %41, label %44, label %45

42:                                               ; preds = %25
  br label %40

43:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

44:                                               ; preds = %40
  br i1 %7, label %48, label %49

45:                                               ; preds = %40
  br label %29

46:                                               ; preds = %49, %48
  %47 = load i32, ptr %4, align 4
  br label %12

48:                                               ; preds = %44
  store i32 -2147483648, ptr %4, align 4
  br label %46

49:                                               ; preds = %44
  store i32 2147483647, ptr %4, align 4
  br label %46

50:                                               ; preds = %83, %70
  br i1 %7, label %91, label %95

51:                                               ; preds = %29
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %57, label %58

54:                                               ; preds = %29
  %55 = sub i32 2147483647, %23
  %56 = icmp ule i32 %55, 2147483647
  br i1 %56, label %76, label %77

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i32, i1 } %52, 0
  %60 = sub i32 31, %59
  %61 = icmp ule i32 %60, 31
  br i1 %61, label %68, label %69

62:                                               ; preds = %68
  %63 = trunc i32 %59 to i5
  %64 = zext i5 %63 to i32
  %65 = lshr i32 %23, %64
  %66 = sub i32 2147483647, %65
  %67 = icmp ule i32 %66, 2147483647
  br i1 %67, label %71, label %72

68:                                               ; preds = %58
  br label %62

69:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

70:                                               ; preds = %71
  store i32 %65, ptr %3, align 4
  br label %50

71:                                               ; preds = %62
  br label %70

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

73:                                               ; preds = %76
  %74 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 23)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %78, label %79

76:                                               ; preds = %54
  br label %73

77:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

78:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %73
  %80 = extractvalue { i32, i1 } %74, 0
  %81 = sub i32 31, %80
  %82 = icmp ule i32 %81, 31
  br i1 %82, label %87, label %88

83:                                               ; preds = %87
  %84 = trunc i32 %80 to i5
  %85 = zext i5 %84 to i32
  %86 = shl i32 %23, %85
  store i32 %86, ptr %3, align 4
  br label %50

87:                                               ; preds = %79
  br label %83

88:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

89:                                               ; preds = %95
  %90 = load i32, ptr %3, align 4
  br label %12

91:                                               ; preds = %50
  %92 = load i32, ptr %3, align 4
  %93 = xor i32 %92, -1
  %94 = add i32 %93, 1
  br label %12

95:                                               ; preds = %50
  br label %89
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixsfdi(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast float %0 to i32
  %6 = lshr i32 %5, 31
  %7 = icmp ne i32 %6, 0
  %8 = shl i32 %5, 1
  %9 = lshr i32 %8, 24
  %10 = sub i32 2147483647, %9
  %11 = icmp ule i32 %10, 2147483647
  br i1 %11, label %17, label %18

12:                                               ; preds = %81, %83, %46, %27
  %13 = phi i64 [ 0, %27 ], [ %47, %46 ], [ %86, %83 ], [ %82, %81 ]
  ret i64 %13

14:                                               ; preds = %17
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 127)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %14

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @55)
  unreachable

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i32 %5, 8388607
  %23 = or i32 %22, 8388608
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %27, label %28

25:                                               ; preds = %28
  %26 = icmp sge i32 %21, 0
  br i1 %26, label %42, label %43

27:                                               ; preds = %20
  br label %12

28:                                               ; preds = %20
  br label %25

29:                                               ; preds = %45
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %30 = ptrtoint ptr %3 to i64
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %30, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %36, align 8
  %37 = ptrtoint ptr %2 to i64
  %38 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %37, i64 0)
  %39 = icmp slt i32 %21, 23
  br i1 %39, label %51, label %54

40:                                               ; preds = %42
  %41 = icmp uge i32 %21, 63
  br i1 %41, label %44, label %45

42:                                               ; preds = %25
  br label %40

43:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @55)
  unreachable

44:                                               ; preds = %40
  br i1 %7, label %48, label %49

45:                                               ; preds = %40
  br label %29

46:                                               ; preds = %49, %48
  %47 = load i64, ptr %4, align 8
  br label %12

48:                                               ; preds = %44
  store i64 -9223372036854775808, ptr %4, align 8
  br label %46

49:                                               ; preds = %44
  store i64 9223372036854775807, ptr %4, align 8
  br label %46

50:                                               ; preds = %75, %63
  br i1 %7, label %83, label %87

51:                                               ; preds = %29
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %58, label %59

54:                                               ; preds = %29
  %55 = zext i32 %23 to i64
  %56 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 23)
  %57 = extractvalue { i32, i1 } %56, 1
  br i1 %57, label %70, label %71

58:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %51
  %60 = extractvalue { i32, i1 } %52, 0
  %61 = sub i32 31, %60
  %62 = icmp ule i32 %61, 31
  br i1 %62, label %68, label %69

63:                                               ; preds = %68
  %64 = trunc i32 %60 to i5
  %65 = zext i5 %64 to i32
  %66 = lshr i32 %23, %65
  %67 = zext i32 %66 to i64
  store i64 %67, ptr %3, align 8
  br label %50

68:                                               ; preds = %59
  br label %63

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @55)
  unreachable

70:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %54
  %72 = extractvalue { i32, i1 } %56, 0
  %73 = sub i32 63, %72
  %74 = icmp ule i32 %73, 63
  br i1 %74, label %79, label %80

75:                                               ; preds = %79
  %76 = trunc i32 %72 to i6
  %77 = zext i6 %76 to i64
  %78 = shl i64 %55, %77
  store i64 %78, ptr %3, align 8
  br label %50

79:                                               ; preds = %71
  br label %75

80:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @55)
  unreachable

81:                                               ; preds = %87
  %82 = load i64, ptr %3, align 8
  br label %12

83:                                               ; preds = %50
  %84 = load i64, ptr %3, align 8
  %85 = xor i64 %84, -1
  %86 = add i64 %85, 1
  br label %12

87:                                               ; preds = %50
  br label %81
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixsfti(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = bitcast float %0 to i32
  %6 = lshr i32 %5, 31
  %7 = icmp ne i32 %6, 0
  %8 = shl i32 %5, 1
  %9 = lshr i32 %8, 24
  %10 = sub i32 2147483647, %9
  %11 = icmp ule i32 %10, 2147483647
  br i1 %11, label %17, label %18

12:                                               ; preds = %81, %83, %46, %27
  %13 = phi i128 [ 0, %27 ], [ %47, %46 ], [ %86, %83 ], [ %82, %81 ]
  ret i128 %13

14:                                               ; preds = %17
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 127)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %14

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @56)
  unreachable

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i32 %5, 8388607
  %23 = or i32 %22, 8388608
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %27, label %28

25:                                               ; preds = %28
  %26 = icmp sge i32 %21, 0
  br i1 %26, label %42, label %43

27:                                               ; preds = %20
  br label %12

28:                                               ; preds = %20
  br label %25

29:                                               ; preds = %45
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %30 = ptrtoint ptr %3 to i64
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %30, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %36, align 8
  %37 = ptrtoint ptr %2 to i64
  %38 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %37, i64 0)
  %39 = icmp slt i32 %21, 23
  br i1 %39, label %51, label %54

40:                                               ; preds = %42
  %41 = icmp uge i32 %21, 127
  br i1 %41, label %44, label %45

42:                                               ; preds = %25
  br label %40

43:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @56)
  unreachable

44:                                               ; preds = %40
  br i1 %7, label %48, label %49

45:                                               ; preds = %40
  br label %29

46:                                               ; preds = %49, %48
  %47 = load i128, ptr %4, align 8
  br label %12

48:                                               ; preds = %44
  store i128 -170141183460469231731687303715884105728, ptr %4, align 8
  br label %46

49:                                               ; preds = %44
  store i128 170141183460469231731687303715884105727, ptr %4, align 8
  br label %46

50:                                               ; preds = %75, %63
  br i1 %7, label %83, label %87

51:                                               ; preds = %29
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %58, label %59

54:                                               ; preds = %29
  %55 = zext i32 %23 to i128
  %56 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 23)
  %57 = extractvalue { i32, i1 } %56, 1
  br i1 %57, label %70, label %71

58:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %51
  %60 = extractvalue { i32, i1 } %52, 0
  %61 = sub i32 31, %60
  %62 = icmp ule i32 %61, 31
  br i1 %62, label %68, label %69

63:                                               ; preds = %68
  %64 = trunc i32 %60 to i5
  %65 = zext i5 %64 to i32
  %66 = lshr i32 %23, %65
  %67 = zext i32 %66 to i128
  store i128 %67, ptr %3, align 8
  br label %50

68:                                               ; preds = %59
  br label %63

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @56)
  unreachable

70:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %54
  %72 = extractvalue { i32, i1 } %56, 0
  %73 = sub i32 127, %72
  %74 = icmp ule i32 %73, 127
  br i1 %74, label %79, label %80

75:                                               ; preds = %79
  %76 = trunc i32 %72 to i7
  %77 = zext i7 %76 to i128
  %78 = shl i128 %55, %77
  store i128 %78, ptr %3, align 8
  br label %50

79:                                               ; preds = %71
  br label %75

80:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @56)
  unreachable

81:                                               ; preds = %87
  %82 = load i128, ptr %3, align 8
  br label %12

83:                                               ; preds = %50
  %84 = load i128, ptr %3, align 8
  %85 = xor i128 %84, -1
  %86 = add i128 %85, 1
  br label %12

87:                                               ; preds = %50
  br label %81
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixdfsi(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 63
  %7 = icmp ne i64 %6, 0
  %8 = shl i64 %5, 1
  %9 = lshr i64 %8, 53
  %10 = sub i64 2147483647, %9
  %11 = icmp ule i64 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %92, %94, %47, %28
  %13 = phi i32 [ 0, %28 ], [ %48, %47 ], [ %97, %94 ], [ %93, %92 ]
  ret i32 %13

14:                                               ; preds = %18
  %15 = trunc i64 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 1023)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i64 %5, 4503599627370495
  %24 = or i64 %23, 4503599627370496
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %43, label %44

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %46
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %31 = ptrtoint ptr %3 to i64
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %31, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %37, align 8
  %38 = ptrtoint ptr %2 to i64
  %39 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %38, i64 0)
  %40 = icmp slt i32 %22, 52
  br i1 %40, label %52, label %55

41:                                               ; preds = %43
  %42 = icmp uge i32 %22, 31
  br i1 %42, label %45, label %46

43:                                               ; preds = %26
  br label %41

44:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

45:                                               ; preds = %41
  br i1 %7, label %49, label %50

46:                                               ; preds = %41
  br label %30

47:                                               ; preds = %50, %49
  %48 = load i32, ptr %4, align 4
  br label %12

49:                                               ; preds = %45
  store i32 -2147483648, ptr %4, align 4
  br label %47

50:                                               ; preds = %45
  store i32 2147483647, ptr %4, align 4
  br label %47

51:                                               ; preds = %86, %71
  br i1 %7, label %94, label %98

52:                                               ; preds = %30
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %22)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %58, label %59

55:                                               ; preds = %30
  %56 = sub i64 2147483647, %24
  %57 = icmp ule i64 %56, 2147483647
  br i1 %57, label %79, label %80

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i32, i1 } %53, 0
  %61 = sub i32 63, %60
  %62 = icmp ule i32 %61, 63
  br i1 %62, label %69, label %70

63:                                               ; preds = %69
  %64 = trunc i32 %60 to i6
  %65 = zext i6 %64 to i64
  %66 = lshr i64 %24, %65
  %67 = sub i64 2147483647, %66
  %68 = icmp ule i64 %67, 2147483647
  br i1 %68, label %73, label %74

69:                                               ; preds = %59
  br label %63

70:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

71:                                               ; preds = %73
  %72 = trunc i64 %66 to i32
  store i32 %72, ptr %3, align 4
  br label %51

73:                                               ; preds = %63
  br label %71

74:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

75:                                               ; preds = %79
  %76 = trunc i64 %24 to i32
  %77 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 52)
  %78 = extractvalue { i32, i1 } %77, 1
  br i1 %78, label %81, label %82

79:                                               ; preds = %55
  br label %75

80:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

81:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %75
  %83 = extractvalue { i32, i1 } %77, 0
  %84 = sub i32 31, %83
  %85 = icmp ule i32 %84, 31
  br i1 %85, label %90, label %91

86:                                               ; preds = %90
  %87 = trunc i32 %83 to i5
  %88 = zext i5 %87 to i32
  %89 = shl i32 %76, %88
  store i32 %89, ptr %3, align 4
  br label %51

90:                                               ; preds = %82
  br label %86

91:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

92:                                               ; preds = %98
  %93 = load i32, ptr %3, align 4
  br label %12

94:                                               ; preds = %51
  %95 = load i32, ptr %3, align 4
  %96 = xor i32 %95, -1
  %97 = add i32 %96, 1
  br label %12

98:                                               ; preds = %51
  br label %92
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixdfdi(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 63
  %7 = icmp ne i64 %6, 0
  %8 = shl i64 %5, 1
  %9 = lshr i64 %8, 53
  %10 = sub i64 2147483647, %9
  %11 = icmp ule i64 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %90, %92, %47, %28
  %13 = phi i64 [ 0, %28 ], [ %48, %47 ], [ %95, %92 ], [ %91, %90 ]
  ret i64 %13

14:                                               ; preds = %18
  %15 = trunc i64 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 1023)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i64 %5, 4503599627370495
  %24 = or i64 %23, 4503599627370496
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %43, label %44

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %46
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %31 = ptrtoint ptr %3 to i64
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %31, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %37, align 8
  %38 = ptrtoint ptr %2 to i64
  %39 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %38, i64 0)
  %40 = icmp slt i32 %22, 52
  br i1 %40, label %52, label %55

41:                                               ; preds = %43
  %42 = icmp uge i32 %22, 63
  br i1 %42, label %45, label %46

43:                                               ; preds = %26
  br label %41

44:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

45:                                               ; preds = %41
  br i1 %7, label %49, label %50

46:                                               ; preds = %41
  br label %30

47:                                               ; preds = %50, %49
  %48 = load i64, ptr %4, align 8
  br label %12

49:                                               ; preds = %45
  store i64 -9223372036854775808, ptr %4, align 8
  br label %47

50:                                               ; preds = %45
  store i64 9223372036854775807, ptr %4, align 8
  br label %47

51:                                               ; preds = %84, %71
  br i1 %7, label %92, label %96

52:                                               ; preds = %30
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %22)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %58, label %59

55:                                               ; preds = %30
  %56 = sub i64 9223372036854775807, %24
  %57 = icmp ule i64 %56, 9223372036854775807
  br i1 %57, label %77, label %78

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i32, i1 } %53, 0
  %61 = sub i32 63, %60
  %62 = icmp ule i32 %61, 63
  br i1 %62, label %69, label %70

63:                                               ; preds = %69
  %64 = trunc i32 %60 to i6
  %65 = zext i6 %64 to i64
  %66 = lshr i64 %24, %65
  %67 = sub i64 9223372036854775807, %66
  %68 = icmp ule i64 %67, 9223372036854775807
  br i1 %68, label %72, label %73

69:                                               ; preds = %59
  br label %63

70:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

71:                                               ; preds = %72
  store i64 %66, ptr %3, align 8
  br label %51

72:                                               ; preds = %63
  br label %71

73:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

74:                                               ; preds = %77
  %75 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 52)
  %76 = extractvalue { i32, i1 } %75, 1
  br i1 %76, label %79, label %80

77:                                               ; preds = %55
  br label %74

78:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

79:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %74
  %81 = extractvalue { i32, i1 } %75, 0
  %82 = sub i32 63, %81
  %83 = icmp ule i32 %82, 63
  br i1 %83, label %88, label %89

84:                                               ; preds = %88
  %85 = trunc i32 %81 to i6
  %86 = zext i6 %85 to i64
  %87 = shl i64 %24, %86
  store i64 %87, ptr %3, align 8
  br label %51

88:                                               ; preds = %80
  br label %84

89:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

90:                                               ; preds = %96
  %91 = load i64, ptr %3, align 8
  br label %12

92:                                               ; preds = %51
  %93 = load i64, ptr %3, align 8
  %94 = xor i64 %93, -1
  %95 = add i64 %94, 1
  br label %12

96:                                               ; preds = %51
  br label %90
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixdfti(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 63
  %7 = icmp ne i64 %6, 0
  %8 = shl i64 %5, 1
  %9 = lshr i64 %8, 53
  %10 = sub i64 2147483647, %9
  %11 = icmp ule i64 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %82, %84, %47, %28
  %13 = phi i128 [ 0, %28 ], [ %48, %47 ], [ %87, %84 ], [ %83, %82 ]
  ret i128 %13

14:                                               ; preds = %18
  %15 = trunc i64 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 1023)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @59)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i64 %5, 4503599627370495
  %24 = or i64 %23, 4503599627370496
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %43, label %44

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %46
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %31 = ptrtoint ptr %3 to i64
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %31, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %37, align 8
  %38 = ptrtoint ptr %2 to i64
  %39 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %38, i64 0)
  %40 = icmp slt i32 %22, 52
  br i1 %40, label %52, label %55

41:                                               ; preds = %43
  %42 = icmp uge i32 %22, 127
  br i1 %42, label %45, label %46

43:                                               ; preds = %26
  br label %41

44:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @59)
  unreachable

45:                                               ; preds = %41
  br i1 %7, label %49, label %50

46:                                               ; preds = %41
  br label %30

47:                                               ; preds = %50, %49
  %48 = load i128, ptr %4, align 8
  br label %12

49:                                               ; preds = %45
  store i128 -170141183460469231731687303715884105728, ptr %4, align 8
  br label %47

50:                                               ; preds = %45
  store i128 170141183460469231731687303715884105727, ptr %4, align 8
  br label %47

51:                                               ; preds = %76, %64
  br i1 %7, label %84, label %88

52:                                               ; preds = %30
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %22)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %59, label %60

55:                                               ; preds = %30
  %56 = zext i64 %24 to i128
  %57 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 52)
  %58 = extractvalue { i32, i1 } %57, 1
  br i1 %58, label %71, label %72

59:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %52
  %61 = extractvalue { i32, i1 } %53, 0
  %62 = sub i32 63, %61
  %63 = icmp ule i32 %62, 63
  br i1 %63, label %69, label %70

64:                                               ; preds = %69
  %65 = trunc i32 %61 to i6
  %66 = zext i6 %65 to i64
  %67 = lshr i64 %24, %66
  %68 = zext i64 %67 to i128
  store i128 %68, ptr %3, align 8
  br label %51

69:                                               ; preds = %60
  br label %64

70:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @59)
  unreachable

71:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %55
  %73 = extractvalue { i32, i1 } %57, 0
  %74 = sub i32 127, %73
  %75 = icmp ule i32 %74, 127
  br i1 %75, label %80, label %81

76:                                               ; preds = %80
  %77 = trunc i32 %73 to i7
  %78 = zext i7 %77 to i128
  %79 = shl i128 %56, %78
  store i128 %79, ptr %3, align 8
  br label %51

80:                                               ; preds = %72
  br label %76

81:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @59)
  unreachable

82:                                               ; preds = %88
  %83 = load i128, ptr %3, align 8
  br label %12

84:                                               ; preds = %51
  %85 = load i128, ptr %3, align 8
  %86 = xor i128 %85, -1
  %87 = add i128 %86, 1
  br label %12

88:                                               ; preds = %51
  br label %82
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixtfsi(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast fp128 %0 to i128
  %6 = lshr i128 %5, 127
  %7 = icmp ne i128 %6, 0
  %8 = shl i128 %5, 1
  %9 = lshr i128 %8, 113
  %10 = sub i128 2147483647, %9
  %11 = icmp ule i128 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %92, %94, %47, %28
  %13 = phi i32 [ 0, %28 ], [ %48, %47 ], [ %97, %94 ], [ %93, %92 ]
  ret i32 %13

14:                                               ; preds = %18
  %15 = trunc i128 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 16383)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i128 %5, 5192296858534827628530496329220095
  %24 = or i128 %23, 5192296858534827628530496329220096
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %43, label %44

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %46
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %31 = ptrtoint ptr %3 to i64
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %31, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %37, align 8
  %38 = ptrtoint ptr %2 to i64
  %39 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %38, i64 0)
  %40 = icmp slt i32 %22, 112
  br i1 %40, label %52, label %55

41:                                               ; preds = %43
  %42 = icmp uge i32 %22, 31
  br i1 %42, label %45, label %46

43:                                               ; preds = %26
  br label %41

44:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

45:                                               ; preds = %41
  br i1 %7, label %49, label %50

46:                                               ; preds = %41
  br label %30

47:                                               ; preds = %50, %49
  %48 = load i32, ptr %4, align 4
  br label %12

49:                                               ; preds = %45
  store i32 -2147483648, ptr %4, align 4
  br label %47

50:                                               ; preds = %45
  store i32 2147483647, ptr %4, align 4
  br label %47

51:                                               ; preds = %86, %71
  br i1 %7, label %94, label %98

52:                                               ; preds = %30
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %22)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %58, label %59

55:                                               ; preds = %30
  %56 = sub i128 2147483647, %24
  %57 = icmp ule i128 %56, 2147483647
  br i1 %57, label %79, label %80

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i32, i1 } %53, 0
  %61 = sub i32 127, %60
  %62 = icmp ule i32 %61, 127
  br i1 %62, label %69, label %70

63:                                               ; preds = %69
  %64 = trunc i32 %60 to i7
  %65 = zext i7 %64 to i128
  %66 = lshr i128 %24, %65
  %67 = sub i128 2147483647, %66
  %68 = icmp ule i128 %67, 2147483647
  br i1 %68, label %73, label %74

69:                                               ; preds = %59
  br label %63

70:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

71:                                               ; preds = %73
  %72 = trunc i128 %66 to i32
  store i32 %72, ptr %3, align 4
  br label %51

73:                                               ; preds = %63
  br label %71

74:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

75:                                               ; preds = %79
  %76 = trunc i128 %24 to i32
  %77 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 112)
  %78 = extractvalue { i32, i1 } %77, 1
  br i1 %78, label %81, label %82

79:                                               ; preds = %55
  br label %75

80:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

81:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %75
  %83 = extractvalue { i32, i1 } %77, 0
  %84 = sub i32 31, %83
  %85 = icmp ule i32 %84, 31
  br i1 %85, label %90, label %91

86:                                               ; preds = %90
  %87 = trunc i32 %83 to i5
  %88 = zext i5 %87 to i32
  %89 = shl i32 %76, %88
  store i32 %89, ptr %3, align 4
  br label %51

90:                                               ; preds = %82
  br label %86

91:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

92:                                               ; preds = %98
  %93 = load i32, ptr %3, align 4
  br label %12

94:                                               ; preds = %51
  %95 = load i32, ptr %3, align 4
  %96 = xor i32 %95, -1
  %97 = add i32 %96, 1
  br label %12

98:                                               ; preds = %51
  br label %92
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixtfdi(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast fp128 %0 to i128
  %6 = lshr i128 %5, 127
  %7 = icmp ne i128 %6, 0
  %8 = shl i128 %5, 1
  %9 = lshr i128 %8, 113
  %10 = sub i128 2147483647, %9
  %11 = icmp ule i128 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %92, %94, %47, %28
  %13 = phi i64 [ 0, %28 ], [ %48, %47 ], [ %97, %94 ], [ %93, %92 ]
  ret i64 %13

14:                                               ; preds = %18
  %15 = trunc i128 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 16383)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i128 %5, 5192296858534827628530496329220095
  %24 = or i128 %23, 5192296858534827628530496329220096
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %43, label %44

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %46
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %31 = ptrtoint ptr %3 to i64
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %31, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %37, align 8
  %38 = ptrtoint ptr %2 to i64
  %39 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %38, i64 0)
  %40 = icmp slt i32 %22, 112
  br i1 %40, label %52, label %55

41:                                               ; preds = %43
  %42 = icmp uge i32 %22, 63
  br i1 %42, label %45, label %46

43:                                               ; preds = %26
  br label %41

44:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

45:                                               ; preds = %41
  br i1 %7, label %49, label %50

46:                                               ; preds = %41
  br label %30

47:                                               ; preds = %50, %49
  %48 = load i64, ptr %4, align 8
  br label %12

49:                                               ; preds = %45
  store i64 -9223372036854775808, ptr %4, align 8
  br label %47

50:                                               ; preds = %45
  store i64 9223372036854775807, ptr %4, align 8
  br label %47

51:                                               ; preds = %86, %71
  br i1 %7, label %94, label %98

52:                                               ; preds = %30
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %22)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %58, label %59

55:                                               ; preds = %30
  %56 = sub i128 9223372036854775807, %24
  %57 = icmp ule i128 %56, 9223372036854775807
  br i1 %57, label %79, label %80

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i32, i1 } %53, 0
  %61 = sub i32 127, %60
  %62 = icmp ule i32 %61, 127
  br i1 %62, label %69, label %70

63:                                               ; preds = %69
  %64 = trunc i32 %60 to i7
  %65 = zext i7 %64 to i128
  %66 = lshr i128 %24, %65
  %67 = sub i128 9223372036854775807, %66
  %68 = icmp ule i128 %67, 9223372036854775807
  br i1 %68, label %73, label %74

69:                                               ; preds = %59
  br label %63

70:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

71:                                               ; preds = %73
  %72 = trunc i128 %66 to i64
  store i64 %72, ptr %3, align 8
  br label %51

73:                                               ; preds = %63
  br label %71

74:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

75:                                               ; preds = %79
  %76 = trunc i128 %24 to i64
  %77 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 112)
  %78 = extractvalue { i32, i1 } %77, 1
  br i1 %78, label %81, label %82

79:                                               ; preds = %55
  br label %75

80:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

81:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %75
  %83 = extractvalue { i32, i1 } %77, 0
  %84 = sub i32 63, %83
  %85 = icmp ule i32 %84, 63
  br i1 %85, label %90, label %91

86:                                               ; preds = %90
  %87 = trunc i32 %83 to i6
  %88 = zext i6 %87 to i64
  %89 = shl i64 %76, %88
  store i64 %89, ptr %3, align 8
  br label %51

90:                                               ; preds = %82
  br label %86

91:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

92:                                               ; preds = %98
  %93 = load i64, ptr %3, align 8
  br label %12

94:                                               ; preds = %51
  %95 = load i64, ptr %3, align 8
  %96 = xor i64 %95, -1
  %97 = add i64 %96, 1
  br label %12

98:                                               ; preds = %51
  br label %92
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixtfti(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = bitcast fp128 %0 to i128
  %6 = lshr i128 %5, 127
  %7 = icmp ne i128 %6, 0
  %8 = shl i128 %5, 1
  %9 = lshr i128 %8, 113
  %10 = sub i128 2147483647, %9
  %11 = icmp ule i128 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %90, %92, %47, %28
  %13 = phi i128 [ 0, %28 ], [ %48, %47 ], [ %95, %92 ], [ %91, %90 ]
  ret i128 %13

14:                                               ; preds = %18
  %15 = trunc i128 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 16383)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i128 %5, 5192296858534827628530496329220095
  %24 = or i128 %23, 5192296858534827628530496329220096
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %43, label %44

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %46
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %31 = ptrtoint ptr %3 to i64
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %31, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %37, align 8
  %38 = ptrtoint ptr %2 to i64
  %39 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %38, i64 0)
  %40 = icmp slt i32 %22, 112
  br i1 %40, label %52, label %55

41:                                               ; preds = %43
  %42 = icmp uge i32 %22, 127
  br i1 %42, label %45, label %46

43:                                               ; preds = %26
  br label %41

44:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

45:                                               ; preds = %41
  br i1 %7, label %49, label %50

46:                                               ; preds = %41
  br label %30

47:                                               ; preds = %50, %49
  %48 = load i128, ptr %4, align 8
  br label %12

49:                                               ; preds = %45
  store i128 -170141183460469231731687303715884105728, ptr %4, align 8
  br label %47

50:                                               ; preds = %45
  store i128 170141183460469231731687303715884105727, ptr %4, align 8
  br label %47

51:                                               ; preds = %84, %71
  br i1 %7, label %92, label %96

52:                                               ; preds = %30
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %22)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %58, label %59

55:                                               ; preds = %30
  %56 = sub i128 170141183460469231731687303715884105727, %24
  %57 = icmp ule i128 %56, 170141183460469231731687303715884105727
  br i1 %57, label %77, label %78

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i32, i1 } %53, 0
  %61 = sub i32 127, %60
  %62 = icmp ule i32 %61, 127
  br i1 %62, label %69, label %70

63:                                               ; preds = %69
  %64 = trunc i32 %60 to i7
  %65 = zext i7 %64 to i128
  %66 = lshr i128 %24, %65
  %67 = sub i128 170141183460469231731687303715884105727, %66
  %68 = icmp ule i128 %67, 170141183460469231731687303715884105727
  br i1 %68, label %72, label %73

69:                                               ; preds = %59
  br label %63

70:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

71:                                               ; preds = %72
  store i128 %66, ptr %3, align 8
  br label %51

72:                                               ; preds = %63
  br label %71

73:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

74:                                               ; preds = %77
  %75 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 112)
  %76 = extractvalue { i32, i1 } %75, 1
  br i1 %76, label %79, label %80

77:                                               ; preds = %55
  br label %74

78:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

79:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %74
  %81 = extractvalue { i32, i1 } %75, 0
  %82 = sub i32 127, %81
  %83 = icmp ule i32 %82, 127
  br i1 %83, label %88, label %89

84:                                               ; preds = %88
  %85 = trunc i32 %81 to i7
  %86 = zext i7 %85 to i128
  %87 = shl i128 %24, %86
  store i128 %87, ptr %3, align 8
  br label %51

88:                                               ; preds = %80
  br label %84

89:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

90:                                               ; preds = %96
  %91 = load i128, ptr %3, align 8
  br label %12

92:                                               ; preds = %51
  %93 = load i128, ptr %3, align 8
  %94 = xor i128 %93, -1
  %95 = add i128 %94, 1
  br label %12

96:                                               ; preds = %51
  br label %90
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixxfsi(x86_fp80 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast x86_fp80 %0 to i80
  %6 = lshr i80 %5, 79
  br i1 true, label %11, label %12

7:                                                ; preds = %105, %107, %56, %37
  %8 = phi i32 [ 0, %37 ], [ %57, %56 ], [ %110, %107 ], [ %106, %105 ]
  ret i32 %8

9:                                                ; preds = %11
  %10 = icmp ne i80 %6, 0
  br i1 true, label %16, label %17

11:                                               ; preds = %1
  br label %9

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

13:                                               ; preds = %16
  %14 = shl i80 %5, 1
  %15 = lshr i80 %14, 65
  br i1 true, label %21, label %22

16:                                               ; preds = %9
  br label %13

17:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

18:                                               ; preds = %21
  %19 = sub i80 2147483647, %15
  %20 = icmp ule i80 %19, 2147483647
  br i1 %20, label %27, label %28

21:                                               ; preds = %13
  br label %18

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

23:                                               ; preds = %27
  %24 = trunc i80 %15 to i32
  %25 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %24, i32 16383)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %29, label %30

27:                                               ; preds = %18
  br label %23

28:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

29:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

30:                                               ; preds = %23
  %31 = extractvalue { i32, i1 } %25, 0
  %32 = and i80 %5, 18446744073709551615
  %33 = or i80 %32, 0
  %34 = icmp slt i32 %31, 0
  br i1 %34, label %37, label %38

35:                                               ; preds = %38
  %36 = icmp sge i32 %31, 0
  br i1 %36, label %52, label %53

37:                                               ; preds = %30
  br label %7

38:                                               ; preds = %30
  br label %35

39:                                               ; preds = %55
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %40 = ptrtoint ptr %3 to i64
  %41 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %41, align 8
  %42 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %40, ptr %42, align 8
  %43 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %43, align 8
  %44 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %46, align 8
  %47 = ptrtoint ptr %2 to i64
  %48 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %47, i64 0)
  %49 = icmp slt i32 %31, 63
  br i1 %49, label %61, label %64

50:                                               ; preds = %52
  %51 = icmp uge i32 %31, 31
  br i1 %51, label %54, label %55

52:                                               ; preds = %35
  br label %50

53:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

54:                                               ; preds = %50
  br i1 %10, label %58, label %59

55:                                               ; preds = %50
  br label %39

56:                                               ; preds = %59, %58
  %57 = load i32, ptr %4, align 4
  br label %7

58:                                               ; preds = %54
  store i32 -2147483648, ptr %4, align 4
  br label %56

59:                                               ; preds = %54
  store i32 2147483647, ptr %4, align 4
  br label %56

60:                                               ; preds = %99, %84
  br i1 %10, label %107, label %111

61:                                               ; preds = %39
  %62 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %31)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %67, label %68

64:                                               ; preds = %39
  %65 = sub i80 2147483647, %33
  %66 = icmp ule i80 %65, 2147483647
  br i1 %66, label %92, label %93

67:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %61
  %69 = extractvalue { i32, i1 } %62, 0
  %70 = sub i32 127, %69
  %71 = icmp ule i32 %70, 127
  br i1 %71, label %77, label %78

72:                                               ; preds = %77
  %73 = trunc i32 %69 to i7
  %74 = zext i7 %73 to i80
  %75 = lshr i80 %33, %74
  %76 = icmp ult i7 %73, -48
  br i1 %76, label %82, label %83

77:                                               ; preds = %68
  br label %72

78:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

79:                                               ; preds = %82
  %80 = sub i80 2147483647, %75
  %81 = icmp ule i80 %80, 2147483647
  br i1 %81, label %86, label %87

82:                                               ; preds = %72
  br label %79

83:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

84:                                               ; preds = %86
  %85 = trunc i80 %75 to i32
  store i32 %85, ptr %3, align 4
  br label %60

86:                                               ; preds = %79
  br label %84

87:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

88:                                               ; preds = %92
  %89 = trunc i80 %33 to i32
  %90 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %31, i32 63)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %94, label %95

92:                                               ; preds = %64
  br label %88

93:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

94:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

95:                                               ; preds = %88
  %96 = extractvalue { i32, i1 } %90, 0
  %97 = sub i32 31, %96
  %98 = icmp ule i32 %97, 31
  br i1 %98, label %103, label %104

99:                                               ; preds = %103
  %100 = trunc i32 %96 to i5
  %101 = zext i5 %100 to i32
  %102 = shl i32 %89, %101
  store i32 %102, ptr %3, align 4
  br label %60

103:                                              ; preds = %95
  br label %99

104:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

105:                                              ; preds = %111
  %106 = load i32, ptr %3, align 4
  br label %7

107:                                              ; preds = %60
  %108 = load i32, ptr %3, align 4
  %109 = xor i32 %108, -1
  %110 = add i32 %109, 1
  br label %7

111:                                              ; preds = %60
  br label %105
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixxfdi(x86_fp80 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast x86_fp80 %0 to i80
  %6 = lshr i80 %5, 79
  br i1 true, label %11, label %12

7:                                                ; preds = %105, %107, %56, %37
  %8 = phi i64 [ 0, %37 ], [ %57, %56 ], [ %110, %107 ], [ %106, %105 ]
  ret i64 %8

9:                                                ; preds = %11
  %10 = icmp ne i80 %6, 0
  br i1 true, label %16, label %17

11:                                               ; preds = %1
  br label %9

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

13:                                               ; preds = %16
  %14 = shl i80 %5, 1
  %15 = lshr i80 %14, 65
  br i1 true, label %21, label %22

16:                                               ; preds = %9
  br label %13

17:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

18:                                               ; preds = %21
  %19 = sub i80 2147483647, %15
  %20 = icmp ule i80 %19, 2147483647
  br i1 %20, label %27, label %28

21:                                               ; preds = %13
  br label %18

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

23:                                               ; preds = %27
  %24 = trunc i80 %15 to i32
  %25 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %24, i32 16383)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %29, label %30

27:                                               ; preds = %18
  br label %23

28:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

29:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

30:                                               ; preds = %23
  %31 = extractvalue { i32, i1 } %25, 0
  %32 = and i80 %5, 18446744073709551615
  %33 = or i80 %32, 0
  %34 = icmp slt i32 %31, 0
  br i1 %34, label %37, label %38

35:                                               ; preds = %38
  %36 = icmp sge i32 %31, 0
  br i1 %36, label %52, label %53

37:                                               ; preds = %30
  br label %7

38:                                               ; preds = %30
  br label %35

39:                                               ; preds = %55
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %40 = ptrtoint ptr %3 to i64
  %41 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %41, align 8
  %42 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %40, ptr %42, align 8
  %43 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %43, align 8
  %44 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %46, align 8
  %47 = ptrtoint ptr %2 to i64
  %48 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %47, i64 0)
  %49 = icmp slt i32 %31, 63
  br i1 %49, label %61, label %64

50:                                               ; preds = %52
  %51 = icmp uge i32 %31, 63
  br i1 %51, label %54, label %55

52:                                               ; preds = %35
  br label %50

53:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

54:                                               ; preds = %50
  br i1 %10, label %58, label %59

55:                                               ; preds = %50
  br label %39

56:                                               ; preds = %59, %58
  %57 = load i64, ptr %4, align 8
  br label %7

58:                                               ; preds = %54
  store i64 -9223372036854775808, ptr %4, align 8
  br label %56

59:                                               ; preds = %54
  store i64 9223372036854775807, ptr %4, align 8
  br label %56

60:                                               ; preds = %99, %84
  br i1 %10, label %107, label %111

61:                                               ; preds = %39
  %62 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %31)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %67, label %68

64:                                               ; preds = %39
  %65 = sub i80 9223372036854775807, %33
  %66 = icmp ule i80 %65, 9223372036854775807
  br i1 %66, label %92, label %93

67:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %61
  %69 = extractvalue { i32, i1 } %62, 0
  %70 = sub i32 127, %69
  %71 = icmp ule i32 %70, 127
  br i1 %71, label %77, label %78

72:                                               ; preds = %77
  %73 = trunc i32 %69 to i7
  %74 = zext i7 %73 to i80
  %75 = lshr i80 %33, %74
  %76 = icmp ult i7 %73, -48
  br i1 %76, label %82, label %83

77:                                               ; preds = %68
  br label %72

78:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

79:                                               ; preds = %82
  %80 = sub i80 9223372036854775807, %75
  %81 = icmp ule i80 %80, 9223372036854775807
  br i1 %81, label %86, label %87

82:                                               ; preds = %72
  br label %79

83:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

84:                                               ; preds = %86
  %85 = trunc i80 %75 to i64
  store i64 %85, ptr %3, align 8
  br label %60

86:                                               ; preds = %79
  br label %84

87:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

88:                                               ; preds = %92
  %89 = trunc i80 %33 to i64
  %90 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %31, i32 63)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %94, label %95

92:                                               ; preds = %64
  br label %88

93:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

94:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

95:                                               ; preds = %88
  %96 = extractvalue { i32, i1 } %90, 0
  %97 = sub i32 63, %96
  %98 = icmp ule i32 %97, 63
  br i1 %98, label %103, label %104

99:                                               ; preds = %103
  %100 = trunc i32 %96 to i6
  %101 = zext i6 %100 to i64
  %102 = shl i64 %89, %101
  store i64 %102, ptr %3, align 8
  br label %60

103:                                              ; preds = %95
  br label %99

104:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

105:                                              ; preds = %111
  %106 = load i64, ptr %3, align 8
  br label %7

107:                                              ; preds = %60
  %108 = load i64, ptr %3, align 8
  %109 = xor i64 %108, -1
  %110 = add i64 %109, 1
  br label %7

111:                                              ; preds = %60
  br label %105
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixxfti(x86_fp80 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = bitcast x86_fp80 %0 to i80
  %6 = lshr i80 %5, 79
  br i1 true, label %11, label %12

7:                                                ; preds = %95, %97, %56, %37
  %8 = phi i128 [ 0, %37 ], [ %57, %56 ], [ %100, %97 ], [ %96, %95 ]
  ret i128 %8

9:                                                ; preds = %11
  %10 = icmp ne i80 %6, 0
  br i1 true, label %16, label %17

11:                                               ; preds = %1
  br label %9

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

13:                                               ; preds = %16
  %14 = shl i80 %5, 1
  %15 = lshr i80 %14, 65
  br i1 true, label %21, label %22

16:                                               ; preds = %9
  br label %13

17:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

18:                                               ; preds = %21
  %19 = sub i80 2147483647, %15
  %20 = icmp ule i80 %19, 2147483647
  br i1 %20, label %27, label %28

21:                                               ; preds = %13
  br label %18

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

23:                                               ; preds = %27
  %24 = trunc i80 %15 to i32
  %25 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %24, i32 16383)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %29, label %30

27:                                               ; preds = %18
  br label %23

28:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

29:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

30:                                               ; preds = %23
  %31 = extractvalue { i32, i1 } %25, 0
  %32 = and i80 %5, 18446744073709551615
  %33 = or i80 %32, 0
  %34 = icmp slt i32 %31, 0
  br i1 %34, label %37, label %38

35:                                               ; preds = %38
  %36 = icmp sge i32 %31, 0
  br i1 %36, label %52, label %53

37:                                               ; preds = %30
  br label %7

38:                                               ; preds = %30
  br label %35

39:                                               ; preds = %55
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %40 = ptrtoint ptr %3 to i64
  %41 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %41, align 8
  %42 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %40, ptr %42, align 8
  %43 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %43, align 8
  %44 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %46, align 8
  %47 = ptrtoint ptr %2 to i64
  %48 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %47, i64 0)
  %49 = icmp slt i32 %31, 63
  br i1 %49, label %61, label %64

50:                                               ; preds = %52
  %51 = icmp uge i32 %31, 127
  br i1 %51, label %54, label %55

52:                                               ; preds = %35
  br label %50

53:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

54:                                               ; preds = %50
  br i1 %10, label %58, label %59

55:                                               ; preds = %50
  br label %39

56:                                               ; preds = %59, %58
  %57 = load i128, ptr %4, align 8
  br label %7

58:                                               ; preds = %54
  store i128 -170141183460469231731687303715884105728, ptr %4, align 8
  br label %56

59:                                               ; preds = %54
  store i128 170141183460469231731687303715884105727, ptr %4, align 8
  br label %56

60:                                               ; preds = %89, %80
  br i1 %10, label %97, label %101

61:                                               ; preds = %39
  %62 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %31)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %68, label %69

64:                                               ; preds = %39
  %65 = zext i80 %33 to i128
  %66 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %31, i32 63)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %84, label %85

68:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %61
  %70 = extractvalue { i32, i1 } %62, 0
  %71 = sub i32 127, %70
  %72 = icmp ule i32 %71, 127
  br i1 %72, label %78, label %79

73:                                               ; preds = %78
  %74 = trunc i32 %70 to i7
  %75 = zext i7 %74 to i80
  %76 = lshr i80 %33, %75
  %77 = icmp ult i7 %74, -48
  br i1 %77, label %82, label %83

78:                                               ; preds = %69
  br label %73

79:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

80:                                               ; preds = %82
  %81 = zext i80 %76 to i128
  store i128 %81, ptr %3, align 8
  br label %60

82:                                               ; preds = %73
  br label %80

83:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

84:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %64
  %86 = extractvalue { i32, i1 } %66, 0
  %87 = sub i32 127, %86
  %88 = icmp ule i32 %87, 127
  br i1 %88, label %93, label %94

89:                                               ; preds = %93
  %90 = trunc i32 %86 to i7
  %91 = zext i7 %90 to i128
  %92 = shl i128 %65, %91
  store i128 %92, ptr %3, align 8
  br label %60

93:                                               ; preds = %85
  br label %89

94:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

95:                                               ; preds = %101
  %96 = load i128, ptr %3, align 8
  br label %7

97:                                               ; preds = %60
  %98 = load i128, ptr %3, align 8
  %99 = xor i128 %98, -1
  %100 = add i128 %99, 1
  br label %7

101:                                              ; preds = %60
  br label %95
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixunshfsi(half %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = bitcast half %0 to i16
  %5 = lshr i16 %4, 15
  %6 = icmp ne i16 %5, 0
  %7 = shl i16 %4, 1
  %8 = lshr i16 %7, 11
  %9 = zext i16 %8 to i32
  %10 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 15)
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %14, label %15

12:                                               ; preds = %44, %42, %25, %21
  %13 = phi i32 [ 0, %21 ], [ 0, %25 ], [ -1, %42 ], [ %45, %44 ]
  ret i32 %13

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

15:                                               ; preds = %1
  %16 = extractvalue { i32, i1 } %10, 0
  %17 = and i16 %4, 1023
  %18 = or i16 %17, 1024
  %19 = icmp slt i32 %16, 0
  br i1 %19, label %21, label %22

20:                                               ; preds = %22
  br i1 %6, label %25, label %26

21:                                               ; preds = %15
  br label %12

22:                                               ; preds = %15
  br label %20

23:                                               ; preds = %26
  %24 = icmp sge i32 %16, 0
  br i1 %24, label %40, label %41

25:                                               ; preds = %20
  br label %12

26:                                               ; preds = %20
  br label %23

27:                                               ; preds = %43
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %28 = ptrtoint ptr %3 to i64
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %28, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %34, align 8
  %35 = ptrtoint ptr %2 to i64
  %36 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %35, i64 0)
  %37 = icmp slt i32 %16, 10
  br i1 %37, label %46, label %49

38:                                               ; preds = %40
  %39 = icmp uge i32 %16, 16
  br i1 %39, label %42, label %43

40:                                               ; preds = %23
  br label %38

41:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @66)
  unreachable

42:                                               ; preds = %38
  br label %12

43:                                               ; preds = %38
  br label %27

44:                                               ; preds = %70, %58
  %45 = load i32, ptr %3, align 4
  br label %12

46:                                               ; preds = %27
  %47 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %16)
  %48 = extractvalue { i32, i1 } %47, 1
  br i1 %48, label %53, label %54

49:                                               ; preds = %27
  %50 = zext i16 %18 to i32
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 10)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %65, label %66

53:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %46
  %55 = extractvalue { i32, i1 } %47, 0
  %56 = sub i32 15, %55
  %57 = icmp ule i32 %56, 15
  br i1 %57, label %63, label %64

58:                                               ; preds = %63
  %59 = trunc i32 %55 to i4
  %60 = zext i4 %59 to i16
  %61 = lshr i16 %18, %60
  %62 = zext i16 %61 to i32
  store i32 %62, ptr %3, align 4
  br label %44

63:                                               ; preds = %54
  br label %58

64:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @66)
  unreachable

65:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %49
  %67 = extractvalue { i32, i1 } %51, 0
  %68 = sub i32 31, %67
  %69 = icmp ule i32 %68, 31
  br i1 %69, label %74, label %75

70:                                               ; preds = %74
  %71 = trunc i32 %67 to i5
  %72 = zext i5 %71 to i32
  %73 = shl i32 %50, %72
  store i32 %73, ptr %3, align 4
  br label %44

74:                                               ; preds = %66
  br label %70

75:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @66)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixunshfdi(half %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = bitcast half %0 to i16
  %5 = lshr i16 %4, 15
  %6 = icmp ne i16 %5, 0
  %7 = shl i16 %4, 1
  %8 = lshr i16 %7, 11
  %9 = zext i16 %8 to i32
  %10 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 15)
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %14, label %15

12:                                               ; preds = %44, %42, %25, %21
  %13 = phi i64 [ 0, %21 ], [ 0, %25 ], [ -1, %42 ], [ %45, %44 ]
  ret i64 %13

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

15:                                               ; preds = %1
  %16 = extractvalue { i32, i1 } %10, 0
  %17 = and i16 %4, 1023
  %18 = or i16 %17, 1024
  %19 = icmp slt i32 %16, 0
  br i1 %19, label %21, label %22

20:                                               ; preds = %22
  br i1 %6, label %25, label %26

21:                                               ; preds = %15
  br label %12

22:                                               ; preds = %15
  br label %20

23:                                               ; preds = %26
  %24 = icmp sge i32 %16, 0
  br i1 %24, label %40, label %41

25:                                               ; preds = %20
  br label %12

26:                                               ; preds = %20
  br label %23

27:                                               ; preds = %43
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %28 = ptrtoint ptr %3 to i64
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %28, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %34, align 8
  %35 = ptrtoint ptr %2 to i64
  %36 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %35, i64 0)
  %37 = icmp slt i32 %16, 10
  br i1 %37, label %46, label %49

38:                                               ; preds = %40
  %39 = icmp uge i32 %16, 16
  br i1 %39, label %42, label %43

40:                                               ; preds = %23
  br label %38

41:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @67)
  unreachable

42:                                               ; preds = %38
  br label %12

43:                                               ; preds = %38
  br label %27

44:                                               ; preds = %70, %58
  %45 = load i64, ptr %3, align 8
  br label %12

46:                                               ; preds = %27
  %47 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %16)
  %48 = extractvalue { i32, i1 } %47, 1
  br i1 %48, label %53, label %54

49:                                               ; preds = %27
  %50 = zext i16 %18 to i64
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 10)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %65, label %66

53:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %46
  %55 = extractvalue { i32, i1 } %47, 0
  %56 = sub i32 15, %55
  %57 = icmp ule i32 %56, 15
  br i1 %57, label %63, label %64

58:                                               ; preds = %63
  %59 = trunc i32 %55 to i4
  %60 = zext i4 %59 to i16
  %61 = lshr i16 %18, %60
  %62 = zext i16 %61 to i64
  store i64 %62, ptr %3, align 8
  br label %44

63:                                               ; preds = %54
  br label %58

64:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @67)
  unreachable

65:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %49
  %67 = extractvalue { i32, i1 } %51, 0
  %68 = sub i32 63, %67
  %69 = icmp ule i32 %68, 63
  br i1 %69, label %74, label %75

70:                                               ; preds = %74
  %71 = trunc i32 %67 to i6
  %72 = zext i6 %71 to i64
  %73 = shl i64 %50, %72
  store i64 %73, ptr %3, align 8
  br label %44

74:                                               ; preds = %66
  br label %70

75:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @67)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixunshfti(half %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = bitcast half %0 to i16
  %5 = lshr i16 %4, 15
  %6 = icmp ne i16 %5, 0
  %7 = shl i16 %4, 1
  %8 = lshr i16 %7, 11
  %9 = zext i16 %8 to i32
  %10 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 15)
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %14, label %15

12:                                               ; preds = %44, %42, %25, %21
  %13 = phi i128 [ 0, %21 ], [ 0, %25 ], [ -1, %42 ], [ %45, %44 ]
  ret i128 %13

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

15:                                               ; preds = %1
  %16 = extractvalue { i32, i1 } %10, 0
  %17 = and i16 %4, 1023
  %18 = or i16 %17, 1024
  %19 = icmp slt i32 %16, 0
  br i1 %19, label %21, label %22

20:                                               ; preds = %22
  br i1 %6, label %25, label %26

21:                                               ; preds = %15
  br label %12

22:                                               ; preds = %15
  br label %20

23:                                               ; preds = %26
  %24 = icmp sge i32 %16, 0
  br i1 %24, label %40, label %41

25:                                               ; preds = %20
  br label %12

26:                                               ; preds = %20
  br label %23

27:                                               ; preds = %43
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %28 = ptrtoint ptr %3 to i64
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %28, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %34, align 8
  %35 = ptrtoint ptr %2 to i64
  %36 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %35, i64 0)
  %37 = icmp slt i32 %16, 10
  br i1 %37, label %46, label %49

38:                                               ; preds = %40
  %39 = icmp uge i32 %16, 16
  br i1 %39, label %42, label %43

40:                                               ; preds = %23
  br label %38

41:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @68)
  unreachable

42:                                               ; preds = %38
  br label %12

43:                                               ; preds = %38
  br label %27

44:                                               ; preds = %70, %58
  %45 = load i128, ptr %3, align 8
  br label %12

46:                                               ; preds = %27
  %47 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %16)
  %48 = extractvalue { i32, i1 } %47, 1
  br i1 %48, label %53, label %54

49:                                               ; preds = %27
  %50 = zext i16 %18 to i128
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 10)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %65, label %66

53:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %46
  %55 = extractvalue { i32, i1 } %47, 0
  %56 = sub i32 15, %55
  %57 = icmp ule i32 %56, 15
  br i1 %57, label %63, label %64

58:                                               ; preds = %63
  %59 = trunc i32 %55 to i4
  %60 = zext i4 %59 to i16
  %61 = lshr i16 %18, %60
  %62 = zext i16 %61 to i128
  store i128 %62, ptr %3, align 8
  br label %44

63:                                               ; preds = %54
  br label %58

64:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @68)
  unreachable

65:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %49
  %67 = extractvalue { i32, i1 } %51, 0
  %68 = sub i32 127, %67
  %69 = icmp ule i32 %68, 127
  br i1 %69, label %74, label %75

70:                                               ; preds = %74
  %71 = trunc i32 %67 to i7
  %72 = zext i7 %71 to i128
  %73 = shl i128 %50, %72
  store i128 %73, ptr %3, align 8
  br label %44

74:                                               ; preds = %66
  br label %70

75:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @68)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixunssfsi(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = bitcast float %0 to i32
  %5 = lshr i32 %4, 31
  %6 = icmp ne i32 %5, 0
  %7 = shl i32 %4, 1
  %8 = lshr i32 %7, 24
  %9 = sub i32 2147483647, %8
  %10 = icmp ule i32 %9, 2147483647
  br i1 %10, label %16, label %17

11:                                               ; preds = %48, %46, %29, %25
  %12 = phi i32 [ 0, %25 ], [ 0, %29 ], [ -1, %46 ], [ %49, %48 ]
  ret i32 %12

13:                                               ; preds = %16
  %14 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 127)
  %15 = extractvalue { i32, i1 } %14, 1
  br i1 %15, label %18, label %19

16:                                               ; preds = %1
  br label %13

17:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @69)
  unreachable

18:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

19:                                               ; preds = %13
  %20 = extractvalue { i32, i1 } %14, 0
  %21 = and i32 %4, 8388607
  %22 = or i32 %21, 8388608
  %23 = icmp slt i32 %20, 0
  br i1 %23, label %25, label %26

24:                                               ; preds = %26
  br i1 %6, label %29, label %30

25:                                               ; preds = %19
  br label %11

26:                                               ; preds = %19
  br label %24

27:                                               ; preds = %30
  %28 = icmp sge i32 %20, 0
  br i1 %28, label %44, label %45

29:                                               ; preds = %24
  br label %11

30:                                               ; preds = %24
  br label %27

31:                                               ; preds = %47
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %32 = ptrtoint ptr %3 to i64
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %32, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %38, align 8
  %39 = ptrtoint ptr %2 to i64
  %40 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %39, i64 0)
  %41 = icmp slt i32 %20, 23
  br i1 %41, label %50, label %53

42:                                               ; preds = %44
  %43 = icmp uge i32 %20, 32
  br i1 %43, label %46, label %47

44:                                               ; preds = %27
  br label %42

45:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @69)
  unreachable

46:                                               ; preds = %42
  br label %11

47:                                               ; preds = %42
  br label %31

48:                                               ; preds = %72, %61
  %49 = load i32, ptr %3, align 4
  br label %11

50:                                               ; preds = %31
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %20)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %56, label %57

53:                                               ; preds = %31
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 23)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %67, label %68

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %51, 0
  %59 = sub i32 31, %58
  %60 = icmp ule i32 %59, 31
  br i1 %60, label %65, label %66

61:                                               ; preds = %65
  %62 = trunc i32 %58 to i5
  %63 = zext i5 %62 to i32
  %64 = lshr i32 %22, %63
  store i32 %64, ptr %3, align 4
  br label %48

65:                                               ; preds = %57
  br label %61

66:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @69)
  unreachable

67:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %53
  %69 = extractvalue { i32, i1 } %54, 0
  %70 = sub i32 31, %69
  %71 = icmp ule i32 %70, 31
  br i1 %71, label %76, label %77

72:                                               ; preds = %76
  %73 = trunc i32 %69 to i5
  %74 = zext i5 %73 to i32
  %75 = shl i32 %22, %74
  store i32 %75, ptr %3, align 4
  br label %48

76:                                               ; preds = %68
  br label %72

77:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @69)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixunssfdi(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = bitcast float %0 to i32
  %5 = lshr i32 %4, 31
  %6 = icmp ne i32 %5, 0
  %7 = shl i32 %4, 1
  %8 = lshr i32 %7, 24
  %9 = sub i32 2147483647, %8
  %10 = icmp ule i32 %9, 2147483647
  br i1 %10, label %16, label %17

11:                                               ; preds = %48, %46, %29, %25
  %12 = phi i64 [ 0, %25 ], [ 0, %29 ], [ -1, %46 ], [ %49, %48 ]
  ret i64 %12

13:                                               ; preds = %16
  %14 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 127)
  %15 = extractvalue { i32, i1 } %14, 1
  br i1 %15, label %18, label %19

16:                                               ; preds = %1
  br label %13

17:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @70)
  unreachable

18:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

19:                                               ; preds = %13
  %20 = extractvalue { i32, i1 } %14, 0
  %21 = and i32 %4, 8388607
  %22 = or i32 %21, 8388608
  %23 = icmp slt i32 %20, 0
  br i1 %23, label %25, label %26

24:                                               ; preds = %26
  br i1 %6, label %29, label %30

25:                                               ; preds = %19
  br label %11

26:                                               ; preds = %19
  br label %24

27:                                               ; preds = %30
  %28 = icmp sge i32 %20, 0
  br i1 %28, label %44, label %45

29:                                               ; preds = %24
  br label %11

30:                                               ; preds = %24
  br label %27

31:                                               ; preds = %47
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %32 = ptrtoint ptr %3 to i64
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %32, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %38, align 8
  %39 = ptrtoint ptr %2 to i64
  %40 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %39, i64 0)
  %41 = icmp slt i32 %20, 23
  br i1 %41, label %50, label %53

42:                                               ; preds = %44
  %43 = icmp uge i32 %20, 64
  br i1 %43, label %46, label %47

44:                                               ; preds = %27
  br label %42

45:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @70)
  unreachable

46:                                               ; preds = %42
  br label %11

47:                                               ; preds = %42
  br label %31

48:                                               ; preds = %74, %62
  %49 = load i64, ptr %3, align 8
  br label %11

50:                                               ; preds = %31
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %20)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %57, label %58

53:                                               ; preds = %31
  %54 = zext i32 %22 to i64
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 23)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %69, label %70

57:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %50
  %59 = extractvalue { i32, i1 } %51, 0
  %60 = sub i32 31, %59
  %61 = icmp ule i32 %60, 31
  br i1 %61, label %67, label %68

62:                                               ; preds = %67
  %63 = trunc i32 %59 to i5
  %64 = zext i5 %63 to i32
  %65 = lshr i32 %22, %64
  %66 = zext i32 %65 to i64
  store i64 %66, ptr %3, align 8
  br label %48

67:                                               ; preds = %58
  br label %62

68:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @70)
  unreachable

69:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %53
  %71 = extractvalue { i32, i1 } %55, 0
  %72 = sub i32 63, %71
  %73 = icmp ule i32 %72, 63
  br i1 %73, label %78, label %79

74:                                               ; preds = %78
  %75 = trunc i32 %71 to i6
  %76 = zext i6 %75 to i64
  %77 = shl i64 %54, %76
  store i64 %77, ptr %3, align 8
  br label %48

78:                                               ; preds = %70
  br label %74

79:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @70)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixunssfti(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = bitcast float %0 to i32
  %5 = lshr i32 %4, 31
  %6 = icmp ne i32 %5, 0
  %7 = shl i32 %4, 1
  %8 = lshr i32 %7, 24
  %9 = sub i32 2147483647, %8
  %10 = icmp ule i32 %9, 2147483647
  br i1 %10, label %16, label %17

11:                                               ; preds = %48, %46, %29, %25
  %12 = phi i128 [ 0, %25 ], [ 0, %29 ], [ -1, %46 ], [ %49, %48 ]
  ret i128 %12

13:                                               ; preds = %16
  %14 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 127)
  %15 = extractvalue { i32, i1 } %14, 1
  br i1 %15, label %18, label %19

16:                                               ; preds = %1
  br label %13

17:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @71)
  unreachable

18:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

19:                                               ; preds = %13
  %20 = extractvalue { i32, i1 } %14, 0
  %21 = and i32 %4, 8388607
  %22 = or i32 %21, 8388608
  %23 = icmp slt i32 %20, 0
  br i1 %23, label %25, label %26

24:                                               ; preds = %26
  br i1 %6, label %29, label %30

25:                                               ; preds = %19
  br label %11

26:                                               ; preds = %19
  br label %24

27:                                               ; preds = %30
  %28 = icmp sge i32 %20, 0
  br i1 %28, label %44, label %45

29:                                               ; preds = %24
  br label %11

30:                                               ; preds = %24
  br label %27

31:                                               ; preds = %47
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %32 = ptrtoint ptr %3 to i64
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %32, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %38, align 8
  %39 = ptrtoint ptr %2 to i64
  %40 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %39, i64 0)
  %41 = icmp slt i32 %20, 23
  br i1 %41, label %50, label %53

42:                                               ; preds = %44
  %43 = icmp uge i32 %20, 128
  br i1 %43, label %46, label %47

44:                                               ; preds = %27
  br label %42

45:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @71)
  unreachable

46:                                               ; preds = %42
  br label %11

47:                                               ; preds = %42
  br label %31

48:                                               ; preds = %74, %62
  %49 = load i128, ptr %3, align 8
  br label %11

50:                                               ; preds = %31
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %20)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %57, label %58

53:                                               ; preds = %31
  %54 = zext i32 %22 to i128
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 23)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %69, label %70

57:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %50
  %59 = extractvalue { i32, i1 } %51, 0
  %60 = sub i32 31, %59
  %61 = icmp ule i32 %60, 31
  br i1 %61, label %67, label %68

62:                                               ; preds = %67
  %63 = trunc i32 %59 to i5
  %64 = zext i5 %63 to i32
  %65 = lshr i32 %22, %64
  %66 = zext i32 %65 to i128
  store i128 %66, ptr %3, align 8
  br label %48

67:                                               ; preds = %58
  br label %62

68:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @71)
  unreachable

69:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %53
  %71 = extractvalue { i32, i1 } %55, 0
  %72 = sub i32 127, %71
  %73 = icmp ule i32 %72, 127
  br i1 %73, label %78, label %79

74:                                               ; preds = %78
  %75 = trunc i32 %71 to i7
  %76 = zext i7 %75 to i128
  %77 = shl i128 %54, %76
  store i128 %77, ptr %3, align 8
  br label %48

78:                                               ; preds = %70
  br label %74

79:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @71)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixunsdfsi(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 63
  %6 = icmp ne i64 %5, 0
  %7 = shl i64 %4, 1
  %8 = lshr i64 %7, 53
  %9 = sub i64 2147483647, %8
  %10 = icmp ule i64 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %49, %47, %30, %26
  %12 = phi i32 [ 0, %26 ], [ 0, %30 ], [ -1, %47 ], [ %50, %49 ]
  ret i32 %12

13:                                               ; preds = %17
  %14 = trunc i64 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 1023)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i64 %4, 4503599627370495
  %23 = or i64 %22, 4503599627370496
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %45, label %46

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %48
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %33 = ptrtoint ptr %3 to i64
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %33, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %39, align 8
  %40 = ptrtoint ptr %2 to i64
  %41 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %40, i64 0)
  %42 = icmp slt i32 %21, 52
  br i1 %42, label %51, label %54

43:                                               ; preds = %45
  %44 = icmp uge i32 %21, 32
  br i1 %44, label %47, label %48

45:                                               ; preds = %28
  br label %43

46:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

47:                                               ; preds = %43
  br label %11

48:                                               ; preds = %43
  br label %32

49:                                               ; preds = %85, %70
  %50 = load i32, ptr %3, align 4
  br label %11

51:                                               ; preds = %32
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %57, label %58

54:                                               ; preds = %32
  %55 = sub i64 4294967295, %23
  %56 = icmp ule i64 %55, 4294967295
  br i1 %56, label %78, label %79

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i32, i1 } %52, 0
  %60 = sub i32 63, %59
  %61 = icmp ule i32 %60, 63
  br i1 %61, label %68, label %69

62:                                               ; preds = %68
  %63 = trunc i32 %59 to i6
  %64 = zext i6 %63 to i64
  %65 = lshr i64 %23, %64
  %66 = sub i64 4294967295, %65
  %67 = icmp ule i64 %66, 4294967295
  br i1 %67, label %72, label %73

68:                                               ; preds = %58
  br label %62

69:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

70:                                               ; preds = %72
  %71 = trunc i64 %65 to i32
  store i32 %71, ptr %3, align 4
  br label %49

72:                                               ; preds = %62
  br label %70

73:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

74:                                               ; preds = %78
  %75 = trunc i64 %23 to i32
  %76 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 52)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %54
  br label %74

79:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

80:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %74
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = sub i32 31, %82
  %84 = icmp ule i32 %83, 31
  br i1 %84, label %89, label %90

85:                                               ; preds = %89
  %86 = trunc i32 %82 to i5
  %87 = zext i5 %86 to i32
  %88 = shl i32 %75, %87
  store i32 %88, ptr %3, align 4
  br label %49

89:                                               ; preds = %81
  br label %85

90:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixunsdfdi(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 63
  %6 = icmp ne i64 %5, 0
  %7 = shl i64 %4, 1
  %8 = lshr i64 %7, 53
  %9 = sub i64 2147483647, %8
  %10 = icmp ule i64 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %49, %47, %30, %26
  %12 = phi i64 [ 0, %26 ], [ 0, %30 ], [ -1, %47 ], [ %50, %49 ]
  ret i64 %12

13:                                               ; preds = %17
  %14 = trunc i64 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 1023)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @73)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i64 %4, 4503599627370495
  %23 = or i64 %22, 4503599627370496
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %45, label %46

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %48
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %33 = ptrtoint ptr %3 to i64
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %33, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %39, align 8
  %40 = ptrtoint ptr %2 to i64
  %41 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %40, i64 0)
  %42 = icmp slt i32 %21, 52
  br i1 %42, label %51, label %54

43:                                               ; preds = %45
  %44 = icmp uge i32 %21, 64
  br i1 %44, label %47, label %48

45:                                               ; preds = %28
  br label %43

46:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @73)
  unreachable

47:                                               ; preds = %43
  br label %11

48:                                               ; preds = %43
  br label %32

49:                                               ; preds = %73, %62
  %50 = load i64, ptr %3, align 8
  br label %11

51:                                               ; preds = %32
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %57, label %58

54:                                               ; preds = %32
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 52)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %68, label %69

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i32, i1 } %52, 0
  %60 = sub i32 63, %59
  %61 = icmp ule i32 %60, 63
  br i1 %61, label %66, label %67

62:                                               ; preds = %66
  %63 = trunc i32 %59 to i6
  %64 = zext i6 %63 to i64
  %65 = lshr i64 %23, %64
  store i64 %65, ptr %3, align 8
  br label %49

66:                                               ; preds = %58
  br label %62

67:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @73)
  unreachable

68:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %54
  %70 = extractvalue { i32, i1 } %55, 0
  %71 = sub i32 63, %70
  %72 = icmp ule i32 %71, 63
  br i1 %72, label %77, label %78

73:                                               ; preds = %77
  %74 = trunc i32 %70 to i6
  %75 = zext i6 %74 to i64
  %76 = shl i64 %23, %75
  store i64 %76, ptr %3, align 8
  br label %49

77:                                               ; preds = %69
  br label %73

78:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @73)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixunsdfti(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 63
  %6 = icmp ne i64 %5, 0
  %7 = shl i64 %4, 1
  %8 = lshr i64 %7, 53
  %9 = sub i64 2147483647, %8
  %10 = icmp ule i64 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %49, %47, %30, %26
  %12 = phi i128 [ 0, %26 ], [ 0, %30 ], [ -1, %47 ], [ %50, %49 ]
  ret i128 %12

13:                                               ; preds = %17
  %14 = trunc i64 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 1023)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @74)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i64 %4, 4503599627370495
  %23 = or i64 %22, 4503599627370496
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %45, label %46

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %48
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %33 = ptrtoint ptr %3 to i64
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %33, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %39, align 8
  %40 = ptrtoint ptr %2 to i64
  %41 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %40, i64 0)
  %42 = icmp slt i32 %21, 52
  br i1 %42, label %51, label %54

43:                                               ; preds = %45
  %44 = icmp uge i32 %21, 128
  br i1 %44, label %47, label %48

45:                                               ; preds = %28
  br label %43

46:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @74)
  unreachable

47:                                               ; preds = %43
  br label %11

48:                                               ; preds = %43
  br label %32

49:                                               ; preds = %75, %63
  %50 = load i128, ptr %3, align 8
  br label %11

51:                                               ; preds = %32
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %58, label %59

54:                                               ; preds = %32
  %55 = zext i64 %23 to i128
  %56 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 52)
  %57 = extractvalue { i32, i1 } %56, 1
  br i1 %57, label %70, label %71

58:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %51
  %60 = extractvalue { i32, i1 } %52, 0
  %61 = sub i32 63, %60
  %62 = icmp ule i32 %61, 63
  br i1 %62, label %68, label %69

63:                                               ; preds = %68
  %64 = trunc i32 %60 to i6
  %65 = zext i6 %64 to i64
  %66 = lshr i64 %23, %65
  %67 = zext i64 %66 to i128
  store i128 %67, ptr %3, align 8
  br label %49

68:                                               ; preds = %59
  br label %63

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @74)
  unreachable

70:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %54
  %72 = extractvalue { i32, i1 } %56, 0
  %73 = sub i32 127, %72
  %74 = icmp ule i32 %73, 127
  br i1 %74, label %79, label %80

75:                                               ; preds = %79
  %76 = trunc i32 %72 to i7
  %77 = zext i7 %76 to i128
  %78 = shl i128 %55, %77
  store i128 %78, ptr %3, align 8
  br label %49

79:                                               ; preds = %71
  br label %75

80:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @74)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixunstfsi(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 127
  %6 = icmp ne i128 %5, 0
  %7 = shl i128 %4, 1
  %8 = lshr i128 %7, 113
  %9 = sub i128 2147483647, %8
  %10 = icmp ule i128 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %49, %47, %30, %26
  %12 = phi i32 [ 0, %26 ], [ 0, %30 ], [ -1, %47 ], [ %50, %49 ]
  ret i32 %12

13:                                               ; preds = %17
  %14 = trunc i128 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 16383)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i128 %4, 5192296858534827628530496329220095
  %23 = or i128 %22, 5192296858534827628530496329220096
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %45, label %46

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %48
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %33 = ptrtoint ptr %3 to i64
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %33, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %39, align 8
  %40 = ptrtoint ptr %2 to i64
  %41 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %40, i64 0)
  %42 = icmp slt i32 %21, 112
  br i1 %42, label %51, label %54

43:                                               ; preds = %45
  %44 = icmp uge i32 %21, 32
  br i1 %44, label %47, label %48

45:                                               ; preds = %28
  br label %43

46:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

47:                                               ; preds = %43
  br label %11

48:                                               ; preds = %43
  br label %32

49:                                               ; preds = %85, %70
  %50 = load i32, ptr %3, align 4
  br label %11

51:                                               ; preds = %32
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %57, label %58

54:                                               ; preds = %32
  %55 = sub i128 4294967295, %23
  %56 = icmp ule i128 %55, 4294967295
  br i1 %56, label %78, label %79

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i32, i1 } %52, 0
  %60 = sub i32 127, %59
  %61 = icmp ule i32 %60, 127
  br i1 %61, label %68, label %69

62:                                               ; preds = %68
  %63 = trunc i32 %59 to i7
  %64 = zext i7 %63 to i128
  %65 = lshr i128 %23, %64
  %66 = sub i128 4294967295, %65
  %67 = icmp ule i128 %66, 4294967295
  br i1 %67, label %72, label %73

68:                                               ; preds = %58
  br label %62

69:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

70:                                               ; preds = %72
  %71 = trunc i128 %65 to i32
  store i32 %71, ptr %3, align 4
  br label %49

72:                                               ; preds = %62
  br label %70

73:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

74:                                               ; preds = %78
  %75 = trunc i128 %23 to i32
  %76 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 112)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %54
  br label %74

79:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

80:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %74
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = sub i32 31, %82
  %84 = icmp ule i32 %83, 31
  br i1 %84, label %89, label %90

85:                                               ; preds = %89
  %86 = trunc i32 %82 to i5
  %87 = zext i5 %86 to i32
  %88 = shl i32 %75, %87
  store i32 %88, ptr %3, align 4
  br label %49

89:                                               ; preds = %81
  br label %85

90:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixunstfdi(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 127
  %6 = icmp ne i128 %5, 0
  %7 = shl i128 %4, 1
  %8 = lshr i128 %7, 113
  %9 = sub i128 2147483647, %8
  %10 = icmp ule i128 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %49, %47, %30, %26
  %12 = phi i64 [ 0, %26 ], [ 0, %30 ], [ -1, %47 ], [ %50, %49 ]
  ret i64 %12

13:                                               ; preds = %17
  %14 = trunc i128 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 16383)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i128 %4, 5192296858534827628530496329220095
  %23 = or i128 %22, 5192296858534827628530496329220096
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %45, label %46

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %48
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %33 = ptrtoint ptr %3 to i64
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %33, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %39, align 8
  %40 = ptrtoint ptr %2 to i64
  %41 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %40, i64 0)
  %42 = icmp slt i32 %21, 112
  br i1 %42, label %51, label %54

43:                                               ; preds = %45
  %44 = icmp uge i32 %21, 64
  br i1 %44, label %47, label %48

45:                                               ; preds = %28
  br label %43

46:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

47:                                               ; preds = %43
  br label %11

48:                                               ; preds = %43
  br label %32

49:                                               ; preds = %85, %70
  %50 = load i64, ptr %3, align 8
  br label %11

51:                                               ; preds = %32
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %57, label %58

54:                                               ; preds = %32
  %55 = sub i128 18446744073709551615, %23
  %56 = icmp ule i128 %55, 18446744073709551615
  br i1 %56, label %78, label %79

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i32, i1 } %52, 0
  %60 = sub i32 127, %59
  %61 = icmp ule i32 %60, 127
  br i1 %61, label %68, label %69

62:                                               ; preds = %68
  %63 = trunc i32 %59 to i7
  %64 = zext i7 %63 to i128
  %65 = lshr i128 %23, %64
  %66 = sub i128 18446744073709551615, %65
  %67 = icmp ule i128 %66, 18446744073709551615
  br i1 %67, label %72, label %73

68:                                               ; preds = %58
  br label %62

69:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

70:                                               ; preds = %72
  %71 = trunc i128 %65 to i64
  store i64 %71, ptr %3, align 8
  br label %49

72:                                               ; preds = %62
  br label %70

73:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

74:                                               ; preds = %78
  %75 = trunc i128 %23 to i64
  %76 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 112)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %54
  br label %74

79:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

80:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %74
  %82 = extractvalue { i32, i1 } %76, 0
  %83 = sub i32 63, %82
  %84 = icmp ule i32 %83, 63
  br i1 %84, label %89, label %90

85:                                               ; preds = %89
  %86 = trunc i32 %82 to i6
  %87 = zext i6 %86 to i64
  %88 = shl i64 %75, %87
  store i64 %88, ptr %3, align 8
  br label %49

89:                                               ; preds = %81
  br label %85

90:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixunstfti(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 127
  %6 = icmp ne i128 %5, 0
  %7 = shl i128 %4, 1
  %8 = lshr i128 %7, 113
  %9 = sub i128 2147483647, %8
  %10 = icmp ule i128 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %49, %47, %30, %26
  %12 = phi i128 [ 0, %26 ], [ 0, %30 ], [ -1, %47 ], [ %50, %49 ]
  ret i128 %12

13:                                               ; preds = %17
  %14 = trunc i128 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 16383)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @77)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i128 %4, 5192296858534827628530496329220095
  %23 = or i128 %22, 5192296858534827628530496329220096
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %45, label %46

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %48
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %33 = ptrtoint ptr %3 to i64
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %33, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %39, align 8
  %40 = ptrtoint ptr %2 to i64
  %41 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %40, i64 0)
  %42 = icmp slt i32 %21, 112
  br i1 %42, label %51, label %54

43:                                               ; preds = %45
  %44 = icmp uge i32 %21, 128
  br i1 %44, label %47, label %48

45:                                               ; preds = %28
  br label %43

46:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @77)
  unreachable

47:                                               ; preds = %43
  br label %11

48:                                               ; preds = %43
  br label %32

49:                                               ; preds = %73, %62
  %50 = load i128, ptr %3, align 8
  br label %11

51:                                               ; preds = %32
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %21)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %57, label %58

54:                                               ; preds = %32
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 112)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %68, label %69

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i32, i1 } %52, 0
  %60 = sub i32 127, %59
  %61 = icmp ule i32 %60, 127
  br i1 %61, label %66, label %67

62:                                               ; preds = %66
  %63 = trunc i32 %59 to i7
  %64 = zext i7 %63 to i128
  %65 = lshr i128 %23, %64
  store i128 %65, ptr %3, align 8
  br label %49

66:                                               ; preds = %58
  br label %62

67:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @77)
  unreachable

68:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %54
  %70 = extractvalue { i32, i1 } %55, 0
  %71 = sub i32 127, %70
  %72 = icmp ule i32 %71, 127
  br i1 %72, label %77, label %78

73:                                               ; preds = %77
  %74 = trunc i32 %70 to i7
  %75 = zext i7 %74 to i128
  %76 = shl i128 %23, %75
  store i128 %76, ptr %3, align 8
  br label %49

77:                                               ; preds = %69
  br label %73

78:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @77)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__fixunsxfsi(x86_fp80 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = bitcast x86_fp80 %0 to i80
  %5 = lshr i80 %4, 79
  br i1 true, label %10, label %11

6:                                                ; preds = %58, %56, %39, %35
  %7 = phi i32 [ 0, %35 ], [ 0, %39 ], [ -1, %56 ], [ %59, %58 ]
  ret i32 %7

8:                                                ; preds = %10
  %9 = icmp ne i80 %5, 0
  br i1 true, label %15, label %16

10:                                               ; preds = %1
  br label %8

11:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

12:                                               ; preds = %15
  %13 = shl i80 %4, 1
  %14 = lshr i80 %13, 65
  br i1 true, label %20, label %21

15:                                               ; preds = %8
  br label %12

16:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

17:                                               ; preds = %20
  %18 = sub i80 2147483647, %14
  %19 = icmp ule i80 %18, 2147483647
  br i1 %19, label %26, label %27

20:                                               ; preds = %12
  br label %17

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

22:                                               ; preds = %26
  %23 = trunc i80 %14 to i32
  %24 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 16383)
  %25 = extractvalue { i32, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %17
  br label %22

27:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

28:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %22
  %30 = extractvalue { i32, i1 } %24, 0
  %31 = and i80 %4, 18446744073709551615
  %32 = or i80 %31, 0
  %33 = icmp slt i32 %30, 0
  br i1 %33, label %35, label %36

34:                                               ; preds = %36
  br i1 %9, label %39, label %40

35:                                               ; preds = %29
  br label %6

36:                                               ; preds = %29
  br label %34

37:                                               ; preds = %40
  %38 = icmp sge i32 %30, 0
  br i1 %38, label %54, label %55

39:                                               ; preds = %34
  br label %6

40:                                               ; preds = %34
  br label %37

41:                                               ; preds = %57
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %42 = ptrtoint ptr %3 to i64
  %43 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %43, align 8
  %44 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %42, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %46, align 8
  %47 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %47, align 8
  %48 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %48, align 8
  %49 = ptrtoint ptr %2 to i64
  %50 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %49, i64 0)
  %51 = icmp slt i32 %30, 63
  br i1 %51, label %60, label %63

52:                                               ; preds = %54
  %53 = icmp uge i32 %30, 32
  br i1 %53, label %56, label %57

54:                                               ; preds = %37
  br label %52

55:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

56:                                               ; preds = %52
  br label %6

57:                                               ; preds = %52
  br label %41

58:                                               ; preds = %98, %83
  %59 = load i32, ptr %3, align 4
  br label %6

60:                                               ; preds = %41
  %61 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %30)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %66, label %67

63:                                               ; preds = %41
  %64 = sub i80 4294967295, %32
  %65 = icmp ule i80 %64, 4294967295
  br i1 %65, label %91, label %92

66:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %60
  %68 = extractvalue { i32, i1 } %61, 0
  %69 = sub i32 127, %68
  %70 = icmp ule i32 %69, 127
  br i1 %70, label %76, label %77

71:                                               ; preds = %76
  %72 = trunc i32 %68 to i7
  %73 = zext i7 %72 to i80
  %74 = lshr i80 %32, %73
  %75 = icmp ult i7 %72, -48
  br i1 %75, label %81, label %82

76:                                               ; preds = %67
  br label %71

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

78:                                               ; preds = %81
  %79 = sub i80 4294967295, %74
  %80 = icmp ule i80 %79, 4294967295
  br i1 %80, label %85, label %86

81:                                               ; preds = %71
  br label %78

82:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

83:                                               ; preds = %85
  %84 = trunc i80 %74 to i32
  store i32 %84, ptr %3, align 4
  br label %58

85:                                               ; preds = %78
  br label %83

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

87:                                               ; preds = %91
  %88 = trunc i80 %32 to i32
  %89 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 63)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %93, label %94

91:                                               ; preds = %63
  br label %87

92:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

93:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %87
  %95 = extractvalue { i32, i1 } %89, 0
  %96 = sub i32 31, %95
  %97 = icmp ule i32 %96, 31
  br i1 %97, label %102, label %103

98:                                               ; preds = %102
  %99 = trunc i32 %95 to i5
  %100 = zext i5 %99 to i32
  %101 = shl i32 %88, %100
  store i32 %101, ptr %3, align 4
  br label %58

102:                                              ; preds = %94
  br label %98

103:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__fixunsxfdi(x86_fp80 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = bitcast x86_fp80 %0 to i80
  %5 = lshr i80 %4, 79
  br i1 true, label %10, label %11

6:                                                ; preds = %58, %56, %39, %35
  %7 = phi i64 [ 0, %35 ], [ 0, %39 ], [ -1, %56 ], [ %59, %58 ]
  ret i64 %7

8:                                                ; preds = %10
  %9 = icmp ne i80 %5, 0
  br i1 true, label %15, label %16

10:                                               ; preds = %1
  br label %8

11:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

12:                                               ; preds = %15
  %13 = shl i80 %4, 1
  %14 = lshr i80 %13, 65
  br i1 true, label %20, label %21

15:                                               ; preds = %8
  br label %12

16:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

17:                                               ; preds = %20
  %18 = sub i80 2147483647, %14
  %19 = icmp ule i80 %18, 2147483647
  br i1 %19, label %26, label %27

20:                                               ; preds = %12
  br label %17

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

22:                                               ; preds = %26
  %23 = trunc i80 %14 to i32
  %24 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 16383)
  %25 = extractvalue { i32, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %17
  br label %22

27:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

28:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %22
  %30 = extractvalue { i32, i1 } %24, 0
  %31 = and i80 %4, 18446744073709551615
  %32 = or i80 %31, 0
  %33 = icmp slt i32 %30, 0
  br i1 %33, label %35, label %36

34:                                               ; preds = %36
  br i1 %9, label %39, label %40

35:                                               ; preds = %29
  br label %6

36:                                               ; preds = %29
  br label %34

37:                                               ; preds = %40
  %38 = icmp sge i32 %30, 0
  br i1 %38, label %54, label %55

39:                                               ; preds = %34
  br label %6

40:                                               ; preds = %34
  br label %37

41:                                               ; preds = %57
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %42 = ptrtoint ptr %3 to i64
  %43 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %43, align 8
  %44 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %42, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %46, align 8
  %47 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %47, align 8
  %48 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %48, align 8
  %49 = ptrtoint ptr %2 to i64
  %50 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %49, i64 0)
  %51 = icmp slt i32 %30, 63
  br i1 %51, label %60, label %63

52:                                               ; preds = %54
  %53 = icmp uge i32 %30, 64
  br i1 %53, label %56, label %57

54:                                               ; preds = %37
  br label %52

55:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

56:                                               ; preds = %52
  br label %6

57:                                               ; preds = %52
  br label %41

58:                                               ; preds = %98, %83
  %59 = load i64, ptr %3, align 8
  br label %6

60:                                               ; preds = %41
  %61 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %30)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %66, label %67

63:                                               ; preds = %41
  %64 = sub i80 18446744073709551615, %32
  %65 = icmp ule i80 %64, 18446744073709551615
  br i1 %65, label %91, label %92

66:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %60
  %68 = extractvalue { i32, i1 } %61, 0
  %69 = sub i32 127, %68
  %70 = icmp ule i32 %69, 127
  br i1 %70, label %76, label %77

71:                                               ; preds = %76
  %72 = trunc i32 %68 to i7
  %73 = zext i7 %72 to i80
  %74 = lshr i80 %32, %73
  %75 = icmp ult i7 %72, -48
  br i1 %75, label %81, label %82

76:                                               ; preds = %67
  br label %71

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

78:                                               ; preds = %81
  %79 = sub i80 18446744073709551615, %74
  %80 = icmp ule i80 %79, 18446744073709551615
  br i1 %80, label %85, label %86

81:                                               ; preds = %71
  br label %78

82:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

83:                                               ; preds = %85
  %84 = trunc i80 %74 to i64
  store i64 %84, ptr %3, align 8
  br label %58

85:                                               ; preds = %78
  br label %83

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

87:                                               ; preds = %91
  %88 = trunc i80 %32 to i64
  %89 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 63)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %93, label %94

91:                                               ; preds = %63
  br label %87

92:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

93:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %87
  %95 = extractvalue { i32, i1 } %89, 0
  %96 = sub i32 63, %95
  %97 = icmp ule i32 %96, 63
  br i1 %97, label %102, label %103

98:                                               ; preds = %102
  %99 = trunc i32 %95 to i6
  %100 = zext i6 %99 to i64
  %101 = shl i64 %88, %100
  store i64 %101, ptr %3, align 8
  br label %58

102:                                              ; preds = %94
  br label %98

103:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__fixunsxfti(x86_fp80 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = bitcast x86_fp80 %0 to i80
  %5 = lshr i80 %4, 79
  br i1 true, label %10, label %11

6:                                                ; preds = %58, %56, %39, %35
  %7 = phi i128 [ 0, %35 ], [ 0, %39 ], [ -1, %56 ], [ %59, %58 ]
  ret i128 %7

8:                                                ; preds = %10
  %9 = icmp ne i80 %5, 0
  br i1 true, label %15, label %16

10:                                               ; preds = %1
  br label %8

11:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

12:                                               ; preds = %15
  %13 = shl i80 %4, 1
  %14 = lshr i80 %13, 65
  br i1 true, label %20, label %21

15:                                               ; preds = %8
  br label %12

16:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

17:                                               ; preds = %20
  %18 = sub i80 2147483647, %14
  %19 = icmp ule i80 %18, 2147483647
  br i1 %19, label %26, label %27

20:                                               ; preds = %12
  br label %17

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

22:                                               ; preds = %26
  %23 = trunc i80 %14 to i32
  %24 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 16383)
  %25 = extractvalue { i32, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %17
  br label %22

27:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

28:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %22
  %30 = extractvalue { i32, i1 } %24, 0
  %31 = and i80 %4, 18446744073709551615
  %32 = or i80 %31, 0
  %33 = icmp slt i32 %30, 0
  br i1 %33, label %35, label %36

34:                                               ; preds = %36
  br i1 %9, label %39, label %40

35:                                               ; preds = %29
  br label %6

36:                                               ; preds = %29
  br label %34

37:                                               ; preds = %40
  %38 = icmp sge i32 %30, 0
  br i1 %38, label %54, label %55

39:                                               ; preds = %34
  br label %6

40:                                               ; preds = %34
  br label %37

41:                                               ; preds = %57
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %42 = ptrtoint ptr %3 to i64
  %43 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %43, align 8
  %44 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %42, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %46, align 8
  %47 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %47, align 8
  %48 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %48, align 8
  %49 = ptrtoint ptr %2 to i64
  %50 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %49, i64 0)
  %51 = icmp slt i32 %30, 63
  br i1 %51, label %60, label %63

52:                                               ; preds = %54
  %53 = icmp uge i32 %30, 128
  br i1 %53, label %56, label %57

54:                                               ; preds = %37
  br label %52

55:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

56:                                               ; preds = %52
  br label %6

57:                                               ; preds = %52
  br label %41

58:                                               ; preds = %88, %79
  %59 = load i128, ptr %3, align 8
  br label %6

60:                                               ; preds = %41
  %61 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %30)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %67, label %68

63:                                               ; preds = %41
  %64 = zext i80 %32 to i128
  %65 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 63)
  %66 = extractvalue { i32, i1 } %65, 1
  br i1 %66, label %83, label %84

67:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %60
  %69 = extractvalue { i32, i1 } %61, 0
  %70 = sub i32 127, %69
  %71 = icmp ule i32 %70, 127
  br i1 %71, label %77, label %78

72:                                               ; preds = %77
  %73 = trunc i32 %69 to i7
  %74 = zext i7 %73 to i80
  %75 = lshr i80 %32, %74
  %76 = icmp ult i7 %73, -48
  br i1 %76, label %81, label %82

77:                                               ; preds = %68
  br label %72

78:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

79:                                               ; preds = %81
  %80 = zext i80 %75 to i128
  store i128 %80, ptr %3, align 8
  br label %58

81:                                               ; preds = %72
  br label %79

82:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

83:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %63
  %85 = extractvalue { i32, i1 } %65, 0
  %86 = sub i32 127, %85
  %87 = icmp ule i32 %86, 127
  br i1 %87, label %92, label %93

88:                                               ; preds = %92
  %89 = trunc i32 %85 to i7
  %90 = zext i7 %89 to i128
  %91 = shl i128 %64, %90
  store i128 %91, ptr %3, align 8
  br label %58

92:                                               ; preds = %84
  br label %88

93:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__floatsihf(i32 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3612(i32 %0)
  ret half %2
}

; Function Attrs: nounwind uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3612(i32 %0) unnamed_addr #0 {
  %2 = alloca i5, align 1
  %3 = alloca i6, align 1
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i32 @math.absCast__anon_4045(i32 %0)
  store i32 %8, ptr %5, align 4
  %9 = icmp slt i32 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret half 0xH0000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i16 [ -32768, %19 ], [ 0, %20 ]
  store i16 %13, ptr %4, align 2
  %14 = load i32, ptr %5, align 4
  %15 = call i32 @llvm.ctlz.i32(i32 %14, i1 false)
  %16 = trunc i32 %15 to i6
  %17 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %16)
  %18 = extractvalue { i6, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i6, i1 } %17, 0
  %24 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %23, i6 1)
  %25 = extractvalue { i6, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i6, i1 } %24, 0
  store i6 %28, ptr %3, align 1
  %29 = load i6, ptr %3, align 1
  %30 = icmp ule i6 %29, 10
  br i1 %30, label %34, label %38

31:                                               ; preds = %102, %54
  %32 = load i6, ptr %3, align 1
  %33 = icmp ugt i6 %32, 15
  br i1 %33, label %114, label %117

34:                                               ; preds = %27
  %35 = load i6, ptr %3, align 1
  %36 = sub i6 15, %35
  %37 = icmp ule i6 %36, 15
  br i1 %37, label %46, label %47

38:                                               ; preds = %27
  %39 = load i6, ptr %3, align 1
  %40 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %39, i6 10)
  %41 = extractvalue { i6, i1 } %40, 1
  br i1 %41, label %62, label %63

42:                                               ; preds = %46
  %43 = trunc i6 %35 to i4
  %44 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %43)
  %45 = extractvalue { i4, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @125)
  unreachable

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i4, i1 } %44, 0
  %51 = load i32, ptr %5, align 4
  %52 = sub i32 65535, %51
  %53 = icmp ule i32 %52, 65535
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i32 %51 to i16
  %56 = zext i4 %50 to i16
  %57 = shl i16 %55, %56
  store i16 %57, ptr %4, align 2
  %58 = load i16, ptr %4, align 2
  %59 = xor i16 %58, 1024
  store i16 %59, ptr %4, align 2
  br label %31

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @125)
  unreachable

62:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %38
  %64 = extractvalue { i6, i1 } %40, 0
  %65 = sub i6 31, %64
  %66 = icmp ule i6 %65, 31
  br i1 %66, label %75, label %76

67:                                               ; preds = %75
  %68 = trunc i6 %64 to i5
  store i5 %68, ptr %2, align 1
  %69 = load i32, ptr %5, align 4
  %70 = call i32 @llvm.cttz.i32(i32 %69, i1 false)
  %71 = trunc i32 %70 to i6
  %72 = load i5, ptr %2, align 1
  %73 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %72, i5 1)
  %74 = extractvalue { i5, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %63
  br label %67

76:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @125)
  unreachable

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %67
  %79 = extractvalue { i5, i1 } %73, 0
  %80 = zext i5 %79 to i6
  %81 = icmp eq i6 %71, %80
  %82 = load i32, ptr %5, align 4
  %83 = load i5, ptr %2, align 1
  %84 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %83, i5 1)
  %85 = extractvalue { i5, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %78
  %88 = extractvalue { i5, i1 } %84, 0
  %89 = zext i5 %88 to i32
  %90 = lshr i32 %82, %89
  %91 = sub i32 65535, %90
  %92 = icmp ule i32 %91, 65535
  br i1 %92, label %99, label %100

93:                                               ; preds = %99
  %94 = trunc i32 %90 to i16
  %95 = xor i16 %94, 2048
  store i16 %95, ptr %4, align 2
  %96 = load i16, ptr %4, align 2
  %97 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %96, i16 1)
  %98 = extractvalue { i16, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %87
  br label %93

100:                                              ; preds = %87
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @125)
  unreachable

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %93
  %103 = extractvalue { i16, i1 } %97, 0
  %104 = lshr i16 %103, 1
  %105 = zext i1 %81 to i16
  %106 = xor i16 %105, -1
  %107 = and i16 %104, %106
  store i16 %107, ptr %4, align 2
  br label %31

108:                                              ; preds = %117
  %109 = load i16, ptr %4, align 2
  %110 = load i6, ptr %3, align 1
  %111 = zext i6 %110 to i16
  %112 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %111, i16 15)
  %113 = extractvalue { i16, i1 } %112, 1
  br i1 %113, label %118, label %119

114:                                              ; preds = %31
  %115 = or i16 %13, 31744
  %116 = bitcast i16 %115 to half
  ret half %116

117:                                              ; preds = %31
  br label %108

118:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %108
  %120 = extractvalue { i16, i1 } %112, 0
  %121 = shl i16 %120, 10
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %109, i16 %121)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %119
  %126 = extractvalue { i16, i1 } %122, 0
  store i16 %126, ptr %4, align 2
  %127 = load i16, ptr %4, align 2
  %128 = or i16 %13, %127
  %129 = bitcast i16 %128 to half
  ret half %129
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__floatsisf(i32 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3613(i32 %0)
  ret float %2
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3613(i32 %0) unnamed_addr #0 {
  %2 = alloca i5, align 1
  %3 = alloca i6, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i32 @math.absCast__anon_4045(i32 %0)
  store i32 %8, ptr %5, align 4
  %9 = icmp slt i32 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret float 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i32 [ -2147483648, %19 ], [ 0, %20 ]
  store i32 %13, ptr %4, align 4
  %14 = load i32, ptr %5, align 4
  %15 = call i32 @llvm.ctlz.i32(i32 %14, i1 false)
  %16 = trunc i32 %15 to i6
  %17 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %16)
  %18 = extractvalue { i6, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i6, i1 } %17, 0
  %24 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %23, i6 1)
  %25 = extractvalue { i6, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i6, i1 } %24, 0
  store i6 %28, ptr %3, align 1
  %29 = load i6, ptr %3, align 1
  %30 = icmp ule i6 %29, 23
  br i1 %30, label %37, label %41

31:                                               ; preds = %93, %52
  %32 = load i32, ptr %4, align 4
  %33 = load i6, ptr %3, align 1
  %34 = zext i6 %33 to i32
  %35 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %34, i32 127)
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %99, label %100

37:                                               ; preds = %27
  %38 = load i6, ptr %3, align 1
  %39 = sub i6 31, %38
  %40 = icmp ule i6 %39, 31
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i6, ptr %3, align 1
  %43 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %42, i6 23)
  %44 = extractvalue { i6, i1 } %43, 1
  br i1 %44, label %59, label %60

45:                                               ; preds = %49
  %46 = trunc i6 %38 to i5
  %47 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %46)
  %48 = extractvalue { i5, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @126)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i5, i1 } %47, 0
  %54 = load i32, ptr %5, align 4
  %55 = zext i5 %53 to i32
  %56 = shl i32 %54, %55
  store i32 %56, ptr %4, align 4
  %57 = load i32, ptr %4, align 4
  %58 = xor i32 %57, 8388608
  store i32 %58, ptr %4, align 4
  br label %31

59:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %41
  %61 = extractvalue { i6, i1 } %43, 0
  %62 = sub i6 31, %61
  %63 = icmp ule i6 %62, 31
  br i1 %63, label %72, label %73

64:                                               ; preds = %72
  %65 = trunc i6 %61 to i5
  store i5 %65, ptr %2, align 1
  %66 = load i32, ptr %5, align 4
  %67 = call i32 @llvm.cttz.i32(i32 %66, i1 false)
  %68 = trunc i32 %67 to i6
  %69 = load i5, ptr %2, align 1
  %70 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %69, i5 1)
  %71 = extractvalue { i5, i1 } %70, 1
  br i1 %71, label %74, label %75

72:                                               ; preds = %60
  br label %64

73:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @126)
  unreachable

74:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %64
  %76 = extractvalue { i5, i1 } %70, 0
  %77 = zext i5 %76 to i6
  %78 = icmp eq i6 %68, %77
  %79 = load i32, ptr %5, align 4
  %80 = load i5, ptr %2, align 1
  %81 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %80, i5 1)
  %82 = extractvalue { i5, i1 } %81, 1
  br i1 %82, label %83, label %84

83:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %75
  %85 = extractvalue { i5, i1 } %81, 0
  %86 = zext i5 %85 to i32
  %87 = lshr i32 %79, %86
  %88 = xor i32 %87, 16777216
  store i32 %88, ptr %4, align 4
  %89 = load i32, ptr %4, align 4
  %90 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %89, i32 1)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %84
  %94 = extractvalue { i32, i1 } %90, 0
  %95 = lshr i32 %94, 1
  %96 = zext i1 %78 to i32
  %97 = xor i32 %96, -1
  %98 = and i32 %95, %97
  store i32 %98, ptr %4, align 4
  br label %31

99:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %31
  %101 = extractvalue { i32, i1 } %35, 0
  %102 = shl i32 %101, 23
  %103 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %32, i32 %102)
  %104 = extractvalue { i32, i1 } %103, 1
  br i1 %104, label %105, label %106

105:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

106:                                              ; preds = %100
  %107 = extractvalue { i32, i1 } %103, 0
  store i32 %107, ptr %4, align 4
  %108 = load i32, ptr %4, align 4
  %109 = or i32 %13, %108
  %110 = bitcast i32 %109 to float
  ret float %110
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__floatsidf(i32 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3614(i32 %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3614(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %9, label %10

6:                                                ; preds = %10
  %7 = call fastcc i32 @math.absCast__anon_4045(i32 %0)
  store i32 %7, ptr %4, align 4
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %18, label %19

9:                                                ; preds = %1
  ret double 0.000000e+00

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %19, %18
  %12 = phi i64 [ -9223372036854775808, %18 ], [ 0, %19 ]
  store i64 %12, ptr %3, align 8
  %13 = load i32, ptr %4, align 4
  %14 = call i32 @llvm.ctlz.i32(i32 %13, i1 false)
  %15 = trunc i32 %14 to i6
  %16 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %15)
  %17 = extractvalue { i6, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %6
  br label %11

19:                                               ; preds = %6
  br label %11

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %11
  %22 = extractvalue { i6, i1 } %16, 0
  %23 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %22, i6 1)
  %24 = extractvalue { i6, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %21
  %27 = extractvalue { i6, i1 } %23, 0
  store i6 %27, ptr %2, align 1
  %28 = load i6, ptr %2, align 1
  %29 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %28)
  %30 = extractvalue { i6, i1 } %29, 1
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

32:                                               ; preds = %26
  %33 = extractvalue { i6, i1 } %29, 0
  %34 = load i32, ptr %4, align 4
  %35 = zext i32 %34 to i64
  %36 = zext i6 %33 to i64
  %37 = shl i64 %35, %36
  store i64 %37, ptr %3, align 8
  %38 = load i64, ptr %3, align 8
  %39 = xor i64 %38, 4503599627370496
  store i64 %39, ptr %3, align 8
  %40 = load i64, ptr %3, align 8
  %41 = load i6, ptr %2, align 1
  %42 = zext i6 %41 to i64
  %43 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %42, i64 1023)
  %44 = extractvalue { i64, i1 } %43, 1
  br i1 %44, label %45, label %46

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %32
  %47 = extractvalue { i64, i1 } %43, 0
  %48 = shl i64 %47, 52
  %49 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %40, i64 %48)
  %50 = extractvalue { i64, i1 } %49, 1
  br i1 %50, label %51, label %52

51:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %46
  %53 = extractvalue { i64, i1 } %49, 0
  store i64 %53, ptr %3, align 8
  %54 = load i64, ptr %3, align 8
  %55 = or i64 %12, %54
  %56 = bitcast i64 %55 to double
  ret double %56
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__floatsitf(i32 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3615(i32 %0)
  ret fp128 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3615(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i128, align 8
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %9, label %10

6:                                                ; preds = %10
  %7 = call fastcc i32 @math.absCast__anon_4045(i32 %0)
  store i32 %7, ptr %4, align 4
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %18, label %19

9:                                                ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %19, %18
  %12 = phi i128 [ -170141183460469231731687303715884105728, %18 ], [ 0, %19 ]
  store i128 %12, ptr %3, align 8
  %13 = load i32, ptr %4, align 4
  %14 = call i32 @llvm.ctlz.i32(i32 %13, i1 false)
  %15 = trunc i32 %14 to i6
  %16 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %15)
  %17 = extractvalue { i6, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %6
  br label %11

19:                                               ; preds = %6
  br label %11

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %11
  %22 = extractvalue { i6, i1 } %16, 0
  %23 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %22, i6 1)
  %24 = extractvalue { i6, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %21
  %27 = extractvalue { i6, i1 } %23, 0
  store i6 %27, ptr %2, align 1
  %28 = load i6, ptr %2, align 1
  %29 = zext i6 %28 to i7
  %30 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %29)
  %31 = extractvalue { i7, i1 } %30, 1
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %26
  %34 = extractvalue { i7, i1 } %30, 0
  %35 = load i32, ptr %4, align 4
  %36 = zext i32 %35 to i128
  %37 = zext i7 %34 to i128
  %38 = shl i128 %36, %37
  store i128 %38, ptr %3, align 8
  %39 = load i128, ptr %3, align 8
  %40 = xor i128 %39, 5192296858534827628530496329220096
  store i128 %40, ptr %3, align 8
  %41 = load i128, ptr %3, align 8
  %42 = load i6, ptr %2, align 1
  %43 = zext i6 %42 to i128
  %44 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %43, i128 16383)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %46, label %47

46:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %33
  %48 = extractvalue { i128, i1 } %44, 0
  %49 = shl i128 %48, 112
  %50 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %41, i128 %49)
  %51 = extractvalue { i128, i1 } %50, 1
  br i1 %51, label %52, label %53

52:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

53:                                               ; preds = %47
  %54 = extractvalue { i128, i1 } %50, 0
  store i128 %54, ptr %3, align 8
  %55 = load i128, ptr %3, align 8
  %56 = or i128 %12, %55
  %57 = bitcast i128 %56 to fp128
  ret fp128 %57
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__floatsixf(i32 %0) #0 {
  %2 = call fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3616(i32 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3616(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i80, align 8
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %9, label %10

6:                                                ; preds = %10
  %7 = call fastcc i32 @math.absCast__anon_4045(i32 %0)
  store i32 %7, ptr %4, align 4
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %18, label %19

9:                                                ; preds = %1
  ret x86_fp80 0xK00000000000000000000

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %19, %18
  %12 = phi i80 [ -604462909807314587353088, %18 ], [ 0, %19 ]
  store i80 %12, ptr %3, align 8
  %13 = load i32, ptr %4, align 4
  %14 = call i32 @llvm.ctlz.i32(i32 %13, i1 false)
  %15 = trunc i32 %14 to i6
  %16 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %15)
  %17 = extractvalue { i6, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %6
  br label %11

19:                                               ; preds = %6
  br label %11

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %11
  %22 = extractvalue { i6, i1 } %16, 0
  %23 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %22, i6 1)
  %24 = extractvalue { i6, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %21
  %27 = extractvalue { i6, i1 } %23, 0
  store i6 %27, ptr %2, align 1
  %28 = load i6, ptr %2, align 1
  %29 = zext i6 %28 to i7
  %30 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %29)
  %31 = extractvalue { i7, i1 } %30, 1
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %26
  %34 = extractvalue { i7, i1 } %30, 0
  %35 = load i32, ptr %4, align 4
  %36 = zext i32 %35 to i80
  %37 = icmp ult i7 %34, -48
  br i1 %37, label %48, label %49

38:                                               ; preds = %48
  %39 = zext i7 %34 to i80
  %40 = shl i80 %36, %39
  store i80 %40, ptr %3, align 8
  %41 = load i80, ptr %3, align 8
  %42 = xor i80 %41, 0
  store i80 %42, ptr %3, align 8
  %43 = load i80, ptr %3, align 8
  %44 = load i6, ptr %2, align 1
  %45 = zext i6 %44 to i80
  %46 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %45, i80 16383)
  %47 = extractvalue { i80, i1 } %46, 1
  br i1 %47, label %50, label %51

48:                                               ; preds = %33
  br label %38

49:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @127)
  unreachable

50:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

51:                                               ; preds = %38
  %52 = extractvalue { i80, i1 } %46, 0
  br i1 true, label %57, label %58

53:                                               ; preds = %57
  %54 = shl i80 %52, 64
  %55 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %43, i80 %54)
  %56 = extractvalue { i80, i1 } %55, 1
  br i1 %56, label %59, label %60

57:                                               ; preds = %51
  br label %53

58:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @127)
  unreachable

59:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %53
  %61 = extractvalue { i80, i1 } %55, 0
  store i80 %61, ptr %3, align 8
  %62 = load i80, ptr %3, align 8
  %63 = or i80 %62, 9223372036854775808
  store i80 %63, ptr %3, align 8
  %64 = load i80, ptr %3, align 8
  %65 = or i80 %12, %64
  %66 = bitcast i80 %65 to x86_fp80
  ret x86_fp80 %66
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__floatdihf(i64 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3617(i64 %0)
  ret half %2
}

; Function Attrs: nounwind uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3617(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i16, align 2
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i64 @math.absCast__anon_4046(i64 %0)
  store i64 %8, ptr %5, align 8
  %9 = icmp slt i64 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret half 0xH0000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i16 [ -32768, %19 ], [ 0, %20 ]
  store i16 %13, ptr %4, align 2
  %14 = load i64, ptr %5, align 8
  %15 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %16 = trunc i64 %15 to i7
  %17 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %16)
  %18 = extractvalue { i7, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i7, i1 } %17, 0
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %23, i7 1)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i7, i1 } %24, 0
  store i7 %28, ptr %3, align 1
  %29 = load i7, ptr %3, align 1
  %30 = icmp ule i7 %29, 10
  br i1 %30, label %34, label %38

31:                                               ; preds = %102, %54
  %32 = load i7, ptr %3, align 1
  %33 = icmp ugt i7 %32, 15
  br i1 %33, label %114, label %117

34:                                               ; preds = %27
  %35 = load i7, ptr %3, align 1
  %36 = sub i7 15, %35
  %37 = icmp ule i7 %36, 15
  br i1 %37, label %46, label %47

38:                                               ; preds = %27
  %39 = load i7, ptr %3, align 1
  %40 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %39, i7 10)
  %41 = extractvalue { i7, i1 } %40, 1
  br i1 %41, label %62, label %63

42:                                               ; preds = %46
  %43 = trunc i7 %35 to i4
  %44 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %43)
  %45 = extractvalue { i4, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @128)
  unreachable

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i4, i1 } %44, 0
  %51 = load i64, ptr %5, align 8
  %52 = sub i64 65535, %51
  %53 = icmp ule i64 %52, 65535
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i64 %51 to i16
  %56 = zext i4 %50 to i16
  %57 = shl i16 %55, %56
  store i16 %57, ptr %4, align 2
  %58 = load i16, ptr %4, align 2
  %59 = xor i16 %58, 1024
  store i16 %59, ptr %4, align 2
  br label %31

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @128)
  unreachable

62:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %38
  %64 = extractvalue { i7, i1 } %40, 0
  %65 = sub i7 63, %64
  %66 = icmp ule i7 %65, 63
  br i1 %66, label %75, label %76

67:                                               ; preds = %75
  %68 = trunc i7 %64 to i6
  store i6 %68, ptr %2, align 1
  %69 = load i64, ptr %5, align 8
  %70 = call i64 @llvm.cttz.i64(i64 %69, i1 false)
  %71 = trunc i64 %70 to i7
  %72 = load i6, ptr %2, align 1
  %73 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %72, i6 1)
  %74 = extractvalue { i6, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %63
  br label %67

76:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @128)
  unreachable

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %67
  %79 = extractvalue { i6, i1 } %73, 0
  %80 = zext i6 %79 to i7
  %81 = icmp eq i7 %71, %80
  %82 = load i64, ptr %5, align 8
  %83 = load i6, ptr %2, align 1
  %84 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %83, i6 1)
  %85 = extractvalue { i6, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %78
  %88 = extractvalue { i6, i1 } %84, 0
  %89 = zext i6 %88 to i64
  %90 = lshr i64 %82, %89
  %91 = sub i64 65535, %90
  %92 = icmp ule i64 %91, 65535
  br i1 %92, label %99, label %100

93:                                               ; preds = %99
  %94 = trunc i64 %90 to i16
  %95 = xor i16 %94, 2048
  store i16 %95, ptr %4, align 2
  %96 = load i16, ptr %4, align 2
  %97 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %96, i16 1)
  %98 = extractvalue { i16, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %87
  br label %93

100:                                              ; preds = %87
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @128)
  unreachable

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %93
  %103 = extractvalue { i16, i1 } %97, 0
  %104 = lshr i16 %103, 1
  %105 = zext i1 %81 to i16
  %106 = xor i16 %105, -1
  %107 = and i16 %104, %106
  store i16 %107, ptr %4, align 2
  br label %31

108:                                              ; preds = %117
  %109 = load i16, ptr %4, align 2
  %110 = load i7, ptr %3, align 1
  %111 = zext i7 %110 to i16
  %112 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %111, i16 15)
  %113 = extractvalue { i16, i1 } %112, 1
  br i1 %113, label %118, label %119

114:                                              ; preds = %31
  %115 = or i16 %13, 31744
  %116 = bitcast i16 %115 to half
  ret half %116

117:                                              ; preds = %31
  br label %108

118:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %108
  %120 = extractvalue { i16, i1 } %112, 0
  %121 = shl i16 %120, 10
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %109, i16 %121)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %119
  %126 = extractvalue { i16, i1 } %122, 0
  store i16 %126, ptr %4, align 2
  %127 = load i16, ptr %4, align 2
  %128 = or i16 %13, %127
  %129 = bitcast i16 %128 to half
  ret half %129
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__floatdisf(i64 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3618(i64 %0)
  ret float %2
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3618(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i64 @math.absCast__anon_4046(i64 %0)
  store i64 %8, ptr %5, align 8
  %9 = icmp slt i64 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret float 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i32 [ -2147483648, %19 ], [ 0, %20 ]
  store i32 %13, ptr %4, align 4
  %14 = load i64, ptr %5, align 8
  %15 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %16 = trunc i64 %15 to i7
  %17 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %16)
  %18 = extractvalue { i7, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i7, i1 } %17, 0
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %23, i7 1)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i7, i1 } %24, 0
  store i7 %28, ptr %3, align 1
  %29 = load i7, ptr %3, align 1
  %30 = icmp ule i7 %29, 23
  br i1 %30, label %37, label %41

31:                                               ; preds = %105, %57
  %32 = load i32, ptr %4, align 4
  %33 = load i7, ptr %3, align 1
  %34 = zext i7 %33 to i32
  %35 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %34, i32 127)
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %111, label %112

37:                                               ; preds = %27
  %38 = load i7, ptr %3, align 1
  %39 = sub i7 31, %38
  %40 = icmp ule i7 %39, 31
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i7, ptr %3, align 1
  %43 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %42, i7 23)
  %44 = extractvalue { i7, i1 } %43, 1
  br i1 %44, label %65, label %66

45:                                               ; preds = %49
  %46 = trunc i7 %38 to i5
  %47 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %46)
  %48 = extractvalue { i5, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @129)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i5, i1 } %47, 0
  %54 = load i64, ptr %5, align 8
  %55 = sub i64 4294967295, %54
  %56 = icmp ule i64 %55, 4294967295
  br i1 %56, label %63, label %64

57:                                               ; preds = %63
  %58 = trunc i64 %54 to i32
  %59 = zext i5 %53 to i32
  %60 = shl i32 %58, %59
  store i32 %60, ptr %4, align 4
  %61 = load i32, ptr %4, align 4
  %62 = xor i32 %61, 8388608
  store i32 %62, ptr %4, align 4
  br label %31

63:                                               ; preds = %52
  br label %57

64:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @129)
  unreachable

65:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %41
  %67 = extractvalue { i7, i1 } %43, 0
  %68 = sub i7 63, %67
  %69 = icmp ule i7 %68, 63
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i7 %67 to i6
  store i6 %71, ptr %2, align 1
  %72 = load i64, ptr %5, align 8
  %73 = call i64 @llvm.cttz.i64(i64 %72, i1 false)
  %74 = trunc i64 %73 to i7
  %75 = load i6, ptr %2, align 1
  %76 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %75, i6 1)
  %77 = extractvalue { i6, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @129)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i6, i1 } %76, 0
  %83 = zext i6 %82 to i7
  %84 = icmp eq i7 %74, %83
  %85 = load i64, ptr %5, align 8
  %86 = load i6, ptr %2, align 1
  %87 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %86, i6 1)
  %88 = extractvalue { i6, i1 } %87, 1
  br i1 %88, label %89, label %90

89:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %81
  %91 = extractvalue { i6, i1 } %87, 0
  %92 = zext i6 %91 to i64
  %93 = lshr i64 %85, %92
  %94 = sub i64 4294967295, %93
  %95 = icmp ule i64 %94, 4294967295
  br i1 %95, label %102, label %103

96:                                               ; preds = %102
  %97 = trunc i64 %93 to i32
  %98 = xor i32 %97, 16777216
  store i32 %98, ptr %4, align 4
  %99 = load i32, ptr %4, align 4
  %100 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %99, i32 1)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %104, label %105

102:                                              ; preds = %90
  br label %96

103:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @129)
  unreachable

104:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %96
  %106 = extractvalue { i32, i1 } %100, 0
  %107 = lshr i32 %106, 1
  %108 = zext i1 %84 to i32
  %109 = xor i32 %108, -1
  %110 = and i32 %107, %109
  store i32 %110, ptr %4, align 4
  br label %31

111:                                              ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %31
  %113 = extractvalue { i32, i1 } %35, 0
  %114 = shl i32 %113, 23
  %115 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %32, i32 %114)
  %116 = extractvalue { i32, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i32, i1 } %115, 0
  store i32 %119, ptr %4, align 4
  %120 = load i32, ptr %4, align 4
  %121 = or i32 %13, %120
  %122 = bitcast i32 %121 to float
  ret float %122
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__floatdidf(i64 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3619(i64 %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3619(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i64 @math.absCast__anon_4046(i64 %0)
  store i64 %8, ptr %5, align 8
  %9 = icmp slt i64 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret double 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i64 [ -9223372036854775808, %19 ], [ 0, %20 ]
  store i64 %13, ptr %4, align 8
  %14 = load i64, ptr %5, align 8
  %15 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %16 = trunc i64 %15 to i7
  %17 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %16)
  %18 = extractvalue { i7, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i7, i1 } %17, 0
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %23, i7 1)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i7, i1 } %24, 0
  store i7 %28, ptr %3, align 1
  %29 = load i7, ptr %3, align 1
  %30 = icmp ule i7 %29, 52
  br i1 %30, label %37, label %41

31:                                               ; preds = %93, %52
  %32 = load i64, ptr %4, align 8
  %33 = load i7, ptr %3, align 1
  %34 = zext i7 %33 to i64
  %35 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %34, i64 1023)
  %36 = extractvalue { i64, i1 } %35, 1
  br i1 %36, label %99, label %100

37:                                               ; preds = %27
  %38 = load i7, ptr %3, align 1
  %39 = sub i7 63, %38
  %40 = icmp ule i7 %39, 63
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i7, ptr %3, align 1
  %43 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %42, i7 52)
  %44 = extractvalue { i7, i1 } %43, 1
  br i1 %44, label %59, label %60

45:                                               ; preds = %49
  %46 = trunc i7 %38 to i6
  %47 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %46)
  %48 = extractvalue { i6, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @130)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i6, i1 } %47, 0
  %54 = load i64, ptr %5, align 8
  %55 = zext i6 %53 to i64
  %56 = shl i64 %54, %55
  store i64 %56, ptr %4, align 8
  %57 = load i64, ptr %4, align 8
  %58 = xor i64 %57, 4503599627370496
  store i64 %58, ptr %4, align 8
  br label %31

59:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %41
  %61 = extractvalue { i7, i1 } %43, 0
  %62 = sub i7 63, %61
  %63 = icmp ule i7 %62, 63
  br i1 %63, label %72, label %73

64:                                               ; preds = %72
  %65 = trunc i7 %61 to i6
  store i6 %65, ptr %2, align 1
  %66 = load i64, ptr %5, align 8
  %67 = call i64 @llvm.cttz.i64(i64 %66, i1 false)
  %68 = trunc i64 %67 to i7
  %69 = load i6, ptr %2, align 1
  %70 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %69, i6 1)
  %71 = extractvalue { i6, i1 } %70, 1
  br i1 %71, label %74, label %75

72:                                               ; preds = %60
  br label %64

73:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @130)
  unreachable

74:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %64
  %76 = extractvalue { i6, i1 } %70, 0
  %77 = zext i6 %76 to i7
  %78 = icmp eq i7 %68, %77
  %79 = load i64, ptr %5, align 8
  %80 = load i6, ptr %2, align 1
  %81 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %80, i6 1)
  %82 = extractvalue { i6, i1 } %81, 1
  br i1 %82, label %83, label %84

83:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %75
  %85 = extractvalue { i6, i1 } %81, 0
  %86 = zext i6 %85 to i64
  %87 = lshr i64 %79, %86
  %88 = xor i64 %87, 9007199254740992
  store i64 %88, ptr %4, align 8
  %89 = load i64, ptr %4, align 8
  %90 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %89, i64 1)
  %91 = extractvalue { i64, i1 } %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %84
  %94 = extractvalue { i64, i1 } %90, 0
  %95 = lshr i64 %94, 1
  %96 = zext i1 %78 to i64
  %97 = xor i64 %96, -1
  %98 = and i64 %95, %97
  store i64 %98, ptr %4, align 8
  br label %31

99:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %31
  %101 = extractvalue { i64, i1 } %35, 0
  %102 = shl i64 %101, 52
  %103 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %32, i64 %102)
  %104 = extractvalue { i64, i1 } %103, 1
  br i1 %104, label %105, label %106

105:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

106:                                              ; preds = %100
  %107 = extractvalue { i64, i1 } %103, 0
  store i64 %107, ptr %4, align 8
  %108 = load i64, ptr %4, align 8
  %109 = or i64 %13, %108
  %110 = bitcast i64 %109 to double
  ret double %110
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__floatditf(i64 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3620(i64 %0)
  ret fp128 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3620(i64 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i128, align 8
  %4 = alloca i64, align 8
  %5 = icmp eq i64 %0, 0
  br i1 %5, label %9, label %10

6:                                                ; preds = %10
  %7 = call fastcc i64 @math.absCast__anon_4046(i64 %0)
  store i64 %7, ptr %4, align 8
  %8 = icmp slt i64 %0, 0
  br i1 %8, label %18, label %19

9:                                                ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %19, %18
  %12 = phi i128 [ -170141183460469231731687303715884105728, %18 ], [ 0, %19 ]
  store i128 %12, ptr %3, align 8
  %13 = load i64, ptr %4, align 8
  %14 = call i64 @llvm.ctlz.i64(i64 %13, i1 false)
  %15 = trunc i64 %14 to i7
  %16 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %15)
  %17 = extractvalue { i7, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %6
  br label %11

19:                                               ; preds = %6
  br label %11

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %11
  %22 = extractvalue { i7, i1 } %16, 0
  %23 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %22, i7 1)
  %24 = extractvalue { i7, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %21
  %27 = extractvalue { i7, i1 } %23, 0
  store i7 %27, ptr %2, align 1
  %28 = load i7, ptr %2, align 1
  %29 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %28)
  %30 = extractvalue { i7, i1 } %29, 1
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

32:                                               ; preds = %26
  %33 = extractvalue { i7, i1 } %29, 0
  %34 = load i64, ptr %4, align 8
  %35 = zext i64 %34 to i128
  %36 = zext i7 %33 to i128
  %37 = shl i128 %35, %36
  store i128 %37, ptr %3, align 8
  %38 = load i128, ptr %3, align 8
  %39 = xor i128 %38, 5192296858534827628530496329220096
  store i128 %39, ptr %3, align 8
  %40 = load i128, ptr %3, align 8
  %41 = load i7, ptr %2, align 1
  %42 = zext i7 %41 to i128
  %43 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %42, i128 16383)
  %44 = extractvalue { i128, i1 } %43, 1
  br i1 %44, label %45, label %46

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %32
  %47 = extractvalue { i128, i1 } %43, 0
  %48 = shl i128 %47, 112
  %49 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %40, i128 %48)
  %50 = extractvalue { i128, i1 } %49, 1
  br i1 %50, label %51, label %52

51:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %46
  %53 = extractvalue { i128, i1 } %49, 0
  store i128 %53, ptr %3, align 8
  %54 = load i128, ptr %3, align 8
  %55 = or i128 %12, %54
  %56 = bitcast i128 %55 to fp128
  ret fp128 %56
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__floatdixf(i64 %0) #0 {
  %2 = call fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3621(i64 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3621(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i80, align 8
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i64 @math.absCast__anon_4046(i64 %0)
  store i64 %8, ptr %5, align 8
  %9 = icmp slt i64 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret x86_fp80 0xK00000000000000000000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i80 [ -604462909807314587353088, %19 ], [ 0, %20 ]
  store i80 %13, ptr %4, align 8
  %14 = load i64, ptr %5, align 8
  %15 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %16 = trunc i64 %15 to i7
  %17 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %16)
  %18 = extractvalue { i7, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i7, i1 } %17, 0
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %23, i7 1)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i7, i1 } %24, 0
  store i7 %28, ptr %3, align 1
  %29 = load i7, ptr %3, align 1
  %30 = icmp ule i7 %29, 63
  br i1 %30, label %37, label %41

31:                                               ; preds = %96, %51
  %32 = load i80, ptr %4, align 8
  %33 = load i7, ptr %3, align 1
  %34 = zext i7 %33 to i80
  %35 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %34, i80 16383)
  %36 = extractvalue { i80, i1 } %35, 1
  br i1 %36, label %102, label %103

37:                                               ; preds = %27
  %38 = load i7, ptr %3, align 1
  %39 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %38)
  %40 = extractvalue { i7, i1 } %39, 1
  br i1 %40, label %45, label %46

41:                                               ; preds = %27
  %42 = load i7, ptr %3, align 1
  %43 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %42, i7 63)
  %44 = extractvalue { i7, i1 } %43, 1
  br i1 %44, label %58, label %59

45:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %37
  %47 = extractvalue { i7, i1 } %39, 0
  %48 = load i64, ptr %5, align 8
  %49 = zext i64 %48 to i80
  %50 = icmp ult i7 %47, -48
  br i1 %50, label %56, label %57

51:                                               ; preds = %56
  %52 = zext i7 %47 to i80
  %53 = shl i80 %49, %52
  store i80 %53, ptr %4, align 8
  %54 = load i80, ptr %4, align 8
  %55 = xor i80 %54, 0
  store i80 %55, ptr %4, align 8
  br label %31

56:                                               ; preds = %46
  br label %51

57:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @131)
  unreachable

58:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %41
  %60 = extractvalue { i7, i1 } %43, 0
  %61 = sub i7 63, %60
  %62 = icmp ule i7 %61, 63
  br i1 %62, label %71, label %72

63:                                               ; preds = %71
  %64 = trunc i7 %60 to i6
  store i6 %64, ptr %2, align 1
  %65 = load i64, ptr %5, align 8
  %66 = call i64 @llvm.cttz.i64(i64 %65, i1 false)
  %67 = trunc i64 %66 to i7
  %68 = load i6, ptr %2, align 1
  %69 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %68, i6 1)
  %70 = extractvalue { i6, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %59
  br label %63

72:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @131)
  unreachable

73:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %63
  %75 = extractvalue { i6, i1 } %69, 0
  %76 = zext i6 %75 to i7
  %77 = icmp eq i7 %67, %76
  %78 = load i64, ptr %5, align 8
  %79 = load i6, ptr %2, align 1
  %80 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %79, i6 1)
  %81 = extractvalue { i6, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %74
  %84 = extractvalue { i6, i1 } %80, 0
  %85 = zext i6 %84 to i64
  %86 = lshr i64 %78, %85
  %87 = zext i64 %86 to i80
  %88 = xor i80 %87, 0
  store i80 %88, ptr %4, align 8
  %89 = load i80, ptr %4, align 8
  %90 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %89, i80 1)
  %91 = extractvalue { i80, i1 } %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %83
  %94 = extractvalue { i80, i1 } %90, 0
  %95 = lshr i80 %94, 1
  br i1 true, label %100, label %101

96:                                               ; preds = %100
  %97 = zext i1 %77 to i80
  %98 = xor i80 %97, -1
  %99 = and i80 %95, %98
  store i80 %99, ptr %4, align 8
  br label %31

100:                                              ; preds = %93
  br label %96

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @131)
  unreachable

102:                                              ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %31
  %104 = extractvalue { i80, i1 } %35, 0
  br i1 true, label %109, label %110

105:                                              ; preds = %109
  %106 = shl i80 %104, 64
  %107 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %32, i80 %106)
  %108 = extractvalue { i80, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %103
  br label %105

110:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @131)
  unreachable

111:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %105
  %113 = extractvalue { i80, i1 } %107, 0
  store i80 %113, ptr %4, align 8
  %114 = load i80, ptr %4, align 8
  %115 = or i80 %114, 9223372036854775808
  store i80 %115, ptr %4, align 8
  %116 = load i80, ptr %4, align 8
  %117 = or i80 %13, %116
  %118 = bitcast i80 %117 to x86_fp80
  ret x86_fp80 %118
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__floattihf(i128 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3622(i128 %0)
  ret half %2
}

; Function Attrs: nounwind uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3622(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_4047(i128 %0)
  store i128 %8, ptr %5, align 8
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret half 0xH0000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i16 [ -32768, %19 ], [ 0, %20 ]
  store i16 %13, ptr %4, align 2
  %14 = load i128, ptr %5, align 8
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 10
  br i1 %30, label %34, label %38

31:                                               ; preds = %102, %54
  %32 = load i8, ptr %3, align 1
  %33 = icmp ugt i8 %32, 15
  br i1 %33, label %114, label %117

34:                                               ; preds = %27
  %35 = load i8, ptr %3, align 1
  %36 = sub i8 15, %35
  %37 = icmp ule i8 %36, 15
  br i1 %37, label %46, label %47

38:                                               ; preds = %27
  %39 = load i8, ptr %3, align 1
  %40 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %39, i8 10)
  %41 = extractvalue { i8, i1 } %40, 1
  br i1 %41, label %62, label %63

42:                                               ; preds = %46
  %43 = trunc i8 %35 to i4
  %44 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %43)
  %45 = extractvalue { i4, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @132)
  unreachable

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i4, i1 } %44, 0
  %51 = load i128, ptr %5, align 8
  %52 = sub i128 65535, %51
  %53 = icmp ule i128 %52, 65535
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i128 %51 to i16
  %56 = zext i4 %50 to i16
  %57 = shl i16 %55, %56
  store i16 %57, ptr %4, align 2
  %58 = load i16, ptr %4, align 2
  %59 = xor i16 %58, 1024
  store i16 %59, ptr %4, align 2
  br label %31

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @132)
  unreachable

62:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %38
  %64 = extractvalue { i8, i1 } %40, 0
  %65 = sub i8 127, %64
  %66 = icmp ule i8 %65, 127
  br i1 %66, label %75, label %76

67:                                               ; preds = %75
  %68 = trunc i8 %64 to i7
  store i7 %68, ptr %2, align 1
  %69 = load i128, ptr %5, align 8
  %70 = call i128 @llvm.cttz.i128(i128 %69, i1 false)
  %71 = trunc i128 %70 to i8
  %72 = load i7, ptr %2, align 1
  %73 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %72, i7 1)
  %74 = extractvalue { i7, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %63
  br label %67

76:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @132)
  unreachable

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %67
  %79 = extractvalue { i7, i1 } %73, 0
  %80 = zext i7 %79 to i8
  %81 = icmp eq i8 %71, %80
  %82 = load i128, ptr %5, align 8
  %83 = load i7, ptr %2, align 1
  %84 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %83, i7 1)
  %85 = extractvalue { i7, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %78
  %88 = extractvalue { i7, i1 } %84, 0
  %89 = zext i7 %88 to i128
  %90 = lshr i128 %82, %89
  %91 = sub i128 65535, %90
  %92 = icmp ule i128 %91, 65535
  br i1 %92, label %99, label %100

93:                                               ; preds = %99
  %94 = trunc i128 %90 to i16
  %95 = xor i16 %94, 2048
  store i16 %95, ptr %4, align 2
  %96 = load i16, ptr %4, align 2
  %97 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %96, i16 1)
  %98 = extractvalue { i16, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %87
  br label %93

100:                                              ; preds = %87
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @132)
  unreachable

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %93
  %103 = extractvalue { i16, i1 } %97, 0
  %104 = lshr i16 %103, 1
  %105 = zext i1 %81 to i16
  %106 = xor i16 %105, -1
  %107 = and i16 %104, %106
  store i16 %107, ptr %4, align 2
  br label %31

108:                                              ; preds = %117
  %109 = load i16, ptr %4, align 2
  %110 = load i8, ptr %3, align 1
  %111 = zext i8 %110 to i16
  %112 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %111, i16 15)
  %113 = extractvalue { i16, i1 } %112, 1
  br i1 %113, label %118, label %119

114:                                              ; preds = %31
  %115 = or i16 %13, 31744
  %116 = bitcast i16 %115 to half
  ret half %116

117:                                              ; preds = %31
  br label %108

118:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %108
  %120 = extractvalue { i16, i1 } %112, 0
  %121 = shl i16 %120, 10
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %109, i16 %121)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %119
  %126 = extractvalue { i16, i1 } %122, 0
  store i16 %126, ptr %4, align 2
  %127 = load i16, ptr %4, align 2
  %128 = or i16 %13, %127
  %129 = bitcast i16 %128 to half
  ret half %129
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__floattisf(i128 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3623(i128 %0)
  ret float %2
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3623(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_4047(i128 %0)
  store i128 %8, ptr %5, align 8
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret float 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i32 [ -2147483648, %19 ], [ 0, %20 ]
  store i32 %13, ptr %4, align 4
  %14 = load i128, ptr %5, align 8
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 23
  br i1 %30, label %34, label %38

31:                                               ; preds = %102, %54
  %32 = load i8, ptr %3, align 1
  %33 = icmp ugt i8 %32, 127
  br i1 %33, label %114, label %117

34:                                               ; preds = %27
  %35 = load i8, ptr %3, align 1
  %36 = sub i8 31, %35
  %37 = icmp ule i8 %36, 31
  br i1 %37, label %46, label %47

38:                                               ; preds = %27
  %39 = load i8, ptr %3, align 1
  %40 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %39, i8 23)
  %41 = extractvalue { i8, i1 } %40, 1
  br i1 %41, label %62, label %63

42:                                               ; preds = %46
  %43 = trunc i8 %35 to i5
  %44 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %43)
  %45 = extractvalue { i5, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @133)
  unreachable

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i5, i1 } %44, 0
  %51 = load i128, ptr %5, align 8
  %52 = sub i128 4294967295, %51
  %53 = icmp ule i128 %52, 4294967295
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i128 %51 to i32
  %56 = zext i5 %50 to i32
  %57 = shl i32 %55, %56
  store i32 %57, ptr %4, align 4
  %58 = load i32, ptr %4, align 4
  %59 = xor i32 %58, 8388608
  store i32 %59, ptr %4, align 4
  br label %31

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @133)
  unreachable

62:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %38
  %64 = extractvalue { i8, i1 } %40, 0
  %65 = sub i8 127, %64
  %66 = icmp ule i8 %65, 127
  br i1 %66, label %75, label %76

67:                                               ; preds = %75
  %68 = trunc i8 %64 to i7
  store i7 %68, ptr %2, align 1
  %69 = load i128, ptr %5, align 8
  %70 = call i128 @llvm.cttz.i128(i128 %69, i1 false)
  %71 = trunc i128 %70 to i8
  %72 = load i7, ptr %2, align 1
  %73 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %72, i7 1)
  %74 = extractvalue { i7, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %63
  br label %67

76:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @133)
  unreachable

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %67
  %79 = extractvalue { i7, i1 } %73, 0
  %80 = zext i7 %79 to i8
  %81 = icmp eq i8 %71, %80
  %82 = load i128, ptr %5, align 8
  %83 = load i7, ptr %2, align 1
  %84 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %83, i7 1)
  %85 = extractvalue { i7, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %78
  %88 = extractvalue { i7, i1 } %84, 0
  %89 = zext i7 %88 to i128
  %90 = lshr i128 %82, %89
  %91 = sub i128 4294967295, %90
  %92 = icmp ule i128 %91, 4294967295
  br i1 %92, label %99, label %100

93:                                               ; preds = %99
  %94 = trunc i128 %90 to i32
  %95 = xor i32 %94, 16777216
  store i32 %95, ptr %4, align 4
  %96 = load i32, ptr %4, align 4
  %97 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %96, i32 1)
  %98 = extractvalue { i32, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %87
  br label %93

100:                                              ; preds = %87
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @133)
  unreachable

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %93
  %103 = extractvalue { i32, i1 } %97, 0
  %104 = lshr i32 %103, 1
  %105 = zext i1 %81 to i32
  %106 = xor i32 %105, -1
  %107 = and i32 %104, %106
  store i32 %107, ptr %4, align 4
  br label %31

108:                                              ; preds = %117
  %109 = load i32, ptr %4, align 4
  %110 = load i8, ptr %3, align 1
  %111 = zext i8 %110 to i32
  %112 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %111, i32 127)
  %113 = extractvalue { i32, i1 } %112, 1
  br i1 %113, label %118, label %119

114:                                              ; preds = %31
  %115 = or i32 %13, 2139095040
  %116 = bitcast i32 %115 to float
  ret float %116

117:                                              ; preds = %31
  br label %108

118:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %108
  %120 = extractvalue { i32, i1 } %112, 0
  %121 = shl i32 %120, 23
  %122 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %109, i32 %121)
  %123 = extractvalue { i32, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %119
  %126 = extractvalue { i32, i1 } %122, 0
  store i32 %126, ptr %4, align 4
  %127 = load i32, ptr %4, align 4
  %128 = or i32 %13, %127
  %129 = bitcast i32 %128 to float
  ret float %129
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__floattidf(i128 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3624(i128 %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3624(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i64, align 8
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_4047(i128 %0)
  store i128 %8, ptr %5, align 8
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret double 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i64 [ -9223372036854775808, %19 ], [ 0, %20 ]
  store i64 %13, ptr %4, align 8
  %14 = load i128, ptr %5, align 8
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 52
  br i1 %30, label %37, label %41

31:                                               ; preds = %105, %57
  %32 = load i64, ptr %4, align 8
  %33 = load i8, ptr %3, align 1
  %34 = zext i8 %33 to i64
  %35 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %34, i64 1023)
  %36 = extractvalue { i64, i1 } %35, 1
  br i1 %36, label %111, label %112

37:                                               ; preds = %27
  %38 = load i8, ptr %3, align 1
  %39 = sub i8 63, %38
  %40 = icmp ule i8 %39, 63
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i8, ptr %3, align 1
  %43 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %42, i8 52)
  %44 = extractvalue { i8, i1 } %43, 1
  br i1 %44, label %65, label %66

45:                                               ; preds = %49
  %46 = trunc i8 %38 to i6
  %47 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %46)
  %48 = extractvalue { i6, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @134)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i6, i1 } %47, 0
  %54 = load i128, ptr %5, align 8
  %55 = sub i128 18446744073709551615, %54
  %56 = icmp ule i128 %55, 18446744073709551615
  br i1 %56, label %63, label %64

57:                                               ; preds = %63
  %58 = trunc i128 %54 to i64
  %59 = zext i6 %53 to i64
  %60 = shl i64 %58, %59
  store i64 %60, ptr %4, align 8
  %61 = load i64, ptr %4, align 8
  %62 = xor i64 %61, 4503599627370496
  store i64 %62, ptr %4, align 8
  br label %31

63:                                               ; preds = %52
  br label %57

64:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @134)
  unreachable

65:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %41
  %67 = extractvalue { i8, i1 } %43, 0
  %68 = sub i8 127, %67
  %69 = icmp ule i8 %68, 127
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i8 %67 to i7
  store i7 %71, ptr %2, align 1
  %72 = load i128, ptr %5, align 8
  %73 = call i128 @llvm.cttz.i128(i128 %72, i1 false)
  %74 = trunc i128 %73 to i8
  %75 = load i7, ptr %2, align 1
  %76 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %75, i7 1)
  %77 = extractvalue { i7, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @134)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i7, i1 } %76, 0
  %83 = zext i7 %82 to i8
  %84 = icmp eq i8 %74, %83
  %85 = load i128, ptr %5, align 8
  %86 = load i7, ptr %2, align 1
  %87 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %86, i7 1)
  %88 = extractvalue { i7, i1 } %87, 1
  br i1 %88, label %89, label %90

89:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %81
  %91 = extractvalue { i7, i1 } %87, 0
  %92 = zext i7 %91 to i128
  %93 = lshr i128 %85, %92
  %94 = sub i128 18446744073709551615, %93
  %95 = icmp ule i128 %94, 18446744073709551615
  br i1 %95, label %102, label %103

96:                                               ; preds = %102
  %97 = trunc i128 %93 to i64
  %98 = xor i64 %97, 9007199254740992
  store i64 %98, ptr %4, align 8
  %99 = load i64, ptr %4, align 8
  %100 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %99, i64 1)
  %101 = extractvalue { i64, i1 } %100, 1
  br i1 %101, label %104, label %105

102:                                              ; preds = %90
  br label %96

103:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @134)
  unreachable

104:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %96
  %106 = extractvalue { i64, i1 } %100, 0
  %107 = lshr i64 %106, 1
  %108 = zext i1 %84 to i64
  %109 = xor i64 %108, -1
  %110 = and i64 %107, %109
  store i64 %110, ptr %4, align 8
  br label %31

111:                                              ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %31
  %113 = extractvalue { i64, i1 } %35, 0
  %114 = shl i64 %113, 52
  %115 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %32, i64 %114)
  %116 = extractvalue { i64, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i64, i1 } %115, 0
  store i64 %119, ptr %4, align 8
  %120 = load i64, ptr %4, align 8
  %121 = or i64 %13, %120
  %122 = bitcast i64 %121 to double
  ret double %122
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__floattitf(i128 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3625(i128 %0)
  ret fp128 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3625(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i128, align 8
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_4047(i128 %0)
  store i128 %8, ptr %5, align 8
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i128 [ -170141183460469231731687303715884105728, %19 ], [ 0, %20 ]
  store i128 %13, ptr %4, align 8
  %14 = load i128, ptr %5, align 8
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 112
  br i1 %30, label %37, label %41

31:                                               ; preds = %93, %52
  %32 = load i128, ptr %4, align 8
  %33 = load i8, ptr %3, align 1
  %34 = zext i8 %33 to i128
  %35 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %34, i128 16383)
  %36 = extractvalue { i128, i1 } %35, 1
  br i1 %36, label %99, label %100

37:                                               ; preds = %27
  %38 = load i8, ptr %3, align 1
  %39 = sub i8 127, %38
  %40 = icmp ule i8 %39, 127
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i8, ptr %3, align 1
  %43 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %42, i8 112)
  %44 = extractvalue { i8, i1 } %43, 1
  br i1 %44, label %59, label %60

45:                                               ; preds = %49
  %46 = trunc i8 %38 to i7
  %47 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %46)
  %48 = extractvalue { i7, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @135)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i7, i1 } %47, 0
  %54 = load i128, ptr %5, align 8
  %55 = zext i7 %53 to i128
  %56 = shl i128 %54, %55
  store i128 %56, ptr %4, align 8
  %57 = load i128, ptr %4, align 8
  %58 = xor i128 %57, 5192296858534827628530496329220096
  store i128 %58, ptr %4, align 8
  br label %31

59:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %41
  %61 = extractvalue { i8, i1 } %43, 0
  %62 = sub i8 127, %61
  %63 = icmp ule i8 %62, 127
  br i1 %63, label %72, label %73

64:                                               ; preds = %72
  %65 = trunc i8 %61 to i7
  store i7 %65, ptr %2, align 1
  %66 = load i128, ptr %5, align 8
  %67 = call i128 @llvm.cttz.i128(i128 %66, i1 false)
  %68 = trunc i128 %67 to i8
  %69 = load i7, ptr %2, align 1
  %70 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %69, i7 1)
  %71 = extractvalue { i7, i1 } %70, 1
  br i1 %71, label %74, label %75

72:                                               ; preds = %60
  br label %64

73:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @135)
  unreachable

74:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %64
  %76 = extractvalue { i7, i1 } %70, 0
  %77 = zext i7 %76 to i8
  %78 = icmp eq i8 %68, %77
  %79 = load i128, ptr %5, align 8
  %80 = load i7, ptr %2, align 1
  %81 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %80, i7 1)
  %82 = extractvalue { i7, i1 } %81, 1
  br i1 %82, label %83, label %84

83:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %75
  %85 = extractvalue { i7, i1 } %81, 0
  %86 = zext i7 %85 to i128
  %87 = lshr i128 %79, %86
  %88 = xor i128 %87, 10384593717069655257060992658440192
  store i128 %88, ptr %4, align 8
  %89 = load i128, ptr %4, align 8
  %90 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %89, i128 1)
  %91 = extractvalue { i128, i1 } %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %84
  %94 = extractvalue { i128, i1 } %90, 0
  %95 = lshr i128 %94, 1
  %96 = zext i1 %78 to i128
  %97 = xor i128 %96, -1
  %98 = and i128 %95, %97
  store i128 %98, ptr %4, align 8
  br label %31

99:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %31
  %101 = extractvalue { i128, i1 } %35, 0
  %102 = shl i128 %101, 112
  %103 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %32, i128 %102)
  %104 = extractvalue { i128, i1 } %103, 1
  br i1 %104, label %105, label %106

105:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

106:                                              ; preds = %100
  %107 = extractvalue { i128, i1 } %103, 0
  store i128 %107, ptr %4, align 8
  %108 = load i128, ptr %4, align 8
  %109 = or i128 %13, %108
  %110 = bitcast i128 %109 to fp128
  ret fp128 %110
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__floattixf(i128 %0) #0 {
  %2 = call fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3626(i128 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3626(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i80, align 8
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_4047(i128 %0)
  store i128 %8, ptr %5, align 8
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret x86_fp80 0xK00000000000000000000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i80 [ -604462909807314587353088, %19 ], [ 0, %20 ]
  store i80 %13, ptr %4, align 8
  %14 = load i128, ptr %5, align 8
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 63
  br i1 %30, label %37, label %41

31:                                               ; preds = %112, %62
  %32 = load i80, ptr %4, align 8
  %33 = load i8, ptr %3, align 1
  %34 = zext i8 %33 to i80
  %35 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %34, i80 16383)
  %36 = extractvalue { i80, i1 } %35, 1
  br i1 %36, label %118, label %119

37:                                               ; preds = %27
  %38 = load i8, ptr %3, align 1
  %39 = sub i8 127, %38
  %40 = icmp ule i8 %39, 127
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i8, ptr %3, align 1
  %43 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %42, i8 63)
  %44 = extractvalue { i8, i1 } %43, 1
  br i1 %44, label %69, label %70

45:                                               ; preds = %49
  %46 = trunc i8 %38 to i7
  %47 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %46)
  %48 = extractvalue { i7, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i7, i1 } %47, 0
  %54 = load i128, ptr %5, align 8
  %55 = sub i128 1208925819614629174706175, %54
  %56 = icmp ule i128 %55, 1208925819614629174706175
  br i1 %56, label %60, label %61

57:                                               ; preds = %60
  %58 = trunc i128 %54 to i80
  %59 = icmp ult i7 %53, -48
  br i1 %59, label %67, label %68

60:                                               ; preds = %52
  br label %57

61:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

62:                                               ; preds = %67
  %63 = zext i7 %53 to i80
  %64 = shl i80 %58, %63
  store i80 %64, ptr %4, align 8
  %65 = load i80, ptr %4, align 8
  %66 = xor i80 %65, 0
  store i80 %66, ptr %4, align 8
  br label %31

67:                                               ; preds = %57
  br label %62

68:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

69:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %41
  %71 = extractvalue { i8, i1 } %43, 0
  %72 = sub i8 127, %71
  %73 = icmp ule i8 %72, 127
  br i1 %73, label %82, label %83

74:                                               ; preds = %82
  %75 = trunc i8 %71 to i7
  store i7 %75, ptr %2, align 1
  %76 = load i128, ptr %5, align 8
  %77 = call i128 @llvm.cttz.i128(i128 %76, i1 false)
  %78 = trunc i128 %77 to i8
  %79 = load i7, ptr %2, align 1
  %80 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %79, i7 1)
  %81 = extractvalue { i7, i1 } %80, 1
  br i1 %81, label %84, label %85

82:                                               ; preds = %70
  br label %74

83:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

84:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %74
  %86 = extractvalue { i7, i1 } %80, 0
  %87 = zext i7 %86 to i8
  %88 = icmp eq i8 %78, %87
  %89 = load i128, ptr %5, align 8
  %90 = load i7, ptr %2, align 1
  %91 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %90, i7 1)
  %92 = extractvalue { i7, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %85
  %95 = extractvalue { i7, i1 } %91, 0
  %96 = zext i7 %95 to i128
  %97 = lshr i128 %89, %96
  %98 = sub i128 1208925819614629174706175, %97
  %99 = icmp ule i128 %98, 1208925819614629174706175
  br i1 %99, label %106, label %107

100:                                              ; preds = %106
  %101 = trunc i128 %97 to i80
  %102 = xor i80 %101, 0
  store i80 %102, ptr %4, align 8
  %103 = load i80, ptr %4, align 8
  %104 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %103, i80 1)
  %105 = extractvalue { i80, i1 } %104, 1
  br i1 %105, label %108, label %109

106:                                              ; preds = %94
  br label %100

107:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

108:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

109:                                              ; preds = %100
  %110 = extractvalue { i80, i1 } %104, 0
  %111 = lshr i80 %110, 1
  br i1 true, label %116, label %117

112:                                              ; preds = %116
  %113 = zext i1 %88 to i80
  %114 = xor i80 %113, -1
  %115 = and i80 %111, %114
  store i80 %115, ptr %4, align 8
  br label %31

116:                                              ; preds = %109
  br label %112

117:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

118:                                              ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %31
  %120 = extractvalue { i80, i1 } %35, 0
  br i1 true, label %125, label %126

121:                                              ; preds = %125
  %122 = shl i80 %120, 64
  %123 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %32, i80 %122)
  %124 = extractvalue { i80, i1 } %123, 1
  br i1 %124, label %127, label %128

125:                                              ; preds = %119
  br label %121

126:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

127:                                              ; preds = %121
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

128:                                              ; preds = %121
  %129 = extractvalue { i80, i1 } %123, 0
  store i80 %129, ptr %4, align 8
  %130 = load i80, ptr %4, align 8
  %131 = or i80 %130, 9223372036854775808
  store i80 %131, ptr %4, align 8
  %132 = load i80, ptr %4, align 8
  %133 = or i80 %13, %132
  %134 = bitcast i80 %133 to x86_fp80
  ret x86_fp80 %134
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__floatundihf(i64 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3627(i64 %0)
  ret half %2
}

; Function Attrs: nounwind uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3627(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i16, align 2
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i64 @math.absCast__anon_4048(i64 %0)
  store i64 %8, ptr %5, align 8
  store i16 0, ptr %4, align 2
  %9 = load i64, ptr %5, align 8
  %10 = call i64 @llvm.ctlz.i64(i64 %9, i1 false)
  %11 = trunc i64 %10 to i7
  %12 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %11)
  %13 = extractvalue { i7, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret half 0xH0000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i7, i1 } %12, 0
  %19 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %18, i7 1)
  %20 = extractvalue { i7, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i7, i1 } %19, 0
  store i7 %23, ptr %3, align 1
  %24 = load i7, ptr %3, align 1
  %25 = icmp ule i7 %24, 10
  br i1 %25, label %29, label %33

26:                                               ; preds = %97, %49
  %27 = load i7, ptr %3, align 1
  %28 = icmp ugt i7 %27, 15
  br i1 %28, label %109, label %110

29:                                               ; preds = %22
  %30 = load i7, ptr %3, align 1
  %31 = sub i7 15, %30
  %32 = icmp ule i7 %31, 15
  br i1 %32, label %41, label %42

33:                                               ; preds = %22
  %34 = load i7, ptr %3, align 1
  %35 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %34, i7 10)
  %36 = extractvalue { i7, i1 } %35, 1
  br i1 %36, label %57, label %58

37:                                               ; preds = %41
  %38 = trunc i7 %30 to i4
  %39 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %38)
  %40 = extractvalue { i4, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %29
  br label %37

42:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @137)
  unreachable

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i4, i1 } %39, 0
  %46 = load i64, ptr %5, align 8
  %47 = sub i64 65535, %46
  %48 = icmp ule i64 %47, 65535
  br i1 %48, label %55, label %56

49:                                               ; preds = %55
  %50 = trunc i64 %46 to i16
  %51 = zext i4 %45 to i16
  %52 = shl i16 %50, %51
  store i16 %52, ptr %4, align 2
  %53 = load i16, ptr %4, align 2
  %54 = xor i16 %53, 1024
  store i16 %54, ptr %4, align 2
  br label %26

55:                                               ; preds = %44
  br label %49

56:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @137)
  unreachable

57:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %33
  %59 = extractvalue { i7, i1 } %35, 0
  %60 = sub i7 63, %59
  %61 = icmp ule i7 %60, 63
  br i1 %61, label %70, label %71

62:                                               ; preds = %70
  %63 = trunc i7 %59 to i6
  store i6 %63, ptr %2, align 1
  %64 = load i64, ptr %5, align 8
  %65 = call i64 @llvm.cttz.i64(i64 %64, i1 false)
  %66 = trunc i64 %65 to i7
  %67 = load i6, ptr %2, align 1
  %68 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %67, i6 1)
  %69 = extractvalue { i6, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %58
  br label %62

71:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @137)
  unreachable

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %62
  %74 = extractvalue { i6, i1 } %68, 0
  %75 = zext i6 %74 to i7
  %76 = icmp eq i7 %66, %75
  %77 = load i64, ptr %5, align 8
  %78 = load i6, ptr %2, align 1
  %79 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %78, i6 1)
  %80 = extractvalue { i6, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %73
  %83 = extractvalue { i6, i1 } %79, 0
  %84 = zext i6 %83 to i64
  %85 = lshr i64 %77, %84
  %86 = sub i64 65535, %85
  %87 = icmp ule i64 %86, 65535
  br i1 %87, label %94, label %95

88:                                               ; preds = %94
  %89 = trunc i64 %85 to i16
  %90 = xor i16 %89, 2048
  store i16 %90, ptr %4, align 2
  %91 = load i16, ptr %4, align 2
  %92 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %91, i16 1)
  %93 = extractvalue { i16, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %82
  br label %88

95:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @137)
  unreachable

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i16, i1 } %92, 0
  %99 = lshr i16 %98, 1
  %100 = zext i1 %76 to i16
  %101 = xor i16 %100, -1
  %102 = and i16 %99, %101
  store i16 %102, ptr %4, align 2
  br label %26

103:                                              ; preds = %110
  %104 = load i16, ptr %4, align 2
  %105 = load i7, ptr %3, align 1
  %106 = zext i7 %105 to i16
  %107 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %106, i16 15)
  %108 = extractvalue { i16, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %26
  ret half 0xH7C00

110:                                              ; preds = %26
  br label %103

111:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %103
  %113 = extractvalue { i16, i1 } %107, 0
  %114 = shl i16 %113, 10
  %115 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %104, i16 %114)
  %116 = extractvalue { i16, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i16, i1 } %115, 0
  store i16 %119, ptr %4, align 2
  %120 = load i16, ptr %4, align 2
  %121 = or i16 0, %120
  %122 = bitcast i16 %121 to half
  ret half %122
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__floatundisf(i64 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3628(i64 %0)
  ret float %2
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3628(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i64 @math.absCast__anon_4048(i64 %0)
  store i64 %8, ptr %5, align 8
  store i32 0, ptr %4, align 4
  %9 = load i64, ptr %5, align 8
  %10 = call i64 @llvm.ctlz.i64(i64 %9, i1 false)
  %11 = trunc i64 %10 to i7
  %12 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %11)
  %13 = extractvalue { i7, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret float 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i7, i1 } %12, 0
  %19 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %18, i7 1)
  %20 = extractvalue { i7, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i7, i1 } %19, 0
  store i7 %23, ptr %3, align 1
  %24 = load i7, ptr %3, align 1
  %25 = icmp ule i7 %24, 23
  br i1 %25, label %32, label %36

26:                                               ; preds = %100, %52
  %27 = load i32, ptr %4, align 4
  %28 = load i7, ptr %3, align 1
  %29 = zext i7 %28 to i32
  %30 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %29, i32 127)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %106, label %107

32:                                               ; preds = %22
  %33 = load i7, ptr %3, align 1
  %34 = sub i7 31, %33
  %35 = icmp ule i7 %34, 31
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i7, ptr %3, align 1
  %38 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %37, i7 23)
  %39 = extractvalue { i7, i1 } %38, 1
  br i1 %39, label %60, label %61

40:                                               ; preds = %44
  %41 = trunc i7 %33 to i5
  %42 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %41)
  %43 = extractvalue { i5, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @138)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i5, i1 } %42, 0
  %49 = load i64, ptr %5, align 8
  %50 = sub i64 4294967295, %49
  %51 = icmp ule i64 %50, 4294967295
  br i1 %51, label %58, label %59

52:                                               ; preds = %58
  %53 = trunc i64 %49 to i32
  %54 = zext i5 %48 to i32
  %55 = shl i32 %53, %54
  store i32 %55, ptr %4, align 4
  %56 = load i32, ptr %4, align 4
  %57 = xor i32 %56, 8388608
  store i32 %57, ptr %4, align 4
  br label %26

58:                                               ; preds = %47
  br label %52

59:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @138)
  unreachable

60:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %36
  %62 = extractvalue { i7, i1 } %38, 0
  %63 = sub i7 63, %62
  %64 = icmp ule i7 %63, 63
  br i1 %64, label %73, label %74

65:                                               ; preds = %73
  %66 = trunc i7 %62 to i6
  store i6 %66, ptr %2, align 1
  %67 = load i64, ptr %5, align 8
  %68 = call i64 @llvm.cttz.i64(i64 %67, i1 false)
  %69 = trunc i64 %68 to i7
  %70 = load i6, ptr %2, align 1
  %71 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %70, i6 1)
  %72 = extractvalue { i6, i1 } %71, 1
  br i1 %72, label %75, label %76

73:                                               ; preds = %61
  br label %65

74:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @138)
  unreachable

75:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %65
  %77 = extractvalue { i6, i1 } %71, 0
  %78 = zext i6 %77 to i7
  %79 = icmp eq i7 %69, %78
  %80 = load i64, ptr %5, align 8
  %81 = load i6, ptr %2, align 1
  %82 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %81, i6 1)
  %83 = extractvalue { i6, i1 } %82, 1
  br i1 %83, label %84, label %85

84:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %76
  %86 = extractvalue { i6, i1 } %82, 0
  %87 = zext i6 %86 to i64
  %88 = lshr i64 %80, %87
  %89 = sub i64 4294967295, %88
  %90 = icmp ule i64 %89, 4294967295
  br i1 %90, label %97, label %98

91:                                               ; preds = %97
  %92 = trunc i64 %88 to i32
  %93 = xor i32 %92, 16777216
  store i32 %93, ptr %4, align 4
  %94 = load i32, ptr %4, align 4
  %95 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %94, i32 1)
  %96 = extractvalue { i32, i1 } %95, 1
  br i1 %96, label %99, label %100

97:                                               ; preds = %85
  br label %91

98:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @138)
  unreachable

99:                                               ; preds = %91
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %91
  %101 = extractvalue { i32, i1 } %95, 0
  %102 = lshr i32 %101, 1
  %103 = zext i1 %79 to i32
  %104 = xor i32 %103, -1
  %105 = and i32 %102, %104
  store i32 %105, ptr %4, align 4
  br label %26

106:                                              ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %26
  %108 = extractvalue { i32, i1 } %30, 0
  %109 = shl i32 %108, 23
  %110 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %27, i32 %109)
  %111 = extractvalue { i32, i1 } %110, 1
  br i1 %111, label %112, label %113

112:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %107
  %114 = extractvalue { i32, i1 } %110, 0
  store i32 %114, ptr %4, align 4
  %115 = load i32, ptr %4, align 4
  %116 = or i32 0, %115
  %117 = bitcast i32 %116 to float
  ret float %117
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__floatundidf(i64 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3629(i64 %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3629(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i64 @math.absCast__anon_4048(i64 %0)
  store i64 %8, ptr %5, align 8
  store i64 0, ptr %4, align 8
  %9 = load i64, ptr %5, align 8
  %10 = call i64 @llvm.ctlz.i64(i64 %9, i1 false)
  %11 = trunc i64 %10 to i7
  %12 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %11)
  %13 = extractvalue { i7, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret double 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i7, i1 } %12, 0
  %19 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %18, i7 1)
  %20 = extractvalue { i7, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i7, i1 } %19, 0
  store i7 %23, ptr %3, align 1
  %24 = load i7, ptr %3, align 1
  %25 = icmp ule i7 %24, 52
  br i1 %25, label %32, label %36

26:                                               ; preds = %88, %47
  %27 = load i64, ptr %4, align 8
  %28 = load i7, ptr %3, align 1
  %29 = zext i7 %28 to i64
  %30 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %29, i64 1023)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %94, label %95

32:                                               ; preds = %22
  %33 = load i7, ptr %3, align 1
  %34 = sub i7 63, %33
  %35 = icmp ule i7 %34, 63
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i7, ptr %3, align 1
  %38 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %37, i7 52)
  %39 = extractvalue { i7, i1 } %38, 1
  br i1 %39, label %54, label %55

40:                                               ; preds = %44
  %41 = trunc i7 %33 to i6
  %42 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %41)
  %43 = extractvalue { i6, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @139)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i6, i1 } %42, 0
  %49 = load i64, ptr %5, align 8
  %50 = zext i6 %48 to i64
  %51 = shl i64 %49, %50
  store i64 %51, ptr %4, align 8
  %52 = load i64, ptr %4, align 8
  %53 = xor i64 %52, 4503599627370496
  store i64 %53, ptr %4, align 8
  br label %26

54:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %36
  %56 = extractvalue { i7, i1 } %38, 0
  %57 = sub i7 63, %56
  %58 = icmp ule i7 %57, 63
  br i1 %58, label %67, label %68

59:                                               ; preds = %67
  %60 = trunc i7 %56 to i6
  store i6 %60, ptr %2, align 1
  %61 = load i64, ptr %5, align 8
  %62 = call i64 @llvm.cttz.i64(i64 %61, i1 false)
  %63 = trunc i64 %62 to i7
  %64 = load i6, ptr %2, align 1
  %65 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %64, i6 1)
  %66 = extractvalue { i6, i1 } %65, 1
  br i1 %66, label %69, label %70

67:                                               ; preds = %55
  br label %59

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @139)
  unreachable

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %59
  %71 = extractvalue { i6, i1 } %65, 0
  %72 = zext i6 %71 to i7
  %73 = icmp eq i7 %63, %72
  %74 = load i64, ptr %5, align 8
  %75 = load i6, ptr %2, align 1
  %76 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %75, i6 1)
  %77 = extractvalue { i6, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %70
  %80 = extractvalue { i6, i1 } %76, 0
  %81 = zext i6 %80 to i64
  %82 = lshr i64 %74, %81
  %83 = xor i64 %82, 9007199254740992
  store i64 %83, ptr %4, align 8
  %84 = load i64, ptr %4, align 8
  %85 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %84, i64 1)
  %86 = extractvalue { i64, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %79
  %89 = extractvalue { i64, i1 } %85, 0
  %90 = lshr i64 %89, 1
  %91 = zext i1 %73 to i64
  %92 = xor i64 %91, -1
  %93 = and i64 %90, %92
  store i64 %93, ptr %4, align 8
  br label %26

94:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

95:                                               ; preds = %26
  %96 = extractvalue { i64, i1 } %30, 0
  %97 = shl i64 %96, 52
  %98 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %27, i64 %97)
  %99 = extractvalue { i64, i1 } %98, 1
  br i1 %99, label %100, label %101

100:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %95
  %102 = extractvalue { i64, i1 } %98, 0
  store i64 %102, ptr %4, align 8
  %103 = load i64, ptr %4, align 8
  %104 = or i64 0, %103
  %105 = bitcast i64 %104 to double
  ret double %105
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__floatunditf(i64 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3630(i64 %0)
  ret fp128 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3630(i64 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i128, align 8
  %4 = alloca i64, align 8
  %5 = icmp eq i64 %0, 0
  br i1 %5, label %13, label %14

6:                                                ; preds = %14
  %7 = call fastcc i64 @math.absCast__anon_4048(i64 %0)
  store i64 %7, ptr %4, align 8
  store i128 0, ptr %3, align 8
  %8 = load i64, ptr %4, align 8
  %9 = call i64 @llvm.ctlz.i64(i64 %8, i1 false)
  %10 = trunc i64 %9 to i7
  %11 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %10)
  %12 = extractvalue { i7, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

14:                                               ; preds = %1
  br label %6

15:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %6
  %17 = extractvalue { i7, i1 } %11, 0
  %18 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %17, i7 1)
  %19 = extractvalue { i7, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i7, i1 } %18, 0
  store i7 %22, ptr %2, align 1
  %23 = load i7, ptr %2, align 1
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %23)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %21
  %28 = extractvalue { i7, i1 } %24, 0
  %29 = load i64, ptr %4, align 8
  %30 = zext i64 %29 to i128
  %31 = zext i7 %28 to i128
  %32 = shl i128 %30, %31
  store i128 %32, ptr %3, align 8
  %33 = load i128, ptr %3, align 8
  %34 = xor i128 %33, 5192296858534827628530496329220096
  store i128 %34, ptr %3, align 8
  %35 = load i128, ptr %3, align 8
  %36 = load i7, ptr %2, align 1
  %37 = zext i7 %36 to i128
  %38 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %37, i128 16383)
  %39 = extractvalue { i128, i1 } %38, 1
  br i1 %39, label %40, label %41

40:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %27
  %42 = extractvalue { i128, i1 } %38, 0
  %43 = shl i128 %42, 112
  %44 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %35, i128 %43)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %41
  %48 = extractvalue { i128, i1 } %44, 0
  store i128 %48, ptr %3, align 8
  %49 = load i128, ptr %3, align 8
  %50 = or i128 0, %49
  %51 = bitcast i128 %50 to fp128
  ret fp128 %51
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__floatundixf(i64 %0) #0 {
  %2 = call fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3631(i64 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3631(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i80, align 8
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i64 @math.absCast__anon_4048(i64 %0)
  store i64 %8, ptr %5, align 8
  store i80 0, ptr %4, align 8
  %9 = load i64, ptr %5, align 8
  %10 = call i64 @llvm.ctlz.i64(i64 %9, i1 false)
  %11 = trunc i64 %10 to i7
  %12 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %11)
  %13 = extractvalue { i7, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret x86_fp80 0xK00000000000000000000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i7, i1 } %12, 0
  %19 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %18, i7 1)
  %20 = extractvalue { i7, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i7, i1 } %19, 0
  store i7 %23, ptr %3, align 1
  %24 = load i7, ptr %3, align 1
  %25 = icmp ule i7 %24, 63
  br i1 %25, label %32, label %36

26:                                               ; preds = %91, %46
  %27 = load i80, ptr %4, align 8
  %28 = load i7, ptr %3, align 1
  %29 = zext i7 %28 to i80
  %30 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %29, i80 16383)
  %31 = extractvalue { i80, i1 } %30, 1
  br i1 %31, label %97, label %98

32:                                               ; preds = %22
  %33 = load i7, ptr %3, align 1
  %34 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %33)
  %35 = extractvalue { i7, i1 } %34, 1
  br i1 %35, label %40, label %41

36:                                               ; preds = %22
  %37 = load i7, ptr %3, align 1
  %38 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %37, i7 63)
  %39 = extractvalue { i7, i1 } %38, 1
  br i1 %39, label %53, label %54

40:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %32
  %42 = extractvalue { i7, i1 } %34, 0
  %43 = load i64, ptr %5, align 8
  %44 = zext i64 %43 to i80
  %45 = icmp ult i7 %42, -48
  br i1 %45, label %51, label %52

46:                                               ; preds = %51
  %47 = zext i7 %42 to i80
  %48 = shl i80 %44, %47
  store i80 %48, ptr %4, align 8
  %49 = load i80, ptr %4, align 8
  %50 = xor i80 %49, 0
  store i80 %50, ptr %4, align 8
  br label %26

51:                                               ; preds = %41
  br label %46

52:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @140)
  unreachable

53:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %36
  %55 = extractvalue { i7, i1 } %38, 0
  %56 = sub i7 63, %55
  %57 = icmp ule i7 %56, 63
  br i1 %57, label %66, label %67

58:                                               ; preds = %66
  %59 = trunc i7 %55 to i6
  store i6 %59, ptr %2, align 1
  %60 = load i64, ptr %5, align 8
  %61 = call i64 @llvm.cttz.i64(i64 %60, i1 false)
  %62 = trunc i64 %61 to i7
  %63 = load i6, ptr %2, align 1
  %64 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %63, i6 1)
  %65 = extractvalue { i6, i1 } %64, 1
  br i1 %65, label %68, label %69

66:                                               ; preds = %54
  br label %58

67:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @140)
  unreachable

68:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %58
  %70 = extractvalue { i6, i1 } %64, 0
  %71 = zext i6 %70 to i7
  %72 = icmp eq i7 %62, %71
  %73 = load i64, ptr %5, align 8
  %74 = load i6, ptr %2, align 1
  %75 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %74, i6 1)
  %76 = extractvalue { i6, i1 } %75, 1
  br i1 %76, label %77, label %78

77:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %69
  %79 = extractvalue { i6, i1 } %75, 0
  %80 = zext i6 %79 to i64
  %81 = lshr i64 %73, %80
  %82 = zext i64 %81 to i80
  %83 = xor i80 %82, 0
  store i80 %83, ptr %4, align 8
  %84 = load i80, ptr %4, align 8
  %85 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %84, i80 1)
  %86 = extractvalue { i80, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %78
  %89 = extractvalue { i80, i1 } %85, 0
  %90 = lshr i80 %89, 1
  br i1 true, label %95, label %96

91:                                               ; preds = %95
  %92 = zext i1 %72 to i80
  %93 = xor i80 %92, -1
  %94 = and i80 %90, %93
  store i80 %94, ptr %4, align 8
  br label %26

95:                                               ; preds = %88
  br label %91

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @140)
  unreachable

97:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %26
  %99 = extractvalue { i80, i1 } %30, 0
  br i1 true, label %104, label %105

100:                                              ; preds = %104
  %101 = shl i80 %99, 64
  %102 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %27, i80 %101)
  %103 = extractvalue { i80, i1 } %102, 1
  br i1 %103, label %106, label %107

104:                                              ; preds = %98
  br label %100

105:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @140)
  unreachable

106:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %100
  %108 = extractvalue { i80, i1 } %102, 0
  store i80 %108, ptr %4, align 8
  %109 = load i80, ptr %4, align 8
  %110 = or i80 %109, 9223372036854775808
  store i80 %110, ptr %4, align 8
  %111 = load i80, ptr %4, align 8
  %112 = or i80 0, %111
  %113 = bitcast i80 %112 to x86_fp80
  ret x86_fp80 %113
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__floatunsihf(i32 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3632(i32 %0)
  ret half %2
}

; Function Attrs: nounwind uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3632(i32 %0) unnamed_addr #0 {
  %2 = alloca i5, align 1
  %3 = alloca i6, align 1
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i32 @math.absCast__anon_4049(i32 %0)
  store i32 %8, ptr %5, align 4
  store i16 0, ptr %4, align 2
  %9 = load i32, ptr %5, align 4
  %10 = call i32 @llvm.ctlz.i32(i32 %9, i1 false)
  %11 = trunc i32 %10 to i6
  %12 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %11)
  %13 = extractvalue { i6, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret half 0xH0000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i6, i1 } %12, 0
  %19 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %18, i6 1)
  %20 = extractvalue { i6, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i6, i1 } %19, 0
  store i6 %23, ptr %3, align 1
  %24 = load i6, ptr %3, align 1
  %25 = icmp ule i6 %24, 10
  br i1 %25, label %29, label %33

26:                                               ; preds = %97, %49
  %27 = load i6, ptr %3, align 1
  %28 = icmp ugt i6 %27, 15
  br i1 %28, label %109, label %110

29:                                               ; preds = %22
  %30 = load i6, ptr %3, align 1
  %31 = sub i6 15, %30
  %32 = icmp ule i6 %31, 15
  br i1 %32, label %41, label %42

33:                                               ; preds = %22
  %34 = load i6, ptr %3, align 1
  %35 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %34, i6 10)
  %36 = extractvalue { i6, i1 } %35, 1
  br i1 %36, label %57, label %58

37:                                               ; preds = %41
  %38 = trunc i6 %30 to i4
  %39 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %38)
  %40 = extractvalue { i4, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %29
  br label %37

42:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @141)
  unreachable

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i4, i1 } %39, 0
  %46 = load i32, ptr %5, align 4
  %47 = sub i32 65535, %46
  %48 = icmp ule i32 %47, 65535
  br i1 %48, label %55, label %56

49:                                               ; preds = %55
  %50 = trunc i32 %46 to i16
  %51 = zext i4 %45 to i16
  %52 = shl i16 %50, %51
  store i16 %52, ptr %4, align 2
  %53 = load i16, ptr %4, align 2
  %54 = xor i16 %53, 1024
  store i16 %54, ptr %4, align 2
  br label %26

55:                                               ; preds = %44
  br label %49

56:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @141)
  unreachable

57:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %33
  %59 = extractvalue { i6, i1 } %35, 0
  %60 = sub i6 31, %59
  %61 = icmp ule i6 %60, 31
  br i1 %61, label %70, label %71

62:                                               ; preds = %70
  %63 = trunc i6 %59 to i5
  store i5 %63, ptr %2, align 1
  %64 = load i32, ptr %5, align 4
  %65 = call i32 @llvm.cttz.i32(i32 %64, i1 false)
  %66 = trunc i32 %65 to i6
  %67 = load i5, ptr %2, align 1
  %68 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %67, i5 1)
  %69 = extractvalue { i5, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %58
  br label %62

71:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @141)
  unreachable

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %62
  %74 = extractvalue { i5, i1 } %68, 0
  %75 = zext i5 %74 to i6
  %76 = icmp eq i6 %66, %75
  %77 = load i32, ptr %5, align 4
  %78 = load i5, ptr %2, align 1
  %79 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %78, i5 1)
  %80 = extractvalue { i5, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %73
  %83 = extractvalue { i5, i1 } %79, 0
  %84 = zext i5 %83 to i32
  %85 = lshr i32 %77, %84
  %86 = sub i32 65535, %85
  %87 = icmp ule i32 %86, 65535
  br i1 %87, label %94, label %95

88:                                               ; preds = %94
  %89 = trunc i32 %85 to i16
  %90 = xor i16 %89, 2048
  store i16 %90, ptr %4, align 2
  %91 = load i16, ptr %4, align 2
  %92 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %91, i16 1)
  %93 = extractvalue { i16, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %82
  br label %88

95:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @141)
  unreachable

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i16, i1 } %92, 0
  %99 = lshr i16 %98, 1
  %100 = zext i1 %76 to i16
  %101 = xor i16 %100, -1
  %102 = and i16 %99, %101
  store i16 %102, ptr %4, align 2
  br label %26

103:                                              ; preds = %110
  %104 = load i16, ptr %4, align 2
  %105 = load i6, ptr %3, align 1
  %106 = zext i6 %105 to i16
  %107 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %106, i16 15)
  %108 = extractvalue { i16, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %26
  ret half 0xH7C00

110:                                              ; preds = %26
  br label %103

111:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %103
  %113 = extractvalue { i16, i1 } %107, 0
  %114 = shl i16 %113, 10
  %115 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %104, i16 %114)
  %116 = extractvalue { i16, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i16, i1 } %115, 0
  store i16 %119, ptr %4, align 2
  %120 = load i16, ptr %4, align 2
  %121 = or i16 0, %120
  %122 = bitcast i16 %121 to half
  ret half %122
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__floatunsisf(i32 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3633(i32 %0)
  ret float %2
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3633(i32 %0) unnamed_addr #0 {
  %2 = alloca i5, align 1
  %3 = alloca i6, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i32 @math.absCast__anon_4049(i32 %0)
  store i32 %8, ptr %5, align 4
  store i32 0, ptr %4, align 4
  %9 = load i32, ptr %5, align 4
  %10 = call i32 @llvm.ctlz.i32(i32 %9, i1 false)
  %11 = trunc i32 %10 to i6
  %12 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %11)
  %13 = extractvalue { i6, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret float 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i6, i1 } %12, 0
  %19 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %18, i6 1)
  %20 = extractvalue { i6, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i6, i1 } %19, 0
  store i6 %23, ptr %3, align 1
  %24 = load i6, ptr %3, align 1
  %25 = icmp ule i6 %24, 23
  br i1 %25, label %32, label %36

26:                                               ; preds = %88, %47
  %27 = load i32, ptr %4, align 4
  %28 = load i6, ptr %3, align 1
  %29 = zext i6 %28 to i32
  %30 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %29, i32 127)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %94, label %95

32:                                               ; preds = %22
  %33 = load i6, ptr %3, align 1
  %34 = sub i6 31, %33
  %35 = icmp ule i6 %34, 31
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i6, ptr %3, align 1
  %38 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %37, i6 23)
  %39 = extractvalue { i6, i1 } %38, 1
  br i1 %39, label %54, label %55

40:                                               ; preds = %44
  %41 = trunc i6 %33 to i5
  %42 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %41)
  %43 = extractvalue { i5, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @142)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i5, i1 } %42, 0
  %49 = load i32, ptr %5, align 4
  %50 = zext i5 %48 to i32
  %51 = shl i32 %49, %50
  store i32 %51, ptr %4, align 4
  %52 = load i32, ptr %4, align 4
  %53 = xor i32 %52, 8388608
  store i32 %53, ptr %4, align 4
  br label %26

54:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %36
  %56 = extractvalue { i6, i1 } %38, 0
  %57 = sub i6 31, %56
  %58 = icmp ule i6 %57, 31
  br i1 %58, label %67, label %68

59:                                               ; preds = %67
  %60 = trunc i6 %56 to i5
  store i5 %60, ptr %2, align 1
  %61 = load i32, ptr %5, align 4
  %62 = call i32 @llvm.cttz.i32(i32 %61, i1 false)
  %63 = trunc i32 %62 to i6
  %64 = load i5, ptr %2, align 1
  %65 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %64, i5 1)
  %66 = extractvalue { i5, i1 } %65, 1
  br i1 %66, label %69, label %70

67:                                               ; preds = %55
  br label %59

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @142)
  unreachable

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %59
  %71 = extractvalue { i5, i1 } %65, 0
  %72 = zext i5 %71 to i6
  %73 = icmp eq i6 %63, %72
  %74 = load i32, ptr %5, align 4
  %75 = load i5, ptr %2, align 1
  %76 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %75, i5 1)
  %77 = extractvalue { i5, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %70
  %80 = extractvalue { i5, i1 } %76, 0
  %81 = zext i5 %80 to i32
  %82 = lshr i32 %74, %81
  %83 = xor i32 %82, 16777216
  store i32 %83, ptr %4, align 4
  %84 = load i32, ptr %4, align 4
  %85 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %84, i32 1)
  %86 = extractvalue { i32, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %79
  %89 = extractvalue { i32, i1 } %85, 0
  %90 = lshr i32 %89, 1
  %91 = zext i1 %73 to i32
  %92 = xor i32 %91, -1
  %93 = and i32 %90, %92
  store i32 %93, ptr %4, align 4
  br label %26

94:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

95:                                               ; preds = %26
  %96 = extractvalue { i32, i1 } %30, 0
  %97 = shl i32 %96, 23
  %98 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %27, i32 %97)
  %99 = extractvalue { i32, i1 } %98, 1
  br i1 %99, label %100, label %101

100:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %95
  %102 = extractvalue { i32, i1 } %98, 0
  store i32 %102, ptr %4, align 4
  %103 = load i32, ptr %4, align 4
  %104 = or i32 0, %103
  %105 = bitcast i32 %104 to float
  ret float %105
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__floatunsidf(i32 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3634(i32 %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3634(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %13, label %14

6:                                                ; preds = %14
  %7 = call fastcc i32 @math.absCast__anon_4049(i32 %0)
  store i32 %7, ptr %4, align 4
  store i64 0, ptr %3, align 8
  %8 = load i32, ptr %4, align 4
  %9 = call i32 @llvm.ctlz.i32(i32 %8, i1 false)
  %10 = trunc i32 %9 to i6
  %11 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %10)
  %12 = extractvalue { i6, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  ret double 0.000000e+00

14:                                               ; preds = %1
  br label %6

15:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %6
  %17 = extractvalue { i6, i1 } %11, 0
  %18 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %17, i6 1)
  %19 = extractvalue { i6, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i6, i1 } %18, 0
  store i6 %22, ptr %2, align 1
  %23 = load i6, ptr %2, align 1
  %24 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %23)
  %25 = extractvalue { i6, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %21
  %28 = extractvalue { i6, i1 } %24, 0
  %29 = load i32, ptr %4, align 4
  %30 = zext i32 %29 to i64
  %31 = zext i6 %28 to i64
  %32 = shl i64 %30, %31
  store i64 %32, ptr %3, align 8
  %33 = load i64, ptr %3, align 8
  %34 = xor i64 %33, 4503599627370496
  store i64 %34, ptr %3, align 8
  %35 = load i64, ptr %3, align 8
  %36 = load i6, ptr %2, align 1
  %37 = zext i6 %36 to i64
  %38 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %37, i64 1023)
  %39 = extractvalue { i64, i1 } %38, 1
  br i1 %39, label %40, label %41

40:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %27
  %42 = extractvalue { i64, i1 } %38, 0
  %43 = shl i64 %42, 52
  %44 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %35, i64 %43)
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %41
  %48 = extractvalue { i64, i1 } %44, 0
  store i64 %48, ptr %3, align 8
  %49 = load i64, ptr %3, align 8
  %50 = or i64 0, %49
  %51 = bitcast i64 %50 to double
  ret double %51
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__floatunsitf(i32 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3635(i32 %0)
  ret fp128 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3635(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i128, align 8
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %13, label %14

6:                                                ; preds = %14
  %7 = call fastcc i32 @math.absCast__anon_4049(i32 %0)
  store i32 %7, ptr %4, align 4
  store i128 0, ptr %3, align 8
  %8 = load i32, ptr %4, align 4
  %9 = call i32 @llvm.ctlz.i32(i32 %8, i1 false)
  %10 = trunc i32 %9 to i6
  %11 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %10)
  %12 = extractvalue { i6, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

14:                                               ; preds = %1
  br label %6

15:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %6
  %17 = extractvalue { i6, i1 } %11, 0
  %18 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %17, i6 1)
  %19 = extractvalue { i6, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i6, i1 } %18, 0
  store i6 %22, ptr %2, align 1
  %23 = load i6, ptr %2, align 1
  %24 = zext i6 %23 to i7
  %25 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %24)
  %26 = extractvalue { i7, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %21
  %29 = extractvalue { i7, i1 } %25, 0
  %30 = load i32, ptr %4, align 4
  %31 = zext i32 %30 to i128
  %32 = zext i7 %29 to i128
  %33 = shl i128 %31, %32
  store i128 %33, ptr %3, align 8
  %34 = load i128, ptr %3, align 8
  %35 = xor i128 %34, 5192296858534827628530496329220096
  store i128 %35, ptr %3, align 8
  %36 = load i128, ptr %3, align 8
  %37 = load i6, ptr %2, align 1
  %38 = zext i6 %37 to i128
  %39 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %38, i128 16383)
  %40 = extractvalue { i128, i1 } %39, 1
  br i1 %40, label %41, label %42

41:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

42:                                               ; preds = %28
  %43 = extractvalue { i128, i1 } %39, 0
  %44 = shl i128 %43, 112
  %45 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %36, i128 %44)
  %46 = extractvalue { i128, i1 } %45, 1
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i128, i1 } %45, 0
  store i128 %49, ptr %3, align 8
  %50 = load i128, ptr %3, align 8
  %51 = or i128 0, %50
  %52 = bitcast i128 %51 to fp128
  ret fp128 %52
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__floatunsixf(i32 %0) #0 {
  %2 = call fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3636(i32 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3636(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i80, align 8
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %13, label %14

6:                                                ; preds = %14
  %7 = call fastcc i32 @math.absCast__anon_4049(i32 %0)
  store i32 %7, ptr %4, align 4
  store i80 0, ptr %3, align 8
  %8 = load i32, ptr %4, align 4
  %9 = call i32 @llvm.ctlz.i32(i32 %8, i1 false)
  %10 = trunc i32 %9 to i6
  %11 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %10)
  %12 = extractvalue { i6, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  ret x86_fp80 0xK00000000000000000000

14:                                               ; preds = %1
  br label %6

15:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %6
  %17 = extractvalue { i6, i1 } %11, 0
  %18 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %17, i6 1)
  %19 = extractvalue { i6, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i6, i1 } %18, 0
  store i6 %22, ptr %2, align 1
  %23 = load i6, ptr %2, align 1
  %24 = zext i6 %23 to i7
  %25 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %24)
  %26 = extractvalue { i7, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %21
  %29 = extractvalue { i7, i1 } %25, 0
  %30 = load i32, ptr %4, align 4
  %31 = zext i32 %30 to i80
  %32 = icmp ult i7 %29, -48
  br i1 %32, label %43, label %44

33:                                               ; preds = %43
  %34 = zext i7 %29 to i80
  %35 = shl i80 %31, %34
  store i80 %35, ptr %3, align 8
  %36 = load i80, ptr %3, align 8
  %37 = xor i80 %36, 0
  store i80 %37, ptr %3, align 8
  %38 = load i80, ptr %3, align 8
  %39 = load i6, ptr %2, align 1
  %40 = zext i6 %39 to i80
  %41 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %40, i80 16383)
  %42 = extractvalue { i80, i1 } %41, 1
  br i1 %42, label %45, label %46

43:                                               ; preds = %28
  br label %33

44:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @143)
  unreachable

45:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %33
  %47 = extractvalue { i80, i1 } %41, 0
  br i1 true, label %52, label %53

48:                                               ; preds = %52
  %49 = shl i80 %47, 64
  %50 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %38, i80 %49)
  %51 = extractvalue { i80, i1 } %50, 1
  br i1 %51, label %54, label %55

52:                                               ; preds = %46
  br label %48

53:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @143)
  unreachable

54:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %48
  %56 = extractvalue { i80, i1 } %50, 0
  store i80 %56, ptr %3, align 8
  %57 = load i80, ptr %3, align 8
  %58 = or i80 %57, 9223372036854775808
  store i80 %58, ptr %3, align 8
  %59 = load i80, ptr %3, align 8
  %60 = or i80 0, %59
  %61 = bitcast i80 %60 to x86_fp80
  ret x86_fp80 %61
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__floatuntihf(i128 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3637(i128 %0)
  ret half %2
}

; Function Attrs: nounwind uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3637(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_4050(i128 %0)
  store i128 %8, ptr %5, align 8
  store i16 0, ptr %4, align 2
  %9 = load i128, ptr %5, align 8
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret half 0xH0000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 10
  br i1 %25, label %29, label %33

26:                                               ; preds = %97, %49
  %27 = load i8, ptr %3, align 1
  %28 = icmp ugt i8 %27, 15
  br i1 %28, label %109, label %110

29:                                               ; preds = %22
  %30 = load i8, ptr %3, align 1
  %31 = sub i8 15, %30
  %32 = icmp ule i8 %31, 15
  br i1 %32, label %41, label %42

33:                                               ; preds = %22
  %34 = load i8, ptr %3, align 1
  %35 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %34, i8 10)
  %36 = extractvalue { i8, i1 } %35, 1
  br i1 %36, label %57, label %58

37:                                               ; preds = %41
  %38 = trunc i8 %30 to i4
  %39 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %38)
  %40 = extractvalue { i4, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %29
  br label %37

42:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @144)
  unreachable

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i4, i1 } %39, 0
  %46 = load i128, ptr %5, align 8
  %47 = sub i128 65535, %46
  %48 = icmp ule i128 %47, 65535
  br i1 %48, label %55, label %56

49:                                               ; preds = %55
  %50 = trunc i128 %46 to i16
  %51 = zext i4 %45 to i16
  %52 = shl i16 %50, %51
  store i16 %52, ptr %4, align 2
  %53 = load i16, ptr %4, align 2
  %54 = xor i16 %53, 1024
  store i16 %54, ptr %4, align 2
  br label %26

55:                                               ; preds = %44
  br label %49

56:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @144)
  unreachable

57:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %33
  %59 = extractvalue { i8, i1 } %35, 0
  %60 = sub i8 127, %59
  %61 = icmp ule i8 %60, 127
  br i1 %61, label %70, label %71

62:                                               ; preds = %70
  %63 = trunc i8 %59 to i7
  store i7 %63, ptr %2, align 1
  %64 = load i128, ptr %5, align 8
  %65 = call i128 @llvm.cttz.i128(i128 %64, i1 false)
  %66 = trunc i128 %65 to i8
  %67 = load i7, ptr %2, align 1
  %68 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %67, i7 1)
  %69 = extractvalue { i7, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %58
  br label %62

71:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @144)
  unreachable

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %62
  %74 = extractvalue { i7, i1 } %68, 0
  %75 = zext i7 %74 to i8
  %76 = icmp eq i8 %66, %75
  %77 = load i128, ptr %5, align 8
  %78 = load i7, ptr %2, align 1
  %79 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %78, i7 1)
  %80 = extractvalue { i7, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %73
  %83 = extractvalue { i7, i1 } %79, 0
  %84 = zext i7 %83 to i128
  %85 = lshr i128 %77, %84
  %86 = sub i128 65535, %85
  %87 = icmp ule i128 %86, 65535
  br i1 %87, label %94, label %95

88:                                               ; preds = %94
  %89 = trunc i128 %85 to i16
  %90 = xor i16 %89, 2048
  store i16 %90, ptr %4, align 2
  %91 = load i16, ptr %4, align 2
  %92 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %91, i16 1)
  %93 = extractvalue { i16, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %82
  br label %88

95:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @144)
  unreachable

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i16, i1 } %92, 0
  %99 = lshr i16 %98, 1
  %100 = zext i1 %76 to i16
  %101 = xor i16 %100, -1
  %102 = and i16 %99, %101
  store i16 %102, ptr %4, align 2
  br label %26

103:                                              ; preds = %110
  %104 = load i16, ptr %4, align 2
  %105 = load i8, ptr %3, align 1
  %106 = zext i8 %105 to i16
  %107 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %106, i16 15)
  %108 = extractvalue { i16, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %26
  ret half 0xH7C00

110:                                              ; preds = %26
  br label %103

111:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %103
  %113 = extractvalue { i16, i1 } %107, 0
  %114 = shl i16 %113, 10
  %115 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %104, i16 %114)
  %116 = extractvalue { i16, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i16, i1 } %115, 0
  store i16 %119, ptr %4, align 2
  %120 = load i16, ptr %4, align 2
  %121 = or i16 0, %120
  %122 = bitcast i16 %121 to half
  ret half %122
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__floatuntisf(i128 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3638(i128 %0)
  ret float %2
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3638(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_4050(i128 %0)
  store i128 %8, ptr %5, align 8
  store i32 0, ptr %4, align 4
  %9 = load i128, ptr %5, align 8
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret float 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 23
  br i1 %25, label %29, label %33

26:                                               ; preds = %97, %49
  %27 = load i8, ptr %3, align 1
  %28 = icmp ugt i8 %27, 127
  br i1 %28, label %109, label %110

29:                                               ; preds = %22
  %30 = load i8, ptr %3, align 1
  %31 = sub i8 31, %30
  %32 = icmp ule i8 %31, 31
  br i1 %32, label %41, label %42

33:                                               ; preds = %22
  %34 = load i8, ptr %3, align 1
  %35 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %34, i8 23)
  %36 = extractvalue { i8, i1 } %35, 1
  br i1 %36, label %57, label %58

37:                                               ; preds = %41
  %38 = trunc i8 %30 to i5
  %39 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %38)
  %40 = extractvalue { i5, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %29
  br label %37

42:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @145)
  unreachable

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i5, i1 } %39, 0
  %46 = load i128, ptr %5, align 8
  %47 = sub i128 4294967295, %46
  %48 = icmp ule i128 %47, 4294967295
  br i1 %48, label %55, label %56

49:                                               ; preds = %55
  %50 = trunc i128 %46 to i32
  %51 = zext i5 %45 to i32
  %52 = shl i32 %50, %51
  store i32 %52, ptr %4, align 4
  %53 = load i32, ptr %4, align 4
  %54 = xor i32 %53, 8388608
  store i32 %54, ptr %4, align 4
  br label %26

55:                                               ; preds = %44
  br label %49

56:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @145)
  unreachable

57:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %33
  %59 = extractvalue { i8, i1 } %35, 0
  %60 = sub i8 127, %59
  %61 = icmp ule i8 %60, 127
  br i1 %61, label %70, label %71

62:                                               ; preds = %70
  %63 = trunc i8 %59 to i7
  store i7 %63, ptr %2, align 1
  %64 = load i128, ptr %5, align 8
  %65 = call i128 @llvm.cttz.i128(i128 %64, i1 false)
  %66 = trunc i128 %65 to i8
  %67 = load i7, ptr %2, align 1
  %68 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %67, i7 1)
  %69 = extractvalue { i7, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %58
  br label %62

71:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @145)
  unreachable

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %62
  %74 = extractvalue { i7, i1 } %68, 0
  %75 = zext i7 %74 to i8
  %76 = icmp eq i8 %66, %75
  %77 = load i128, ptr %5, align 8
  %78 = load i7, ptr %2, align 1
  %79 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %78, i7 1)
  %80 = extractvalue { i7, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %73
  %83 = extractvalue { i7, i1 } %79, 0
  %84 = zext i7 %83 to i128
  %85 = lshr i128 %77, %84
  %86 = sub i128 4294967295, %85
  %87 = icmp ule i128 %86, 4294967295
  br i1 %87, label %94, label %95

88:                                               ; preds = %94
  %89 = trunc i128 %85 to i32
  %90 = xor i32 %89, 16777216
  store i32 %90, ptr %4, align 4
  %91 = load i32, ptr %4, align 4
  %92 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %91, i32 1)
  %93 = extractvalue { i32, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %82
  br label %88

95:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @145)
  unreachable

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i32, i1 } %92, 0
  %99 = lshr i32 %98, 1
  %100 = zext i1 %76 to i32
  %101 = xor i32 %100, -1
  %102 = and i32 %99, %101
  store i32 %102, ptr %4, align 4
  br label %26

103:                                              ; preds = %110
  %104 = load i32, ptr %4, align 4
  %105 = load i8, ptr %3, align 1
  %106 = zext i8 %105 to i32
  %107 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %106, i32 127)
  %108 = extractvalue { i32, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %26
  ret float 0x7FF0000000000000

110:                                              ; preds = %26
  br label %103

111:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %103
  %113 = extractvalue { i32, i1 } %107, 0
  %114 = shl i32 %113, 23
  %115 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %104, i32 %114)
  %116 = extractvalue { i32, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i32, i1 } %115, 0
  store i32 %119, ptr %4, align 4
  %120 = load i32, ptr %4, align 4
  %121 = or i32 0, %120
  %122 = bitcast i32 %121 to float
  ret float %122
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__floatuntidf(i128 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3639(i128 %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3639(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i64, align 8
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_4050(i128 %0)
  store i128 %8, ptr %5, align 8
  store i64 0, ptr %4, align 8
  %9 = load i128, ptr %5, align 8
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret double 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 52
  br i1 %25, label %32, label %36

26:                                               ; preds = %100, %52
  %27 = load i64, ptr %4, align 8
  %28 = load i8, ptr %3, align 1
  %29 = zext i8 %28 to i64
  %30 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %29, i64 1023)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %106, label %107

32:                                               ; preds = %22
  %33 = load i8, ptr %3, align 1
  %34 = sub i8 63, %33
  %35 = icmp ule i8 %34, 63
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i8, ptr %3, align 1
  %38 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %37, i8 52)
  %39 = extractvalue { i8, i1 } %38, 1
  br i1 %39, label %60, label %61

40:                                               ; preds = %44
  %41 = trunc i8 %33 to i6
  %42 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %41)
  %43 = extractvalue { i6, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @146)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i6, i1 } %42, 0
  %49 = load i128, ptr %5, align 8
  %50 = sub i128 18446744073709551615, %49
  %51 = icmp ule i128 %50, 18446744073709551615
  br i1 %51, label %58, label %59

52:                                               ; preds = %58
  %53 = trunc i128 %49 to i64
  %54 = zext i6 %48 to i64
  %55 = shl i64 %53, %54
  store i64 %55, ptr %4, align 8
  %56 = load i64, ptr %4, align 8
  %57 = xor i64 %56, 4503599627370496
  store i64 %57, ptr %4, align 8
  br label %26

58:                                               ; preds = %47
  br label %52

59:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @146)
  unreachable

60:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %36
  %62 = extractvalue { i8, i1 } %38, 0
  %63 = sub i8 127, %62
  %64 = icmp ule i8 %63, 127
  br i1 %64, label %73, label %74

65:                                               ; preds = %73
  %66 = trunc i8 %62 to i7
  store i7 %66, ptr %2, align 1
  %67 = load i128, ptr %5, align 8
  %68 = call i128 @llvm.cttz.i128(i128 %67, i1 false)
  %69 = trunc i128 %68 to i8
  %70 = load i7, ptr %2, align 1
  %71 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %70, i7 1)
  %72 = extractvalue { i7, i1 } %71, 1
  br i1 %72, label %75, label %76

73:                                               ; preds = %61
  br label %65

74:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @146)
  unreachable

75:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %65
  %77 = extractvalue { i7, i1 } %71, 0
  %78 = zext i7 %77 to i8
  %79 = icmp eq i8 %69, %78
  %80 = load i128, ptr %5, align 8
  %81 = load i7, ptr %2, align 1
  %82 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %81, i7 1)
  %83 = extractvalue { i7, i1 } %82, 1
  br i1 %83, label %84, label %85

84:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %76
  %86 = extractvalue { i7, i1 } %82, 0
  %87 = zext i7 %86 to i128
  %88 = lshr i128 %80, %87
  %89 = sub i128 18446744073709551615, %88
  %90 = icmp ule i128 %89, 18446744073709551615
  br i1 %90, label %97, label %98

91:                                               ; preds = %97
  %92 = trunc i128 %88 to i64
  %93 = xor i64 %92, 9007199254740992
  store i64 %93, ptr %4, align 8
  %94 = load i64, ptr %4, align 8
  %95 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %94, i64 1)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %99, label %100

97:                                               ; preds = %85
  br label %91

98:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @146)
  unreachable

99:                                               ; preds = %91
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %91
  %101 = extractvalue { i64, i1 } %95, 0
  %102 = lshr i64 %101, 1
  %103 = zext i1 %79 to i64
  %104 = xor i64 %103, -1
  %105 = and i64 %102, %104
  store i64 %105, ptr %4, align 8
  br label %26

106:                                              ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %26
  %108 = extractvalue { i64, i1 } %30, 0
  %109 = shl i64 %108, 52
  %110 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %27, i64 %109)
  %111 = extractvalue { i64, i1 } %110, 1
  br i1 %111, label %112, label %113

112:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %107
  %114 = extractvalue { i64, i1 } %110, 0
  store i64 %114, ptr %4, align 8
  %115 = load i64, ptr %4, align 8
  %116 = or i64 0, %115
  %117 = bitcast i64 %116 to double
  ret double %117
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__floatuntitf(i128 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3640(i128 %0)
  ret fp128 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3640(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i128, align 8
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_4050(i128 %0)
  store i128 %8, ptr %5, align 8
  store i128 0, ptr %4, align 8
  %9 = load i128, ptr %5, align 8
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 112
  br i1 %25, label %32, label %36

26:                                               ; preds = %88, %47
  %27 = load i128, ptr %4, align 8
  %28 = load i8, ptr %3, align 1
  %29 = zext i8 %28 to i128
  %30 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %29, i128 16383)
  %31 = extractvalue { i128, i1 } %30, 1
  br i1 %31, label %94, label %95

32:                                               ; preds = %22
  %33 = load i8, ptr %3, align 1
  %34 = sub i8 127, %33
  %35 = icmp ule i8 %34, 127
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i8, ptr %3, align 1
  %38 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %37, i8 112)
  %39 = extractvalue { i8, i1 } %38, 1
  br i1 %39, label %54, label %55

40:                                               ; preds = %44
  %41 = trunc i8 %33 to i7
  %42 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %41)
  %43 = extractvalue { i7, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @147)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i7, i1 } %42, 0
  %49 = load i128, ptr %5, align 8
  %50 = zext i7 %48 to i128
  %51 = shl i128 %49, %50
  store i128 %51, ptr %4, align 8
  %52 = load i128, ptr %4, align 8
  %53 = xor i128 %52, 5192296858534827628530496329220096
  store i128 %53, ptr %4, align 8
  br label %26

54:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %36
  %56 = extractvalue { i8, i1 } %38, 0
  %57 = sub i8 127, %56
  %58 = icmp ule i8 %57, 127
  br i1 %58, label %67, label %68

59:                                               ; preds = %67
  %60 = trunc i8 %56 to i7
  store i7 %60, ptr %2, align 1
  %61 = load i128, ptr %5, align 8
  %62 = call i128 @llvm.cttz.i128(i128 %61, i1 false)
  %63 = trunc i128 %62 to i8
  %64 = load i7, ptr %2, align 1
  %65 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %64, i7 1)
  %66 = extractvalue { i7, i1 } %65, 1
  br i1 %66, label %69, label %70

67:                                               ; preds = %55
  br label %59

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @147)
  unreachable

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %59
  %71 = extractvalue { i7, i1 } %65, 0
  %72 = zext i7 %71 to i8
  %73 = icmp eq i8 %63, %72
  %74 = load i128, ptr %5, align 8
  %75 = load i7, ptr %2, align 1
  %76 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %75, i7 1)
  %77 = extractvalue { i7, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %70
  %80 = extractvalue { i7, i1 } %76, 0
  %81 = zext i7 %80 to i128
  %82 = lshr i128 %74, %81
  %83 = xor i128 %82, 10384593717069655257060992658440192
  store i128 %83, ptr %4, align 8
  %84 = load i128, ptr %4, align 8
  %85 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %84, i128 1)
  %86 = extractvalue { i128, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %79
  %89 = extractvalue { i128, i1 } %85, 0
  %90 = lshr i128 %89, 1
  %91 = zext i1 %73 to i128
  %92 = xor i128 %91, -1
  %93 = and i128 %90, %92
  store i128 %93, ptr %4, align 8
  br label %26

94:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

95:                                               ; preds = %26
  %96 = extractvalue { i128, i1 } %30, 0
  %97 = shl i128 %96, 112
  %98 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %27, i128 %97)
  %99 = extractvalue { i128, i1 } %98, 1
  br i1 %99, label %100, label %101

100:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %95
  %102 = extractvalue { i128, i1 } %98, 0
  store i128 %102, ptr %4, align 8
  %103 = load i128, ptr %4, align 8
  %104 = or i128 0, %103
  %105 = bitcast i128 %104 to fp128
  ret fp128 %105
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__floatuntixf(i128 %0) #0 {
  %2 = call fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3641(i128 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @compiler_rt.float_from_int.floatFromInt__anon_3641(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i80, align 8
  %5 = alloca i128, align 8
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_4050(i128 %0)
  store i128 %8, ptr %5, align 8
  store i80 0, ptr %4, align 8
  %9 = load i128, ptr %5, align 8
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret x86_fp80 0xK00000000000000000000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 63
  br i1 %25, label %32, label %36

26:                                               ; preds = %107, %57
  %27 = load i80, ptr %4, align 8
  %28 = load i8, ptr %3, align 1
  %29 = zext i8 %28 to i80
  %30 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %29, i80 16383)
  %31 = extractvalue { i80, i1 } %30, 1
  br i1 %31, label %113, label %114

32:                                               ; preds = %22
  %33 = load i8, ptr %3, align 1
  %34 = sub i8 127, %33
  %35 = icmp ule i8 %34, 127
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i8, ptr %3, align 1
  %38 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %37, i8 63)
  %39 = extractvalue { i8, i1 } %38, 1
  br i1 %39, label %64, label %65

40:                                               ; preds = %44
  %41 = trunc i8 %33 to i7
  %42 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %41)
  %43 = extractvalue { i7, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i7, i1 } %42, 0
  %49 = load i128, ptr %5, align 8
  %50 = sub i128 1208925819614629174706175, %49
  %51 = icmp ule i128 %50, 1208925819614629174706175
  br i1 %51, label %55, label %56

52:                                               ; preds = %55
  %53 = trunc i128 %49 to i80
  %54 = icmp ult i7 %48, -48
  br i1 %54, label %62, label %63

55:                                               ; preds = %47
  br label %52

56:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

57:                                               ; preds = %62
  %58 = zext i7 %48 to i80
  %59 = shl i80 %53, %58
  store i80 %59, ptr %4, align 8
  %60 = load i80, ptr %4, align 8
  %61 = xor i80 %60, 0
  store i80 %61, ptr %4, align 8
  br label %26

62:                                               ; preds = %52
  br label %57

63:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

64:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %36
  %66 = extractvalue { i8, i1 } %38, 0
  %67 = sub i8 127, %66
  %68 = icmp ule i8 %67, 127
  br i1 %68, label %77, label %78

69:                                               ; preds = %77
  %70 = trunc i8 %66 to i7
  store i7 %70, ptr %2, align 1
  %71 = load i128, ptr %5, align 8
  %72 = call i128 @llvm.cttz.i128(i128 %71, i1 false)
  %73 = trunc i128 %72 to i8
  %74 = load i7, ptr %2, align 1
  %75 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %74, i7 1)
  %76 = extractvalue { i7, i1 } %75, 1
  br i1 %76, label %79, label %80

77:                                               ; preds = %65
  br label %69

78:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

79:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %69
  %81 = extractvalue { i7, i1 } %75, 0
  %82 = zext i7 %81 to i8
  %83 = icmp eq i8 %73, %82
  %84 = load i128, ptr %5, align 8
  %85 = load i7, ptr %2, align 1
  %86 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %85, i7 1)
  %87 = extractvalue { i7, i1 } %86, 1
  br i1 %87, label %88, label %89

88:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

89:                                               ; preds = %80
  %90 = extractvalue { i7, i1 } %86, 0
  %91 = zext i7 %90 to i128
  %92 = lshr i128 %84, %91
  %93 = sub i128 1208925819614629174706175, %92
  %94 = icmp ule i128 %93, 1208925819614629174706175
  br i1 %94, label %101, label %102

95:                                               ; preds = %101
  %96 = trunc i128 %92 to i80
  %97 = xor i80 %96, 0
  store i80 %97, ptr %4, align 8
  %98 = load i80, ptr %4, align 8
  %99 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %98, i80 1)
  %100 = extractvalue { i80, i1 } %99, 1
  br i1 %100, label %103, label %104

101:                                              ; preds = %89
  br label %95

102:                                              ; preds = %89
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

103:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %95
  %105 = extractvalue { i80, i1 } %99, 0
  %106 = lshr i80 %105, 1
  br i1 true, label %111, label %112

107:                                              ; preds = %111
  %108 = zext i1 %83 to i80
  %109 = xor i80 %108, -1
  %110 = and i80 %106, %109
  store i80 %110, ptr %4, align 8
  br label %26

111:                                              ; preds = %104
  br label %107

112:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

113:                                              ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

114:                                              ; preds = %26
  %115 = extractvalue { i80, i1 } %30, 0
  br i1 true, label %120, label %121

116:                                              ; preds = %120
  %117 = shl i80 %115, 64
  %118 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %27, i80 %117)
  %119 = extractvalue { i80, i1 } %118, 1
  br i1 %119, label %122, label %123

120:                                              ; preds = %114
  br label %116

121:                                              ; preds = %114
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

122:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

123:                                              ; preds = %116
  %124 = extractvalue { i80, i1 } %118, 0
  store i80 %124, ptr %4, align 8
  %125 = load i80, ptr %4, align 8
  %126 = or i80 %125, 9223372036854775808
  store i80 %126, ptr %4, align 8
  %127 = load i80, ptr %4, align 8
  %128 = or i80 0, %127
  %129 = bitcast i80 %128 to x86_fp80
  ret x86_fp80 %129
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__eqhf2(half %0, half %1) #0 {
  %3 = call i32 @__cmphf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__cmphf2(half %0, half %1) #0 {
  %3 = bitcast half %0 to i16
  %4 = bitcast half %1 to i16
  %5 = and i16 %3, 32767
  %6 = and i16 %4, 32767
  %7 = icmp ugt i16 %5, 31744
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ 1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i16 %5, %6
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i16 %6, 31744
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i16 %3, %4
  %22 = icmp sge i16 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i16 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i16 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i16 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i16 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__nehf2(half %0, half %1) #0 {
  %3 = call i32 @__cmphf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__lehf2(half %0, half %1) #0 {
  %3 = call i32 @__cmphf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__lthf2(half %0, half %1) #0 {
  %3 = call i32 @__cmphf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__eqsf2(float %0, float %1) #0 {
  %3 = call i32 @__cmpsf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__cmpsf2(float %0, float %1) #0 {
  %3 = bitcast float %0 to i32
  %4 = bitcast float %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = and i32 %4, 2147483647
  %7 = icmp ugt i32 %5, 2139095040
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ 1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i32 %5, %6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i32 %6, 2139095040
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i32 %3, %4
  %22 = icmp sge i32 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i32 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i32 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i32 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i32 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__nesf2(float %0, float %1) #0 {
  %3 = call i32 @__cmpsf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__lesf2(float %0, float %1) #0 {
  %3 = call i32 @__cmpsf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ltsf2(float %0, float %1) #0 {
  %3 = call i32 @__cmpsf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__eqdf2(double %0, double %1) #0 {
  %3 = call i32 @__cmpdf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__cmpdf2(double %0, double %1) #0 {
  %3 = bitcast double %0 to i64
  %4 = bitcast double %1 to i64
  %5 = and i64 %3, 9223372036854775807
  %6 = and i64 %4, 9223372036854775807
  %7 = icmp ugt i64 %5, 9218868437227405312
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ 1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i64 %5, %6
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i64 %6, 9218868437227405312
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i64 %3, %4
  %22 = icmp sge i64 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i64 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i64 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i64 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i64 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__nedf2(double %0, double %1) #0 {
  %3 = call i32 @__cmpdf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ledf2(double %0, double %1) #0 {
  %3 = call i32 @__cmpdf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ltdf2(double %0, double %1) #0 {
  %3 = call i32 @__cmpdf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__eqtf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__cmptf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__cmptf2(fp128 %0, fp128 %1) #0 {
  %3 = bitcast fp128 %0 to i128
  %4 = bitcast fp128 %1 to i128
  %5 = and i128 %3, 170141183460469231731687303715884105727
  %6 = and i128 %4, 170141183460469231731687303715884105727
  %7 = icmp ugt i128 %5, 170135991163610696904058773219554885632
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ 1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i128 %5, %6
  %12 = icmp eq i128 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i128 %3, %4
  %22 = icmp sge i128 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i128 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i128 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i128 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i128 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__netf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__cmptf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__letf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__cmptf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__lttf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__cmptf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__eqxf2(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = call i32 @__cmpxf2(x86_fp80 %0, x86_fp80 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__cmpxf2(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca %math.F80, align 8
  %4 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %4, x86_fp80 %0)
  call fastcc void @math.break_f80(ptr sret(%math.F80) %3, x86_fp80 %1)
  %5 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %6 = load i16, ptr %5, align 2
  %7 = and i16 %6, 32767
  %8 = icmp eq i16 %7, 32767
  br i1 %8, label %28, label %33

9:                                                ; preds = %109, %108, %89, %88, %67, %65, %50
  %10 = phi i32 [ 1, %50 ], [ 0, %65 ], [ 0, %67 ], [ -1, %88 ], [ 1, %89 ], [ -1, %108 ], [ 1, %109 ]
  ret i32 %10

11:                                               ; preds = %51
  %12 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %13 = load i64, ptr %12, align 8
  %14 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %15 = load i64, ptr %14, align 8
  %16 = or i64 %13, %15
  %17 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %18 = load i16, ptr %17, align 2
  %19 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %20 = load i16, ptr %19, align 2
  %21 = or i16 %18, %20
  %22 = and i16 %21, 32767
  %23 = zext i16 %22 to i64
  %24 = or i64 %16, %23
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %65, label %66

26:                                               ; preds = %33, %28
  %27 = phi i1 [ %32, %28 ], [ false, %33 ]
  br i1 %27, label %36, label %37

28:                                               ; preds = %2
  %29 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %30 = load i64, ptr %29, align 8
  %31 = xor i64 %30, -9223372036854775808
  %32 = icmp ne i64 %31, 0
  br label %26

33:                                               ; preds = %2
  br label %26

34:                                               ; preds = %42, %36
  %35 = phi i1 [ true, %36 ], [ %43, %42 ]
  br i1 %35, label %50, label %51

36:                                               ; preds = %26
  br label %34

37:                                               ; preds = %26
  %38 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %39 = load i16, ptr %38, align 2
  %40 = and i16 %39, 32767
  %41 = icmp eq i16 %40, 32767
  br i1 %41, label %44, label %49

42:                                               ; preds = %49, %44
  %43 = phi i1 [ %48, %44 ], [ false, %49 ]
  br label %34

44:                                               ; preds = %37
  %45 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %46 = load i64, ptr %45, align 8
  %47 = xor i64 %46, -9223372036854775808
  %48 = icmp ne i64 %47, 0
  br label %42

49:                                               ; preds = %37
  br label %42

50:                                               ; preds = %34
  br label %9

51:                                               ; preds = %34
  br label %11

52:                                               ; preds = %66
  %53 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %54 = load i16, ptr %53, align 2
  %55 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %56 = load i16, ptr %55, align 2
  %57 = icmp eq i16 %54, %56
  %58 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %59 = load i64, ptr %58, align 8
  %60 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %61 = load i64, ptr %60, align 8
  %62 = icmp eq i64 %59, %61
  %63 = and i1 %57, %62
  %64 = icmp ne i1 %63, false
  br i1 %64, label %67, label %68

65:                                               ; preds = %11
  br label %9

66:                                               ; preds = %11
  br label %52

67:                                               ; preds = %52
  br label %9

68:                                               ; preds = %52
  %69 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %70 = load i16, ptr %69, align 2
  %71 = and i16 %70, -32768
  %72 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %73 = load i16, ptr %72, align 2
  %74 = and i16 %73, -32768
  %75 = icmp ne i16 %71, %74
  br i1 %75, label %76, label %82

76:                                               ; preds = %68
  %77 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %78 = load i16, ptr %77, align 2
  %79 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %80 = load i16, ptr %79, align 2
  %81 = icmp slt i16 %78, %80
  br i1 %81, label %88, label %89

82:                                               ; preds = %68
  %83 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %84 = load i64, ptr %83, align 8
  %85 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %86 = load i16, ptr %85, align 2
  %87 = zext i16 %86 to i80
  br i1 true, label %99, label %100

88:                                               ; preds = %76
  br label %9

89:                                               ; preds = %76
  br label %9

90:                                               ; preds = %99
  %91 = shl i80 %87, 64
  %92 = zext i64 %84 to i80
  %93 = or i80 %92, %91
  %94 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %95 = load i64, ptr %94, align 8
  %96 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %97 = load i16, ptr %96, align 2
  %98 = zext i16 %97 to i80
  br i1 true, label %106, label %107

99:                                               ; preds = %82
  br label %90

100:                                              ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @81)
  unreachable

101:                                              ; preds = %106
  %102 = shl i80 %98, 64
  %103 = zext i64 %95 to i80
  %104 = or i80 %103, %102
  %105 = icmp ult i80 %93, %104
  br i1 %105, label %108, label %109

106:                                              ; preds = %90
  br label %101

107:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @81)
  unreachable

108:                                              ; preds = %101
  br label %9

109:                                              ; preds = %101
  br label %9
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__nexf2(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = call i32 @__cmpxf2(x86_fp80 %0, x86_fp80 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__lexf2(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = call i32 @__cmpxf2(x86_fp80 %0, x86_fp80 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__ltxf2(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = call i32 @__cmpxf2(x86_fp80 %0, x86_fp80 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__unordhf2(half %0, half %1) #0 {
  %3 = bitcast half %0 to i16
  %4 = and i16 %3, 32767
  %5 = bitcast half %1 to i16
  %6 = and i16 %5, 32767
  %7 = icmp ugt i16 %4, 31744
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i16 %6, 31744
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__unordsf2(float %0, float %1) #0 {
  %3 = bitcast float %0 to i32
  %4 = and i32 %3, 2147483647
  %5 = bitcast float %1 to i32
  %6 = and i32 %5, 2147483647
  %7 = icmp ugt i32 %4, 2139095040
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i32 %6, 2139095040
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__unorddf2(double %0, double %1) #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp ugt i64 %4, 9218868437227405312
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i64 %6, 9218868437227405312
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__unordxf2(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = bitcast x86_fp80 %0 to i80
  %4 = and i80 %3, 604462909807314587353087
  %5 = bitcast x86_fp80 %1 to i80
  %6 = and i80 %5, 604462909807314587353087
  %7 = icmp ugt i80 %4, 604453686435277732577280
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i80 %6, 604453686435277732577280
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__unordtf2(fp128 %0, fp128 %1) #0 {
  %3 = bitcast fp128 %0 to i128
  %4 = and i128 %3, 170141183460469231731687303715884105727
  %5 = bitcast fp128 %1 to i128
  %6 = and i128 %5, 170141183460469231731687303715884105727
  %7 = icmp ugt i128 %4, 170135991163610696904058773219554885632
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gehf2(half %0, half %1) #0 {
  %3 = bitcast half %0 to i16
  %4 = bitcast half %1 to i16
  %5 = and i16 %3, 32767
  %6 = and i16 %4, 32767
  %7 = icmp ugt i16 %5, 31744
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ -1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i16 %5, %6
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i16 %6, 31744
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i16 %3, %4
  %22 = icmp sge i16 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i16 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i16 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i16 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i16 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gthf2(half %0, half %1) #0 {
  %3 = call i32 @__gehf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gesf2(float %0, float %1) #0 {
  %3 = bitcast float %0 to i32
  %4 = bitcast float %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = and i32 %4, 2147483647
  %7 = icmp ugt i32 %5, 2139095040
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ -1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i32 %5, %6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i32 %6, 2139095040
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i32 %3, %4
  %22 = icmp sge i32 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i32 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i32 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i32 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i32 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gtsf2(float %0, float %1) #0 {
  %3 = call i32 @__gesf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gedf2(double %0, double %1) #0 {
  %3 = bitcast double %0 to i64
  %4 = bitcast double %1 to i64
  %5 = and i64 %3, 9223372036854775807
  %6 = and i64 %4, 9223372036854775807
  %7 = icmp ugt i64 %5, 9218868437227405312
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ -1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i64 %5, %6
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i64 %6, 9218868437227405312
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i64 %3, %4
  %22 = icmp sge i64 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i64 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i64 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i64 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i64 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gtdf2(double %0, double %1) #0 {
  %3 = call i32 @__gedf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gexf2(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca %math.F80, align 8
  %4 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %4, x86_fp80 %0)
  call fastcc void @math.break_f80(ptr sret(%math.F80) %3, x86_fp80 %1)
  %5 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %6 = load i16, ptr %5, align 2
  %7 = and i16 %6, 32767
  %8 = icmp eq i16 %7, 32767
  br i1 %8, label %28, label %33

9:                                                ; preds = %109, %108, %89, %88, %67, %65, %50
  %10 = phi i32 [ -1, %50 ], [ 0, %65 ], [ 0, %67 ], [ -1, %88 ], [ 1, %89 ], [ -1, %108 ], [ 1, %109 ]
  ret i32 %10

11:                                               ; preds = %51
  %12 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %13 = load i64, ptr %12, align 8
  %14 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %15 = load i64, ptr %14, align 8
  %16 = or i64 %13, %15
  %17 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %18 = load i16, ptr %17, align 2
  %19 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %20 = load i16, ptr %19, align 2
  %21 = or i16 %18, %20
  %22 = and i16 %21, 32767
  %23 = zext i16 %22 to i64
  %24 = or i64 %16, %23
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %65, label %66

26:                                               ; preds = %33, %28
  %27 = phi i1 [ %32, %28 ], [ false, %33 ]
  br i1 %27, label %36, label %37

28:                                               ; preds = %2
  %29 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %30 = load i64, ptr %29, align 8
  %31 = xor i64 %30, -9223372036854775808
  %32 = icmp ne i64 %31, 0
  br label %26

33:                                               ; preds = %2
  br label %26

34:                                               ; preds = %42, %36
  %35 = phi i1 [ true, %36 ], [ %43, %42 ]
  br i1 %35, label %50, label %51

36:                                               ; preds = %26
  br label %34

37:                                               ; preds = %26
  %38 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %39 = load i16, ptr %38, align 2
  %40 = and i16 %39, 32767
  %41 = icmp eq i16 %40, 32767
  br i1 %41, label %44, label %49

42:                                               ; preds = %49, %44
  %43 = phi i1 [ %48, %44 ], [ false, %49 ]
  br label %34

44:                                               ; preds = %37
  %45 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %46 = load i64, ptr %45, align 8
  %47 = xor i64 %46, -9223372036854775808
  %48 = icmp ne i64 %47, 0
  br label %42

49:                                               ; preds = %37
  br label %42

50:                                               ; preds = %34
  br label %9

51:                                               ; preds = %34
  br label %11

52:                                               ; preds = %66
  %53 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %54 = load i16, ptr %53, align 2
  %55 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %56 = load i16, ptr %55, align 2
  %57 = icmp eq i16 %54, %56
  %58 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %59 = load i64, ptr %58, align 8
  %60 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %61 = load i64, ptr %60, align 8
  %62 = icmp eq i64 %59, %61
  %63 = and i1 %57, %62
  %64 = icmp ne i1 %63, false
  br i1 %64, label %67, label %68

65:                                               ; preds = %11
  br label %9

66:                                               ; preds = %11
  br label %52

67:                                               ; preds = %52
  br label %9

68:                                               ; preds = %52
  %69 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %70 = load i16, ptr %69, align 2
  %71 = and i16 %70, -32768
  %72 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %73 = load i16, ptr %72, align 2
  %74 = and i16 %73, -32768
  %75 = icmp ne i16 %71, %74
  br i1 %75, label %76, label %82

76:                                               ; preds = %68
  %77 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %78 = load i16, ptr %77, align 2
  %79 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %80 = load i16, ptr %79, align 2
  %81 = icmp slt i16 %78, %80
  br i1 %81, label %88, label %89

82:                                               ; preds = %68
  %83 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %84 = load i64, ptr %83, align 8
  %85 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %86 = load i16, ptr %85, align 2
  %87 = zext i16 %86 to i80
  br i1 true, label %99, label %100

88:                                               ; preds = %76
  br label %9

89:                                               ; preds = %76
  br label %9

90:                                               ; preds = %99
  %91 = shl i80 %87, 64
  %92 = zext i64 %84 to i80
  %93 = or i80 %92, %91
  %94 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %95 = load i64, ptr %94, align 8
  %96 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %97 = load i16, ptr %96, align 2
  %98 = zext i16 %97 to i80
  br i1 true, label %106, label %107

99:                                               ; preds = %82
  br label %90

100:                                              ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @82)
  unreachable

101:                                              ; preds = %106
  %102 = shl i80 %98, 64
  %103 = zext i64 %95 to i80
  %104 = or i80 %103, %102
  %105 = icmp ult i80 %93, %104
  br i1 %105, label %108, label %109

106:                                              ; preds = %90
  br label %101

107:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @82)
  unreachable

108:                                              ; preds = %101
  br label %9

109:                                              ; preds = %101
  br label %9
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gtxf2(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = call i32 @__gexf2(x86_fp80 %0, x86_fp80 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__getf2(fp128 %0, fp128 %1) #0 {
  %3 = bitcast fp128 %0 to i128
  %4 = bitcast fp128 %1 to i128
  %5 = and i128 %3, 170141183460469231731687303715884105727
  %6 = and i128 %4, 170141183460469231731687303715884105727
  %7 = icmp ugt i128 %5, 170135991163610696904058773219554885632
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ -1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i128 %5, %6
  %12 = icmp eq i128 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i128 %3, %4
  %22 = icmp sge i128 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i128 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i128 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i128 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i128 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__gttf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__getf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__addhf3(half %0, half %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca half, align 2
  store half 0xH7C01, ptr %10, align 2
  %11 = load half, ptr %10, align 2
  %12 = bitcast half %11 to i16
  %13 = or i16 %12, 512
  %14 = bitcast half %0 to i16
  store i16 %14, ptr %9, align 2
  %15 = bitcast half %1 to i16
  store i16 %15, ptr %8, align 2
  %16 = load i16, ptr %9, align 2
  %17 = and i16 %16, 32767
  %18 = load i16, ptr %8, align 2
  %19 = and i16 %18, 32767
  %20 = sub i16 %17, 1
  %21 = icmp uge i16 %20, 31743
  br i1 %21, label %28, label %29

22:                                               ; preds = %289, %261, %236, %184, %76, %74, %69, %62, %59, %57, %44, %37
  %23 = phi half [ %40, %37 ], [ %47, %44 ], [ %58, %57 ], [ %0, %59 ], [ %1, %62 ], [ %73, %69 ], [ %1, %74 ], [ %0, %76 ], [ 0xH0000, %184 ], [ %238, %236 ], [ %267, %261 ], [ %291, %289 ]
  ret half %23

24:                                               ; preds = %34, %75
  %25 = icmp ugt i16 %19, %17
  br i1 %25, label %93, label %96

26:                                               ; preds = %29, %28
  %27 = phi i1 [ true, %28 ], [ %31, %29 ]
  br i1 %27, label %32, label %34

28:                                               ; preds = %2
  br label %26

29:                                               ; preds = %2
  %30 = sub i16 %19, 1
  %31 = icmp uge i16 %30, 31743
  br label %26

32:                                               ; preds = %26
  %33 = icmp ugt i16 %17, 31744
  br i1 %33, label %37, label %41

34:                                               ; preds = %26
  br label %24

35:                                               ; preds = %41
  %36 = icmp ugt i16 %19, 31744
  br i1 %36, label %44, label %48

37:                                               ; preds = %32
  %38 = bitcast half %0 to i16
  %39 = or i16 %38, 512
  %40 = bitcast i16 %39 to half
  br label %22

41:                                               ; preds = %32
  br label %35

42:                                               ; preds = %48
  %43 = icmp eq i16 %17, 31744
  br i1 %43, label %51, label %56

44:                                               ; preds = %35
  %45 = bitcast half %1 to i16
  %46 = or i16 %45, 512
  %47 = bitcast i16 %46 to half
  br label %22

48:                                               ; preds = %35
  br label %42

49:                                               ; preds = %56
  %50 = icmp eq i16 %19, 31744
  br i1 %50, label %62, label %63

51:                                               ; preds = %42
  %52 = bitcast half %0 to i16
  %53 = bitcast half %1 to i16
  %54 = xor i16 %52, %53
  %55 = icmp eq i16 %54, -32768
  br i1 %55, label %57, label %59

56:                                               ; preds = %42
  br label %49

57:                                               ; preds = %51
  %58 = bitcast i16 %13 to half
  br label %22

59:                                               ; preds = %51
  br label %22

60:                                               ; preds = %63
  %61 = icmp eq i16 %17, 0
  br i1 %61, label %66, label %68

62:                                               ; preds = %49
  br label %22

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %68
  %65 = icmp eq i16 %19, 0
  br i1 %65, label %76, label %77

66:                                               ; preds = %60
  %67 = icmp eq i16 %19, 0
  br i1 %67, label %69, label %74

68:                                               ; preds = %60
  br label %64

69:                                               ; preds = %66
  %70 = bitcast half %0 to i16
  %71 = bitcast half %1 to i16
  %72 = and i16 %70, %71
  %73 = bitcast i16 %72 to half
  br label %22

74:                                               ; preds = %66
  br label %22

75:                                               ; preds = %77
  br label %24

76:                                               ; preds = %64
  br label %22

77:                                               ; preds = %64
  br label %75

78:                                               ; preds = %96, %93
  %79 = load i16, ptr %9, align 2
  %80 = lshr i16 %79, 10
  %81 = and i16 %80, 31
  %82 = zext i16 %81 to i32
  store i32 %82, ptr %7, align 4
  %83 = load i16, ptr %8, align 2
  %84 = lshr i16 %83, 10
  %85 = and i16 %84, 31
  %86 = zext i16 %85 to i32
  store i32 %86, ptr %6, align 4
  %87 = load i16, ptr %9, align 2
  %88 = and i16 %87, 1023
  store i16 %88, ptr %5, align 2
  %89 = load i16, ptr %8, align 2
  %90 = and i16 %89, 1023
  store i16 %90, ptr %4, align 2
  %91 = load i32, ptr %7, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %100, label %102

93:                                               ; preds = %24
  %94 = load i16, ptr %9, align 2
  %95 = load i16, ptr %8, align 2
  store i16 %95, ptr %9, align 2
  store i16 %94, ptr %8, align 2
  br label %78

96:                                               ; preds = %24
  br label %78

97:                                               ; preds = %102, %100
  %98 = load i32, ptr %6, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %121, label %123

100:                                              ; preds = %78
  %101 = call fastcc i32 @compiler_rt.common.normalize__anon_3655(ptr nonnull align 2 %5)
  store i32 %101, ptr %7, align 4
  br label %97

102:                                              ; preds = %78
  br label %97

103:                                              ; preds = %123, %121
  %104 = load i16, ptr %9, align 2
  %105 = and i16 %104, -32768
  %106 = load i16, ptr %9, align 2
  %107 = load i16, ptr %8, align 2
  %108 = xor i16 %106, %107
  %109 = and i16 %108, -32768
  %110 = icmp ne i16 %109, 0
  %111 = load i16, ptr %5, align 2
  %112 = or i16 %111, 1024
  %113 = shl i16 %112, 3
  store i16 %113, ptr %5, align 2
  %114 = load i16, ptr %4, align 2
  %115 = or i16 %114, 1024
  %116 = shl i16 %115, 3
  store i16 %116, ptr %4, align 2
  %117 = load i32, ptr %7, align 4
  %118 = load i32, ptr %6, align 4
  %119 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %117, i32 %118)
  %120 = extractvalue { i32, i1 } %119, 1
  br i1 %120, label %124, label %125

121:                                              ; preds = %97
  %122 = call fastcc i32 @compiler_rt.common.normalize__anon_3655(ptr nonnull align 2 %4)
  store i32 %122, ptr %6, align 4
  br label %103

123:                                              ; preds = %97
  br label %103

124:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %103
  %126 = extractvalue { i32, i1 } %119, 0
  %127 = icmp sge i32 %126, 0
  br i1 %127, label %130, label %131

128:                                              ; preds = %130
  %129 = icmp ne i32 %126, 0
  br i1 %129, label %133, label %135

130:                                              ; preds = %125
  br label %128

131:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

132:                                              ; preds = %135, %136
  br i1 %110, label %166, label %171

133:                                              ; preds = %128
  %134 = icmp ult i32 %126, 16
  br i1 %134, label %137, label %141

135:                                              ; preds = %128
  br label %132

136:                                              ; preds = %141, %142
  br label %132

137:                                              ; preds = %133
  %138 = load i16, ptr %4, align 2
  %139 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16, i32 %126)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %149, label %150

141:                                              ; preds = %133
  store i16 1, ptr %4, align 2
  br label %136

142:                                              ; preds = %162, %161
  %143 = phi i16 [ 1, %161 ], [ 0, %162 ]
  %144 = load i16, ptr %4, align 2
  %145 = trunc i32 %126 to i4
  %146 = zext i4 %145 to i16
  %147 = lshr i16 %144, %146
  %148 = or i16 %147, %143
  store i16 %148, ptr %4, align 2
  br label %136

149:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

150:                                              ; preds = %137
  %151 = extractvalue { i32, i1 } %139, 0
  %152 = sub i32 15, %151
  %153 = icmp ule i32 %152, 15
  br i1 %153, label %159, label %160

154:                                              ; preds = %159
  %155 = trunc i32 %151 to i4
  %156 = zext i4 %155 to i16
  %157 = shl i16 %138, %156
  %158 = icmp ne i16 %157, 0
  br i1 %158, label %161, label %162

159:                                              ; preds = %150
  br label %154

160:                                              ; preds = %150
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

161:                                              ; preds = %154
  br label %142

162:                                              ; preds = %154
  br label %142

163:                                              ; preds = %219, %186
  %164 = load i32, ptr %7, align 4
  %165 = icmp sge i32 %164, 31
  br i1 %165, label %236, label %239

166:                                              ; preds = %132
  %167 = load i16, ptr %5, align 2
  %168 = load i16, ptr %4, align 2
  %169 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 %167, i16 %168)
  %170 = extractvalue { i16, i1 } %169, 1
  br i1 %170, label %176, label %177

171:                                              ; preds = %132
  %172 = load i16, ptr %5, align 2
  %173 = load i16, ptr %4, align 2
  %174 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %172, i16 %173)
  %175 = extractvalue { i16, i1 } %174, 1
  br i1 %175, label %213, label %214

176:                                              ; preds = %166
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %166
  %178 = extractvalue { i16, i1 } %169, 0
  store i16 %178, ptr %5, align 2
  %179 = load i16, ptr %5, align 2
  %180 = icmp eq i16 %179, 0
  br i1 %180, label %184, label %185

181:                                              ; preds = %185
  %182 = load i16, ptr %5, align 2
  %183 = icmp ult i16 %182, 8192
  br i1 %183, label %187, label %194

184:                                              ; preds = %177
  br label %22

185:                                              ; preds = %177
  br label %181

186:                                              ; preds = %194, %211
  br label %163

187:                                              ; preds = %181
  %188 = load i16, ptr %5, align 2
  %189 = call i16 @llvm.ctlz.i16(i16 %188, i1 false)
  %190 = trunc i16 %189 to i5
  %191 = zext i5 %190 to i32
  %192 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %191, i32 2)
  %193 = extractvalue { i32, i1 } %192, 1
  br i1 %193, label %195, label %196

194:                                              ; preds = %181
  br label %186

195:                                              ; preds = %187
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

196:                                              ; preds = %187
  %197 = extractvalue { i32, i1 } %192, 0
  %198 = load i16, ptr %5, align 2
  %199 = sub i32 15, %197
  %200 = icmp ule i32 %199, 15
  br i1 %200, label %208, label %209

201:                                              ; preds = %208
  %202 = trunc i32 %197 to i4
  %203 = zext i4 %202 to i16
  %204 = shl i16 %198, %203
  store i16 %204, ptr %5, align 2
  %205 = load i32, ptr %7, align 4
  %206 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %205, i32 %197)
  %207 = extractvalue { i32, i1 } %206, 1
  br i1 %207, label %210, label %211

208:                                              ; preds = %196
  br label %201

209:                                              ; preds = %196
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

210:                                              ; preds = %201
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

211:                                              ; preds = %201
  %212 = extractvalue { i32, i1 } %206, 0
  store i32 %212, ptr %7, align 4
  br label %186

213:                                              ; preds = %171
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

214:                                              ; preds = %171
  %215 = extractvalue { i16, i1 } %174, 0
  store i16 %215, ptr %5, align 2
  %216 = load i16, ptr %5, align 2
  %217 = and i16 %216, 16384
  %218 = icmp ne i16 %217, 0
  br i1 %218, label %220, label %229

219:                                              ; preds = %229, %231
  br label %163

220:                                              ; preds = %214
  %221 = load i16, ptr %5, align 2
  %222 = and i16 %221, 1
  %223 = load i16, ptr %5, align 2
  %224 = lshr i16 %223, 1
  %225 = or i16 %224, %222
  store i16 %225, ptr %5, align 2
  %226 = load i32, ptr %7, align 4
  %227 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %226, i32 1)
  %228 = extractvalue { i32, i1 } %227, 1
  br i1 %228, label %230, label %231

229:                                              ; preds = %214
  br label %219

230:                                              ; preds = %220
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

231:                                              ; preds = %220
  %232 = extractvalue { i32, i1 } %227, 0
  store i32 %232, ptr %7, align 4
  br label %219

233:                                              ; preds = %239
  %234 = load i32, ptr %7, align 4
  %235 = icmp sle i32 %234, 0
  br i1 %235, label %250, label %255

236:                                              ; preds = %163
  %237 = or i16 31744, %105
  %238 = bitcast i16 %237 to half
  br label %22

239:                                              ; preds = %163
  br label %233

240:                                              ; preds = %255
  %241 = load i16, ptr %5, align 2
  %242 = and i16 %241, 7
  %243 = load i16, ptr %5, align 2
  %244 = lshr i16 %243, 3
  %245 = and i16 %244, 1023
  store i16 %245, ptr %3, align 2
  %246 = load i16, ptr %3, align 2
  %247 = load i32, ptr %7, align 4
  %248 = sub i32 65535, %247
  %249 = icmp ule i32 %248, 65535
  br i1 %249, label %277, label %278

250:                                              ; preds = %233
  %251 = load i16, ptr %5, align 2
  %252 = load i32, ptr %7, align 4
  %253 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %252)
  %254 = extractvalue { i32, i1 } %253, 1
  br i1 %254, label %256, label %257

255:                                              ; preds = %233
  br label %240

256:                                              ; preds = %250
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

257:                                              ; preds = %250
  %258 = extractvalue { i32, i1 } %253, 0
  %259 = sub i32 15, %258
  %260 = icmp ule i32 %259, 15
  br i1 %260, label %268, label %269

261:                                              ; preds = %268
  %262 = trunc i32 %258 to i4
  %263 = zext i4 %262 to i16
  %264 = lshr i16 %251, %263
  store i16 %264, ptr %5, align 2
  %265 = load i16, ptr %5, align 2
  %266 = or i16 %105, %265
  %267 = bitcast i16 %266 to half
  br label %22

268:                                              ; preds = %257
  br label %261

269:                                              ; preds = %257
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

270:                                              ; preds = %277
  %271 = trunc i32 %247 to i16
  %272 = shl i16 %271, 10
  %273 = or i16 %246, %272
  store i16 %273, ptr %3, align 2
  %274 = load i16, ptr %3, align 2
  %275 = or i16 %274, %105
  store i16 %275, ptr %3, align 2
  %276 = icmp ugt i16 %242, 4
  br i1 %276, label %281, label %285

277:                                              ; preds = %240
  br label %270

278:                                              ; preds = %240
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

279:                                              ; preds = %285, %287
  %280 = icmp eq i16 %242, 4
  br i1 %280, label %292, label %298

281:                                              ; preds = %270
  %282 = load i16, ptr %3, align 2
  %283 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %282, i16 1)
  %284 = extractvalue { i16, i1 } %283, 1
  br i1 %284, label %286, label %287

285:                                              ; preds = %270
  br label %279

286:                                              ; preds = %281
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

287:                                              ; preds = %281
  %288 = extractvalue { i16, i1 } %283, 0
  store i16 %288, ptr %3, align 2
  br label %279

289:                                              ; preds = %298, %300
  %290 = load i16, ptr %3, align 2
  %291 = bitcast i16 %290 to half
  br label %22

292:                                              ; preds = %279
  %293 = load i16, ptr %3, align 2
  %294 = load i16, ptr %3, align 2
  %295 = and i16 %294, 1
  %296 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %293, i16 %295)
  %297 = extractvalue { i16, i1 } %296, 1
  br i1 %297, label %299, label %300

298:                                              ; preds = %279
  br label %289

299:                                              ; preds = %292
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

300:                                              ; preds = %292
  %301 = extractvalue { i16, i1 } %296, 0
  store i16 %301, ptr %3, align 2
  br label %289
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3655(ptr nonnull align 2 %0) unnamed_addr #0 {
  %2 = load i16, ptr %0, align 2
  %3 = call i16 @llvm.ctlz.i16(i16 %2, i1 false)
  %4 = trunc i16 %3 to i5
  %5 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %4, i5 5)
  %6 = extractvalue { i5, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i5, i1 } %5, 0
  %10 = load i16, ptr %0, align 2
  %11 = sub i5 15, %9
  %12 = icmp ule i5 %11, 15
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i5 %9 to i4
  %15 = zext i4 %14 to i16
  %16 = shl i16 %10, %15
  store i16 %16, ptr %0, align 2
  %17 = zext i5 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @149)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__addsf3(float %0, float %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca float, align 4
  store float 0x7FF0000020000000, ptr %10, align 4
  %11 = load float, ptr %10, align 4
  %12 = bitcast float %11 to i32
  %13 = or i32 %12, 4194304
  %14 = bitcast float %0 to i32
  store i32 %14, ptr %9, align 4
  %15 = bitcast float %1 to i32
  store i32 %15, ptr %8, align 4
  %16 = load i32, ptr %9, align 4
  %17 = and i32 %16, 2147483647
  %18 = load i32, ptr %8, align 4
  %19 = and i32 %18, 2147483647
  %20 = sub i32 %17, 1
  %21 = icmp uge i32 %20, 2139095039
  br i1 %21, label %28, label %29

22:                                               ; preds = %295, %268, %244, %192, %76, %74, %69, %62, %59, %57, %44, %37
  %23 = phi float [ %40, %37 ], [ %47, %44 ], [ %58, %57 ], [ %0, %59 ], [ %1, %62 ], [ %73, %69 ], [ %1, %74 ], [ %0, %76 ], [ 0.000000e+00, %192 ], [ %246, %244 ], [ %274, %268 ], [ %297, %295 ]
  ret float %23

24:                                               ; preds = %34, %75
  %25 = icmp ugt i32 %19, %17
  br i1 %25, label %84, label %87

26:                                               ; preds = %29, %28
  %27 = phi i1 [ true, %28 ], [ %31, %29 ]
  br i1 %27, label %32, label %34

28:                                               ; preds = %2
  br label %26

29:                                               ; preds = %2
  %30 = sub i32 %19, 1
  %31 = icmp uge i32 %30, 2139095039
  br label %26

32:                                               ; preds = %26
  %33 = icmp ugt i32 %17, 2139095040
  br i1 %33, label %37, label %41

34:                                               ; preds = %26
  br label %24

35:                                               ; preds = %41
  %36 = icmp ugt i32 %19, 2139095040
  br i1 %36, label %44, label %48

37:                                               ; preds = %32
  %38 = bitcast float %0 to i32
  %39 = or i32 %38, 4194304
  %40 = bitcast i32 %39 to float
  br label %22

41:                                               ; preds = %32
  br label %35

42:                                               ; preds = %48
  %43 = icmp eq i32 %17, 2139095040
  br i1 %43, label %51, label %56

44:                                               ; preds = %35
  %45 = bitcast float %1 to i32
  %46 = or i32 %45, 4194304
  %47 = bitcast i32 %46 to float
  br label %22

48:                                               ; preds = %35
  br label %42

49:                                               ; preds = %56
  %50 = icmp eq i32 %19, 2139095040
  br i1 %50, label %62, label %63

51:                                               ; preds = %42
  %52 = bitcast float %0 to i32
  %53 = bitcast float %1 to i32
  %54 = xor i32 %52, %53
  %55 = icmp eq i32 %54, -2147483648
  br i1 %55, label %57, label %59

56:                                               ; preds = %42
  br label %49

57:                                               ; preds = %51
  %58 = bitcast i32 %13 to float
  br label %22

59:                                               ; preds = %51
  br label %22

60:                                               ; preds = %63
  %61 = icmp eq i32 %17, 0
  br i1 %61, label %66, label %68

62:                                               ; preds = %49
  br label %22

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %68
  %65 = icmp eq i32 %19, 0
  br i1 %65, label %76, label %77

66:                                               ; preds = %60
  %67 = icmp eq i32 %19, 0
  br i1 %67, label %69, label %74

68:                                               ; preds = %60
  br label %64

69:                                               ; preds = %66
  %70 = bitcast float %0 to i32
  %71 = bitcast float %1 to i32
  %72 = and i32 %70, %71
  %73 = bitcast i32 %72 to float
  br label %22

74:                                               ; preds = %66
  br label %22

75:                                               ; preds = %77
  br label %24

76:                                               ; preds = %64
  br label %22

77:                                               ; preds = %64
  br label %75

78:                                               ; preds = %87, %84
  %79 = load i32, ptr %9, align 4
  %80 = lshr i32 %79, 23
  %81 = and i32 %80, 255
  %82 = sub i32 2147483647, %81
  %83 = icmp ule i32 %82, 2147483647
  br i1 %83, label %94, label %95

84:                                               ; preds = %24
  %85 = load i32, ptr %9, align 4
  %86 = load i32, ptr %8, align 4
  store i32 %86, ptr %9, align 4
  store i32 %85, ptr %8, align 4
  br label %78

87:                                               ; preds = %24
  br label %78

88:                                               ; preds = %94
  store i32 %81, ptr %7, align 4
  %89 = load i32, ptr %8, align 4
  %90 = lshr i32 %89, 23
  %91 = and i32 %90, 255
  %92 = sub i32 2147483647, %91
  %93 = icmp ule i32 %92, 2147483647
  br i1 %93, label %103, label %104

94:                                               ; preds = %78
  br label %88

95:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

96:                                               ; preds = %103
  store i32 %91, ptr %6, align 4
  %97 = load i32, ptr %9, align 4
  %98 = and i32 %97, 8388607
  store i32 %98, ptr %5, align 4
  %99 = load i32, ptr %8, align 4
  %100 = and i32 %99, 8388607
  store i32 %100, ptr %4, align 4
  %101 = load i32, ptr %7, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %108, label %110

103:                                              ; preds = %88
  br label %96

104:                                              ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

105:                                              ; preds = %110, %108
  %106 = load i32, ptr %6, align 4
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %129, label %131

108:                                              ; preds = %96
  %109 = call fastcc i32 @compiler_rt.common.normalize__anon_3656(ptr nonnull align 4 %5)
  store i32 %109, ptr %7, align 4
  br label %105

110:                                              ; preds = %96
  br label %105

111:                                              ; preds = %131, %129
  %112 = load i32, ptr %9, align 4
  %113 = and i32 %112, -2147483648
  %114 = load i32, ptr %9, align 4
  %115 = load i32, ptr %8, align 4
  %116 = xor i32 %114, %115
  %117 = and i32 %116, -2147483648
  %118 = icmp ne i32 %117, 0
  %119 = load i32, ptr %5, align 4
  %120 = or i32 %119, 8388608
  %121 = shl i32 %120, 3
  store i32 %121, ptr %5, align 4
  %122 = load i32, ptr %4, align 4
  %123 = or i32 %122, 8388608
  %124 = shl i32 %123, 3
  store i32 %124, ptr %4, align 4
  %125 = load i32, ptr %7, align 4
  %126 = load i32, ptr %6, align 4
  %127 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %125, i32 %126)
  %128 = extractvalue { i32, i1 } %127, 1
  br i1 %128, label %132, label %133

129:                                              ; preds = %105
  %130 = call fastcc i32 @compiler_rt.common.normalize__anon_3656(ptr nonnull align 4 %4)
  store i32 %130, ptr %6, align 4
  br label %111

131:                                              ; preds = %105
  br label %111

132:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

133:                                              ; preds = %111
  %134 = extractvalue { i32, i1 } %127, 0
  %135 = icmp sge i32 %134, 0
  br i1 %135, label %138, label %139

136:                                              ; preds = %138
  %137 = icmp ne i32 %134, 0
  br i1 %137, label %141, label %143

138:                                              ; preds = %133
  br label %136

139:                                              ; preds = %133
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

140:                                              ; preds = %143, %144
  br i1 %118, label %174, label %179

141:                                              ; preds = %136
  %142 = icmp ult i32 %134, 32
  br i1 %142, label %145, label %149

143:                                              ; preds = %136
  br label %140

144:                                              ; preds = %149, %150
  br label %140

145:                                              ; preds = %141
  %146 = load i32, ptr %4, align 4
  %147 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 32, i32 %134)
  %148 = extractvalue { i32, i1 } %147, 1
  br i1 %148, label %157, label %158

149:                                              ; preds = %141
  store i32 1, ptr %4, align 4
  br label %144

150:                                              ; preds = %170, %169
  %151 = phi i32 [ 1, %169 ], [ 0, %170 ]
  %152 = load i32, ptr %4, align 4
  %153 = trunc i32 %134 to i5
  %154 = zext i5 %153 to i32
  %155 = lshr i32 %152, %154
  %156 = or i32 %155, %151
  store i32 %156, ptr %4, align 4
  br label %144

157:                                              ; preds = %145
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

158:                                              ; preds = %145
  %159 = extractvalue { i32, i1 } %147, 0
  %160 = sub i32 31, %159
  %161 = icmp ule i32 %160, 31
  br i1 %161, label %167, label %168

162:                                              ; preds = %167
  %163 = trunc i32 %159 to i5
  %164 = zext i5 %163 to i32
  %165 = shl i32 %146, %164
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %169, label %170

167:                                              ; preds = %158
  br label %162

168:                                              ; preds = %158
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

169:                                              ; preds = %162
  br label %150

170:                                              ; preds = %162
  br label %150

171:                                              ; preds = %227, %194
  %172 = load i32, ptr %7, align 4
  %173 = icmp sge i32 %172, 255
  br i1 %173, label %244, label %247

174:                                              ; preds = %140
  %175 = load i32, ptr %5, align 4
  %176 = load i32, ptr %4, align 4
  %177 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %175, i32 %176)
  %178 = extractvalue { i32, i1 } %177, 1
  br i1 %178, label %184, label %185

179:                                              ; preds = %140
  %180 = load i32, ptr %5, align 4
  %181 = load i32, ptr %4, align 4
  %182 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %180, i32 %181)
  %183 = extractvalue { i32, i1 } %182, 1
  br i1 %183, label %221, label %222

184:                                              ; preds = %174
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

185:                                              ; preds = %174
  %186 = extractvalue { i32, i1 } %177, 0
  store i32 %186, ptr %5, align 4
  %187 = load i32, ptr %5, align 4
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %192, label %193

189:                                              ; preds = %193
  %190 = load i32, ptr %5, align 4
  %191 = icmp ult i32 %190, 67108864
  br i1 %191, label %195, label %202

192:                                              ; preds = %185
  br label %22

193:                                              ; preds = %185
  br label %189

194:                                              ; preds = %202, %219
  br label %171

195:                                              ; preds = %189
  %196 = load i32, ptr %5, align 4
  %197 = call i32 @llvm.ctlz.i32(i32 %196, i1 false)
  %198 = trunc i32 %197 to i6
  %199 = zext i6 %198 to i32
  %200 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %199, i32 5)
  %201 = extractvalue { i32, i1 } %200, 1
  br i1 %201, label %203, label %204

202:                                              ; preds = %189
  br label %194

203:                                              ; preds = %195
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

204:                                              ; preds = %195
  %205 = extractvalue { i32, i1 } %200, 0
  %206 = load i32, ptr %5, align 4
  %207 = sub i32 31, %205
  %208 = icmp ule i32 %207, 31
  br i1 %208, label %216, label %217

209:                                              ; preds = %216
  %210 = trunc i32 %205 to i5
  %211 = zext i5 %210 to i32
  %212 = shl i32 %206, %211
  store i32 %212, ptr %5, align 4
  %213 = load i32, ptr %7, align 4
  %214 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %213, i32 %205)
  %215 = extractvalue { i32, i1 } %214, 1
  br i1 %215, label %218, label %219

216:                                              ; preds = %204
  br label %209

217:                                              ; preds = %204
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

218:                                              ; preds = %209
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

219:                                              ; preds = %209
  %220 = extractvalue { i32, i1 } %214, 0
  store i32 %220, ptr %7, align 4
  br label %194

221:                                              ; preds = %179
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

222:                                              ; preds = %179
  %223 = extractvalue { i32, i1 } %182, 0
  store i32 %223, ptr %5, align 4
  %224 = load i32, ptr %5, align 4
  %225 = and i32 %224, 134217728
  %226 = icmp ne i32 %225, 0
  br i1 %226, label %228, label %237

227:                                              ; preds = %237, %239
  br label %171

228:                                              ; preds = %222
  %229 = load i32, ptr %5, align 4
  %230 = and i32 %229, 1
  %231 = load i32, ptr %5, align 4
  %232 = lshr i32 %231, 1
  %233 = or i32 %232, %230
  store i32 %233, ptr %5, align 4
  %234 = load i32, ptr %7, align 4
  %235 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %234, i32 1)
  %236 = extractvalue { i32, i1 } %235, 1
  br i1 %236, label %238, label %239

237:                                              ; preds = %222
  br label %227

238:                                              ; preds = %228
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

239:                                              ; preds = %228
  %240 = extractvalue { i32, i1 } %235, 0
  store i32 %240, ptr %7, align 4
  br label %227

241:                                              ; preds = %247
  %242 = load i32, ptr %7, align 4
  %243 = icmp sle i32 %242, 0
  br i1 %243, label %257, label %262

244:                                              ; preds = %171
  %245 = or i32 2139095040, %113
  %246 = bitcast i32 %245 to float
  br label %22

247:                                              ; preds = %171
  br label %241

248:                                              ; preds = %262
  %249 = load i32, ptr %5, align 4
  %250 = and i32 %249, 7
  %251 = load i32, ptr %5, align 4
  %252 = lshr i32 %251, 3
  %253 = and i32 %252, 8388607
  store i32 %253, ptr %3, align 4
  %254 = load i32, ptr %3, align 4
  %255 = load i32, ptr %7, align 4
  %256 = icmp sge i32 %255, 0
  br i1 %256, label %283, label %284

257:                                              ; preds = %241
  %258 = load i32, ptr %5, align 4
  %259 = load i32, ptr %7, align 4
  %260 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %259)
  %261 = extractvalue { i32, i1 } %260, 1
  br i1 %261, label %263, label %264

262:                                              ; preds = %241
  br label %248

263:                                              ; preds = %257
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

264:                                              ; preds = %257
  %265 = extractvalue { i32, i1 } %260, 0
  %266 = sub i32 31, %265
  %267 = icmp ule i32 %266, 31
  br i1 %267, label %275, label %276

268:                                              ; preds = %275
  %269 = trunc i32 %265 to i5
  %270 = zext i5 %269 to i32
  %271 = lshr i32 %258, %270
  store i32 %271, ptr %5, align 4
  %272 = load i32, ptr %5, align 4
  %273 = or i32 %113, %272
  %274 = bitcast i32 %273 to float
  br label %22

275:                                              ; preds = %264
  br label %268

276:                                              ; preds = %264
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

277:                                              ; preds = %283
  %278 = shl i32 %255, 23
  %279 = or i32 %254, %278
  store i32 %279, ptr %3, align 4
  %280 = load i32, ptr %3, align 4
  %281 = or i32 %280, %113
  store i32 %281, ptr %3, align 4
  %282 = icmp ugt i32 %250, 4
  br i1 %282, label %287, label %291

283:                                              ; preds = %248
  br label %277

284:                                              ; preds = %248
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

285:                                              ; preds = %291, %293
  %286 = icmp eq i32 %250, 4
  br i1 %286, label %298, label %304

287:                                              ; preds = %277
  %288 = load i32, ptr %3, align 4
  %289 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %288, i32 1)
  %290 = extractvalue { i32, i1 } %289, 1
  br i1 %290, label %292, label %293

291:                                              ; preds = %277
  br label %285

292:                                              ; preds = %287
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

293:                                              ; preds = %287
  %294 = extractvalue { i32, i1 } %289, 0
  store i32 %294, ptr %3, align 4
  br label %285

295:                                              ; preds = %304, %306
  %296 = load i32, ptr %3, align 4
  %297 = bitcast i32 %296 to float
  br label %22

298:                                              ; preds = %285
  %299 = load i32, ptr %3, align 4
  %300 = load i32, ptr %3, align 4
  %301 = and i32 %300, 1
  %302 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %299, i32 %301)
  %303 = extractvalue { i32, i1 } %302, 1
  br i1 %303, label %305, label %306

304:                                              ; preds = %285
  br label %295

305:                                              ; preds = %298
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

306:                                              ; preds = %298
  %307 = extractvalue { i32, i1 } %302, 0
  store i32 %307, ptr %3, align 4
  br label %295
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3656(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = load i32, ptr %0, align 4
  %3 = call i32 @llvm.ctlz.i32(i32 %2, i1 false)
  %4 = trunc i32 %3 to i6
  %5 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %4, i6 8)
  %6 = extractvalue { i6, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i6, i1 } %5, 0
  %10 = load i32, ptr %0, align 4
  %11 = sub i6 31, %9
  %12 = icmp ule i6 %11, 31
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i6 %9 to i5
  %15 = zext i5 %14 to i32
  %16 = shl i32 %10, %15
  store i32 %16, ptr %0, align 4
  %17 = zext i6 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @150)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__adddf3(double %0, double %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  store double 0x7FF0000000000001, ptr %10, align 8
  %11 = load double, ptr %10, align 8
  %12 = bitcast double %11 to i64
  %13 = or i64 %12, 2251799813685248
  %14 = bitcast double %0 to i64
  store i64 %14, ptr %9, align 8
  %15 = bitcast double %1 to i64
  store i64 %15, ptr %8, align 8
  %16 = load i64, ptr %9, align 8
  %17 = and i64 %16, 9223372036854775807
  %18 = load i64, ptr %8, align 8
  %19 = and i64 %18, 9223372036854775807
  %20 = sub i64 %17, 1
  %21 = icmp uge i64 %20, 9218868437227405311
  br i1 %21, label %28, label %29

22:                                               ; preds = %298, %270, %246, %194, %76, %74, %69, %62, %59, %57, %44, %37
  %23 = phi double [ %40, %37 ], [ %47, %44 ], [ %58, %57 ], [ %0, %59 ], [ %1, %62 ], [ %73, %69 ], [ %1, %74 ], [ %0, %76 ], [ 0.000000e+00, %194 ], [ %248, %246 ], [ %276, %270 ], [ %300, %298 ]
  ret double %23

24:                                               ; preds = %34, %75
  %25 = icmp ugt i64 %19, %17
  br i1 %25, label %84, label %87

26:                                               ; preds = %29, %28
  %27 = phi i1 [ true, %28 ], [ %31, %29 ]
  br i1 %27, label %32, label %34

28:                                               ; preds = %2
  br label %26

29:                                               ; preds = %2
  %30 = sub i64 %19, 1
  %31 = icmp uge i64 %30, 9218868437227405311
  br label %26

32:                                               ; preds = %26
  %33 = icmp ugt i64 %17, 9218868437227405312
  br i1 %33, label %37, label %41

34:                                               ; preds = %26
  br label %24

35:                                               ; preds = %41
  %36 = icmp ugt i64 %19, 9218868437227405312
  br i1 %36, label %44, label %48

37:                                               ; preds = %32
  %38 = bitcast double %0 to i64
  %39 = or i64 %38, 2251799813685248
  %40 = bitcast i64 %39 to double
  br label %22

41:                                               ; preds = %32
  br label %35

42:                                               ; preds = %48
  %43 = icmp eq i64 %17, 9218868437227405312
  br i1 %43, label %51, label %56

44:                                               ; preds = %35
  %45 = bitcast double %1 to i64
  %46 = or i64 %45, 2251799813685248
  %47 = bitcast i64 %46 to double
  br label %22

48:                                               ; preds = %35
  br label %42

49:                                               ; preds = %56
  %50 = icmp eq i64 %19, 9218868437227405312
  br i1 %50, label %62, label %63

51:                                               ; preds = %42
  %52 = bitcast double %0 to i64
  %53 = bitcast double %1 to i64
  %54 = xor i64 %52, %53
  %55 = icmp eq i64 %54, -9223372036854775808
  br i1 %55, label %57, label %59

56:                                               ; preds = %42
  br label %49

57:                                               ; preds = %51
  %58 = bitcast i64 %13 to double
  br label %22

59:                                               ; preds = %51
  br label %22

60:                                               ; preds = %63
  %61 = icmp eq i64 %17, 0
  br i1 %61, label %66, label %68

62:                                               ; preds = %49
  br label %22

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %68
  %65 = icmp eq i64 %19, 0
  br i1 %65, label %76, label %77

66:                                               ; preds = %60
  %67 = icmp eq i64 %19, 0
  br i1 %67, label %69, label %74

68:                                               ; preds = %60
  br label %64

69:                                               ; preds = %66
  %70 = bitcast double %0 to i64
  %71 = bitcast double %1 to i64
  %72 = and i64 %70, %71
  %73 = bitcast i64 %72 to double
  br label %22

74:                                               ; preds = %66
  br label %22

75:                                               ; preds = %77
  br label %24

76:                                               ; preds = %64
  br label %22

77:                                               ; preds = %64
  br label %75

78:                                               ; preds = %87, %84
  %79 = load i64, ptr %9, align 8
  %80 = lshr i64 %79, 52
  %81 = and i64 %80, 2047
  %82 = sub i64 2147483647, %81
  %83 = icmp ule i64 %82, 2147483647
  br i1 %83, label %95, label %96

84:                                               ; preds = %24
  %85 = load i64, ptr %9, align 8
  %86 = load i64, ptr %8, align 8
  store i64 %86, ptr %9, align 8
  store i64 %85, ptr %8, align 8
  br label %78

87:                                               ; preds = %24
  br label %78

88:                                               ; preds = %95
  %89 = trunc i64 %81 to i32
  store i32 %89, ptr %7, align 4
  %90 = load i64, ptr %8, align 8
  %91 = lshr i64 %90, 52
  %92 = and i64 %91, 2047
  %93 = sub i64 2147483647, %92
  %94 = icmp ule i64 %93, 2147483647
  br i1 %94, label %105, label %106

95:                                               ; preds = %78
  br label %88

96:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

97:                                               ; preds = %105
  %98 = trunc i64 %92 to i32
  store i32 %98, ptr %6, align 4
  %99 = load i64, ptr %9, align 8
  %100 = and i64 %99, 4503599627370495
  store i64 %100, ptr %5, align 8
  %101 = load i64, ptr %8, align 8
  %102 = and i64 %101, 4503599627370495
  store i64 %102, ptr %4, align 8
  %103 = load i32, ptr %7, align 4
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %110, label %112

105:                                              ; preds = %88
  br label %97

106:                                              ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

107:                                              ; preds = %112, %110
  %108 = load i32, ptr %6, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %131, label %133

110:                                              ; preds = %97
  %111 = call fastcc i32 @compiler_rt.common.normalize__anon_3657(ptr nonnull align 8 %5)
  store i32 %111, ptr %7, align 4
  br label %107

112:                                              ; preds = %97
  br label %107

113:                                              ; preds = %133, %131
  %114 = load i64, ptr %9, align 8
  %115 = and i64 %114, -9223372036854775808
  %116 = load i64, ptr %9, align 8
  %117 = load i64, ptr %8, align 8
  %118 = xor i64 %116, %117
  %119 = and i64 %118, -9223372036854775808
  %120 = icmp ne i64 %119, 0
  %121 = load i64, ptr %5, align 8
  %122 = or i64 %121, 4503599627370496
  %123 = shl i64 %122, 3
  store i64 %123, ptr %5, align 8
  %124 = load i64, ptr %4, align 8
  %125 = or i64 %124, 4503599627370496
  %126 = shl i64 %125, 3
  store i64 %126, ptr %4, align 8
  %127 = load i32, ptr %7, align 4
  %128 = load i32, ptr %6, align 4
  %129 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %127, i32 %128)
  %130 = extractvalue { i32, i1 } %129, 1
  br i1 %130, label %134, label %135

131:                                              ; preds = %107
  %132 = call fastcc i32 @compiler_rt.common.normalize__anon_3657(ptr nonnull align 8 %4)
  store i32 %132, ptr %6, align 4
  br label %113

133:                                              ; preds = %107
  br label %113

134:                                              ; preds = %113
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

135:                                              ; preds = %113
  %136 = extractvalue { i32, i1 } %129, 0
  %137 = icmp sge i32 %136, 0
  br i1 %137, label %140, label %141

138:                                              ; preds = %140
  %139 = icmp ne i32 %136, 0
  br i1 %139, label %143, label %145

140:                                              ; preds = %135
  br label %138

141:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

142:                                              ; preds = %145, %146
  br i1 %120, label %176, label %181

143:                                              ; preds = %138
  %144 = icmp ult i32 %136, 64
  br i1 %144, label %147, label %151

145:                                              ; preds = %138
  br label %142

146:                                              ; preds = %151, %152
  br label %142

147:                                              ; preds = %143
  %148 = load i64, ptr %4, align 8
  %149 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 64, i32 %136)
  %150 = extractvalue { i32, i1 } %149, 1
  br i1 %150, label %159, label %160

151:                                              ; preds = %143
  store i64 1, ptr %4, align 8
  br label %146

152:                                              ; preds = %172, %171
  %153 = phi i64 [ 1, %171 ], [ 0, %172 ]
  %154 = load i64, ptr %4, align 8
  %155 = trunc i32 %136 to i6
  %156 = zext i6 %155 to i64
  %157 = lshr i64 %154, %156
  %158 = or i64 %157, %153
  store i64 %158, ptr %4, align 8
  br label %146

159:                                              ; preds = %147
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

160:                                              ; preds = %147
  %161 = extractvalue { i32, i1 } %149, 0
  %162 = sub i32 63, %161
  %163 = icmp ule i32 %162, 63
  br i1 %163, label %169, label %170

164:                                              ; preds = %169
  %165 = trunc i32 %161 to i6
  %166 = zext i6 %165 to i64
  %167 = shl i64 %148, %166
  %168 = icmp ne i64 %167, 0
  br i1 %168, label %171, label %172

169:                                              ; preds = %160
  br label %164

170:                                              ; preds = %160
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

171:                                              ; preds = %164
  br label %152

172:                                              ; preds = %164
  br label %152

173:                                              ; preds = %229, %196
  %174 = load i32, ptr %7, align 4
  %175 = icmp sge i32 %174, 2047
  br i1 %175, label %246, label %249

176:                                              ; preds = %142
  %177 = load i64, ptr %5, align 8
  %178 = load i64, ptr %4, align 8
  %179 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %177, i64 %178)
  %180 = extractvalue { i64, i1 } %179, 1
  br i1 %180, label %186, label %187

181:                                              ; preds = %142
  %182 = load i64, ptr %5, align 8
  %183 = load i64, ptr %4, align 8
  %184 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %182, i64 %183)
  %185 = extractvalue { i64, i1 } %184, 1
  br i1 %185, label %223, label %224

186:                                              ; preds = %176
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

187:                                              ; preds = %176
  %188 = extractvalue { i64, i1 } %179, 0
  store i64 %188, ptr %5, align 8
  %189 = load i64, ptr %5, align 8
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %194, label %195

191:                                              ; preds = %195
  %192 = load i64, ptr %5, align 8
  %193 = icmp ult i64 %192, 36028797018963968
  br i1 %193, label %197, label %204

194:                                              ; preds = %187
  br label %22

195:                                              ; preds = %187
  br label %191

196:                                              ; preds = %204, %221
  br label %173

197:                                              ; preds = %191
  %198 = load i64, ptr %5, align 8
  %199 = call i64 @llvm.ctlz.i64(i64 %198, i1 false)
  %200 = trunc i64 %199 to i7
  %201 = zext i7 %200 to i32
  %202 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %201, i32 8)
  %203 = extractvalue { i32, i1 } %202, 1
  br i1 %203, label %205, label %206

204:                                              ; preds = %191
  br label %196

205:                                              ; preds = %197
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

206:                                              ; preds = %197
  %207 = extractvalue { i32, i1 } %202, 0
  %208 = load i64, ptr %5, align 8
  %209 = sub i32 63, %207
  %210 = icmp ule i32 %209, 63
  br i1 %210, label %218, label %219

211:                                              ; preds = %218
  %212 = trunc i32 %207 to i6
  %213 = zext i6 %212 to i64
  %214 = shl i64 %208, %213
  store i64 %214, ptr %5, align 8
  %215 = load i32, ptr %7, align 4
  %216 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %215, i32 %207)
  %217 = extractvalue { i32, i1 } %216, 1
  br i1 %217, label %220, label %221

218:                                              ; preds = %206
  br label %211

219:                                              ; preds = %206
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

220:                                              ; preds = %211
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

221:                                              ; preds = %211
  %222 = extractvalue { i32, i1 } %216, 0
  store i32 %222, ptr %7, align 4
  br label %196

223:                                              ; preds = %181
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

224:                                              ; preds = %181
  %225 = extractvalue { i64, i1 } %184, 0
  store i64 %225, ptr %5, align 8
  %226 = load i64, ptr %5, align 8
  %227 = and i64 %226, 72057594037927936
  %228 = icmp ne i64 %227, 0
  br i1 %228, label %230, label %239

229:                                              ; preds = %239, %241
  br label %173

230:                                              ; preds = %224
  %231 = load i64, ptr %5, align 8
  %232 = and i64 %231, 1
  %233 = load i64, ptr %5, align 8
  %234 = lshr i64 %233, 1
  %235 = or i64 %234, %232
  store i64 %235, ptr %5, align 8
  %236 = load i32, ptr %7, align 4
  %237 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %236, i32 1)
  %238 = extractvalue { i32, i1 } %237, 1
  br i1 %238, label %240, label %241

239:                                              ; preds = %224
  br label %229

240:                                              ; preds = %230
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

241:                                              ; preds = %230
  %242 = extractvalue { i32, i1 } %237, 0
  store i32 %242, ptr %7, align 4
  br label %229

243:                                              ; preds = %249
  %244 = load i32, ptr %7, align 4
  %245 = icmp sle i32 %244, 0
  br i1 %245, label %259, label %264

246:                                              ; preds = %173
  %247 = or i64 9218868437227405312, %115
  %248 = bitcast i64 %247 to double
  br label %22

249:                                              ; preds = %173
  br label %243

250:                                              ; preds = %264
  %251 = load i64, ptr %5, align 8
  %252 = and i64 %251, 7
  %253 = load i64, ptr %5, align 8
  %254 = lshr i64 %253, 3
  %255 = and i64 %254, 4503599627370495
  store i64 %255, ptr %3, align 8
  %256 = load i64, ptr %3, align 8
  %257 = load i32, ptr %7, align 4
  %258 = icmp sge i32 %257, 0
  br i1 %258, label %286, label %287

259:                                              ; preds = %243
  %260 = load i64, ptr %5, align 8
  %261 = load i32, ptr %7, align 4
  %262 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %261)
  %263 = extractvalue { i32, i1 } %262, 1
  br i1 %263, label %265, label %266

264:                                              ; preds = %243
  br label %250

265:                                              ; preds = %259
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

266:                                              ; preds = %259
  %267 = extractvalue { i32, i1 } %262, 0
  %268 = sub i32 63, %267
  %269 = icmp ule i32 %268, 63
  br i1 %269, label %277, label %278

270:                                              ; preds = %277
  %271 = trunc i32 %267 to i6
  %272 = zext i6 %271 to i64
  %273 = lshr i64 %260, %272
  store i64 %273, ptr %5, align 8
  %274 = load i64, ptr %5, align 8
  %275 = or i64 %115, %274
  %276 = bitcast i64 %275 to double
  br label %22

277:                                              ; preds = %266
  br label %270

278:                                              ; preds = %266
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

279:                                              ; preds = %286
  %280 = sext i32 %257 to i64
  %281 = shl i64 %280, 52
  %282 = or i64 %256, %281
  store i64 %282, ptr %3, align 8
  %283 = load i64, ptr %3, align 8
  %284 = or i64 %283, %115
  store i64 %284, ptr %3, align 8
  %285 = icmp ugt i64 %252, 4
  br i1 %285, label %290, label %294

286:                                              ; preds = %250
  br label %279

287:                                              ; preds = %250
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

288:                                              ; preds = %294, %296
  %289 = icmp eq i64 %252, 4
  br i1 %289, label %301, label %307

290:                                              ; preds = %279
  %291 = load i64, ptr %3, align 8
  %292 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %291, i64 1)
  %293 = extractvalue { i64, i1 } %292, 1
  br i1 %293, label %295, label %296

294:                                              ; preds = %279
  br label %288

295:                                              ; preds = %290
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

296:                                              ; preds = %290
  %297 = extractvalue { i64, i1 } %292, 0
  store i64 %297, ptr %3, align 8
  br label %288

298:                                              ; preds = %307, %309
  %299 = load i64, ptr %3, align 8
  %300 = bitcast i64 %299 to double
  br label %22

301:                                              ; preds = %288
  %302 = load i64, ptr %3, align 8
  %303 = load i64, ptr %3, align 8
  %304 = and i64 %303, 1
  %305 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %302, i64 %304)
  %306 = extractvalue { i64, i1 } %305, 1
  br i1 %306, label %308, label %309

307:                                              ; preds = %288
  br label %298

308:                                              ; preds = %301
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

309:                                              ; preds = %301
  %310 = extractvalue { i64, i1 } %305, 0
  store i64 %310, ptr %3, align 8
  br label %298
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3657(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i64, ptr %0, align 8
  %3 = call i64 @llvm.ctlz.i64(i64 %2, i1 false)
  %4 = trunc i64 %3 to i7
  %5 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %4, i7 11)
  %6 = extractvalue { i7, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i7, i1 } %5, 0
  %10 = load i64, ptr %0, align 8
  %11 = sub i7 63, %9
  %12 = icmp ule i7 %11, 63
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i7 %9 to i6
  %15 = zext i6 %14 to i64
  %16 = shl i64 %10, %15
  store i64 %16, ptr %0, align 8
  %17 = zext i7 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @151)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__addtf3(fp128 %0, fp128 %1) #0 {
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i128, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i128, align 8
  %9 = alloca i128, align 8
  %10 = alloca fp128, align 16
  store fp128 0xL00000000000000017FFF000000000000, ptr %10, align 16
  %11 = load fp128, ptr %10, align 16
  %12 = bitcast fp128 %11 to i128
  %13 = or i128 %12, 2596148429267413814265248164610048
  %14 = bitcast fp128 %0 to i128
  store i128 %14, ptr %9, align 8
  %15 = bitcast fp128 %1 to i128
  store i128 %15, ptr %8, align 8
  %16 = load i128, ptr %9, align 8
  %17 = and i128 %16, 170141183460469231731687303715884105727
  %18 = load i128, ptr %8, align 8
  %19 = and i128 %18, 170141183460469231731687303715884105727
  %20 = sub i128 %17, 1
  %21 = icmp uge i128 %20, 170135991163610696904058773219554885631
  br i1 %21, label %28, label %29

22:                                               ; preds = %298, %270, %246, %194, %76, %74, %69, %62, %59, %57, %44, %37
  %23 = phi fp128 [ %40, %37 ], [ %47, %44 ], [ %58, %57 ], [ %0, %59 ], [ %1, %62 ], [ %73, %69 ], [ %1, %74 ], [ %0, %76 ], [ 0xL00000000000000000000000000000000, %194 ], [ %248, %246 ], [ %276, %270 ], [ %300, %298 ]
  ret fp128 %23

24:                                               ; preds = %34, %75
  %25 = icmp ugt i128 %19, %17
  br i1 %25, label %84, label %87

26:                                               ; preds = %29, %28
  %27 = phi i1 [ true, %28 ], [ %31, %29 ]
  br i1 %27, label %32, label %34

28:                                               ; preds = %2
  br label %26

29:                                               ; preds = %2
  %30 = sub i128 %19, 1
  %31 = icmp uge i128 %30, 170135991163610696904058773219554885631
  br label %26

32:                                               ; preds = %26
  %33 = icmp ugt i128 %17, 170135991163610696904058773219554885632
  br i1 %33, label %37, label %41

34:                                               ; preds = %26
  br label %24

35:                                               ; preds = %41
  %36 = icmp ugt i128 %19, 170135991163610696904058773219554885632
  br i1 %36, label %44, label %48

37:                                               ; preds = %32
  %38 = bitcast fp128 %0 to i128
  %39 = or i128 %38, 2596148429267413814265248164610048
  %40 = bitcast i128 %39 to fp128
  br label %22

41:                                               ; preds = %32
  br label %35

42:                                               ; preds = %48
  %43 = icmp eq i128 %17, 170135991163610696904058773219554885632
  br i1 %43, label %51, label %56

44:                                               ; preds = %35
  %45 = bitcast fp128 %1 to i128
  %46 = or i128 %45, 2596148429267413814265248164610048
  %47 = bitcast i128 %46 to fp128
  br label %22

48:                                               ; preds = %35
  br label %42

49:                                               ; preds = %56
  %50 = icmp eq i128 %19, 170135991163610696904058773219554885632
  br i1 %50, label %62, label %63

51:                                               ; preds = %42
  %52 = bitcast fp128 %0 to i128
  %53 = bitcast fp128 %1 to i128
  %54 = xor i128 %52, %53
  %55 = icmp eq i128 %54, -170141183460469231731687303715884105728
  br i1 %55, label %57, label %59

56:                                               ; preds = %42
  br label %49

57:                                               ; preds = %51
  %58 = bitcast i128 %13 to fp128
  br label %22

59:                                               ; preds = %51
  br label %22

60:                                               ; preds = %63
  %61 = icmp eq i128 %17, 0
  br i1 %61, label %66, label %68

62:                                               ; preds = %49
  br label %22

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %68
  %65 = icmp eq i128 %19, 0
  br i1 %65, label %76, label %77

66:                                               ; preds = %60
  %67 = icmp eq i128 %19, 0
  br i1 %67, label %69, label %74

68:                                               ; preds = %60
  br label %64

69:                                               ; preds = %66
  %70 = bitcast fp128 %0 to i128
  %71 = bitcast fp128 %1 to i128
  %72 = and i128 %70, %71
  %73 = bitcast i128 %72 to fp128
  br label %22

74:                                               ; preds = %66
  br label %22

75:                                               ; preds = %77
  br label %24

76:                                               ; preds = %64
  br label %22

77:                                               ; preds = %64
  br label %75

78:                                               ; preds = %87, %84
  %79 = load i128, ptr %9, align 8
  %80 = lshr i128 %79, 112
  %81 = and i128 %80, 32767
  %82 = sub i128 2147483647, %81
  %83 = icmp ule i128 %82, 2147483647
  br i1 %83, label %95, label %96

84:                                               ; preds = %24
  %85 = load i128, ptr %9, align 8
  %86 = load i128, ptr %8, align 8
  store i128 %86, ptr %9, align 8
  store i128 %85, ptr %8, align 8
  br label %78

87:                                               ; preds = %24
  br label %78

88:                                               ; preds = %95
  %89 = trunc i128 %81 to i32
  store i32 %89, ptr %7, align 4
  %90 = load i128, ptr %8, align 8
  %91 = lshr i128 %90, 112
  %92 = and i128 %91, 32767
  %93 = sub i128 2147483647, %92
  %94 = icmp ule i128 %93, 2147483647
  br i1 %94, label %105, label %106

95:                                               ; preds = %78
  br label %88

96:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

97:                                               ; preds = %105
  %98 = trunc i128 %92 to i32
  store i32 %98, ptr %6, align 4
  %99 = load i128, ptr %9, align 8
  %100 = and i128 %99, 5192296858534827628530496329220095
  store i128 %100, ptr %5, align 8
  %101 = load i128, ptr %8, align 8
  %102 = and i128 %101, 5192296858534827628530496329220095
  store i128 %102, ptr %4, align 8
  %103 = load i32, ptr %7, align 4
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %110, label %112

105:                                              ; preds = %88
  br label %97

106:                                              ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

107:                                              ; preds = %112, %110
  %108 = load i32, ptr %6, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %131, label %133

110:                                              ; preds = %97
  %111 = call fastcc i32 @compiler_rt.common.normalize__anon_3658(ptr nonnull align 8 %5)
  store i32 %111, ptr %7, align 4
  br label %107

112:                                              ; preds = %97
  br label %107

113:                                              ; preds = %133, %131
  %114 = load i128, ptr %9, align 8
  %115 = and i128 %114, -170141183460469231731687303715884105728
  %116 = load i128, ptr %9, align 8
  %117 = load i128, ptr %8, align 8
  %118 = xor i128 %116, %117
  %119 = and i128 %118, -170141183460469231731687303715884105728
  %120 = icmp ne i128 %119, 0
  %121 = load i128, ptr %5, align 8
  %122 = or i128 %121, 5192296858534827628530496329220096
  %123 = shl i128 %122, 3
  store i128 %123, ptr %5, align 8
  %124 = load i128, ptr %4, align 8
  %125 = or i128 %124, 5192296858534827628530496329220096
  %126 = shl i128 %125, 3
  store i128 %126, ptr %4, align 8
  %127 = load i32, ptr %7, align 4
  %128 = load i32, ptr %6, align 4
  %129 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %127, i32 %128)
  %130 = extractvalue { i32, i1 } %129, 1
  br i1 %130, label %134, label %135

131:                                              ; preds = %107
  %132 = call fastcc i32 @compiler_rt.common.normalize__anon_3658(ptr nonnull align 8 %4)
  store i32 %132, ptr %6, align 4
  br label %113

133:                                              ; preds = %107
  br label %113

134:                                              ; preds = %113
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

135:                                              ; preds = %113
  %136 = extractvalue { i32, i1 } %129, 0
  %137 = icmp sge i32 %136, 0
  br i1 %137, label %140, label %141

138:                                              ; preds = %140
  %139 = icmp ne i32 %136, 0
  br i1 %139, label %143, label %145

140:                                              ; preds = %135
  br label %138

141:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

142:                                              ; preds = %145, %146
  br i1 %120, label %176, label %181

143:                                              ; preds = %138
  %144 = icmp ult i32 %136, 128
  br i1 %144, label %147, label %151

145:                                              ; preds = %138
  br label %142

146:                                              ; preds = %151, %152
  br label %142

147:                                              ; preds = %143
  %148 = load i128, ptr %4, align 8
  %149 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 128, i32 %136)
  %150 = extractvalue { i32, i1 } %149, 1
  br i1 %150, label %159, label %160

151:                                              ; preds = %143
  store i128 1, ptr %4, align 8
  br label %146

152:                                              ; preds = %172, %171
  %153 = phi i128 [ 1, %171 ], [ 0, %172 ]
  %154 = load i128, ptr %4, align 8
  %155 = trunc i32 %136 to i7
  %156 = zext i7 %155 to i128
  %157 = lshr i128 %154, %156
  %158 = or i128 %157, %153
  store i128 %158, ptr %4, align 8
  br label %146

159:                                              ; preds = %147
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

160:                                              ; preds = %147
  %161 = extractvalue { i32, i1 } %149, 0
  %162 = sub i32 127, %161
  %163 = icmp ule i32 %162, 127
  br i1 %163, label %169, label %170

164:                                              ; preds = %169
  %165 = trunc i32 %161 to i7
  %166 = zext i7 %165 to i128
  %167 = shl i128 %148, %166
  %168 = icmp ne i128 %167, 0
  br i1 %168, label %171, label %172

169:                                              ; preds = %160
  br label %164

170:                                              ; preds = %160
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

171:                                              ; preds = %164
  br label %152

172:                                              ; preds = %164
  br label %152

173:                                              ; preds = %229, %196
  %174 = load i32, ptr %7, align 4
  %175 = icmp sge i32 %174, 32767
  br i1 %175, label %246, label %249

176:                                              ; preds = %142
  %177 = load i128, ptr %5, align 8
  %178 = load i128, ptr %4, align 8
  %179 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 %177, i128 %178)
  %180 = extractvalue { i128, i1 } %179, 1
  br i1 %180, label %186, label %187

181:                                              ; preds = %142
  %182 = load i128, ptr %5, align 8
  %183 = load i128, ptr %4, align 8
  %184 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %182, i128 %183)
  %185 = extractvalue { i128, i1 } %184, 1
  br i1 %185, label %223, label %224

186:                                              ; preds = %176
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

187:                                              ; preds = %176
  %188 = extractvalue { i128, i1 } %179, 0
  store i128 %188, ptr %5, align 8
  %189 = load i128, ptr %5, align 8
  %190 = icmp eq i128 %189, 0
  br i1 %190, label %194, label %195

191:                                              ; preds = %195
  %192 = load i128, ptr %5, align 8
  %193 = icmp ult i128 %192, 41538374868278621028243970633760768
  br i1 %193, label %197, label %204

194:                                              ; preds = %187
  br label %22

195:                                              ; preds = %187
  br label %191

196:                                              ; preds = %204, %221
  br label %173

197:                                              ; preds = %191
  %198 = load i128, ptr %5, align 8
  %199 = call i128 @llvm.ctlz.i128(i128 %198, i1 false)
  %200 = trunc i128 %199 to i8
  %201 = zext i8 %200 to i32
  %202 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %201, i32 12)
  %203 = extractvalue { i32, i1 } %202, 1
  br i1 %203, label %205, label %206

204:                                              ; preds = %191
  br label %196

205:                                              ; preds = %197
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

206:                                              ; preds = %197
  %207 = extractvalue { i32, i1 } %202, 0
  %208 = load i128, ptr %5, align 8
  %209 = sub i32 127, %207
  %210 = icmp ule i32 %209, 127
  br i1 %210, label %218, label %219

211:                                              ; preds = %218
  %212 = trunc i32 %207 to i7
  %213 = zext i7 %212 to i128
  %214 = shl i128 %208, %213
  store i128 %214, ptr %5, align 8
  %215 = load i32, ptr %7, align 4
  %216 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %215, i32 %207)
  %217 = extractvalue { i32, i1 } %216, 1
  br i1 %217, label %220, label %221

218:                                              ; preds = %206
  br label %211

219:                                              ; preds = %206
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

220:                                              ; preds = %211
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

221:                                              ; preds = %211
  %222 = extractvalue { i32, i1 } %216, 0
  store i32 %222, ptr %7, align 4
  br label %196

223:                                              ; preds = %181
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

224:                                              ; preds = %181
  %225 = extractvalue { i128, i1 } %184, 0
  store i128 %225, ptr %5, align 8
  %226 = load i128, ptr %5, align 8
  %227 = and i128 %226, 83076749736557242056487941267521536
  %228 = icmp ne i128 %227, 0
  br i1 %228, label %230, label %239

229:                                              ; preds = %239, %241
  br label %173

230:                                              ; preds = %224
  %231 = load i128, ptr %5, align 8
  %232 = and i128 %231, 1
  %233 = load i128, ptr %5, align 8
  %234 = lshr i128 %233, 1
  %235 = or i128 %234, %232
  store i128 %235, ptr %5, align 8
  %236 = load i32, ptr %7, align 4
  %237 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %236, i32 1)
  %238 = extractvalue { i32, i1 } %237, 1
  br i1 %238, label %240, label %241

239:                                              ; preds = %224
  br label %229

240:                                              ; preds = %230
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

241:                                              ; preds = %230
  %242 = extractvalue { i32, i1 } %237, 0
  store i32 %242, ptr %7, align 4
  br label %229

243:                                              ; preds = %249
  %244 = load i32, ptr %7, align 4
  %245 = icmp sle i32 %244, 0
  br i1 %245, label %259, label %264

246:                                              ; preds = %173
  %247 = or i128 170135991163610696904058773219554885632, %115
  %248 = bitcast i128 %247 to fp128
  br label %22

249:                                              ; preds = %173
  br label %243

250:                                              ; preds = %264
  %251 = load i128, ptr %5, align 8
  %252 = and i128 %251, 7
  %253 = load i128, ptr %5, align 8
  %254 = lshr i128 %253, 3
  %255 = and i128 %254, 5192296858534827628530496329220095
  store i128 %255, ptr %3, align 8
  %256 = load i128, ptr %3, align 8
  %257 = load i32, ptr %7, align 4
  %258 = icmp sge i32 %257, 0
  br i1 %258, label %286, label %287

259:                                              ; preds = %243
  %260 = load i128, ptr %5, align 8
  %261 = load i32, ptr %7, align 4
  %262 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %261)
  %263 = extractvalue { i32, i1 } %262, 1
  br i1 %263, label %265, label %266

264:                                              ; preds = %243
  br label %250

265:                                              ; preds = %259
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

266:                                              ; preds = %259
  %267 = extractvalue { i32, i1 } %262, 0
  %268 = sub i32 127, %267
  %269 = icmp ule i32 %268, 127
  br i1 %269, label %277, label %278

270:                                              ; preds = %277
  %271 = trunc i32 %267 to i7
  %272 = zext i7 %271 to i128
  %273 = lshr i128 %260, %272
  store i128 %273, ptr %5, align 8
  %274 = load i128, ptr %5, align 8
  %275 = or i128 %115, %274
  %276 = bitcast i128 %275 to fp128
  br label %22

277:                                              ; preds = %266
  br label %270

278:                                              ; preds = %266
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

279:                                              ; preds = %286
  %280 = sext i32 %257 to i128
  %281 = shl i128 %280, 112
  %282 = or i128 %256, %281
  store i128 %282, ptr %3, align 8
  %283 = load i128, ptr %3, align 8
  %284 = or i128 %283, %115
  store i128 %284, ptr %3, align 8
  %285 = icmp ugt i128 %252, 4
  br i1 %285, label %290, label %294

286:                                              ; preds = %250
  br label %279

287:                                              ; preds = %250
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

288:                                              ; preds = %294, %296
  %289 = icmp eq i128 %252, 4
  br i1 %289, label %301, label %307

290:                                              ; preds = %279
  %291 = load i128, ptr %3, align 8
  %292 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %291, i128 1)
  %293 = extractvalue { i128, i1 } %292, 1
  br i1 %293, label %295, label %296

294:                                              ; preds = %279
  br label %288

295:                                              ; preds = %290
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

296:                                              ; preds = %290
  %297 = extractvalue { i128, i1 } %292, 0
  store i128 %297, ptr %3, align 8
  br label %288

298:                                              ; preds = %307, %309
  %299 = load i128, ptr %3, align 8
  %300 = bitcast i128 %299 to fp128
  br label %22

301:                                              ; preds = %288
  %302 = load i128, ptr %3, align 8
  %303 = load i128, ptr %3, align 8
  %304 = and i128 %303, 1
  %305 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %302, i128 %304)
  %306 = extractvalue { i128, i1 } %305, 1
  br i1 %306, label %308, label %309

307:                                              ; preds = %288
  br label %298

308:                                              ; preds = %301
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

309:                                              ; preds = %301
  %310 = extractvalue { i128, i1 } %305, 0
  store i128 %310, ptr %3, align 8
  br label %298
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3658(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i128, ptr %0, align 8
  %3 = call i128 @llvm.ctlz.i128(i128 %2, i1 false)
  %4 = trunc i128 %3 to i8
  %5 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %4, i8 15)
  %6 = extractvalue { i8, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i8, i1 } %5, 0
  %10 = load i128, ptr %0, align 8
  %11 = sub i8 127, %9
  %12 = icmp ule i8 %11, 127
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i8 %9 to i7
  %15 = zext i7 %14 to i128
  %16 = shl i128 %10, %15
  store i128 %16, ptr %0, align 8
  %17 = zext i8 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @152)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.ctlz.i128(i128, i1 immarg) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__addxf3(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca i80, align 8
  %4 = alloca i80, align 8
  %5 = alloca i80, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i80, align 8
  %9 = alloca i80, align 8
  %10 = alloca x86_fp80, align 16
  store x86_fp80 0xK7FFFA000000000000000, ptr %10, align 16
  %11 = load x86_fp80, ptr %10, align 16
  %12 = bitcast x86_fp80 %11 to i80
  %13 = or i80 %12, 4611686018427387904
  %14 = bitcast x86_fp80 %0 to i80
  store i80 %14, ptr %9, align 8
  %15 = bitcast x86_fp80 %1 to i80
  store i80 %15, ptr %8, align 8
  %16 = load i80, ptr %9, align 8
  %17 = and i80 %16, 604462909807314587353087
  %18 = load i80, ptr %8, align 8
  %19 = and i80 %18, 604462909807314587353087
  %20 = sub i80 %17, 1
  %21 = icmp uge i80 %20, 604453686435277732577279
  br i1 %21, label %28, label %29

22:                                               ; preds = %348, %300, %273, %214, %76, %74, %69, %62, %59, %57, %44, %37
  %23 = phi x86_fp80 [ %40, %37 ], [ %47, %44 ], [ %58, %57 ], [ %0, %59 ], [ %1, %62 ], [ %73, %69 ], [ %1, %74 ], [ %0, %76 ], [ 0xK00000000000000000000, %214 ], [ %275, %273 ], [ %303, %300 ], [ %350, %348 ]
  ret x86_fp80 %23

24:                                               ; preds = %34, %75
  %25 = icmp ugt i80 %19, %17
  br i1 %25, label %81, label %84

26:                                               ; preds = %29, %28
  %27 = phi i1 [ true, %28 ], [ %31, %29 ]
  br i1 %27, label %32, label %34

28:                                               ; preds = %2
  br label %26

29:                                               ; preds = %2
  %30 = sub i80 %19, 1
  %31 = icmp uge i80 %30, 604453686435277732577279
  br label %26

32:                                               ; preds = %26
  %33 = icmp ugt i80 %17, 604453686435277732577280
  br i1 %33, label %37, label %41

34:                                               ; preds = %26
  br label %24

35:                                               ; preds = %41
  %36 = icmp ugt i80 %19, 604453686435277732577280
  br i1 %36, label %44, label %48

37:                                               ; preds = %32
  %38 = bitcast x86_fp80 %0 to i80
  %39 = or i80 %38, 4611686018427387904
  %40 = bitcast i80 %39 to x86_fp80
  br label %22

41:                                               ; preds = %32
  br label %35

42:                                               ; preds = %48
  %43 = icmp eq i80 %17, 604453686435277732577280
  br i1 %43, label %51, label %56

44:                                               ; preds = %35
  %45 = bitcast x86_fp80 %1 to i80
  %46 = or i80 %45, 4611686018427387904
  %47 = bitcast i80 %46 to x86_fp80
  br label %22

48:                                               ; preds = %35
  br label %42

49:                                               ; preds = %56
  %50 = icmp eq i80 %19, 604453686435277732577280
  br i1 %50, label %62, label %63

51:                                               ; preds = %42
  %52 = bitcast x86_fp80 %0 to i80
  %53 = bitcast x86_fp80 %1 to i80
  %54 = xor i80 %52, %53
  %55 = icmp eq i80 %54, -604462909807314587353088
  br i1 %55, label %57, label %59

56:                                               ; preds = %42
  br label %49

57:                                               ; preds = %51
  %58 = bitcast i80 %13 to x86_fp80
  br label %22

59:                                               ; preds = %51
  br label %22

60:                                               ; preds = %63
  %61 = icmp eq i80 %17, 0
  br i1 %61, label %66, label %68

62:                                               ; preds = %49
  br label %22

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %68
  %65 = icmp eq i80 %19, 0
  br i1 %65, label %76, label %77

66:                                               ; preds = %60
  %67 = icmp eq i80 %19, 0
  br i1 %67, label %69, label %74

68:                                               ; preds = %60
  br label %64

69:                                               ; preds = %66
  %70 = bitcast x86_fp80 %0 to i80
  %71 = bitcast x86_fp80 %1 to i80
  %72 = and i80 %70, %71
  %73 = bitcast i80 %72 to x86_fp80
  br label %22

74:                                               ; preds = %66
  br label %22

75:                                               ; preds = %77
  br label %24

76:                                               ; preds = %64
  br label %22

77:                                               ; preds = %64
  br label %75

78:                                               ; preds = %84, %81
  %79 = load i80, ptr %9, align 8
  %80 = lshr i80 %79, 64
  br i1 true, label %89, label %90

81:                                               ; preds = %24
  %82 = load i80, ptr %9, align 8
  %83 = load i80, ptr %8, align 8
  store i80 %83, ptr %9, align 8
  store i80 %82, ptr %8, align 8
  br label %78

84:                                               ; preds = %24
  br label %78

85:                                               ; preds = %89
  %86 = and i80 %80, 32767
  %87 = sub i80 2147483647, %86
  %88 = icmp ule i80 %87, 2147483647
  br i1 %88, label %95, label %96

89:                                               ; preds = %78
  br label %85

90:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

91:                                               ; preds = %95
  %92 = trunc i80 %86 to i32
  store i32 %92, ptr %7, align 4
  %93 = load i80, ptr %8, align 8
  %94 = lshr i80 %93, 64
  br i1 true, label %101, label %102

95:                                               ; preds = %85
  br label %91

96:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

97:                                               ; preds = %101
  %98 = and i80 %94, 32767
  %99 = sub i80 2147483647, %98
  %100 = icmp ule i80 %99, 2147483647
  br i1 %100, label %111, label %112

101:                                              ; preds = %91
  br label %97

102:                                              ; preds = %91
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

103:                                              ; preds = %111
  %104 = trunc i80 %98 to i32
  store i32 %104, ptr %6, align 4
  %105 = load i80, ptr %9, align 8
  %106 = and i80 %105, 18446744073709551615
  store i80 %106, ptr %5, align 8
  %107 = load i80, ptr %8, align 8
  %108 = and i80 %107, 18446744073709551615
  store i80 %108, ptr %4, align 8
  %109 = load i32, ptr %7, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %116, label %118

111:                                              ; preds = %97
  br label %103

112:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

113:                                              ; preds = %118, %116
  %114 = load i32, ptr %6, align 4
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %129, label %131

116:                                              ; preds = %103
  %117 = call fastcc i32 @compiler_rt.common.normalize__anon_3659(ptr nonnull align 8 %5)
  store i32 %117, ptr %7, align 4
  br label %113

118:                                              ; preds = %103
  br label %113

119:                                              ; preds = %131, %129
  %120 = load i80, ptr %9, align 8
  %121 = and i80 %120, -604462909807314587353088
  %122 = load i80, ptr %9, align 8
  %123 = load i80, ptr %8, align 8
  %124 = xor i80 %122, %123
  %125 = and i80 %124, -604462909807314587353088
  %126 = icmp ne i80 %125, 0
  %127 = load i80, ptr %5, align 8
  %128 = or i80 %127, 9223372036854775808
  br i1 true, label %136, label %137

129:                                              ; preds = %113
  %130 = call fastcc i32 @compiler_rt.common.normalize__anon_3659(ptr nonnull align 8 %4)
  store i32 %130, ptr %6, align 4
  br label %119

131:                                              ; preds = %113
  br label %119

132:                                              ; preds = %136
  %133 = shl i80 %128, 3
  store i80 %133, ptr %5, align 8
  %134 = load i80, ptr %4, align 8
  %135 = or i80 %134, 9223372036854775808
  br i1 true, label %144, label %145

136:                                              ; preds = %119
  br label %132

137:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

138:                                              ; preds = %144
  %139 = shl i80 %135, 3
  store i80 %139, ptr %4, align 8
  %140 = load i32, ptr %7, align 4
  %141 = load i32, ptr %6, align 4
  %142 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %140, i32 %141)
  %143 = extractvalue { i32, i1 } %142, 1
  br i1 %143, label %146, label %147

144:                                              ; preds = %132
  br label %138

145:                                              ; preds = %132
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

146:                                              ; preds = %138
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

147:                                              ; preds = %138
  %148 = extractvalue { i32, i1 } %142, 0
  %149 = icmp sge i32 %148, 0
  br i1 %149, label %152, label %153

150:                                              ; preds = %152
  %151 = icmp ne i32 %148, 0
  br i1 %151, label %155, label %157

152:                                              ; preds = %147
  br label %150

153:                                              ; preds = %147
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

154:                                              ; preds = %157, %158
  br i1 %126, label %196, label %201

155:                                              ; preds = %150
  %156 = icmp ult i32 %148, 80
  br i1 %156, label %159, label %163

157:                                              ; preds = %150
  br label %154

158:                                              ; preds = %163, %189
  br label %154

159:                                              ; preds = %155
  %160 = load i80, ptr %4, align 8
  %161 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 80, i32 %148)
  %162 = extractvalue { i32, i1 } %161, 1
  br i1 %162, label %171, label %172

163:                                              ; preds = %155
  store i80 1, ptr %4, align 8
  br label %158

164:                                              ; preds = %188, %187
  %165 = phi i80 [ 1, %187 ], [ 0, %188 ]
  %166 = load i80, ptr %4, align 8
  %167 = trunc i32 %148 to i7
  %168 = zext i7 %167 to i80
  %169 = lshr i80 %166, %168
  %170 = icmp ult i7 %167, -48
  br i1 %170, label %191, label %192

171:                                              ; preds = %159
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %159
  %173 = extractvalue { i32, i1 } %161, 0
  %174 = sub i32 127, %173
  %175 = icmp ule i32 %174, 127
  br i1 %175, label %179, label %180

176:                                              ; preds = %179
  %177 = trunc i32 %173 to i7
  %178 = icmp ult i7 %177, -48
  br i1 %178, label %185, label %186

179:                                              ; preds = %172
  br label %176

180:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

181:                                              ; preds = %185
  %182 = zext i7 %177 to i80
  %183 = shl i80 %160, %182
  %184 = icmp ne i80 %183, 0
  br i1 %184, label %187, label %188

185:                                              ; preds = %176
  br label %181

186:                                              ; preds = %176
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

187:                                              ; preds = %181
  br label %164

188:                                              ; preds = %181
  br label %164

189:                                              ; preds = %191
  %190 = or i80 %169, %165
  store i80 %190, ptr %4, align 8
  br label %158

191:                                              ; preds = %164
  br label %189

192:                                              ; preds = %164
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

193:                                              ; preds = %253, %216
  %194 = load i32, ptr %7, align 4
  %195 = icmp sge i32 %194, 32767
  br i1 %195, label %273, label %276

196:                                              ; preds = %154
  %197 = load i80, ptr %5, align 8
  %198 = load i80, ptr %4, align 8
  %199 = call fastcc { i80, i1 } @llvm.usub.with.overflow.i80(i80 %197, i80 %198)
  %200 = extractvalue { i80, i1 } %199, 1
  br i1 %200, label %206, label %207

201:                                              ; preds = %154
  %202 = load i80, ptr %5, align 8
  %203 = load i80, ptr %4, align 8
  %204 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %202, i80 %203)
  %205 = extractvalue { i80, i1 } %204, 1
  br i1 %205, label %247, label %248

206:                                              ; preds = %196
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

207:                                              ; preds = %196
  %208 = extractvalue { i80, i1 } %199, 0
  store i80 %208, ptr %5, align 8
  %209 = load i80, ptr %5, align 8
  %210 = icmp eq i80 %209, 0
  br i1 %210, label %214, label %215

211:                                              ; preds = %215
  %212 = load i80, ptr %5, align 8
  %213 = icmp ult i80 %212, 73786976294838206464
  br i1 %213, label %217, label %224

214:                                              ; preds = %207
  br label %22

215:                                              ; preds = %207
  br label %211

216:                                              ; preds = %224, %245
  br label %193

217:                                              ; preds = %211
  %218 = load i80, ptr %5, align 8
  %219 = call i80 @llvm.ctlz.i80(i80 %218, i1 false)
  %220 = trunc i80 %219 to i7
  %221 = zext i7 %220 to i32
  %222 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %221, i32 13)
  %223 = extractvalue { i32, i1 } %222, 1
  br i1 %223, label %225, label %226

224:                                              ; preds = %211
  br label %216

225:                                              ; preds = %217
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

226:                                              ; preds = %217
  %227 = extractvalue { i32, i1 } %222, 0
  %228 = load i80, ptr %5, align 8
  %229 = sub i32 127, %227
  %230 = icmp ule i32 %229, 127
  br i1 %230, label %234, label %235

231:                                              ; preds = %234
  %232 = trunc i32 %227 to i7
  %233 = icmp ult i7 %232, -48
  br i1 %233, label %242, label %243

234:                                              ; preds = %226
  br label %231

235:                                              ; preds = %226
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

236:                                              ; preds = %242
  %237 = zext i7 %232 to i80
  %238 = shl i80 %228, %237
  store i80 %238, ptr %5, align 8
  %239 = load i32, ptr %7, align 4
  %240 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %239, i32 %227)
  %241 = extractvalue { i32, i1 } %240, 1
  br i1 %241, label %244, label %245

242:                                              ; preds = %231
  br label %236

243:                                              ; preds = %231
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

244:                                              ; preds = %236
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

245:                                              ; preds = %236
  %246 = extractvalue { i32, i1 } %240, 0
  store i32 %246, ptr %7, align 4
  br label %216

247:                                              ; preds = %201
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

248:                                              ; preds = %201
  %249 = extractvalue { i80, i1 } %204, 0
  store i80 %249, ptr %5, align 8
  %250 = load i80, ptr %5, align 8
  %251 = and i80 %250, 147573952589676412928
  %252 = icmp ne i80 %251, 0
  br i1 %252, label %254, label %259

253:                                              ; preds = %259, %268
  br label %193

254:                                              ; preds = %248
  %255 = load i80, ptr %5, align 8
  %256 = and i80 %255, 1
  %257 = load i80, ptr %5, align 8
  %258 = lshr i80 %257, 1
  br i1 true, label %265, label %266

259:                                              ; preds = %248
  br label %253

260:                                              ; preds = %265
  %261 = or i80 %258, %256
  store i80 %261, ptr %5, align 8
  %262 = load i32, ptr %7, align 4
  %263 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %262, i32 1)
  %264 = extractvalue { i32, i1 } %263, 1
  br i1 %264, label %267, label %268

265:                                              ; preds = %254
  br label %260

266:                                              ; preds = %254
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

267:                                              ; preds = %260
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

268:                                              ; preds = %260
  %269 = extractvalue { i32, i1 } %263, 0
  store i32 %269, ptr %7, align 4
  br label %253

270:                                              ; preds = %276
  %271 = load i32, ptr %7, align 4
  %272 = icmp sle i32 %271, 0
  br i1 %272, label %282, label %287

273:                                              ; preds = %193
  %274 = or i80 604453686435277732577280, %121
  %275 = bitcast i80 %274 to x86_fp80
  br label %22

276:                                              ; preds = %193
  br label %270

277:                                              ; preds = %287
  %278 = load i80, ptr %5, align 8
  %279 = and i80 %278, 7
  %280 = load i80, ptr %5, align 8
  %281 = lshr i80 %280, 3
  br i1 true, label %311, label %312

282:                                              ; preds = %270
  %283 = load i80, ptr %5, align 8
  %284 = load i32, ptr %7, align 4
  %285 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %284)
  %286 = extractvalue { i32, i1 } %285, 1
  br i1 %286, label %288, label %289

287:                                              ; preds = %270
  br label %277

288:                                              ; preds = %282
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

289:                                              ; preds = %282
  %290 = extractvalue { i32, i1 } %285, 0
  %291 = sub i32 127, %290
  %292 = icmp ule i32 %291, 127
  br i1 %292, label %298, label %299

293:                                              ; preds = %298
  %294 = trunc i32 %290 to i7
  %295 = zext i7 %294 to i80
  %296 = lshr i80 %283, %295
  %297 = icmp ult i7 %294, -48
  br i1 %297, label %304, label %305

298:                                              ; preds = %289
  br label %293

299:                                              ; preds = %289
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

300:                                              ; preds = %304
  store i80 %296, ptr %5, align 8
  %301 = load i80, ptr %5, align 8
  %302 = or i80 %121, %301
  %303 = bitcast i80 %302 to x86_fp80
  br label %22

304:                                              ; preds = %293
  br label %300

305:                                              ; preds = %293
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

306:                                              ; preds = %311
  %307 = and i80 %281, 18446744073709551615
  store i80 %307, ptr %3, align 8
  %308 = load i80, ptr %3, align 8
  %309 = load i32, ptr %7, align 4
  %310 = icmp sge i32 %309, 0
  br i1 %310, label %315, label %316

311:                                              ; preds = %277
  br label %306

312:                                              ; preds = %277
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

313:                                              ; preds = %315
  %314 = sext i32 %309 to i80
  br i1 true, label %323, label %324

315:                                              ; preds = %306
  br label %313

316:                                              ; preds = %306
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

317:                                              ; preds = %323
  %318 = shl i80 %314, 64
  %319 = or i80 %308, %318
  store i80 %319, ptr %3, align 8
  %320 = load i80, ptr %3, align 8
  %321 = or i80 %320, %121
  store i80 %321, ptr %3, align 8
  %322 = icmp ugt i80 %279, 4
  br i1 %322, label %327, label %331

323:                                              ; preds = %313
  br label %317

324:                                              ; preds = %313
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

325:                                              ; preds = %331, %333
  %326 = icmp eq i80 %279, 4
  br i1 %326, label %338, label %344

327:                                              ; preds = %317
  %328 = load i80, ptr %3, align 8
  %329 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %328, i80 1)
  %330 = extractvalue { i80, i1 } %329, 1
  br i1 %330, label %332, label %333

331:                                              ; preds = %317
  br label %325

332:                                              ; preds = %327
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

333:                                              ; preds = %327
  %334 = extractvalue { i80, i1 } %329, 0
  store i80 %334, ptr %3, align 8
  br label %325

335:                                              ; preds = %344, %346
  %336 = load i80, ptr %3, align 8
  %337 = lshr i80 %336, 64
  br i1 true, label %353, label %354

338:                                              ; preds = %325
  %339 = load i80, ptr %3, align 8
  %340 = load i80, ptr %3, align 8
  %341 = and i80 %340, 1
  %342 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %339, i80 %341)
  %343 = extractvalue { i80, i1 } %342, 1
  br i1 %343, label %345, label %346

344:                                              ; preds = %325
  br label %335

345:                                              ; preds = %338
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

346:                                              ; preds = %338
  %347 = extractvalue { i80, i1 } %342, 0
  store i80 %347, ptr %3, align 8
  br label %335

348:                                              ; preds = %358, %355
  %349 = load i80, ptr %3, align 8
  %350 = bitcast i80 %349 to x86_fp80
  br label %22

351:                                              ; preds = %353
  %352 = icmp ne i80 %337, 0
  br i1 %352, label %355, label %358

353:                                              ; preds = %335
  br label %351

354:                                              ; preds = %335
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

355:                                              ; preds = %351
  %356 = load i80, ptr %3, align 8
  %357 = or i80 %356, 9223372036854775808
  store i80 %357, ptr %3, align 8
  br label %348

358:                                              ; preds = %351
  br label %348
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3659(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i80, ptr %0, align 8
  %3 = call i80 @llvm.ctlz.i80(i80 %2, i1 false)
  %4 = trunc i80 %3 to i7
  %5 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %4, i7 16)
  %6 = extractvalue { i7, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i7, i1 } %5, 0
  %10 = load i80, ptr %0, align 8
  %11 = icmp ult i7 %9, -48
  br i1 %11, label %18, label %19

12:                                               ; preds = %18
  %13 = zext i7 %9 to i80
  %14 = shl i80 %10, %13
  store i80 %14, ptr %0, align 8
  %15 = zext i7 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %15)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %8
  br label %12

19:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @153)
  unreachable

20:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %12
  %22 = extractvalue { i32, i1 } %16, 0
  ret i32 %22
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i80, i1 } @llvm.usub.with.overflow.i80(i80, i80) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i80 @llvm.ctlz.i80(i80, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i80, i1 } @llvm.uadd.with.overflow.i80(i80, i80) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__subhf3(half %0, half %1) #0 {
  %3 = bitcast half %1 to i16
  %4 = xor i16 %3, -32768
  %5 = bitcast i16 %4 to half
  %6 = fadd half %0, %5
  ret half %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__subsf3(float %0, float %1) #0 {
  %3 = bitcast float %1 to i32
  %4 = xor i32 %3, -2147483648
  %5 = bitcast i32 %4 to float
  %6 = fadd float %0, %5
  ret float %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__subdf3(double %0, double %1) #0 {
  %3 = bitcast double %1 to i64
  %4 = xor i64 %3, -9223372036854775808
  %5 = bitcast i64 %4 to double
  %6 = fadd double %0, %5
  ret double %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__subtf3(fp128 %0, fp128 %1) #0 {
  %3 = bitcast fp128 %1 to i128
  %4 = xor i128 %3, -170141183460469231731687303715884105728
  %5 = bitcast i128 %4 to fp128
  %6 = call fp128 @__addtf3(fp128 %0, fp128 %5)
  ret fp128 %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__subxf3(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca %math.F80, align 8
  %4 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %3, x86_fp80 %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %3, i64 16, i1 false)
  %5 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %6 = load i16, ptr %5, align 2
  %7 = xor i16 %6, -32768
  store i16 %7, ptr %5, align 2
  %8 = call fastcc x86_fp80 @math.make_f80(ptr nonnull readonly align 8 %4)
  %9 = fadd x86_fp80 %0, %8
  ret x86_fp80 %9
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__mulhf3(half %0, half %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca half, align 2
  store half 0xH7C01, ptr %10, align 2
  %11 = load half, ptr %10, align 2
  %12 = bitcast half %11 to i16
  %13 = or i16 %12, 512
  %14 = bitcast half %0 to i16
  %15 = lshr i16 %14, 10
  %16 = and i16 %15, 31
  %17 = bitcast half %1 to i16
  %18 = lshr i16 %17, 10
  %19 = and i16 %18, 31
  %20 = bitcast half %0 to i16
  %21 = bitcast half %1 to i16
  %22 = xor i16 %20, %21
  %23 = and i16 %22, -32768
  %24 = bitcast half %0 to i16
  %25 = and i16 %24, 1023
  store i16 %25, ptr %9, align 2
  %26 = bitcast half %1 to i16
  %27 = and i16 %26, 1023
  store i16 %27, ptr %8, align 2
  store i32 0, ptr %7, align 4
  %28 = sub i16 %16, 1
  %29 = icmp uge i16 %28, 30
  br i1 %29, label %50, label %51

30:                                               ; preds = %170, %160, %135, %102, %97, %93, %90, %83, %80, %70, %63
  %31 = phi half [ %66, %63 ], [ %73, %70 ], [ %82, %80 ], [ %84, %83 ], [ %92, %90 ], [ %94, %93 ], [ %98, %97 ], [ %103, %102 ], [ %137, %135 ], [ %161, %160 ], [ %174, %170 ]
  ret half %31

32:                                               ; preds = %60, %112
  %33 = load i16, ptr %9, align 2
  %34 = or i16 %33, 1024
  store i16 %34, ptr %9, align 2
  %35 = load i16, ptr %8, align 2
  %36 = or i16 %35, 1024
  store i16 %36, ptr %8, align 2
  call void @llvm.memset.p0.i64(ptr align 2 %6, i8 undef, i64 2, i1 false)
  call void @llvm.memset.p0.i64(ptr align 2 %5, i8 undef, i64 2, i1 false)
  %37 = load i16, ptr %9, align 2
  %38 = load i16, ptr %8, align 2
  %39 = shl i16 %38, 5
  call fastcc void @compiler_rt.common.wideMultiply__anon_3666(i16 %37, i16 %39, ptr nonnull align 2 %6, ptr nonnull align 2 %5)
  %40 = add nuw i16 %16, %19
  %41 = zext i16 %40 to i32
  %42 = sub nsw i32 %41, 15
  %43 = load i32, ptr %7, align 4
  %44 = add nsw i32 %42, %43
  store i32 %44, ptr %4, align 4
  %45 = load i16, ptr %6, align 2
  %46 = and i16 %45, 1024
  %47 = icmp ne i16 %46, 0
  br i1 %47, label %121, label %124

48:                                               ; preds = %51, %50
  %49 = phi i1 [ true, %50 ], [ %53, %51 ]
  br i1 %49, label %54, label %60

50:                                               ; preds = %2
  br label %48

51:                                               ; preds = %2
  %52 = sub i16 %19, 1
  %53 = icmp uge i16 %52, 30
  br label %48

54:                                               ; preds = %48
  %55 = bitcast half %0 to i16
  %56 = and i16 %55, 32767
  %57 = bitcast half %1 to i16
  %58 = and i16 %57, 32767
  %59 = icmp ugt i16 %56, 31744
  br i1 %59, label %63, label %67

60:                                               ; preds = %48
  br label %32

61:                                               ; preds = %67
  %62 = icmp ugt i16 %58, 31744
  br i1 %62, label %70, label %74

63:                                               ; preds = %54
  %64 = bitcast half %0 to i16
  %65 = or i16 %64, 512
  %66 = bitcast i16 %65 to half
  br label %30

67:                                               ; preds = %54
  br label %61

68:                                               ; preds = %74
  %69 = icmp eq i16 %56, 31744
  br i1 %69, label %77, label %79

70:                                               ; preds = %61
  %71 = bitcast half %1 to i16
  %72 = or i16 %71, 512
  %73 = bitcast i16 %72 to half
  br label %30

74:                                               ; preds = %61
  br label %68

75:                                               ; preds = %79
  %76 = icmp eq i16 %58, 31744
  br i1 %76, label %87, label %89

77:                                               ; preds = %68
  %78 = icmp ne i16 %58, 0
  br i1 %78, label %80, label %83

79:                                               ; preds = %68
  br label %75

80:                                               ; preds = %77
  %81 = or i16 %56, %23
  %82 = bitcast i16 %81 to half
  br label %30

83:                                               ; preds = %77
  %84 = bitcast i16 %13 to half
  br label %30

85:                                               ; preds = %89
  %86 = icmp eq i16 %56, 0
  br i1 %86, label %97, label %99

87:                                               ; preds = %75
  %88 = icmp ne i16 %56, 0
  br i1 %88, label %90, label %93

89:                                               ; preds = %75
  br label %85

90:                                               ; preds = %87
  %91 = or i16 %58, %23
  %92 = bitcast i16 %91 to half
  br label %30

93:                                               ; preds = %87
  %94 = bitcast i16 %13 to half
  br label %30

95:                                               ; preds = %99
  %96 = icmp eq i16 %58, 0
  br i1 %96, label %102, label %104

97:                                               ; preds = %85
  %98 = bitcast i16 %23 to half
  br label %30

99:                                               ; preds = %85
  br label %95

100:                                              ; preds = %104
  %101 = icmp ult i16 %56, 1024
  br i1 %101, label %107, label %111

102:                                              ; preds = %95
  %103 = bitcast i16 %23 to half
  br label %30

104:                                              ; preds = %95
  br label %100

105:                                              ; preds = %111, %107
  %106 = icmp ult i16 %58, 1024
  br i1 %106, label %113, label %117

107:                                              ; preds = %100
  %108 = load i32, ptr %7, align 4
  %109 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3665(ptr nonnull align 2 %9)
  %110 = add nsw i32 %108, %109
  store i32 %110, ptr %7, align 4
  br label %105

111:                                              ; preds = %100
  br label %105

112:                                              ; preds = %117, %113
  br label %32

113:                                              ; preds = %105
  %114 = load i32, ptr %7, align 4
  %115 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3665(ptr nonnull align 2 %8)
  %116 = add nsw i32 %114, %115
  store i32 %116, ptr %7, align 4
  br label %112

117:                                              ; preds = %105
  br label %112

118:                                              ; preds = %124, %121
  %119 = load i32, ptr %4, align 4
  %120 = icmp sge i32 %119, 31
  br i1 %120, label %135, label %138

121:                                              ; preds = %32
  %122 = load i32, ptr %4, align 4
  %123 = add i32 %122, 1
  store i32 %123, ptr %4, align 4
  br label %118

124:                                              ; preds = %32
  %125 = load i16, ptr %6, align 2
  %126 = shl i16 %125, 1
  %127 = load i16, ptr %5, align 2
  %128 = lshr i16 %127, 15
  %129 = or i16 %126, %128
  store i16 %129, ptr %6, align 2
  %130 = load i16, ptr %5, align 2
  %131 = shl i16 %130, 1
  store i16 %131, ptr %5, align 2
  br label %118

132:                                              ; preds = %138
  call void @llvm.memset.p0.i64(ptr align 2 %3, i8 undef, i64 2, i1 false)
  %133 = load i32, ptr %4, align 4
  %134 = icmp sle i32 %133, 0
  br i1 %134, label %142, label %146

135:                                              ; preds = %118
  %136 = or i16 31744, %23
  %137 = bitcast i16 %136 to half
  br label %30

138:                                              ; preds = %118
  br label %132

139:                                              ; preds = %146, %154
  %140 = load i16, ptr %5, align 2
  %141 = icmp ugt i16 %140, -32768
  br i1 %141, label %166, label %169

142:                                              ; preds = %132
  %143 = load i32, ptr %4, align 4
  %144 = sub i32 1, %143
  %145 = icmp uge i32 %144, 16
  br i1 %145, label %160, label %162

146:                                              ; preds = %132
  %147 = load i16, ptr %6, align 2
  %148 = and i16 %147, 1023
  store i16 %148, ptr %3, align 2
  %149 = load i16, ptr %3, align 2
  %150 = load i32, ptr %4, align 4
  %151 = trunc i32 %150 to i16
  %152 = shl i16 %151, 10
  %153 = or i16 %149, %152
  store i16 %153, ptr %3, align 2
  br label %139

154:                                              ; preds = %162
  %155 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3667(ptr nonnull align 2 %6, ptr nonnull align 2 %5, i32 %144)
  %156 = load i16, ptr %5, align 2
  %157 = zext i1 %155 to i16
  %158 = or i16 %156, %157
  store i16 %158, ptr %5, align 2
  %159 = load i16, ptr %6, align 2
  store i16 %159, ptr %3, align 2
  br label %139

160:                                              ; preds = %142
  %161 = bitcast i16 %23 to half
  br label %30

162:                                              ; preds = %142
  br label %154

163:                                              ; preds = %169, %166
  %164 = load i16, ptr %5, align 2
  %165 = icmp eq i16 %164, -32768
  br i1 %165, label %175, label %180

166:                                              ; preds = %139
  %167 = load i16, ptr %3, align 2
  %168 = add i16 %167, 1
  store i16 %168, ptr %3, align 2
  br label %163

169:                                              ; preds = %139
  br label %163

170:                                              ; preds = %180, %175
  %171 = load i16, ptr %3, align 2
  %172 = or i16 %171, %23
  store i16 %172, ptr %3, align 2
  %173 = load i16, ptr %3, align 2
  %174 = bitcast i16 %173 to half
  br label %30

175:                                              ; preds = %163
  %176 = load i16, ptr %3, align 2
  %177 = load i16, ptr %3, align 2
  %178 = and i16 %177, 1
  %179 = add i16 %176, %178
  store i16 %179, ptr %3, align 2
  br label %170

180:                                              ; preds = %163
  br label %170
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3665(ptr nonnull align 2 %0) unnamed_addr #0 {
  %2 = load i16, ptr %0, align 2
  %3 = call i16 @llvm.ctlz.i16(i16 %2, i1 false)
  %4 = trunc i16 %3 to i5
  %5 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %4, i5 5)
  %6 = extractvalue { i5, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i5, i1 } %5, 0
  %10 = load i16, ptr %0, align 2
  %11 = sub i5 15, %9
  %12 = icmp ule i5 %11, 15
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i5 %9 to i4
  %15 = zext i4 %14 to i16
  %16 = shl i16 %10, %15
  store i16 %16, ptr %0, align 2
  %17 = zext i5 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @154)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.common.wideMultiply__anon_3666(i16 %0, i16 %1, ptr nonnull align 2 %2, ptr nonnull align 2 %3) unnamed_addr #0 {
  %5 = zext i16 %0 to i32
  %6 = zext i16 %1 to i32
  %7 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 %5, i32 %6)
  %8 = extractvalue { i32, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %4
  %11 = extractvalue { i32, i1 } %7, 0
  %12 = lshr i32 %11, 16
  %13 = sub i32 65535, %12
  %14 = icmp ule i32 %13, 65535
  br i1 %14, label %18, label %19

15:                                               ; preds = %18
  %16 = trunc i32 %12 to i16
  store i16 %16, ptr %2, align 2
  %17 = trunc i32 %11 to i16
  store i16 %17, ptr %3, align 2
  ret void

18:                                               ; preds = %10
  br label %15

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @155)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3667(ptr nonnull align 2 %0, ptr nonnull align 2 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  store i1 false, ptr %4, align 1
  %5 = icmp ult i32 %2, 16
  br i1 %5, label %8, label %29

6:                                                ; preds = %31, %8
  %7 = load i1, ptr %4, align 1
  ret i1 %7

8:                                                ; preds = %3
  %9 = load i16, ptr %1, align 2
  %10 = sub i32 16, %2
  %11 = trunc i32 %10 to i4
  %12 = zext i4 %11 to i16
  %13 = shl i16 %9, %12
  %14 = icmp ne i16 %13, 0
  store i1 %14, ptr %4, align 1
  %15 = load i16, ptr %0, align 2
  %16 = sub i32 16, %2
  %17 = trunc i32 %16 to i4
  %18 = zext i4 %17 to i16
  %19 = shl i16 %15, %18
  %20 = load i16, ptr %1, align 2
  %21 = trunc i32 %2 to i4
  %22 = zext i4 %21 to i16
  %23 = lshr i16 %20, %22
  %24 = or i16 %19, %23
  store i16 %24, ptr %1, align 2
  %25 = load i16, ptr %0, align 2
  %26 = trunc i32 %2 to i4
  %27 = zext i4 %26 to i16
  %28 = lshr i16 %25, %27
  store i16 %28, ptr %0, align 2
  br label %6

29:                                               ; preds = %3
  %30 = icmp ult i32 %2, 32
  br i1 %30, label %32, label %46

31:                                               ; preds = %46, %32
  br label %6

32:                                               ; preds = %29
  %33 = load i16, ptr %0, align 2
  %34 = sub i32 32, %2
  %35 = trunc i32 %34 to i4
  %36 = zext i4 %35 to i16
  %37 = shl i16 %33, %36
  %38 = load i16, ptr %1, align 2
  %39 = or i16 %37, %38
  %40 = icmp ne i16 %39, 0
  store i1 %40, ptr %4, align 1
  %41 = load i16, ptr %0, align 2
  %42 = sub i32 %2, 16
  %43 = trunc i32 %42 to i4
  %44 = zext i4 %43 to i16
  %45 = lshr i16 %41, %44
  store i16 %45, ptr %1, align 2
  store i16 0, ptr %0, align 2
  br label %31

46:                                               ; preds = %29
  %47 = load i16, ptr %0, align 2
  %48 = load i16, ptr %1, align 2
  %49 = or i16 %47, %48
  %50 = icmp ne i16 %49, 0
  store i1 %50, ptr %4, align 1
  store i16 0, ptr %1, align 2
  store i16 0, ptr %0, align 2
  br label %31
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__mulsf3(float %0, float %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca float, align 4
  store float 0x7FF0000020000000, ptr %10, align 4
  %11 = load float, ptr %10, align 4
  %12 = bitcast float %11 to i32
  %13 = or i32 %12, 4194304
  %14 = bitcast float %0 to i32
  %15 = lshr i32 %14, 23
  %16 = and i32 %15, 255
  %17 = bitcast float %1 to i32
  %18 = lshr i32 %17, 23
  %19 = and i32 %18, 255
  %20 = bitcast float %0 to i32
  %21 = bitcast float %1 to i32
  %22 = xor i32 %20, %21
  %23 = and i32 %22, -2147483648
  %24 = bitcast float %0 to i32
  %25 = and i32 %24, 8388607
  store i32 %25, ptr %9, align 4
  %26 = bitcast float %1 to i32
  %27 = and i32 %26, 8388607
  store i32 %27, ptr %8, align 4
  store i32 0, ptr %7, align 4
  %28 = sub i32 %16, 1
  %29 = icmp uge i32 %28, 254
  br i1 %29, label %49, label %50

30:                                               ; preds = %168, %158, %134, %101, %96, %92, %89, %82, %79, %69, %62
  %31 = phi float [ %65, %62 ], [ %72, %69 ], [ %81, %79 ], [ %83, %82 ], [ %91, %89 ], [ %93, %92 ], [ %97, %96 ], [ %102, %101 ], [ %136, %134 ], [ %159, %158 ], [ %172, %168 ]
  ret float %31

32:                                               ; preds = %59, %111
  %33 = load i32, ptr %9, align 4
  %34 = or i32 %33, 8388608
  store i32 %34, ptr %9, align 4
  %35 = load i32, ptr %8, align 4
  %36 = or i32 %35, 8388608
  store i32 %36, ptr %8, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 undef, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 undef, i64 4, i1 false)
  %37 = load i32, ptr %9, align 4
  %38 = load i32, ptr %8, align 4
  %39 = shl i32 %38, 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3671(i32 %37, i32 %39, ptr nonnull align 4 %6, ptr nonnull align 4 %5)
  %40 = add nuw i32 %16, %19
  %41 = sub nsw i32 %40, 127
  %42 = load i32, ptr %7, align 4
  %43 = add nsw i32 %41, %42
  store i32 %43, ptr %4, align 4
  %44 = load i32, ptr %6, align 4
  %45 = and i32 %44, 8388608
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %120, label %123

47:                                               ; preds = %50, %49
  %48 = phi i1 [ true, %49 ], [ %52, %50 ]
  br i1 %48, label %53, label %59

49:                                               ; preds = %2
  br label %47

50:                                               ; preds = %2
  %51 = sub i32 %19, 1
  %52 = icmp uge i32 %51, 254
  br label %47

53:                                               ; preds = %47
  %54 = bitcast float %0 to i32
  %55 = and i32 %54, 2147483647
  %56 = bitcast float %1 to i32
  %57 = and i32 %56, 2147483647
  %58 = icmp ugt i32 %55, 2139095040
  br i1 %58, label %62, label %66

59:                                               ; preds = %47
  br label %32

60:                                               ; preds = %66
  %61 = icmp ugt i32 %57, 2139095040
  br i1 %61, label %69, label %73

62:                                               ; preds = %53
  %63 = bitcast float %0 to i32
  %64 = or i32 %63, 4194304
  %65 = bitcast i32 %64 to float
  br label %30

66:                                               ; preds = %53
  br label %60

67:                                               ; preds = %73
  %68 = icmp eq i32 %55, 2139095040
  br i1 %68, label %76, label %78

69:                                               ; preds = %60
  %70 = bitcast float %1 to i32
  %71 = or i32 %70, 4194304
  %72 = bitcast i32 %71 to float
  br label %30

73:                                               ; preds = %60
  br label %67

74:                                               ; preds = %78
  %75 = icmp eq i32 %57, 2139095040
  br i1 %75, label %86, label %88

76:                                               ; preds = %67
  %77 = icmp ne i32 %57, 0
  br i1 %77, label %79, label %82

78:                                               ; preds = %67
  br label %74

79:                                               ; preds = %76
  %80 = or i32 %55, %23
  %81 = bitcast i32 %80 to float
  br label %30

82:                                               ; preds = %76
  %83 = bitcast i32 %13 to float
  br label %30

84:                                               ; preds = %88
  %85 = icmp eq i32 %55, 0
  br i1 %85, label %96, label %98

86:                                               ; preds = %74
  %87 = icmp ne i32 %55, 0
  br i1 %87, label %89, label %92

88:                                               ; preds = %74
  br label %84

89:                                               ; preds = %86
  %90 = or i32 %57, %23
  %91 = bitcast i32 %90 to float
  br label %30

92:                                               ; preds = %86
  %93 = bitcast i32 %13 to float
  br label %30

94:                                               ; preds = %98
  %95 = icmp eq i32 %57, 0
  br i1 %95, label %101, label %103

96:                                               ; preds = %84
  %97 = bitcast i32 %23 to float
  br label %30

98:                                               ; preds = %84
  br label %94

99:                                               ; preds = %103
  %100 = icmp ult i32 %55, 8388608
  br i1 %100, label %106, label %110

101:                                              ; preds = %94
  %102 = bitcast i32 %23 to float
  br label %30

103:                                              ; preds = %94
  br label %99

104:                                              ; preds = %110, %106
  %105 = icmp ult i32 %57, 8388608
  br i1 %105, label %112, label %116

106:                                              ; preds = %99
  %107 = load i32, ptr %7, align 4
  %108 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3670(ptr nonnull align 4 %9)
  %109 = add nsw i32 %107, %108
  store i32 %109, ptr %7, align 4
  br label %104

110:                                              ; preds = %99
  br label %104

111:                                              ; preds = %116, %112
  br label %32

112:                                              ; preds = %104
  %113 = load i32, ptr %7, align 4
  %114 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3670(ptr nonnull align 4 %8)
  %115 = add nsw i32 %113, %114
  store i32 %115, ptr %7, align 4
  br label %111

116:                                              ; preds = %104
  br label %111

117:                                              ; preds = %123, %120
  %118 = load i32, ptr %4, align 4
  %119 = icmp sge i32 %118, 255
  br i1 %119, label %134, label %137

120:                                              ; preds = %32
  %121 = load i32, ptr %4, align 4
  %122 = add i32 %121, 1
  store i32 %122, ptr %4, align 4
  br label %117

123:                                              ; preds = %32
  %124 = load i32, ptr %6, align 4
  %125 = shl i32 %124, 1
  %126 = load i32, ptr %5, align 4
  %127 = lshr i32 %126, 31
  %128 = or i32 %125, %127
  store i32 %128, ptr %6, align 4
  %129 = load i32, ptr %5, align 4
  %130 = shl i32 %129, 1
  store i32 %130, ptr %5, align 4
  br label %117

131:                                              ; preds = %137
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 undef, i64 4, i1 false)
  %132 = load i32, ptr %4, align 4
  %133 = icmp sle i32 %132, 0
  br i1 %133, label %141, label %145

134:                                              ; preds = %117
  %135 = or i32 2139095040, %23
  %136 = bitcast i32 %135 to float
  br label %30

137:                                              ; preds = %117
  br label %131

138:                                              ; preds = %145, %152
  %139 = load i32, ptr %5, align 4
  %140 = icmp ugt i32 %139, -2147483648
  br i1 %140, label %164, label %167

141:                                              ; preds = %131
  %142 = load i32, ptr %4, align 4
  %143 = sub i32 1, %142
  %144 = icmp uge i32 %143, 32
  br i1 %144, label %158, label %160

145:                                              ; preds = %131
  %146 = load i32, ptr %6, align 4
  %147 = and i32 %146, 8388607
  store i32 %147, ptr %3, align 4
  %148 = load i32, ptr %3, align 4
  %149 = load i32, ptr %4, align 4
  %150 = shl i32 %149, 23
  %151 = or i32 %148, %150
  store i32 %151, ptr %3, align 4
  br label %138

152:                                              ; preds = %160
  %153 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3672(ptr nonnull align 4 %6, ptr nonnull align 4 %5, i32 %143)
  %154 = load i32, ptr %5, align 4
  %155 = zext i1 %153 to i32
  %156 = or i32 %154, %155
  store i32 %156, ptr %5, align 4
  %157 = load i32, ptr %6, align 4
  store i32 %157, ptr %3, align 4
  br label %138

158:                                              ; preds = %141
  %159 = bitcast i32 %23 to float
  br label %30

160:                                              ; preds = %141
  br label %152

161:                                              ; preds = %167, %164
  %162 = load i32, ptr %5, align 4
  %163 = icmp eq i32 %162, -2147483648
  br i1 %163, label %173, label %178

164:                                              ; preds = %138
  %165 = load i32, ptr %3, align 4
  %166 = add i32 %165, 1
  store i32 %166, ptr %3, align 4
  br label %161

167:                                              ; preds = %138
  br label %161

168:                                              ; preds = %178, %173
  %169 = load i32, ptr %3, align 4
  %170 = or i32 %169, %23
  store i32 %170, ptr %3, align 4
  %171 = load i32, ptr %3, align 4
  %172 = bitcast i32 %171 to float
  br label %30

173:                                              ; preds = %161
  %174 = load i32, ptr %3, align 4
  %175 = load i32, ptr %3, align 4
  %176 = and i32 %175, 1
  %177 = add i32 %174, %176
  store i32 %177, ptr %3, align 4
  br label %168

178:                                              ; preds = %161
  br label %168
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3670(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = load i32, ptr %0, align 4
  %3 = call i32 @llvm.ctlz.i32(i32 %2, i1 false)
  %4 = trunc i32 %3 to i6
  %5 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %4, i6 8)
  %6 = extractvalue { i6, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i6, i1 } %5, 0
  %10 = load i32, ptr %0, align 4
  %11 = sub i6 31, %9
  %12 = icmp ule i6 %11, 31
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i6 %9 to i5
  %15 = zext i5 %14 to i32
  %16 = shl i32 %10, %15
  store i32 %16, ptr %0, align 4
  %17 = zext i6 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @156)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.common.wideMultiply__anon_3671(i32 %0, i32 %1, ptr nonnull align 4 %2, ptr nonnull align 4 %3) unnamed_addr #0 {
  %5 = zext i32 %0 to i64
  %6 = zext i32 %1 to i64
  %7 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %5, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %4
  %11 = extractvalue { i64, i1 } %7, 0
  %12 = lshr i64 %11, 32
  %13 = trunc i64 %12 to i32
  store i32 %13, ptr %2, align 4
  %14 = trunc i64 %11 to i32
  store i32 %14, ptr %3, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3672(ptr nonnull align 4 %0, ptr nonnull align 4 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  store i1 false, ptr %4, align 1
  %5 = icmp ult i32 %2, 32
  br i1 %5, label %8, label %29

6:                                                ; preds = %31, %8
  %7 = load i1, ptr %4, align 1
  ret i1 %7

8:                                                ; preds = %3
  %9 = load i32, ptr %1, align 4
  %10 = sub i32 32, %2
  %11 = trunc i32 %10 to i5
  %12 = zext i5 %11 to i32
  %13 = shl i32 %9, %12
  %14 = icmp ne i32 %13, 0
  store i1 %14, ptr %4, align 1
  %15 = load i32, ptr %0, align 4
  %16 = sub i32 32, %2
  %17 = trunc i32 %16 to i5
  %18 = zext i5 %17 to i32
  %19 = shl i32 %15, %18
  %20 = load i32, ptr %1, align 4
  %21 = trunc i32 %2 to i5
  %22 = zext i5 %21 to i32
  %23 = lshr i32 %20, %22
  %24 = or i32 %19, %23
  store i32 %24, ptr %1, align 4
  %25 = load i32, ptr %0, align 4
  %26 = trunc i32 %2 to i5
  %27 = zext i5 %26 to i32
  %28 = lshr i32 %25, %27
  store i32 %28, ptr %0, align 4
  br label %6

29:                                               ; preds = %3
  %30 = icmp ult i32 %2, 64
  br i1 %30, label %32, label %46

31:                                               ; preds = %46, %32
  br label %6

32:                                               ; preds = %29
  %33 = load i32, ptr %0, align 4
  %34 = sub i32 64, %2
  %35 = trunc i32 %34 to i5
  %36 = zext i5 %35 to i32
  %37 = shl i32 %33, %36
  %38 = load i32, ptr %1, align 4
  %39 = or i32 %37, %38
  %40 = icmp ne i32 %39, 0
  store i1 %40, ptr %4, align 1
  %41 = load i32, ptr %0, align 4
  %42 = sub i32 %2, 32
  %43 = trunc i32 %42 to i5
  %44 = zext i5 %43 to i32
  %45 = lshr i32 %41, %44
  store i32 %45, ptr %1, align 4
  store i32 0, ptr %0, align 4
  br label %31

46:                                               ; preds = %29
  %47 = load i32, ptr %0, align 4
  %48 = load i32, ptr %1, align 4
  %49 = or i32 %47, %48
  %50 = icmp ne i32 %49, 0
  store i1 %50, ptr %4, align 1
  store i32 0, ptr %1, align 4
  store i32 0, ptr %0, align 4
  br label %31
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__muldf3(double %0, double %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  store double 0x7FF0000000000001, ptr %10, align 8
  %11 = load double, ptr %10, align 8
  %12 = bitcast double %11 to i64
  %13 = or i64 %12, 2251799813685248
  %14 = bitcast double %0 to i64
  %15 = lshr i64 %14, 52
  %16 = and i64 %15, 2047
  %17 = trunc i64 %16 to i32
  %18 = bitcast double %1 to i64
  %19 = lshr i64 %18, 52
  %20 = and i64 %19, 2047
  %21 = trunc i64 %20 to i32
  %22 = bitcast double %0 to i64
  %23 = bitcast double %1 to i64
  %24 = xor i64 %22, %23
  %25 = and i64 %24, -9223372036854775808
  %26 = bitcast double %0 to i64
  %27 = and i64 %26, 4503599627370495
  store i64 %27, ptr %9, align 8
  %28 = bitcast double %1 to i64
  %29 = and i64 %28, 4503599627370495
  store i64 %29, ptr %8, align 8
  store i32 0, ptr %7, align 4
  %30 = sub i32 %17, 1
  %31 = icmp uge i32 %30, 2046
  br i1 %31, label %51, label %52

32:                                               ; preds = %173, %163, %136, %103, %98, %94, %91, %84, %81, %71, %64
  %33 = phi double [ %67, %64 ], [ %74, %71 ], [ %83, %81 ], [ %85, %84 ], [ %93, %91 ], [ %95, %94 ], [ %99, %98 ], [ %104, %103 ], [ %138, %136 ], [ %164, %163 ], [ %177, %173 ]
  ret double %33

34:                                               ; preds = %61, %113
  %35 = load i64, ptr %9, align 8
  %36 = or i64 %35, 4503599627370496
  store i64 %36, ptr %9, align 8
  %37 = load i64, ptr %8, align 8
  %38 = or i64 %37, 4503599627370496
  store i64 %38, ptr %8, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 undef, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 undef, i64 8, i1 false)
  %39 = load i64, ptr %9, align 8
  %40 = load i64, ptr %8, align 8
  %41 = shl i64 %40, 11
  call fastcc void @compiler_rt.common.wideMultiply__anon_3676(i64 %39, i64 %41, ptr nonnull align 8 %6, ptr nonnull align 8 %5)
  %42 = add nuw i32 %17, %21
  %43 = sub nsw i32 %42, 1023
  %44 = load i32, ptr %7, align 4
  %45 = add nsw i32 %43, %44
  store i32 %45, ptr %4, align 4
  %46 = load i64, ptr %6, align 8
  %47 = and i64 %46, 4503599627370496
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %122, label %125

49:                                               ; preds = %52, %51
  %50 = phi i1 [ true, %51 ], [ %54, %52 ]
  br i1 %50, label %55, label %61

51:                                               ; preds = %2
  br label %49

52:                                               ; preds = %2
  %53 = sub i32 %21, 1
  %54 = icmp uge i32 %53, 2046
  br label %49

55:                                               ; preds = %49
  %56 = bitcast double %0 to i64
  %57 = and i64 %56, 9223372036854775807
  %58 = bitcast double %1 to i64
  %59 = and i64 %58, 9223372036854775807
  %60 = icmp ugt i64 %57, 9218868437227405312
  br i1 %60, label %64, label %68

61:                                               ; preds = %49
  br label %34

62:                                               ; preds = %68
  %63 = icmp ugt i64 %59, 9218868437227405312
  br i1 %63, label %71, label %75

64:                                               ; preds = %55
  %65 = bitcast double %0 to i64
  %66 = or i64 %65, 2251799813685248
  %67 = bitcast i64 %66 to double
  br label %32

68:                                               ; preds = %55
  br label %62

69:                                               ; preds = %75
  %70 = icmp eq i64 %57, 9218868437227405312
  br i1 %70, label %78, label %80

71:                                               ; preds = %62
  %72 = bitcast double %1 to i64
  %73 = or i64 %72, 2251799813685248
  %74 = bitcast i64 %73 to double
  br label %32

75:                                               ; preds = %62
  br label %69

76:                                               ; preds = %80
  %77 = icmp eq i64 %59, 9218868437227405312
  br i1 %77, label %88, label %90

78:                                               ; preds = %69
  %79 = icmp ne i64 %59, 0
  br i1 %79, label %81, label %84

80:                                               ; preds = %69
  br label %76

81:                                               ; preds = %78
  %82 = or i64 %57, %25
  %83 = bitcast i64 %82 to double
  br label %32

84:                                               ; preds = %78
  %85 = bitcast i64 %13 to double
  br label %32

86:                                               ; preds = %90
  %87 = icmp eq i64 %57, 0
  br i1 %87, label %98, label %100

88:                                               ; preds = %76
  %89 = icmp ne i64 %57, 0
  br i1 %89, label %91, label %94

90:                                               ; preds = %76
  br label %86

91:                                               ; preds = %88
  %92 = or i64 %59, %25
  %93 = bitcast i64 %92 to double
  br label %32

94:                                               ; preds = %88
  %95 = bitcast i64 %13 to double
  br label %32

96:                                               ; preds = %100
  %97 = icmp eq i64 %59, 0
  br i1 %97, label %103, label %105

98:                                               ; preds = %86
  %99 = bitcast i64 %25 to double
  br label %32

100:                                              ; preds = %86
  br label %96

101:                                              ; preds = %105
  %102 = icmp ult i64 %57, 4503599627370496
  br i1 %102, label %108, label %112

103:                                              ; preds = %96
  %104 = bitcast i64 %25 to double
  br label %32

105:                                              ; preds = %96
  br label %101

106:                                              ; preds = %112, %108
  %107 = icmp ult i64 %59, 4503599627370496
  br i1 %107, label %114, label %118

108:                                              ; preds = %101
  %109 = load i32, ptr %7, align 4
  %110 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3675(ptr nonnull align 8 %9)
  %111 = add nsw i32 %109, %110
  store i32 %111, ptr %7, align 4
  br label %106

112:                                              ; preds = %101
  br label %106

113:                                              ; preds = %118, %114
  br label %34

114:                                              ; preds = %106
  %115 = load i32, ptr %7, align 4
  %116 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3675(ptr nonnull align 8 %8)
  %117 = add nsw i32 %115, %116
  store i32 %117, ptr %7, align 4
  br label %113

118:                                              ; preds = %106
  br label %113

119:                                              ; preds = %125, %122
  %120 = load i32, ptr %4, align 4
  %121 = icmp sge i32 %120, 2047
  br i1 %121, label %136, label %139

122:                                              ; preds = %34
  %123 = load i32, ptr %4, align 4
  %124 = add i32 %123, 1
  store i32 %124, ptr %4, align 4
  br label %119

125:                                              ; preds = %34
  %126 = load i64, ptr %6, align 8
  %127 = shl i64 %126, 1
  %128 = load i64, ptr %5, align 8
  %129 = lshr i64 %128, 63
  %130 = or i64 %127, %129
  store i64 %130, ptr %6, align 8
  %131 = load i64, ptr %5, align 8
  %132 = shl i64 %131, 1
  store i64 %132, ptr %5, align 8
  br label %119

133:                                              ; preds = %139
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 undef, i64 8, i1 false)
  %134 = load i32, ptr %4, align 4
  %135 = icmp sle i32 %134, 0
  br i1 %135, label %143, label %149

136:                                              ; preds = %119
  %137 = or i64 9218868437227405312, %25
  %138 = bitcast i64 %137 to double
  br label %32

139:                                              ; preds = %119
  br label %133

140:                                              ; preds = %149, %157
  %141 = load i64, ptr %5, align 8
  %142 = icmp ugt i64 %141, -9223372036854775808
  br i1 %142, label %169, label %172

143:                                              ; preds = %133
  %144 = load i32, ptr %4, align 4
  %145 = zext i32 %144 to i64
  %146 = sub i64 1, %145
  %147 = trunc i64 %146 to i32
  %148 = icmp uge i32 %147, 64
  br i1 %148, label %163, label %165

149:                                              ; preds = %133
  %150 = load i64, ptr %6, align 8
  %151 = and i64 %150, 4503599627370495
  store i64 %151, ptr %3, align 8
  %152 = load i64, ptr %3, align 8
  %153 = load i32, ptr %4, align 4
  %154 = sext i32 %153 to i64
  %155 = shl i64 %154, 52
  %156 = or i64 %152, %155
  store i64 %156, ptr %3, align 8
  br label %140

157:                                              ; preds = %165
  %158 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3677(ptr nonnull align 8 %6, ptr nonnull align 8 %5, i32 %147)
  %159 = load i64, ptr %5, align 8
  %160 = zext i1 %158 to i64
  %161 = or i64 %159, %160
  store i64 %161, ptr %5, align 8
  %162 = load i64, ptr %6, align 8
  store i64 %162, ptr %3, align 8
  br label %140

163:                                              ; preds = %143
  %164 = bitcast i64 %25 to double
  br label %32

165:                                              ; preds = %143
  br label %157

166:                                              ; preds = %172, %169
  %167 = load i64, ptr %5, align 8
  %168 = icmp eq i64 %167, -9223372036854775808
  br i1 %168, label %178, label %183

169:                                              ; preds = %140
  %170 = load i64, ptr %3, align 8
  %171 = add i64 %170, 1
  store i64 %171, ptr %3, align 8
  br label %166

172:                                              ; preds = %140
  br label %166

173:                                              ; preds = %183, %178
  %174 = load i64, ptr %3, align 8
  %175 = or i64 %174, %25
  store i64 %175, ptr %3, align 8
  %176 = load i64, ptr %3, align 8
  %177 = bitcast i64 %176 to double
  br label %32

178:                                              ; preds = %166
  %179 = load i64, ptr %3, align 8
  %180 = load i64, ptr %3, align 8
  %181 = and i64 %180, 1
  %182 = add i64 %179, %181
  store i64 %182, ptr %3, align 8
  br label %173

183:                                              ; preds = %166
  br label %173
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3675(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i64, ptr %0, align 8
  %3 = call i64 @llvm.ctlz.i64(i64 %2, i1 false)
  %4 = trunc i64 %3 to i7
  %5 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %4, i7 11)
  %6 = extractvalue { i7, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i7, i1 } %5, 0
  %10 = load i64, ptr %0, align 8
  %11 = sub i7 63, %9
  %12 = icmp ule i7 %11, 63
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i7 %9 to i6
  %15 = zext i6 %14 to i64
  %16 = shl i64 %10, %15
  store i64 %16, ptr %0, align 8
  %17 = zext i7 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @157)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.common.wideMultiply__anon_3676(i64 %0, i64 %1, ptr nonnull align 8 %2, ptr nonnull align 8 %3) unnamed_addr #0 {
  %5 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.loWord(i64 %0)
  %6 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.loWord(i64 %1)
  %7 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %5, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %4
  %11 = extractvalue { i64, i1 } %7, 0
  %12 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.loWord(i64 %0)
  %13 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %1)
  %14 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %12, i64 %13)
  %15 = extractvalue { i64, i1 } %14, 1
  br i1 %15, label %16, label %17

16:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %10
  %18 = extractvalue { i64, i1 } %14, 0
  %19 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %0)
  %20 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.loWord(i64 %1)
  %21 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 %20)
  %22 = extractvalue { i64, i1 } %21, 1
  br i1 %22, label %23, label %24

23:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

24:                                               ; preds = %17
  %25 = extractvalue { i64, i1 } %21, 0
  %26 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %0)
  %27 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %1)
  %28 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %26, i64 %27)
  %29 = extractvalue { i64, i1 } %28, 1
  br i1 %29, label %30, label %31

30:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %24
  %32 = extractvalue { i64, i1 } %28, 0
  %33 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.loWord(i64 %11)
  %34 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %11)
  %35 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.loWord(i64 %18)
  %36 = add i64 %34, %35
  %37 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.loWord(i64 %25)
  %38 = add i64 %36, %37
  %39 = shl i64 %38, 32
  %40 = add i64 %33, %39
  store i64 %40, ptr %3, align 8
  %41 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %18)
  %42 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %25)
  %43 = add i64 %41, %42
  %44 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %38)
  %45 = add i64 %43, %44
  %46 = add i64 %45, %32
  store i64 %46, ptr %2, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3677(ptr nonnull align 8 %0, ptr nonnull align 8 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  store i1 false, ptr %4, align 1
  %5 = icmp ult i32 %2, 64
  br i1 %5, label %8, label %29

6:                                                ; preds = %31, %8
  %7 = load i1, ptr %4, align 1
  ret i1 %7

8:                                                ; preds = %3
  %9 = load i64, ptr %1, align 8
  %10 = sub i32 64, %2
  %11 = trunc i32 %10 to i6
  %12 = zext i6 %11 to i64
  %13 = shl i64 %9, %12
  %14 = icmp ne i64 %13, 0
  store i1 %14, ptr %4, align 1
  %15 = load i64, ptr %0, align 8
  %16 = sub i32 64, %2
  %17 = trunc i32 %16 to i6
  %18 = zext i6 %17 to i64
  %19 = shl i64 %15, %18
  %20 = load i64, ptr %1, align 8
  %21 = trunc i32 %2 to i6
  %22 = zext i6 %21 to i64
  %23 = lshr i64 %20, %22
  %24 = or i64 %19, %23
  store i64 %24, ptr %1, align 8
  %25 = load i64, ptr %0, align 8
  %26 = trunc i32 %2 to i6
  %27 = zext i6 %26 to i64
  %28 = lshr i64 %25, %27
  store i64 %28, ptr %0, align 8
  br label %6

29:                                               ; preds = %3
  %30 = icmp ult i32 %2, 128
  br i1 %30, label %32, label %46

31:                                               ; preds = %46, %32
  br label %6

32:                                               ; preds = %29
  %33 = load i64, ptr %0, align 8
  %34 = sub i32 128, %2
  %35 = trunc i32 %34 to i6
  %36 = zext i6 %35 to i64
  %37 = shl i64 %33, %36
  %38 = load i64, ptr %1, align 8
  %39 = or i64 %37, %38
  %40 = icmp ne i64 %39, 0
  store i1 %40, ptr %4, align 1
  %41 = load i64, ptr %0, align 8
  %42 = sub i32 %2, 64
  %43 = trunc i32 %42 to i6
  %44 = zext i6 %43 to i64
  %45 = lshr i64 %41, %44
  store i64 %45, ptr %1, align 8
  store i64 0, ptr %0, align 8
  br label %31

46:                                               ; preds = %29
  %47 = load i64, ptr %0, align 8
  %48 = load i64, ptr %1, align 8
  %49 = or i64 %47, %48
  %50 = icmp ne i64 %49, 0
  store i1 %50, ptr %4, align 1
  store i64 0, ptr %1, align 8
  store i64 0, ptr %0, align 8
  br label %31
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__multf3(fp128 %0, fp128 %1) #0 {
  %3 = alloca i128, align 8
  %4 = alloca i32, align 4
  %5 = alloca i128, align 8
  %6 = alloca i128, align 8
  %7 = alloca i32, align 4
  %8 = alloca i128, align 8
  %9 = alloca i128, align 8
  %10 = alloca fp128, align 16
  store fp128 0xL00000000000000017FFF000000000000, ptr %10, align 16
  %11 = load fp128, ptr %10, align 16
  %12 = bitcast fp128 %11 to i128
  %13 = or i128 %12, 2596148429267413814265248164610048
  %14 = bitcast fp128 %0 to i128
  %15 = lshr i128 %14, 112
  %16 = and i128 %15, 32767
  %17 = trunc i128 %16 to i32
  %18 = bitcast fp128 %1 to i128
  %19 = lshr i128 %18, 112
  %20 = and i128 %19, 32767
  %21 = trunc i128 %20 to i32
  %22 = bitcast fp128 %0 to i128
  %23 = bitcast fp128 %1 to i128
  %24 = xor i128 %22, %23
  %25 = and i128 %24, -170141183460469231731687303715884105728
  %26 = bitcast fp128 %0 to i128
  %27 = and i128 %26, 5192296858534827628530496329220095
  store i128 %27, ptr %9, align 8
  %28 = bitcast fp128 %1 to i128
  %29 = and i128 %28, 5192296858534827628530496329220095
  store i128 %29, ptr %8, align 8
  store i32 0, ptr %7, align 4
  %30 = sub i32 %17, 1
  %31 = icmp uge i32 %30, 32766
  br i1 %31, label %51, label %52

32:                                               ; preds = %173, %163, %136, %103, %98, %94, %91, %84, %81, %71, %64
  %33 = phi fp128 [ %67, %64 ], [ %74, %71 ], [ %83, %81 ], [ %85, %84 ], [ %93, %91 ], [ %95, %94 ], [ %99, %98 ], [ %104, %103 ], [ %138, %136 ], [ %164, %163 ], [ %177, %173 ]
  ret fp128 %33

34:                                               ; preds = %61, %113
  %35 = load i128, ptr %9, align 8
  %36 = or i128 %35, 5192296858534827628530496329220096
  store i128 %36, ptr %9, align 8
  %37 = load i128, ptr %8, align 8
  %38 = or i128 %37, 5192296858534827628530496329220096
  store i128 %38, ptr %8, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 undef, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 undef, i64 16, i1 false)
  %39 = load i128, ptr %9, align 8
  %40 = load i128, ptr %8, align 8
  %41 = shl i128 %40, 15
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %39, i128 %41, ptr nonnull align 8 %6, ptr nonnull align 8 %5)
  %42 = add nuw i32 %17, %21
  %43 = sub nsw i32 %42, 16383
  %44 = load i32, ptr %7, align 4
  %45 = add nsw i32 %43, %44
  store i32 %45, ptr %4, align 4
  %46 = load i128, ptr %6, align 8
  %47 = and i128 %46, 5192296858534827628530496329220096
  %48 = icmp ne i128 %47, 0
  br i1 %48, label %122, label %125

49:                                               ; preds = %52, %51
  %50 = phi i1 [ true, %51 ], [ %54, %52 ]
  br i1 %50, label %55, label %61

51:                                               ; preds = %2
  br label %49

52:                                               ; preds = %2
  %53 = sub i32 %21, 1
  %54 = icmp uge i32 %53, 32766
  br label %49

55:                                               ; preds = %49
  %56 = bitcast fp128 %0 to i128
  %57 = and i128 %56, 170141183460469231731687303715884105727
  %58 = bitcast fp128 %1 to i128
  %59 = and i128 %58, 170141183460469231731687303715884105727
  %60 = icmp ugt i128 %57, 170135991163610696904058773219554885632
  br i1 %60, label %64, label %68

61:                                               ; preds = %49
  br label %34

62:                                               ; preds = %68
  %63 = icmp ugt i128 %59, 170135991163610696904058773219554885632
  br i1 %63, label %71, label %75

64:                                               ; preds = %55
  %65 = bitcast fp128 %0 to i128
  %66 = or i128 %65, 2596148429267413814265248164610048
  %67 = bitcast i128 %66 to fp128
  br label %32

68:                                               ; preds = %55
  br label %62

69:                                               ; preds = %75
  %70 = icmp eq i128 %57, 170135991163610696904058773219554885632
  br i1 %70, label %78, label %80

71:                                               ; preds = %62
  %72 = bitcast fp128 %1 to i128
  %73 = or i128 %72, 2596148429267413814265248164610048
  %74 = bitcast i128 %73 to fp128
  br label %32

75:                                               ; preds = %62
  br label %69

76:                                               ; preds = %80
  %77 = icmp eq i128 %59, 170135991163610696904058773219554885632
  br i1 %77, label %88, label %90

78:                                               ; preds = %69
  %79 = icmp ne i128 %59, 0
  br i1 %79, label %81, label %84

80:                                               ; preds = %69
  br label %76

81:                                               ; preds = %78
  %82 = or i128 %57, %25
  %83 = bitcast i128 %82 to fp128
  br label %32

84:                                               ; preds = %78
  %85 = bitcast i128 %13 to fp128
  br label %32

86:                                               ; preds = %90
  %87 = icmp eq i128 %57, 0
  br i1 %87, label %98, label %100

88:                                               ; preds = %76
  %89 = icmp ne i128 %57, 0
  br i1 %89, label %91, label %94

90:                                               ; preds = %76
  br label %86

91:                                               ; preds = %88
  %92 = or i128 %59, %25
  %93 = bitcast i128 %92 to fp128
  br label %32

94:                                               ; preds = %88
  %95 = bitcast i128 %13 to fp128
  br label %32

96:                                               ; preds = %100
  %97 = icmp eq i128 %59, 0
  br i1 %97, label %103, label %105

98:                                               ; preds = %86
  %99 = bitcast i128 %25 to fp128
  br label %32

100:                                              ; preds = %86
  br label %96

101:                                              ; preds = %105
  %102 = icmp ult i128 %57, 5192296858534827628530496329220096
  br i1 %102, label %108, label %112

103:                                              ; preds = %96
  %104 = bitcast i128 %25 to fp128
  br label %32

105:                                              ; preds = %96
  br label %101

106:                                              ; preds = %112, %108
  %107 = icmp ult i128 %59, 5192296858534827628530496329220096
  br i1 %107, label %114, label %118

108:                                              ; preds = %101
  %109 = load i32, ptr %7, align 4
  %110 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3680(ptr nonnull align 8 %9)
  %111 = add nsw i32 %109, %110
  store i32 %111, ptr %7, align 4
  br label %106

112:                                              ; preds = %101
  br label %106

113:                                              ; preds = %118, %114
  br label %34

114:                                              ; preds = %106
  %115 = load i32, ptr %7, align 4
  %116 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3680(ptr nonnull align 8 %8)
  %117 = add nsw i32 %115, %116
  store i32 %117, ptr %7, align 4
  br label %113

118:                                              ; preds = %106
  br label %113

119:                                              ; preds = %125, %122
  %120 = load i32, ptr %4, align 4
  %121 = icmp sge i32 %120, 32767
  br i1 %121, label %136, label %139

122:                                              ; preds = %34
  %123 = load i32, ptr %4, align 4
  %124 = add i32 %123, 1
  store i32 %124, ptr %4, align 4
  br label %119

125:                                              ; preds = %34
  %126 = load i128, ptr %6, align 8
  %127 = shl i128 %126, 1
  %128 = load i128, ptr %5, align 8
  %129 = lshr i128 %128, 127
  %130 = or i128 %127, %129
  store i128 %130, ptr %6, align 8
  %131 = load i128, ptr %5, align 8
  %132 = shl i128 %131, 1
  store i128 %132, ptr %5, align 8
  br label %119

133:                                              ; preds = %139
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 undef, i64 16, i1 false)
  %134 = load i32, ptr %4, align 4
  %135 = icmp sle i32 %134, 0
  br i1 %135, label %143, label %149

136:                                              ; preds = %119
  %137 = or i128 170135991163610696904058773219554885632, %25
  %138 = bitcast i128 %137 to fp128
  br label %32

139:                                              ; preds = %119
  br label %133

140:                                              ; preds = %149, %157
  %141 = load i128, ptr %5, align 8
  %142 = icmp ugt i128 %141, -170141183460469231731687303715884105728
  br i1 %142, label %169, label %172

143:                                              ; preds = %133
  %144 = load i32, ptr %4, align 4
  %145 = zext i32 %144 to i128
  %146 = sub i128 1, %145
  %147 = trunc i128 %146 to i32
  %148 = icmp uge i32 %147, 128
  br i1 %148, label %163, label %165

149:                                              ; preds = %133
  %150 = load i128, ptr %6, align 8
  %151 = and i128 %150, 5192296858534827628530496329220095
  store i128 %151, ptr %3, align 8
  %152 = load i128, ptr %3, align 8
  %153 = load i32, ptr %4, align 4
  %154 = sext i32 %153 to i128
  %155 = shl i128 %154, 112
  %156 = or i128 %152, %155
  store i128 %156, ptr %3, align 8
  br label %140

157:                                              ; preds = %165
  %158 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3682(ptr nonnull align 8 %6, ptr nonnull align 8 %5, i32 %147)
  %159 = load i128, ptr %5, align 8
  %160 = zext i1 %158 to i128
  %161 = or i128 %159, %160
  store i128 %161, ptr %5, align 8
  %162 = load i128, ptr %6, align 8
  store i128 %162, ptr %3, align 8
  br label %140

163:                                              ; preds = %143
  %164 = bitcast i128 %25 to fp128
  br label %32

165:                                              ; preds = %143
  br label %157

166:                                              ; preds = %172, %169
  %167 = load i128, ptr %5, align 8
  %168 = icmp eq i128 %167, -170141183460469231731687303715884105728
  br i1 %168, label %178, label %183

169:                                              ; preds = %140
  %170 = load i128, ptr %3, align 8
  %171 = add i128 %170, 1
  store i128 %171, ptr %3, align 8
  br label %166

172:                                              ; preds = %140
  br label %166

173:                                              ; preds = %183, %178
  %174 = load i128, ptr %3, align 8
  %175 = or i128 %174, %25
  store i128 %175, ptr %3, align 8
  %176 = load i128, ptr %3, align 8
  %177 = bitcast i128 %176 to fp128
  br label %32

178:                                              ; preds = %166
  %179 = load i128, ptr %3, align 8
  %180 = load i128, ptr %3, align 8
  %181 = and i128 %180, 1
  %182 = add i128 %179, %181
  store i128 %182, ptr %3, align 8
  br label %173

183:                                              ; preds = %166
  br label %173
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3680(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i128, ptr %0, align 8
  %3 = call i128 @llvm.ctlz.i128(i128 %2, i1 false)
  %4 = trunc i128 %3 to i8
  %5 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %4, i8 15)
  %6 = extractvalue { i8, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i8, i1 } %5, 0
  %10 = load i128, ptr %0, align 8
  %11 = sub i8 127, %9
  %12 = icmp ule i8 %11, 127
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i8 %9 to i7
  %15 = zext i7 %14 to i128
  %16 = shl i128 %10, %15
  store i128 %16, ptr %0, align 8
  %17 = zext i8 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @158)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %0, i128 %1, ptr nonnull align 8 %2, ptr nonnull align 8 %3) unnamed_addr #0 {
  %5 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %0)
  %6 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %1)
  %7 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %5, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %4
  %11 = extractvalue { i64, i1 } %7, 0
  %12 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %0)
  %13 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %1)
  %14 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %12, i64 %13)
  %15 = extractvalue { i64, i1 } %14, 1
  br i1 %15, label %16, label %17

16:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %10
  %18 = extractvalue { i64, i1 } %14, 0
  %19 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %0)
  %20 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %1)
  %21 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 %20)
  %22 = extractvalue { i64, i1 } %21, 1
  br i1 %22, label %23, label %24

23:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

24:                                               ; preds = %17
  %25 = extractvalue { i64, i1 } %21, 0
  %26 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %0)
  %27 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %1)
  %28 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %26, i64 %27)
  %29 = extractvalue { i64, i1 } %28, 1
  br i1 %29, label %30, label %31

30:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %24
  %32 = extractvalue { i64, i1 } %28, 0
  %33 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %0)
  %34 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %1)
  %35 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %33, i64 %34)
  %36 = extractvalue { i64, i1 } %35, 1
  br i1 %36, label %37, label %38

37:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

38:                                               ; preds = %31
  %39 = extractvalue { i64, i1 } %35, 0
  %40 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %0)
  %41 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %1)
  %42 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 %41)
  %43 = extractvalue { i64, i1 } %42, 1
  br i1 %43, label %44, label %45

44:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %38
  %46 = extractvalue { i64, i1 } %42, 0
  %47 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %0)
  %48 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %1)
  %49 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %47, i64 %48)
  %50 = extractvalue { i64, i1 } %49, 1
  br i1 %50, label %51, label %52

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i64, i1 } %49, 0
  %54 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %0)
  %55 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %1)
  %56 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 %55)
  %57 = extractvalue { i64, i1 } %56, 1
  br i1 %57, label %58, label %59

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i64, i1 } %56, 0
  %61 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %0)
  %62 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %1)
  %63 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %61, i64 %62)
  %64 = extractvalue { i64, i1 } %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i64, i1 } %63, 0
  %68 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %0)
  %69 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %1)
  %70 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 %69)
  %71 = extractvalue { i64, i1 } %70, 1
  br i1 %71, label %72, label %73

72:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %66
  %74 = extractvalue { i64, i1 } %70, 0
  %75 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %0)
  %76 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %1)
  %77 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %75, i64 %76)
  %78 = extractvalue { i64, i1 } %77, 1
  br i1 %78, label %79, label %80

79:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %73
  %81 = extractvalue { i64, i1 } %77, 0
  %82 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %0)
  %83 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %1)
  %84 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %82, i64 %83)
  %85 = extractvalue { i64, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %80
  %88 = extractvalue { i64, i1 } %84, 0
  %89 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %0)
  %90 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %1)
  %91 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %89, i64 %90)
  %92 = extractvalue { i64, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %87
  %95 = extractvalue { i64, i1 } %91, 0
  %96 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %0)
  %97 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %1)
  %98 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %96, i64 %97)
  %99 = extractvalue { i64, i1 } %98, 1
  br i1 %99, label %100, label %101

100:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %94
  %102 = extractvalue { i64, i1 } %98, 0
  %103 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %0)
  %104 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %1)
  %105 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %103, i64 %104)
  %106 = extractvalue { i64, i1 } %105, 1
  br i1 %106, label %107, label %108

107:                                              ; preds = %101
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

108:                                              ; preds = %101
  %109 = extractvalue { i64, i1 } %105, 0
  %110 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %0)
  %111 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %1)
  %112 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %110, i64 %111)
  %113 = extractvalue { i64, i1 } %112, 1
  br i1 %113, label %114, label %115

114:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

115:                                              ; preds = %108
  %116 = extractvalue { i64, i1 } %112, 0
  %117 = zext i64 %116 to i128
  %118 = zext i64 %88 to i128
  %119 = zext i64 %109 to i128
  %120 = add i128 %118, %119
  %121 = zext i64 %60 to i128
  %122 = zext i64 %81 to i128
  %123 = add i128 %121, %122
  %124 = zext i64 %102 to i128
  %125 = add i128 %123, %124
  %126 = zext i64 %32 to i128
  %127 = zext i64 %53 to i128
  %128 = add i128 %126, %127
  %129 = zext i64 %74 to i128
  %130 = add i128 %128, %129
  %131 = zext i64 %95 to i128
  %132 = add i128 %130, %131
  %133 = zext i64 %25 to i128
  %134 = zext i64 %46 to i128
  %135 = add i128 %133, %134
  %136 = zext i64 %67 to i128
  %137 = add i128 %135, %136
  %138 = zext i64 %18 to i128
  %139 = zext i64 %39 to i128
  %140 = add i128 %138, %139
  %141 = zext i64 %11 to i128
  %142 = and i128 %117, 18446744073709551615
  %143 = and i128 %120, 4294967295
  %144 = shl i128 %143, 32
  %145 = add i128 %142, %144
  %146 = lshr i128 %117, 64
  %147 = lshr i128 %120, 32
  %148 = and i128 %147, 18446744073709551615
  %149 = add i128 %146, %148
  %150 = and i128 %125, 18446744073709551615
  %151 = add i128 %149, %150
  %152 = shl i128 %132, 32
  %153 = and i128 %152, 18446744069414584320
  %154 = add i128 %151, %153
  %155 = shl i128 %154, 64
  %156 = add i128 %145, %155
  store i128 %156, ptr %3, align 8
  %157 = lshr i128 %154, 64
  %158 = lshr i128 %120, 96
  %159 = add i128 %157, %158
  %160 = lshr i128 %125, 64
  %161 = add i128 %159, %160
  %162 = lshr i128 %132, 32
  %163 = add i128 %161, %162
  %164 = add i128 %163, %137
  %165 = shl i128 %140, 32
  %166 = add i128 %164, %165
  %167 = shl i128 %141, 64
  %168 = add i128 %166, %167
  store i128 %168, ptr %2, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3682(ptr nonnull align 8 %0, ptr nonnull align 8 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  store i1 false, ptr %4, align 1
  %5 = icmp ult i32 %2, 128
  br i1 %5, label %8, label %29

6:                                                ; preds = %31, %8
  %7 = load i1, ptr %4, align 1
  ret i1 %7

8:                                                ; preds = %3
  %9 = load i128, ptr %1, align 8
  %10 = sub i32 128, %2
  %11 = trunc i32 %10 to i7
  %12 = zext i7 %11 to i128
  %13 = shl i128 %9, %12
  %14 = icmp ne i128 %13, 0
  store i1 %14, ptr %4, align 1
  %15 = load i128, ptr %0, align 8
  %16 = sub i32 128, %2
  %17 = trunc i32 %16 to i7
  %18 = zext i7 %17 to i128
  %19 = shl i128 %15, %18
  %20 = load i128, ptr %1, align 8
  %21 = trunc i32 %2 to i7
  %22 = zext i7 %21 to i128
  %23 = lshr i128 %20, %22
  %24 = or i128 %19, %23
  store i128 %24, ptr %1, align 8
  %25 = load i128, ptr %0, align 8
  %26 = trunc i32 %2 to i7
  %27 = zext i7 %26 to i128
  %28 = lshr i128 %25, %27
  store i128 %28, ptr %0, align 8
  br label %6

29:                                               ; preds = %3
  %30 = icmp ult i32 %2, 256
  br i1 %30, label %32, label %46

31:                                               ; preds = %46, %32
  br label %6

32:                                               ; preds = %29
  %33 = load i128, ptr %0, align 8
  %34 = sub i32 256, %2
  %35 = trunc i32 %34 to i7
  %36 = zext i7 %35 to i128
  %37 = shl i128 %33, %36
  %38 = load i128, ptr %1, align 8
  %39 = or i128 %37, %38
  %40 = icmp ne i128 %39, 0
  store i1 %40, ptr %4, align 1
  %41 = load i128, ptr %0, align 8
  %42 = sub i32 %2, 128
  %43 = trunc i32 %42 to i7
  %44 = zext i7 %43 to i128
  %45 = lshr i128 %41, %44
  store i128 %45, ptr %1, align 8
  store i128 0, ptr %0, align 8
  br label %31

46:                                               ; preds = %29
  %47 = load i128, ptr %0, align 8
  %48 = load i128, ptr %1, align 8
  %49 = or i128 %47, %48
  %50 = icmp ne i128 %49, 0
  store i1 %50, ptr %4, align 1
  store i128 0, ptr %1, align 8
  store i128 0, ptr %0, align 8
  br label %31
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__mulxf3(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca i80, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca x86_fp80, align 16
  store x86_fp80 0xK7FFFA000000000000000, ptr %10, align 16
  %11 = load x86_fp80, ptr %10, align 16
  %12 = bitcast x86_fp80 %11 to i80
  %13 = or i80 %12, 4611686018427387904
  %14 = bitcast x86_fp80 %0 to i80
  %15 = lshr i80 %14, 64
  %16 = and i80 %15, 32767
  %17 = trunc i80 %16 to i32
  %18 = bitcast x86_fp80 %1 to i80
  %19 = lshr i80 %18, 64
  %20 = and i80 %19, 32767
  %21 = trunc i80 %20 to i32
  %22 = bitcast x86_fp80 %0 to i80
  %23 = bitcast x86_fp80 %1 to i80
  %24 = xor i80 %22, %23
  %25 = and i80 %24, -604462909807314587353088
  %26 = bitcast x86_fp80 %0 to i80
  %27 = and i80 %26, 18446744073709551615
  %28 = trunc i80 %27 to i64
  store i64 %28, ptr %9, align 8
  %29 = bitcast x86_fp80 %1 to i80
  %30 = and i80 %29, 18446744073709551615
  %31 = trunc i80 %30 to i64
  store i64 %31, ptr %8, align 8
  store i32 0, ptr %7, align 4
  %32 = sub i32 %17, 1
  %33 = icmp uge i32 %32, 32766
  br i1 %33, label %52, label %53

34:                                               ; preds = %188, %168, %137, %104, %99, %95, %92, %85, %82, %72, %65
  %35 = phi x86_fp80 [ %68, %65 ], [ %75, %72 ], [ %84, %82 ], [ %86, %85 ], [ %94, %92 ], [ %96, %95 ], [ %100, %99 ], [ %105, %104 ], [ %139, %137 ], [ %169, %168 ], [ %192, %188 ]
  ret x86_fp80 %35

36:                                               ; preds = %62, %114
  %37 = load i64, ptr %9, align 8
  %38 = or i64 %37, -9223372036854775808
  store i64 %38, ptr %9, align 8
  %39 = load i64, ptr %8, align 8
  %40 = or i64 %39, -9223372036854775808
  store i64 %40, ptr %8, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 undef, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 undef, i64 8, i1 false)
  %41 = load i64, ptr %9, align 8
  %42 = load i64, ptr %8, align 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3676(i64 %41, i64 %42, ptr nonnull align 8 %6, ptr nonnull align 8 %5)
  %43 = add nuw i32 %17, %21
  %44 = sub nsw i32 %43, 16383
  %45 = load i32, ptr %7, align 4
  %46 = add nsw i32 %44, %45
  store i32 %46, ptr %4, align 4
  %47 = load i64, ptr %6, align 8
  %48 = and i64 %47, -9223372036854775808
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %123, label %126

50:                                               ; preds = %53, %52
  %51 = phi i1 [ true, %52 ], [ %55, %53 ]
  br i1 %51, label %56, label %62

52:                                               ; preds = %2
  br label %50

53:                                               ; preds = %2
  %54 = sub i32 %21, 1
  %55 = icmp uge i32 %54, 32766
  br label %50

56:                                               ; preds = %50
  %57 = bitcast x86_fp80 %0 to i80
  %58 = and i80 %57, 604462909807314587353087
  %59 = bitcast x86_fp80 %1 to i80
  %60 = and i80 %59, 604462909807314587353087
  %61 = icmp ugt i80 %58, 604453686435277732577280
  br i1 %61, label %65, label %69

62:                                               ; preds = %50
  br label %36

63:                                               ; preds = %69
  %64 = icmp ugt i80 %60, 604453686435277732577280
  br i1 %64, label %72, label %76

65:                                               ; preds = %56
  %66 = bitcast x86_fp80 %0 to i80
  %67 = or i80 %66, 4611686018427387904
  %68 = bitcast i80 %67 to x86_fp80
  br label %34

69:                                               ; preds = %56
  br label %63

70:                                               ; preds = %76
  %71 = icmp eq i80 %58, 604453686435277732577280
  br i1 %71, label %79, label %81

72:                                               ; preds = %63
  %73 = bitcast x86_fp80 %1 to i80
  %74 = or i80 %73, 4611686018427387904
  %75 = bitcast i80 %74 to x86_fp80
  br label %34

76:                                               ; preds = %63
  br label %70

77:                                               ; preds = %81
  %78 = icmp eq i80 %60, 604453686435277732577280
  br i1 %78, label %89, label %91

79:                                               ; preds = %70
  %80 = icmp ne i80 %60, 0
  br i1 %80, label %82, label %85

81:                                               ; preds = %70
  br label %77

82:                                               ; preds = %79
  %83 = or i80 %58, %25
  %84 = bitcast i80 %83 to x86_fp80
  br label %34

85:                                               ; preds = %79
  %86 = bitcast i80 %13 to x86_fp80
  br label %34

87:                                               ; preds = %91
  %88 = icmp eq i80 %58, 0
  br i1 %88, label %99, label %101

89:                                               ; preds = %77
  %90 = icmp ne i80 %58, 0
  br i1 %90, label %92, label %95

91:                                               ; preds = %77
  br label %87

92:                                               ; preds = %89
  %93 = or i80 %60, %25
  %94 = bitcast i80 %93 to x86_fp80
  br label %34

95:                                               ; preds = %89
  %96 = bitcast i80 %13 to x86_fp80
  br label %34

97:                                               ; preds = %101
  %98 = icmp eq i80 %60, 0
  br i1 %98, label %104, label %106

99:                                               ; preds = %87
  %100 = bitcast i80 %25 to x86_fp80
  br label %34

101:                                              ; preds = %87
  br label %97

102:                                              ; preds = %106
  %103 = icmp ult i80 %58, 27670116110564327424
  br i1 %103, label %109, label %113

104:                                              ; preds = %97
  %105 = bitcast i80 %25 to x86_fp80
  br label %34

106:                                              ; preds = %97
  br label %102

107:                                              ; preds = %113, %109
  %108 = icmp ult i80 %60, 27670116110564327424
  br i1 %108, label %115, label %119

109:                                              ; preds = %102
  %110 = load i32, ptr %7, align 4
  %111 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3685(ptr nonnull align 8 %9)
  %112 = add nsw i32 %110, %111
  store i32 %112, ptr %7, align 4
  br label %107

113:                                              ; preds = %102
  br label %107

114:                                              ; preds = %119, %115
  br label %36

115:                                              ; preds = %107
  %116 = load i32, ptr %7, align 4
  %117 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3685(ptr nonnull align 8 %8)
  %118 = add nsw i32 %116, %117
  store i32 %118, ptr %7, align 4
  br label %114

119:                                              ; preds = %107
  br label %114

120:                                              ; preds = %126, %123
  %121 = load i32, ptr %4, align 4
  %122 = icmp sge i32 %121, 32767
  br i1 %122, label %137, label %140

123:                                              ; preds = %36
  %124 = load i32, ptr %4, align 4
  %125 = add i32 %124, 1
  store i32 %125, ptr %4, align 4
  br label %120

126:                                              ; preds = %36
  %127 = load i64, ptr %6, align 8
  %128 = shl i64 %127, 1
  %129 = load i64, ptr %5, align 8
  %130 = lshr i64 %129, 63
  %131 = or i64 %128, %130
  store i64 %131, ptr %6, align 8
  %132 = load i64, ptr %5, align 8
  %133 = shl i64 %132, 1
  store i64 %133, ptr %5, align 8
  br label %120

134:                                              ; preds = %140
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 undef, i64 16, i1 false)
  %135 = load i32, ptr %4, align 4
  %136 = icmp sle i32 %135, 0
  br i1 %136, label %144, label %150

137:                                              ; preds = %120
  %138 = or i80 604453686435277732577280, %25
  %139 = bitcast i80 %138 to x86_fp80
  br label %34

140:                                              ; preds = %120
  br label %134

141:                                              ; preds = %150, %159
  %142 = load i64, ptr %5, align 8
  %143 = icmp ugt i64 %142, -9223372036854775808
  br i1 %143, label %174, label %177

144:                                              ; preds = %134
  %145 = load i32, ptr %4, align 4
  %146 = zext i32 %145 to i80
  %147 = sub i80 1, %146
  %148 = trunc i80 %147 to i32
  %149 = icmp uge i32 %148, 64
  br i1 %149, label %168, label %170

150:                                              ; preds = %134
  %151 = load i64, ptr %6, align 8
  %152 = zext i64 %151 to i80
  %153 = and i80 %152, 18446744073709551615
  store i80 %153, ptr %3, align 8
  %154 = load i80, ptr %3, align 8
  %155 = load i32, ptr %4, align 4
  %156 = sext i32 %155 to i80
  %157 = shl i80 %156, 64
  %158 = or i80 %154, %157
  store i80 %158, ptr %3, align 8
  br label %141

159:                                              ; preds = %170
  %160 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3677(ptr nonnull align 8 %6, ptr nonnull align 8 %5, i32 %148)
  %161 = load i64, ptr %5, align 8
  %162 = zext i1 %160 to i64
  %163 = or i64 %161, %162
  store i64 %163, ptr %5, align 8
  %164 = load i64, ptr %6, align 8
  %165 = zext i64 %164 to i80
  store i80 %165, ptr %3, align 8
  %166 = load i80, ptr %3, align 8
  %167 = or i80 %166, 9223372036854775808
  store i80 %167, ptr %3, align 8
  br label %141

168:                                              ; preds = %144
  %169 = bitcast i80 %25 to x86_fp80
  br label %34

170:                                              ; preds = %144
  br label %159

171:                                              ; preds = %177, %174
  %172 = load i64, ptr %5, align 8
  %173 = icmp eq i64 %172, -9223372036854775808
  br i1 %173, label %182, label %187

174:                                              ; preds = %141
  %175 = load i80, ptr %3, align 8
  %176 = add i80 %175, 1
  store i80 %176, ptr %3, align 8
  br label %171

177:                                              ; preds = %141
  br label %171

178:                                              ; preds = %187, %182
  %179 = load i80, ptr %3, align 8
  %180 = lshr i80 %179, 64
  %181 = icmp ne i80 %180, 0
  br i1 %181, label %193, label %196

182:                                              ; preds = %171
  %183 = load i80, ptr %3, align 8
  %184 = load i80, ptr %3, align 8
  %185 = and i80 %184, 1
  %186 = add i80 %183, %185
  store i80 %186, ptr %3, align 8
  br label %178

187:                                              ; preds = %171
  br label %178

188:                                              ; preds = %196, %193
  %189 = load i80, ptr %3, align 8
  %190 = or i80 %189, %25
  store i80 %190, ptr %3, align 8
  %191 = load i80, ptr %3, align 8
  %192 = bitcast i80 %191 to x86_fp80
  br label %34

193:                                              ; preds = %178
  %194 = load i80, ptr %3, align 8
  %195 = or i80 %194, 9223372036854775808
  store i80 %195, ptr %3, align 8
  br label %188

196:                                              ; preds = %178
  %197 = load i80, ptr %3, align 8
  %198 = and i80 %197, 9223372036854775807
  store i80 %198, ptr %3, align 8
  br label %188
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3685(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i64, ptr %0, align 8
  %3 = call i64 @llvm.ctlz.i64(i64 %2, i1 false)
  %4 = trunc i64 %3 to i7
  %5 = load i64, ptr %0, align 8
  %6 = sub i7 63, %4
  %7 = icmp ule i7 %6, 63
  br i1 %7, label %15, label %16

8:                                                ; preds = %15
  %9 = trunc i7 %4 to i6
  %10 = zext i6 %9 to i64
  %11 = shl i64 %5, %10
  store i64 %11, ptr %0, align 8
  %12 = zext i7 %4 to i32
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %1
  br label %8

16:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @159)
  unreachable

17:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %8
  %19 = extractvalue { i32, i1 } %13, 0
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__divhf3(half %0, half %1) #0 {
  %3 = fpext half %0 to float
  %4 = fpext half %1 to float
  %5 = call float @__divsf3(float %3, float %4)
  %6 = fptrunc float %5 to half
  ret half %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__divsf3(float %0, float %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [6 x i64], align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast float %0 to i32
  %15 = lshr i32 %14, 23
  %16 = and i32 %15, 255
  %17 = bitcast float %1 to i32
  %18 = lshr i32 %17, 23
  %19 = and i32 %18, 255
  %20 = bitcast float %0 to i32
  %21 = bitcast float %1 to i32
  %22 = xor i32 %20, %21
  %23 = and i32 %22, -2147483648
  %24 = bitcast float %0 to i32
  %25 = and i32 %24, 8388607
  store i32 %25, ptr %13, align 4
  %26 = bitcast float %1 to i32
  %27 = and i32 %26, 8388607
  store i32 %27, ptr %12, align 4
  store i32 0, ptr %11, align 4
  %28 = sub i32 %16, 1
  %29 = icmp uge i32 %28, 254
  br i1 %29, label %120, label %121

30:                                               ; preds = %215, %231, %252, %208, %169, %165, %164, %156, %151, %150, %140, %133
  %31 = phi float [ %136, %133 ], [ %143, %140 ], [ 0x7FF8000000000000, %150 ], [ %153, %151 ], [ %157, %156 ], [ 0x7FF8000000000000, %164 ], [ %166, %165 ], [ %171, %169 ], [ %210, %208 ], [ %255, %252 ], [ %232, %231 ], [ %230, %215 ]
  ret float %31

32:                                               ; preds = %130, %180
  %33 = load i32, ptr %13, align 4
  %34 = or i32 %33, 8388608
  store i32 %34, ptr %13, align 4
  %35 = load i32, ptr %12, align 4
  %36 = or i32 %35, 8388608
  store i32 %36, ptr %12, align 4
  %37 = sub i32 %16, %19
  %38 = load i32, ptr %11, align 4
  %39 = add i32 %37, %38
  store i32 %39, ptr %10, align 4
  %40 = load i32, ptr %12, align 4
  %41 = shl i32 %40, 8
  %42 = sub i32 1963258675, %41
  store i32 %42, ptr %9, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %8, i8 -86, i64 4, i1 false)
  %43 = ptrtoint ptr %8 to i64
  %44 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 0
  store i64 1296236545, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 1
  store i64 %43, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 2
  store i64 4, ptr %46, align 8
  %47 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 3
  store i64 0, ptr %47, align 8
  %48 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 4
  store i64 0, ptr %48, align 8
  %49 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 5
  store i64 0, ptr %49, align 8
  %50 = ptrtoint ptr %7 to i64
  %51 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %50, i64 0)
  %52 = load i32, ptr %9, align 4
  %53 = zext i32 %52 to i64
  %54 = zext i32 %41 to i64
  %55 = mul i64 %53, %54
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, -1
  %58 = add i64 %57, 1
  %59 = trunc i64 %58 to i32
  store i32 %59, ptr %8, align 4
  %60 = load i32, ptr %9, align 4
  %61 = zext i32 %60 to i64
  %62 = load i32, ptr %8, align 4
  %63 = zext i32 %62 to i64
  %64 = mul i64 %61, %63
  %65 = lshr i64 %64, 31
  %66 = trunc i64 %65 to i32
  store i32 %66, ptr %9, align 4
  %67 = load i32, ptr %9, align 4
  %68 = zext i32 %67 to i64
  %69 = zext i32 %41 to i64
  %70 = mul i64 %68, %69
  %71 = lshr i64 %70, 32
  %72 = xor i64 %71, -1
  %73 = add i64 %72, 1
  %74 = trunc i64 %73 to i32
  store i32 %74, ptr %8, align 4
  %75 = load i32, ptr %9, align 4
  %76 = zext i32 %75 to i64
  %77 = load i32, ptr %8, align 4
  %78 = zext i32 %77 to i64
  %79 = mul i64 %76, %78
  %80 = lshr i64 %79, 31
  %81 = trunc i64 %80 to i32
  store i32 %81, ptr %9, align 4
  %82 = load i32, ptr %9, align 4
  %83 = zext i32 %82 to i64
  %84 = zext i32 %41 to i64
  %85 = mul i64 %83, %84
  %86 = lshr i64 %85, 32
  %87 = xor i64 %86, -1
  %88 = add i64 %87, 1
  %89 = trunc i64 %88 to i32
  store i32 %89, ptr %8, align 4
  %90 = load i32, ptr %9, align 4
  %91 = zext i32 %90 to i64
  %92 = load i32, ptr %8, align 4
  %93 = zext i32 %92 to i64
  %94 = mul i64 %91, %93
  %95 = lshr i64 %94, 31
  %96 = trunc i64 %95 to i32
  store i32 %96, ptr %9, align 4
  %97 = load i32, ptr %9, align 4
  %98 = sub i32 %97, 2
  store i32 %98, ptr %9, align 4
  %99 = load i32, ptr %9, align 4
  %100 = zext i32 %99 to i64
  %101 = load i32, ptr %13, align 4
  %102 = shl i32 %101, 1
  %103 = zext i32 %102 to i64
  %104 = mul i64 %100, %103
  %105 = lshr i64 %104, 32
  %106 = trunc i64 %105 to i32
  store i32 %106, ptr %6, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 -86, i64 4, i1 false)
  %107 = ptrtoint ptr %5 to i64
  %108 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 0
  store i64 1296236545, ptr %108, align 8
  %109 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 1
  store i64 %107, ptr %109, align 8
  %110 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 2
  store i64 4, ptr %110, align 8
  %111 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 3
  store i64 0, ptr %111, align 8
  %112 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 4
  store i64 0, ptr %112, align 8
  %113 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 5
  store i64 0, ptr %113, align 8
  %114 = ptrtoint ptr %7 to i64
  %115 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %114, i64 0)
  %116 = load i32, ptr %6, align 4
  %117 = icmp ult i32 %116, 16777216
  br i1 %117, label %190, label %199

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %123, %121 ]
  br i1 %119, label %124, label %130

120:                                              ; preds = %2
  br label %118

121:                                              ; preds = %2
  %122 = sub i32 %19, 1
  %123 = icmp uge i32 %122, 254
  br label %118

124:                                              ; preds = %118
  %125 = bitcast float %0 to i32
  %126 = and i32 %125, 2147483647
  %127 = bitcast float %1 to i32
  %128 = and i32 %127, 2147483647
  %129 = icmp ugt i32 %126, 2139095040
  br i1 %129, label %133, label %137

130:                                              ; preds = %118
  br label %32

131:                                              ; preds = %137
  %132 = icmp ugt i32 %128, 2139095040
  br i1 %132, label %140, label %144

133:                                              ; preds = %124
  %134 = bitcast float %0 to i32
  %135 = or i32 %134, 4194304
  %136 = bitcast i32 %135 to float
  br label %30

137:                                              ; preds = %124
  br label %131

138:                                              ; preds = %144
  %139 = icmp eq i32 %126, 2139095040
  br i1 %139, label %147, label %149

140:                                              ; preds = %131
  %141 = bitcast float %1 to i32
  %142 = or i32 %141, 4194304
  %143 = bitcast i32 %142 to float
  br label %30

144:                                              ; preds = %131
  br label %138

145:                                              ; preds = %149
  %146 = icmp eq i32 %128, 2139095040
  br i1 %146, label %156, label %158

147:                                              ; preds = %138
  %148 = icmp eq i32 %128, 2139095040
  br i1 %148, label %150, label %151

149:                                              ; preds = %138
  br label %145

150:                                              ; preds = %147
  br label %30

151:                                              ; preds = %147
  %152 = or i32 %126, %23
  %153 = bitcast i32 %152 to float
  br label %30

154:                                              ; preds = %158
  %155 = icmp eq i32 %126, 0
  br i1 %155, label %161, label %163

156:                                              ; preds = %145
  %157 = bitcast i32 %23 to float
  br label %30

158:                                              ; preds = %145
  br label %154

159:                                              ; preds = %163
  %160 = icmp eq i32 %128, 0
  br i1 %160, label %169, label %172

161:                                              ; preds = %154
  %162 = icmp eq i32 %128, 0
  br i1 %162, label %164, label %165

163:                                              ; preds = %154
  br label %159

164:                                              ; preds = %161
  br label %30

165:                                              ; preds = %161
  %166 = bitcast i32 %23 to float
  br label %30

167:                                              ; preds = %172
  %168 = icmp ult i32 %126, 8388608
  br i1 %168, label %175, label %179

169:                                              ; preds = %159
  %170 = or i32 2139095040, %23
  %171 = bitcast i32 %170 to float
  br label %30

172:                                              ; preds = %159
  br label %167

173:                                              ; preds = %179, %175
  %174 = icmp ult i32 %128, 8388608
  br i1 %174, label %181, label %185

175:                                              ; preds = %167
  %176 = load i32, ptr %11, align 4
  %177 = call fastcc i32 @compiler_rt.common.normalize__anon_3656(ptr nonnull align 4 %13)
  %178 = add i32 %176, %177
  store i32 %178, ptr %11, align 4
  br label %173

179:                                              ; preds = %167
  br label %173

180:                                              ; preds = %185, %181
  br label %32

181:                                              ; preds = %173
  %182 = load i32, ptr %11, align 4
  %183 = call fastcc i32 @compiler_rt.common.normalize__anon_3656(ptr nonnull align 4 %12)
  %184 = sub i32 %182, %183
  store i32 %184, ptr %11, align 4
  br label %180

185:                                              ; preds = %173
  br label %180

186:                                              ; preds = %199, %190
  %187 = load i32, ptr %10, align 4
  %188 = add i32 %187, 127
  %189 = icmp sge i32 %188, 255
  br i1 %189, label %208, label %211

190:                                              ; preds = %32
  %191 = load i32, ptr %13, align 4
  %192 = shl i32 %191, 24
  %193 = load i32, ptr %6, align 4
  %194 = load i32, ptr %12, align 4
  %195 = mul i32 %193, %194
  %196 = sub i32 %192, %195
  store i32 %196, ptr %5, align 4
  %197 = load i32, ptr %10, align 4
  %198 = sub i32 %197, 1
  store i32 %198, ptr %10, align 4
  br label %186

199:                                              ; preds = %32
  %200 = load i32, ptr %6, align 4
  %201 = lshr i32 %200, 1
  store i32 %201, ptr %6, align 4
  %202 = load i32, ptr %13, align 4
  %203 = shl i32 %202, 23
  %204 = load i32, ptr %6, align 4
  %205 = load i32, ptr %12, align 4
  %206 = mul i32 %204, %205
  %207 = sub i32 %203, %206
  store i32 %207, ptr %5, align 4
  br label %186

208:                                              ; preds = %186
  %209 = or i32 2139095040, %23
  %210 = bitcast i32 %209 to float
  br label %30

211:                                              ; preds = %186
  %212 = icmp slt i32 %188, 1
  br i1 %212, label %213, label %215

213:                                              ; preds = %211
  %214 = icmp eq i32 %188, 0
  br i1 %214, label %233, label %244

215:                                              ; preds = %211
  %216 = load i32, ptr %5, align 4
  %217 = shl i32 %216, 1
  %218 = load i32, ptr %12, align 4
  %219 = icmp ugt i32 %217, %218
  %220 = load i32, ptr %6, align 4
  %221 = and i32 %220, 8388607
  store i32 %221, ptr %3, align 4
  %222 = load i32, ptr %3, align 4
  %223 = shl i32 %188, 23
  %224 = or i32 %222, %223
  store i32 %224, ptr %3, align 4
  %225 = load i32, ptr %3, align 4
  %226 = zext i1 %219 to i32
  %227 = add i32 %225, %226
  store i32 %227, ptr %3, align 4
  %228 = load i32, ptr %3, align 4
  %229 = or i32 %228, %23
  %230 = bitcast i32 %229 to float
  br label %30

231:                                              ; preds = %244, %251
  %232 = bitcast i32 %23 to float
  br label %30

233:                                              ; preds = %213
  %234 = load i32, ptr %5, align 4
  %235 = shl i32 %234, 1
  %236 = load i32, ptr %12, align 4
  %237 = icmp ugt i32 %235, %236
  %238 = load i32, ptr %6, align 4
  %239 = and i32 %238, 8388607
  store i32 %239, ptr %4, align 4
  %240 = load i32, ptr %4, align 4
  %241 = zext i1 %237 to i32
  %242 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %240, i32 %241)
  %243 = extractvalue { i32, i1 } %242, 1
  br i1 %243, label %245, label %246

244:                                              ; preds = %213
  br label %231

245:                                              ; preds = %233
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

246:                                              ; preds = %233
  %247 = extractvalue { i32, i1 } %242, 0
  store i32 %247, ptr %4, align 4
  %248 = load i32, ptr %4, align 4
  %249 = and i32 %248, -8388608
  %250 = icmp ugt i32 %249, 0
  br i1 %250, label %252, label %256

251:                                              ; preds = %256
  br label %231

252:                                              ; preds = %246
  %253 = load i32, ptr %4, align 4
  %254 = or i32 %253, %23
  %255 = bitcast i32 %254 to float
  br label %30

256:                                              ; preds = %246
  br label %251
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__divdf3(double %0, double %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [6 x i64], align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = bitcast double %0 to i64
  %18 = lshr i64 %17, 52
  %19 = and i64 %18, 2047
  %20 = trunc i64 %19 to i32
  %21 = bitcast double %1 to i64
  %22 = lshr i64 %21, 52
  %23 = and i64 %22, 2047
  %24 = trunc i64 %23 to i32
  %25 = bitcast double %0 to i64
  %26 = bitcast double %1 to i64
  %27 = xor i64 %25, %26
  %28 = and i64 %27, -9223372036854775808
  %29 = bitcast double %0 to i64
  %30 = and i64 %29, 4503599627370495
  store i64 %30, ptr %16, align 8
  %31 = bitcast double %1 to i64
  %32 = and i64 %31, 4503599627370495
  store i64 %32, ptr %15, align 8
  store i32 0, ptr %14, align 4
  %33 = sub i32 %20, 1
  %34 = icmp uge i32 %33, 2046
  br i1 %34, label %189, label %190

35:                                               ; preds = %284, %301, %322, %277, %238, %234, %233, %225, %220, %219, %209, %202
  %36 = phi double [ %205, %202 ], [ %212, %209 ], [ 0x7FF8000000000000, %219 ], [ %222, %220 ], [ %226, %225 ], [ 0x7FF8000000000000, %233 ], [ %235, %234 ], [ %240, %238 ], [ %279, %277 ], [ %325, %322 ], [ %302, %301 ], [ %300, %284 ]
  ret double %36

37:                                               ; preds = %199, %249
  %38 = load i64, ptr %16, align 8
  %39 = or i64 %38, 4503599627370496
  store i64 %39, ptr %16, align 8
  %40 = load i64, ptr %15, align 8
  %41 = or i64 %40, 4503599627370496
  store i64 %41, ptr %15, align 8
  %42 = sub i32 %20, %24
  %43 = load i32, ptr %14, align 4
  %44 = add i32 %42, %43
  store i32 %44, ptr %13, align 4
  %45 = load i64, ptr %15, align 8
  %46 = lshr i64 %45, 21
  %47 = trunc i64 %46 to i32
  %48 = sub i32 1963258675, %47
  store i32 %48, ptr %12, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %11, i8 -86, i64 4, i1 false)
  %49 = ptrtoint ptr %11 to i64
  %50 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %50, align 8
  %51 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %49, ptr %51, align 8
  %52 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 4, ptr %52, align 8
  %53 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %53, align 8
  %54 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %54, align 8
  %55 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %55, align 8
  %56 = ptrtoint ptr %10 to i64
  %57 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %56, i64 0)
  %58 = load i32, ptr %12, align 4
  %59 = zext i32 %58 to i64
  %60 = zext i32 %47 to i64
  %61 = mul i64 %59, %60
  %62 = lshr i64 %61, 32
  %63 = xor i64 %62, -1
  %64 = add i64 %63, 1
  %65 = trunc i64 %64 to i32
  store i32 %65, ptr %11, align 4
  %66 = load i32, ptr %12, align 4
  %67 = zext i32 %66 to i64
  %68 = load i32, ptr %11, align 4
  %69 = zext i32 %68 to i64
  %70 = mul i64 %67, %69
  %71 = lshr i64 %70, 31
  %72 = trunc i64 %71 to i32
  store i32 %72, ptr %12, align 4
  %73 = load i32, ptr %12, align 4
  %74 = zext i32 %73 to i64
  %75 = zext i32 %47 to i64
  %76 = mul i64 %74, %75
  %77 = lshr i64 %76, 32
  %78 = xor i64 %77, -1
  %79 = add i64 %78, 1
  %80 = trunc i64 %79 to i32
  store i32 %80, ptr %11, align 4
  %81 = load i32, ptr %12, align 4
  %82 = zext i32 %81 to i64
  %83 = load i32, ptr %11, align 4
  %84 = zext i32 %83 to i64
  %85 = mul i64 %82, %84
  %86 = lshr i64 %85, 31
  %87 = trunc i64 %86 to i32
  store i32 %87, ptr %12, align 4
  %88 = load i32, ptr %12, align 4
  %89 = zext i32 %88 to i64
  %90 = zext i32 %47 to i64
  %91 = mul i64 %89, %90
  %92 = lshr i64 %91, 32
  %93 = xor i64 %92, -1
  %94 = add i64 %93, 1
  %95 = trunc i64 %94 to i32
  store i32 %95, ptr %11, align 4
  %96 = load i32, ptr %12, align 4
  %97 = zext i32 %96 to i64
  %98 = load i32, ptr %11, align 4
  %99 = zext i32 %98 to i64
  %100 = mul i64 %97, %99
  %101 = lshr i64 %100, 31
  %102 = trunc i64 %101 to i32
  store i32 %102, ptr %12, align 4
  %103 = load i32, ptr %12, align 4
  %104 = sub i32 %103, 1
  store i32 %104, ptr %12, align 4
  %105 = load i64, ptr %15, align 8
  %106 = shl i64 %105, 11
  %107 = trunc i64 %106 to i32
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 8, i1 false)
  %108 = ptrtoint ptr %9 to i64
  %109 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %109, align 8
  %110 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %108, ptr %110, align 8
  %111 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 8, ptr %111, align 8
  %112 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %112, align 8
  %113 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %113, align 8
  %114 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %114, align 8
  %115 = ptrtoint ptr %10 to i64
  %116 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %115, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 8, i1 false)
  %117 = ptrtoint ptr %8 to i64
  %118 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %118, align 8
  %119 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %117, ptr %119, align 8
  %120 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 8, ptr %120, align 8
  %121 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %121, align 8
  %122 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %122, align 8
  %123 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %123, align 8
  %124 = ptrtoint ptr %10 to i64
  %125 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %124, i64 0)
  %126 = load i32, ptr %12, align 4
  %127 = zext i32 %126 to i64
  %128 = zext i32 %47 to i64
  %129 = mul i64 %127, %128
  %130 = load i32, ptr %12, align 4
  %131 = zext i32 %130 to i64
  %132 = zext i32 %107 to i64
  %133 = mul i64 %131, %132
  %134 = lshr i64 %133, 32
  %135 = add i64 %129, %134
  %136 = xor i64 %135, -1
  %137 = add i64 %136, 1
  store i64 %137, ptr %9, align 8
  %138 = load i64, ptr %9, align 8
  %139 = lshr i64 %138, 32
  %140 = trunc i64 %139 to i32
  %141 = load i64, ptr %9, align 8
  %142 = trunc i64 %141 to i32
  %143 = load i32, ptr %12, align 4
  %144 = zext i32 %143 to i64
  %145 = zext i32 %140 to i64
  %146 = mul i64 %144, %145
  %147 = load i32, ptr %12, align 4
  %148 = zext i32 %147 to i64
  %149 = zext i32 %142 to i64
  %150 = mul i64 %148, %149
  %151 = lshr i64 %150, 32
  %152 = add i64 %146, %151
  store i64 %152, ptr %8, align 8
  %153 = load i64, ptr %8, align 8
  %154 = sub i64 %153, 2
  store i64 %154, ptr %8, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %7, i8 -86, i64 8, i1 false)
  %155 = ptrtoint ptr %7 to i64
  %156 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %156, align 8
  %157 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %155, ptr %157, align 8
  %158 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 8, ptr %158, align 8
  %159 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %159, align 8
  %160 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %160, align 8
  %161 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %161, align 8
  %162 = ptrtoint ptr %10 to i64
  %163 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %162, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 8, i1 false)
  %164 = ptrtoint ptr %6 to i64
  %165 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %165, align 8
  %166 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %164, ptr %166, align 8
  %167 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 8, ptr %167, align 8
  %168 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %168, align 8
  %169 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %169, align 8
  %170 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %170, align 8
  %171 = ptrtoint ptr %10 to i64
  %172 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %171, i64 0)
  %173 = load i64, ptr %16, align 8
  %174 = shl i64 %173, 2
  %175 = load i64, ptr %8, align 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3676(i64 %174, i64 %175, ptr nonnull align 8 %7, ptr nonnull align 8 %6)
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 8, i1 false)
  %176 = ptrtoint ptr %5 to i64
  %177 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %177, align 8
  %178 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %176, ptr %178, align 8
  %179 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 8, ptr %179, align 8
  %180 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %180, align 8
  %181 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %181, align 8
  %182 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %182, align 8
  %183 = ptrtoint ptr %10 to i64
  %184 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %183, i64 0)
  %185 = load i64, ptr %7, align 8
  %186 = icmp ult i64 %185, 9007199254740992
  br i1 %186, label %259, label %268

187:                                              ; preds = %190, %189
  %188 = phi i1 [ true, %189 ], [ %192, %190 ]
  br i1 %188, label %193, label %199

189:                                              ; preds = %2
  br label %187

190:                                              ; preds = %2
  %191 = sub i32 %24, 1
  %192 = icmp uge i32 %191, 2046
  br label %187

193:                                              ; preds = %187
  %194 = bitcast double %0 to i64
  %195 = and i64 %194, 9223372036854775807
  %196 = bitcast double %1 to i64
  %197 = and i64 %196, 9223372036854775807
  %198 = icmp ugt i64 %195, 9218868437227405312
  br i1 %198, label %202, label %206

199:                                              ; preds = %187
  br label %37

200:                                              ; preds = %206
  %201 = icmp ugt i64 %197, 9218868437227405312
  br i1 %201, label %209, label %213

202:                                              ; preds = %193
  %203 = bitcast double %0 to i64
  %204 = or i64 %203, 2251799813685248
  %205 = bitcast i64 %204 to double
  br label %35

206:                                              ; preds = %193
  br label %200

207:                                              ; preds = %213
  %208 = icmp eq i64 %195, 9218868437227405312
  br i1 %208, label %216, label %218

209:                                              ; preds = %200
  %210 = bitcast double %1 to i64
  %211 = or i64 %210, 2251799813685248
  %212 = bitcast i64 %211 to double
  br label %35

213:                                              ; preds = %200
  br label %207

214:                                              ; preds = %218
  %215 = icmp eq i64 %197, 9218868437227405312
  br i1 %215, label %225, label %227

216:                                              ; preds = %207
  %217 = icmp eq i64 %197, 9218868437227405312
  br i1 %217, label %219, label %220

218:                                              ; preds = %207
  br label %214

219:                                              ; preds = %216
  br label %35

220:                                              ; preds = %216
  %221 = or i64 %195, %28
  %222 = bitcast i64 %221 to double
  br label %35

223:                                              ; preds = %227
  %224 = icmp eq i64 %195, 0
  br i1 %224, label %230, label %232

225:                                              ; preds = %214
  %226 = bitcast i64 %28 to double
  br label %35

227:                                              ; preds = %214
  br label %223

228:                                              ; preds = %232
  %229 = icmp eq i64 %197, 0
  br i1 %229, label %238, label %241

230:                                              ; preds = %223
  %231 = icmp eq i64 %197, 0
  br i1 %231, label %233, label %234

232:                                              ; preds = %223
  br label %228

233:                                              ; preds = %230
  br label %35

234:                                              ; preds = %230
  %235 = bitcast i64 %28 to double
  br label %35

236:                                              ; preds = %241
  %237 = icmp ult i64 %195, 4503599627370496
  br i1 %237, label %244, label %248

238:                                              ; preds = %228
  %239 = or i64 9218868437227405312, %28
  %240 = bitcast i64 %239 to double
  br label %35

241:                                              ; preds = %228
  br label %236

242:                                              ; preds = %248, %244
  %243 = icmp ult i64 %197, 4503599627370496
  br i1 %243, label %250, label %254

244:                                              ; preds = %236
  %245 = load i32, ptr %14, align 4
  %246 = call fastcc i32 @compiler_rt.common.normalize__anon_3657(ptr nonnull align 8 %16)
  %247 = add i32 %245, %246
  store i32 %247, ptr %14, align 4
  br label %242

248:                                              ; preds = %236
  br label %242

249:                                              ; preds = %254, %250
  br label %37

250:                                              ; preds = %242
  %251 = load i32, ptr %14, align 4
  %252 = call fastcc i32 @compiler_rt.common.normalize__anon_3657(ptr nonnull align 8 %15)
  %253 = sub i32 %251, %252
  store i32 %253, ptr %14, align 4
  br label %249

254:                                              ; preds = %242
  br label %249

255:                                              ; preds = %268, %259
  %256 = load i32, ptr %13, align 4
  %257 = add i32 %256, 1023
  %258 = icmp sge i32 %257, 2047
  br i1 %258, label %277, label %280

259:                                              ; preds = %37
  %260 = load i64, ptr %16, align 8
  %261 = shl i64 %260, 53
  %262 = load i64, ptr %7, align 8
  %263 = load i64, ptr %15, align 8
  %264 = mul i64 %262, %263
  %265 = sub i64 %261, %264
  store i64 %265, ptr %5, align 8
  %266 = load i32, ptr %13, align 4
  %267 = sub i32 %266, 1
  store i32 %267, ptr %13, align 4
  br label %255

268:                                              ; preds = %37
  %269 = load i64, ptr %7, align 8
  %270 = lshr i64 %269, 1
  store i64 %270, ptr %7, align 8
  %271 = load i64, ptr %16, align 8
  %272 = shl i64 %271, 52
  %273 = load i64, ptr %7, align 8
  %274 = load i64, ptr %15, align 8
  %275 = mul i64 %273, %274
  %276 = sub i64 %272, %275
  store i64 %276, ptr %5, align 8
  br label %255

277:                                              ; preds = %255
  %278 = or i64 9218868437227405312, %28
  %279 = bitcast i64 %278 to double
  br label %35

280:                                              ; preds = %255
  %281 = icmp slt i32 %257, 1
  br i1 %281, label %282, label %284

282:                                              ; preds = %280
  %283 = icmp eq i32 %257, 0
  br i1 %283, label %303, label %314

284:                                              ; preds = %280
  %285 = load i64, ptr %5, align 8
  %286 = shl i64 %285, 1
  %287 = load i64, ptr %15, align 8
  %288 = icmp ugt i64 %286, %287
  %289 = load i64, ptr %7, align 8
  %290 = and i64 %289, 4503599627370495
  store i64 %290, ptr %3, align 8
  %291 = load i64, ptr %3, align 8
  %292 = sext i32 %257 to i64
  %293 = shl i64 %292, 52
  %294 = or i64 %291, %293
  store i64 %294, ptr %3, align 8
  %295 = load i64, ptr %3, align 8
  %296 = zext i1 %288 to i64
  %297 = add i64 %295, %296
  store i64 %297, ptr %3, align 8
  %298 = load i64, ptr %3, align 8
  %299 = or i64 %298, %28
  %300 = bitcast i64 %299 to double
  br label %35

301:                                              ; preds = %314, %321
  %302 = bitcast i64 %28 to double
  br label %35

303:                                              ; preds = %282
  %304 = load i64, ptr %5, align 8
  %305 = shl i64 %304, 1
  %306 = load i64, ptr %15, align 8
  %307 = icmp ugt i64 %305, %306
  %308 = load i64, ptr %7, align 8
  %309 = and i64 %308, 4503599627370495
  store i64 %309, ptr %4, align 8
  %310 = load i64, ptr %4, align 8
  %311 = zext i1 %307 to i64
  %312 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %310, i64 %311)
  %313 = extractvalue { i64, i1 } %312, 1
  br i1 %313, label %315, label %316

314:                                              ; preds = %282
  br label %301

315:                                              ; preds = %303
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

316:                                              ; preds = %303
  %317 = extractvalue { i64, i1 } %312, 0
  store i64 %317, ptr %4, align 8
  %318 = load i64, ptr %4, align 8
  %319 = and i64 %318, -4503599627370496
  %320 = icmp ne i64 %319, 0
  br i1 %320, label %322, label %326

321:                                              ; preds = %326
  br label %301

322:                                              ; preds = %316
  %323 = load i64, ptr %4, align 8
  %324 = or i64 %323, %28
  %325 = bitcast i64 %324 to double
  br label %35

326:                                              ; preds = %316
  br label %321
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__divxf3(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca i80, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i128, align 8
  %7 = alloca i128, align 8
  %8 = alloca i128, align 8
  %9 = alloca i128, align 8
  %10 = alloca i128, align 8
  %11 = alloca i128, align 8
  %12 = alloca i128, align 8
  %13 = alloca [6 x i64], align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i80, align 8
  %19 = alloca i80, align 8
  %20 = alloca x86_fp80, align 16
  store x86_fp80 0xK7FFFA000000000000000, ptr %20, align 16
  %21 = load x86_fp80, ptr %20, align 16
  %22 = bitcast x86_fp80 %21 to i80
  %23 = or i80 %22, 4611686018427387904
  %24 = bitcast x86_fp80 %0 to i80
  %25 = lshr i80 %24, 64
  br i1 true, label %31, label %32

26:                                               ; preds = %31
  %27 = and i80 %25, 32767
  %28 = trunc i80 %27 to i32
  %29 = bitcast x86_fp80 %1 to i80
  %30 = lshr i80 %29, 64
  br i1 true, label %46, label %47

31:                                               ; preds = %2
  br label %26

32:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

33:                                               ; preds = %46
  %34 = and i80 %30, 32767
  %35 = trunc i80 %34 to i32
  %36 = bitcast x86_fp80 %0 to i80
  %37 = bitcast x86_fp80 %1 to i80
  %38 = xor i80 %36, %37
  %39 = and i80 %38, -604462909807314587353088
  %40 = bitcast x86_fp80 %0 to i80
  %41 = and i80 %40, 18446744073709551615
  store i80 %41, ptr %19, align 8
  %42 = bitcast x86_fp80 %1 to i80
  %43 = and i80 %42, 18446744073709551615
  store i80 %43, ptr %18, align 8
  store i32 0, ptr %17, align 4
  %44 = sub i32 %28, 1
  %45 = icmp uge i32 %44, 32766
  br i1 %45, label %57, label %58

46:                                               ; preds = %26
  br label %33

47:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

48:                                               ; preds = %67, %119
  %49 = sub i32 %28, %35
  %50 = load i32, ptr %17, align 4
  %51 = add i32 %49, %50
  store i32 %51, ptr %16, align 4
  %52 = load i80, ptr %18, align 8
  %53 = sub i80 18446744073709551615, %52
  %54 = icmp ule i80 %53, 18446744073709551615
  br i1 %54, label %280, label %281

55:                                               ; preds = %58, %57
  %56 = phi i1 [ true, %57 ], [ %60, %58 ]
  br i1 %56, label %61, label %67

57:                                               ; preds = %33
  br label %55

58:                                               ; preds = %33
  %59 = sub i32 %35, 1
  %60 = icmp uge i32 %59, 32766
  br label %55

61:                                               ; preds = %55
  %62 = bitcast x86_fp80 %0 to i80
  %63 = and i80 %62, 604462909807314587353087
  %64 = bitcast x86_fp80 %1 to i80
  %65 = and i80 %64, 604462909807314587353087
  %66 = icmp ugt i80 %63, 604453686435277732577280
  br i1 %66, label %70, label %74

67:                                               ; preds = %55
  br label %48

68:                                               ; preds = %74
  %69 = icmp ugt i80 %65, 604453686435277732577280
  br i1 %69, label %77, label %81

70:                                               ; preds = %61
  %71 = bitcast x86_fp80 %0 to i80
  %72 = or i80 %71, 4611686018427387904
  %73 = bitcast i80 %72 to x86_fp80
  ret x86_fp80 %73

74:                                               ; preds = %61
  br label %68

75:                                               ; preds = %81
  %76 = icmp eq i80 %63, 604453686435277732577280
  br i1 %76, label %84, label %86

77:                                               ; preds = %68
  %78 = bitcast x86_fp80 %1 to i80
  %79 = or i80 %78, 4611686018427387904
  %80 = bitcast i80 %79 to x86_fp80
  ret x86_fp80 %80

81:                                               ; preds = %68
  br label %75

82:                                               ; preds = %86
  %83 = icmp eq i80 %65, 604453686435277732577280
  br i1 %83, label %94, label %96

84:                                               ; preds = %75
  %85 = icmp eq i80 %65, 604453686435277732577280
  br i1 %85, label %87, label %89

86:                                               ; preds = %75
  br label %82

87:                                               ; preds = %84
  %88 = bitcast i80 %23 to x86_fp80
  ret x86_fp80 %88

89:                                               ; preds = %84
  %90 = or i80 %63, %39
  %91 = bitcast i80 %90 to x86_fp80
  ret x86_fp80 %91

92:                                               ; preds = %96
  %93 = icmp eq i80 %63, 0
  br i1 %93, label %99, label %101

94:                                               ; preds = %82
  %95 = bitcast i80 %39 to x86_fp80
  ret x86_fp80 %95

96:                                               ; preds = %82
  br label %92

97:                                               ; preds = %101
  %98 = icmp eq i80 %65, 0
  br i1 %98, label %108, label %111

99:                                               ; preds = %92
  %100 = icmp eq i80 %65, 0
  br i1 %100, label %102, label %104

101:                                              ; preds = %92
  br label %97

102:                                              ; preds = %99
  %103 = bitcast i80 %23 to x86_fp80
  ret x86_fp80 %103

104:                                              ; preds = %99
  %105 = bitcast i80 %39 to x86_fp80
  ret x86_fp80 %105

106:                                              ; preds = %111
  %107 = icmp ult i80 %63, 9223372036854775808
  br i1 %107, label %114, label %118

108:                                              ; preds = %97
  %109 = or i80 604453686435277732577280, %39
  %110 = bitcast i80 %109 to x86_fp80
  ret x86_fp80 %110

111:                                              ; preds = %97
  br label %106

112:                                              ; preds = %118, %114
  %113 = icmp ult i80 %65, 9223372036854775808
  br i1 %113, label %120, label %124

114:                                              ; preds = %106
  %115 = load i32, ptr %17, align 4
  %116 = call fastcc i32 @compiler_rt.common.normalize__anon_3659(ptr nonnull align 8 %19)
  %117 = add i32 %115, %116
  store i32 %117, ptr %17, align 4
  br label %112

118:                                              ; preds = %106
  br label %112

119:                                              ; preds = %124, %120
  br label %48

120:                                              ; preds = %112
  %121 = load i32, ptr %17, align 4
  %122 = call fastcc i32 @compiler_rt.common.normalize__anon_3659(ptr nonnull align 8 %18)
  %123 = sub i32 %121, %122
  store i32 %123, ptr %17, align 4
  br label %119

124:                                              ; preds = %112
  br label %119

125:                                              ; preds = %280
  %126 = trunc i80 %52 to i64
  %127 = sub i64 8432131806905394308, %126
  store i64 %127, ptr %15, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %14, i8 -86, i64 8, i1 false)
  %128 = ptrtoint ptr %14 to i64
  %129 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 0
  store i64 1296236545, ptr %129, align 8
  %130 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 1
  store i64 %128, ptr %130, align 8
  %131 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 2
  store i64 8, ptr %131, align 8
  %132 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 3
  store i64 0, ptr %132, align 8
  %133 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 0, ptr %133, align 8
  %134 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 0, ptr %134, align 8
  %135 = ptrtoint ptr %13 to i64
  %136 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %135, i64 0)
  %137 = load i64, ptr %15, align 8
  %138 = zext i64 %137 to i128
  %139 = zext i64 %126 to i128
  %140 = mul i128 %138, %139
  %141 = lshr i128 %140, 64
  %142 = xor i128 %141, -1
  %143 = add i128 %142, 1
  %144 = trunc i128 %143 to i64
  store i64 %144, ptr %14, align 8
  %145 = load i64, ptr %15, align 8
  %146 = zext i64 %145 to i128
  %147 = load i64, ptr %14, align 8
  %148 = zext i64 %147 to i128
  %149 = mul i128 %146, %148
  %150 = lshr i128 %149, 63
  %151 = trunc i128 %150 to i64
  store i64 %151, ptr %15, align 8
  %152 = load i64, ptr %15, align 8
  %153 = zext i64 %152 to i128
  %154 = zext i64 %126 to i128
  %155 = mul i128 %153, %154
  %156 = lshr i128 %155, 64
  %157 = xor i128 %156, -1
  %158 = add i128 %157, 1
  %159 = trunc i128 %158 to i64
  store i64 %159, ptr %14, align 8
  %160 = load i64, ptr %15, align 8
  %161 = zext i64 %160 to i128
  %162 = load i64, ptr %14, align 8
  %163 = zext i64 %162 to i128
  %164 = mul i128 %161, %163
  %165 = lshr i128 %164, 63
  %166 = trunc i128 %165 to i64
  store i64 %166, ptr %15, align 8
  %167 = load i64, ptr %15, align 8
  %168 = zext i64 %167 to i128
  %169 = zext i64 %126 to i128
  %170 = mul i128 %168, %169
  %171 = lshr i128 %170, 64
  %172 = xor i128 %171, -1
  %173 = add i128 %172, 1
  %174 = trunc i128 %173 to i64
  store i64 %174, ptr %14, align 8
  %175 = load i64, ptr %15, align 8
  %176 = zext i64 %175 to i128
  %177 = load i64, ptr %14, align 8
  %178 = zext i64 %177 to i128
  %179 = mul i128 %176, %178
  %180 = lshr i128 %179, 63
  %181 = trunc i128 %180 to i64
  store i64 %181, ptr %15, align 8
  %182 = load i64, ptr %15, align 8
  %183 = zext i64 %182 to i128
  %184 = zext i64 %126 to i128
  %185 = mul i128 %183, %184
  %186 = lshr i128 %185, 64
  %187 = xor i128 %186, -1
  %188 = add i128 %187, 1
  %189 = trunc i128 %188 to i64
  store i64 %189, ptr %14, align 8
  %190 = load i64, ptr %15, align 8
  %191 = zext i64 %190 to i128
  %192 = load i64, ptr %14, align 8
  %193 = zext i64 %192 to i128
  %194 = mul i128 %191, %193
  %195 = lshr i128 %194, 63
  %196 = trunc i128 %195 to i64
  store i64 %196, ptr %15, align 8
  %197 = load i64, ptr %15, align 8
  %198 = zext i64 %197 to i128
  %199 = zext i64 %126 to i128
  %200 = mul i128 %198, %199
  %201 = lshr i128 %200, 64
  %202 = xor i128 %201, -1
  %203 = add i128 %202, 1
  %204 = trunc i128 %203 to i64
  store i64 %204, ptr %14, align 8
  %205 = load i64, ptr %15, align 8
  %206 = zext i64 %205 to i128
  %207 = load i64, ptr %14, align 8
  %208 = zext i64 %207 to i128
  %209 = mul i128 %206, %208
  %210 = lshr i128 %209, 63
  %211 = trunc i128 %210 to i64
  store i64 %211, ptr %15, align 8
  %212 = load i64, ptr %15, align 8
  %213 = sub i64 %212, 1
  store i64 %213, ptr %15, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %12, i8 -86, i64 16, i1 false)
  %214 = ptrtoint ptr %12 to i64
  %215 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 0
  store i64 1296236545, ptr %215, align 8
  %216 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 1
  store i64 %214, ptr %216, align 8
  %217 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 2
  store i64 16, ptr %217, align 8
  %218 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 3
  store i64 0, ptr %218, align 8
  %219 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 0, ptr %219, align 8
  %220 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 0, ptr %220, align 8
  %221 = ptrtoint ptr %13 to i64
  %222 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %221, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 -86, i64 16, i1 false)
  %223 = ptrtoint ptr %11 to i64
  %224 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 0
  store i64 1296236545, ptr %224, align 8
  %225 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 1
  store i64 %223, ptr %225, align 8
  %226 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 2
  store i64 16, ptr %226, align 8
  %227 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 3
  store i64 0, ptr %227, align 8
  %228 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 0, ptr %228, align 8
  %229 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 0, ptr %229, align 8
  %230 = ptrtoint ptr %13 to i64
  %231 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %230, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 -86, i64 16, i1 false)
  %232 = ptrtoint ptr %10 to i64
  %233 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 0
  store i64 1296236545, ptr %233, align 8
  %234 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 1
  store i64 %232, ptr %234, align 8
  %235 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 2
  store i64 16, ptr %235, align 8
  %236 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 3
  store i64 0, ptr %236, align 8
  %237 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 0, ptr %237, align 8
  %238 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 0, ptr %238, align 8
  %239 = ptrtoint ptr %13 to i64
  %240 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %239, i64 0)
  %241 = load i64, ptr %15, align 8
  %242 = zext i64 %241 to i128
  %243 = zext i64 %126 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %242, i128 %243, ptr nonnull align 8 %10, ptr nonnull align 8 %11)
  %244 = load i128, ptr %11, align 8
  %245 = sub i128 0, %244
  store i128 %245, ptr %11, align 8
  %246 = load i128, ptr %11, align 8
  %247 = lshr i128 %246, 64
  %248 = trunc i128 %247 to i64
  %249 = load i128, ptr %11, align 8
  %250 = trunc i128 %249 to i64
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 16, i1 false)
  %251 = ptrtoint ptr %9 to i64
  %252 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 0
  store i64 1296236545, ptr %252, align 8
  %253 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 1
  store i64 %251, ptr %253, align 8
  %254 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 2
  store i64 16, ptr %254, align 8
  %255 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 3
  store i64 0, ptr %255, align 8
  %256 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 0, ptr %256, align 8
  %257 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 0, ptr %257, align 8
  %258 = ptrtoint ptr %13 to i64
  %259 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %258, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 16, i1 false)
  %260 = ptrtoint ptr %8 to i64
  %261 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 0
  store i64 1296236545, ptr %261, align 8
  %262 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 1
  store i64 %260, ptr %262, align 8
  %263 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 2
  store i64 16, ptr %263, align 8
  %264 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 3
  store i64 0, ptr %264, align 8
  %265 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 0, ptr %265, align 8
  %266 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 0, ptr %266, align 8
  %267 = ptrtoint ptr %13 to i64
  %268 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %267, i64 0)
  %269 = load i64, ptr %15, align 8
  %270 = zext i64 %269 to i128
  %271 = zext i64 %248 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %270, i128 %271, ptr nonnull align 8 %10, ptr nonnull align 8 %9)
  %272 = load i64, ptr %15, align 8
  %273 = zext i64 %272 to i128
  %274 = zext i64 %250 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %273, i128 %274, ptr nonnull align 8 %10, ptr nonnull align 8 %8)
  %275 = load i128, ptr %9, align 8
  %276 = load i128, ptr %8, align 8
  %277 = lshr i128 %276, 64
  %278 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %275, i128 %277)
  %279 = extractvalue { i128, i1 } %278, 1
  br i1 %279, label %282, label %283

280:                                              ; preds = %48
  br label %125

281:                                              ; preds = %48
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

282:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

283:                                              ; preds = %125
  %284 = extractvalue { i128, i1 } %278, 0
  store i128 %284, ptr %12, align 8
  %285 = load i128, ptr %12, align 8
  %286 = sub i128 %285, 2
  store i128 %286, ptr %12, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %7, i8 -86, i64 16, i1 false)
  %287 = ptrtoint ptr %7 to i64
  %288 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 0
  store i64 1296236545, ptr %288, align 8
  %289 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 1
  store i64 %287, ptr %289, align 8
  %290 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 2
  store i64 16, ptr %290, align 8
  %291 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 3
  store i64 0, ptr %291, align 8
  %292 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 0, ptr %292, align 8
  %293 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 0, ptr %293, align 8
  %294 = ptrtoint ptr %13 to i64
  %295 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %294, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 16, i1 false)
  %296 = ptrtoint ptr %6 to i64
  %297 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 0
  store i64 1296236545, ptr %297, align 8
  %298 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 1
  store i64 %296, ptr %298, align 8
  %299 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 2
  store i64 16, ptr %299, align 8
  %300 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 3
  store i64 0, ptr %300, align 8
  %301 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 0, ptr %301, align 8
  %302 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 0, ptr %302, align 8
  %303 = ptrtoint ptr %13 to i64
  %304 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %303, i64 0)
  %305 = load i80, ptr %19, align 8
  br i1 true, label %312, label %313

306:                                              ; preds = %312
  %307 = shl i80 %305, 2
  %308 = load i128, ptr %12, align 8
  %309 = zext i80 %307 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %309, i128 %308, ptr nonnull align 8 %7, ptr nonnull align 8 %6)
  %310 = load i128, ptr %7, align 8
  %311 = icmp ult i128 %310, 18446744073709551616
  br i1 %311, label %321, label %325

312:                                              ; preds = %283
  br label %306

313:                                              ; preds = %283
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

314:                                              ; preds = %340, %336
  %315 = load i64, ptr %5, align 8
  %316 = mul i64 %315, %126
  %317 = sub i64 0, %316
  store i64 %317, ptr %4, align 8
  %318 = load i32, ptr %16, align 4
  %319 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %318, i32 16383)
  %320 = extractvalue { i32, i1 } %319, 1
  br i1 %320, label %344, label %345

321:                                              ; preds = %306
  %322 = load i32, ptr %16, align 4
  %323 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %322, i32 1)
  %324 = extractvalue { i32, i1 } %323, 1
  br i1 %324, label %330, label %331

325:                                              ; preds = %306
  %326 = load i128, ptr %7, align 8
  %327 = lshr i128 %326, 1
  %328 = sub i128 18446744073709551615, %327
  %329 = icmp ule i128 %328, 18446744073709551615
  br i1 %329, label %342, label %343

330:                                              ; preds = %321
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

331:                                              ; preds = %321
  %332 = extractvalue { i32, i1 } %323, 0
  store i32 %332, ptr %16, align 4
  %333 = load i128, ptr %7, align 8
  %334 = sub i128 18446744073709551615, %333
  %335 = icmp ule i128 %334, 18446744073709551615
  br i1 %335, label %338, label %339

336:                                              ; preds = %338
  %337 = trunc i128 %333 to i64
  store i64 %337, ptr %5, align 8
  br label %314

338:                                              ; preds = %331
  br label %336

339:                                              ; preds = %331
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

340:                                              ; preds = %342
  %341 = trunc i128 %327 to i64
  store i64 %341, ptr %5, align 8
  br label %314

342:                                              ; preds = %325
  br label %340

343:                                              ; preds = %325
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

344:                                              ; preds = %314
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

345:                                              ; preds = %314
  %346 = extractvalue { i32, i1 } %319, 0
  %347 = icmp sge i32 %346, 32767
  br i1 %347, label %348, label %351

348:                                              ; preds = %345
  %349 = or i80 604453686435277732577280, %39
  %350 = bitcast i80 %349 to x86_fp80
  ret x86_fp80 %350

351:                                              ; preds = %345
  %352 = icmp slt i32 %346, 1
  br i1 %352, label %353, label %355

353:                                              ; preds = %351
  %354 = icmp eq i32 %346, 0
  br i1 %354, label %361, label %365

355:                                              ; preds = %351
  %356 = load i64, ptr %4, align 8
  %357 = load i80, ptr %18, align 8
  %358 = lshr i80 %357, 1
  br i1 true, label %386, label %387

359:                                              ; preds = %365, %366
  %360 = bitcast i80 %39 to x86_fp80
  ret x86_fp80 %360

361:                                              ; preds = %353
  %362 = load i64, ptr %4, align 8
  %363 = load i80, ptr %18, align 8
  %364 = lshr i80 %363, 1
  br i1 true, label %370, label %371

365:                                              ; preds = %353
  br label %359

366:                                              ; preds = %375, %376
  br label %359

367:                                              ; preds = %370
  %368 = zext i64 %362 to i80
  %369 = icmp ugt i80 %368, %364
  br i1 %369, label %372, label %375

370:                                              ; preds = %361
  br label %367

371:                                              ; preds = %361
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

372:                                              ; preds = %367
  %373 = load i64, ptr %5, align 8
  %374 = icmp eq i64 %373, 9223372036854775807
  br i1 %374, label %377, label %380

375:                                              ; preds = %367
  br label %366

376:                                              ; preds = %380
  br label %366

377:                                              ; preds = %372
  %378 = or i80 27670116110564327424, %39
  %379 = bitcast i80 %378 to x86_fp80
  ret x86_fp80 %379

380:                                              ; preds = %372
  br label %376

381:                                              ; preds = %386
  %382 = zext i64 %356 to i80
  %383 = icmp ugt i80 %382, %358
  %384 = load i64, ptr %5, align 8
  %385 = icmp sge i32 %346, 0
  br i1 %385, label %390, label %391

386:                                              ; preds = %355
  br label %381

387:                                              ; preds = %355
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

388:                                              ; preds = %390
  %389 = sext i32 %346 to i80
  br i1 true, label %403, label %404

390:                                              ; preds = %381
  br label %388

391:                                              ; preds = %381
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

392:                                              ; preds = %403
  %393 = shl i80 %389, 64
  %394 = zext i64 %384 to i80
  %395 = or i80 %394, %393
  store i80 %395, ptr %3, align 8
  %396 = load i80, ptr %3, align 8
  %397 = zext i1 %383 to i80
  %398 = add i80 %396, %397
  store i80 %398, ptr %3, align 8
  %399 = load i80, ptr %3, align 8
  %400 = or i80 %399, %39
  %401 = or i80 %400, 9223372036854775808
  %402 = bitcast i80 %401 to x86_fp80
  ret x86_fp80 %402

403:                                              ; preds = %388
  br label %392

404:                                              ; preds = %388
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__divtf3(fp128 %0, fp128 %1) #0 {
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i128, align 8
  %6 = alloca i128, align 8
  %7 = alloca i128, align 8
  %8 = alloca i128, align 8
  %9 = alloca i128, align 8
  %10 = alloca i128, align 8
  %11 = alloca i128, align 8
  %12 = alloca i128, align 8
  %13 = alloca i128, align 8
  %14 = alloca i128, align 8
  %15 = alloca i128, align 8
  %16 = alloca [6 x i64], align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i128, align 8
  %22 = alloca i128, align 8
  %23 = bitcast fp128 %0 to i128
  %24 = lshr i128 %23, 112
  %25 = and i128 %24, 32767
  %26 = trunc i128 %25 to i32
  %27 = bitcast fp128 %1 to i128
  %28 = lshr i128 %27, 112
  %29 = and i128 %28, 32767
  %30 = trunc i128 %29 to i32
  %31 = bitcast fp128 %0 to i128
  %32 = bitcast fp128 %1 to i128
  %33 = xor i128 %31, %32
  %34 = and i128 %33, -170141183460469231731687303715884105728
  %35 = bitcast fp128 %0 to i128
  %36 = and i128 %35, 5192296858534827628530496329220095
  store i128 %36, ptr %22, align 8
  %37 = bitcast fp128 %1 to i128
  %38 = and i128 %37, 5192296858534827628530496329220095
  store i128 %38, ptr %21, align 8
  store i32 0, ptr %20, align 4
  %39 = sub i32 %26, 1
  %40 = icmp uge i32 %39, 32766
  br i1 %40, label %220, label %221

41:                                               ; preds = %416, %390, %411, %374, %269, %265, %264, %256, %251, %250, %240, %233
  %42 = phi fp128 [ %236, %233 ], [ %243, %240 ], [ 0xL00000000000000007FFF800000000000, %250 ], [ %253, %251 ], [ %257, %256 ], [ 0xL00000000000000007FFF800000000000, %264 ], [ %266, %265 ], [ %271, %269 ], [ %376, %374 ], [ %414, %411 ], [ %391, %390 ], [ %425, %416 ]
  ret fp128 %42

43:                                               ; preds = %230, %280
  %44 = load i128, ptr %22, align 8
  %45 = or i128 %44, 5192296858534827628530496329220096
  store i128 %45, ptr %22, align 8
  %46 = load i128, ptr %21, align 8
  %47 = or i128 %46, 5192296858534827628530496329220096
  store i128 %47, ptr %21, align 8
  %48 = sub i32 %26, %30
  %49 = load i32, ptr %20, align 4
  %50 = add i32 %48, %49
  store i32 %50, ptr %19, align 4
  %51 = load i128, ptr %21, align 8
  %52 = lshr i128 %51, 49
  %53 = trunc i128 %52 to i64
  %54 = sub i64 8432131806905394308, %53
  store i64 %54, ptr %18, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %17, i8 -86, i64 8, i1 false)
  %55 = ptrtoint ptr %17 to i64
  %56 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %56, align 8
  %57 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %55, ptr %57, align 8
  %58 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 8, ptr %58, align 8
  %59 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %59, align 8
  %60 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %60, align 8
  %61 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %61, align 8
  %62 = ptrtoint ptr %16 to i64
  %63 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %62, i64 0)
  %64 = load i64, ptr %18, align 8
  %65 = zext i64 %64 to i128
  %66 = zext i64 %53 to i128
  %67 = mul i128 %65, %66
  %68 = lshr i128 %67, 64
  %69 = xor i128 %68, -1
  %70 = add i128 %69, 1
  %71 = trunc i128 %70 to i64
  store i64 %71, ptr %17, align 8
  %72 = load i64, ptr %18, align 8
  %73 = zext i64 %72 to i128
  %74 = load i64, ptr %17, align 8
  %75 = zext i64 %74 to i128
  %76 = mul i128 %73, %75
  %77 = lshr i128 %76, 63
  %78 = trunc i128 %77 to i64
  store i64 %78, ptr %18, align 8
  %79 = load i64, ptr %18, align 8
  %80 = zext i64 %79 to i128
  %81 = zext i64 %53 to i128
  %82 = mul i128 %80, %81
  %83 = lshr i128 %82, 64
  %84 = xor i128 %83, -1
  %85 = add i128 %84, 1
  %86 = trunc i128 %85 to i64
  store i64 %86, ptr %17, align 8
  %87 = load i64, ptr %18, align 8
  %88 = zext i64 %87 to i128
  %89 = load i64, ptr %17, align 8
  %90 = zext i64 %89 to i128
  %91 = mul i128 %88, %90
  %92 = lshr i128 %91, 63
  %93 = trunc i128 %92 to i64
  store i64 %93, ptr %18, align 8
  %94 = load i64, ptr %18, align 8
  %95 = zext i64 %94 to i128
  %96 = zext i64 %53 to i128
  %97 = mul i128 %95, %96
  %98 = lshr i128 %97, 64
  %99 = xor i128 %98, -1
  %100 = add i128 %99, 1
  %101 = trunc i128 %100 to i64
  store i64 %101, ptr %17, align 8
  %102 = load i64, ptr %18, align 8
  %103 = zext i64 %102 to i128
  %104 = load i64, ptr %17, align 8
  %105 = zext i64 %104 to i128
  %106 = mul i128 %103, %105
  %107 = lshr i128 %106, 63
  %108 = trunc i128 %107 to i64
  store i64 %108, ptr %18, align 8
  %109 = load i64, ptr %18, align 8
  %110 = zext i64 %109 to i128
  %111 = zext i64 %53 to i128
  %112 = mul i128 %110, %111
  %113 = lshr i128 %112, 64
  %114 = xor i128 %113, -1
  %115 = add i128 %114, 1
  %116 = trunc i128 %115 to i64
  store i64 %116, ptr %17, align 8
  %117 = load i64, ptr %18, align 8
  %118 = zext i64 %117 to i128
  %119 = load i64, ptr %17, align 8
  %120 = zext i64 %119 to i128
  %121 = mul i128 %118, %120
  %122 = lshr i128 %121, 63
  %123 = trunc i128 %122 to i64
  store i64 %123, ptr %18, align 8
  %124 = load i64, ptr %18, align 8
  %125 = zext i64 %124 to i128
  %126 = zext i64 %53 to i128
  %127 = mul i128 %125, %126
  %128 = lshr i128 %127, 64
  %129 = xor i128 %128, -1
  %130 = add i128 %129, 1
  %131 = trunc i128 %130 to i64
  store i64 %131, ptr %17, align 8
  %132 = load i64, ptr %18, align 8
  %133 = zext i64 %132 to i128
  %134 = load i64, ptr %17, align 8
  %135 = zext i64 %134 to i128
  %136 = mul i128 %133, %135
  %137 = lshr i128 %136, 63
  %138 = trunc i128 %137 to i64
  store i64 %138, ptr %18, align 8
  %139 = load i64, ptr %18, align 8
  %140 = sub i64 %139, 1
  store i64 %140, ptr %18, align 8
  %141 = load i128, ptr %21, align 8
  %142 = shl i128 %141, 15
  %143 = trunc i128 %142 to i64
  call void @llvm.memset.p0.i64(ptr align 8 %15, i8 -86, i64 16, i1 false)
  %144 = ptrtoint ptr %15 to i64
  %145 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %145, align 8
  %146 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %144, ptr %146, align 8
  %147 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %147, align 8
  %148 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %148, align 8
  %149 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %149, align 8
  %150 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %150, align 8
  %151 = ptrtoint ptr %16 to i64
  %152 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %151, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %14, i8 -86, i64 16, i1 false)
  %153 = ptrtoint ptr %14 to i64
  %154 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %154, align 8
  %155 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %153, ptr %155, align 8
  %156 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %156, align 8
  %157 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %157, align 8
  %158 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %158, align 8
  %159 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %159, align 8
  %160 = ptrtoint ptr %16 to i64
  %161 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %160, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %13, i8 -86, i64 16, i1 false)
  %162 = ptrtoint ptr %13 to i64
  %163 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %163, align 8
  %164 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %162, ptr %164, align 8
  %165 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %165, align 8
  %166 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %166, align 8
  %167 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %167, align 8
  %168 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %168, align 8
  %169 = ptrtoint ptr %16 to i64
  %170 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %169, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %12, i8 -86, i64 16, i1 false)
  %171 = ptrtoint ptr %12 to i64
  %172 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %172, align 8
  %173 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %171, ptr %173, align 8
  %174 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %174, align 8
  %175 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %175, align 8
  %176 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %176, align 8
  %177 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %177, align 8
  %178 = ptrtoint ptr %16 to i64
  %179 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %178, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 -86, i64 16, i1 false)
  %180 = ptrtoint ptr %11 to i64
  %181 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %181, align 8
  %182 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %180, ptr %182, align 8
  %183 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %183, align 8
  %184 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %184, align 8
  %185 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %185, align 8
  %186 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %186, align 8
  %187 = ptrtoint ptr %16 to i64
  %188 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %187, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 -86, i64 16, i1 false)
  %189 = ptrtoint ptr %10 to i64
  %190 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %190, align 8
  %191 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %189, ptr %191, align 8
  %192 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %192, align 8
  %193 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %193, align 8
  %194 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %194, align 8
  %195 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %195, align 8
  %196 = ptrtoint ptr %16 to i64
  %197 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %196, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 16, i1 false)
  %198 = ptrtoint ptr %9 to i64
  %199 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %199, align 8
  %200 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %198, ptr %200, align 8
  %201 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %201, align 8
  %202 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %202, align 8
  %203 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %203, align 8
  %204 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %204, align 8
  %205 = ptrtoint ptr %16 to i64
  %206 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %205, i64 0)
  %207 = load i64, ptr %18, align 8
  %208 = zext i64 %207 to i128
  %209 = zext i64 %53 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %208, i128 %209, ptr nonnull align 8 %9, ptr nonnull align 8 %13)
  %210 = load i64, ptr %18, align 8
  %211 = zext i64 %210 to i128
  %212 = zext i64 %143 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %211, i128 %212, ptr nonnull align 8 %9, ptr nonnull align 8 %12)
  %213 = load i128, ptr %13, align 8
  %214 = load i128, ptr %12, align 8
  %215 = lshr i128 %214, 64
  %216 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %213, i128 %215)
  %217 = extractvalue { i128, i1 } %216, 1
  br i1 %217, label %286, label %287

218:                                              ; preds = %221, %220
  %219 = phi i1 [ true, %220 ], [ %223, %221 ]
  br i1 %219, label %224, label %230

220:                                              ; preds = %2
  br label %218

221:                                              ; preds = %2
  %222 = sub i32 %30, 1
  %223 = icmp uge i32 %222, 32766
  br label %218

224:                                              ; preds = %218
  %225 = bitcast fp128 %0 to i128
  %226 = and i128 %225, 170141183460469231731687303715884105727
  %227 = bitcast fp128 %1 to i128
  %228 = and i128 %227, 170141183460469231731687303715884105727
  %229 = icmp ugt i128 %226, 170135991163610696904058773219554885632
  br i1 %229, label %233, label %237

230:                                              ; preds = %218
  br label %43

231:                                              ; preds = %237
  %232 = icmp ugt i128 %228, 170135991163610696904058773219554885632
  br i1 %232, label %240, label %244

233:                                              ; preds = %224
  %234 = bitcast fp128 %0 to i128
  %235 = or i128 %234, 2596148429267413814265248164610048
  %236 = bitcast i128 %235 to fp128
  br label %41

237:                                              ; preds = %224
  br label %231

238:                                              ; preds = %244
  %239 = icmp eq i128 %226, 170135991163610696904058773219554885632
  br i1 %239, label %247, label %249

240:                                              ; preds = %231
  %241 = bitcast fp128 %1 to i128
  %242 = or i128 %241, 2596148429267413814265248164610048
  %243 = bitcast i128 %242 to fp128
  br label %41

244:                                              ; preds = %231
  br label %238

245:                                              ; preds = %249
  %246 = icmp eq i128 %228, 170135991163610696904058773219554885632
  br i1 %246, label %256, label %258

247:                                              ; preds = %238
  %248 = icmp eq i128 %228, 170135991163610696904058773219554885632
  br i1 %248, label %250, label %251

249:                                              ; preds = %238
  br label %245

250:                                              ; preds = %247
  br label %41

251:                                              ; preds = %247
  %252 = or i128 %226, %34
  %253 = bitcast i128 %252 to fp128
  br label %41

254:                                              ; preds = %258
  %255 = icmp eq i128 %226, 0
  br i1 %255, label %261, label %263

256:                                              ; preds = %245
  %257 = bitcast i128 %34 to fp128
  br label %41

258:                                              ; preds = %245
  br label %254

259:                                              ; preds = %263
  %260 = icmp eq i128 %228, 0
  br i1 %260, label %269, label %272

261:                                              ; preds = %254
  %262 = icmp eq i128 %228, 0
  br i1 %262, label %264, label %265

263:                                              ; preds = %254
  br label %259

264:                                              ; preds = %261
  br label %41

265:                                              ; preds = %261
  %266 = bitcast i128 %34 to fp128
  br label %41

267:                                              ; preds = %272
  %268 = icmp ult i128 %226, 5192296858534827628530496329220096
  br i1 %268, label %275, label %279

269:                                              ; preds = %259
  %270 = or i128 170135991163610696904058773219554885632, %34
  %271 = bitcast i128 %270 to fp128
  br label %41

272:                                              ; preds = %259
  br label %267

273:                                              ; preds = %279, %275
  %274 = icmp ult i128 %228, 5192296858534827628530496329220096
  br i1 %274, label %281, label %285

275:                                              ; preds = %267
  %276 = load i32, ptr %20, align 4
  %277 = call fastcc i32 @compiler_rt.common.normalize__anon_3658(ptr nonnull align 8 %22)
  %278 = add i32 %276, %277
  store i32 %278, ptr %20, align 4
  br label %273

279:                                              ; preds = %267
  br label %273

280:                                              ; preds = %285, %281
  br label %43

281:                                              ; preds = %273
  %282 = load i32, ptr %20, align 4
  %283 = call fastcc i32 @compiler_rt.common.normalize__anon_3658(ptr nonnull align 8 %21)
  %284 = sub i32 %282, %283
  store i32 %284, ptr %20, align 4
  br label %280

285:                                              ; preds = %273
  br label %280

286:                                              ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

287:                                              ; preds = %43
  %288 = extractvalue { i128, i1 } %216, 0
  %289 = sub i128 0, %288
  store i128 %289, ptr %15, align 8
  %290 = load i128, ptr %15, align 8
  %291 = lshr i128 %290, 64
  %292 = trunc i128 %291 to i64
  %293 = load i128, ptr %15, align 8
  %294 = trunc i128 %293 to i64
  %295 = load i64, ptr %18, align 8
  %296 = zext i64 %295 to i128
  %297 = zext i64 %292 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %296, i128 %297, ptr nonnull align 8 %9, ptr nonnull align 8 %11)
  %298 = load i64, ptr %18, align 8
  %299 = zext i64 %298 to i128
  %300 = zext i64 %294 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %299, i128 %300, ptr nonnull align 8 %9, ptr nonnull align 8 %10)
  %301 = load i128, ptr %11, align 8
  %302 = load i128, ptr %10, align 8
  %303 = lshr i128 %302, 64
  %304 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %301, i128 %303)
  %305 = extractvalue { i128, i1 } %304, 1
  br i1 %305, label %306, label %307

306:                                              ; preds = %287
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

307:                                              ; preds = %287
  %308 = extractvalue { i128, i1 } %304, 0
  store i128 %308, ptr %14, align 8
  %309 = load i128, ptr %14, align 8
  %310 = sub i128 %309, 2
  store i128 %310, ptr %14, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 16, i1 false)
  %311 = ptrtoint ptr %8 to i64
  %312 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %312, align 8
  %313 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %311, ptr %313, align 8
  %314 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %314, align 8
  %315 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %315, align 8
  %316 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %316, align 8
  %317 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %317, align 8
  %318 = ptrtoint ptr %16 to i64
  %319 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %318, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %7, i8 -86, i64 16, i1 false)
  %320 = ptrtoint ptr %7 to i64
  %321 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %321, align 8
  %322 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %320, ptr %322, align 8
  %323 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %323, align 8
  %324 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %324, align 8
  %325 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %325, align 8
  %326 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %326, align 8
  %327 = ptrtoint ptr %16 to i64
  %328 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %327, i64 0)
  %329 = load i128, ptr %22, align 8
  %330 = shl i128 %329, 2
  %331 = load i128, ptr %14, align 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %330, i128 %331, ptr nonnull align 8 %8, ptr nonnull align 8 %7)
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 16, i1 false)
  %332 = ptrtoint ptr %6 to i64
  %333 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %333, align 8
  %334 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %332, ptr %334, align 8
  %335 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %335, align 8
  %336 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %336, align 8
  %337 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %337, align 8
  %338 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %338, align 8
  %339 = ptrtoint ptr %16 to i64
  %340 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %339, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 16, i1 false)
  %341 = ptrtoint ptr %5 to i64
  %342 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 0
  store i64 1296236545, ptr %342, align 8
  %343 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 1
  store i64 %341, ptr %343, align 8
  %344 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 2
  store i64 16, ptr %344, align 8
  %345 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 3
  store i64 0, ptr %345, align 8
  %346 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 4
  store i64 0, ptr %346, align 8
  %347 = getelementptr inbounds [6 x i64], ptr %16, i64 0, i64 5
  store i64 0, ptr %347, align 8
  %348 = ptrtoint ptr %16 to i64
  %349 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %348, i64 0)
  %350 = load i128, ptr %8, align 8
  %351 = icmp ult i128 %350, 10384593717069655257060992658440192
  br i1 %351, label %356, label %365

352:                                              ; preds = %365, %356
  %353 = load i32, ptr %19, align 4
  %354 = add i32 %353, 16383
  %355 = icmp sge i32 %354, 32767
  br i1 %355, label %374, label %377

356:                                              ; preds = %307
  %357 = load i128, ptr %8, align 8
  %358 = load i128, ptr %21, align 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %357, i128 %358, ptr nonnull align 8 %9, ptr nonnull align 8 %5)
  %359 = load i128, ptr %22, align 8
  %360 = shl i128 %359, 113
  %361 = load i128, ptr %5, align 8
  %362 = sub i128 %360, %361
  store i128 %362, ptr %6, align 8
  %363 = load i32, ptr %19, align 4
  %364 = sub i32 %363, 1
  store i32 %364, ptr %19, align 4
  br label %352

365:                                              ; preds = %307
  %366 = load i128, ptr %8, align 8
  %367 = lshr i128 %366, 1
  store i128 %367, ptr %8, align 8
  %368 = load i128, ptr %8, align 8
  %369 = load i128, ptr %21, align 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3681(i128 %368, i128 %369, ptr nonnull align 8 %9, ptr nonnull align 8 %5)
  %370 = load i128, ptr %22, align 8
  %371 = shl i128 %370, 112
  %372 = load i128, ptr %5, align 8
  %373 = sub i128 %371, %372
  store i128 %373, ptr %6, align 8
  br label %352

374:                                              ; preds = %352
  %375 = or i128 170135991163610696904058773219554885632, %34
  %376 = bitcast i128 %375 to fp128
  br label %41

377:                                              ; preds = %352
  %378 = icmp slt i32 %354, 1
  br i1 %378, label %379, label %381

379:                                              ; preds = %377
  %380 = icmp eq i32 %354, 0
  br i1 %380, label %392, label %403

381:                                              ; preds = %377
  %382 = load i128, ptr %6, align 8
  %383 = shl i128 %382, 1
  %384 = load i128, ptr %21, align 8
  %385 = icmp uge i128 %383, %384
  %386 = load i128, ptr %8, align 8
  %387 = and i128 %386, 5192296858534827628530496329220095
  store i128 %387, ptr %3, align 8
  %388 = load i128, ptr %3, align 8
  %389 = icmp sge i32 %354, 0
  br i1 %389, label %426, label %427

390:                                              ; preds = %403, %410
  %391 = bitcast i128 %34 to fp128
  br label %41

392:                                              ; preds = %379
  %393 = load i128, ptr %6, align 8
  %394 = shl i128 %393, 1
  %395 = load i128, ptr %21, align 8
  %396 = icmp ugt i128 %394, %395
  %397 = load i128, ptr %8, align 8
  %398 = and i128 %397, 5192296858534827628530496329220095
  store i128 %398, ptr %4, align 8
  %399 = load i128, ptr %4, align 8
  %400 = zext i1 %396 to i128
  %401 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %399, i128 %400)
  %402 = extractvalue { i128, i1 } %401, 1
  br i1 %402, label %404, label %405

403:                                              ; preds = %379
  br label %390

404:                                              ; preds = %392
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

405:                                              ; preds = %392
  %406 = extractvalue { i128, i1 } %401, 0
  store i128 %406, ptr %4, align 8
  %407 = load i128, ptr %4, align 8
  %408 = and i128 %407, -5192296858534827628530496329220096
  %409 = icmp ugt i128 %408, 0
  br i1 %409, label %411, label %415

410:                                              ; preds = %415
  br label %390

411:                                              ; preds = %405
  %412 = load i128, ptr %4, align 8
  %413 = or i128 %412, %34
  %414 = bitcast i128 %413 to fp128
  br label %41

415:                                              ; preds = %405
  br label %410

416:                                              ; preds = %426
  %417 = sext i32 %354 to i128
  %418 = shl i128 %417, 112
  %419 = or i128 %388, %418
  store i128 %419, ptr %3, align 8
  %420 = load i128, ptr %3, align 8
  %421 = zext i1 %385 to i128
  %422 = add i128 %420, %421
  store i128 %422, ptr %3, align 8
  %423 = load i128, ptr %3, align 8
  %424 = or i128 %423, %34
  %425 = bitcast i128 %424 to fp128
  br label %41

426:                                              ; preds = %381
  br label %416

427:                                              ; preds = %381
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @89)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__neghf2(half %0) #0 {
  %2 = bitcast half %0 to i16
  %3 = xor i16 %2, -32768
  %4 = bitcast i16 %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__negsf2(float %0) #0 {
  %2 = bitcast float %0 to i32
  %3 = xor i32 %2, -2147483648
  %4 = bitcast i32 %3 to float
  ret float %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__negdf2(double %0) #0 {
  %2 = bitcast double %0 to i64
  %3 = xor i64 %2, -9223372036854775808
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__negtf2(fp128 %0) #0 {
  %2 = bitcast fp128 %0 to i128
  %3 = xor i128 %2, -170141183460469231731687303715884105728
  %4 = bitcast i128 %3 to fp128
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__negxf2(x86_fp80 %0) #0 {
  %2 = bitcast x86_fp80 %0 to i80
  %3 = xor i80 %2, -604462909807314587353088
  %4 = bitcast i80 %3 to x86_fp80
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__powihf2(half %0, i32 %1) #0 {
  %3 = alloca half, align 2
  %4 = alloca half, align 2
  %5 = alloca i32, align 4
  %6 = alloca half, align 2
  store half %0, ptr %6, align 2
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store half 0xH3C00, ptr %4, align 2
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load half, ptr %4, align 2
  %20 = load half, ptr %6, align 2
  %21 = fmul half %19, %20
  store half %21, ptr %4, align 2
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load half, ptr %6, align 2
  %25 = load half, ptr %6, align 2
  %26 = fmul half %24, %25
  store half %26, ptr %6, align 2
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load half, ptr %3, align 2
  ret half %30

31:                                               ; preds = %8
  %32 = load half, ptr %4, align 2
  %33 = fdiv half 0xH3C00, %32
  store half %33, ptr %3, align 2
  br label %29

34:                                               ; preds = %8
  %35 = load half, ptr %4, align 2
  store half %35, ptr %3, align 2
  br label %29
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @__powisf2(float %0, i32 %1) #0 {
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  store float %0, ptr %6, align 4
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store float 1.000000e+00, ptr %4, align 4
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load float, ptr %4, align 4
  %20 = load float, ptr %6, align 4
  %21 = fmul float %19, %20
  store float %21, ptr %4, align 4
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load float, ptr %6, align 4
  %25 = load float, ptr %6, align 4
  %26 = fmul float %24, %25
  store float %26, ptr %6, align 4
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load float, ptr %3, align 4
  ret float %30

31:                                               ; preds = %8
  %32 = load float, ptr %4, align 4
  %33 = fdiv float 1.000000e+00, %32
  store float %33, ptr %3, align 4
  br label %29

34:                                               ; preds = %8
  %35 = load float, ptr %4, align 4
  store float %35, ptr %3, align 4
  br label %29
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @__powidf2(double %0, i32 %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = alloca double, align 8
  store double %0, ptr %6, align 8
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store double 1.000000e+00, ptr %4, align 8
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load double, ptr %4, align 8
  %20 = load double, ptr %6, align 8
  %21 = fmul double %19, %20
  store double %21, ptr %4, align 8
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load double, ptr %6, align 8
  %25 = load double, ptr %6, align 8
  %26 = fmul double %24, %25
  store double %26, ptr %6, align 8
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load double, ptr %3, align 8
  ret double %30

31:                                               ; preds = %8
  %32 = load double, ptr %4, align 8
  %33 = fdiv double 1.000000e+00, %32
  store double %33, ptr %3, align 8
  br label %29

34:                                               ; preds = %8
  %35 = load double, ptr %4, align 8
  store double %35, ptr %3, align 8
  br label %29
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @__powitf2(fp128 %0, i32 %1) #0 {
  %3 = alloca fp128, align 16
  %4 = alloca fp128, align 16
  %5 = alloca i32, align 4
  %6 = alloca fp128, align 16
  store fp128 %0, ptr %6, align 16
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store fp128 0xL00000000000000003FFF000000000000, ptr %4, align 16
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load fp128, ptr %4, align 16
  %20 = load fp128, ptr %6, align 16
  %21 = call fp128 @__multf3(fp128 %19, fp128 %20)
  store fp128 %21, ptr %4, align 16
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load fp128, ptr %6, align 16
  %25 = load fp128, ptr %6, align 16
  %26 = call fp128 @__multf3(fp128 %24, fp128 %25)
  store fp128 %26, ptr %6, align 16
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load fp128, ptr %3, align 16
  ret fp128 %30

31:                                               ; preds = %8
  %32 = load fp128, ptr %4, align 16
  %33 = call fp128 @__divtf3(fp128 0xL00000000000000003FFF000000000000, fp128 %32)
  store fp128 %33, ptr %3, align 16
  br label %29

34:                                               ; preds = %8
  %35 = load fp128, ptr %4, align 16
  store fp128 %35, ptr %3, align 16
  br label %29
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__powixf2(x86_fp80 %0, i32 %1) #0 {
  %3 = alloca x86_fp80, align 16
  %4 = alloca x86_fp80, align 16
  %5 = alloca i32, align 4
  %6 = alloca x86_fp80, align 16
  store x86_fp80 %0, ptr %6, align 16
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store x86_fp80 0xK3FFF8000000000000000, ptr %4, align 16
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load x86_fp80, ptr %4, align 16
  %20 = load x86_fp80, ptr %6, align 16
  %21 = fmul x86_fp80 %19, %20
  store x86_fp80 %21, ptr %4, align 16
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load x86_fp80, ptr %6, align 16
  %25 = load x86_fp80, ptr %6, align 16
  %26 = fmul x86_fp80 %24, %25
  store x86_fp80 %26, ptr %6, align 16
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load x86_fp80, ptr %3, align 16
  ret x86_fp80 %30

31:                                               ; preds = %8
  %32 = load x86_fp80, ptr %4, align 16
  %33 = fdiv x86_fp80 0xK3FFF8000000000000000, %32
  store x86_fp80 %33, ptr %3, align 16
  br label %29

34:                                               ; preds = %8
  %35 = load x86_fp80, ptr %4, align 16
  store x86_fp80 %35, ptr %3, align 16
  br label %29
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__mulhc3(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f16)") %0, half %1, half %2, half %3, half %4) #0 {
  %6 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %7 = alloca i1, align 1
  %8 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %9 = alloca half, align 2
  %10 = alloca half, align 2
  %11 = alloca half, align 2
  %12 = alloca half, align 2
  store half %1, ptr %12, align 2
  store half %2, ptr %11, align 2
  store half %3, ptr %10, align 2
  store half %4, ptr %9, align 2
  %13 = load half, ptr %12, align 2
  %14 = load half, ptr %10, align 2
  %15 = fmul half %13, %14
  %16 = load half, ptr %11, align 2
  %17 = load half, ptr %9, align 2
  %18 = fmul half %16, %17
  %19 = load half, ptr %12, align 2
  %20 = load half, ptr %9, align 2
  %21 = fmul half %19, %20
  %22 = load half, ptr %11, align 2
  %23 = load half, ptr %10, align 2
  %24 = fmul half %22, %23
  %25 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 0
  %26 = fsub half %15, %18
  store half %26, ptr %25, align 2
  %27 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 1
  %28 = fadd half %21, %24
  store half %28, ptr %27, align 2
  %29 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 0
  %30 = load half, ptr %29, align 2
  %31 = call fastcc i1 @math.isnan.isNan__anon_3694(half %30)
  br i1 %31, label %37, label %41

32:                                               ; preds = %34, %205
  %33 = phi ptr [ %6, %205 ], [ %8, %34 ]
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 %33, i64 4, i1 false)
  ret void

34:                                               ; preds = %47, %204
  br label %32

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %5
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 1
  %39 = load half, ptr %38, align 2
  %40 = call fastcc i1 @math.isnan.isNan__anon_3694(half %39)
  br label %35

41:                                               ; preds = %5
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %7, align 1
  %43 = load half, ptr %12, align 2
  %44 = bitcast half %43 to i16
  %45 = and i16 %44, 32767
  %46 = icmp eq i16 %45, 31744
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %66, %92
  %49 = load half, ptr %10, align 2
  %50 = bitcast half %49 to i16
  %51 = and i16 %50, 32767
  %52 = icmp eq i16 %51, 31744
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load half, ptr %11, align 2
  %58 = bitcast half %57 to i16
  %59 = and i16 %58, 32767
  %60 = icmp eq i16 %59, 31744
  br label %53

61:                                               ; preds = %53
  %62 = load half, ptr %12, align 2
  %63 = bitcast half %62 to i16
  %64 = and i16 %63, 32767
  %65 = icmp eq i16 %64, 31744
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi half [ 0xH3C00, %75 ], [ 0xH0000, %76 ]
  %69 = load half, ptr %12, align 2
  %70 = call fastcc half @math.copysign.copysign__anon_3711(half %68, half %69)
  store half %70, ptr %12, align 2
  %71 = load half, ptr %11, align 2
  %72 = bitcast half %71 to i16
  %73 = and i16 %72, 32767
  %74 = icmp eq i16 %73, 31744
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi half [ 0xH3C00, %83 ], [ 0xH0000, %84 ]
  %79 = load half, ptr %11, align 2
  %80 = call fastcc half @math.copysign.copysign__anon_3711(half %78, half %79)
  store half %80, ptr %11, align 2
  %81 = load half, ptr %10, align 2
  %82 = call fastcc i1 @math.isnan.isNan__anon_3694(half %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load half, ptr %9, align 2
  %87 = call fastcc i1 @math.isnan.isNan__anon_3694(half %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load half, ptr %10, align 2
  %90 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH0000, half %89)
  store half %90, ptr %10, align 2
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %7, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load half, ptr %9, align 2
  %95 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH0000, half %94)
  store half %95, ptr %9, align 2
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %113, %139
  %98 = load i1, ptr %7, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load half, ptr %9, align 2
  %105 = bitcast half %104 to i16
  %106 = and i16 %105, 32767
  %107 = icmp eq i16 %106, 31744
  br label %100

108:                                              ; preds = %100
  %109 = load half, ptr %10, align 2
  %110 = bitcast half %109 to i16
  %111 = and i16 %110, 32767
  %112 = icmp eq i16 %111, 31744
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi half [ 0xH3C00, %122 ], [ 0xH0000, %123 ]
  %116 = load half, ptr %10, align 2
  %117 = call fastcc half @math.copysign.copysign__anon_3711(half %115, half %116)
  store half %117, ptr %10, align 2
  %118 = load half, ptr %9, align 2
  %119 = bitcast half %118 to i16
  %120 = and i16 %119, 32767
  %121 = icmp eq i16 %120, 31744
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi half [ 0xH3C00, %130 ], [ 0xH0000, %131 ]
  %126 = load half, ptr %9, align 2
  %127 = call fastcc half @math.copysign.copysign__anon_3711(half %125, half %126)
  store half %127, ptr %9, align 2
  %128 = load half, ptr %12, align 2
  %129 = call fastcc i1 @math.isnan.isNan__anon_3694(half %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load half, ptr %11, align 2
  %134 = call fastcc i1 @math.isnan.isNan__anon_3694(half %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load half, ptr %12, align 2
  %137 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH0000, half %136)
  store half %137, ptr %12, align 2
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %7, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load half, ptr %11, align 2
  %142 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH0000, half %141)
  store half %142, ptr %11, align 2
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %177, %199
  %145 = load i1, ptr %7, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %152, %167
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast half %15 to i16
  %150 = and i16 %149, 32767
  %151 = icmp eq i16 %150, 31744
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast half %18 to i16
  %158 = and i16 %157, 32767
  %159 = icmp eq i16 %158, 31744
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast half %21 to i16
  %165 = and i16 %164, 32767
  %166 = icmp eq i16 %165, 31744
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast half %24 to i16
  %172 = and i16 %171, 32767
  %173 = icmp eq i16 %172, 31744
  br label %167

174:                                              ; preds = %146
  %175 = load half, ptr %12, align 2
  %176 = call fastcc i1 @math.isnan.isNan__anon_3694(half %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load half, ptr %11, align 2
  %180 = call fastcc i1 @math.isnan.isNan__anon_3694(half %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load half, ptr %12, align 2
  %183 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH0000, half %182)
  store half %183, ptr %12, align 2
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load half, ptr %10, align 2
  %187 = call fastcc i1 @math.isnan.isNan__anon_3694(half %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load half, ptr %11, align 2
  %190 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH0000, half %189)
  store half %190, ptr %11, align 2
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load half, ptr %9, align 2
  %194 = call fastcc i1 @math.isnan.isNan__anon_3694(half %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load half, ptr %10, align 2
  %197 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH0000, half %196)
  store half %197, ptr %10, align 2
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %7, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load half, ptr %9, align 2
  %202 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH0000, half %201)
  store half %202, ptr %9, align 2
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %6, i32 0, i32 0
  %207 = load half, ptr %12, align 2
  %208 = load half, ptr %10, align 2
  %209 = fmul half %207, %208
  %210 = load half, ptr %11, align 2
  %211 = load half, ptr %9, align 2
  %212 = fmul half %210, %211
  %213 = fsub half %209, %212
  %214 = fmul half 0xH7C00, %213
  store half %214, ptr %206, align 2
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %6, i32 0, i32 1
  %216 = load half, ptr %12, align 2
  %217 = load half, ptr %9, align 2
  %218 = fmul half %216, %217
  %219 = load half, ptr %11, align 2
  %220 = load half, ptr %10, align 2
  %221 = fmul half %219, %220
  %222 = fadd half %218, %221
  %223 = fmul half 0xH7C00, %222
  store half %223, ptr %215, align 2
  br label %32

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3694(half %0) unnamed_addr #0 {
  %2 = fcmp une half %0, %0
  ret i1 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc half @math.copysign.copysign__anon_3711(half %0, half %1) unnamed_addr #0 {
  %3 = bitcast half %0 to i16
  %4 = and i16 %3, 32767
  %5 = bitcast half %1 to i16
  %6 = and i16 %5, -32768
  %7 = or i16 %4, %6
  %8 = bitcast i16 %7 to half
  ret half %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local { <2 x float> } @__mulsc3(float %0, float %1, float %2, float %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %6 = alloca i1, align 1
  %7 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  store float %0, ptr %11, align 4
  store float %1, ptr %10, align 4
  store float %2, ptr %9, align 4
  store float %3, ptr %8, align 4
  %12 = load float, ptr %11, align 4
  %13 = load float, ptr %9, align 4
  %14 = fmul float %12, %13
  %15 = load float, ptr %10, align 4
  %16 = load float, ptr %8, align 4
  %17 = fmul float %15, %16
  %18 = load float, ptr %11, align 4
  %19 = load float, ptr %8, align 4
  %20 = fmul float %18, %19
  %21 = load float, ptr %10, align 4
  %22 = load float, ptr %9, align 4
  %23 = fmul float %21, %22
  %24 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 0
  %25 = fsub float %14, %17
  store float %25, ptr %24, align 4
  %26 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 1
  %27 = fadd float %20, %23
  store float %27, ptr %26, align 4
  %28 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 0
  %29 = load float, ptr %28, align 4
  %30 = call fastcc i1 @math.isnan.isNan__anon_3712(float %29)
  br i1 %30, label %37, label %41

31:                                               ; preds = %34, %205
  %32 = phi ptr [ %5, %205 ], [ %7, %34 ]
  %33 = load { <2 x float> }, ptr %32, align 4
  ret { <2 x float> } %33

34:                                               ; preds = %47, %204
  br label %31

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %4
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 1
  %39 = load float, ptr %38, align 4
  %40 = call fastcc i1 @math.isnan.isNan__anon_3712(float %39)
  br label %35

41:                                               ; preds = %4
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %6, align 1
  %43 = load float, ptr %11, align 4
  %44 = bitcast float %43 to i32
  %45 = and i32 %44, 2147483647
  %46 = icmp eq i32 %45, 2139095040
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %66, %92
  %49 = load float, ptr %9, align 4
  %50 = bitcast float %49 to i32
  %51 = and i32 %50, 2147483647
  %52 = icmp eq i32 %51, 2139095040
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load float, ptr %10, align 4
  %58 = bitcast float %57 to i32
  %59 = and i32 %58, 2147483647
  %60 = icmp eq i32 %59, 2139095040
  br label %53

61:                                               ; preds = %53
  %62 = load float, ptr %11, align 4
  %63 = bitcast float %62 to i32
  %64 = and i32 %63, 2147483647
  %65 = icmp eq i32 %64, 2139095040
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi float [ 1.000000e+00, %75 ], [ 0.000000e+00, %76 ]
  %69 = load float, ptr %11, align 4
  %70 = call fastcc float @math.copysign.copysign__anon_3713(float %68, float %69)
  store float %70, ptr %11, align 4
  %71 = load float, ptr %10, align 4
  %72 = bitcast float %71 to i32
  %73 = and i32 %72, 2147483647
  %74 = icmp eq i32 %73, 2139095040
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi float [ 1.000000e+00, %83 ], [ 0.000000e+00, %84 ]
  %79 = load float, ptr %10, align 4
  %80 = call fastcc float @math.copysign.copysign__anon_3713(float %78, float %79)
  store float %80, ptr %10, align 4
  %81 = load float, ptr %9, align 4
  %82 = call fastcc i1 @math.isnan.isNan__anon_3712(float %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load float, ptr %8, align 4
  %87 = call fastcc i1 @math.isnan.isNan__anon_3712(float %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load float, ptr %9, align 4
  %90 = call fastcc float @math.copysign.copysign__anon_3713(float 0.000000e+00, float %89)
  store float %90, ptr %9, align 4
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %6, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load float, ptr %8, align 4
  %95 = call fastcc float @math.copysign.copysign__anon_3713(float 0.000000e+00, float %94)
  store float %95, ptr %8, align 4
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %113, %139
  %98 = load i1, ptr %6, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load float, ptr %8, align 4
  %105 = bitcast float %104 to i32
  %106 = and i32 %105, 2147483647
  %107 = icmp eq i32 %106, 2139095040
  br label %100

108:                                              ; preds = %100
  %109 = load float, ptr %9, align 4
  %110 = bitcast float %109 to i32
  %111 = and i32 %110, 2147483647
  %112 = icmp eq i32 %111, 2139095040
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi float [ 1.000000e+00, %122 ], [ 0.000000e+00, %123 ]
  %116 = load float, ptr %9, align 4
  %117 = call fastcc float @math.copysign.copysign__anon_3713(float %115, float %116)
  store float %117, ptr %9, align 4
  %118 = load float, ptr %8, align 4
  %119 = bitcast float %118 to i32
  %120 = and i32 %119, 2147483647
  %121 = icmp eq i32 %120, 2139095040
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi float [ 1.000000e+00, %130 ], [ 0.000000e+00, %131 ]
  %126 = load float, ptr %8, align 4
  %127 = call fastcc float @math.copysign.copysign__anon_3713(float %125, float %126)
  store float %127, ptr %8, align 4
  %128 = load float, ptr %11, align 4
  %129 = call fastcc i1 @math.isnan.isNan__anon_3712(float %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load float, ptr %10, align 4
  %134 = call fastcc i1 @math.isnan.isNan__anon_3712(float %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load float, ptr %11, align 4
  %137 = call fastcc float @math.copysign.copysign__anon_3713(float 0.000000e+00, float %136)
  store float %137, ptr %11, align 4
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %6, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load float, ptr %10, align 4
  %142 = call fastcc float @math.copysign.copysign__anon_3713(float 0.000000e+00, float %141)
  store float %142, ptr %10, align 4
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %177, %199
  %145 = load i1, ptr %6, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %152, %167
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast float %14 to i32
  %150 = and i32 %149, 2147483647
  %151 = icmp eq i32 %150, 2139095040
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast float %17 to i32
  %158 = and i32 %157, 2147483647
  %159 = icmp eq i32 %158, 2139095040
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast float %20 to i32
  %165 = and i32 %164, 2147483647
  %166 = icmp eq i32 %165, 2139095040
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast float %23 to i32
  %172 = and i32 %171, 2147483647
  %173 = icmp eq i32 %172, 2139095040
  br label %167

174:                                              ; preds = %146
  %175 = load float, ptr %11, align 4
  %176 = call fastcc i1 @math.isnan.isNan__anon_3712(float %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load float, ptr %10, align 4
  %180 = call fastcc i1 @math.isnan.isNan__anon_3712(float %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load float, ptr %11, align 4
  %183 = call fastcc float @math.copysign.copysign__anon_3713(float 0.000000e+00, float %182)
  store float %183, ptr %11, align 4
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load float, ptr %9, align 4
  %187 = call fastcc i1 @math.isnan.isNan__anon_3712(float %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load float, ptr %10, align 4
  %190 = call fastcc float @math.copysign.copysign__anon_3713(float 0.000000e+00, float %189)
  store float %190, ptr %10, align 4
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load float, ptr %8, align 4
  %194 = call fastcc i1 @math.isnan.isNan__anon_3712(float %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load float, ptr %9, align 4
  %197 = call fastcc float @math.copysign.copysign__anon_3713(float 0.000000e+00, float %196)
  store float %197, ptr %9, align 4
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %6, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load float, ptr %8, align 4
  %202 = call fastcc float @math.copysign.copysign__anon_3713(float 0.000000e+00, float %201)
  store float %202, ptr %8, align 4
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %5, i32 0, i32 0
  %207 = load float, ptr %11, align 4
  %208 = load float, ptr %9, align 4
  %209 = fmul float %207, %208
  %210 = load float, ptr %10, align 4
  %211 = load float, ptr %8, align 4
  %212 = fmul float %210, %211
  %213 = fsub float %209, %212
  %214 = fmul float 0x7FF0000000000000, %213
  store float %214, ptr %206, align 4
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %5, i32 0, i32 1
  %216 = load float, ptr %11, align 4
  %217 = load float, ptr %8, align 4
  %218 = fmul float %216, %217
  %219 = load float, ptr %10, align 4
  %220 = load float, ptr %9, align 4
  %221 = fmul float %219, %220
  %222 = fadd float %218, %221
  %223 = fmul float 0x7FF0000000000000, %222
  store float %223, ptr %215, align 4
  br label %31

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3712(float %0) unnamed_addr #0 {
  %2 = fcmp une float %0, %0
  ret i1 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc float @math.copysign.copysign__anon_3713(float %0, float %1) unnamed_addr #0 {
  %3 = bitcast float %0 to i32
  %4 = and i32 %3, 2147483647
  %5 = bitcast float %1 to i32
  %6 = and i32 %5, -2147483648
  %7 = or i32 %4, %6
  %8 = bitcast i32 %7 to float
  ret float %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local { double, double } @__muldc3(double %0, double %1, double %2, double %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %6 = alloca i1, align 1
  %7 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  store double %0, ptr %11, align 8
  store double %1, ptr %10, align 8
  store double %2, ptr %9, align 8
  store double %3, ptr %8, align 8
  %12 = load double, ptr %11, align 8
  %13 = load double, ptr %9, align 8
  %14 = fmul double %12, %13
  %15 = load double, ptr %10, align 8
  %16 = load double, ptr %8, align 8
  %17 = fmul double %15, %16
  %18 = load double, ptr %11, align 8
  %19 = load double, ptr %8, align 8
  %20 = fmul double %18, %19
  %21 = load double, ptr %10, align 8
  %22 = load double, ptr %9, align 8
  %23 = fmul double %21, %22
  %24 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %25 = fsub double %14, %17
  store double %25, ptr %24, align 8
  %26 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 1
  %27 = fadd double %20, %23
  store double %27, ptr %26, align 8
  %28 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %29 = load double, ptr %28, align 8
  %30 = call fastcc i1 @math.isnan.isNan__anon_3714(double %29)
  br i1 %30, label %37, label %41

31:                                               ; preds = %34, %205
  %32 = phi ptr [ %5, %205 ], [ %7, %34 ]
  %33 = load { double, double }, ptr %32, align 8
  ret { double, double } %33

34:                                               ; preds = %47, %204
  br label %31

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %4
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 1
  %39 = load double, ptr %38, align 8
  %40 = call fastcc i1 @math.isnan.isNan__anon_3714(double %39)
  br label %35

41:                                               ; preds = %4
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %6, align 1
  %43 = load double, ptr %11, align 8
  %44 = bitcast double %43 to i64
  %45 = and i64 %44, 9223372036854775807
  %46 = icmp eq i64 %45, 9218868437227405312
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %66, %92
  %49 = load double, ptr %9, align 8
  %50 = bitcast double %49 to i64
  %51 = and i64 %50, 9223372036854775807
  %52 = icmp eq i64 %51, 9218868437227405312
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load double, ptr %10, align 8
  %58 = bitcast double %57 to i64
  %59 = and i64 %58, 9223372036854775807
  %60 = icmp eq i64 %59, 9218868437227405312
  br label %53

61:                                               ; preds = %53
  %62 = load double, ptr %11, align 8
  %63 = bitcast double %62 to i64
  %64 = and i64 %63, 9223372036854775807
  %65 = icmp eq i64 %64, 9218868437227405312
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi double [ 1.000000e+00, %75 ], [ 0.000000e+00, %76 ]
  %69 = load double, ptr %11, align 8
  %70 = call fastcc double @math.copysign.copysign__anon_3715(double %68, double %69)
  store double %70, ptr %11, align 8
  %71 = load double, ptr %10, align 8
  %72 = bitcast double %71 to i64
  %73 = and i64 %72, 9223372036854775807
  %74 = icmp eq i64 %73, 9218868437227405312
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi double [ 1.000000e+00, %83 ], [ 0.000000e+00, %84 ]
  %79 = load double, ptr %10, align 8
  %80 = call fastcc double @math.copysign.copysign__anon_3715(double %78, double %79)
  store double %80, ptr %10, align 8
  %81 = load double, ptr %9, align 8
  %82 = call fastcc i1 @math.isnan.isNan__anon_3714(double %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load double, ptr %8, align 8
  %87 = call fastcc i1 @math.isnan.isNan__anon_3714(double %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load double, ptr %9, align 8
  %90 = call fastcc double @math.copysign.copysign__anon_3715(double 0.000000e+00, double %89)
  store double %90, ptr %9, align 8
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %6, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load double, ptr %8, align 8
  %95 = call fastcc double @math.copysign.copysign__anon_3715(double 0.000000e+00, double %94)
  store double %95, ptr %8, align 8
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %113, %139
  %98 = load i1, ptr %6, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load double, ptr %8, align 8
  %105 = bitcast double %104 to i64
  %106 = and i64 %105, 9223372036854775807
  %107 = icmp eq i64 %106, 9218868437227405312
  br label %100

108:                                              ; preds = %100
  %109 = load double, ptr %9, align 8
  %110 = bitcast double %109 to i64
  %111 = and i64 %110, 9223372036854775807
  %112 = icmp eq i64 %111, 9218868437227405312
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi double [ 1.000000e+00, %122 ], [ 0.000000e+00, %123 ]
  %116 = load double, ptr %9, align 8
  %117 = call fastcc double @math.copysign.copysign__anon_3715(double %115, double %116)
  store double %117, ptr %9, align 8
  %118 = load double, ptr %8, align 8
  %119 = bitcast double %118 to i64
  %120 = and i64 %119, 9223372036854775807
  %121 = icmp eq i64 %120, 9218868437227405312
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi double [ 1.000000e+00, %130 ], [ 0.000000e+00, %131 ]
  %126 = load double, ptr %8, align 8
  %127 = call fastcc double @math.copysign.copysign__anon_3715(double %125, double %126)
  store double %127, ptr %8, align 8
  %128 = load double, ptr %11, align 8
  %129 = call fastcc i1 @math.isnan.isNan__anon_3714(double %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load double, ptr %10, align 8
  %134 = call fastcc i1 @math.isnan.isNan__anon_3714(double %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load double, ptr %11, align 8
  %137 = call fastcc double @math.copysign.copysign__anon_3715(double 0.000000e+00, double %136)
  store double %137, ptr %11, align 8
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %6, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load double, ptr %10, align 8
  %142 = call fastcc double @math.copysign.copysign__anon_3715(double 0.000000e+00, double %141)
  store double %142, ptr %10, align 8
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %177, %199
  %145 = load i1, ptr %6, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %152, %167
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast double %14 to i64
  %150 = and i64 %149, 9223372036854775807
  %151 = icmp eq i64 %150, 9218868437227405312
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast double %17 to i64
  %158 = and i64 %157, 9223372036854775807
  %159 = icmp eq i64 %158, 9218868437227405312
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast double %20 to i64
  %165 = and i64 %164, 9223372036854775807
  %166 = icmp eq i64 %165, 9218868437227405312
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast double %23 to i64
  %172 = and i64 %171, 9223372036854775807
  %173 = icmp eq i64 %172, 9218868437227405312
  br label %167

174:                                              ; preds = %146
  %175 = load double, ptr %11, align 8
  %176 = call fastcc i1 @math.isnan.isNan__anon_3714(double %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load double, ptr %10, align 8
  %180 = call fastcc i1 @math.isnan.isNan__anon_3714(double %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load double, ptr %11, align 8
  %183 = call fastcc double @math.copysign.copysign__anon_3715(double 0.000000e+00, double %182)
  store double %183, ptr %11, align 8
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load double, ptr %9, align 8
  %187 = call fastcc i1 @math.isnan.isNan__anon_3714(double %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load double, ptr %10, align 8
  %190 = call fastcc double @math.copysign.copysign__anon_3715(double 0.000000e+00, double %189)
  store double %190, ptr %10, align 8
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load double, ptr %8, align 8
  %194 = call fastcc i1 @math.isnan.isNan__anon_3714(double %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load double, ptr %9, align 8
  %197 = call fastcc double @math.copysign.copysign__anon_3715(double 0.000000e+00, double %196)
  store double %197, ptr %9, align 8
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %6, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load double, ptr %8, align 8
  %202 = call fastcc double @math.copysign.copysign__anon_3715(double 0.000000e+00, double %201)
  store double %202, ptr %8, align 8
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %207 = load double, ptr %11, align 8
  %208 = load double, ptr %9, align 8
  %209 = fmul double %207, %208
  %210 = load double, ptr %10, align 8
  %211 = load double, ptr %8, align 8
  %212 = fmul double %210, %211
  %213 = fsub double %209, %212
  %214 = fmul double 0x7FF0000000000000, %213
  store double %214, ptr %206, align 8
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 1
  %216 = load double, ptr %11, align 8
  %217 = load double, ptr %8, align 8
  %218 = fmul double %216, %217
  %219 = load double, ptr %10, align 8
  %220 = load double, ptr %9, align 8
  %221 = fmul double %219, %220
  %222 = fadd double %218, %221
  %223 = fmul double 0x7FF0000000000000, %222
  store double %223, ptr %215, align 8
  br label %31

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3714(double %0) unnamed_addr #0 {
  %2 = fcmp une double %0, %0
  ret i1 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc double @math.copysign.copysign__anon_3715(double %0, double %1) unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, -9223372036854775808
  %7 = or i64 %4, %6
  %8 = bitcast i64 %7 to double
  ret double %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__mulxc3(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f80)") %0, x86_fp80 %1, x86_fp80 %2, x86_fp80 %3, x86_fp80 %4) #0 {
  %6 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %7 = alloca i1, align 1
  %8 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %9 = alloca x86_fp80, align 16
  %10 = alloca x86_fp80, align 16
  %11 = alloca x86_fp80, align 16
  %12 = alloca x86_fp80, align 16
  store x86_fp80 %1, ptr %12, align 16
  store x86_fp80 %2, ptr %11, align 16
  store x86_fp80 %3, ptr %10, align 16
  store x86_fp80 %4, ptr %9, align 16
  %13 = load x86_fp80, ptr %12, align 16
  %14 = load x86_fp80, ptr %10, align 16
  %15 = fmul x86_fp80 %13, %14
  %16 = load x86_fp80, ptr %11, align 16
  %17 = load x86_fp80, ptr %9, align 16
  %18 = fmul x86_fp80 %16, %17
  %19 = load x86_fp80, ptr %12, align 16
  %20 = load x86_fp80, ptr %9, align 16
  %21 = fmul x86_fp80 %19, %20
  %22 = load x86_fp80, ptr %11, align 16
  %23 = load x86_fp80, ptr %10, align 16
  %24 = fmul x86_fp80 %22, %23
  %25 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 0
  %26 = fsub x86_fp80 %15, %18
  store x86_fp80 %26, ptr %25, align 16
  %27 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 1
  %28 = fadd x86_fp80 %21, %24
  store x86_fp80 %28, ptr %27, align 16
  %29 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 0
  %30 = load x86_fp80, ptr %29, align 16
  %31 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %30)
  br i1 %31, label %37, label %41

32:                                               ; preds = %34, %205
  %33 = phi ptr [ %6, %205 ], [ %8, %34 ]
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %33, i64 32, i1 false)
  ret void

34:                                               ; preds = %47, %204
  br label %32

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %5
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 1
  %39 = load x86_fp80, ptr %38, align 16
  %40 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %39)
  br label %35

41:                                               ; preds = %5
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %7, align 1
  %43 = load x86_fp80, ptr %12, align 16
  %44 = bitcast x86_fp80 %43 to i80
  %45 = and i80 %44, 604462909807314587353087
  %46 = icmp eq i80 %45, 604453686435277732577280
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %66, %92
  %49 = load x86_fp80, ptr %10, align 16
  %50 = bitcast x86_fp80 %49 to i80
  %51 = and i80 %50, 604462909807314587353087
  %52 = icmp eq i80 %51, 604453686435277732577280
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load x86_fp80, ptr %11, align 16
  %58 = bitcast x86_fp80 %57 to i80
  %59 = and i80 %58, 604462909807314587353087
  %60 = icmp eq i80 %59, 604453686435277732577280
  br label %53

61:                                               ; preds = %53
  %62 = load x86_fp80, ptr %12, align 16
  %63 = bitcast x86_fp80 %62 to i80
  %64 = and i80 %63, 604462909807314587353087
  %65 = icmp eq i80 %64, 604453686435277732577280
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi x86_fp80 [ 0xK3FFF8000000000000000, %75 ], [ 0xK00000000000000000000, %76 ]
  %69 = load x86_fp80, ptr %12, align 16
  %70 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %68, x86_fp80 %69)
  store x86_fp80 %70, ptr %12, align 16
  %71 = load x86_fp80, ptr %11, align 16
  %72 = bitcast x86_fp80 %71 to i80
  %73 = and i80 %72, 604462909807314587353087
  %74 = icmp eq i80 %73, 604453686435277732577280
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi x86_fp80 [ 0xK3FFF8000000000000000, %83 ], [ 0xK00000000000000000000, %84 ]
  %79 = load x86_fp80, ptr %11, align 16
  %80 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %78, x86_fp80 %79)
  store x86_fp80 %80, ptr %11, align 16
  %81 = load x86_fp80, ptr %10, align 16
  %82 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load x86_fp80, ptr %9, align 16
  %87 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load x86_fp80, ptr %10, align 16
  %90 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK00000000000000000000, x86_fp80 %89)
  store x86_fp80 %90, ptr %10, align 16
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %7, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load x86_fp80, ptr %9, align 16
  %95 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK00000000000000000000, x86_fp80 %94)
  store x86_fp80 %95, ptr %9, align 16
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %113, %139
  %98 = load i1, ptr %7, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load x86_fp80, ptr %9, align 16
  %105 = bitcast x86_fp80 %104 to i80
  %106 = and i80 %105, 604462909807314587353087
  %107 = icmp eq i80 %106, 604453686435277732577280
  br label %100

108:                                              ; preds = %100
  %109 = load x86_fp80, ptr %10, align 16
  %110 = bitcast x86_fp80 %109 to i80
  %111 = and i80 %110, 604462909807314587353087
  %112 = icmp eq i80 %111, 604453686435277732577280
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi x86_fp80 [ 0xK3FFF8000000000000000, %122 ], [ 0xK00000000000000000000, %123 ]
  %116 = load x86_fp80, ptr %10, align 16
  %117 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %115, x86_fp80 %116)
  store x86_fp80 %117, ptr %10, align 16
  %118 = load x86_fp80, ptr %9, align 16
  %119 = bitcast x86_fp80 %118 to i80
  %120 = and i80 %119, 604462909807314587353087
  %121 = icmp eq i80 %120, 604453686435277732577280
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi x86_fp80 [ 0xK3FFF8000000000000000, %130 ], [ 0xK00000000000000000000, %131 ]
  %126 = load x86_fp80, ptr %9, align 16
  %127 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %125, x86_fp80 %126)
  store x86_fp80 %127, ptr %9, align 16
  %128 = load x86_fp80, ptr %12, align 16
  %129 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load x86_fp80, ptr %11, align 16
  %134 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load x86_fp80, ptr %12, align 16
  %137 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK00000000000000000000, x86_fp80 %136)
  store x86_fp80 %137, ptr %12, align 16
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %7, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load x86_fp80, ptr %11, align 16
  %142 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK00000000000000000000, x86_fp80 %141)
  store x86_fp80 %142, ptr %11, align 16
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %177, %199
  %145 = load i1, ptr %7, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %152, %167
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast x86_fp80 %15 to i80
  %150 = and i80 %149, 604462909807314587353087
  %151 = icmp eq i80 %150, 604453686435277732577280
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast x86_fp80 %18 to i80
  %158 = and i80 %157, 604462909807314587353087
  %159 = icmp eq i80 %158, 604453686435277732577280
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast x86_fp80 %21 to i80
  %165 = and i80 %164, 604462909807314587353087
  %166 = icmp eq i80 %165, 604453686435277732577280
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast x86_fp80 %24 to i80
  %172 = and i80 %171, 604462909807314587353087
  %173 = icmp eq i80 %172, 604453686435277732577280
  br label %167

174:                                              ; preds = %146
  %175 = load x86_fp80, ptr %12, align 16
  %176 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load x86_fp80, ptr %11, align 16
  %180 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load x86_fp80, ptr %12, align 16
  %183 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK00000000000000000000, x86_fp80 %182)
  store x86_fp80 %183, ptr %12, align 16
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load x86_fp80, ptr %10, align 16
  %187 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load x86_fp80, ptr %11, align 16
  %190 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK00000000000000000000, x86_fp80 %189)
  store x86_fp80 %190, ptr %11, align 16
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load x86_fp80, ptr %9, align 16
  %194 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load x86_fp80, ptr %10, align 16
  %197 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK00000000000000000000, x86_fp80 %196)
  store x86_fp80 %197, ptr %10, align 16
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %7, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load x86_fp80, ptr %9, align 16
  %202 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK00000000000000000000, x86_fp80 %201)
  store x86_fp80 %202, ptr %9, align 16
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %6, i32 0, i32 0
  %207 = load x86_fp80, ptr %12, align 16
  %208 = load x86_fp80, ptr %10, align 16
  %209 = fmul x86_fp80 %207, %208
  %210 = load x86_fp80, ptr %11, align 16
  %211 = load x86_fp80, ptr %9, align 16
  %212 = fmul x86_fp80 %210, %211
  %213 = fsub x86_fp80 %209, %212
  %214 = fmul x86_fp80 0xK7FFF8000000000000000, %213
  store x86_fp80 %214, ptr %206, align 16
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %6, i32 0, i32 1
  %216 = load x86_fp80, ptr %12, align 16
  %217 = load x86_fp80, ptr %9, align 16
  %218 = fmul x86_fp80 %216, %217
  %219 = load x86_fp80, ptr %11, align 16
  %220 = load x86_fp80, ptr %10, align 16
  %221 = fmul x86_fp80 %219, %220
  %222 = fadd x86_fp80 %218, %221
  %223 = fmul x86_fp80 0xK7FFF8000000000000000, %222
  store x86_fp80 %223, ptr %215, align 16
  br label %32

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %0) unnamed_addr #0 {
  %2 = fcmp une x86_fp80 %0, %0
  ret i1 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %0, x86_fp80 %1) unnamed_addr #0 {
  %3 = bitcast x86_fp80 %0 to i80
  %4 = and i80 %3, 604462909807314587353087
  %5 = bitcast x86_fp80 %1 to i80
  %6 = and i80 %5, -604462909807314587353088
  %7 = or i80 %4, %6
  %8 = bitcast i80 %7 to x86_fp80
  ret x86_fp80 %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__multc3(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f128)") %0, fp128 %1, fp128 %2, fp128 %3, fp128 %4) #0 {
  %6 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %7 = alloca i1, align 1
  %8 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %9 = alloca fp128, align 16
  %10 = alloca fp128, align 16
  %11 = alloca fp128, align 16
  %12 = alloca fp128, align 16
  store fp128 %1, ptr %12, align 16
  store fp128 %2, ptr %11, align 16
  store fp128 %3, ptr %10, align 16
  store fp128 %4, ptr %9, align 16
  %13 = load fp128, ptr %12, align 16
  %14 = load fp128, ptr %10, align 16
  %15 = call fp128 @__multf3(fp128 %13, fp128 %14)
  %16 = load fp128, ptr %11, align 16
  %17 = load fp128, ptr %9, align 16
  %18 = call fp128 @__multf3(fp128 %16, fp128 %17)
  %19 = load fp128, ptr %12, align 16
  %20 = load fp128, ptr %9, align 16
  %21 = call fp128 @__multf3(fp128 %19, fp128 %20)
  %22 = load fp128, ptr %11, align 16
  %23 = load fp128, ptr %10, align 16
  %24 = call fp128 @__multf3(fp128 %22, fp128 %23)
  %25 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 0
  %26 = call fp128 @__subtf3(fp128 %15, fp128 %18)
  store fp128 %26, ptr %25, align 16
  %27 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 1
  %28 = call fp128 @__addtf3(fp128 %21, fp128 %24)
  store fp128 %28, ptr %27, align 16
  %29 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 0
  %30 = load fp128, ptr %29, align 16
  %31 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %30)
  br i1 %31, label %37, label %41

32:                                               ; preds = %34, %205
  %33 = phi ptr [ %6, %205 ], [ %8, %34 ]
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %33, i64 32, i1 false)
  ret void

34:                                               ; preds = %47, %204
  br label %32

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %5
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 1
  %39 = load fp128, ptr %38, align 16
  %40 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %39)
  br label %35

41:                                               ; preds = %5
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %7, align 1
  %43 = load fp128, ptr %12, align 16
  %44 = bitcast fp128 %43 to i128
  %45 = and i128 %44, 170141183460469231731687303715884105727
  %46 = icmp eq i128 %45, 170135991163610696904058773219554885632
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %66, %92
  %49 = load fp128, ptr %10, align 16
  %50 = bitcast fp128 %49 to i128
  %51 = and i128 %50, 170141183460469231731687303715884105727
  %52 = icmp eq i128 %51, 170135991163610696904058773219554885632
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load fp128, ptr %11, align 16
  %58 = bitcast fp128 %57 to i128
  %59 = and i128 %58, 170141183460469231731687303715884105727
  %60 = icmp eq i128 %59, 170135991163610696904058773219554885632
  br label %53

61:                                               ; preds = %53
  %62 = load fp128, ptr %12, align 16
  %63 = bitcast fp128 %62 to i128
  %64 = and i128 %63, 170141183460469231731687303715884105727
  %65 = icmp eq i128 %64, 170135991163610696904058773219554885632
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi fp128 [ 0xL00000000000000003FFF000000000000, %75 ], [ 0xL00000000000000000000000000000000, %76 ]
  %69 = load fp128, ptr %12, align 16
  %70 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %68, fp128 %69)
  store fp128 %70, ptr %12, align 16
  %71 = load fp128, ptr %11, align 16
  %72 = bitcast fp128 %71 to i128
  %73 = and i128 %72, 170141183460469231731687303715884105727
  %74 = icmp eq i128 %73, 170135991163610696904058773219554885632
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi fp128 [ 0xL00000000000000003FFF000000000000, %83 ], [ 0xL00000000000000000000000000000000, %84 ]
  %79 = load fp128, ptr %11, align 16
  %80 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %78, fp128 %79)
  store fp128 %80, ptr %11, align 16
  %81 = load fp128, ptr %10, align 16
  %82 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load fp128, ptr %9, align 16
  %87 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load fp128, ptr %10, align 16
  %90 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000000000000000000, fp128 %89)
  store fp128 %90, ptr %10, align 16
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %7, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load fp128, ptr %9, align 16
  %95 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000000000000000000, fp128 %94)
  store fp128 %95, ptr %9, align 16
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %113, %139
  %98 = load i1, ptr %7, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load fp128, ptr %9, align 16
  %105 = bitcast fp128 %104 to i128
  %106 = and i128 %105, 170141183460469231731687303715884105727
  %107 = icmp eq i128 %106, 170135991163610696904058773219554885632
  br label %100

108:                                              ; preds = %100
  %109 = load fp128, ptr %10, align 16
  %110 = bitcast fp128 %109 to i128
  %111 = and i128 %110, 170141183460469231731687303715884105727
  %112 = icmp eq i128 %111, 170135991163610696904058773219554885632
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi fp128 [ 0xL00000000000000003FFF000000000000, %122 ], [ 0xL00000000000000000000000000000000, %123 ]
  %116 = load fp128, ptr %10, align 16
  %117 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %115, fp128 %116)
  store fp128 %117, ptr %10, align 16
  %118 = load fp128, ptr %9, align 16
  %119 = bitcast fp128 %118 to i128
  %120 = and i128 %119, 170141183460469231731687303715884105727
  %121 = icmp eq i128 %120, 170135991163610696904058773219554885632
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi fp128 [ 0xL00000000000000003FFF000000000000, %130 ], [ 0xL00000000000000000000000000000000, %131 ]
  %126 = load fp128, ptr %9, align 16
  %127 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %125, fp128 %126)
  store fp128 %127, ptr %9, align 16
  %128 = load fp128, ptr %12, align 16
  %129 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load fp128, ptr %11, align 16
  %134 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load fp128, ptr %12, align 16
  %137 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000000000000000000, fp128 %136)
  store fp128 %137, ptr %12, align 16
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %7, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load fp128, ptr %11, align 16
  %142 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000000000000000000, fp128 %141)
  store fp128 %142, ptr %11, align 16
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %177, %199
  %145 = load i1, ptr %7, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %152, %167
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast fp128 %15 to i128
  %150 = and i128 %149, 170141183460469231731687303715884105727
  %151 = icmp eq i128 %150, 170135991163610696904058773219554885632
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast fp128 %18 to i128
  %158 = and i128 %157, 170141183460469231731687303715884105727
  %159 = icmp eq i128 %158, 170135991163610696904058773219554885632
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast fp128 %21 to i128
  %165 = and i128 %164, 170141183460469231731687303715884105727
  %166 = icmp eq i128 %165, 170135991163610696904058773219554885632
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast fp128 %24 to i128
  %172 = and i128 %171, 170141183460469231731687303715884105727
  %173 = icmp eq i128 %172, 170135991163610696904058773219554885632
  br label %167

174:                                              ; preds = %146
  %175 = load fp128, ptr %12, align 16
  %176 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load fp128, ptr %11, align 16
  %180 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load fp128, ptr %12, align 16
  %183 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000000000000000000, fp128 %182)
  store fp128 %183, ptr %12, align 16
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load fp128, ptr %10, align 16
  %187 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load fp128, ptr %11, align 16
  %190 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000000000000000000, fp128 %189)
  store fp128 %190, ptr %11, align 16
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load fp128, ptr %9, align 16
  %194 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load fp128, ptr %10, align 16
  %197 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000000000000000000, fp128 %196)
  store fp128 %197, ptr %10, align 16
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %7, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load fp128, ptr %9, align 16
  %202 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000000000000000000, fp128 %201)
  store fp128 %202, ptr %9, align 16
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 0
  %207 = load fp128, ptr %12, align 16
  %208 = load fp128, ptr %10, align 16
  %209 = call fp128 @__multf3(fp128 %207, fp128 %208)
  %210 = load fp128, ptr %11, align 16
  %211 = load fp128, ptr %9, align 16
  %212 = call fp128 @__multf3(fp128 %210, fp128 %211)
  %213 = call fp128 @__subtf3(fp128 %209, fp128 %212)
  %214 = call fp128 @__multf3(fp128 0xL00000000000000007FFF000000000000, fp128 %213)
  store fp128 %214, ptr %206, align 16
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 1
  %216 = load fp128, ptr %12, align 16
  %217 = load fp128, ptr %9, align 16
  %218 = call fp128 @__multf3(fp128 %216, fp128 %217)
  %219 = load fp128, ptr %11, align 16
  %220 = load fp128, ptr %10, align 16
  %221 = call fp128 @__multf3(fp128 %219, fp128 %220)
  %222 = call fp128 @__addtf3(fp128 %218, fp128 %221)
  %223 = call fp128 @__multf3(fp128 0xL00000000000000007FFF000000000000, fp128 %222)
  store fp128 %223, ptr %215, align 16
  br label %32

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3718(fp128 %0) unnamed_addr #0 {
  %2 = call i32 @__netf2(fp128 %0, fp128 %0)
  %3 = icmp ne i32 %2, 0
  ret i1 %3
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %0, fp128 %1) unnamed_addr #0 {
  %3 = bitcast fp128 %0 to i128
  %4 = and i128 %3, 170141183460469231731687303715884105727
  %5 = bitcast fp128 %1 to i128
  %6 = and i128 %5, -170141183460469231731687303715884105728
  %7 = or i128 %4, %6
  %8 = bitcast i128 %7 to fp128
  ret fp128 %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__divhc3(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f16)") %0, half %1, half %2, half %3, half %4) #0 {
  %6 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %7 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %8 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %9 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %10 = alloca half, align 2
  %11 = alloca half, align 2
  store half %3, ptr %11, align 2
  store half %4, ptr %10, align 2
  %12 = load half, ptr %11, align 2
  %13 = call half @llvm.fabs.f16(half %12)
  %14 = load half, ptr %10, align 2
  %15 = call half @llvm.fabs.f16(half %14)
  %16 = call half @llvm.maxnum.f16(half %13, half %15)
  %17 = call fastcc i32 @math.ilogb.ilogb__anon_3741(half %16)
  %18 = icmp ne i32 %17, 2147483647
  br i1 %18, label %23, label %25

19:                                               ; preds = %80, %197, %151, %104
  %20 = phi ptr [ %8, %104 ], [ %7, %151 ], [ %6, %197 ], [ %9, %80 ]
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 %20, i64 4, i1 false)
  ret void

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %5
  %24 = icmp ne i32 %17, -2147483648
  br label %21

25:                                               ; preds = %5
  br label %21

26:                                               ; preds = %48, %57
  %27 = phi i32 [ %17, %57 ], [ 0, %48 ]
  %28 = load half, ptr %11, align 2
  %29 = load half, ptr %11, align 2
  %30 = fmul half %28, %29
  %31 = load half, ptr %10, align 2
  %32 = load half, ptr %10, align 2
  %33 = fmul half %31, %32
  %34 = fadd half %30, %33
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %9, i32 0, i32 0
  %36 = load half, ptr %11, align 2
  %37 = fmul half %1, %36
  %38 = load half, ptr %10, align 2
  %39 = fmul half %2, %38
  %40 = fadd half %37, %39
  %41 = fdiv half %40, %34
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load half, ptr %11, align 2
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %17)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc half @math.ldexp.ldexp__anon_3755(half %45, i32 %51)
  store half %52, ptr %11, align 2
  %53 = load half, ptr %10, align 2
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %17)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc half @math.ldexp.ldexp__anon_3755(half %53, i32 %58)
  store half %59, ptr %10, align 2
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc half @math.ldexp.ldexp__anon_3755(half %41, i32 %62)
  store half %63, ptr %35, align 2
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %9, i32 0, i32 1
  %65 = load half, ptr %11, align 2
  %66 = fmul half %2, %65
  %67 = load half, ptr %10, align 2
  %68 = fmul half %1, %67
  %69 = fsub half %66, %68
  %70 = fdiv half %69, %34
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc half @math.ldexp.ldexp__anon_3755(half %70, i32 %75)
  store half %76, ptr %64, align 2
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %9, i32 0, i32 0
  %78 = load half, ptr %77, align 2
  %79 = call fastcc i1 @math.isnan.isNan__anon_3694(half %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %90, %91
  br label %19

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %90

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %9, i32 0, i32 1
  %85 = load half, ptr %84, align 2
  %86 = call fastcc i1 @math.isnan.isNan__anon_3694(half %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = fcmp oeq half %34, 0xH0000
  br i1 %89, label %94, label %97

90:                                               ; preds = %81
  br label %80

91:                                               ; preds = %117
  br label %80

92:                                               ; preds = %97, %98
  %93 = phi i1 [ %99, %98 ], [ false, %97 ]
  br i1 %93, label %104, label %113

94:                                               ; preds = %88
  %95 = call fastcc i1 @math.isnan.isNan__anon_3694(half %1)
  %96 = xor i1 %95, true
  br i1 %96, label %100, label %101

97:                                               ; preds = %88
  br label %92

98:                                               ; preds = %101, %100
  %99 = phi i1 [ true, %100 ], [ %103, %101 ]
  br label %92

100:                                              ; preds = %94
  br label %98

101:                                              ; preds = %94
  %102 = call fastcc i1 @math.isnan.isNan__anon_3694(half %2)
  %103 = xor i1 %102, true
  br label %98

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 0
  %106 = load half, ptr %11, align 2
  %107 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH7C00, half %106)
  %108 = fmul half %107, %1
  store half %108, ptr %105, align 2
  %109 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 1
  %110 = load half, ptr %11, align 2
  %111 = call fastcc half @math.copysign.copysign__anon_3711(half 0xH7C00, half %110)
  %112 = fmul half %111, %2
  store half %112, ptr %109, align 2
  br label %19

113:                                              ; preds = %92
  %114 = bitcast half %1 to i16
  %115 = and i16 %114, 32767
  %116 = icmp eq i16 %115, 31744
  br i1 %116, label %120, label %121

117:                                              ; preds = %170
  br label %91

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %124, %121 ]
  br i1 %119, label %127, label %130

120:                                              ; preds = %113
  br label %118

121:                                              ; preds = %113
  %122 = bitcast half %2 to i16
  %123 = and i16 %122, 32767
  %124 = icmp eq i16 %123, 31744
  br label %118

125:                                              ; preds = %130, %127
  %126 = phi i1 [ %129, %127 ], [ false, %130 ]
  br i1 %126, label %133, label %136

127:                                              ; preds = %118
  %128 = load half, ptr %11, align 2
  %129 = call fastcc i1 @math.isfinite.isFinite__anon_3762(half %128)
  br label %125

130:                                              ; preds = %118
  br label %125

131:                                              ; preds = %136, %133
  %132 = phi i1 [ %135, %133 ], [ false, %136 ]
  br i1 %132, label %137, label %141

133:                                              ; preds = %125
  %134 = load half, ptr %10, align 2
  %135 = call fastcc i1 @math.isfinite.isFinite__anon_3762(half %134)
  br label %131

136:                                              ; preds = %125
  br label %131

137:                                              ; preds = %131
  %138 = bitcast half %1 to i16
  %139 = and i16 %138, 32767
  %140 = icmp eq i16 %139, 31744
  br i1 %140, label %149, label %150

141:                                              ; preds = %131
  %142 = icmp eq i32 %17, 2147483647
  br i1 %142, label %173, label %175

143:                                              ; preds = %150, %149
  %144 = phi half [ 0xH3C00, %149 ], [ 0xH0000, %150 ]
  %145 = call fastcc half @math.copysign.copysign__anon_3711(half %144, half %1)
  %146 = bitcast half %2 to i16
  %147 = and i16 %146, 32767
  %148 = icmp eq i16 %147, 31744
  br i1 %148, label %168, label %169

149:                                              ; preds = %137
  br label %143

150:                                              ; preds = %137
  br label %143

151:                                              ; preds = %169, %168
  %152 = phi half [ 0xH3C00, %168 ], [ 0xH0000, %169 ]
  %153 = call fastcc half @math.copysign.copysign__anon_3711(half %152, half %2)
  %154 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %7, i32 0, i32 0
  %155 = load half, ptr %11, align 2
  %156 = fmul half %145, %155
  %157 = load half, ptr %10, align 2
  %158 = fmul half %153, %157
  %159 = fsub half %156, %158
  %160 = fmul half 0xH7C00, %159
  store half %160, ptr %154, align 2
  %161 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %7, i32 0, i32 1
  %162 = load half, ptr %11, align 2
  %163 = fmul half %153, %162
  %164 = load half, ptr %10, align 2
  %165 = fmul half %145, %164
  %166 = fsub half %163, %165
  %167 = fmul half 0xH7C00, %166
  store half %167, ptr %161, align 2
  br label %19

168:                                              ; preds = %143
  br label %151

169:                                              ; preds = %143
  br label %151

170:                                              ; preds = %186
  br label %117

171:                                              ; preds = %175, %173
  %172 = phi i1 [ %174, %173 ], [ false, %175 ]
  br i1 %172, label %178, label %180

173:                                              ; preds = %141
  %174 = call fastcc i1 @math.isfinite.isFinite__anon_3762(half %1)
  br label %171

175:                                              ; preds = %141
  br label %171

176:                                              ; preds = %180, %178
  %177 = phi i1 [ %179, %178 ], [ false, %180 ]
  br i1 %177, label %181, label %186

178:                                              ; preds = %171
  %179 = call fastcc i1 @math.isfinite.isFinite__anon_3762(half %2)
  br label %176

180:                                              ; preds = %171
  br label %176

181:                                              ; preds = %176
  %182 = load half, ptr %11, align 2
  %183 = bitcast half %182 to i16
  %184 = and i16 %183, 32767
  %185 = icmp eq i16 %184, 31744
  br i1 %185, label %195, label %196

186:                                              ; preds = %176
  br label %170

187:                                              ; preds = %196, %195
  %188 = phi half [ 0xH3C00, %195 ], [ 0xH0000, %196 ]
  %189 = load half, ptr %11, align 2
  %190 = call fastcc half @math.copysign.copysign__anon_3711(half %188, half %189)
  %191 = load half, ptr %10, align 2
  %192 = bitcast half %191 to i16
  %193 = and i16 %192, 32767
  %194 = icmp eq i16 %193, 31744
  br i1 %194, label %211, label %212

195:                                              ; preds = %181
  br label %187

196:                                              ; preds = %181
  br label %187

197:                                              ; preds = %212, %211
  %198 = phi half [ 0xH3C00, %211 ], [ 0xH0000, %212 ]
  %199 = load half, ptr %10, align 2
  %200 = call fastcc half @math.copysign.copysign__anon_3711(half %198, half %199)
  %201 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %6, i32 0, i32 0
  %202 = fmul half %1, %190
  %203 = fmul half %2, %200
  %204 = fadd half %202, %203
  %205 = fmul half 0xH0000, %204
  store half %205, ptr %201, align 2
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %6, i32 0, i32 1
  %207 = fmul half %2, %190
  %208 = fmul half %1, %200
  %209 = fsub half %207, %208
  %210 = fmul half 0xH0000, %209
  store half %210, ptr %206, align 2
  br label %19

211:                                              ; preds = %187
  br label %197

212:                                              ; preds = %187
  br label %197
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare half @llvm.fabs.f16(half) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare half @llvm.maxnum.f16(half, half) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3741(half %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_4061(half %0)
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc half @math.ldexp.ldexp__anon_3755(half %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = bitcast half %0 to i16
  %7 = and i16 %6, -32768
  %8 = call fastcc i1 @math.isnan.isNan__anon_3694(half %0)
  br i1 %8, label %17, label %18

9:                                                ; preds = %22
  %10 = shl i16 %6, 1
  %11 = lshr i16 %10, 11
  %12 = zext i16 %11 to i32
  store i32 %12, ptr %5, align 4
  %13 = load i32, ptr %5, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %25, label %33

15:                                               ; preds = %18, %17
  %16 = phi i1 [ true, %17 ], [ %20, %18 ]
  br i1 %16, label %21, label %22

17:                                               ; preds = %2
  br label %15

18:                                               ; preds = %2
  %19 = call fastcc i1 @math.isfinite.isFinite__anon_3762(half %0)
  %20 = xor i1 %19, true
  br label %15

21:                                               ; preds = %15
  ret half %0

22:                                               ; preds = %15
  br label %9

23:                                               ; preds = %33, %40
  %24 = icmp sge i32 %1, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i32, ptr %5, align 4
  %27 = shl i16 %6, 1
  %28 = call i16 @llvm.ctlz.i16(i16 %27, i1 false)
  %29 = trunc i16 %28 to i5
  %30 = zext i5 %29 to i32
  %31 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 5, i32 %30)
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %34, label %35

33:                                               ; preds = %9
  br label %23

34:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %25
  %36 = extractvalue { i32, i1 } %31, 0
  %37 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %26, i32 %36)
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

40:                                               ; preds = %35
  %41 = extractvalue { i32, i1 } %37, 0
  store i32 %41, ptr %5, align 4
  br label %23

42:                                               ; preds = %23
  %43 = load i32, ptr %5, align 4
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 30, i32 %43)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %53, label %54

46:                                               ; preds = %23
  %47 = load i32, ptr %5, align 4
  %48 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %47)
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %133, label %134

50:                                               ; preds = %64
  %51 = sub i32 65535, %1
  %52 = icmp ule i32 %51, 65535
  br i1 %52, label %124, label %125

53:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %42
  %55 = extractvalue { i32, i1 } %44, 0
  %56 = icmp sgt i32 %1, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %54
  %58 = or i16 31744, %7
  %59 = bitcast i16 %58 to half
  ret half %59

60:                                               ; preds = %54
  %61 = load i32, ptr %5, align 4
  %62 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %61, i32 %1)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %65, label %66

64:                                               ; preds = %83
  br label %50

65:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %60
  %67 = extractvalue { i32, i1 } %62, 0
  %68 = icmp sle i32 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %66
  %70 = sub i32 15, %1
  %71 = icmp ule i32 %70, 15
  br i1 %71, label %81, label %82

72:                                               ; preds = %66
  %73 = load i32, ptr %5, align 4
  %74 = icmp sle i32 %73, 0
  br i1 %74, label %84, label %88

75:                                               ; preds = %81
  %76 = trunc i32 %1 to i4
  %77 = zext i4 %76 to i16
  %78 = shl i16 %6, %77
  %79 = or i16 %78, %7
  %80 = bitcast i16 %79 to half
  ret half %80

81:                                               ; preds = %69
  br label %75

82:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

83:                                               ; preds = %88
  br label %64

84:                                               ; preds = %72
  %85 = load i32, ptr %5, align 4
  %86 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %85)
  %87 = extractvalue { i32, i1 } %86, 1
  br i1 %87, label %89, label %90

88:                                               ; preds = %72
  br label %83

89:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %84
  %91 = extractvalue { i32, i1 } %86, 0
  %92 = sub i32 65535, %91
  %93 = icmp ule i32 %92, 65535
  br i1 %93, label %101, label %102

94:                                               ; preds = %101
  %95 = trunc i32 %91 to i16
  %96 = shl i16 %95, 10
  store i16 %96, ptr %4, align 2
  %97 = load i16, ptr %4, align 2
  %98 = load i32, ptr %5, align 4
  %99 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %98)
  %100 = extractvalue { i32, i1 } %99, 1
  br i1 %100, label %103, label %104

101:                                              ; preds = %90
  br label %94

102:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

103:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %94
  %105 = extractvalue { i32, i1 } %99, 0
  %106 = sub i32 15, %105
  %107 = icmp ule i32 %106, 15
  br i1 %107, label %117, label %118

108:                                              ; preds = %117
  %109 = trunc i32 %105 to i4
  %110 = zext i4 %109 to i16
  %111 = shl i16 %6, %110
  %112 = and i16 %111, 1023
  %113 = or i16 %97, %112
  store i16 %113, ptr %4, align 2
  %114 = load i16, ptr %4, align 2
  %115 = or i16 %114, %7
  %116 = bitcast i16 %115 to half
  ret half %116

117:                                              ; preds = %104
  br label %108

118:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

119:                                              ; preds = %124
  %120 = trunc i32 %1 to i16
  %121 = shl i16 %120, 10
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %6, i16 %121)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %126, label %127

124:                                              ; preds = %50
  br label %119

125:                                              ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

126:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

127:                                              ; preds = %119
  %128 = extractvalue { i16, i1 } %122, 0
  %129 = bitcast i16 %128 to half
  ret half %129

130:                                              ; preds = %141
  %131 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %132 = extractvalue { i32, i1 } %131, 1
  br i1 %132, label %220, label %221

133:                                              ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

134:                                              ; preds = %46
  %135 = extractvalue { i32, i1 } %48, 0
  %136 = icmp sle i32 %1, %135
  br i1 %136, label %137, label %141

137:                                              ; preds = %134
  %138 = load i32, ptr %5, align 4
  %139 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 10, i32 %138)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %145, label %146

141:                                              ; preds = %134
  br label %130

142:                                              ; preds = %156
  %143 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %144 = extractvalue { i32, i1 } %143, 1
  br i1 %144, label %157, label %158

145:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

146:                                              ; preds = %137
  %147 = extractvalue { i32, i1 } %139, 0
  %148 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %147)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %150, label %151

150:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

151:                                              ; preds = %146
  %152 = extractvalue { i32, i1 } %148, 0
  %153 = icmp slt i32 %1, %152
  br i1 %153, label %154, label %156

154:                                              ; preds = %151
  %155 = bitcast i16 %7 to half
  ret half %155

156:                                              ; preds = %151
  br label %142

157:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

158:                                              ; preds = %142
  %159 = extractvalue { i32, i1 } %143, 0
  %160 = load i32, ptr %5, align 4
  %161 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %160, i32 %1)
  %162 = extractvalue { i32, i1 } %161, 1
  br i1 %162, label %163, label %164

163:                                              ; preds = %158
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

164:                                              ; preds = %158
  %165 = extractvalue { i32, i1 } %161, 0
  %166 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %165)
  %167 = extractvalue { i32, i1 } %166, 1
  br i1 %167, label %168, label %169

168:                                              ; preds = %164
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

169:                                              ; preds = %164
  %170 = extractvalue { i32, i1 } %166, 0
  %171 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %170, i32 1)
  %172 = extractvalue { i32, i1 } %171, 1
  br i1 %172, label %173, label %174

173:                                              ; preds = %169
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

174:                                              ; preds = %169
  %175 = extractvalue { i32, i1 } %171, 0
  %176 = call i32 @llvm.smin.i32(i32 %159, i32 %175)
  %177 = sub i32 15, %176
  %178 = icmp ule i32 %177, 15
  br i1 %178, label %185, label %186

179:                                              ; preds = %185
  %180 = trunc i32 %176 to i4
  %181 = call i16 @llvm.cttz.i16(i16 %6, i1 false)
  %182 = trunc i16 %181 to i5
  %183 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 %180, i4 1)
  %184 = extractvalue { i4, i1 } %183, 1
  br i1 %184, label %187, label %188

185:                                              ; preds = %174
  br label %179

186:                                              ; preds = %174
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

187:                                              ; preds = %179
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

188:                                              ; preds = %179
  %189 = extractvalue { i4, i1 } %183, 0
  %190 = zext i4 %189 to i5
  %191 = icmp eq i5 %182, %190
  %192 = and i16 %6, 1023
  store i16 %192, ptr %3, align 2
  %193 = load i16, ptr %3, align 2
  %194 = load i32, ptr %5, align 4
  %195 = icmp sgt i32 %194, 0
  %196 = zext i1 %195 to i16
  %197 = shl i16 %196, 10
  %198 = or i16 %193, %197
  store i16 %198, ptr %3, align 2
  %199 = load i16, ptr %3, align 2
  %200 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 %180, i4 1)
  %201 = extractvalue { i4, i1 } %200, 1
  br i1 %201, label %202, label %203

202:                                              ; preds = %188
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

203:                                              ; preds = %188
  %204 = extractvalue { i4, i1 } %200, 0
  %205 = zext i4 %204 to i16
  %206 = lshr i16 %199, %205
  store i16 %206, ptr %3, align 2
  %207 = load i16, ptr %3, align 2
  %208 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %207, i16 1)
  %209 = extractvalue { i16, i1 } %208, 1
  br i1 %209, label %210, label %211

210:                                              ; preds = %203
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

211:                                              ; preds = %203
  %212 = extractvalue { i16, i1 } %208, 0
  %213 = lshr i16 %212, 1
  %214 = zext i1 %191 to i16
  %215 = xor i16 %214, -1
  %216 = and i16 %213, %215
  store i16 %216, ptr %3, align 2
  %217 = load i16, ptr %3, align 2
  %218 = or i16 %217, %7
  %219 = bitcast i16 %218 to half
  ret half %219

220:                                              ; preds = %130
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

221:                                              ; preds = %130
  %222 = extractvalue { i32, i1 } %131, 0
  %223 = sub i32 65535, %222
  %224 = icmp ule i32 %223, 65535
  br i1 %224, label %230, label %231

225:                                              ; preds = %230
  %226 = trunc i32 %222 to i16
  %227 = shl i16 %226, 10
  %228 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 %6, i16 %227)
  %229 = extractvalue { i16, i1 } %228, 1
  br i1 %229, label %232, label %233

230:                                              ; preds = %221
  br label %225

231:                                              ; preds = %221
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

232:                                              ; preds = %225
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

233:                                              ; preds = %225
  %234 = extractvalue { i16, i1 } %228, 0
  %235 = bitcast i16 %234 to half
  ret half %235
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3762(half %0) unnamed_addr #0 {
  %2 = bitcast half %0 to i16
  %3 = and i16 %2, 32767
  %4 = icmp ult i16 %3, 31744
  ret i1 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local { <2 x float> } @__divsc3(float %0, float %1, float %2, float %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %6 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %7 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %8 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  store float %2, ptr %10, align 4
  store float %3, ptr %9, align 4
  %11 = load float, ptr %10, align 4
  %12 = call float @llvm.fabs.f32(float %11)
  %13 = load float, ptr %9, align 4
  %14 = call float @llvm.fabs.f32(float %13)
  %15 = call float @llvm.maxnum.f32(float %12, float %14)
  %16 = call fastcc i32 @math.ilogb.ilogb__anon_3763(float %15)
  %17 = icmp ne i32 %16, 2147483647
  br i1 %17, label %23, label %25

18:                                               ; preds = %80, %197, %151, %104
  %19 = phi ptr [ %7, %104 ], [ %6, %151 ], [ %5, %197 ], [ %8, %80 ]
  %20 = load { <2 x float> }, ptr %19, align 4
  ret { <2 x float> } %20

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %4
  %24 = icmp ne i32 %16, -2147483648
  br label %21

25:                                               ; preds = %4
  br label %21

26:                                               ; preds = %48, %57
  %27 = phi i32 [ %16, %57 ], [ 0, %48 ]
  %28 = load float, ptr %10, align 4
  %29 = load float, ptr %10, align 4
  %30 = fmul float %28, %29
  %31 = load float, ptr %9, align 4
  %32 = load float, ptr %9, align 4
  %33 = fmul float %31, %32
  %34 = fadd float %30, %33
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %8, i32 0, i32 0
  %36 = load float, ptr %10, align 4
  %37 = fmul float %0, %36
  %38 = load float, ptr %9, align 4
  %39 = fmul float %1, %38
  %40 = fadd float %37, %39
  %41 = fdiv float %40, %34
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load float, ptr %10, align 4
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc float @math.ldexp.ldexp__anon_3764(float %45, i32 %51)
  store float %52, ptr %10, align 4
  %53 = load float, ptr %9, align 4
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc float @math.ldexp.ldexp__anon_3764(float %53, i32 %58)
  store float %59, ptr %9, align 4
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc float @math.ldexp.ldexp__anon_3764(float %41, i32 %62)
  store float %63, ptr %35, align 4
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %8, i32 0, i32 1
  %65 = load float, ptr %10, align 4
  %66 = fmul float %1, %65
  %67 = load float, ptr %9, align 4
  %68 = fmul float %0, %67
  %69 = fsub float %66, %68
  %70 = fdiv float %69, %34
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc float @math.ldexp.ldexp__anon_3764(float %70, i32 %75)
  store float %76, ptr %64, align 4
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %8, i32 0, i32 0
  %78 = load float, ptr %77, align 4
  %79 = call fastcc i1 @math.isnan.isNan__anon_3712(float %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %90, %91
  br label %18

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %90

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %8, i32 0, i32 1
  %85 = load float, ptr %84, align 4
  %86 = call fastcc i1 @math.isnan.isNan__anon_3712(float %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = fcmp oeq float %34, 0.000000e+00
  br i1 %89, label %94, label %97

90:                                               ; preds = %81
  br label %80

91:                                               ; preds = %117
  br label %80

92:                                               ; preds = %97, %98
  %93 = phi i1 [ %99, %98 ], [ false, %97 ]
  br i1 %93, label %104, label %113

94:                                               ; preds = %88
  %95 = call fastcc i1 @math.isnan.isNan__anon_3712(float %0)
  %96 = xor i1 %95, true
  br i1 %96, label %100, label %101

97:                                               ; preds = %88
  br label %92

98:                                               ; preds = %101, %100
  %99 = phi i1 [ true, %100 ], [ %103, %101 ]
  br label %92

100:                                              ; preds = %94
  br label %98

101:                                              ; preds = %94
  %102 = call fastcc i1 @math.isnan.isNan__anon_3712(float %1)
  %103 = xor i1 %102, true
  br label %98

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 0
  %106 = load float, ptr %10, align 4
  %107 = call fastcc float @math.copysign.copysign__anon_3713(float 0x7FF0000000000000, float %106)
  %108 = fmul float %107, %0
  store float %108, ptr %105, align 4
  %109 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 1
  %110 = load float, ptr %10, align 4
  %111 = call fastcc float @math.copysign.copysign__anon_3713(float 0x7FF0000000000000, float %110)
  %112 = fmul float %111, %1
  store float %112, ptr %109, align 4
  br label %18

113:                                              ; preds = %92
  %114 = bitcast float %0 to i32
  %115 = and i32 %114, 2147483647
  %116 = icmp eq i32 %115, 2139095040
  br i1 %116, label %120, label %121

117:                                              ; preds = %170
  br label %91

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %124, %121 ]
  br i1 %119, label %127, label %130

120:                                              ; preds = %113
  br label %118

121:                                              ; preds = %113
  %122 = bitcast float %1 to i32
  %123 = and i32 %122, 2147483647
  %124 = icmp eq i32 %123, 2139095040
  br label %118

125:                                              ; preds = %130, %127
  %126 = phi i1 [ %129, %127 ], [ false, %130 ]
  br i1 %126, label %133, label %136

127:                                              ; preds = %118
  %128 = load float, ptr %10, align 4
  %129 = call fastcc i1 @math.isfinite.isFinite__anon_3765(float %128)
  br label %125

130:                                              ; preds = %118
  br label %125

131:                                              ; preds = %136, %133
  %132 = phi i1 [ %135, %133 ], [ false, %136 ]
  br i1 %132, label %137, label %141

133:                                              ; preds = %125
  %134 = load float, ptr %9, align 4
  %135 = call fastcc i1 @math.isfinite.isFinite__anon_3765(float %134)
  br label %131

136:                                              ; preds = %125
  br label %131

137:                                              ; preds = %131
  %138 = bitcast float %0 to i32
  %139 = and i32 %138, 2147483647
  %140 = icmp eq i32 %139, 2139095040
  br i1 %140, label %149, label %150

141:                                              ; preds = %131
  %142 = icmp eq i32 %16, 2147483647
  br i1 %142, label %173, label %175

143:                                              ; preds = %150, %149
  %144 = phi float [ 1.000000e+00, %149 ], [ 0.000000e+00, %150 ]
  %145 = call fastcc float @math.copysign.copysign__anon_3713(float %144, float %0)
  %146 = bitcast float %1 to i32
  %147 = and i32 %146, 2147483647
  %148 = icmp eq i32 %147, 2139095040
  br i1 %148, label %168, label %169

149:                                              ; preds = %137
  br label %143

150:                                              ; preds = %137
  br label %143

151:                                              ; preds = %169, %168
  %152 = phi float [ 1.000000e+00, %168 ], [ 0.000000e+00, %169 ]
  %153 = call fastcc float @math.copysign.copysign__anon_3713(float %152, float %1)
  %154 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %6, i32 0, i32 0
  %155 = load float, ptr %10, align 4
  %156 = fmul float %145, %155
  %157 = load float, ptr %9, align 4
  %158 = fmul float %153, %157
  %159 = fsub float %156, %158
  %160 = fmul float 0x7FF0000000000000, %159
  store float %160, ptr %154, align 4
  %161 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %6, i32 0, i32 1
  %162 = load float, ptr %10, align 4
  %163 = fmul float %153, %162
  %164 = load float, ptr %9, align 4
  %165 = fmul float %145, %164
  %166 = fsub float %163, %165
  %167 = fmul float 0x7FF0000000000000, %166
  store float %167, ptr %161, align 4
  br label %18

168:                                              ; preds = %143
  br label %151

169:                                              ; preds = %143
  br label %151

170:                                              ; preds = %186
  br label %117

171:                                              ; preds = %175, %173
  %172 = phi i1 [ %174, %173 ], [ false, %175 ]
  br i1 %172, label %178, label %180

173:                                              ; preds = %141
  %174 = call fastcc i1 @math.isfinite.isFinite__anon_3765(float %0)
  br label %171

175:                                              ; preds = %141
  br label %171

176:                                              ; preds = %180, %178
  %177 = phi i1 [ %179, %178 ], [ false, %180 ]
  br i1 %177, label %181, label %186

178:                                              ; preds = %171
  %179 = call fastcc i1 @math.isfinite.isFinite__anon_3765(float %1)
  br label %176

180:                                              ; preds = %171
  br label %176

181:                                              ; preds = %176
  %182 = load float, ptr %10, align 4
  %183 = bitcast float %182 to i32
  %184 = and i32 %183, 2147483647
  %185 = icmp eq i32 %184, 2139095040
  br i1 %185, label %195, label %196

186:                                              ; preds = %176
  br label %170

187:                                              ; preds = %196, %195
  %188 = phi float [ 1.000000e+00, %195 ], [ 0.000000e+00, %196 ]
  %189 = load float, ptr %10, align 4
  %190 = call fastcc float @math.copysign.copysign__anon_3713(float %188, float %189)
  %191 = load float, ptr %9, align 4
  %192 = bitcast float %191 to i32
  %193 = and i32 %192, 2147483647
  %194 = icmp eq i32 %193, 2139095040
  br i1 %194, label %211, label %212

195:                                              ; preds = %181
  br label %187

196:                                              ; preds = %181
  br label %187

197:                                              ; preds = %212, %211
  %198 = phi float [ 1.000000e+00, %211 ], [ 0.000000e+00, %212 ]
  %199 = load float, ptr %9, align 4
  %200 = call fastcc float @math.copysign.copysign__anon_3713(float %198, float %199)
  %201 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %5, i32 0, i32 0
  %202 = fmul float %0, %190
  %203 = fmul float %1, %200
  %204 = fadd float %202, %203
  %205 = fmul float 0.000000e+00, %204
  store float %205, ptr %201, align 4
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %5, i32 0, i32 1
  %207 = fmul float %1, %190
  %208 = fmul float %0, %200
  %209 = fsub float %207, %208
  %210 = fmul float 0.000000e+00, %209
  store float %210, ptr %206, align 4
  br label %18

211:                                              ; preds = %187
  br label %197

212:                                              ; preds = %187
  br label %197
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3763(float %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_4062(float %0)
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc float @math.ldexp.ldexp__anon_3764(float %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  %7 = and i32 %6, -2147483648
  %8 = call fastcc i1 @math.isnan.isNan__anon_3712(float %0)
  br i1 %8, label %16, label %17

9:                                                ; preds = %21
  %10 = shl i32 %6, 1
  %11 = lshr i32 %10, 24
  %12 = sub i32 2147483647, %11
  %13 = icmp ule i32 %12, 2147483647
  br i1 %13, label %25, label %26

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %19, %17 ]
  br i1 %15, label %20, label %21

16:                                               ; preds = %2
  br label %14

17:                                               ; preds = %2
  %18 = call fastcc i1 @math.isfinite.isFinite__anon_3765(float %0)
  %19 = xor i1 %18, true
  br label %14

20:                                               ; preds = %14
  ret float %0

21:                                               ; preds = %14
  br label %9

22:                                               ; preds = %25
  store i32 %11, ptr %5, align 4
  %23 = load i32, ptr %5, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %37

25:                                               ; preds = %9
  br label %22

26:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

27:                                               ; preds = %37, %44
  %28 = icmp sge i32 %1, 0
  br i1 %28, label %46, label %50

29:                                               ; preds = %22
  %30 = load i32, ptr %5, align 4
  %31 = shl i32 %6, 1
  %32 = call i32 @llvm.ctlz.i32(i32 %31, i1 false)
  %33 = trunc i32 %32 to i6
  %34 = zext i6 %33 to i32
  %35 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 8, i32 %34)
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %38, label %39

37:                                               ; preds = %22
  br label %27

38:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

39:                                               ; preds = %29
  %40 = extractvalue { i32, i1 } %35, 0
  %41 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %40)
  %42 = extractvalue { i32, i1 } %41, 1
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %39
  %45 = extractvalue { i32, i1 } %41, 0
  store i32 %45, ptr %5, align 4
  br label %27

46:                                               ; preds = %27
  %47 = load i32, ptr %5, align 4
  %48 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 254, i32 %47)
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %56, label %57

50:                                               ; preds = %27
  %51 = load i32, ptr %5, align 4
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %51)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %133, label %134

54:                                               ; preds = %67
  %55 = icmp sge i32 %1, 0
  br i1 %55, label %124, label %125

56:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %46
  %58 = extractvalue { i32, i1 } %48, 0
  %59 = icmp sgt i32 %1, %58
  br i1 %59, label %60, label %63

60:                                               ; preds = %57
  %61 = or i32 2139095040, %7
  %62 = bitcast i32 %61 to float
  ret float %62

63:                                               ; preds = %57
  %64 = load i32, ptr %5, align 4
  %65 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %64, i32 %1)
  %66 = extractvalue { i32, i1 } %65, 1
  br i1 %66, label %68, label %69

67:                                               ; preds = %86
  br label %54

68:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %63
  %70 = extractvalue { i32, i1 } %65, 0
  %71 = icmp sle i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %69
  %73 = sub i32 31, %1
  %74 = icmp ule i32 %73, 31
  br i1 %74, label %84, label %85

75:                                               ; preds = %69
  %76 = load i32, ptr %5, align 4
  %77 = icmp sle i32 %76, 0
  br i1 %77, label %87, label %91

78:                                               ; preds = %84
  %79 = trunc i32 %1 to i5
  %80 = zext i5 %79 to i32
  %81 = shl i32 %6, %80
  %82 = or i32 %81, %7
  %83 = bitcast i32 %82 to float
  ret float %83

84:                                               ; preds = %72
  br label %78

85:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

86:                                               ; preds = %91
  br label %67

87:                                               ; preds = %75
  %88 = load i32, ptr %5, align 4
  %89 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %88)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %92, label %93

91:                                               ; preds = %75
  br label %86

92:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %87
  %94 = extractvalue { i32, i1 } %89, 0
  %95 = icmp sge i32 %94, 0
  br i1 %95, label %102, label %103

96:                                               ; preds = %102
  %97 = shl i32 %94, 23
  store i32 %97, ptr %4, align 4
  %98 = load i32, ptr %4, align 4
  %99 = load i32, ptr %5, align 4
  %100 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %99)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %104, label %105

102:                                              ; preds = %93
  br label %96

103:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

104:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %96
  %106 = extractvalue { i32, i1 } %100, 0
  %107 = sub i32 31, %106
  %108 = icmp ule i32 %107, 31
  br i1 %108, label %118, label %119

109:                                              ; preds = %118
  %110 = trunc i32 %106 to i5
  %111 = zext i5 %110 to i32
  %112 = shl i32 %6, %111
  %113 = and i32 %112, 8388607
  %114 = or i32 %98, %113
  store i32 %114, ptr %4, align 4
  %115 = load i32, ptr %4, align 4
  %116 = or i32 %115, %7
  %117 = bitcast i32 %116 to float
  ret float %117

118:                                              ; preds = %105
  br label %109

119:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

120:                                              ; preds = %124
  %121 = shl i32 %1, 23
  %122 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %6, i32 %121)
  %123 = extractvalue { i32, i1 } %122, 1
  br i1 %123, label %126, label %127

124:                                              ; preds = %54
  br label %120

125:                                              ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

126:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

127:                                              ; preds = %120
  %128 = extractvalue { i32, i1 } %122, 0
  %129 = bitcast i32 %128 to float
  ret float %129

130:                                              ; preds = %141
  %131 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %132 = extractvalue { i32, i1 } %131, 1
  br i1 %132, label %220, label %221

133:                                              ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

134:                                              ; preds = %50
  %135 = extractvalue { i32, i1 } %52, 0
  %136 = icmp sle i32 %1, %135
  br i1 %136, label %137, label %141

137:                                              ; preds = %134
  %138 = load i32, ptr %5, align 4
  %139 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 23, i32 %138)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %145, label %146

141:                                              ; preds = %134
  br label %130

142:                                              ; preds = %156
  %143 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %144 = extractvalue { i32, i1 } %143, 1
  br i1 %144, label %157, label %158

145:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

146:                                              ; preds = %137
  %147 = extractvalue { i32, i1 } %139, 0
  %148 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %147)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %150, label %151

150:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

151:                                              ; preds = %146
  %152 = extractvalue { i32, i1 } %148, 0
  %153 = icmp slt i32 %1, %152
  br i1 %153, label %154, label %156

154:                                              ; preds = %151
  %155 = bitcast i32 %7 to float
  ret float %155

156:                                              ; preds = %151
  br label %142

157:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

158:                                              ; preds = %142
  %159 = extractvalue { i32, i1 } %143, 0
  %160 = load i32, ptr %5, align 4
  %161 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %160, i32 %1)
  %162 = extractvalue { i32, i1 } %161, 1
  br i1 %162, label %163, label %164

163:                                              ; preds = %158
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

164:                                              ; preds = %158
  %165 = extractvalue { i32, i1 } %161, 0
  %166 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %165)
  %167 = extractvalue { i32, i1 } %166, 1
  br i1 %167, label %168, label %169

168:                                              ; preds = %164
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

169:                                              ; preds = %164
  %170 = extractvalue { i32, i1 } %166, 0
  %171 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %170, i32 1)
  %172 = extractvalue { i32, i1 } %171, 1
  br i1 %172, label %173, label %174

173:                                              ; preds = %169
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

174:                                              ; preds = %169
  %175 = extractvalue { i32, i1 } %171, 0
  %176 = call i32 @llvm.smin.i32(i32 %159, i32 %175)
  %177 = sub i32 31, %176
  %178 = icmp ule i32 %177, 31
  br i1 %178, label %185, label %186

179:                                              ; preds = %185
  %180 = trunc i32 %176 to i5
  %181 = call i32 @llvm.cttz.i32(i32 %6, i1 false)
  %182 = trunc i32 %181 to i6
  %183 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %180, i5 1)
  %184 = extractvalue { i5, i1 } %183, 1
  br i1 %184, label %187, label %188

185:                                              ; preds = %174
  br label %179

186:                                              ; preds = %174
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

187:                                              ; preds = %179
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

188:                                              ; preds = %179
  %189 = extractvalue { i5, i1 } %183, 0
  %190 = zext i5 %189 to i6
  %191 = icmp eq i6 %182, %190
  %192 = and i32 %6, 8388607
  store i32 %192, ptr %3, align 4
  %193 = load i32, ptr %3, align 4
  %194 = load i32, ptr %5, align 4
  %195 = icmp sgt i32 %194, 0
  %196 = zext i1 %195 to i32
  %197 = shl i32 %196, 23
  %198 = or i32 %193, %197
  store i32 %198, ptr %3, align 4
  %199 = load i32, ptr %3, align 4
  %200 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %180, i5 1)
  %201 = extractvalue { i5, i1 } %200, 1
  br i1 %201, label %202, label %203

202:                                              ; preds = %188
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

203:                                              ; preds = %188
  %204 = extractvalue { i5, i1 } %200, 0
  %205 = zext i5 %204 to i32
  %206 = lshr i32 %199, %205
  store i32 %206, ptr %3, align 4
  %207 = load i32, ptr %3, align 4
  %208 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %207, i32 1)
  %209 = extractvalue { i32, i1 } %208, 1
  br i1 %209, label %210, label %211

210:                                              ; preds = %203
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

211:                                              ; preds = %203
  %212 = extractvalue { i32, i1 } %208, 0
  %213 = lshr i32 %212, 1
  %214 = zext i1 %191 to i32
  %215 = xor i32 %214, -1
  %216 = and i32 %213, %215
  store i32 %216, ptr %3, align 4
  %217 = load i32, ptr %3, align 4
  %218 = or i32 %217, %7
  %219 = bitcast i32 %218 to float
  ret float %219

220:                                              ; preds = %130
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

221:                                              ; preds = %130
  %222 = extractvalue { i32, i1 } %131, 0
  %223 = icmp sge i32 %222, 0
  br i1 %223, label %228, label %229

224:                                              ; preds = %228
  %225 = shl i32 %222, 23
  %226 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %6, i32 %225)
  %227 = extractvalue { i32, i1 } %226, 1
  br i1 %227, label %230, label %231

228:                                              ; preds = %221
  br label %224

229:                                              ; preds = %221
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

230:                                              ; preds = %224
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

231:                                              ; preds = %224
  %232 = extractvalue { i32, i1 } %226, 0
  %233 = bitcast i32 %232 to float
  ret float %233
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3765(float %0) unnamed_addr #0 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = icmp ult i32 %3, 2139095040
  ret i1 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local { double, double } @__divdc3(double %0, double %1, double %2, double %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %6 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %7 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %8 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  store double %2, ptr %10, align 8
  store double %3, ptr %9, align 8
  %11 = load double, ptr %10, align 8
  %12 = call double @llvm.fabs.f64(double %11)
  %13 = load double, ptr %9, align 8
  %14 = call double @llvm.fabs.f64(double %13)
  %15 = call double @llvm.maxnum.f64(double %12, double %14)
  %16 = call fastcc i32 @math.ilogb.ilogb__anon_3766(double %15)
  %17 = icmp ne i32 %16, 2147483647
  br i1 %17, label %23, label %25

18:                                               ; preds = %80, %197, %151, %104
  %19 = phi ptr [ %7, %104 ], [ %6, %151 ], [ %5, %197 ], [ %8, %80 ]
  %20 = load { double, double }, ptr %19, align 8
  ret { double, double } %20

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %4
  %24 = icmp ne i32 %16, -2147483648
  br label %21

25:                                               ; preds = %4
  br label %21

26:                                               ; preds = %48, %57
  %27 = phi i32 [ %16, %57 ], [ 0, %48 ]
  %28 = load double, ptr %10, align 8
  %29 = load double, ptr %10, align 8
  %30 = fmul double %28, %29
  %31 = load double, ptr %9, align 8
  %32 = load double, ptr %9, align 8
  %33 = fmul double %31, %32
  %34 = fadd double %30, %33
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %8, i32 0, i32 0
  %36 = load double, ptr %10, align 8
  %37 = fmul double %0, %36
  %38 = load double, ptr %9, align 8
  %39 = fmul double %1, %38
  %40 = fadd double %37, %39
  %41 = fdiv double %40, %34
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load double, ptr %10, align 8
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc double @math.ldexp.ldexp__anon_3767(double %45, i32 %51)
  store double %52, ptr %10, align 8
  %53 = load double, ptr %9, align 8
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc double @math.ldexp.ldexp__anon_3767(double %53, i32 %58)
  store double %59, ptr %9, align 8
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc double @math.ldexp.ldexp__anon_3767(double %41, i32 %62)
  store double %63, ptr %35, align 8
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %8, i32 0, i32 1
  %65 = load double, ptr %10, align 8
  %66 = fmul double %1, %65
  %67 = load double, ptr %9, align 8
  %68 = fmul double %0, %67
  %69 = fsub double %66, %68
  %70 = fdiv double %69, %34
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc double @math.ldexp.ldexp__anon_3767(double %70, i32 %75)
  store double %76, ptr %64, align 8
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %8, i32 0, i32 0
  %78 = load double, ptr %77, align 8
  %79 = call fastcc i1 @math.isnan.isNan__anon_3714(double %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %90, %91
  br label %18

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %90

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %8, i32 0, i32 1
  %85 = load double, ptr %84, align 8
  %86 = call fastcc i1 @math.isnan.isNan__anon_3714(double %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = fcmp oeq double %34, 0.000000e+00
  br i1 %89, label %94, label %97

90:                                               ; preds = %81
  br label %80

91:                                               ; preds = %117
  br label %80

92:                                               ; preds = %97, %98
  %93 = phi i1 [ %99, %98 ], [ false, %97 ]
  br i1 %93, label %104, label %113

94:                                               ; preds = %88
  %95 = call fastcc i1 @math.isnan.isNan__anon_3714(double %0)
  %96 = xor i1 %95, true
  br i1 %96, label %100, label %101

97:                                               ; preds = %88
  br label %92

98:                                               ; preds = %101, %100
  %99 = phi i1 [ true, %100 ], [ %103, %101 ]
  br label %92

100:                                              ; preds = %94
  br label %98

101:                                              ; preds = %94
  %102 = call fastcc i1 @math.isnan.isNan__anon_3714(double %1)
  %103 = xor i1 %102, true
  br label %98

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %106 = load double, ptr %10, align 8
  %107 = call fastcc double @math.copysign.copysign__anon_3715(double 0x7FF0000000000000, double %106)
  %108 = fmul double %107, %0
  store double %108, ptr %105, align 8
  %109 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 1
  %110 = load double, ptr %10, align 8
  %111 = call fastcc double @math.copysign.copysign__anon_3715(double 0x7FF0000000000000, double %110)
  %112 = fmul double %111, %1
  store double %112, ptr %109, align 8
  br label %18

113:                                              ; preds = %92
  %114 = bitcast double %0 to i64
  %115 = and i64 %114, 9223372036854775807
  %116 = icmp eq i64 %115, 9218868437227405312
  br i1 %116, label %120, label %121

117:                                              ; preds = %170
  br label %91

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %124, %121 ]
  br i1 %119, label %127, label %130

120:                                              ; preds = %113
  br label %118

121:                                              ; preds = %113
  %122 = bitcast double %1 to i64
  %123 = and i64 %122, 9223372036854775807
  %124 = icmp eq i64 %123, 9218868437227405312
  br label %118

125:                                              ; preds = %130, %127
  %126 = phi i1 [ %129, %127 ], [ false, %130 ]
  br i1 %126, label %133, label %136

127:                                              ; preds = %118
  %128 = load double, ptr %10, align 8
  %129 = call fastcc i1 @math.isfinite.isFinite__anon_3768(double %128)
  br label %125

130:                                              ; preds = %118
  br label %125

131:                                              ; preds = %136, %133
  %132 = phi i1 [ %135, %133 ], [ false, %136 ]
  br i1 %132, label %137, label %141

133:                                              ; preds = %125
  %134 = load double, ptr %9, align 8
  %135 = call fastcc i1 @math.isfinite.isFinite__anon_3768(double %134)
  br label %131

136:                                              ; preds = %125
  br label %131

137:                                              ; preds = %131
  %138 = bitcast double %0 to i64
  %139 = and i64 %138, 9223372036854775807
  %140 = icmp eq i64 %139, 9218868437227405312
  br i1 %140, label %149, label %150

141:                                              ; preds = %131
  %142 = icmp eq i32 %16, 2147483647
  br i1 %142, label %173, label %175

143:                                              ; preds = %150, %149
  %144 = phi double [ 1.000000e+00, %149 ], [ 0.000000e+00, %150 ]
  %145 = call fastcc double @math.copysign.copysign__anon_3715(double %144, double %0)
  %146 = bitcast double %1 to i64
  %147 = and i64 %146, 9223372036854775807
  %148 = icmp eq i64 %147, 9218868437227405312
  br i1 %148, label %168, label %169

149:                                              ; preds = %137
  br label %143

150:                                              ; preds = %137
  br label %143

151:                                              ; preds = %169, %168
  %152 = phi double [ 1.000000e+00, %168 ], [ 0.000000e+00, %169 ]
  %153 = call fastcc double @math.copysign.copysign__anon_3715(double %152, double %1)
  %154 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 0
  %155 = load double, ptr %10, align 8
  %156 = fmul double %145, %155
  %157 = load double, ptr %9, align 8
  %158 = fmul double %153, %157
  %159 = fsub double %156, %158
  %160 = fmul double 0x7FF0000000000000, %159
  store double %160, ptr %154, align 8
  %161 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 1
  %162 = load double, ptr %10, align 8
  %163 = fmul double %153, %162
  %164 = load double, ptr %9, align 8
  %165 = fmul double %145, %164
  %166 = fsub double %163, %165
  %167 = fmul double 0x7FF0000000000000, %166
  store double %167, ptr %161, align 8
  br label %18

168:                                              ; preds = %143
  br label %151

169:                                              ; preds = %143
  br label %151

170:                                              ; preds = %186
  br label %117

171:                                              ; preds = %175, %173
  %172 = phi i1 [ %174, %173 ], [ false, %175 ]
  br i1 %172, label %178, label %180

173:                                              ; preds = %141
  %174 = call fastcc i1 @math.isfinite.isFinite__anon_3768(double %0)
  br label %171

175:                                              ; preds = %141
  br label %171

176:                                              ; preds = %180, %178
  %177 = phi i1 [ %179, %178 ], [ false, %180 ]
  br i1 %177, label %181, label %186

178:                                              ; preds = %171
  %179 = call fastcc i1 @math.isfinite.isFinite__anon_3768(double %1)
  br label %176

180:                                              ; preds = %171
  br label %176

181:                                              ; preds = %176
  %182 = load double, ptr %10, align 8
  %183 = bitcast double %182 to i64
  %184 = and i64 %183, 9223372036854775807
  %185 = icmp eq i64 %184, 9218868437227405312
  br i1 %185, label %195, label %196

186:                                              ; preds = %176
  br label %170

187:                                              ; preds = %196, %195
  %188 = phi double [ 1.000000e+00, %195 ], [ 0.000000e+00, %196 ]
  %189 = load double, ptr %10, align 8
  %190 = call fastcc double @math.copysign.copysign__anon_3715(double %188, double %189)
  %191 = load double, ptr %9, align 8
  %192 = bitcast double %191 to i64
  %193 = and i64 %192, 9223372036854775807
  %194 = icmp eq i64 %193, 9218868437227405312
  br i1 %194, label %211, label %212

195:                                              ; preds = %181
  br label %187

196:                                              ; preds = %181
  br label %187

197:                                              ; preds = %212, %211
  %198 = phi double [ 1.000000e+00, %211 ], [ 0.000000e+00, %212 ]
  %199 = load double, ptr %9, align 8
  %200 = call fastcc double @math.copysign.copysign__anon_3715(double %198, double %199)
  %201 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %202 = fmul double %0, %190
  %203 = fmul double %1, %200
  %204 = fadd double %202, %203
  %205 = fmul double 0.000000e+00, %204
  store double %205, ptr %201, align 8
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 1
  %207 = fmul double %1, %190
  %208 = fmul double %0, %200
  %209 = fsub double %207, %208
  %210 = fmul double 0.000000e+00, %209
  store double %210, ptr %206, align 8
  br label %18

211:                                              ; preds = %187
  br label %197

212:                                              ; preds = %187
  br label %197
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.maxnum.f64(double, double) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3766(double %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_4063(double %0)
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc double @math.ldexp.ldexp__anon_3767(double %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = bitcast double %0 to i64
  %7 = and i64 %6, -9223372036854775808
  %8 = call fastcc i1 @math.isnan.isNan__anon_3714(double %0)
  br i1 %8, label %16, label %17

9:                                                ; preds = %21
  %10 = shl i64 %6, 1
  %11 = lshr i64 %10, 53
  %12 = sub i64 2147483647, %11
  %13 = icmp ule i64 %12, 2147483647
  br i1 %13, label %26, label %27

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %19, %17 ]
  br i1 %15, label %20, label %21

16:                                               ; preds = %2
  br label %14

17:                                               ; preds = %2
  %18 = call fastcc i1 @math.isfinite.isFinite__anon_3768(double %0)
  %19 = xor i1 %18, true
  br label %14

20:                                               ; preds = %14
  ret double %0

21:                                               ; preds = %14
  br label %9

22:                                               ; preds = %26
  %23 = trunc i64 %11 to i32
  store i32 %23, ptr %5, align 4
  %24 = load i32, ptr %5, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %38

26:                                               ; preds = %9
  br label %22

27:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

28:                                               ; preds = %38, %45
  %29 = icmp sge i32 %1, 0
  br i1 %29, label %47, label %51

30:                                               ; preds = %22
  %31 = load i32, ptr %5, align 4
  %32 = shl i64 %6, 1
  %33 = call i64 @llvm.ctlz.i64(i64 %32, i1 false)
  %34 = trunc i64 %33 to i7
  %35 = zext i7 %34 to i32
  %36 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 11, i32 %35)
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %39, label %40

38:                                               ; preds = %22
  br label %28

39:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

40:                                               ; preds = %30
  %41 = extractvalue { i32, i1 } %36, 0
  %42 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %41)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %40
  %46 = extractvalue { i32, i1 } %42, 0
  store i32 %46, ptr %5, align 4
  br label %28

47:                                               ; preds = %28
  %48 = load i32, ptr %5, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 2046, i32 %48)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %57, label %58

51:                                               ; preds = %28
  %52 = load i32, ptr %5, align 4
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %52)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %136, label %137

55:                                               ; preds = %68
  %56 = icmp sge i32 %1, 0
  br i1 %56, label %127, label %128

57:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %47
  %59 = extractvalue { i32, i1 } %49, 0
  %60 = icmp sgt i32 %1, %59
  br i1 %60, label %61, label %64

61:                                               ; preds = %58
  %62 = or i64 9218868437227405312, %7
  %63 = bitcast i64 %62 to double
  ret double %63

64:                                               ; preds = %58
  %65 = load i32, ptr %5, align 4
  %66 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %65, i32 %1)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %69, label %70

68:                                               ; preds = %87
  br label %55

69:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %64
  %71 = extractvalue { i32, i1 } %66, 0
  %72 = icmp sle i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = sub i32 63, %1
  %75 = icmp ule i32 %74, 63
  br i1 %75, label %85, label %86

76:                                               ; preds = %70
  %77 = load i32, ptr %5, align 4
  %78 = icmp sle i32 %77, 0
  br i1 %78, label %88, label %92

79:                                               ; preds = %85
  %80 = trunc i32 %1 to i6
  %81 = zext i6 %80 to i64
  %82 = shl i64 %6, %81
  %83 = or i64 %82, %7
  %84 = bitcast i64 %83 to double
  ret double %84

85:                                               ; preds = %73
  br label %79

86:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

87:                                               ; preds = %92
  br label %68

88:                                               ; preds = %76
  %89 = load i32, ptr %5, align 4
  %90 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %93, label %94

92:                                               ; preds = %76
  br label %87

93:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %88
  %95 = extractvalue { i32, i1 } %90, 0
  %96 = icmp sge i32 %95, 0
  br i1 %96, label %104, label %105

97:                                               ; preds = %104
  %98 = sext i32 %95 to i64
  %99 = shl i64 %98, 52
  store i64 %99, ptr %4, align 8
  %100 = load i64, ptr %4, align 8
  %101 = load i32, ptr %5, align 4
  %102 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %101)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %106, label %107

104:                                              ; preds = %94
  br label %97

105:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

106:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %97
  %108 = extractvalue { i32, i1 } %102, 0
  %109 = sub i32 63, %108
  %110 = icmp ule i32 %109, 63
  br i1 %110, label %120, label %121

111:                                              ; preds = %120
  %112 = trunc i32 %108 to i6
  %113 = zext i6 %112 to i64
  %114 = shl i64 %6, %113
  %115 = and i64 %114, 4503599627370495
  %116 = or i64 %100, %115
  store i64 %116, ptr %4, align 8
  %117 = load i64, ptr %4, align 8
  %118 = or i64 %117, %7
  %119 = bitcast i64 %118 to double
  ret double %119

120:                                              ; preds = %107
  br label %111

121:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

122:                                              ; preds = %127
  %123 = sext i32 %1 to i64
  %124 = shl i64 %123, 52
  %125 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %6, i64 %124)
  %126 = extractvalue { i64, i1 } %125, 1
  br i1 %126, label %129, label %130

127:                                              ; preds = %55
  br label %122

128:                                              ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

129:                                              ; preds = %122
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

130:                                              ; preds = %122
  %131 = extractvalue { i64, i1 } %125, 0
  %132 = bitcast i64 %131 to double
  ret double %132

133:                                              ; preds = %144
  %134 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %135 = extractvalue { i32, i1 } %134, 1
  br i1 %135, label %223, label %224

136:                                              ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %51
  %138 = extractvalue { i32, i1 } %53, 0
  %139 = icmp sle i32 %1, %138
  br i1 %139, label %140, label %144

140:                                              ; preds = %137
  %141 = load i32, ptr %5, align 4
  %142 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 52, i32 %141)
  %143 = extractvalue { i32, i1 } %142, 1
  br i1 %143, label %148, label %149

144:                                              ; preds = %137
  br label %133

145:                                              ; preds = %159
  %146 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %147 = extractvalue { i32, i1 } %146, 1
  br i1 %147, label %160, label %161

148:                                              ; preds = %140
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

149:                                              ; preds = %140
  %150 = extractvalue { i32, i1 } %142, 0
  %151 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %150)
  %152 = extractvalue { i32, i1 } %151, 1
  br i1 %152, label %153, label %154

153:                                              ; preds = %149
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

154:                                              ; preds = %149
  %155 = extractvalue { i32, i1 } %151, 0
  %156 = icmp slt i32 %1, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %154
  %158 = bitcast i64 %7 to double
  ret double %158

159:                                              ; preds = %154
  br label %145

160:                                              ; preds = %145
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

161:                                              ; preds = %145
  %162 = extractvalue { i32, i1 } %146, 0
  %163 = load i32, ptr %5, align 4
  %164 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %163, i32 %1)
  %165 = extractvalue { i32, i1 } %164, 1
  br i1 %165, label %166, label %167

166:                                              ; preds = %161
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

167:                                              ; preds = %161
  %168 = extractvalue { i32, i1 } %164, 0
  %169 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %168)
  %170 = extractvalue { i32, i1 } %169, 1
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %167
  %173 = extractvalue { i32, i1 } %169, 0
  %174 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %173, i32 1)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

176:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %172
  %178 = extractvalue { i32, i1 } %174, 0
  %179 = call i32 @llvm.smin.i32(i32 %162, i32 %178)
  %180 = sub i32 63, %179
  %181 = icmp ule i32 %180, 63
  br i1 %181, label %188, label %189

182:                                              ; preds = %188
  %183 = trunc i32 %179 to i6
  %184 = call i64 @llvm.cttz.i64(i64 %6, i1 false)
  %185 = trunc i64 %184 to i7
  %186 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %183, i6 1)
  %187 = extractvalue { i6, i1 } %186, 1
  br i1 %187, label %190, label %191

188:                                              ; preds = %177
  br label %182

189:                                              ; preds = %177
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

190:                                              ; preds = %182
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

191:                                              ; preds = %182
  %192 = extractvalue { i6, i1 } %186, 0
  %193 = zext i6 %192 to i7
  %194 = icmp eq i7 %185, %193
  %195 = and i64 %6, 4503599627370495
  store i64 %195, ptr %3, align 8
  %196 = load i64, ptr %3, align 8
  %197 = load i32, ptr %5, align 4
  %198 = icmp sgt i32 %197, 0
  %199 = zext i1 %198 to i64
  %200 = shl i64 %199, 52
  %201 = or i64 %196, %200
  store i64 %201, ptr %3, align 8
  %202 = load i64, ptr %3, align 8
  %203 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %183, i6 1)
  %204 = extractvalue { i6, i1 } %203, 1
  br i1 %204, label %205, label %206

205:                                              ; preds = %191
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

206:                                              ; preds = %191
  %207 = extractvalue { i6, i1 } %203, 0
  %208 = zext i6 %207 to i64
  %209 = lshr i64 %202, %208
  store i64 %209, ptr %3, align 8
  %210 = load i64, ptr %3, align 8
  %211 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %210, i64 1)
  %212 = extractvalue { i64, i1 } %211, 1
  br i1 %212, label %213, label %214

213:                                              ; preds = %206
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

214:                                              ; preds = %206
  %215 = extractvalue { i64, i1 } %211, 0
  %216 = lshr i64 %215, 1
  %217 = zext i1 %194 to i64
  %218 = xor i64 %217, -1
  %219 = and i64 %216, %218
  store i64 %219, ptr %3, align 8
  %220 = load i64, ptr %3, align 8
  %221 = or i64 %220, %7
  %222 = bitcast i64 %221 to double
  ret double %222

223:                                              ; preds = %133
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

224:                                              ; preds = %133
  %225 = extractvalue { i32, i1 } %134, 0
  %226 = icmp sge i32 %225, 0
  br i1 %226, label %232, label %233

227:                                              ; preds = %232
  %228 = sext i32 %225 to i64
  %229 = shl i64 %228, 52
  %230 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %6, i64 %229)
  %231 = extractvalue { i64, i1 } %230, 1
  br i1 %231, label %234, label %235

232:                                              ; preds = %224
  br label %227

233:                                              ; preds = %224
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

234:                                              ; preds = %227
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

235:                                              ; preds = %227
  %236 = extractvalue { i64, i1 } %230, 0
  %237 = bitcast i64 %236 to double
  ret double %237
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3768(double %0) unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = icmp ult i64 %3, 9218868437227405312
  ret i1 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__divxc3(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f80)") %0, x86_fp80 %1, x86_fp80 %2, x86_fp80 %3, x86_fp80 %4) #0 {
  %6 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %7 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %8 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %9 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %10 = alloca x86_fp80, align 16
  %11 = alloca x86_fp80, align 16
  store x86_fp80 %3, ptr %11, align 16
  store x86_fp80 %4, ptr %10, align 16
  %12 = load x86_fp80, ptr %11, align 16
  %13 = call x86_fp80 @llvm.fabs.f80(x86_fp80 %12)
  %14 = load x86_fp80, ptr %10, align 16
  %15 = call x86_fp80 @llvm.fabs.f80(x86_fp80 %14)
  %16 = call x86_fp80 @llvm.maxnum.f80(x86_fp80 %13, x86_fp80 %15)
  %17 = call fastcc i32 @math.ilogb.ilogb__anon_3769(x86_fp80 %16)
  %18 = icmp ne i32 %17, 2147483647
  br i1 %18, label %23, label %25

19:                                               ; preds = %80, %197, %151, %104
  %20 = phi ptr [ %8, %104 ], [ %7, %151 ], [ %6, %197 ], [ %9, %80 ]
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %20, i64 32, i1 false)
  ret void

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %5
  %24 = icmp ne i32 %17, -2147483648
  br label %21

25:                                               ; preds = %5
  br label %21

26:                                               ; preds = %48, %57
  %27 = phi i32 [ %17, %57 ], [ 0, %48 ]
  %28 = load x86_fp80, ptr %11, align 16
  %29 = load x86_fp80, ptr %11, align 16
  %30 = fmul x86_fp80 %28, %29
  %31 = load x86_fp80, ptr %10, align 16
  %32 = load x86_fp80, ptr %10, align 16
  %33 = fmul x86_fp80 %31, %32
  %34 = fadd x86_fp80 %30, %33
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %9, i32 0, i32 0
  %36 = load x86_fp80, ptr %11, align 16
  %37 = fmul x86_fp80 %1, %36
  %38 = load x86_fp80, ptr %10, align 16
  %39 = fmul x86_fp80 %2, %38
  %40 = fadd x86_fp80 %37, %39
  %41 = fdiv x86_fp80 %40, %34
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load x86_fp80, ptr %11, align 16
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %17)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc x86_fp80 @math.ldexp.ldexp__anon_3770(x86_fp80 %45, i32 %51)
  store x86_fp80 %52, ptr %11, align 16
  %53 = load x86_fp80, ptr %10, align 16
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %17)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc x86_fp80 @math.ldexp.ldexp__anon_3770(x86_fp80 %53, i32 %58)
  store x86_fp80 %59, ptr %10, align 16
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc x86_fp80 @math.ldexp.ldexp__anon_3770(x86_fp80 %41, i32 %62)
  store x86_fp80 %63, ptr %35, align 16
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %9, i32 0, i32 1
  %65 = load x86_fp80, ptr %11, align 16
  %66 = fmul x86_fp80 %2, %65
  %67 = load x86_fp80, ptr %10, align 16
  %68 = fmul x86_fp80 %1, %67
  %69 = fsub x86_fp80 %66, %68
  %70 = fdiv x86_fp80 %69, %34
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc x86_fp80 @math.ldexp.ldexp__anon_3770(x86_fp80 %70, i32 %75)
  store x86_fp80 %76, ptr %64, align 16
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %9, i32 0, i32 0
  %78 = load x86_fp80, ptr %77, align 16
  %79 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %90, %91
  br label %19

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %90

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %9, i32 0, i32 1
  %85 = load x86_fp80, ptr %84, align 16
  %86 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = fcmp oeq x86_fp80 %34, 0xK00000000000000000000
  br i1 %89, label %94, label %97

90:                                               ; preds = %81
  br label %80

91:                                               ; preds = %117
  br label %80

92:                                               ; preds = %97, %98
  %93 = phi i1 [ %99, %98 ], [ false, %97 ]
  br i1 %93, label %104, label %113

94:                                               ; preds = %88
  %95 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %1)
  %96 = xor i1 %95, true
  br i1 %96, label %100, label %101

97:                                               ; preds = %88
  br label %92

98:                                               ; preds = %101, %100
  %99 = phi i1 [ true, %100 ], [ %103, %101 ]
  br label %92

100:                                              ; preds = %94
  br label %98

101:                                              ; preds = %94
  %102 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %2)
  %103 = xor i1 %102, true
  br label %98

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 0
  %106 = load x86_fp80, ptr %11, align 16
  %107 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK7FFF8000000000000000, x86_fp80 %106)
  %108 = fmul x86_fp80 %107, %1
  store x86_fp80 %108, ptr %105, align 16
  %109 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 1
  %110 = load x86_fp80, ptr %11, align 16
  %111 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 0xK7FFF8000000000000000, x86_fp80 %110)
  %112 = fmul x86_fp80 %111, %2
  store x86_fp80 %112, ptr %109, align 16
  br label %19

113:                                              ; preds = %92
  %114 = bitcast x86_fp80 %1 to i80
  %115 = and i80 %114, 604462909807314587353087
  %116 = icmp eq i80 %115, 604453686435277732577280
  br i1 %116, label %120, label %121

117:                                              ; preds = %170
  br label %91

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %124, %121 ]
  br i1 %119, label %127, label %130

120:                                              ; preds = %113
  br label %118

121:                                              ; preds = %113
  %122 = bitcast x86_fp80 %2 to i80
  %123 = and i80 %122, 604462909807314587353087
  %124 = icmp eq i80 %123, 604453686435277732577280
  br label %118

125:                                              ; preds = %130, %127
  %126 = phi i1 [ %129, %127 ], [ false, %130 ]
  br i1 %126, label %133, label %136

127:                                              ; preds = %118
  %128 = load x86_fp80, ptr %11, align 16
  %129 = call fastcc i1 @math.isfinite.isFinite__anon_3771(x86_fp80 %128)
  br label %125

130:                                              ; preds = %118
  br label %125

131:                                              ; preds = %136, %133
  %132 = phi i1 [ %135, %133 ], [ false, %136 ]
  br i1 %132, label %137, label %141

133:                                              ; preds = %125
  %134 = load x86_fp80, ptr %10, align 16
  %135 = call fastcc i1 @math.isfinite.isFinite__anon_3771(x86_fp80 %134)
  br label %131

136:                                              ; preds = %125
  br label %131

137:                                              ; preds = %131
  %138 = bitcast x86_fp80 %1 to i80
  %139 = and i80 %138, 604462909807314587353087
  %140 = icmp eq i80 %139, 604453686435277732577280
  br i1 %140, label %149, label %150

141:                                              ; preds = %131
  %142 = icmp eq i32 %17, 2147483647
  br i1 %142, label %173, label %175

143:                                              ; preds = %150, %149
  %144 = phi x86_fp80 [ 0xK3FFF8000000000000000, %149 ], [ 0xK00000000000000000000, %150 ]
  %145 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %144, x86_fp80 %1)
  %146 = bitcast x86_fp80 %2 to i80
  %147 = and i80 %146, 604462909807314587353087
  %148 = icmp eq i80 %147, 604453686435277732577280
  br i1 %148, label %168, label %169

149:                                              ; preds = %137
  br label %143

150:                                              ; preds = %137
  br label %143

151:                                              ; preds = %169, %168
  %152 = phi x86_fp80 [ 0xK3FFF8000000000000000, %168 ], [ 0xK00000000000000000000, %169 ]
  %153 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %152, x86_fp80 %2)
  %154 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %7, i32 0, i32 0
  %155 = load x86_fp80, ptr %11, align 16
  %156 = fmul x86_fp80 %145, %155
  %157 = load x86_fp80, ptr %10, align 16
  %158 = fmul x86_fp80 %153, %157
  %159 = fsub x86_fp80 %156, %158
  %160 = fmul x86_fp80 0xK7FFF8000000000000000, %159
  store x86_fp80 %160, ptr %154, align 16
  %161 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %7, i32 0, i32 1
  %162 = load x86_fp80, ptr %11, align 16
  %163 = fmul x86_fp80 %153, %162
  %164 = load x86_fp80, ptr %10, align 16
  %165 = fmul x86_fp80 %145, %164
  %166 = fsub x86_fp80 %163, %165
  %167 = fmul x86_fp80 0xK7FFF8000000000000000, %166
  store x86_fp80 %167, ptr %161, align 16
  br label %19

168:                                              ; preds = %143
  br label %151

169:                                              ; preds = %143
  br label %151

170:                                              ; preds = %186
  br label %117

171:                                              ; preds = %175, %173
  %172 = phi i1 [ %174, %173 ], [ false, %175 ]
  br i1 %172, label %178, label %180

173:                                              ; preds = %141
  %174 = call fastcc i1 @math.isfinite.isFinite__anon_3771(x86_fp80 %1)
  br label %171

175:                                              ; preds = %141
  br label %171

176:                                              ; preds = %180, %178
  %177 = phi i1 [ %179, %178 ], [ false, %180 ]
  br i1 %177, label %181, label %186

178:                                              ; preds = %171
  %179 = call fastcc i1 @math.isfinite.isFinite__anon_3771(x86_fp80 %2)
  br label %176

180:                                              ; preds = %171
  br label %176

181:                                              ; preds = %176
  %182 = load x86_fp80, ptr %11, align 16
  %183 = bitcast x86_fp80 %182 to i80
  %184 = and i80 %183, 604462909807314587353087
  %185 = icmp eq i80 %184, 604453686435277732577280
  br i1 %185, label %195, label %196

186:                                              ; preds = %176
  br label %170

187:                                              ; preds = %196, %195
  %188 = phi x86_fp80 [ 0xK3FFF8000000000000000, %195 ], [ 0xK00000000000000000000, %196 ]
  %189 = load x86_fp80, ptr %11, align 16
  %190 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %188, x86_fp80 %189)
  %191 = load x86_fp80, ptr %10, align 16
  %192 = bitcast x86_fp80 %191 to i80
  %193 = and i80 %192, 604462909807314587353087
  %194 = icmp eq i80 %193, 604453686435277732577280
  br i1 %194, label %211, label %212

195:                                              ; preds = %181
  br label %187

196:                                              ; preds = %181
  br label %187

197:                                              ; preds = %212, %211
  %198 = phi x86_fp80 [ 0xK3FFF8000000000000000, %211 ], [ 0xK00000000000000000000, %212 ]
  %199 = load x86_fp80, ptr %10, align 16
  %200 = call fastcc x86_fp80 @math.copysign.copysign__anon_3717(x86_fp80 %198, x86_fp80 %199)
  %201 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %6, i32 0, i32 0
  %202 = fmul x86_fp80 %1, %190
  %203 = fmul x86_fp80 %2, %200
  %204 = fadd x86_fp80 %202, %203
  %205 = fmul x86_fp80 0xK00000000000000000000, %204
  store x86_fp80 %205, ptr %201, align 16
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %6, i32 0, i32 1
  %207 = fmul x86_fp80 %2, %190
  %208 = fmul x86_fp80 %1, %200
  %209 = fsub x86_fp80 %207, %208
  %210 = fmul x86_fp80 0xK00000000000000000000, %209
  store x86_fp80 %210, ptr %206, align 16
  br label %19

211:                                              ; preds = %187
  br label %197

212:                                              ; preds = %187
  br label %197
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare x86_fp80 @llvm.fabs.f80(x86_fp80) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare x86_fp80 @llvm.maxnum.f80(x86_fp80, x86_fp80) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3769(x86_fp80 %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_4064(x86_fp80 %0)
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc x86_fp80 @math.ldexp.ldexp__anon_3770(x86_fp80 %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i80, align 8
  %4 = alloca i80, align 8
  %5 = alloca i32, align 4
  %6 = bitcast x86_fp80 %0 to i80
  %7 = and i80 %6, -604462909807314587353088
  %8 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %0)
  br i1 %8, label %12, label %13

9:                                                ; preds = %17
  br i1 true, label %21, label %22

10:                                               ; preds = %13, %12
  %11 = phi i1 [ true, %12 ], [ %15, %13 ]
  br i1 %11, label %16, label %17

12:                                               ; preds = %2
  br label %10

13:                                               ; preds = %2
  %14 = call fastcc i1 @math.isfinite.isFinite__anon_3771(x86_fp80 %0)
  %15 = xor i1 %14, true
  br label %10

16:                                               ; preds = %10
  ret x86_fp80 %0

17:                                               ; preds = %10
  br label %9

18:                                               ; preds = %21
  %19 = shl i80 %6, 1
  %20 = lshr i80 %19, 65
  br i1 true, label %26, label %27

21:                                               ; preds = %9
  br label %18

22:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

23:                                               ; preds = %26
  %24 = sub i80 2147483647, %20
  %25 = icmp ule i80 %24, 2147483647
  br i1 %25, label %32, label %33

26:                                               ; preds = %18
  br label %23

27:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

28:                                               ; preds = %32
  %29 = trunc i80 %20 to i32
  store i32 %29, ptr %5, align 4
  %30 = load i32, ptr %5, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %38

32:                                               ; preds = %23
  br label %28

33:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

34:                                               ; preds = %38, %54
  %35 = icmp sge i32 %1, 0
  br i1 %35, label %56, label %60

36:                                               ; preds = %28
  %37 = load i32, ptr %5, align 4
  br i1 true, label %46, label %47

38:                                               ; preds = %28
  br label %34

39:                                               ; preds = %46
  %40 = shl i80 %6, 1
  %41 = call i80 @llvm.ctlz.i80(i80 %40, i1 false)
  %42 = trunc i80 %41 to i7
  %43 = zext i7 %42 to i32
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16, i32 %43)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %36
  br label %39

47:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

48:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %39
  %50 = extractvalue { i32, i1 } %44, 0
  %51 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %37, i32 %50)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %53, label %54

53:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %49
  %55 = extractvalue { i32, i1 } %51, 0
  store i32 %55, ptr %5, align 4
  br label %34

56:                                               ; preds = %34
  %57 = load i32, ptr %5, align 4
  %58 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32766, i32 %57)
  %59 = extractvalue { i32, i1 } %58, 1
  br i1 %59, label %66, label %67

60:                                               ; preds = %34
  %61 = load i32, ptr %5, align 4
  %62 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %61)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %159, label %160

64:                                               ; preds = %77
  %65 = icmp sge i32 %1, 0
  br i1 %65, label %144, label %145

66:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %56
  %68 = extractvalue { i32, i1 } %58, 0
  %69 = icmp sgt i32 %1, %68
  br i1 %69, label %70, label %73

70:                                               ; preds = %67
  %71 = or i80 604453686435277732577280, %7
  %72 = bitcast i80 %71 to x86_fp80
  ret x86_fp80 %72

73:                                               ; preds = %67
  %74 = load i32, ptr %5, align 4
  %75 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %74, i32 %1)
  %76 = extractvalue { i32, i1 } %75, 1
  br i1 %76, label %78, label %79

77:                                               ; preds = %100
  br label %64

78:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %73
  %80 = extractvalue { i32, i1 } %75, 0
  %81 = icmp sle i32 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %79
  %83 = sub i32 127, %1
  %84 = icmp ule i32 %83, 127
  br i1 %84, label %91, label %92

85:                                               ; preds = %79
  %86 = load i32, ptr %5, align 4
  %87 = icmp sle i32 %86, 0
  br i1 %87, label %101, label %105

88:                                               ; preds = %91
  %89 = trunc i32 %1 to i7
  %90 = icmp ult i7 %89, -48
  br i1 %90, label %98, label %99

91:                                               ; preds = %82
  br label %88

92:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

93:                                               ; preds = %98
  %94 = zext i7 %89 to i80
  %95 = shl i80 %6, %94
  %96 = or i80 %95, %7
  %97 = bitcast i80 %96 to x86_fp80
  ret x86_fp80 %97

98:                                               ; preds = %88
  br label %93

99:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

100:                                              ; preds = %105
  br label %77

101:                                              ; preds = %85
  %102 = load i32, ptr %5, align 4
  %103 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %102)
  %104 = extractvalue { i32, i1 } %103, 1
  br i1 %104, label %106, label %107

105:                                              ; preds = %85
  br label %100

106:                                              ; preds = %101
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %101
  %108 = extractvalue { i32, i1 } %103, 0
  %109 = icmp sge i32 %108, 0
  br i1 %109, label %112, label %113

110:                                              ; preds = %112
  %111 = sext i32 %108 to i80
  br i1 true, label %120, label %121

112:                                              ; preds = %107
  br label %110

113:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

114:                                              ; preds = %120
  %115 = shl i80 %111, 64
  store i80 %115, ptr %4, align 8
  %116 = load i80, ptr %4, align 8
  %117 = load i32, ptr %5, align 4
  %118 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %117)
  %119 = extractvalue { i32, i1 } %118, 1
  br i1 %119, label %122, label %123

120:                                              ; preds = %110
  br label %114

121:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

122:                                              ; preds = %114
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

123:                                              ; preds = %114
  %124 = extractvalue { i32, i1 } %118, 0
  %125 = sub i32 127, %124
  %126 = icmp ule i32 %125, 127
  br i1 %126, label %130, label %131

127:                                              ; preds = %130
  %128 = trunc i32 %124 to i7
  %129 = icmp ult i7 %128, -48
  br i1 %129, label %140, label %141

130:                                              ; preds = %123
  br label %127

131:                                              ; preds = %123
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

132:                                              ; preds = %140
  %133 = zext i7 %128 to i80
  %134 = shl i80 %6, %133
  %135 = and i80 %134, 18446744073709551615
  %136 = or i80 %116, %135
  store i80 %136, ptr %4, align 8
  %137 = load i80, ptr %4, align 8
  %138 = or i80 %137, %7
  %139 = bitcast i80 %138 to x86_fp80
  ret x86_fp80 %139

140:                                              ; preds = %127
  br label %132

141:                                              ; preds = %127
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

142:                                              ; preds = %144
  %143 = sext i32 %1 to i80
  br i1 true, label %150, label %151

144:                                              ; preds = %64
  br label %142

145:                                              ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

146:                                              ; preds = %150
  %147 = shl i80 %143, 64
  %148 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %6, i80 %147)
  %149 = extractvalue { i80, i1 } %148, 1
  br i1 %149, label %152, label %153

150:                                              ; preds = %142
  br label %146

151:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

152:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

153:                                              ; preds = %146
  %154 = extractvalue { i80, i1 } %148, 0
  %155 = bitcast i80 %154 to x86_fp80
  ret x86_fp80 %155

156:                                              ; preds = %167
  %157 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %158 = extractvalue { i32, i1 } %157, 1
  br i1 %158, label %246, label %247

159:                                              ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

160:                                              ; preds = %60
  %161 = extractvalue { i32, i1 } %62, 0
  %162 = icmp sle i32 %1, %161
  br i1 %162, label %163, label %167

163:                                              ; preds = %160
  %164 = load i32, ptr %5, align 4
  %165 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 64, i32 %164)
  %166 = extractvalue { i32, i1 } %165, 1
  br i1 %166, label %171, label %172

167:                                              ; preds = %160
  br label %156

168:                                              ; preds = %182
  %169 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %170 = extractvalue { i32, i1 } %169, 1
  br i1 %170, label %183, label %184

171:                                              ; preds = %163
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %163
  %173 = extractvalue { i32, i1 } %165, 0
  %174 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %173)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

176:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %172
  %178 = extractvalue { i32, i1 } %174, 0
  %179 = icmp slt i32 %1, %178
  br i1 %179, label %180, label %182

180:                                              ; preds = %177
  %181 = bitcast i80 %7 to x86_fp80
  ret x86_fp80 %181

182:                                              ; preds = %177
  br label %168

183:                                              ; preds = %168
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

184:                                              ; preds = %168
  %185 = extractvalue { i32, i1 } %169, 0
  %186 = load i32, ptr %5, align 4
  %187 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %186, i32 %1)
  %188 = extractvalue { i32, i1 } %187, 1
  br i1 %188, label %189, label %190

189:                                              ; preds = %184
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

190:                                              ; preds = %184
  %191 = extractvalue { i32, i1 } %187, 0
  %192 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %191)
  %193 = extractvalue { i32, i1 } %192, 1
  br i1 %193, label %194, label %195

194:                                              ; preds = %190
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

195:                                              ; preds = %190
  %196 = extractvalue { i32, i1 } %192, 0
  %197 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %196, i32 1)
  %198 = extractvalue { i32, i1 } %197, 1
  br i1 %198, label %199, label %200

199:                                              ; preds = %195
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

200:                                              ; preds = %195
  %201 = extractvalue { i32, i1 } %197, 0
  %202 = call i32 @llvm.smin.i32(i32 %185, i32 %201)
  %203 = sub i32 127, %202
  %204 = icmp ule i32 %203, 127
  br i1 %204, label %211, label %212

205:                                              ; preds = %211
  %206 = trunc i32 %202 to i7
  %207 = call i80 @llvm.cttz.i80(i80 %6, i1 false)
  %208 = trunc i80 %207 to i7
  %209 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %206, i7 1)
  %210 = extractvalue { i7, i1 } %209, 1
  br i1 %210, label %213, label %214

211:                                              ; preds = %200
  br label %205

212:                                              ; preds = %200
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

213:                                              ; preds = %205
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

214:                                              ; preds = %205
  %215 = extractvalue { i7, i1 } %209, 0
  %216 = icmp eq i7 %208, %215
  %217 = and i80 %6, 18446744073709551615
  store i80 %217, ptr %3, align 8
  %218 = load i80, ptr %3, align 8
  %219 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %206, i7 1)
  %220 = extractvalue { i7, i1 } %219, 1
  br i1 %220, label %221, label %222

221:                                              ; preds = %214
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

222:                                              ; preds = %214
  %223 = extractvalue { i7, i1 } %219, 0
  %224 = zext i7 %223 to i80
  %225 = lshr i80 %218, %224
  %226 = icmp ult i7 %223, -48
  br i1 %226, label %231, label %232

227:                                              ; preds = %231
  store i80 %225, ptr %3, align 8
  %228 = load i80, ptr %3, align 8
  %229 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %228, i80 1)
  %230 = extractvalue { i80, i1 } %229, 1
  br i1 %230, label %233, label %234

231:                                              ; preds = %222
  br label %227

232:                                              ; preds = %222
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

233:                                              ; preds = %227
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

234:                                              ; preds = %227
  %235 = extractvalue { i80, i1 } %229, 0
  %236 = lshr i80 %235, 1
  br i1 true, label %244, label %245

237:                                              ; preds = %244
  %238 = zext i1 %216 to i80
  %239 = xor i80 %238, -1
  %240 = and i80 %236, %239
  store i80 %240, ptr %3, align 8
  %241 = load i80, ptr %3, align 8
  %242 = or i80 %241, %7
  %243 = bitcast i80 %242 to x86_fp80
  ret x86_fp80 %243

244:                                              ; preds = %234
  br label %237

245:                                              ; preds = %234
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

246:                                              ; preds = %156
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

247:                                              ; preds = %156
  %248 = extractvalue { i32, i1 } %157, 0
  %249 = icmp sge i32 %248, 0
  br i1 %249, label %252, label %253

250:                                              ; preds = %252
  %251 = sext i32 %248 to i80
  br i1 true, label %258, label %259

252:                                              ; preds = %247
  br label %250

253:                                              ; preds = %247
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

254:                                              ; preds = %258
  %255 = shl i80 %251, 64
  %256 = call fastcc { i80, i1 } @llvm.usub.with.overflow.i80(i80 %6, i80 %255)
  %257 = extractvalue { i80, i1 } %256, 1
  br i1 %257, label %260, label %261

258:                                              ; preds = %250
  br label %254

259:                                              ; preds = %250
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

260:                                              ; preds = %254
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

261:                                              ; preds = %254
  %262 = extractvalue { i80, i1 } %256, 0
  %263 = bitcast i80 %262 to x86_fp80
  ret x86_fp80 %263
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3771(x86_fp80 %0) unnamed_addr #0 {
  %2 = bitcast x86_fp80 %0 to i80
  %3 = and i80 %2, 604462909807314587353087
  %4 = icmp ult i80 %3, 604453686435277732577280
  ret i1 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__divtc3(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f128)") %0, fp128 %1, fp128 %2, fp128 %3, fp128 %4) #0 {
  %6 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %7 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %8 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %9 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %10 = alloca fp128, align 16
  %11 = alloca fp128, align 16
  store fp128 %3, ptr %11, align 16
  store fp128 %4, ptr %10, align 16
  %12 = load fp128, ptr %11, align 16
  %13 = call fp128 @fabsq(fp128 %12)
  %14 = load fp128, ptr %10, align 16
  %15 = call fp128 @fabsq(fp128 %14)
  %16 = call fp128 @fmaxq(fp128 %13, fp128 %15)
  %17 = call fastcc i32 @math.ilogb.ilogb__anon_3772(fp128 %16)
  %18 = icmp ne i32 %17, 2147483647
  br i1 %18, label %23, label %25

19:                                               ; preds = %80, %198, %152, %105
  %20 = phi ptr [ %8, %105 ], [ %7, %152 ], [ %6, %198 ], [ %9, %80 ]
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %20, i64 32, i1 false)
  ret void

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %5
  %24 = icmp ne i32 %17, -2147483648
  br label %21

25:                                               ; preds = %5
  br label %21

26:                                               ; preds = %48, %57
  %27 = phi i32 [ %17, %57 ], [ 0, %48 ]
  %28 = load fp128, ptr %11, align 16
  %29 = load fp128, ptr %11, align 16
  %30 = call fp128 @__multf3(fp128 %28, fp128 %29)
  %31 = load fp128, ptr %10, align 16
  %32 = load fp128, ptr %10, align 16
  %33 = call fp128 @__multf3(fp128 %31, fp128 %32)
  %34 = call fp128 @__addtf3(fp128 %30, fp128 %33)
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %9, i32 0, i32 0
  %36 = load fp128, ptr %11, align 16
  %37 = call fp128 @__multf3(fp128 %1, fp128 %36)
  %38 = load fp128, ptr %10, align 16
  %39 = call fp128 @__multf3(fp128 %2, fp128 %38)
  %40 = call fp128 @__addtf3(fp128 %37, fp128 %39)
  %41 = call fp128 @__divtf3(fp128 %40, fp128 %34)
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load fp128, ptr %11, align 16
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %17)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %45, i32 %51)
  store fp128 %52, ptr %11, align 16
  %53 = load fp128, ptr %10, align 16
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %17)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %53, i32 %58)
  store fp128 %59, ptr %10, align 16
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %41, i32 %62)
  store fp128 %63, ptr %35, align 16
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %9, i32 0, i32 1
  %65 = load fp128, ptr %11, align 16
  %66 = call fp128 @__multf3(fp128 %2, fp128 %65)
  %67 = load fp128, ptr %10, align 16
  %68 = call fp128 @__multf3(fp128 %1, fp128 %67)
  %69 = call fp128 @__subtf3(fp128 %66, fp128 %68)
  %70 = call fp128 @__divtf3(fp128 %69, fp128 %34)
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %70, i32 %75)
  store fp128 %76, ptr %64, align 16
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %9, i32 0, i32 0
  %78 = load fp128, ptr %77, align 16
  %79 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %91, %92
  br label %19

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %91

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %9, i32 0, i32 1
  %85 = load fp128, ptr %84, align 16
  %86 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = call i32 @__eqtf2(fp128 %34, fp128 0xL00000000000000000000000000000000)
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %95, label %98

91:                                               ; preds = %81
  br label %80

92:                                               ; preds = %118
  br label %80

93:                                               ; preds = %98, %99
  %94 = phi i1 [ %100, %99 ], [ false, %98 ]
  br i1 %94, label %105, label %114

95:                                               ; preds = %88
  %96 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %1)
  %97 = xor i1 %96, true
  br i1 %97, label %101, label %102

98:                                               ; preds = %88
  br label %93

99:                                               ; preds = %102, %101
  %100 = phi i1 [ true, %101 ], [ %104, %102 ]
  br label %93

101:                                              ; preds = %95
  br label %99

102:                                              ; preds = %95
  %103 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %2)
  %104 = xor i1 %103, true
  br label %99

105:                                              ; preds = %93
  %106 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 0
  %107 = load fp128, ptr %11, align 16
  %108 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000007FFF000000000000, fp128 %107)
  %109 = call fp128 @__multf3(fp128 %108, fp128 %1)
  store fp128 %109, ptr %106, align 16
  %110 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 1
  %111 = load fp128, ptr %11, align 16
  %112 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000007FFF000000000000, fp128 %111)
  %113 = call fp128 @__multf3(fp128 %112, fp128 %2)
  store fp128 %113, ptr %110, align 16
  br label %19

114:                                              ; preds = %93
  %115 = bitcast fp128 %1 to i128
  %116 = and i128 %115, 170141183460469231731687303715884105727
  %117 = icmp eq i128 %116, 170135991163610696904058773219554885632
  br i1 %117, label %121, label %122

118:                                              ; preds = %171
  br label %92

119:                                              ; preds = %122, %121
  %120 = phi i1 [ true, %121 ], [ %125, %122 ]
  br i1 %120, label %128, label %131

121:                                              ; preds = %114
  br label %119

122:                                              ; preds = %114
  %123 = bitcast fp128 %2 to i128
  %124 = and i128 %123, 170141183460469231731687303715884105727
  %125 = icmp eq i128 %124, 170135991163610696904058773219554885632
  br label %119

126:                                              ; preds = %131, %128
  %127 = phi i1 [ %130, %128 ], [ false, %131 ]
  br i1 %127, label %134, label %137

128:                                              ; preds = %119
  %129 = load fp128, ptr %11, align 16
  %130 = call fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %129)
  br label %126

131:                                              ; preds = %119
  br label %126

132:                                              ; preds = %137, %134
  %133 = phi i1 [ %136, %134 ], [ false, %137 ]
  br i1 %133, label %138, label %142

134:                                              ; preds = %126
  %135 = load fp128, ptr %10, align 16
  %136 = call fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %135)
  br label %132

137:                                              ; preds = %126
  br label %132

138:                                              ; preds = %132
  %139 = bitcast fp128 %1 to i128
  %140 = and i128 %139, 170141183460469231731687303715884105727
  %141 = icmp eq i128 %140, 170135991163610696904058773219554885632
  br i1 %141, label %150, label %151

142:                                              ; preds = %132
  %143 = icmp eq i32 %17, 2147483647
  br i1 %143, label %174, label %176

144:                                              ; preds = %151, %150
  %145 = phi fp128 [ 0xL00000000000000003FFF000000000000, %150 ], [ 0xL00000000000000000000000000000000, %151 ]
  %146 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %145, fp128 %1)
  %147 = bitcast fp128 %2 to i128
  %148 = and i128 %147, 170141183460469231731687303715884105727
  %149 = icmp eq i128 %148, 170135991163610696904058773219554885632
  br i1 %149, label %169, label %170

150:                                              ; preds = %138
  br label %144

151:                                              ; preds = %138
  br label %144

152:                                              ; preds = %170, %169
  %153 = phi fp128 [ 0xL00000000000000003FFF000000000000, %169 ], [ 0xL00000000000000000000000000000000, %170 ]
  %154 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %153, fp128 %2)
  %155 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 0
  %156 = load fp128, ptr %11, align 16
  %157 = call fp128 @__multf3(fp128 %146, fp128 %156)
  %158 = load fp128, ptr %10, align 16
  %159 = call fp128 @__multf3(fp128 %154, fp128 %158)
  %160 = call fp128 @__subtf3(fp128 %157, fp128 %159)
  %161 = call fp128 @__multf3(fp128 0xL00000000000000007FFF000000000000, fp128 %160)
  store fp128 %161, ptr %155, align 16
  %162 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 1
  %163 = load fp128, ptr %11, align 16
  %164 = call fp128 @__multf3(fp128 %154, fp128 %163)
  %165 = load fp128, ptr %10, align 16
  %166 = call fp128 @__multf3(fp128 %146, fp128 %165)
  %167 = call fp128 @__subtf3(fp128 %164, fp128 %166)
  %168 = call fp128 @__multf3(fp128 0xL00000000000000007FFF000000000000, fp128 %167)
  store fp128 %168, ptr %162, align 16
  br label %19

169:                                              ; preds = %144
  br label %152

170:                                              ; preds = %144
  br label %152

171:                                              ; preds = %187
  br label %118

172:                                              ; preds = %176, %174
  %173 = phi i1 [ %175, %174 ], [ false, %176 ]
  br i1 %173, label %179, label %181

174:                                              ; preds = %142
  %175 = call fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %1)
  br label %172

176:                                              ; preds = %142
  br label %172

177:                                              ; preds = %181, %179
  %178 = phi i1 [ %180, %179 ], [ false, %181 ]
  br i1 %178, label %182, label %187

179:                                              ; preds = %172
  %180 = call fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %2)
  br label %177

181:                                              ; preds = %172
  br label %177

182:                                              ; preds = %177
  %183 = load fp128, ptr %11, align 16
  %184 = bitcast fp128 %183 to i128
  %185 = and i128 %184, 170141183460469231731687303715884105727
  %186 = icmp eq i128 %185, 170135991163610696904058773219554885632
  br i1 %186, label %196, label %197

187:                                              ; preds = %177
  br label %171

188:                                              ; preds = %197, %196
  %189 = phi fp128 [ 0xL00000000000000003FFF000000000000, %196 ], [ 0xL00000000000000000000000000000000, %197 ]
  %190 = load fp128, ptr %11, align 16
  %191 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %189, fp128 %190)
  %192 = load fp128, ptr %10, align 16
  %193 = bitcast fp128 %192 to i128
  %194 = and i128 %193, 170141183460469231731687303715884105727
  %195 = icmp eq i128 %194, 170135991163610696904058773219554885632
  br i1 %195, label %212, label %213

196:                                              ; preds = %182
  br label %188

197:                                              ; preds = %182
  br label %188

198:                                              ; preds = %213, %212
  %199 = phi fp128 [ 0xL00000000000000003FFF000000000000, %212 ], [ 0xL00000000000000000000000000000000, %213 ]
  %200 = load fp128, ptr %10, align 16
  %201 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 %199, fp128 %200)
  %202 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 0
  %203 = call fp128 @__multf3(fp128 %1, fp128 %191)
  %204 = call fp128 @__multf3(fp128 %2, fp128 %201)
  %205 = call fp128 @__addtf3(fp128 %203, fp128 %204)
  %206 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %205)
  store fp128 %206, ptr %202, align 16
  %207 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 1
  %208 = call fp128 @__multf3(fp128 %2, fp128 %191)
  %209 = call fp128 @__multf3(fp128 %1, fp128 %201)
  %210 = call fp128 @__subtf3(fp128 %208, fp128 %209)
  %211 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %210)
  store fp128 %211, ptr %207, align 16
  br label %19

212:                                              ; preds = %188
  br label %198

213:                                              ; preds = %188
  br label %198
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3772(fp128 %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_4065(fp128 %0)
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i32, align 4
  %6 = bitcast fp128 %0 to i128
  %7 = and i128 %6, -170141183460469231731687303715884105728
  %8 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %0)
  br i1 %8, label %16, label %17

9:                                                ; preds = %21
  %10 = shl i128 %6, 1
  %11 = lshr i128 %10, 113
  %12 = sub i128 2147483647, %11
  %13 = icmp ule i128 %12, 2147483647
  br i1 %13, label %26, label %27

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %19, %17 ]
  br i1 %15, label %20, label %21

16:                                               ; preds = %2
  br label %14

17:                                               ; preds = %2
  %18 = call fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %0)
  %19 = xor i1 %18, true
  br label %14

20:                                               ; preds = %14
  ret fp128 %0

21:                                               ; preds = %14
  br label %9

22:                                               ; preds = %26
  %23 = trunc i128 %11 to i32
  store i32 %23, ptr %5, align 4
  %24 = load i32, ptr %5, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %38

26:                                               ; preds = %9
  br label %22

27:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

28:                                               ; preds = %38, %45
  %29 = icmp sge i32 %1, 0
  br i1 %29, label %47, label %51

30:                                               ; preds = %22
  %31 = load i32, ptr %5, align 4
  %32 = shl i128 %6, 1
  %33 = call i128 @llvm.ctlz.i128(i128 %32, i1 false)
  %34 = trunc i128 %33 to i8
  %35 = zext i8 %34 to i32
  %36 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 15, i32 %35)
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %39, label %40

38:                                               ; preds = %22
  br label %28

39:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

40:                                               ; preds = %30
  %41 = extractvalue { i32, i1 } %36, 0
  %42 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %41)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %40
  %46 = extractvalue { i32, i1 } %42, 0
  store i32 %46, ptr %5, align 4
  br label %28

47:                                               ; preds = %28
  %48 = load i32, ptr %5, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32766, i32 %48)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %57, label %58

51:                                               ; preds = %28
  %52 = load i32, ptr %5, align 4
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %52)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %136, label %137

55:                                               ; preds = %68
  %56 = icmp sge i32 %1, 0
  br i1 %56, label %127, label %128

57:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %47
  %59 = extractvalue { i32, i1 } %49, 0
  %60 = icmp sgt i32 %1, %59
  br i1 %60, label %61, label %64

61:                                               ; preds = %58
  %62 = or i128 170135991163610696904058773219554885632, %7
  %63 = bitcast i128 %62 to fp128
  ret fp128 %63

64:                                               ; preds = %58
  %65 = load i32, ptr %5, align 4
  %66 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %65, i32 %1)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %69, label %70

68:                                               ; preds = %87
  br label %55

69:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %64
  %71 = extractvalue { i32, i1 } %66, 0
  %72 = icmp sle i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = sub i32 127, %1
  %75 = icmp ule i32 %74, 127
  br i1 %75, label %85, label %86

76:                                               ; preds = %70
  %77 = load i32, ptr %5, align 4
  %78 = icmp sle i32 %77, 0
  br i1 %78, label %88, label %92

79:                                               ; preds = %85
  %80 = trunc i32 %1 to i7
  %81 = zext i7 %80 to i128
  %82 = shl i128 %6, %81
  %83 = or i128 %82, %7
  %84 = bitcast i128 %83 to fp128
  ret fp128 %84

85:                                               ; preds = %73
  br label %79

86:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

87:                                               ; preds = %92
  br label %68

88:                                               ; preds = %76
  %89 = load i32, ptr %5, align 4
  %90 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %93, label %94

92:                                               ; preds = %76
  br label %87

93:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %88
  %95 = extractvalue { i32, i1 } %90, 0
  %96 = icmp sge i32 %95, 0
  br i1 %96, label %104, label %105

97:                                               ; preds = %104
  %98 = sext i32 %95 to i128
  %99 = shl i128 %98, 112
  store i128 %99, ptr %4, align 8
  %100 = load i128, ptr %4, align 8
  %101 = load i32, ptr %5, align 4
  %102 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %101)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %106, label %107

104:                                              ; preds = %94
  br label %97

105:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

106:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %97
  %108 = extractvalue { i32, i1 } %102, 0
  %109 = sub i32 127, %108
  %110 = icmp ule i32 %109, 127
  br i1 %110, label %120, label %121

111:                                              ; preds = %120
  %112 = trunc i32 %108 to i7
  %113 = zext i7 %112 to i128
  %114 = shl i128 %6, %113
  %115 = and i128 %114, 5192296858534827628530496329220095
  %116 = or i128 %100, %115
  store i128 %116, ptr %4, align 8
  %117 = load i128, ptr %4, align 8
  %118 = or i128 %117, %7
  %119 = bitcast i128 %118 to fp128
  ret fp128 %119

120:                                              ; preds = %107
  br label %111

121:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

122:                                              ; preds = %127
  %123 = sext i32 %1 to i128
  %124 = shl i128 %123, 112
  %125 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %6, i128 %124)
  %126 = extractvalue { i128, i1 } %125, 1
  br i1 %126, label %129, label %130

127:                                              ; preds = %55
  br label %122

128:                                              ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

129:                                              ; preds = %122
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

130:                                              ; preds = %122
  %131 = extractvalue { i128, i1 } %125, 0
  %132 = bitcast i128 %131 to fp128
  ret fp128 %132

133:                                              ; preds = %144
  %134 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %135 = extractvalue { i32, i1 } %134, 1
  br i1 %135, label %223, label %224

136:                                              ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %51
  %138 = extractvalue { i32, i1 } %53, 0
  %139 = icmp sle i32 %1, %138
  br i1 %139, label %140, label %144

140:                                              ; preds = %137
  %141 = load i32, ptr %5, align 4
  %142 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 112, i32 %141)
  %143 = extractvalue { i32, i1 } %142, 1
  br i1 %143, label %148, label %149

144:                                              ; preds = %137
  br label %133

145:                                              ; preds = %159
  %146 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %147 = extractvalue { i32, i1 } %146, 1
  br i1 %147, label %160, label %161

148:                                              ; preds = %140
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

149:                                              ; preds = %140
  %150 = extractvalue { i32, i1 } %142, 0
  %151 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %150)
  %152 = extractvalue { i32, i1 } %151, 1
  br i1 %152, label %153, label %154

153:                                              ; preds = %149
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

154:                                              ; preds = %149
  %155 = extractvalue { i32, i1 } %151, 0
  %156 = icmp slt i32 %1, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %154
  %158 = bitcast i128 %7 to fp128
  ret fp128 %158

159:                                              ; preds = %154
  br label %145

160:                                              ; preds = %145
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

161:                                              ; preds = %145
  %162 = extractvalue { i32, i1 } %146, 0
  %163 = load i32, ptr %5, align 4
  %164 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %163, i32 %1)
  %165 = extractvalue { i32, i1 } %164, 1
  br i1 %165, label %166, label %167

166:                                              ; preds = %161
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

167:                                              ; preds = %161
  %168 = extractvalue { i32, i1 } %164, 0
  %169 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %168)
  %170 = extractvalue { i32, i1 } %169, 1
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %167
  %173 = extractvalue { i32, i1 } %169, 0
  %174 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %173, i32 1)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

176:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %172
  %178 = extractvalue { i32, i1 } %174, 0
  %179 = call i32 @llvm.smin.i32(i32 %162, i32 %178)
  %180 = sub i32 127, %179
  %181 = icmp ule i32 %180, 127
  br i1 %181, label %188, label %189

182:                                              ; preds = %188
  %183 = trunc i32 %179 to i7
  %184 = call i128 @llvm.cttz.i128(i128 %6, i1 false)
  %185 = trunc i128 %184 to i8
  %186 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %183, i7 1)
  %187 = extractvalue { i7, i1 } %186, 1
  br i1 %187, label %190, label %191

188:                                              ; preds = %177
  br label %182

189:                                              ; preds = %177
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

190:                                              ; preds = %182
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

191:                                              ; preds = %182
  %192 = extractvalue { i7, i1 } %186, 0
  %193 = zext i7 %192 to i8
  %194 = icmp eq i8 %185, %193
  %195 = and i128 %6, 5192296858534827628530496329220095
  store i128 %195, ptr %3, align 8
  %196 = load i128, ptr %3, align 8
  %197 = load i32, ptr %5, align 4
  %198 = icmp sgt i32 %197, 0
  %199 = zext i1 %198 to i128
  %200 = shl i128 %199, 112
  %201 = or i128 %196, %200
  store i128 %201, ptr %3, align 8
  %202 = load i128, ptr %3, align 8
  %203 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %183, i7 1)
  %204 = extractvalue { i7, i1 } %203, 1
  br i1 %204, label %205, label %206

205:                                              ; preds = %191
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

206:                                              ; preds = %191
  %207 = extractvalue { i7, i1 } %203, 0
  %208 = zext i7 %207 to i128
  %209 = lshr i128 %202, %208
  store i128 %209, ptr %3, align 8
  %210 = load i128, ptr %3, align 8
  %211 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %210, i128 1)
  %212 = extractvalue { i128, i1 } %211, 1
  br i1 %212, label %213, label %214

213:                                              ; preds = %206
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

214:                                              ; preds = %206
  %215 = extractvalue { i128, i1 } %211, 0
  %216 = lshr i128 %215, 1
  %217 = zext i1 %194 to i128
  %218 = xor i128 %217, -1
  %219 = and i128 %216, %218
  store i128 %219, ptr %3, align 8
  %220 = load i128, ptr %3, align 8
  %221 = or i128 %220, %7
  %222 = bitcast i128 %221 to fp128
  ret fp128 %222

223:                                              ; preds = %133
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

224:                                              ; preds = %133
  %225 = extractvalue { i32, i1 } %134, 0
  %226 = icmp sge i32 %225, 0
  br i1 %226, label %232, label %233

227:                                              ; preds = %232
  %228 = sext i32 %225 to i128
  %229 = shl i128 %228, 112
  %230 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 %6, i128 %229)
  %231 = extractvalue { i128, i1 } %230, 1
  br i1 %231, label %234, label %235

232:                                              ; preds = %224
  br label %227

233:                                              ; preds = %224
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

234:                                              ; preds = %227
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

235:                                              ; preds = %227
  %236 = extractvalue { i128, i1 } %230, 0
  %237 = bitcast i128 %236 to fp128
  ret fp128 %237
}

; Function Attrs: nounwind uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %0) unnamed_addr #0 {
  %2 = bitcast fp128 %0 to i128
  %3 = and i128 %2, 170141183460469231731687303715884105727
  %4 = icmp ult i128 %3, 170135991163610696904058773219554885632
  ret i1 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__ceilh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @ceilf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @ceilf(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  store i32 %6, ptr %5, align 4
  %7 = load i32, ptr %5, align 4
  %8 = lshr i32 %7, 23
  %9 = and i32 %8, 255
  %10 = sub i32 2147483647, %9
  %11 = icmp ule i32 %10, 2147483647
  br i1 %11, label %15, label %16

12:                                               ; preds = %15
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 127)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %1
  br label %12

16:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @90)
  unreachable

17:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %12
  %19 = extractvalue { i32, i1 } %13, 0
  store i32 %19, ptr %4, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %20 = ptrtoint ptr %3 to i64
  %21 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %20, ptr %22, align 8
  %23 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %23, align 8
  %24 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %24, align 8
  %25 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %25, align 8
  %26 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %26, align 8
  %27 = ptrtoint ptr %2 to i64
  %28 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %27, i64 0)
  %29 = fcmp oeq float %0, 0.000000e+00
  br i1 %29, label %33, label %34

30:                                               ; preds = %34
  %31 = load i32, ptr %4, align 4
  %32 = icmp sge i32 %31, 23
  br i1 %32, label %35, label %36

33:                                               ; preds = %18
  ret float %0

34:                                               ; preds = %18
  br label %30

35:                                               ; preds = %30
  ret float %0

36:                                               ; preds = %30
  %37 = load i32, ptr %4, align 4
  %38 = icmp sge i32 %37, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %36
  %40 = load i32, ptr %4, align 4
  %41 = sub i32 31, %40
  %42 = icmp ule i32 %41, 31
  br i1 %42, label %56, label %57

43:                                               ; preds = %36
  %44 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %44)
  %45 = load i32, ptr %5, align 4
  %46 = lshr i32 %45, 31
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %81, label %82

48:                                               ; preds = %56
  %49 = trunc i32 %40 to i5
  %50 = zext i5 %49 to i32
  %51 = lshr i32 8388607, %50
  store i32 %51, ptr %3, align 4
  %52 = load i32, ptr %5, align 4
  %53 = load i32, ptr %3, align 4
  %54 = and i32 %52, %53
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %63, label %64

56:                                               ; preds = %39
  br label %48

57:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @90)
  unreachable

58:                                               ; preds = %64
  %59 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %59)
  %60 = load i32, ptr %5, align 4
  %61 = lshr i32 %60, 31
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %72, label %77

63:                                               ; preds = %48
  ret float %0

64:                                               ; preds = %48
  br label %58

65:                                               ; preds = %77, %79
  %66 = load i32, ptr %5, align 4
  %67 = load i32, ptr %3, align 4
  %68 = xor i32 %67, -1
  %69 = and i32 %66, %68
  store i32 %69, ptr %5, align 4
  %70 = load i32, ptr %5, align 4
  %71 = bitcast i32 %70 to float
  ret float %71

72:                                               ; preds = %58
  %73 = load i32, ptr %5, align 4
  %74 = load i32, ptr %3, align 4
  %75 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %73, i32 %74)
  %76 = extractvalue { i32, i1 } %75, 1
  br i1 %76, label %78, label %79

77:                                               ; preds = %58
  br label %65

78:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %72
  %80 = extractvalue { i32, i1 } %75, 0
  store i32 %80, ptr %5, align 4
  br label %65

81:                                               ; preds = %43
  ret float -0.000000e+00

82:                                               ; preds = %43
  ret float 1.000000e+00
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.doNotOptimizeAway__anon_3775(float %0) unnamed_addr #0 {
  call fastcc void @mem.doNotOptimizeAway__anon_4327(float %0)
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @ceil(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca double, align 8
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 52
  %6 = and i64 %5, 2047
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %7 = ptrtoint ptr %3 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %2 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp uge i64 %6, 1075
  br i1 %16, label %22, label %23

17:                                               ; preds = %26
  %18 = lshr i64 %4, 63
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %29, label %33

20:                                               ; preds = %23, %22
  %21 = phi i1 [ true, %22 ], [ %24, %23 ]
  br i1 %21, label %25, label %26

22:                                               ; preds = %1
  br label %20

23:                                               ; preds = %1
  %24 = fcmp oeq double %0, 0.000000e+00
  br label %20

25:                                               ; preds = %20
  ret double %0

26:                                               ; preds = %20
  br label %17

27:                                               ; preds = %33, %29
  %28 = icmp ule i64 %6, 1022
  br i1 %28, label %37, label %41

29:                                               ; preds = %17
  %30 = fsub double %0, 0x4330000000000000
  %31 = fadd double %30, 0x4330000000000000
  %32 = fsub double %31, %0
  store double %32, ptr %3, align 8
  br label %27

33:                                               ; preds = %17
  %34 = fadd double %0, 0x4330000000000000
  %35 = fsub double %34, 0x4330000000000000
  %36 = fsub double %35, %0
  store double %36, ptr %3, align 8
  br label %27

37:                                               ; preds = %27
  %38 = load double, ptr %3, align 8
  call fastcc void @math.doNotOptimizeAway__anon_3776(double %38)
  %39 = lshr i64 %4, 63
  %40 = icmp ne i64 %39, 0
  br i1 %40, label %44, label %45

41:                                               ; preds = %27
  %42 = load double, ptr %3, align 8
  %43 = fcmp olt double %42, 0.000000e+00
  br i1 %43, label %46, label %50

44:                                               ; preds = %37
  ret double -0.000000e+00

45:                                               ; preds = %37
  ret double 1.000000e+00

46:                                               ; preds = %41
  %47 = load double, ptr %3, align 8
  %48 = fadd double %0, %47
  %49 = fadd double %48, 1.000000e+00
  ret double %49

50:                                               ; preds = %41
  %51 = load double, ptr %3, align 8
  %52 = fadd double %0, %51
  ret double %52
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.doNotOptimizeAway__anon_3776(double %0) unnamed_addr #0 {
  call fastcc void @mem.doNotOptimizeAway__anon_4328(double %0)
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__ceilx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @ceilq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @ceilq(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca fp128, align 16
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 112
  %6 = and i128 %5, 32767
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %7 = ptrtoint ptr %3 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %2 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp uge i128 %6, 16495
  br i1 %16, label %22, label %23

17:                                               ; preds = %27
  %18 = lshr i128 %4, 127
  %19 = icmp ne i128 %18, 0
  br i1 %19, label %30, label %34

20:                                               ; preds = %23, %22
  %21 = phi i1 [ true, %22 ], [ %25, %23 ]
  br i1 %21, label %26, label %27

22:                                               ; preds = %1
  br label %20

23:                                               ; preds = %1
  %24 = call i32 @__eqtf2(fp128 %0, fp128 0xL00000000000000000000000000000000)
  %25 = icmp eq i32 %24, 0
  br label %20

26:                                               ; preds = %20
  ret fp128 %0

27:                                               ; preds = %20
  br label %17

28:                                               ; preds = %34, %30
  %29 = icmp ule i128 %6, 16382
  br i1 %29, label %38, label %42

30:                                               ; preds = %17
  %31 = call fp128 @__subtf3(fp128 %0, fp128 0xL0000000000000000406F000000000000)
  %32 = call fp128 @__addtf3(fp128 %31, fp128 0xL0000000000000000406F000000000000)
  %33 = call fp128 @__subtf3(fp128 %32, fp128 %0)
  store fp128 %33, ptr %3, align 16
  br label %28

34:                                               ; preds = %17
  %35 = call fp128 @__addtf3(fp128 %0, fp128 0xL0000000000000000406F000000000000)
  %36 = call fp128 @__subtf3(fp128 %35, fp128 0xL0000000000000000406F000000000000)
  %37 = call fp128 @__subtf3(fp128 %36, fp128 %0)
  store fp128 %37, ptr %3, align 16
  br label %28

38:                                               ; preds = %28
  %39 = load fp128, ptr %3, align 16
  call fastcc void @math.doNotOptimizeAway__anon_3777(fp128 %39)
  %40 = lshr i128 %4, 127
  %41 = icmp ne i128 %40, 0
  br i1 %41, label %46, label %47

42:                                               ; preds = %28
  %43 = load fp128, ptr %3, align 16
  %44 = call i32 @__lttf2(fp128 %43, fp128 0xL00000000000000000000000000000000)
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %48, label %52

46:                                               ; preds = %38
  ret fp128 0xL00000000000000008000000000000000

47:                                               ; preds = %38
  ret fp128 0xL00000000000000003FFF000000000000

48:                                               ; preds = %42
  %49 = load fp128, ptr %3, align 16
  %50 = call fp128 @__addtf3(fp128 %0, fp128 %49)
  %51 = call fp128 @__addtf3(fp128 %50, fp128 0xL00000000000000003FFF000000000000)
  ret fp128 %51

52:                                               ; preds = %42
  %53 = load fp128, ptr %3, align 16
  %54 = call fp128 @__addtf3(fp128 %0, fp128 %53)
  ret fp128 %54
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.doNotOptimizeAway__anon_3777(fp128 %0) unnamed_addr #0 {
  call fastcc void @mem.doNotOptimizeAway__anon_4329(fp128 %0)
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @ceill(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__ceilx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__cosh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @cosf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @cosf(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca [6 x i64], align 8
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  store i32 %6, ptr %5, align 4
  %7 = load i32, ptr %5, align 4
  %8 = lshr i32 %7, 31
  %9 = icmp ne i32 %8, 0
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 2147483647
  store i32 %11, ptr %5, align 4
  %12 = load i32, ptr %5, align 4
  %13 = icmp ule i32 %12, 1061752794
  br i1 %13, label %17, label %20

14:                                               ; preds = %20
  %15 = load i32, ptr %5, align 4
  %16 = icmp ule i32 %15, 1081824209
  br i1 %16, label %30, label %33

17:                                               ; preds = %1
  %18 = load i32, ptr %5, align 4
  %19 = icmp ult i32 %18, 964689920
  br i1 %19, label %24, label %26

20:                                               ; preds = %1
  br label %14

21:                                               ; preds = %26
  %22 = fpext float %0 to double
  %23 = call fastcc float @compiler_rt.trig.__cosdf(double %22)
  ret float %23

24:                                               ; preds = %17
  %25 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %25)
  ret float 1.000000e+00

26:                                               ; preds = %17
  br label %21

27:                                               ; preds = %33
  %28 = load i32, ptr %5, align 4
  %29 = icmp ule i32 %28, 1088565717
  br i1 %29, label %57, label %60

30:                                               ; preds = %14
  %31 = load i32, ptr %5, align 4
  %32 = icmp ugt i32 %31, 1075235811
  br i1 %32, label %34, label %35

33:                                               ; preds = %14
  br label %27

34:                                               ; preds = %30
  br i1 %9, label %40, label %43

35:                                               ; preds = %30
  br i1 %9, label %46, label %50

36:                                               ; preds = %43, %40
  %37 = phi double [ %42, %40 ], [ %45, %43 ]
  %38 = call fastcc float @compiler_rt.trig.__cosdf(double %37)
  %39 = fneg float %38
  ret float %39

40:                                               ; preds = %34
  %41 = fpext float %0 to double
  %42 = fadd double %41, 0x400921FB54442D18
  br label %36

43:                                               ; preds = %34
  %44 = fpext float %0 to double
  %45 = fsub double %44, 0x400921FB54442D18
  br label %36

46:                                               ; preds = %35
  %47 = fpext float %0 to double
  %48 = fadd double %47, 0x3FF921FB54442D18
  %49 = call fastcc float @compiler_rt.trig.__sindf(double %48)
  ret float %49

50:                                               ; preds = %35
  %51 = fpext float %0 to double
  %52 = fsub double 0x3FF921FB54442D18, %51
  %53 = call fastcc float @compiler_rt.trig.__sindf(double %52)
  ret float %53

54:                                               ; preds = %60
  %55 = load i32, ptr %5, align 4
  %56 = icmp uge i32 %55, 2139095040
  br i1 %56, label %93, label %95

57:                                               ; preds = %27
  %58 = load i32, ptr %5, align 4
  %59 = icmp ugt i32 %58, 1085271519
  br i1 %59, label %61, label %62

60:                                               ; preds = %27
  br label %54

61:                                               ; preds = %57
  br i1 %9, label %66, label %69

62:                                               ; preds = %57
  br i1 %9, label %72, label %77

63:                                               ; preds = %69, %66
  %64 = phi double [ %68, %66 ], [ %71, %69 ]
  %65 = call fastcc float @compiler_rt.trig.__cosdf(double %64)
  ret float %65

66:                                               ; preds = %61
  %67 = fpext float %0 to double
  %68 = fadd double %67, 0x401921FB54442D18
  br label %63

69:                                               ; preds = %61
  %70 = fpext float %0 to double
  %71 = fsub double %70, 0x401921FB54442D18
  br label %63

72:                                               ; preds = %62
  %73 = fneg float %0
  %74 = fpext float %73 to double
  %75 = fsub double %74, 0x4012D97C7F3321D2
  %76 = call fastcc float @compiler_rt.trig.__sindf(double %75)
  ret float %76

77:                                               ; preds = %62
  %78 = fpext float %0 to double
  %79 = fsub double %78, 0x4012D97C7F3321D2
  %80 = call fastcc float @compiler_rt.trig.__sindf(double %79)
  ret float %80

81:                                               ; preds = %95
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %82 = ptrtoint ptr %4 to i64
  %83 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %83, align 8
  %84 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %82, ptr %84, align 8
  %85 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %85, align 8
  %86 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %86, align 8
  %87 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %87, align 8
  %88 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %88, align 8
  %89 = ptrtoint ptr %3 to i64
  %90 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %89, i64 0)
  %91 = call fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %4)
  %92 = and i32 %91, 3
  switch i32 %92, label %98 [
    i32 0, label %101
    i32 1, label %104
    i32 2, label %108
  ]

93:                                               ; preds = %54
  %94 = fsub float %0, %0
  ret float %94

95:                                               ; preds = %54
  br label %81

96:                                               ; preds = %98, %108, %104, %101
  %97 = load float, ptr %2, align 4
  ret float %97

98:                                               ; preds = %81
  %99 = load double, ptr %4, align 8
  %100 = call fastcc float @compiler_rt.trig.__sindf(double %99)
  store float %100, ptr %2, align 4
  br label %96

101:                                              ; preds = %81
  %102 = load double, ptr %4, align 8
  %103 = call fastcc float @compiler_rt.trig.__cosdf(double %102)
  store float %103, ptr %2, align 4
  br label %96

104:                                              ; preds = %81
  %105 = load double, ptr %4, align 8
  %106 = fneg double %105
  %107 = call fastcc float @compiler_rt.trig.__sindf(double %106)
  store float %107, ptr %2, align 4
  br label %96

108:                                              ; preds = %81
  %109 = load double, ptr %4, align 8
  %110 = call fastcc float @compiler_rt.trig.__cosdf(double %109)
  %111 = fneg float %110
  store float %111, ptr %2, align 4
  br label %96
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.trig.__cosdf(double %0) unnamed_addr #0 {
  %2 = fmul double %0, %0
  %3 = fmul double %2, %2
  %4 = fmul double %2, 0x3EF99342E0EE5069
  %5 = fadd double 0xBF56C087E80F1E27, %4
  %6 = fmul double %2, 0xBFDFFFFFFD0C5E81
  %7 = fadd double 1.000000e+00, %6
  %8 = fmul double %3, 0x3FA55553E1053A42
  %9 = fadd double %7, %8
  %10 = fmul double %3, %2
  %11 = fmul double %10, %5
  %12 = fadd double %9, %11
  %13 = fptrunc double %12 to float
  ret float %13
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.trig.__sindf(double %0) unnamed_addr #0 {
  %2 = fmul double %0, %0
  %3 = fmul double %2, %2
  %4 = fmul double %2, 0x3EC6CD878C3B46A7
  %5 = fadd double 0xBF2A00F9E2CAE774, %4
  %6 = fmul double %2, %0
  %7 = fmul double %2, 0x3F811110896EFBB2
  %8 = fadd double 0xBFC5555554CBAC77, %7
  %9 = fmul double %6, %8
  %10 = fadd double %0, %9
  %11 = fmul double %6, %3
  %12 = fmul double %11, %5
  %13 = fadd double %10, %12
  %14 = fptrunc double %13 to float
  ret float %14
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %1) unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca [1 x double], align 8
  %10 = alloca [6 x i64], align 8
  %11 = alloca [1 x double], align 8
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 -86, i64 8, i1 false)
  %12 = ptrtoint ptr %11 to i64
  %13 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %12, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 8, ptr %15, align 8
  %16 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %18, align 8
  %19 = ptrtoint ptr %10 to i64
  %20 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %19, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 8, i1 false)
  %21 = ptrtoint ptr %9 to i64
  %22 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %22, align 8
  %23 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %21, ptr %23, align 8
  %24 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 8, ptr %24, align 8
  %25 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %25, align 8
  %26 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %26, align 8
  %27 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %27, align 8
  %28 = ptrtoint ptr %10 to i64
  %29 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %28, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 8, i1 false)
  %30 = ptrtoint ptr %8 to i64
  %31 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %30, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 8, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %36, align 8
  %37 = ptrtoint ptr %10 to i64
  %38 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %37, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %7, i8 -86, i64 4, i1 false)
  %39 = ptrtoint ptr %7 to i64
  %40 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %40, align 8
  %41 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %39, ptr %41, align 8
  %42 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 4, ptr %42, align 8
  %43 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %43, align 8
  %44 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %45, align 8
  %46 = ptrtoint ptr %10 to i64
  %47 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %46, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -86, i64 4, i1 false)
  %48 = ptrtoint ptr %6 to i64
  %49 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %49, align 8
  %50 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %48, ptr %50, align 8
  %51 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 4, ptr %51, align 8
  %52 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %52, align 8
  %53 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %53, align 8
  %54 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %54, align 8
  %55 = ptrtoint ptr %10 to i64
  %56 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %55, i64 0)
  call void @llvm.memset.p0.i64(ptr align 1 %5, i8 -86, i64 1, i1 false)
  %57 = ptrtoint ptr %5 to i64
  %58 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %58, align 8
  %59 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %57, ptr %59, align 8
  %60 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 1, ptr %60, align 8
  %61 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %61, align 8
  %62 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %62, align 8
  %63 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %63, align 8
  %64 = ptrtoint ptr %10 to i64
  %65 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %64, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %66 = ptrtoint ptr %4 to i64
  %67 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %67, align 8
  %68 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %66, ptr %68, align 8
  %69 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 4, ptr %69, align 8
  %70 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %70, align 8
  %71 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %71, align 8
  %72 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %72, align 8
  %73 = ptrtoint ptr %10 to i64
  %74 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %73, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %75 = ptrtoint ptr %3 to i64
  %76 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %76, align 8
  %77 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %75, ptr %77, align 8
  %78 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 4, ptr %78, align 8
  %79 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %79, align 8
  %80 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %80, align 8
  %81 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %81, align 8
  %82 = ptrtoint ptr %10 to i64
  %83 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %82, i64 0)
  %84 = bitcast float %0 to i32
  store i32 %84, ptr %3, align 4
  %85 = load i32, ptr %3, align 4
  %86 = and i32 %85, 2147483647
  store i32 %86, ptr %7, align 4
  %87 = load i32, ptr %7, align 4
  %88 = icmp ult i32 %87, 1305022427
  br i1 %88, label %92, label %104

89:                                               ; preds = %104
  %90 = load i32, ptr %7, align 4
  %91 = icmp uge i32 %90, 2139095040
  br i1 %91, label %164, label %167

92:                                               ; preds = %2
  %93 = fpext float %0 to double
  %94 = fmul double %93, 0x3FE45F306DC9C883
  %95 = fadd double %94, 0x4338000000000000
  %96 = fsub double %95, 0x4338000000000000
  store double %96, ptr %8, align 8
  %97 = load double, ptr %8, align 8
  %98 = fptosi double %97 to i32
  %99 = sitofp i32 %98 to double
  %100 = fsub double %97, %99
  %101 = fcmp olt double %100, 1.000000e+00
  %102 = fcmp ogt double %100, -1.000000e+00
  %103 = and i1 %101, %102
  br i1 %103, label %115, label %116

104:                                              ; preds = %2
  br label %89

105:                                              ; preds = %115
  store i32 %98, ptr %6, align 4
  %106 = load double, ptr %8, align 8
  %107 = fmul double %106, 0x3FF921FB50000000
  %108 = fpext float %0 to double
  %109 = fsub double %108, %107
  %110 = load double, ptr %8, align 8
  %111 = fmul double %110, 0x3E5110B4611A6263
  %112 = fsub double %109, %111
  store double %112, ptr %1, align 8
  %113 = load double, ptr %1, align 8
  %114 = fcmp olt double %113, 0xBFE921FB60000000
  br i1 %114, label %119, label %123

115:                                              ; preds = %92
  br label %105

116:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @165)
  unreachable

117:                                              ; preds = %138, %127
  %118 = load i32, ptr %6, align 4
  ret i32 %118

119:                                              ; preds = %105
  %120 = load i32, ptr %6, align 4
  %121 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %120, i32 1)
  %122 = extractvalue { i32, i1 } %121, 1
  br i1 %122, label %126, label %127

123:                                              ; preds = %105
  %124 = load double, ptr %1, align 8
  %125 = fcmp ogt double %124, 0x3FE921FB60000000
  br i1 %125, label %139, label %143

126:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

127:                                              ; preds = %119
  %128 = extractvalue { i32, i1 } %121, 0
  store i32 %128, ptr %6, align 4
  %129 = load double, ptr %8, align 8
  %130 = fsub double %129, 1.000000e+00
  store double %130, ptr %8, align 8
  %131 = load double, ptr %8, align 8
  %132 = fmul double %131, 0x3FF921FB50000000
  %133 = fpext float %0 to double
  %134 = fsub double %133, %132
  %135 = load double, ptr %8, align 8
  %136 = fmul double %135, 0x3E5110B4611A6263
  %137 = fsub double %134, %136
  store double %137, ptr %1, align 8
  br label %117

138:                                              ; preds = %143, %145
  br label %117

139:                                              ; preds = %123
  %140 = load i32, ptr %6, align 4
  %141 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %140, i32 1)
  %142 = extractvalue { i32, i1 } %141, 1
  br i1 %142, label %144, label %145

143:                                              ; preds = %123
  br label %138

144:                                              ; preds = %139
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

145:                                              ; preds = %139
  %146 = extractvalue { i32, i1 } %141, 0
  store i32 %146, ptr %6, align 4
  %147 = load double, ptr %8, align 8
  %148 = fadd double %147, 1.000000e+00
  store double %148, ptr %8, align 8
  %149 = load double, ptr %8, align 8
  %150 = fmul double %149, 0x3FF921FB50000000
  %151 = fpext float %0 to double
  %152 = fsub double %151, %150
  %153 = load double, ptr %8, align 8
  %154 = fmul double %153, 0x3E5110B4611A6263
  %155 = fsub double %152, %154
  store double %155, ptr %1, align 8
  br label %138

156:                                              ; preds = %167
  %157 = load i32, ptr %3, align 4
  %158 = lshr i32 %157, 31
  %159 = icmp ne i32 %158, 0
  store i1 %159, ptr %5, align 1
  %160 = load i32, ptr %7, align 4
  %161 = lshr i32 %160, 23
  %162 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %161, i32 150)
  %163 = extractvalue { i32, i1 } %162, 1
  br i1 %163, label %168, label %169

164:                                              ; preds = %89
  %165 = fsub float %0, %0
  %166 = fpext float %165 to double
  store double %166, ptr %1, align 8
  ret i32 0

167:                                              ; preds = %89
  br label %156

168:                                              ; preds = %156
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

169:                                              ; preds = %156
  %170 = extractvalue { i32, i1 } %162, 0
  store i32 %170, ptr %4, align 4
  %171 = load i32, ptr %7, align 4
  %172 = load i32, ptr %4, align 4
  %173 = shl i32 %172, 23
  %174 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %171, i32 %173)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

176:                                              ; preds = %169
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %169
  %178 = extractvalue { i32, i1 } %174, 0
  store i32 %178, ptr %3, align 4
  %179 = getelementptr inbounds [1 x double], ptr %11, i64 0, i64 0
  %180 = load i32, ptr %3, align 4
  %181 = bitcast i32 %180 to float
  %182 = fpext float %181 to double
  store double %182, ptr %179, align 8
  %183 = load i32, ptr %4, align 4
  %184 = sub i32 2147483647, %183
  %185 = icmp ule i32 %184, 2147483647
  br i1 %185, label %199, label %200

186:                                              ; preds = %199
  %187 = getelementptr inbounds [1 x double], ptr %11, i64 0, i64 0
  %188 = insertvalue { ptr, i64 } poison, ptr %187, 0
  %189 = insertvalue { ptr, i64 } %188, i64 1, 1
  %190 = getelementptr inbounds [1 x double], ptr %9, i64 0, i64 0
  %191 = insertvalue { ptr, i64 } poison, ptr %190, 0
  %192 = insertvalue { ptr, i64 } %191, i64 1, 1
  %193 = extractvalue { ptr, i64 } %189, 0
  %194 = extractvalue { ptr, i64 } %189, 1
  %195 = extractvalue { ptr, i64 } %192, 0
  %196 = extractvalue { ptr, i64 } %192, 1
  %197 = call fastcc i32 @compiler_rt.rem_pio2_large.rem_pio2_large(ptr nonnull align 8 %193, i64 %194, ptr nonnull align 8 %195, i64 %196, i32 %183, i32 1, i64 0)
  store i32 %197, ptr %6, align 4
  %198 = load i1, ptr %5, align 1
  br i1 %198, label %205, label %212

199:                                              ; preds = %177
  br label %186

200:                                              ; preds = %177
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @165)
  unreachable

201:                                              ; preds = %212
  %202 = getelementptr inbounds [1 x double], ptr %9, i64 0, i64 0
  %203 = load double, ptr %202, align 8
  store double %203, ptr %1, align 8
  %204 = load i32, ptr %6, align 4
  ret i32 %204

205:                                              ; preds = %186
  %206 = getelementptr inbounds [1 x double], ptr %9, i64 0, i64 0
  %207 = load double, ptr %206, align 8
  %208 = fneg double %207
  store double %208, ptr %1, align 8
  %209 = load i32, ptr %6, align 4
  %210 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %209)
  %211 = extractvalue { i32, i1 } %210, 1
  br i1 %211, label %213, label %214

212:                                              ; preds = %186
  br label %201

213:                                              ; preds = %205
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

214:                                              ; preds = %205
  %215 = extractvalue { i32, i1 } %210, 0
  ret i32 %215
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @cos(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca [6 x i64], align 8
  %4 = alloca [2 x double], align 8
  %5 = alloca i64, align 8
  %6 = bitcast double %0 to i64
  %7 = lshr i64 %6, 32
  store i64 %7, ptr %5, align 8
  %8 = load i64, ptr %5, align 8
  %9 = and i64 %8, 2147483647
  store i64 %9, ptr %5, align 8
  %10 = load i64, ptr %5, align 8
  %11 = icmp ule i64 %10, 1072243195
  br i1 %11, label %15, label %18

12:                                               ; preds = %18
  %13 = load i64, ptr %5, align 8
  %14 = icmp uge i64 %13, 2146435072
  br i1 %14, label %36, label %38

15:                                               ; preds = %1
  %16 = load i64, ptr %5, align 8
  %17 = icmp ult i64 %16, 1044816030
  br i1 %17, label %21, label %23

18:                                               ; preds = %1
  br label %12

19:                                               ; preds = %23
  %20 = call fastcc double @compiler_rt.trig.__cos(double %0, double 0.000000e+00)
  ret double %20

21:                                               ; preds = %15
  %22 = fadd double %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3776(double %22)
  ret double 1.000000e+00

23:                                               ; preds = %15
  br label %19

24:                                               ; preds = %38
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %25 = ptrtoint ptr %4 to i64
  %26 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %26, align 8
  %27 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %25, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %31, align 8
  %32 = ptrtoint ptr %3 to i64
  %33 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %32, i64 0)
  %34 = call fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %4)
  %35 = and i32 %34, 3
  switch i32 %35, label %41 [
    i32 0, label %47
    i32 1, label %53
    i32 2, label %60
  ]

36:                                               ; preds = %12
  %37 = fsub double %0, %0
  ret double %37

38:                                               ; preds = %12
  br label %24

39:                                               ; preds = %41, %60, %53, %47
  %40 = load double, ptr %2, align 8
  ret double %40

41:                                               ; preds = %24
  %42 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %43 = load double, ptr %42, align 8
  %44 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %45 = load double, ptr %44, align 8
  %46 = call fastcc double @compiler_rt.trig.__sin(double %43, double %45, i32 1)
  store double %46, ptr %2, align 8
  br label %39

47:                                               ; preds = %24
  %48 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %49 = load double, ptr %48, align 8
  %50 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %51 = load double, ptr %50, align 8
  %52 = call fastcc double @compiler_rt.trig.__cos(double %49, double %51)
  store double %52, ptr %2, align 8
  br label %39

53:                                               ; preds = %24
  %54 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %55 = load double, ptr %54, align 8
  %56 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %57 = load double, ptr %56, align 8
  %58 = call fastcc double @compiler_rt.trig.__sin(double %55, double %57, i32 1)
  %59 = fneg double %58
  store double %59, ptr %2, align 8
  br label %39

60:                                               ; preds = %24
  %61 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %62 = load double, ptr %61, align 8
  %63 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %64 = load double, ptr %63, align 8
  %65 = call fastcc double @compiler_rt.trig.__cos(double %62, double %64)
  %66 = fneg double %65
  store double %66, ptr %2, align 8
  br label %39
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.trig.__cos(double %0, double %1) unnamed_addr #0 {
  %3 = fmul double %0, %0
  %4 = fmul double %3, %3
  %5 = fmul double %3, 0x3EFA01A019CB1590
  %6 = fadd double 0xBF56C16C16C15177, %5
  %7 = fmul double %3, %6
  %8 = fadd double 0x3FA555555555554C, %7
  %9 = fmul double %3, %8
  %10 = fmul double %4, %4
  %11 = fmul double %3, 0xBDA8FAE9BE8838D4
  %12 = fadd double 0x3E21EE9EBDB4B1C4, %11
  %13 = fmul double %3, %12
  %14 = fadd double 0xBE927E4F809C52AD, %13
  %15 = fmul double %10, %14
  %16 = fadd double %9, %15
  %17 = fmul double 5.000000e-01, %3
  %18 = fsub double 1.000000e+00, %17
  %19 = fsub double 1.000000e+00, %18
  %20 = fsub double %19, %17
  %21 = fmul double %3, %16
  %22 = fmul double %0, %1
  %23 = fsub double %21, %22
  %24 = fadd double %20, %23
  %25 = fadd double %18, %24
  ret double %25
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %1) unnamed_addr #0 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca [3 x double], align 8
  %8 = alloca [3 x double], align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = alloca ptr, align 8
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca ptr, align 8
  %26 = alloca ptr, align 8
  %27 = alloca i64, align 8
  %28 = alloca i32, align 4
  %29 = alloca i1, align 1
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca [2 x double], align 8
  %33 = alloca [3 x double], align 8
  %34 = alloca [6 x i64], align 8
  %35 = alloca double, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %35, i8 -86, i64 8, i1 false)
  %36 = ptrtoint ptr %35 to i64
  %37 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 0
  store i64 1296236545, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 1
  store i64 %36, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 2
  store i64 8, ptr %39, align 8
  %40 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 3
  store i64 0, ptr %40, align 8
  %41 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 4
  store i64 0, ptr %41, align 8
  %42 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 5
  store i64 0, ptr %42, align 8
  %43 = ptrtoint ptr %34 to i64
  %44 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %43, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %33, i8 -86, i64 24, i1 false)
  %45 = ptrtoint ptr %33 to i64
  %46 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 0
  store i64 1296236545, ptr %46, align 8
  %47 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 1
  store i64 %45, ptr %47, align 8
  %48 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 2
  store i64 24, ptr %48, align 8
  %49 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 3
  store i64 0, ptr %49, align 8
  %50 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 4
  store i64 0, ptr %50, align 8
  %51 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 5
  store i64 0, ptr %51, align 8
  %52 = ptrtoint ptr %34 to i64
  %53 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %52, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %32, i8 -86, i64 16, i1 false)
  %54 = ptrtoint ptr %32 to i64
  %55 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 0
  store i64 1296236545, ptr %55, align 8
  %56 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 1
  store i64 %54, ptr %56, align 8
  %57 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 2
  store i64 16, ptr %57, align 8
  %58 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 3
  store i64 0, ptr %58, align 8
  %59 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 4
  store i64 0, ptr %59, align 8
  %60 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 5
  store i64 0, ptr %60, align 8
  %61 = ptrtoint ptr %34 to i64
  %62 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %61, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %31, i8 -86, i64 4, i1 false)
  %63 = ptrtoint ptr %31 to i64
  %64 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 0
  store i64 1296236545, ptr %64, align 8
  %65 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 1
  store i64 %63, ptr %65, align 8
  %66 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 2
  store i64 4, ptr %66, align 8
  %67 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 3
  store i64 0, ptr %67, align 8
  %68 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 4
  store i64 0, ptr %68, align 8
  %69 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 5
  store i64 0, ptr %69, align 8
  %70 = ptrtoint ptr %34 to i64
  %71 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %70, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %30, i8 -86, i64 4, i1 false)
  %72 = ptrtoint ptr %30 to i64
  %73 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 0
  store i64 1296236545, ptr %73, align 8
  %74 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 1
  store i64 %72, ptr %74, align 8
  %75 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 2
  store i64 4, ptr %75, align 8
  %76 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 3
  store i64 0, ptr %76, align 8
  %77 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 4
  store i64 0, ptr %77, align 8
  %78 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 5
  store i64 0, ptr %78, align 8
  %79 = ptrtoint ptr %34 to i64
  %80 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %79, i64 0)
  call void @llvm.memset.p0.i64(ptr align 1 %29, i8 -86, i64 1, i1 false)
  %81 = ptrtoint ptr %29 to i64
  %82 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 0
  store i64 1296236545, ptr %82, align 8
  %83 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 1
  store i64 %81, ptr %83, align 8
  %84 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 2
  store i64 1, ptr %84, align 8
  %85 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 3
  store i64 0, ptr %85, align 8
  %86 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 4
  store i64 0, ptr %86, align 8
  %87 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 5
  store i64 0, ptr %87, align 8
  %88 = ptrtoint ptr %34 to i64
  %89 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %88, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %28, i8 -86, i64 4, i1 false)
  %90 = ptrtoint ptr %28 to i64
  %91 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 0
  store i64 1296236545, ptr %91, align 8
  %92 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 1
  store i64 %90, ptr %92, align 8
  %93 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 2
  store i64 4, ptr %93, align 8
  %94 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 3
  store i64 0, ptr %94, align 8
  %95 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 4
  store i64 0, ptr %95, align 8
  %96 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 5
  store i64 0, ptr %96, align 8
  %97 = ptrtoint ptr %34 to i64
  %98 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %97, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %27, i8 -86, i64 8, i1 false)
  %99 = ptrtoint ptr %27 to i64
  %100 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 0
  store i64 1296236545, ptr %100, align 8
  %101 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 1
  store i64 %99, ptr %101, align 8
  %102 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 2
  store i64 8, ptr %102, align 8
  %103 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 3
  store i64 0, ptr %103, align 8
  %104 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 4
  store i64 0, ptr %104, align 8
  %105 = getelementptr inbounds [6 x i64], ptr %34, i64 0, i64 5
  store i64 0, ptr %105, align 8
  %106 = ptrtoint ptr %34 to i64
  %107 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %106, i64 0)
  %108 = bitcast double %0 to i64
  store i64 %108, ptr %27, align 8
  %109 = load i64, ptr %27, align 8
  %110 = lshr i64 %109, 63
  %111 = icmp ne i64 %110, 0
  store i1 %111, ptr %29, align 1
  %112 = load i64, ptr %27, align 8
  %113 = lshr i64 %112, 32
  %114 = and i64 %113, 2147483647
  %115 = trunc i64 %114 to i32
  store i32 %115, ptr %30, align 4
  %116 = load i32, ptr %30, align 4
  %117 = icmp ule i32 %116, 1074752122
  br i1 %117, label %121, label %125

118:                                              ; preds = %125
  %119 = load i32, ptr %30, align 4
  %120 = icmp ule i32 %119, 1075594811
  br i1 %120, label %194, label %197

121:                                              ; preds = %2
  %122 = load i32, ptr %30, align 4
  %123 = and i32 %122, 1048575
  %124 = icmp eq i32 %123, 598523
  br i1 %124, label %129, label %132

125:                                              ; preds = %2
  br label %118

126:                                              ; preds = %132
  %127 = load i32, ptr %30, align 4
  %128 = icmp ule i32 %127, 1073928572
  br i1 %128, label %133, label %136

129:                                              ; preds = %121
  %130 = load i32, ptr %30, align 4
  %131 = call fastcc i32 @compiler_rt.rem_pio2.medium(i32 %130, double %0, ptr nonnull align 8 %1)
  ret i32 %131

132:                                              ; preds = %121
  br label %126

133:                                              ; preds = %126
  %134 = load i1, ptr %29, align 1
  %135 = xor i1 %134, true
  br i1 %135, label %139, label %152

136:                                              ; preds = %126
  %137 = load i1, ptr %29, align 1
  %138 = xor i1 %137, true
  br i1 %138, label %165, label %178

139:                                              ; preds = %133
  %140 = fsub double %0, 0x3FF921FB54400000
  store double %140, ptr %35, align 8
  store ptr %1, ptr %26, align 8
  %141 = load ptr, ptr %26, align 8
  %142 = getelementptr inbounds [2 x double], ptr %141, i64 0, i64 0
  %143 = load double, ptr %35, align 8
  %144 = fsub double %143, 0x3DD0B4611A626331
  store double %144, ptr %142, align 8
  store ptr %1, ptr %25, align 8
  %145 = load ptr, ptr %25, align 8
  %146 = getelementptr inbounds [2 x double], ptr %145, i64 0, i64 1
  %147 = load double, ptr %35, align 8
  %148 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %149 = load double, ptr %148, align 8
  %150 = fsub double %147, %149
  %151 = fsub double %150, 0x3DD0B4611A626331
  store double %151, ptr %146, align 8
  ret i32 1

152:                                              ; preds = %133
  %153 = fadd double %0, 0x3FF921FB54400000
  store double %153, ptr %35, align 8
  store ptr %1, ptr %24, align 8
  %154 = load ptr, ptr %24, align 8
  %155 = getelementptr inbounds [2 x double], ptr %154, i64 0, i64 0
  %156 = load double, ptr %35, align 8
  %157 = fadd double %156, 0x3DD0B4611A626331
  store double %157, ptr %155, align 8
  store ptr %1, ptr %23, align 8
  %158 = load ptr, ptr %23, align 8
  %159 = getelementptr inbounds [2 x double], ptr %158, i64 0, i64 1
  %160 = load double, ptr %35, align 8
  %161 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %162 = load double, ptr %161, align 8
  %163 = fsub double %160, %162
  %164 = fadd double %163, 0x3DD0B4611A626331
  store double %164, ptr %159, align 8
  ret i32 -1

165:                                              ; preds = %136
  %166 = fsub double %0, 0x400921FB54400000
  store double %166, ptr %35, align 8
  store ptr %1, ptr %22, align 8
  %167 = load ptr, ptr %22, align 8
  %168 = getelementptr inbounds [2 x double], ptr %167, i64 0, i64 0
  %169 = load double, ptr %35, align 8
  %170 = fsub double %169, 0x3DE0B4611A626331
  store double %170, ptr %168, align 8
  store ptr %1, ptr %21, align 8
  %171 = load ptr, ptr %21, align 8
  %172 = getelementptr inbounds [2 x double], ptr %171, i64 0, i64 1
  %173 = load double, ptr %35, align 8
  %174 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %175 = load double, ptr %174, align 8
  %176 = fsub double %173, %175
  %177 = fsub double %176, 0x3DE0B4611A626331
  store double %177, ptr %172, align 8
  ret i32 2

178:                                              ; preds = %136
  %179 = fadd double %0, 0x400921FB54400000
  store double %179, ptr %35, align 8
  store ptr %1, ptr %20, align 8
  %180 = load ptr, ptr %20, align 8
  %181 = getelementptr inbounds [2 x double], ptr %180, i64 0, i64 0
  %182 = load double, ptr %35, align 8
  %183 = fadd double %182, 0x3DE0B4611A626331
  store double %183, ptr %181, align 8
  store ptr %1, ptr %19, align 8
  %184 = load ptr, ptr %19, align 8
  %185 = getelementptr inbounds [2 x double], ptr %184, i64 0, i64 1
  %186 = load double, ptr %35, align 8
  %187 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %188 = load double, ptr %187, align 8
  %189 = fsub double %186, %188
  %190 = fadd double %189, 0x3DE0B4611A626331
  store double %190, ptr %185, align 8
  ret i32 -2

191:                                              ; preds = %197
  %192 = load i32, ptr %30, align 4
  %193 = icmp ult i32 %192, 1094263291
  br i1 %193, label %273, label %276

194:                                              ; preds = %118
  %195 = load i32, ptr %30, align 4
  %196 = icmp ule i32 %195, 1075183036
  br i1 %196, label %198, label %201

197:                                              ; preds = %118
  br label %191

198:                                              ; preds = %194
  %199 = load i32, ptr %30, align 4
  %200 = icmp eq i32 %199, 1074977148
  br i1 %200, label %207, label %210

201:                                              ; preds = %194
  %202 = load i32, ptr %30, align 4
  %203 = icmp eq i32 %202, 1075388923
  br i1 %203, label %240, label %243

204:                                              ; preds = %210
  %205 = load i1, ptr %29, align 1
  %206 = xor i1 %205, true
  br i1 %206, label %211, label %224

207:                                              ; preds = %198
  %208 = load i32, ptr %30, align 4
  %209 = call fastcc i32 @compiler_rt.rem_pio2.medium(i32 %208, double %0, ptr nonnull align 8 %1)
  ret i32 %209

210:                                              ; preds = %198
  br label %204

211:                                              ; preds = %204
  %212 = fsub double %0, 0x4012D97C7F300000
  store double %212, ptr %35, align 8
  store ptr %1, ptr %18, align 8
  %213 = load ptr, ptr %18, align 8
  %214 = getelementptr inbounds [2 x double], ptr %213, i64 0, i64 0
  %215 = load double, ptr %35, align 8
  %216 = fsub double %215, 0x3DE90E91A79394CA
  store double %216, ptr %214, align 8
  store ptr %1, ptr %17, align 8
  %217 = load ptr, ptr %17, align 8
  %218 = getelementptr inbounds [2 x double], ptr %217, i64 0, i64 1
  %219 = load double, ptr %35, align 8
  %220 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %221 = load double, ptr %220, align 8
  %222 = fsub double %219, %221
  %223 = fsub double %222, 0x3DE90E91A79394CA
  store double %223, ptr %218, align 8
  ret i32 3

224:                                              ; preds = %204
  %225 = fadd double %0, 0x4012D97C7F300000
  store double %225, ptr %35, align 8
  store ptr %1, ptr %16, align 8
  %226 = load ptr, ptr %16, align 8
  %227 = getelementptr inbounds [2 x double], ptr %226, i64 0, i64 0
  %228 = load double, ptr %35, align 8
  %229 = fadd double %228, 0x3DE90E91A79394CA
  store double %229, ptr %227, align 8
  store ptr %1, ptr %15, align 8
  %230 = load ptr, ptr %15, align 8
  %231 = getelementptr inbounds [2 x double], ptr %230, i64 0, i64 1
  %232 = load double, ptr %35, align 8
  %233 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %234 = load double, ptr %233, align 8
  %235 = fsub double %232, %234
  %236 = fadd double %235, 0x3DE90E91A79394CA
  store double %236, ptr %231, align 8
  ret i32 -3

237:                                              ; preds = %243
  %238 = load i1, ptr %29, align 1
  %239 = xor i1 %238, true
  br i1 %239, label %244, label %257

240:                                              ; preds = %201
  %241 = load i32, ptr %30, align 4
  %242 = call fastcc i32 @compiler_rt.rem_pio2.medium(i32 %241, double %0, ptr nonnull align 8 %1)
  ret i32 %242

243:                                              ; preds = %201
  br label %237

244:                                              ; preds = %237
  %245 = fsub double %0, 0x401921FB54400000
  store double %245, ptr %35, align 8
  store ptr %1, ptr %14, align 8
  %246 = load ptr, ptr %14, align 8
  %247 = getelementptr inbounds [2 x double], ptr %246, i64 0, i64 0
  %248 = load double, ptr %35, align 8
  %249 = fsub double %248, 0x3DF0B4611A626331
  store double %249, ptr %247, align 8
  store ptr %1, ptr %13, align 8
  %250 = load ptr, ptr %13, align 8
  %251 = getelementptr inbounds [2 x double], ptr %250, i64 0, i64 1
  %252 = load double, ptr %35, align 8
  %253 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %254 = load double, ptr %253, align 8
  %255 = fsub double %252, %254
  %256 = fsub double %255, 0x3DF0B4611A626331
  store double %256, ptr %251, align 8
  ret i32 4

257:                                              ; preds = %237
  %258 = fadd double %0, 0x401921FB54400000
  store double %258, ptr %35, align 8
  store ptr %1, ptr %12, align 8
  %259 = load ptr, ptr %12, align 8
  %260 = getelementptr inbounds [2 x double], ptr %259, i64 0, i64 0
  %261 = load double, ptr %35, align 8
  %262 = fadd double %261, 0x3DF0B4611A626331
  store double %262, ptr %260, align 8
  store ptr %1, ptr %11, align 8
  %263 = load ptr, ptr %11, align 8
  %264 = getelementptr inbounds [2 x double], ptr %263, i64 0, i64 1
  %265 = load double, ptr %35, align 8
  %266 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %267 = load double, ptr %266, align 8
  %268 = fsub double %265, %267
  %269 = fadd double %268, 0x3DF0B4611A626331
  store double %269, ptr %264, align 8
  ret i32 -4

270:                                              ; preds = %276
  %271 = load i32, ptr %30, align 4
  %272 = icmp uge i32 %271, 2146435072
  br i1 %272, label %285, label %293

273:                                              ; preds = %191
  %274 = load i32, ptr %30, align 4
  %275 = call fastcc i32 @compiler_rt.rem_pio2.medium(i32 %274, double %0, ptr nonnull align 8 %1)
  ret i32 %275

276:                                              ; preds = %191
  br label %270

277:                                              ; preds = %293
  %278 = bitcast double %0 to i64
  store i64 %278, ptr %27, align 8
  %279 = load i64, ptr %27, align 8
  %280 = and i64 %279, 4503599627370495
  store i64 %280, ptr %27, align 8
  %281 = load i64, ptr %27, align 8
  %282 = or i64 %281, 4710765210229538816
  store i64 %282, ptr %27, align 8
  %283 = load i64, ptr %27, align 8
  %284 = bitcast i64 %283 to double
  store double %284, ptr %35, align 8
  store i32 0, ptr %28, align 4
  br label %298

285:                                              ; preds = %270
  store ptr %1, ptr %10, align 8
  %286 = load ptr, ptr %10, align 8
  %287 = getelementptr inbounds [2 x double], ptr %286, i64 0, i64 0
  %288 = fsub double %0, %0
  store double %288, ptr %287, align 8
  store ptr %1, ptr %9, align 8
  %289 = load ptr, ptr %9, align 8
  %290 = getelementptr inbounds [2 x double], ptr %289, i64 0, i64 1
  %291 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %292 = load double, ptr %291, align 8
  store double %292, ptr %290, align 8
  ret i32 0

293:                                              ; preds = %270
  br label %277

294:                                              ; preds = %306
  %295 = load i32, ptr %28, align 4
  %296 = call fastcc i64 @compiler_rt.rem_pio2.U__anon_4338(i32 %295)
  %297 = icmp ult i64 %296, 3
  br i1 %297, label %342, label %343

298:                                              ; preds = %301, %277
  %299 = load i32, ptr %28, align 4
  %300 = icmp slt i32 %299, 2
  br i1 %300, label %302, label %306

301:                                              ; preds = %337
  br label %298

302:                                              ; preds = %298
  %303 = load i32, ptr %28, align 4
  %304 = call fastcc i64 @compiler_rt.rem_pio2.U__anon_4338(i32 %303)
  %305 = icmp ult i64 %304, 3
  br i1 %305, label %316, label %317

306:                                              ; preds = %298
  br label %294

307:                                              ; preds = %316
  %308 = getelementptr inbounds [3 x double], ptr %33, i64 0, i64 %304
  %309 = load double, ptr %35, align 8
  %310 = fptosi double %309 to i32
  %311 = sitofp i32 %310 to double
  %312 = fsub double %309, %311
  %313 = fcmp olt double %312, 1.000000e+00
  %314 = fcmp ogt double %312, -1.000000e+00
  %315 = and i1 %313, %314
  br i1 %315, label %324, label %325

316:                                              ; preds = %302
  br label %307

317:                                              ; preds = %302
  call fastcc void @builtin.panicOutOfBounds(i64 %304, i64 3)
  unreachable

318:                                              ; preds = %324
  %319 = sitofp i32 %310 to double
  store double %319, ptr %308, align 8
  %320 = load double, ptr %35, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %33, i64 24, i1 false)
  %321 = load i32, ptr %28, align 4
  %322 = call fastcc i64 @compiler_rt.rem_pio2.U__anon_4338(i32 %321)
  %323 = icmp ult i64 %322, 3
  br i1 %323, label %334, label %335

324:                                              ; preds = %307
  br label %318

325:                                              ; preds = %307
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @166)
  unreachable

326:                                              ; preds = %334
  %327 = getelementptr inbounds [3 x double], ptr %8, i64 0, i64 %322
  %328 = load double, ptr %327, align 8
  %329 = fsub double %320, %328
  %330 = fmul double %329, 0x4170000000000000
  store double %330, ptr %35, align 8
  %331 = load i32, ptr %28, align 4
  %332 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %331, i32 1)
  %333 = extractvalue { i32, i1 } %332, 1
  br i1 %333, label %336, label %337

334:                                              ; preds = %318
  br label %326

335:                                              ; preds = %318
  call fastcc void @builtin.panicOutOfBounds(i64 %322, i64 3)
  unreachable

336:                                              ; preds = %326
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

337:                                              ; preds = %326
  %338 = extractvalue { i32, i1 } %332, 0
  store i32 %338, ptr %28, align 4
  br label %301

339:                                              ; preds = %342
  %340 = getelementptr inbounds [3 x double], ptr %33, i64 0, i64 %296
  %341 = load double, ptr %35, align 8
  store double %341, ptr %340, align 8
  br label %351

342:                                              ; preds = %294
  br label %339

343:                                              ; preds = %294
  call fastcc void @builtin.panicOutOfBounds(i64 %296, i64 3)
  unreachable

344:                                              ; preds = %366
  %345 = getelementptr inbounds double, ptr %33, i64 0
  %346 = getelementptr inbounds double, ptr %32, i64 0
  %347 = load i32, ptr %30, align 4
  %348 = lshr i32 %347, 20
  %349 = sub i32 2147483647, %348
  %350 = icmp ule i32 %349, 2147483647
  br i1 %350, label %373, label %374

351:                                              ; preds = %355, %339
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %33, i64 24, i1 false)
  %352 = load i32, ptr %28, align 4
  %353 = call fastcc i64 @compiler_rt.rem_pio2.U__anon_4338(i32 %352)
  %354 = icmp ult i64 %353, 3
  br i1 %354, label %360, label %361

355:                                              ; preds = %368
  br label %351

356:                                              ; preds = %360
  %357 = getelementptr inbounds [3 x double], ptr %7, i64 0, i64 %353
  %358 = load double, ptr %357, align 8
  %359 = fcmp oeq double %358, 0.000000e+00
  br i1 %359, label %362, label %366

360:                                              ; preds = %351
  br label %356

361:                                              ; preds = %351
  call fastcc void @builtin.panicOutOfBounds(i64 %353, i64 3)
  unreachable

362:                                              ; preds = %356
  %363 = load i32, ptr %28, align 4
  %364 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %363, i32 1)
  %365 = extractvalue { i32, i1 } %364, 1
  br i1 %365, label %367, label %368

366:                                              ; preds = %356
  br label %344

367:                                              ; preds = %362
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

368:                                              ; preds = %362
  %369 = extractvalue { i32, i1 } %364, 0
  store i32 %369, ptr %28, align 4
  br label %355

370:                                              ; preds = %373
  %371 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %348, i32 1046)
  %372 = extractvalue { i32, i1 } %371, 1
  br i1 %372, label %375, label %376

373:                                              ; preds = %344
  br label %370

374:                                              ; preds = %344
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @166)
  unreachable

375:                                              ; preds = %370
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

376:                                              ; preds = %370
  %377 = extractvalue { i32, i1 } %371, 0
  %378 = load i32, ptr %28, align 4
  %379 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %378, i32 1)
  %380 = extractvalue { i32, i1 } %379, 1
  br i1 %380, label %381, label %382

381:                                              ; preds = %376
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

382:                                              ; preds = %376
  %383 = extractvalue { i32, i1 } %379, 0
  %384 = getelementptr inbounds [3 x double], ptr %345, i64 0, i64 0
  %385 = insertvalue { ptr, i64 } poison, ptr %384, 0
  %386 = insertvalue { ptr, i64 } %385, i64 3, 1
  %387 = getelementptr inbounds [2 x double], ptr %346, i64 0, i64 0
  %388 = insertvalue { ptr, i64 } poison, ptr %387, 0
  %389 = insertvalue { ptr, i64 } %388, i64 2, 1
  %390 = extractvalue { ptr, i64 } %386, 0
  %391 = extractvalue { ptr, i64 } %386, 1
  %392 = extractvalue { ptr, i64 } %389, 0
  %393 = extractvalue { ptr, i64 } %389, 1
  %394 = call fastcc i32 @compiler_rt.rem_pio2_large.rem_pio2_large(ptr nonnull align 8 %390, i64 %391, ptr nonnull align 8 %392, i64 %393, i32 %377, i32 %383, i64 1)
  store i32 %394, ptr %31, align 4
  %395 = load i1, ptr %29, align 1
  br i1 %395, label %406, label %420

396:                                              ; preds = %420
  store ptr %1, ptr %4, align 8
  %397 = load ptr, ptr %4, align 8
  %398 = getelementptr inbounds [2 x double], ptr %397, i64 0, i64 0
  %399 = getelementptr inbounds [2 x double], ptr %32, i64 0, i64 0
  %400 = load double, ptr %399, align 8
  store double %400, ptr %398, align 8
  store ptr %1, ptr %3, align 8
  %401 = load ptr, ptr %3, align 8
  %402 = getelementptr inbounds [2 x double], ptr %401, i64 0, i64 1
  %403 = getelementptr inbounds [2 x double], ptr %32, i64 0, i64 1
  %404 = load double, ptr %403, align 8
  store double %404, ptr %402, align 8
  %405 = load i32, ptr %31, align 4
  ret i32 %405

406:                                              ; preds = %382
  store ptr %1, ptr %6, align 8
  %407 = load ptr, ptr %6, align 8
  %408 = getelementptr inbounds [2 x double], ptr %407, i64 0, i64 0
  %409 = getelementptr inbounds [2 x double], ptr %32, i64 0, i64 0
  %410 = load double, ptr %409, align 8
  %411 = fneg double %410
  store double %411, ptr %408, align 8
  store ptr %1, ptr %5, align 8
  %412 = load ptr, ptr %5, align 8
  %413 = getelementptr inbounds [2 x double], ptr %412, i64 0, i64 1
  %414 = getelementptr inbounds [2 x double], ptr %32, i64 0, i64 1
  %415 = load double, ptr %414, align 8
  %416 = fneg double %415
  store double %416, ptr %413, align 8
  %417 = load i32, ptr %31, align 4
  %418 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %417)
  %419 = extractvalue { i32, i1 } %418, 1
  br i1 %419, label %421, label %422

420:                                              ; preds = %382
  br label %396

421:                                              ; preds = %406
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

422:                                              ; preds = %406
  %423 = extractvalue { i32, i1 } %418, 0
  ret i32 %423
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.trig.__sin(double %0, double %1, i32 %2) unnamed_addr #0 {
  %4 = fmul double %0, %0
  %5 = fmul double %4, %4
  %6 = fmul double %4, 0x3EC71DE357B1FE7D
  %7 = fadd double 0xBF2A01A019C161D5, %6
  %8 = fmul double %4, %7
  %9 = fadd double 0x3F8111111110F8A6, %8
  %10 = fmul double %4, %5
  %11 = fmul double %4, 0x3DE5D93A5ACFD57C
  %12 = fadd double 0xBE5AE5E68A2B9CEB, %11
  %13 = fmul double %10, %12
  %14 = fadd double %9, %13
  %15 = fmul double %4, %0
  %16 = icmp eq i32 %2, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %3
  %18 = fmul double %4, %14
  %19 = fadd double 0xBFC5555555555549, %18
  %20 = fmul double %15, %19
  %21 = fadd double %0, %20
  ret double %21

22:                                               ; preds = %3
  %23 = fmul double 5.000000e-01, %1
  %24 = fmul double %15, %14
  %25 = fsub double %23, %24
  %26 = fmul double %4, %25
  %27 = fsub double %26, %1
  %28 = fmul double %15, 0xBFC5555555555549
  %29 = fsub double %27, %28
  %30 = fsub double %0, %29
  ret double %30
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__cosx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @cosq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @cosq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @cos(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @cosl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__cosx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__exph(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @expf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @expf(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca [6 x i64], align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  store float %0, ptr %7, align 4
  %8 = load float, ptr %7, align 4
  %9 = bitcast float %8 to i32
  store i32 %9, ptr %6, align 4
  %10 = load i32, ptr %6, align 4
  %11 = lshr i32 %10, 31
  %12 = sub i32 2147483647, %11
  %13 = icmp ule i32 %12, 2147483647
  br i1 %13, label %19, label %20

14:                                               ; preds = %19
  %15 = load i32, ptr %6, align 4
  %16 = and i32 %15, 2147483647
  store i32 %16, ptr %6, align 4
  %17 = load float, ptr %7, align 4
  %18 = call fastcc i1 @math.isnan.isNan__anon_3712(float %17)
  br i1 %18, label %24, label %26

19:                                               ; preds = %1
  br label %14

20:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @91)
  unreachable

21:                                               ; preds = %26
  %22 = load i32, ptr %6, align 4
  %23 = icmp uge i32 %22, 1118743632
  br i1 %23, label %57, label %60

24:                                               ; preds = %14
  %25 = load float, ptr %7, align 4
  ret float %25

26:                                               ; preds = %14
  br label %21

27:                                               ; preds = %60, %78
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 -86, i64 4, i1 false)
  %28 = ptrtoint ptr %5 to i64
  %29 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %28, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 4, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %34, align 8
  %35 = ptrtoint ptr %4 to i64
  %36 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %35, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %37 = ptrtoint ptr %3 to i64
  %38 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %37, ptr %39, align 8
  %40 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 4, ptr %40, align 8
  %41 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %41, align 8
  %42 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %42, align 8
  %43 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %43, align 8
  %44 = ptrtoint ptr %4 to i64
  %45 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %44, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %2, i8 -86, i64 4, i1 false)
  %46 = ptrtoint ptr %2 to i64
  %47 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %47, align 8
  %48 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %46, ptr %48, align 8
  %49 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 4, ptr %49, align 8
  %50 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %50, align 8
  %51 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %51, align 8
  %52 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %52, align 8
  %53 = ptrtoint ptr %4 to i64
  %54 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %53, i64 0)
  %55 = load i32, ptr %6, align 4
  %56 = icmp ugt i32 %55, 1051816472
  br i1 %56, label %108, label %111

57:                                               ; preds = %21
  %58 = load i32, ptr %6, align 4
  %59 = icmp ugt i32 %58, 2139095040
  br i1 %59, label %64, label %66

60:                                               ; preds = %21
  br label %27

61:                                               ; preds = %66
  %62 = load i32, ptr %6, align 4
  %63 = icmp uge i32 %62, 1118925336
  br i1 %63, label %71, label %73

64:                                               ; preds = %57
  %65 = load float, ptr %7, align 4
  ret float %65

66:                                               ; preds = %57
  br label %61

67:                                               ; preds = %77
  %68 = icmp ne i32 %11, 0
  br i1 %68, label %79, label %84

69:                                               ; preds = %73, %71
  %70 = phi i1 [ %72, %71 ], [ false, %73 ]
  br i1 %70, label %74, label %77

71:                                               ; preds = %61
  %72 = icmp eq i32 %11, 0
  br label %69

73:                                               ; preds = %61
  br label %69

74:                                               ; preds = %69
  %75 = load float, ptr %7, align 4
  %76 = fmul float %75, 0x47E0000000000000
  ret float %76

77:                                               ; preds = %69
  br label %67

78:                                               ; preds = %84, %85
  br label %27

79:                                               ; preds = %67
  %80 = load float, ptr %7, align 4
  %81 = fdiv float 0xB6A0000000000000, %80
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %81)
  %82 = load i32, ptr %6, align 4
  %83 = icmp uge i32 %82, 1120924085
  br i1 %83, label %86, label %87

84:                                               ; preds = %67
  br label %78

85:                                               ; preds = %87
  br label %78

86:                                               ; preds = %79
  ret float 0.000000e+00

87:                                               ; preds = %79
  br label %85

88:                                               ; preds = %159, %114
  %89 = load float, ptr %7, align 4
  %90 = load float, ptr %7, align 4
  %91 = fmul float %89, %90
  %92 = load float, ptr %7, align 4
  %93 = fmul float %91, 0xBF66AA42A0000000
  %94 = fadd float 0x3FC55551E0000000, %93
  %95 = fmul float %91, %94
  %96 = fsub float %92, %95
  %97 = load float, ptr %7, align 4
  %98 = fmul float %97, %96
  %99 = fsub float 2.000000e+00, %96
  %100 = fdiv float %98, %99
  %101 = load float, ptr %2, align 4
  %102 = fsub float %100, %101
  %103 = load float, ptr %3, align 4
  %104 = fadd float %102, %103
  %105 = fadd float 1.000000e+00, %104
  %106 = load i32, ptr %5, align 4
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %167, label %168

108:                                              ; preds = %27
  %109 = load i32, ptr %6, align 4
  %110 = icmp ugt i32 %109, 1065686418
  br i1 %110, label %124, label %128

111:                                              ; preds = %27
  %112 = load i32, ptr %6, align 4
  %113 = icmp ugt i32 %112, 956301312
  br i1 %113, label %160, label %162

114:                                              ; preds = %157, %148
  %115 = load i32, ptr %5, align 4
  %116 = sitofp i32 %115 to float
  %117 = load float, ptr %7, align 4
  %118 = fmul float %116, 0x3FE62E4000000000
  %119 = fsub float %117, %118
  store float %119, ptr %3, align 4
  %120 = fmul float %116, 0x3EB7F7D1C0000000
  store float %120, ptr %2, align 4
  %121 = load float, ptr %3, align 4
  %122 = load float, ptr %2, align 4
  %123 = fsub float %121, %122
  store float %123, ptr %7, align 4
  br label %88

124:                                              ; preds = %108
  %125 = load float, ptr %7, align 4
  %126 = fmul float 0x3FF7154760000000, %125
  %127 = icmp sge i32 %11, 0
  br i1 %127, label %134, label %135

128:                                              ; preds = %108
  %129 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %11)
  %130 = extractvalue { i32, i1 } %129, 1
  br i1 %130, label %151, label %152

131:                                              ; preds = %134
  %132 = sext i32 %11 to i64
  %133 = icmp ult i64 %132, 2
  br i1 %133, label %146, label %147

134:                                              ; preds = %124
  br label %131

135:                                              ; preds = %124
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @91)
  unreachable

136:                                              ; preds = %146
  %137 = getelementptr inbounds [2 x float], ptr @92, i64 0, i64 %132
  %138 = load float, ptr %137, align 4
  %139 = fadd float %126, %138
  %140 = fptosi float %139 to i32
  %141 = sitofp i32 %140 to float
  %142 = fsub float %139, %141
  %143 = fcmp olt float %142, 1.000000e+00
  %144 = fcmp ogt float %142, -1.000000e+00
  %145 = and i1 %143, %144
  br i1 %145, label %149, label %150

146:                                              ; preds = %131
  br label %136

147:                                              ; preds = %131
  call fastcc void @builtin.panicOutOfBounds(i64 %132, i64 2)
  unreachable

148:                                              ; preds = %149
  store i32 %140, ptr %5, align 4
  br label %114

149:                                              ; preds = %136
  br label %148

150:                                              ; preds = %136
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @91)
  unreachable

151:                                              ; preds = %128
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

152:                                              ; preds = %128
  %153 = extractvalue { i32, i1 } %129, 0
  %154 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %153, i32 %11)
  %155 = extractvalue { i32, i1 } %154, 1
  br i1 %155, label %156, label %157

156:                                              ; preds = %152
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

157:                                              ; preds = %152
  %158 = extractvalue { i32, i1 } %154, 0
  store i32 %158, ptr %5, align 4
  br label %114

159:                                              ; preds = %160
  br label %88

160:                                              ; preds = %111
  store i32 0, ptr %5, align 4
  %161 = load float, ptr %7, align 4
  store float %161, ptr %3, align 4
  store float 0.000000e+00, ptr %2, align 4
  br label %159

162:                                              ; preds = %111
  %163 = load float, ptr %7, align 4
  %164 = fadd float 0x47E0000000000000, %163
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %164)
  %165 = load float, ptr %7, align 4
  %166 = fadd float 1.000000e+00, %165
  ret float %166

167:                                              ; preds = %88
  ret float %105

168:                                              ; preds = %88
  %169 = load i32, ptr %5, align 4
  %170 = call fastcc float @math.ldexp.ldexp__anon_3764(float %105, i32 %169)
  ret float %170
}

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @builtin.panicOutOfBounds(i64 %0, i64 %1) unnamed_addr #2 {
  %3 = alloca { i64, i8, [7 x i8] }, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = call fastcc ptr @llvm.returnaddress(i32 0)
  %6 = ptrtoint ptr %5 to i64
  %7 = getelementptr inbounds { i64, i64 }, ptr %4, i32 0, i32 0
  store i64 %0, ptr %7, align 8
  %8 = getelementptr inbounds { i64, i64 }, ptr %4, i32 0, i32 1
  store i64 %1, ptr %8, align 8
  %9 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 0
  store i64 %6, ptr %9, align 8
  %10 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 1
  store i8 1, ptr %10, align 1
  call fastcc void @debug.panicExtra__anon_4340(ptr align 8 null, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @exp(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca [6 x i64], align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca double, align 8
  store double %0, ptr %8, align 8
  %9 = load double, ptr %8, align 8
  %10 = bitcast double %9 to i64
  store i64 %10, ptr %7, align 8
  %11 = load i64, ptr %7, align 8
  %12 = lshr i64 %11, 32
  store i64 %12, ptr %6, align 8
  %13 = load i64, ptr %6, align 8
  %14 = lshr i64 %13, 31
  %15 = sub i64 2147483647, %14
  %16 = icmp ule i64 %15, 2147483647
  br i1 %16, label %23, label %24

17:                                               ; preds = %23
  %18 = trunc i64 %14 to i32
  %19 = load i64, ptr %6, align 8
  %20 = and i64 %19, 2147483647
  store i64 %20, ptr %6, align 8
  %21 = load double, ptr %8, align 8
  %22 = call fastcc i1 @math.isnan.isNan__anon_3714(double %21)
  br i1 %22, label %28, label %30

23:                                               ; preds = %1
  br label %17

24:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @93)
  unreachable

25:                                               ; preds = %30
  %26 = load i64, ptr %6, align 8
  %27 = icmp uge i64 %26, 1082532651
  br i1 %27, label %61, label %64

28:                                               ; preds = %17
  %29 = load double, ptr %8, align 8
  ret double %29

30:                                               ; preds = %17
  br label %25

31:                                               ; preds = %64, %84
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 -86, i64 4, i1 false)
  %32 = ptrtoint ptr %5 to i64
  %33 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %32, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 4, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %38, align 8
  %39 = ptrtoint ptr %4 to i64
  %40 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %39, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %41 = ptrtoint ptr %3 to i64
  %42 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %42, align 8
  %43 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %41, ptr %43, align 8
  %44 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 8, ptr %44, align 8
  %45 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %46, align 8
  %47 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %47, align 8
  %48 = ptrtoint ptr %4 to i64
  %49 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %48, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %2, i8 -86, i64 8, i1 false)
  %50 = ptrtoint ptr %2 to i64
  %51 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %51, align 8
  %52 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %50, ptr %52, align 8
  %53 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 8, ptr %53, align 8
  %54 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %54, align 8
  %55 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %55, align 8
  %56 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %56, align 8
  %57 = ptrtoint ptr %4 to i64
  %58 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %57, i64 0)
  %59 = load i64, ptr %6, align 8
  %60 = icmp ugt i64 %59, 1071001154
  br i1 %60, label %118, label %121

61:                                               ; preds = %25
  %62 = load i64, ptr %6, align 8
  %63 = icmp ugt i64 %62, 2146435072
  br i1 %63, label %68, label %70

64:                                               ; preds = %25
  br label %31

65:                                               ; preds = %70
  %66 = load double, ptr %8, align 8
  %67 = fcmp ogt double %66, 0x40862E42FEFA39EF
  br i1 %67, label %74, label %80

68:                                               ; preds = %61
  %69 = load double, ptr %8, align 8
  ret double %69

70:                                               ; preds = %61
  br label %65

71:                                               ; preds = %80
  %72 = load double, ptr %8, align 8
  %73 = fcmp olt double %72, 0xC086232BDD7ABCD2
  br i1 %73, label %85, label %88

74:                                               ; preds = %65
  %75 = load double, ptr %8, align 8
  %76 = bitcast double %75 to i64
  %77 = and i64 %76, 9223372036854775807
  %78 = icmp eq i64 %77, 9218868437227405312
  %79 = xor i1 %78, true
  br i1 %79, label %82, label %83

80:                                               ; preds = %65
  br label %71

81:                                               ; preds = %83, %82
  ret double 0x7FF0000000000000

82:                                               ; preds = %74
  call fastcc void @math.raiseOverflow()
  br label %81

83:                                               ; preds = %74
  br label %81

84:                                               ; preds = %88, %89
  br label %31

85:                                               ; preds = %71
  %86 = load double, ptr %8, align 8
  %87 = fcmp olt double %86, 0xC0874910D52D3051
  br i1 %87, label %90, label %91

88:                                               ; preds = %71
  br label %84

89:                                               ; preds = %91
  br label %84

90:                                               ; preds = %85
  ret double 0.000000e+00

91:                                               ; preds = %85
  br label %89

92:                                               ; preds = %169, %124
  %93 = load double, ptr %8, align 8
  %94 = load double, ptr %8, align 8
  %95 = fmul double %93, %94
  %96 = load double, ptr %8, align 8
  %97 = fmul double %95, 0x3E66376972BEA4D0
  %98 = fadd double 0xBEBBBD41C5D26BF1, %97
  %99 = fmul double %95, %98
  %100 = fadd double 0x3F11566AAF25DE2C, %99
  %101 = fmul double %95, %100
  %102 = fadd double 0xBF66C16C16BEBD93, %101
  %103 = fmul double %95, %102
  %104 = fadd double 0x3FC555555555553E, %103
  %105 = fmul double %95, %104
  %106 = fsub double %96, %105
  %107 = load double, ptr %8, align 8
  %108 = fmul double %107, %106
  %109 = fsub double 2.000000e+00, %106
  %110 = fdiv double %108, %109
  %111 = load double, ptr %2, align 8
  %112 = fsub double %110, %111
  %113 = load double, ptr %3, align 8
  %114 = fadd double %112, %113
  %115 = fadd double 1.000000e+00, %114
  %116 = load i32, ptr %5, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %175, label %176

118:                                              ; preds = %31
  %119 = load i64, ptr %6, align 8
  %120 = icmp ugt i64 %119, 1072734898
  br i1 %120, label %134, label %138

121:                                              ; preds = %31
  %122 = load i64, ptr %6, align 8
  %123 = icmp ugt i64 %122, 1043333120
  br i1 %123, label %170, label %172

124:                                              ; preds = %167, %158
  %125 = load i32, ptr %5, align 4
  %126 = sitofp i32 %125 to double
  %127 = load double, ptr %8, align 8
  %128 = fmul double %126, 0x3FE62E42FEE00000
  %129 = fsub double %127, %128
  store double %129, ptr %3, align 8
  %130 = fmul double %126, 0x3DEA39EF35793C76
  store double %130, ptr %2, align 8
  %131 = load double, ptr %3, align 8
  %132 = load double, ptr %2, align 8
  %133 = fsub double %131, %132
  store double %133, ptr %8, align 8
  br label %92

134:                                              ; preds = %118
  %135 = load double, ptr %8, align 8
  %136 = fmul double 0x3FF71547652B82FE, %135
  %137 = icmp sge i32 %18, 0
  br i1 %137, label %144, label %145

138:                                              ; preds = %118
  %139 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %18)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %161, label %162

141:                                              ; preds = %144
  %142 = sext i32 %18 to i64
  %143 = icmp ult i64 %142, 2
  br i1 %143, label %156, label %157

144:                                              ; preds = %134
  br label %141

145:                                              ; preds = %134
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @93)
  unreachable

146:                                              ; preds = %156
  %147 = getelementptr inbounds [2 x double], ptr @94, i64 0, i64 %142
  %148 = load double, ptr %147, align 8
  %149 = fadd double %136, %148
  %150 = fptosi double %149 to i32
  %151 = sitofp i32 %150 to double
  %152 = fsub double %149, %151
  %153 = fcmp olt double %152, 1.000000e+00
  %154 = fcmp ogt double %152, -1.000000e+00
  %155 = and i1 %153, %154
  br i1 %155, label %159, label %160

156:                                              ; preds = %141
  br label %146

157:                                              ; preds = %141
  call fastcc void @builtin.panicOutOfBounds(i64 %142, i64 2)
  unreachable

158:                                              ; preds = %159
  store i32 %150, ptr %5, align 4
  br label %124

159:                                              ; preds = %146
  br label %158

160:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @93)
  unreachable

161:                                              ; preds = %138
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

162:                                              ; preds = %138
  %163 = extractvalue { i32, i1 } %139, 0
  %164 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %163, i32 %18)
  %165 = extractvalue { i32, i1 } %164, 1
  br i1 %165, label %166, label %167

166:                                              ; preds = %162
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

167:                                              ; preds = %162
  %168 = extractvalue { i32, i1 } %164, 0
  store i32 %168, ptr %5, align 4
  br label %124

169:                                              ; preds = %170
  br label %92

170:                                              ; preds = %121
  store i32 0, ptr %5, align 4
  %171 = load double, ptr %8, align 8
  store double %171, ptr %3, align 8
  store double 0.000000e+00, ptr %2, align 8
  br label %169

172:                                              ; preds = %121
  %173 = load double, ptr %8, align 8
  %174 = fadd double 1.000000e+00, %173
  ret double %174

175:                                              ; preds = %92
  ret double %115

176:                                              ; preds = %92
  %177 = load i32, ptr %5, align 4
  %178 = call fastcc double @math.ldexp.ldexp__anon_3767(double %115, i32 %177)
  ret double %178
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.raiseOverflow() unnamed_addr #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__expx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @expq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @expq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @exp(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @expl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__expx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__exp2h(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @exp2f(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @exp2f(float %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  store i32 %6, ptr %5, align 4
  %7 = load i32, ptr %5, align 4
  %8 = and i32 %7, 2147483647
  %9 = icmp ugt i32 %8, 1123811328
  br i1 %9, label %20, label %22

10:                                               ; preds = %62, %41
  %11 = fadd float %0, 7.864320e+05
  store float %11, ptr %4, align 4
  %12 = load float, ptr %4, align 4
  %13 = bitcast float %12 to i32
  store i32 %13, ptr %3, align 4
  %14 = load i32, ptr %3, align 4
  %15 = add i32 %14, 8
  store i32 %15, ptr %3, align 4
  %16 = load i32, ptr %3, align 4
  %17 = udiv i32 %16, 16
  %18 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 1023, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %66, label %67

20:                                               ; preds = %1
  %21 = icmp ugt i32 %8, 2139095040
  br i1 %21, label %27, label %28

22:                                               ; preds = %1
  %23 = icmp ule i32 %8, 855638016
  br i1 %23, label %63, label %65

24:                                               ; preds = %28
  %25 = load i32, ptr %5, align 4
  %26 = icmp uge i32 %25, 1124073472
  br i1 %26, label %34, label %37

27:                                               ; preds = %20
  ret float %0

28:                                               ; preds = %20
  br label %24

29:                                               ; preds = %40
  %30 = load i32, ptr %5, align 4
  %31 = icmp uge i32 %30, -2147483648
  br i1 %31, label %42, label %45

32:                                               ; preds = %37, %34
  %33 = phi i1 [ %36, %34 ], [ false, %37 ]
  br i1 %33, label %38, label %40

34:                                               ; preds = %24
  %35 = load i32, ptr %5, align 4
  %36 = icmp ult i32 %35, -2147483648
  br label %32

37:                                               ; preds = %24
  br label %32

38:                                               ; preds = %32
  %39 = fmul float %0, 0x47E0000000000000
  ret float %39

40:                                               ; preds = %32
  br label %29

41:                                               ; preds = %45, %59
  br label %10

42:                                               ; preds = %29
  %43 = load i32, ptr %5, align 4
  %44 = icmp uge i32 %43, -1021968384
  br i1 %44, label %51, label %52

45:                                               ; preds = %29
  br label %41

46:                                               ; preds = %58, %56
  %47 = load i32, ptr %5, align 4
  %48 = icmp uge i32 %47, 51773440
  br i1 %48, label %60, label %61

49:                                               ; preds = %52, %51
  %50 = phi i1 [ true, %51 ], [ %55, %52 ]
  br i1 %50, label %56, label %58

51:                                               ; preds = %42
  br label %49

52:                                               ; preds = %42
  %53 = load i32, ptr %5, align 4
  %54 = and i32 %53, 65535
  %55 = icmp ne i32 %54, 0
  br label %49

56:                                               ; preds = %49
  %57 = fdiv float 0xB6A0000000000000, %0
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %57)
  br label %46

58:                                               ; preds = %49
  br label %46

59:                                               ; preds = %61
  br label %41

60:                                               ; preds = %46
  ret float 0.000000e+00

61:                                               ; preds = %46
  br label %59

62:                                               ; preds = %65
  br label %10

63:                                               ; preds = %22
  %64 = fadd float 1.000000e+00, %0
  ret float %64

65:                                               ; preds = %22
  br label %62

66:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %10
  %68 = extractvalue { i32, i1 } %18, 0
  %69 = zext i32 %68 to i64
  %70 = shl i64 %69, 52
  %71 = bitcast i64 %70 to double
  %72 = load i32, ptr %3, align 4
  %73 = and i32 %72, 15
  store i32 %73, ptr %3, align 4
  %74 = load float, ptr %4, align 4
  %75 = fsub float %74, 7.864320e+05
  store float %75, ptr %4, align 4
  %76 = load float, ptr %4, align 4
  %77 = fsub float %0, %76
  %78 = fpext float %77 to double
  %79 = load i32, ptr %3, align 4
  %80 = zext i32 %79 to i64
  %81 = icmp ult i64 %80, 16
  br i1 %81, label %101, label %102

82:                                               ; preds = %101
  %83 = getelementptr inbounds [16 x double], ptr @95, i64 0, i64 %80
  %84 = load double, ptr %83, align 8
  store double %84, ptr %2, align 8
  %85 = load double, ptr %2, align 8
  %86 = fmul double %85, %78
  %87 = load double, ptr %2, align 8
  %88 = fmul double %78, 0x3FCEBFBE00000000
  %89 = fadd double 0x3FE62E4300000000, %88
  %90 = fmul double %86, %89
  %91 = fadd double %87, %90
  %92 = fmul double %78, %78
  %93 = fmul double %86, %92
  %94 = fmul double %78, 0x3F83B2C9C0000000
  %95 = fadd double 0x3FAC6B3480000000, %94
  %96 = fmul double %93, %95
  %97 = fadd double %91, %96
  store double %97, ptr %2, align 8
  %98 = load double, ptr %2, align 8
  %99 = fmul double %98, %71
  %100 = fptrunc double %99 to float
  ret float %100

101:                                              ; preds = %67
  br label %82

102:                                              ; preds = %67
  call fastcc void @builtin.panicOutOfBounds(i64 %80, i64 16)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @exp2(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = bitcast double %0 to i64
  %7 = lshr i64 %6, 32
  %8 = sub i64 4294967295, %7
  %9 = icmp ule i64 %8, 4294967295
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 2147483647
  %13 = call fastcc i1 @math.isnan.isNan__anon_3714(double %0)
  br i1 %13, label %18, label %20

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @96)
  unreachable

16:                                               ; preds = %20
  %17 = icmp uge i32 %12, 1083174912
  br i1 %17, label %32, label %34

18:                                               ; preds = %10
  store double 0x7FF0000000000001, ptr %5, align 8
  %19 = load double, ptr %5, align 8
  ret double %19

20:                                               ; preds = %10
  br label %16

21:                                               ; preds = %72, %52
  %22 = fadd double %0, 0x42B8000000000000
  store double %22, ptr %4, align 8
  %23 = load double, ptr %4, align 8
  %24 = bitcast double %23 to i64
  %25 = trunc i64 %24 to i32
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = add i32 %26, 128
  store i32 %27, ptr %3, align 4
  %28 = load i32, ptr %3, align 4
  %29 = udiv i32 %28, 256
  %30 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 %29, i32 256)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %76, label %77

32:                                               ; preds = %16
  %33 = icmp uge i32 %12, 1083179008
  br i1 %33, label %40, label %43

34:                                               ; preds = %16
  %35 = icmp ult i32 %12, 1016070144
  br i1 %35, label %73, label %75

36:                                               ; preds = %45
  %37 = icmp uge i32 %12, 2146435072
  br i1 %37, label %49, label %51

38:                                               ; preds = %43, %40
  %39 = phi i1 [ %42, %40 ], [ false, %43 ]
  br i1 %39, label %44, label %45

40:                                               ; preds = %32
  %41 = lshr i64 %6, 63
  %42 = icmp eq i64 %41, 0
  br label %38

43:                                               ; preds = %32
  br label %38

44:                                               ; preds = %38
  call fastcc void @math.raiseOverflow()
  ret double 0x7FF0000000000000

45:                                               ; preds = %38
  br label %36

46:                                               ; preds = %51
  %47 = lshr i64 %6, 63
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %53, label %55

49:                                               ; preds = %36
  %50 = fdiv double -1.000000e+00, %0
  ret double %50

51:                                               ; preds = %36
  br label %46

52:                                               ; preds = %55, %69
  br label %21

53:                                               ; preds = %46
  %54 = fcmp ole double %0, -1.075000e+03
  br i1 %54, label %60, label %61

55:                                               ; preds = %46
  br label %52

56:                                               ; preds = %68, %65
  %57 = fcmp ole double %0, -1.075000e+03
  br i1 %57, label %70, label %71

58:                                               ; preds = %61, %60
  %59 = phi i1 [ true, %60 ], [ %64, %61 ]
  br i1 %59, label %65, label %68

60:                                               ; preds = %53
  br label %58

61:                                               ; preds = %53
  %62 = fsub double %0, 0x4330000000000000
  %63 = fadd double %62, 0x4330000000000000
  %64 = fcmp une double %63, %0
  br label %58

65:                                               ; preds = %58
  %66 = fdiv double 0xB6A0000000000000, %0
  %67 = fptrunc double %66 to float
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %67)
  br label %56

68:                                               ; preds = %58
  br label %56

69:                                               ; preds = %71
  br label %52

70:                                               ; preds = %56
  ret double 0.000000e+00

71:                                               ; preds = %56
  br label %69

72:                                               ; preds = %75
  br label %21

73:                                               ; preds = %34
  %74 = fadd double 1.000000e+00, %0
  ret double %74

75:                                               ; preds = %34
  br label %72

76:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %21
  %78 = extractvalue { i32, i1 } %30, 0
  %79 = sdiv i32 %78, 256
  %80 = load i32, ptr %3, align 4
  %81 = urem i32 %80, 256
  store i32 %81, ptr %3, align 4
  %82 = load double, ptr %4, align 8
  %83 = fsub double %82, 0x42B8000000000000
  store double %83, ptr %4, align 8
  %84 = load double, ptr %4, align 8
  %85 = fsub double %0, %84
  store double %85, ptr %2, align 8
  %86 = load i32, ptr %3, align 4
  %87 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 2, i32 %86)
  %88 = extractvalue { i32, i1 } %87, 1
  br i1 %88, label %89, label %90

89:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %77
  %91 = extractvalue { i32, i1 } %87, 0
  %92 = zext i32 %91 to i64
  %93 = icmp ult i64 %92, 512
  br i1 %93, label %101, label %102

94:                                               ; preds = %101
  %95 = getelementptr inbounds [512 x double], ptr @97, i64 0, i64 %92
  %96 = load double, ptr %95, align 8
  %97 = load double, ptr %2, align 8
  %98 = load i32, ptr %3, align 4
  %99 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 2, i32 %98)
  %100 = extractvalue { i32, i1 } %99, 1
  br i1 %100, label %103, label %104

101:                                              ; preds = %90
  br label %94

102:                                              ; preds = %90
  call fastcc void @builtin.panicOutOfBounds(i64 %92, i64 512)
  unreachable

103:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %94
  %105 = extractvalue { i32, i1 } %99, 0
  %106 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %105, i32 1)
  %107 = extractvalue { i32, i1 } %106, 1
  br i1 %107, label %108, label %109

108:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

109:                                              ; preds = %104
  %110 = extractvalue { i32, i1 } %106, 0
  %111 = zext i32 %110 to i64
  %112 = icmp ult i64 %111, 512
  br i1 %112, label %134, label %135

113:                                              ; preds = %134
  %114 = getelementptr inbounds [512 x double], ptr @97, i64 0, i64 %111
  %115 = load double, ptr %114, align 8
  %116 = fsub double %97, %115
  store double %116, ptr %2, align 8
  %117 = load double, ptr %2, align 8
  %118 = fmul double %96, %117
  %119 = load double, ptr %2, align 8
  %120 = load double, ptr %2, align 8
  %121 = load double, ptr %2, align 8
  %122 = load double, ptr %2, align 8
  %123 = fmul double %122, 0x3F55D88003875C74
  %124 = fadd double 0x3F83B2AB88F70400, %123
  %125 = fmul double %121, %124
  %126 = fadd double 0x3FAC6B08D704A0A6, %125
  %127 = fmul double %120, %126
  %128 = fadd double 0x3FCEBFBDFF82C575, %127
  %129 = fmul double %119, %128
  %130 = fadd double 0x3FE62E42FEFA39EF, %129
  %131 = fmul double %118, %130
  %132 = fadd double %96, %131
  %133 = call fastcc double @math.ldexp.ldexp__anon_3767(double %132, i32 %79)
  ret double %133

134:                                              ; preds = %109
  br label %113

135:                                              ; preds = %109
  call fastcc void @builtin.panicOutOfBounds(i64 %111, i64 512)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__exp2x(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @exp2q(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @exp2q(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @exp2(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @exp2l(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__exp2x(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__fabsh(half %0) #0 {
  %2 = bitcast half %0 to i16
  %3 = and i16 %2, 32767
  %4 = bitcast i16 %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @fabsf(float %0) #0 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = bitcast i32 %3 to float
  ret float %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @fabs(double %0) #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__fabsx(x86_fp80 %0) #0 {
  %2 = bitcast x86_fp80 %0 to i80
  %3 = and i80 %2, 604462909807314587353087
  %4 = bitcast i80 %3 to x86_fp80
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @fabsq(fp128 %0) #0 {
  %2 = bitcast fp128 %0 to i128
  %3 = and i128 %2, 170141183460469231731687303715884105727
  %4 = bitcast i128 %3 to fp128
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @fabsl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__fabsx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__floorh(half %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = bitcast half %0 to i16
  store i16 %5, ptr %4, align 2
  %6 = load i16, ptr %4, align 2
  %7 = lshr i16 %6, 10
  %8 = and i16 %7, 31
  %9 = sub i16 32767, %8
  %10 = icmp ule i16 %9, 32767
  br i1 %10, label %14, label %15

11:                                               ; preds = %14
  %12 = call fastcc { i16, i1 } @llvm.ssub.with.overflow.i16(i16 %8, i16 15)
  %13 = extractvalue { i16, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  br label %11

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @98)
  unreachable

16:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %11
  %18 = extractvalue { i16, i1 } %12, 0
  call void @llvm.memset.p0.i64(ptr align 2 %3, i8 -86, i64 2, i1 false)
  %19 = ptrtoint ptr %3 to i64
  %20 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %19, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 2, ptr %22, align 8
  %23 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %23, align 8
  %24 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %24, align 8
  %25 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %25, align 8
  %26 = ptrtoint ptr %2 to i64
  %27 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %26, i64 0)
  %28 = fcmp oeq half %0, 0xH0000
  br i1 %28, label %31, label %32

29:                                               ; preds = %32
  %30 = icmp sge i16 %18, 10
  br i1 %30, label %35, label %36

31:                                               ; preds = %17
  ret half %0

32:                                               ; preds = %17
  br label %29

33:                                               ; preds = %36
  %34 = icmp sge i16 %18, 0
  br i1 %34, label %37, label %40

35:                                               ; preds = %29
  ret half %0

36:                                               ; preds = %29
  br label %33

37:                                               ; preds = %33
  %38 = sub i16 15, %18
  %39 = icmp ule i16 %38, 15
  br i1 %39, label %53, label %54

40:                                               ; preds = %33
  %41 = fadd half %0, 0xH7C00
  call fastcc void @math.doNotOptimizeAway__anon_3814(half %41)
  %42 = load i16, ptr %4, align 2
  %43 = lshr i16 %42, 15
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %77, label %78

45:                                               ; preds = %53
  %46 = trunc i16 %18 to i4
  %47 = zext i4 %46 to i16
  %48 = lshr i16 1023, %47
  store i16 %48, ptr %3, align 2
  %49 = load i16, ptr %4, align 2
  %50 = load i16, ptr %3, align 2
  %51 = and i16 %49, %50
  %52 = icmp eq i16 %51, 0
  br i1 %52, label %60, label %61

53:                                               ; preds = %37
  br label %45

54:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @98)
  unreachable

55:                                               ; preds = %61
  %56 = fadd half %0, 0xH7C00
  call fastcc void @math.doNotOptimizeAway__anon_3814(half %56)
  %57 = load i16, ptr %4, align 2
  %58 = lshr i16 %57, 15
  %59 = icmp ne i16 %58, 0
  br i1 %59, label %68, label %73

60:                                               ; preds = %45
  ret half %0

61:                                               ; preds = %45
  br label %55

62:                                               ; preds = %73, %75
  %63 = load i16, ptr %4, align 2
  %64 = load i16, ptr %3, align 2
  %65 = xor i16 %64, -1
  %66 = and i16 %63, %65
  %67 = bitcast i16 %66 to half
  ret half %67

68:                                               ; preds = %55
  %69 = load i16, ptr %4, align 2
  %70 = load i16, ptr %3, align 2
  %71 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %69, i16 %70)
  %72 = extractvalue { i16, i1 } %71, 1
  br i1 %72, label %74, label %75

73:                                               ; preds = %55
  br label %62

74:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %68
  %76 = extractvalue { i16, i1 } %71, 0
  store i16 %76, ptr %4, align 2
  br label %62

77:                                               ; preds = %40
  ret half 0xH0000

78:                                               ; preds = %40
  ret half 0xHBC00
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i16, i1 } @llvm.ssub.with.overflow.i16(i16, i16) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @math.doNotOptimizeAway__anon_3814(half %0) unnamed_addr #0 {
  call fastcc void @mem.doNotOptimizeAway__anon_4341(half %0)
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @floorf(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast float %0 to i32
  store i32 %5, ptr %4, align 4
  %6 = load i32, ptr %4, align 4
  %7 = lshr i32 %6, 23
  %8 = and i32 %7, 255
  %9 = sub i32 2147483647, %8
  %10 = icmp ule i32 %9, 2147483647
  br i1 %10, label %14, label %15

11:                                               ; preds = %14
  %12 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 127)
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  br label %11

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @99)
  unreachable

16:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %11
  %18 = extractvalue { i32, i1 } %12, 0
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %19 = ptrtoint ptr %3 to i64
  %20 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %19, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %22, align 8
  %23 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %23, align 8
  %24 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %24, align 8
  %25 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %25, align 8
  %26 = ptrtoint ptr %2 to i64
  %27 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %26, i64 0)
  %28 = fcmp oeq float %0, 0.000000e+00
  br i1 %28, label %31, label %32

29:                                               ; preds = %32
  %30 = icmp sge i32 %18, 23
  br i1 %30, label %35, label %36

31:                                               ; preds = %17
  ret float %0

32:                                               ; preds = %17
  br label %29

33:                                               ; preds = %36
  %34 = icmp sge i32 %18, 0
  br i1 %34, label %37, label %40

35:                                               ; preds = %29
  ret float %0

36:                                               ; preds = %29
  br label %33

37:                                               ; preds = %33
  %38 = sub i32 31, %18
  %39 = icmp ule i32 %38, 31
  br i1 %39, label %53, label %54

40:                                               ; preds = %33
  %41 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %41)
  %42 = load i32, ptr %4, align 4
  %43 = lshr i32 %42, 31
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %77, label %78

45:                                               ; preds = %53
  %46 = trunc i32 %18 to i5
  %47 = zext i5 %46 to i32
  %48 = lshr i32 8388607, %47
  store i32 %48, ptr %3, align 4
  %49 = load i32, ptr %4, align 4
  %50 = load i32, ptr %3, align 4
  %51 = and i32 %49, %50
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %60, label %61

53:                                               ; preds = %37
  br label %45

54:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @99)
  unreachable

55:                                               ; preds = %61
  %56 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %56)
  %57 = load i32, ptr %4, align 4
  %58 = lshr i32 %57, 31
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %68, label %73

60:                                               ; preds = %45
  ret float %0

61:                                               ; preds = %45
  br label %55

62:                                               ; preds = %73, %75
  %63 = load i32, ptr %4, align 4
  %64 = load i32, ptr %3, align 4
  %65 = xor i32 %64, -1
  %66 = and i32 %63, %65
  %67 = bitcast i32 %66 to float
  ret float %67

68:                                               ; preds = %55
  %69 = load i32, ptr %4, align 4
  %70 = load i32, ptr %3, align 4
  %71 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %69, i32 %70)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %74, label %75

73:                                               ; preds = %55
  br label %62

74:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %68
  %76 = extractvalue { i32, i1 } %71, 0
  store i32 %76, ptr %4, align 4
  br label %62

77:                                               ; preds = %40
  ret float 0.000000e+00

78:                                               ; preds = %40
  ret float -1.000000e+00
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @floor(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca double, align 8
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 52
  %6 = and i64 %5, 2047
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %7 = ptrtoint ptr %3 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %2 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp uge i64 %6, 1075
  br i1 %16, label %22, label %23

17:                                               ; preds = %26
  %18 = lshr i64 %4, 63
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %29, label %33

20:                                               ; preds = %23, %22
  %21 = phi i1 [ true, %22 ], [ %24, %23 ]
  br i1 %21, label %25, label %26

22:                                               ; preds = %1
  br label %20

23:                                               ; preds = %1
  %24 = fcmp oeq double %0, 0.000000e+00
  br label %20

25:                                               ; preds = %20
  ret double %0

26:                                               ; preds = %20
  br label %17

27:                                               ; preds = %33, %29
  %28 = icmp ule i64 %6, 1022
  br i1 %28, label %37, label %41

29:                                               ; preds = %17
  %30 = fsub double %0, 0x4330000000000000
  %31 = fadd double %30, 0x4330000000000000
  %32 = fsub double %31, %0
  store double %32, ptr %3, align 8
  br label %27

33:                                               ; preds = %17
  %34 = fadd double %0, 0x4330000000000000
  %35 = fsub double %34, 0x4330000000000000
  %36 = fsub double %35, %0
  store double %36, ptr %3, align 8
  br label %27

37:                                               ; preds = %27
  %38 = load double, ptr %3, align 8
  call fastcc void @math.doNotOptimizeAway__anon_3776(double %38)
  %39 = lshr i64 %4, 63
  %40 = icmp ne i64 %39, 0
  br i1 %40, label %44, label %45

41:                                               ; preds = %27
  %42 = load double, ptr %3, align 8
  %43 = fcmp ogt double %42, 0.000000e+00
  br i1 %43, label %46, label %50

44:                                               ; preds = %37
  ret double -1.000000e+00

45:                                               ; preds = %37
  ret double 0.000000e+00

46:                                               ; preds = %41
  %47 = load double, ptr %3, align 8
  %48 = fadd double %0, %47
  %49 = fsub double %48, 1.000000e+00
  ret double %49

50:                                               ; preds = %41
  %51 = load double, ptr %3, align 8
  %52 = fadd double %0, %51
  ret double %52
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__floorx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @floorq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @floorq(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca fp128, align 16
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 112
  %6 = and i128 %5, 32767
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %7 = ptrtoint ptr %3 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %2 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = icmp uge i128 %6, 16495
  br i1 %16, label %22, label %23

17:                                               ; preds = %27
  %18 = lshr i128 %4, 127
  %19 = icmp ne i128 %18, 0
  br i1 %19, label %30, label %34

20:                                               ; preds = %23, %22
  %21 = phi i1 [ true, %22 ], [ %25, %23 ]
  br i1 %21, label %26, label %27

22:                                               ; preds = %1
  br label %20

23:                                               ; preds = %1
  %24 = call i32 @__eqtf2(fp128 %0, fp128 0xL00000000000000000000000000000000)
  %25 = icmp eq i32 %24, 0
  br label %20

26:                                               ; preds = %20
  ret fp128 %0

27:                                               ; preds = %20
  br label %17

28:                                               ; preds = %34, %30
  %29 = icmp ule i128 %6, 16382
  br i1 %29, label %38, label %42

30:                                               ; preds = %17
  %31 = call fp128 @__subtf3(fp128 %0, fp128 0xL0000000000000000406F000000000000)
  %32 = call fp128 @__addtf3(fp128 %31, fp128 0xL0000000000000000406F000000000000)
  %33 = call fp128 @__subtf3(fp128 %32, fp128 %0)
  store fp128 %33, ptr %3, align 16
  br label %28

34:                                               ; preds = %17
  %35 = call fp128 @__addtf3(fp128 %0, fp128 0xL0000000000000000406F000000000000)
  %36 = call fp128 @__subtf3(fp128 %35, fp128 0xL0000000000000000406F000000000000)
  %37 = call fp128 @__subtf3(fp128 %36, fp128 %0)
  store fp128 %37, ptr %3, align 16
  br label %28

38:                                               ; preds = %28
  %39 = load fp128, ptr %3, align 16
  call fastcc void @math.doNotOptimizeAway__anon_3777(fp128 %39)
  %40 = lshr i128 %4, 127
  %41 = icmp ne i128 %40, 0
  br i1 %41, label %46, label %47

42:                                               ; preds = %28
  %43 = load fp128, ptr %3, align 16
  %44 = call i32 @__gttf2(fp128 %43, fp128 0xL00000000000000000000000000000000)
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %48, label %52

46:                                               ; preds = %38
  ret fp128 0xL0000000000000000BFFF000000000000

47:                                               ; preds = %38
  ret fp128 0xL00000000000000000000000000000000

48:                                               ; preds = %42
  %49 = load fp128, ptr %3, align 16
  %50 = call fp128 @__addtf3(fp128 %0, fp128 %49)
  %51 = call fp128 @__subtf3(fp128 %50, fp128 0xL00000000000000003FFF000000000000)
  ret fp128 %51

52:                                               ; preds = %42
  %53 = load fp128, ptr %3, align 16
  %54 = call fp128 @__addtf3(fp128 %0, fp128 %53)
  ret fp128 %54
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @floorl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__floorx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__fmah(half %0, half %1, half %2) #0 {
  %4 = fpext half %0 to float
  %5 = fpext half %1 to float
  %6 = fpext half %2 to float
  %7 = call float @fmaf(float %4, float %5, float %6)
  %8 = fptrunc float %7 to half
  ret half %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @fmaf(float %0, float %1, float %2) #0 {
  %4 = fpext float %0 to double
  %5 = fpext float %1 to double
  %6 = fmul double %4, %5
  %7 = fpext float %2 to double
  %8 = fadd double %6, %7
  %9 = bitcast double %8 to i64
  %10 = lshr i64 %9, 52
  %11 = and i64 %10, 2047
  %12 = and i64 %9, 536870911
  %13 = icmp ne i64 %12, 268435456
  br i1 %13, label %16, label %17

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %18, %17 ]
  br i1 %15, label %21, label %22

16:                                               ; preds = %3
  br label %14

17:                                               ; preds = %3
  %18 = icmp eq i64 %11, 2047
  br label %14

19:                                               ; preds = %26, %21
  %20 = phi i1 [ true, %21 ], [ %27, %26 ]
  br i1 %20, label %33, label %35

21:                                               ; preds = %14
  br label %19

22:                                               ; preds = %14
  %23 = fsub double %8, %6
  %24 = fpext float %2 to double
  %25 = fcmp oeq double %23, %24
  br i1 %25, label %28, label %32

26:                                               ; preds = %32, %28
  %27 = phi i1 [ %31, %28 ], [ false, %32 ]
  br label %19

28:                                               ; preds = %22
  %29 = fpext float %2 to double
  %30 = fsub double %8, %29
  %31 = fcmp oeq double %30, %6
  br label %26

32:                                               ; preds = %22
  br label %26

33:                                               ; preds = %19
  %34 = fptrunc double %8 to float
  ret float %34

35:                                               ; preds = %19
  %36 = fptrunc double %8 to float
  ret float %36
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @fma(double %0, double %1, double %2) #0 {
  %4 = alloca %compiler_rt.fma.dd, align 8
  %5 = alloca %compiler_rt.fma.dd, align 8
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca %"math.frexp.Frexp(f64)", align 8
  %10 = alloca double, align 8
  %11 = alloca i32, align 4
  %12 = alloca %"math.frexp.Frexp(f64)", align 8
  %13 = alloca double, align 8
  %14 = alloca i32, align 4
  %15 = alloca %"math.frexp.Frexp(f64)", align 8
  %16 = call fastcc i1 @math.isfinite.isFinite__anon_3768(double %0)
  %17 = xor i1 %16, true
  br i1 %17, label %23, label %24

18:                                               ; preds = %30
  %19 = call fastcc i1 @math.isfinite.isFinite__anon_3768(double %2)
  %20 = xor i1 %19, true
  br i1 %20, label %33, label %34

21:                                               ; preds = %24, %23
  %22 = phi i1 [ true, %23 ], [ %26, %24 ]
  br i1 %22, label %27, label %30

23:                                               ; preds = %3
  br label %21

24:                                               ; preds = %3
  %25 = call fastcc i1 @math.isfinite.isFinite__anon_3768(double %1)
  %26 = xor i1 %25, true
  br label %21

27:                                               ; preds = %21
  %28 = fmul double %0, %1
  %29 = fadd double %28, %2
  ret double %29

30:                                               ; preds = %21
  br label %18

31:                                               ; preds = %34
  %32 = fcmp oeq double %0, 0.000000e+00
  br i1 %32, label %39, label %40

33:                                               ; preds = %18
  ret double %2

34:                                               ; preds = %18
  br label %31

35:                                               ; preds = %45
  %36 = fcmp oeq double %2, 0.000000e+00
  br i1 %36, label %63, label %65

37:                                               ; preds = %40, %39
  %38 = phi i1 [ true, %39 ], [ %41, %40 ]
  br i1 %38, label %42, label %45

39:                                               ; preds = %31
  br label %37

40:                                               ; preds = %31
  %41 = fcmp oeq double %1, 0.000000e+00
  br label %37

42:                                               ; preds = %37
  %43 = fmul double %0, %1
  %44 = fadd double %43, %2
  ret double %44

45:                                               ; preds = %37
  br label %35

46:                                               ; preds = %65
  call fastcc void @math.frexp.frexp__anon_3832(ptr sret(%"math.frexp.Frexp(f64)") %15, double %0)
  %47 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %15, i32 0, i32 1
  %48 = load i32, ptr %47, align 4
  store i32 %48, ptr %14, align 4
  %49 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %15, i32 0, i32 0
  %50 = load double, ptr %49, align 8
  store double %50, ptr %13, align 8
  call fastcc void @math.frexp.frexp__anon_3832(ptr sret(%"math.frexp.Frexp(f64)") %12, double %1)
  %51 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %12, i32 0, i32 1
  %52 = load i32, ptr %51, align 4
  store i32 %52, ptr %11, align 4
  %53 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %12, i32 0, i32 0
  %54 = load double, ptr %53, align 8
  store double %54, ptr %10, align 8
  call fastcc void @math.frexp.frexp__anon_3832(ptr sret(%"math.frexp.Frexp(f64)") %9, double %2)
  %55 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %9, i32 0, i32 1
  %56 = load i32, ptr %55, align 4
  store i32 %56, ptr %8, align 4
  %57 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %9, i32 0, i32 0
  %58 = load double, ptr %57, align 8
  store double %58, ptr %7, align 8
  %59 = load i32, ptr %14, align 4
  %60 = load i32, ptr %11, align 4
  %61 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %59, i32 %60)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %66, label %67

63:                                               ; preds = %35
  %64 = fmul double %0, %1
  ret double %64

65:                                               ; preds = %35
  br label %46

66:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %46
  %68 = extractvalue { i32, i1 } %61, 0
  %69 = load i32, ptr %8, align 4
  %70 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %68, i32 %69)
  %71 = extractvalue { i32, i1 } %70, 1
  br i1 %71, label %72, label %73

72:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %67
  %74 = extractvalue { i32, i1 } %70, 0
  store i32 %74, ptr %6, align 4
  %75 = load i32, ptr %6, align 4
  %76 = icmp sle i32 %75, 106
  br i1 %76, label %87, label %92

77:                                               ; preds = %92, %96
  %78 = load double, ptr %13, align 8
  %79 = load double, ptr %10, align 8
  call fastcc void @compiler_rt.fma.dd_mul(ptr sret(%compiler_rt.fma.dd) %5, double %78, double %79)
  %80 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 0
  %81 = load double, ptr %80, align 8
  %82 = load double, ptr %7, align 8
  call fastcc void @compiler_rt.fma.dd_add(ptr sret(%compiler_rt.fma.dd) %4, double %81, double %82)
  %83 = load i32, ptr %14, align 4
  %84 = load i32, ptr %11, align 4
  %85 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %83, i32 %84)
  %86 = extractvalue { i32, i1 } %85, 1
  br i1 %86, label %99, label %100

87:                                               ; preds = %73
  %88 = load double, ptr %7, align 8
  %89 = load i32, ptr %6, align 4
  %90 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %95, label %96

92:                                               ; preds = %73
  %93 = load double, ptr %7, align 8
  %94 = call fastcc double @math.copysign.copysign__anon_3715(double 0x10000000000000, double %93)
  store double %94, ptr %7, align 8
  br label %77

95:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

96:                                               ; preds = %87
  %97 = extractvalue { i32, i1 } %90, 0
  %98 = call fastcc double @math.ldexp.ldexp__anon_3767(double %88, i32 %97)
  store double %98, ptr %7, align 8
  br label %77

99:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %77
  %101 = extractvalue { i32, i1 } %85, 0
  store i32 %101, ptr %6, align 4
  %102 = getelementptr inbounds %compiler_rt.fma.dd, ptr %4, i32 0, i32 0
  %103 = load double, ptr %102, align 8
  %104 = fcmp oeq double %103, 0.000000e+00
  br i1 %104, label %117, label %127

105:                                              ; preds = %127
  %106 = getelementptr inbounds %compiler_rt.fma.dd, ptr %4, i32 0, i32 1
  %107 = load double, ptr %106, align 8
  %108 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 1
  %109 = load double, ptr %108, align 8
  %110 = call fastcc double @compiler_rt.fma.add_adjusted(double %107, double %109)
  %111 = load i32, ptr %6, align 4
  %112 = getelementptr inbounds %compiler_rt.fma.dd, ptr %4, i32 0, i32 0
  %113 = load double, ptr %112, align 8
  %114 = call fastcc i32 @math.ilogb.ilogb__anon_3766(double %113)
  %115 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %111, i32 %114)
  %116 = extractvalue { i32, i1 } %115, 1
  br i1 %116, label %128, label %129

117:                                              ; preds = %100
  %118 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 0
  %119 = load double, ptr %118, align 8
  %120 = load double, ptr %7, align 8
  %121 = fadd double %119, %120
  %122 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 1
  %123 = load double, ptr %122, align 8
  %124 = load i32, ptr %6, align 4
  %125 = call fastcc double @math.ldexp.ldexp__anon_3767(double %123, i32 %124)
  %126 = fadd double %121, %125
  ret double %126

127:                                              ; preds = %100
  br label %105

128:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

129:                                              ; preds = %105
  %130 = extractvalue { i32, i1 } %115, 0
  %131 = icmp sgt i32 %130, -1023
  br i1 %131, label %132, label %138

132:                                              ; preds = %129
  %133 = getelementptr inbounds %compiler_rt.fma.dd, ptr %4, i32 0, i32 0
  %134 = load double, ptr %133, align 8
  %135 = fadd double %134, %110
  %136 = load i32, ptr %6, align 4
  %137 = call fastcc double @math.ldexp.ldexp__anon_3767(double %135, i32 %136)
  ret double %137

138:                                              ; preds = %129
  %139 = getelementptr inbounds %compiler_rt.fma.dd, ptr %4, i32 0, i32 0
  %140 = load double, ptr %139, align 8
  %141 = load i32, ptr %6, align 4
  %142 = call fastcc double @compiler_rt.fma.add_and_denorm(double %140, double %110, i32 %141)
  ret double %142
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.frexp.frexp__anon_3832(ptr noalias nonnull sret(%"math.frexp.Frexp(f64)") %0, double %1) unnamed_addr #0 {
  %3 = alloca %"math.frexp.Frexp(f64)", align 8
  call fastcc void @math.frexp.frexp64(ptr sret(%"math.frexp.Frexp(f64)") %3, double %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %3, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.fma.dd_mul(ptr noalias nonnull sret(%compiler_rt.fma.dd) %0, double %1, double %2) unnamed_addr #0 {
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca [6 x i64], align 8
  %11 = alloca %compiler_rt.fma.dd, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 -86, i64 16, i1 false)
  %12 = ptrtoint ptr %11 to i64
  %13 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %12, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 16, ptr %15, align 8
  %16 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %18, align 8
  %19 = ptrtoint ptr %10 to i64
  %20 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %19, i64 0)
  %21 = fmul double %1, 0x41A0000002000000
  store double %21, ptr %9, align 8
  %22 = load double, ptr %9, align 8
  %23 = fsub double %1, %22
  store double %23, ptr %8, align 8
  %24 = load double, ptr %8, align 8
  %25 = load double, ptr %9, align 8
  %26 = fadd double %24, %25
  store double %26, ptr %8, align 8
  %27 = load double, ptr %8, align 8
  %28 = fsub double %1, %27
  store double %28, ptr %7, align 8
  %29 = fmul double %2, 0x41A0000002000000
  store double %29, ptr %9, align 8
  %30 = load double, ptr %9, align 8
  %31 = fsub double %2, %30
  store double %31, ptr %6, align 8
  %32 = load double, ptr %6, align 8
  %33 = load double, ptr %9, align 8
  %34 = fadd double %32, %33
  store double %34, ptr %6, align 8
  %35 = load double, ptr %6, align 8
  %36 = fsub double %2, %35
  store double %36, ptr %5, align 8
  %37 = load double, ptr %8, align 8
  %38 = load double, ptr %6, align 8
  %39 = fmul double %37, %38
  store double %39, ptr %9, align 8
  %40 = load double, ptr %8, align 8
  %41 = load double, ptr %5, align 8
  %42 = fmul double %40, %41
  %43 = load double, ptr %7, align 8
  %44 = load double, ptr %6, align 8
  %45 = fmul double %43, %44
  %46 = fadd double %42, %45
  store double %46, ptr %4, align 8
  %47 = getelementptr inbounds %compiler_rt.fma.dd, ptr %11, i32 0, i32 0
  %48 = load double, ptr %9, align 8
  %49 = load double, ptr %4, align 8
  %50 = fadd double %48, %49
  store double %50, ptr %47, align 8
  %51 = getelementptr inbounds %compiler_rt.fma.dd, ptr %11, i32 0, i32 1
  %52 = load double, ptr %9, align 8
  %53 = getelementptr inbounds %compiler_rt.fma.dd, ptr %11, i32 0, i32 0
  %54 = load double, ptr %53, align 8
  %55 = fsub double %52, %54
  %56 = load double, ptr %4, align 8
  %57 = fadd double %55, %56
  %58 = load double, ptr %7, align 8
  %59 = load double, ptr %5, align 8
  %60 = fmul double %58, %59
  %61 = fadd double %57, %60
  store double %61, ptr %51, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.fma.dd_add(ptr noalias nonnull sret(%compiler_rt.fma.dd) %0, double %1, double %2) unnamed_addr #0 {
  %4 = alloca [6 x i64], align 8
  %5 = alloca %compiler_rt.fma.dd, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 16, i1 false)
  %6 = ptrtoint ptr %5 to i64
  %7 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %6, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 16, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %12, align 8
  %13 = ptrtoint ptr %4 to i64
  %14 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %13, i64 0)
  %15 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 0
  %16 = fadd double %1, %2
  store double %16, ptr %15, align 8
  %17 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 0
  %18 = load double, ptr %17, align 8
  %19 = fsub double %18, %1
  %20 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 1
  %21 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 0
  %22 = load double, ptr %21, align 8
  %23 = fsub double %22, %19
  %24 = fsub double %1, %23
  %25 = fsub double %2, %19
  %26 = fadd double %24, %25
  store double %26, ptr %20, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.fma.add_adjusted(double %0, double %1) unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca %compiler_rt.fma.dd, align 8
  %5 = alloca %compiler_rt.fma.dd, align 8
  call fastcc void @compiler_rt.fma.dd_add(ptr sret(%compiler_rt.fma.dd) %4, double %0, double %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %4, i64 16, i1 false)
  %6 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 1
  %7 = load double, ptr %6, align 8
  %8 = fcmp une double %7, 0.000000e+00
  br i1 %8, label %12, label %19

9:                                                ; preds = %19, %20
  %10 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 0
  %11 = load double, ptr %10, align 8
  ret double %11

12:                                               ; preds = %2
  %13 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 0
  %14 = load double, ptr %13, align 8
  %15 = bitcast double %14 to i64
  store i64 %15, ptr %3, align 8
  %16 = load i64, ptr %3, align 8
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %21, label %31

19:                                               ; preds = %2
  br label %9

20:                                               ; preds = %31, %38
  br label %9

21:                                               ; preds = %12
  %22 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 1
  %23 = load double, ptr %22, align 8
  %24 = bitcast double %23 to i64
  %25 = load i64, ptr %3, align 8
  %26 = load i64, ptr %3, align 8
  %27 = xor i64 %26, %24
  %28 = lshr i64 %27, 62
  %29 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 1, i64 %28)
  %30 = extractvalue { i64, i1 } %29, 1
  br i1 %30, label %32, label %33

31:                                               ; preds = %12
  br label %20

32:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %21
  %34 = extractvalue { i64, i1 } %29, 0
  %35 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %25, i64 %34)
  %36 = extractvalue { i64, i1 } %35, 1
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

38:                                               ; preds = %33
  %39 = extractvalue { i64, i1 } %35, 0
  store i64 %39, ptr %3, align 8
  %40 = getelementptr inbounds %compiler_rt.fma.dd, ptr %5, i32 0, i32 0
  %41 = load i64, ptr %3, align 8
  %42 = bitcast i64 %41 to double
  store double %42, ptr %40, align 8
  br label %20
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.fma.add_and_denorm(double %0, double %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = alloca %compiler_rt.fma.dd, align 8
  %6 = alloca %compiler_rt.fma.dd, align 8
  call fastcc void @compiler_rt.fma.dd_add(ptr sret(%compiler_rt.fma.dd) %5, double %0, double %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %compiler_rt.fma.dd, ptr %6, i32 0, i32 1
  %8 = load double, ptr %7, align 8
  %9 = fcmp une double %8, 0.000000e+00
  br i1 %9, label %14, label %23

10:                                               ; preds = %23, %48
  %11 = getelementptr inbounds %compiler_rt.fma.dd, ptr %6, i32 0, i32 0
  %12 = load double, ptr %11, align 8
  %13 = call fastcc double @math.ldexp.ldexp__anon_3767(double %12, i32 %2)
  ret double %13

14:                                               ; preds = %3
  %15 = getelementptr inbounds %compiler_rt.fma.dd, ptr %6, i32 0, i32 0
  %16 = load double, ptr %15, align 8
  %17 = bitcast double %16 to i64
  store i64 %17, ptr %4, align 8
  %18 = load i64, ptr %4, align 8
  %19 = lshr i64 %18, 52
  %20 = and i64 %19, 2047
  %21 = sub i64 2147483647, %20
  %22 = icmp ule i64 %21, 2147483647
  br i1 %22, label %28, label %29

23:                                               ; preds = %3
  br label %10

24:                                               ; preds = %28
  %25 = trunc i64 %20 to i32
  %26 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %25)
  %27 = extractvalue { i32, i1 } %26, 1
  br i1 %27, label %30, label %31

28:                                               ; preds = %14
  br label %24

29:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @167)
  unreachable

30:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %24
  %32 = extractvalue { i32, i1 } %26, 0
  %33 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %32, i32 %2)
  %34 = extractvalue { i32, i1 } %33, 1
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

36:                                               ; preds = %31
  %37 = extractvalue { i32, i1 } %33, 0
  %38 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %37, i32 1)
  %39 = extractvalue { i32, i1 } %38, 1
  br i1 %39, label %40, label %41

40:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %36
  %42 = extractvalue { i32, i1 } %38, 0
  %43 = icmp ne i32 %42, 1
  %44 = load i64, ptr %4, align 8
  %45 = and i64 %44, 1
  %46 = icmp ne i64 %45, 0
  %47 = icmp eq i1 %43, %46
  br i1 %47, label %49, label %60

48:                                               ; preds = %60, %67
  br label %10

49:                                               ; preds = %41
  %50 = getelementptr inbounds %compiler_rt.fma.dd, ptr %6, i32 0, i32 1
  %51 = load double, ptr %50, align 8
  %52 = bitcast double %51 to i64
  %53 = load i64, ptr %4, align 8
  %54 = load i64, ptr %4, align 8
  %55 = xor i64 %54, %52
  %56 = lshr i64 %55, 62
  %57 = and i64 %56, 2
  %58 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 1, i64 %57)
  %59 = extractvalue { i64, i1 } %58, 1
  br i1 %59, label %61, label %62

60:                                               ; preds = %41
  br label %48

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %49
  %63 = extractvalue { i64, i1 } %58, 0
  %64 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %53, i64 %63)
  %65 = extractvalue { i64, i1 } %64, 1
  br i1 %65, label %66, label %67

66:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %62
  %68 = extractvalue { i64, i1 } %64, 0
  store i64 %68, ptr %4, align 8
  %69 = getelementptr inbounds %compiler_rt.fma.dd, ptr %6, i32 0, i32 0
  %70 = load i64, ptr %4, align 8
  %71 = bitcast i64 %70 to double
  store double %71, ptr %69, align 8
  br label %48
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__fmax(x86_fp80 %0, x86_fp80 %1, x86_fp80 %2) #0 {
  %4 = call fp128 @__extendxftf2(x86_fp80 %0)
  %5 = call fp128 @__extendxftf2(x86_fp80 %1)
  %6 = call fp128 @__extendxftf2(x86_fp80 %2)
  %7 = call fp128 @fmaq(fp128 %4, fp128 %5, fp128 %6)
  %8 = call x86_fp80 @__trunctfxf2(fp128 %7)
  ret x86_fp80 %8
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @fmaq(fp128 %0, fp128 %1, fp128 %2) #0 {
  %4 = alloca %compiler_rt.fma.dd128, align 16
  %5 = alloca %compiler_rt.fma.dd128, align 16
  %6 = alloca i32, align 4
  %7 = alloca fp128, align 16
  %8 = alloca i32, align 4
  %9 = alloca %"math.frexp.Frexp(f128)", align 16
  %10 = alloca fp128, align 16
  %11 = alloca i32, align 4
  %12 = alloca %"math.frexp.Frexp(f128)", align 16
  %13 = alloca fp128, align 16
  %14 = alloca i32, align 4
  %15 = alloca %"math.frexp.Frexp(f128)", align 16
  %16 = call fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %0)
  %17 = xor i1 %16, true
  br i1 %17, label %23, label %24

18:                                               ; preds = %30
  %19 = call fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %2)
  %20 = xor i1 %19, true
  br i1 %20, label %34, label %35

21:                                               ; preds = %24, %23
  %22 = phi i1 [ true, %23 ], [ %26, %24 ]
  br i1 %22, label %27, label %30

23:                                               ; preds = %3
  br label %21

24:                                               ; preds = %3
  %25 = call fastcc i1 @math.isfinite.isFinite__anon_3774(fp128 %1)
  %26 = xor i1 %25, true
  br label %21

27:                                               ; preds = %21
  %28 = call fp128 @__multf3(fp128 %0, fp128 %1)
  %29 = call fp128 @__addtf3(fp128 %28, fp128 %2)
  ret fp128 %29

30:                                               ; preds = %21
  br label %18

31:                                               ; preds = %35
  %32 = call i32 @__eqtf2(fp128 %0, fp128 0xL00000000000000000000000000000000)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %41, label %42

34:                                               ; preds = %18
  ret fp128 %2

35:                                               ; preds = %18
  br label %31

36:                                               ; preds = %48
  %37 = call i32 @__eqtf2(fp128 %2, fp128 0xL00000000000000000000000000000000)
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %66, label %68

39:                                               ; preds = %42, %41
  %40 = phi i1 [ true, %41 ], [ %44, %42 ]
  br i1 %40, label %45, label %48

41:                                               ; preds = %31
  br label %39

42:                                               ; preds = %31
  %43 = call i32 @__eqtf2(fp128 %1, fp128 0xL00000000000000000000000000000000)
  %44 = icmp eq i32 %43, 0
  br label %39

45:                                               ; preds = %39
  %46 = call fp128 @__multf3(fp128 %0, fp128 %1)
  %47 = call fp128 @__addtf3(fp128 %46, fp128 %2)
  ret fp128 %47

48:                                               ; preds = %39
  br label %36

49:                                               ; preds = %68
  call fastcc void @math.frexp.frexp__anon_3835(ptr sret(%"math.frexp.Frexp(f128)") %15, fp128 %0)
  %50 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %15, i32 0, i32 1
  %51 = load i32, ptr %50, align 4
  store i32 %51, ptr %14, align 4
  %52 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %15, i32 0, i32 0
  %53 = load fp128, ptr %52, align 16
  store fp128 %53, ptr %13, align 16
  call fastcc void @math.frexp.frexp__anon_3835(ptr sret(%"math.frexp.Frexp(f128)") %12, fp128 %1)
  %54 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %12, i32 0, i32 1
  %55 = load i32, ptr %54, align 4
  store i32 %55, ptr %11, align 4
  %56 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %12, i32 0, i32 0
  %57 = load fp128, ptr %56, align 16
  store fp128 %57, ptr %10, align 16
  call fastcc void @math.frexp.frexp__anon_3835(ptr sret(%"math.frexp.Frexp(f128)") %9, fp128 %2)
  %58 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %9, i32 0, i32 1
  %59 = load i32, ptr %58, align 4
  store i32 %59, ptr %8, align 4
  %60 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %9, i32 0, i32 0
  %61 = load fp128, ptr %60, align 16
  store fp128 %61, ptr %7, align 16
  %62 = load i32, ptr %14, align 4
  %63 = load i32, ptr %11, align 4
  %64 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %62, i32 %63)
  %65 = extractvalue { i32, i1 } %64, 1
  br i1 %65, label %69, label %70

66:                                               ; preds = %36
  %67 = call fp128 @__multf3(fp128 %0, fp128 %1)
  ret fp128 %67

68:                                               ; preds = %36
  br label %49

69:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %49
  %71 = extractvalue { i32, i1 } %64, 0
  %72 = load i32, ptr %8, align 4
  %73 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %71, i32 %72)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %75, label %76

75:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %70
  %77 = extractvalue { i32, i1 } %73, 0
  store i32 %77, ptr %6, align 4
  %78 = load i32, ptr %6, align 4
  %79 = icmp sle i32 %78, 226
  br i1 %79, label %90, label %95

80:                                               ; preds = %95, %99
  %81 = load fp128, ptr %13, align 16
  %82 = load fp128, ptr %10, align 16
  call fastcc void @compiler_rt.fma.dd_mul128(ptr sret(%compiler_rt.fma.dd128) %5, fp128 %81, fp128 %82)
  %83 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 0
  %84 = load fp128, ptr %83, align 16
  %85 = load fp128, ptr %7, align 16
  call fastcc void @compiler_rt.fma.dd_add128(ptr sret(%compiler_rt.fma.dd128) %4, fp128 %84, fp128 %85)
  %86 = load i32, ptr %14, align 4
  %87 = load i32, ptr %11, align 4
  %88 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %86, i32 %87)
  %89 = extractvalue { i32, i1 } %88, 1
  br i1 %89, label %102, label %103

90:                                               ; preds = %76
  %91 = load fp128, ptr %7, align 16
  %92 = load i32, ptr %6, align 4
  %93 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %92)
  %94 = extractvalue { i32, i1 } %93, 1
  br i1 %94, label %98, label %99

95:                                               ; preds = %76
  %96 = load fp128, ptr %7, align 16
  %97 = call fastcc fp128 @math.copysign.copysign__anon_3719(fp128 0xL00000000000000000001000000000000, fp128 %96)
  store fp128 %97, ptr %7, align 16
  br label %80

98:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %90
  %100 = extractvalue { i32, i1 } %93, 0
  %101 = call fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %91, i32 %100)
  store fp128 %101, ptr %7, align 16
  br label %80

102:                                              ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %80
  %104 = extractvalue { i32, i1 } %88, 0
  store i32 %104, ptr %6, align 4
  %105 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %4, i32 0, i32 0
  %106 = load fp128, ptr %105, align 16
  %107 = call i32 @__eqtf2(fp128 %106, fp128 0xL00000000000000000000000000000000)
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %121, label %131

109:                                              ; preds = %131
  %110 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %4, i32 0, i32 1
  %111 = load fp128, ptr %110, align 16
  %112 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 1
  %113 = load fp128, ptr %112, align 16
  %114 = call fastcc fp128 @compiler_rt.fma.add_adjusted128(fp128 %111, fp128 %113)
  %115 = load i32, ptr %6, align 4
  %116 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %4, i32 0, i32 0
  %117 = load fp128, ptr %116, align 16
  %118 = call fastcc i32 @math.ilogb.ilogb__anon_3772(fp128 %117)
  %119 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %115, i32 %118)
  %120 = extractvalue { i32, i1 } %119, 1
  br i1 %120, label %132, label %133

121:                                              ; preds = %103
  %122 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 0
  %123 = load fp128, ptr %122, align 16
  %124 = load fp128, ptr %7, align 16
  %125 = call fp128 @__addtf3(fp128 %123, fp128 %124)
  %126 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 1
  %127 = load fp128, ptr %126, align 16
  %128 = load i32, ptr %6, align 4
  %129 = call fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %127, i32 %128)
  %130 = call fp128 @__addtf3(fp128 %125, fp128 %129)
  ret fp128 %130

131:                                              ; preds = %103
  br label %109

132:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

133:                                              ; preds = %109
  %134 = extractvalue { i32, i1 } %119, 0
  %135 = icmp sgt i32 %134, -16383
  br i1 %135, label %136, label %142

136:                                              ; preds = %133
  %137 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %4, i32 0, i32 0
  %138 = load fp128, ptr %137, align 16
  %139 = call fp128 @__addtf3(fp128 %138, fp128 %114)
  %140 = load i32, ptr %6, align 4
  %141 = call fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %139, i32 %140)
  ret fp128 %141

142:                                              ; preds = %133
  %143 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %4, i32 0, i32 0
  %144 = load fp128, ptr %143, align 16
  %145 = load i32, ptr %6, align 4
  %146 = call fastcc fp128 @compiler_rt.fma.add_and_denorm128(fp128 %144, fp128 %114, i32 %145)
  ret fp128 %146
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.frexp.frexp__anon_3835(ptr noalias nonnull sret(%"math.frexp.Frexp(f128)") %0, fp128 %1) unnamed_addr #0 {
  %3 = alloca %"math.frexp.Frexp(f128)", align 16
  call fastcc void @math.frexp.frexp128(ptr sret(%"math.frexp.Frexp(f128)") %3, fp128 %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %3, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.fma.dd_mul128(ptr noalias nonnull sret(%compiler_rt.fma.dd128) %0, fp128 %1, fp128 %2) unnamed_addr #0 {
  %4 = alloca fp128, align 16
  %5 = alloca fp128, align 16
  %6 = alloca fp128, align 16
  %7 = alloca fp128, align 16
  %8 = alloca fp128, align 16
  %9 = alloca fp128, align 16
  %10 = alloca [6 x i64], align 8
  %11 = alloca %compiler_rt.fma.dd128, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %11, i8 -86, i64 32, i1 false)
  %12 = ptrtoint ptr %11 to i64
  %13 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 0
  store i64 1296236545, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 1
  store i64 %12, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 2
  store i64 32, ptr %15, align 8
  %16 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 3
  store i64 0, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 4
  store i64 0, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %10, i64 0, i64 5
  store i64 0, ptr %18, align 8
  %19 = ptrtoint ptr %10 to i64
  %20 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %19, i64 0)
  %21 = call fp128 @__multf3(fp128 %1, fp128 0xL00800000000000004038000000000000)
  store fp128 %21, ptr %9, align 16
  %22 = load fp128, ptr %9, align 16
  %23 = call fp128 @__subtf3(fp128 %1, fp128 %22)
  store fp128 %23, ptr %8, align 16
  %24 = load fp128, ptr %8, align 16
  %25 = load fp128, ptr %9, align 16
  %26 = call fp128 @__addtf3(fp128 %24, fp128 %25)
  store fp128 %26, ptr %8, align 16
  %27 = load fp128, ptr %8, align 16
  %28 = call fp128 @__subtf3(fp128 %1, fp128 %27)
  store fp128 %28, ptr %7, align 16
  %29 = call fp128 @__multf3(fp128 %2, fp128 0xL00800000000000004038000000000000)
  store fp128 %29, ptr %9, align 16
  %30 = load fp128, ptr %9, align 16
  %31 = call fp128 @__subtf3(fp128 %2, fp128 %30)
  store fp128 %31, ptr %6, align 16
  %32 = load fp128, ptr %6, align 16
  %33 = load fp128, ptr %9, align 16
  %34 = call fp128 @__addtf3(fp128 %32, fp128 %33)
  store fp128 %34, ptr %6, align 16
  %35 = load fp128, ptr %6, align 16
  %36 = call fp128 @__subtf3(fp128 %2, fp128 %35)
  store fp128 %36, ptr %5, align 16
  %37 = load fp128, ptr %8, align 16
  %38 = load fp128, ptr %6, align 16
  %39 = call fp128 @__multf3(fp128 %37, fp128 %38)
  store fp128 %39, ptr %9, align 16
  %40 = load fp128, ptr %8, align 16
  %41 = load fp128, ptr %5, align 16
  %42 = call fp128 @__multf3(fp128 %40, fp128 %41)
  %43 = load fp128, ptr %7, align 16
  %44 = load fp128, ptr %6, align 16
  %45 = call fp128 @__multf3(fp128 %43, fp128 %44)
  %46 = call fp128 @__addtf3(fp128 %42, fp128 %45)
  store fp128 %46, ptr %4, align 16
  %47 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %11, i32 0, i32 0
  %48 = load fp128, ptr %9, align 16
  %49 = load fp128, ptr %4, align 16
  %50 = call fp128 @__addtf3(fp128 %48, fp128 %49)
  store fp128 %50, ptr %47, align 16
  %51 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %11, i32 0, i32 1
  %52 = load fp128, ptr %9, align 16
  %53 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %11, i32 0, i32 0
  %54 = load fp128, ptr %53, align 16
  %55 = call fp128 @__subtf3(fp128 %52, fp128 %54)
  %56 = load fp128, ptr %4, align 16
  %57 = call fp128 @__addtf3(fp128 %55, fp128 %56)
  %58 = load fp128, ptr %7, align 16
  %59 = load fp128, ptr %5, align 16
  %60 = call fp128 @__multf3(fp128 %58, fp128 %59)
  %61 = call fp128 @__addtf3(fp128 %57, fp128 %60)
  store fp128 %61, ptr %51, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %11, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.fma.dd_add128(ptr noalias nonnull sret(%compiler_rt.fma.dd128) %0, fp128 %1, fp128 %2) unnamed_addr #0 {
  %4 = alloca [6 x i64], align 8
  %5 = alloca %compiler_rt.fma.dd128, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %5, i8 -86, i64 32, i1 false)
  %6 = ptrtoint ptr %5 to i64
  %7 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %6, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 32, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %12, align 8
  %13 = ptrtoint ptr %4 to i64
  %14 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %13, i64 0)
  %15 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 0
  %16 = call fp128 @__addtf3(fp128 %1, fp128 %2)
  store fp128 %16, ptr %15, align 16
  %17 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 0
  %18 = load fp128, ptr %17, align 16
  %19 = call fp128 @__subtf3(fp128 %18, fp128 %1)
  %20 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 1
  %21 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 0
  %22 = load fp128, ptr %21, align 16
  %23 = call fp128 @__subtf3(fp128 %22, fp128 %19)
  %24 = call fp128 @__subtf3(fp128 %1, fp128 %23)
  %25 = call fp128 @__subtf3(fp128 %2, fp128 %19)
  %26 = call fp128 @__addtf3(fp128 %24, fp128 %25)
  store fp128 %26, ptr %20, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %5, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @compiler_rt.fma.add_adjusted128(fp128 %0, fp128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = alloca %compiler_rt.fma.dd128, align 16
  %5 = alloca %compiler_rt.fma.dd128, align 16
  call fastcc void @compiler_rt.fma.dd_add128(ptr sret(%compiler_rt.fma.dd128) %4, fp128 %0, fp128 %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %5, ptr align 16 %4, i64 32, i1 false)
  %6 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 1
  %7 = load fp128, ptr %6, align 16
  %8 = call i32 @__netf2(fp128 %7, fp128 0xL00000000000000000000000000000000)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %13, label %20

10:                                               ; preds = %20, %21
  %11 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 0
  %12 = load fp128, ptr %11, align 16
  ret fp128 %12

13:                                               ; preds = %2
  %14 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 0
  %15 = load fp128, ptr %14, align 16
  %16 = bitcast fp128 %15 to i128
  store i128 %16, ptr %3, align 8
  %17 = load i128, ptr %3, align 8
  %18 = and i128 %17, 1
  %19 = icmp eq i128 %18, 0
  br i1 %19, label %22, label %32

20:                                               ; preds = %2
  br label %10

21:                                               ; preds = %32, %39
  br label %10

22:                                               ; preds = %13
  %23 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 1
  %24 = load fp128, ptr %23, align 16
  %25 = bitcast fp128 %24 to i128
  %26 = load i128, ptr %3, align 8
  %27 = load i128, ptr %3, align 8
  %28 = xor i128 %27, %25
  %29 = lshr i128 %28, 126
  %30 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 1, i128 %29)
  %31 = extractvalue { i128, i1 } %30, 1
  br i1 %31, label %33, label %34

32:                                               ; preds = %13
  br label %21

33:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

34:                                               ; preds = %22
  %35 = extractvalue { i128, i1 } %30, 0
  %36 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %26, i128 %35)
  %37 = extractvalue { i128, i1 } %36, 1
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

39:                                               ; preds = %34
  %40 = extractvalue { i128, i1 } %36, 0
  store i128 %40, ptr %3, align 8
  %41 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %5, i32 0, i32 0
  %42 = load i128, ptr %3, align 8
  %43 = bitcast i128 %42 to fp128
  store fp128 %43, ptr %41, align 16
  br label %21
}

; Function Attrs: nounwind uwtable
define internal fastcc fp128 @compiler_rt.fma.add_and_denorm128(fp128 %0, fp128 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i128, align 8
  %5 = alloca %compiler_rt.fma.dd128, align 16
  %6 = alloca %compiler_rt.fma.dd128, align 16
  call fastcc void @compiler_rt.fma.dd_add128(ptr sret(%compiler_rt.fma.dd128) %5, fp128 %0, fp128 %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %6, ptr align 16 %5, i64 32, i1 false)
  %7 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %6, i32 0, i32 1
  %8 = load fp128, ptr %7, align 16
  %9 = call i32 @__netf2(fp128 %8, fp128 0xL00000000000000000000000000000000)
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %15, label %24

11:                                               ; preds = %24, %49
  %12 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %6, i32 0, i32 0
  %13 = load fp128, ptr %12, align 16
  %14 = call fastcc fp128 @math.ldexp.ldexp__anon_3773(fp128 %13, i32 %2)
  ret fp128 %14

15:                                               ; preds = %3
  %16 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %6, i32 0, i32 0
  %17 = load fp128, ptr %16, align 16
  %18 = bitcast fp128 %17 to i128
  store i128 %18, ptr %4, align 8
  %19 = load i128, ptr %4, align 8
  %20 = lshr i128 %19, 112
  %21 = and i128 %20, 32767
  %22 = sub i128 2147483647, %21
  %23 = icmp ule i128 %22, 2147483647
  br i1 %23, label %29, label %30

24:                                               ; preds = %3
  br label %11

25:                                               ; preds = %29
  %26 = trunc i128 %21 to i32
  %27 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %26)
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %31, label %32

29:                                               ; preds = %15
  br label %25

30:                                               ; preds = %15
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @168)
  unreachable

31:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

32:                                               ; preds = %25
  %33 = extractvalue { i32, i1 } %27, 0
  %34 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %33, i32 %2)
  %35 = extractvalue { i32, i1 } %34, 1
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

37:                                               ; preds = %32
  %38 = extractvalue { i32, i1 } %34, 0
  %39 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %38, i32 1)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %41, label %42

41:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

42:                                               ; preds = %37
  %43 = extractvalue { i32, i1 } %39, 0
  %44 = icmp ne i32 %43, 1
  %45 = load i128, ptr %4, align 8
  %46 = and i128 %45, 1
  %47 = icmp ne i128 %46, 0
  %48 = icmp eq i1 %44, %47
  br i1 %48, label %50, label %61

49:                                               ; preds = %61, %68
  br label %11

50:                                               ; preds = %42
  %51 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %6, i32 0, i32 1
  %52 = load fp128, ptr %51, align 16
  %53 = bitcast fp128 %52 to i128
  %54 = load i128, ptr %4, align 8
  %55 = load i128, ptr %4, align 8
  %56 = xor i128 %55, %53
  %57 = lshr i128 %56, 126
  %58 = and i128 %57, 2
  %59 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 1, i128 %58)
  %60 = extractvalue { i128, i1 } %59, 1
  br i1 %60, label %62, label %63

61:                                               ; preds = %42
  br label %49

62:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %50
  %64 = extractvalue { i128, i1 } %59, 0
  %65 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %54, i128 %64)
  %66 = extractvalue { i128, i1 } %65, 1
  br i1 %66, label %67, label %68

67:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %63
  %69 = extractvalue { i128, i1 } %65, 0
  store i128 %69, ptr %4, align 8
  %70 = getelementptr inbounds %compiler_rt.fma.dd128, ptr %6, i32 0, i32 0
  %71 = load i128, ptr %4, align 8
  %72 = bitcast i128 %71 to fp128
  store fp128 %72, ptr %70, align 16
  br label %49
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @fmal(x86_fp80 %0, x86_fp80 %1, x86_fp80 %2) #0 {
  %4 = call x86_fp80 @__fmax(x86_fp80 %0, x86_fp80 %1, x86_fp80 %2)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__fmaxh(half %0, half %1) #0 {
  %3 = alloca half, align 2
  %4 = call fastcc i1 @math.isnan.isNan__anon_3694(half %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi half [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret half %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3694(half %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt half %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load half, ptr %3, align 2
  br label %5

17:                                               ; preds = %11
  store half %1, ptr %3, align 2
  br label %15

18:                                               ; preds = %11
  store half %0, ptr %3, align 2
  br label %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @fmaxf(float %0, float %1) #0 {
  %3 = alloca float, align 4
  %4 = call fastcc i1 @math.isnan.isNan__anon_3712(float %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi float [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret float %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3712(float %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt float %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load float, ptr %3, align 4
  br label %5

17:                                               ; preds = %11
  store float %1, ptr %3, align 4
  br label %15

18:                                               ; preds = %11
  store float %0, ptr %3, align 4
  br label %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @fmax(double %0, double %1) #0 {
  %3 = alloca double, align 8
  %4 = call fastcc i1 @math.isnan.isNan__anon_3714(double %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi double [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret double %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3714(double %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt double %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load double, ptr %3, align 8
  br label %5

17:                                               ; preds = %11
  store double %1, ptr %3, align 8
  br label %15

18:                                               ; preds = %11
  store double %0, ptr %3, align 8
  br label %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__fmaxx(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca x86_fp80, align 16
  %4 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi x86_fp80 [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret x86_fp80 %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt x86_fp80 %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load x86_fp80, ptr %3, align 16
  br label %5

17:                                               ; preds = %11
  store x86_fp80 %1, ptr %3, align 16
  br label %15

18:                                               ; preds = %11
  store x86_fp80 %0, ptr %3, align 16
  br label %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @fmaxq(fp128 %0, fp128 %1) #0 {
  %3 = alloca fp128, align 16
  %4 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %16, %14, %9
  %6 = phi fp128 [ %1, %9 ], [ %0, %14 ], [ %17, %16 ]
  ret fp128 %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %1)
  br i1 %8, label %14, label %15

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %15
  %12 = call i32 @__lttf2(fp128 %0, fp128 %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %18, label %19

14:                                               ; preds = %7
  br label %5

15:                                               ; preds = %7
  br label %11

16:                                               ; preds = %19, %18
  %17 = load fp128, ptr %3, align 16
  br label %5

18:                                               ; preds = %11
  store fp128 %1, ptr %3, align 16
  br label %16

19:                                               ; preds = %11
  store fp128 %0, ptr %3, align 16
  br label %16
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @fmaxl(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = call x86_fp80 @__fmaxx(x86_fp80 %0, x86_fp80 %1)
  ret x86_fp80 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__fminh(half %0, half %1) #0 {
  %3 = alloca half, align 2
  %4 = call fastcc i1 @math.isnan.isNan__anon_3694(half %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi half [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret half %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3694(half %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt half %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load half, ptr %3, align 2
  br label %5

17:                                               ; preds = %11
  store half %0, ptr %3, align 2
  br label %15

18:                                               ; preds = %11
  store half %1, ptr %3, align 2
  br label %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @fminf(float %0, float %1) #0 {
  %3 = alloca float, align 4
  %4 = call fastcc i1 @math.isnan.isNan__anon_3712(float %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi float [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret float %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3712(float %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt float %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load float, ptr %3, align 4
  br label %5

17:                                               ; preds = %11
  store float %0, ptr %3, align 4
  br label %15

18:                                               ; preds = %11
  store float %1, ptr %3, align 4
  br label %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @fmin(double %0, double %1) #0 {
  %3 = alloca double, align 8
  %4 = call fastcc i1 @math.isnan.isNan__anon_3714(double %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi double [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret double %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3714(double %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt double %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load double, ptr %3, align 8
  br label %5

17:                                               ; preds = %11
  store double %0, ptr %3, align 8
  br label %15

18:                                               ; preds = %11
  store double %1, ptr %3, align 8
  br label %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__fminx(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca x86_fp80, align 16
  %4 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi x86_fp80 [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret x86_fp80 %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt x86_fp80 %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load x86_fp80, ptr %3, align 16
  br label %5

17:                                               ; preds = %11
  store x86_fp80 %0, ptr %3, align 16
  br label %15

18:                                               ; preds = %11
  store x86_fp80 %1, ptr %3, align 16
  br label %15
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @fminq(fp128 %0, fp128 %1) #0 {
  %3 = alloca fp128, align 16
  %4 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %16, %14, %9
  %6 = phi fp128 [ %1, %9 ], [ %0, %14 ], [ %17, %16 ]
  ret fp128 %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %1)
  br i1 %8, label %14, label %15

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %15
  %12 = call i32 @__lttf2(fp128 %0, fp128 %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %18, label %19

14:                                               ; preds = %7
  br label %5

15:                                               ; preds = %7
  br label %11

16:                                               ; preds = %19, %18
  %17 = load fp128, ptr %3, align 16
  br label %5

18:                                               ; preds = %11
  store fp128 %0, ptr %3, align 16
  br label %16

19:                                               ; preds = %11
  store fp128 %1, ptr %3, align 16
  br label %16
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @fminl(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = call x86_fp80 @__fminx(x86_fp80 %0, x86_fp80 %1)
  ret x86_fp80 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__fmodh(half %0, half %1) #0 {
  %3 = fpext half %0 to float
  %4 = fpext half %1 to float
  %5 = call float @fmodf(float %3, float %4)
  %6 = fptrunc float %5 to half
  ret half %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @fmodf(float %0, float %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = bitcast float %0 to i32
  store i32 %9, ptr %8, align 4
  %10 = bitcast float %1 to i32
  store i32 %10, ptr %7, align 4
  %11 = load i32, ptr %8, align 4
  %12 = lshr i32 %11, 23
  %13 = and i32 %12, 255
  %14 = sub i32 2147483647, %13
  %15 = icmp ule i32 %14, 2147483647
  br i1 %15, label %24, label %25

16:                                               ; preds = %239, %218, %205, %77, %78, %62
  %17 = phi float [ %65, %62 ], [ %79, %78 ], [ %0, %77 ], [ %206, %205 ], [ %219, %218 ], [ %243, %239 ]
  ret float %17

18:                                               ; preds = %24
  store i32 %13, ptr %6, align 4
  %19 = load i32, ptr %7, align 4
  %20 = lshr i32 %19, 23
  %21 = and i32 %20, 255
  %22 = sub i32 2147483647, %21
  %23 = icmp ule i32 %22, 2147483647
  br i1 %23, label %41, label %42

24:                                               ; preds = %2
  br label %18

25:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable

26:                                               ; preds = %41
  store i32 %21, ptr %5, align 4
  %27 = load i32, ptr %8, align 4
  %28 = and i32 %27, -2147483648
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %29 = ptrtoint ptr %4 to i64
  %30 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %29, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 4, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %35, align 8
  %36 = ptrtoint ptr %3 to i64
  %37 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %36, i64 0)
  %38 = load i32, ptr %7, align 4
  %39 = shl i32 %38, 1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %51, label %52

41:                                               ; preds = %18
  br label %26

42:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable

43:                                               ; preds = %66
  %44 = load i32, ptr %8, align 4
  %45 = shl i32 %44, 1
  %46 = load i32, ptr %7, align 4
  %47 = shl i32 %46, 1
  %48 = icmp ule i32 %45, %47
  br i1 %48, label %70, label %76

49:                                               ; preds = %52, %51
  %50 = phi i1 [ true, %51 ], [ %55, %52 ]
  br i1 %50, label %58, label %59

51:                                               ; preds = %26
  br label %49

52:                                               ; preds = %26
  %53 = load i32, ptr %7, align 4
  %54 = bitcast i32 %53 to float
  %55 = call fastcc i1 @math.isnan.isNan__anon_3712(float %54)
  br label %49

56:                                               ; preds = %59, %58
  %57 = phi i1 [ true, %58 ], [ %61, %59 ]
  br i1 %57, label %62, label %66

58:                                               ; preds = %49
  br label %56

59:                                               ; preds = %49
  %60 = load i32, ptr %6, align 4
  %61 = icmp eq i32 %60, 255
  br label %56

62:                                               ; preds = %56
  %63 = fmul float %0, %1
  %64 = fmul float %0, %1
  %65 = fdiv float %63, %64
  br label %16

66:                                               ; preds = %56
  br label %43

67:                                               ; preds = %76
  %68 = load i32, ptr %6, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %84, label %87

70:                                               ; preds = %43
  %71 = load i32, ptr %8, align 4
  %72 = shl i32 %71, 1
  %73 = load i32, ptr %7, align 4
  %74 = shl i32 %73, 1
  %75 = icmp eq i32 %72, %74
  br i1 %75, label %78, label %80

76:                                               ; preds = %43
  br label %67

77:                                               ; preds = %80
  br label %16

78:                                               ; preds = %70
  %79 = fmul float 0.000000e+00, %0
  br label %16

80:                                               ; preds = %70
  br label %77

81:                                               ; preds = %87, %122
  %82 = load i32, ptr %5, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %129, label %132

84:                                               ; preds = %67
  %85 = load i32, ptr %8, align 4
  %86 = shl i32 %85, 9
  store i32 %86, ptr %4, align 4
  br label %97

87:                                               ; preds = %67
  %88 = load i32, ptr %8, align 4
  %89 = and i32 %88, 8388607
  store i32 %89, ptr %8, align 4
  %90 = load i32, ptr %8, align 4
  %91 = or i32 %90, 8388608
  store i32 %91, ptr %8, align 4
  br label %81

92:                                               ; preds = %106
  %93 = load i32, ptr %8, align 4
  %94 = load i32, ptr %6, align 4
  %95 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %94)
  %96 = extractvalue { i32, i1 } %95, 1
  br i1 %96, label %112, label %113

97:                                               ; preds = %101, %84
  %98 = load i32, ptr %4, align 4
  %99 = lshr i32 %98, 31
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %102, label %106

101:                                              ; preds = %108
  br label %97

102:                                              ; preds = %97
  %103 = load i32, ptr %6, align 4
  %104 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %103, i32 1)
  %105 = extractvalue { i32, i1 } %104, 1
  br i1 %105, label %107, label %108

106:                                              ; preds = %97
  br label %92

107:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

108:                                              ; preds = %102
  %109 = extractvalue { i32, i1 } %104, 0
  store i32 %109, ptr %6, align 4
  %110 = load i32, ptr %4, align 4
  %111 = shl i32 %110, 1
  store i32 %111, ptr %4, align 4
  br label %101

112:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %92
  %114 = extractvalue { i32, i1 } %95, 0
  %115 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %114, i32 1)
  %116 = extractvalue { i32, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %113
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %113
  %119 = extractvalue { i32, i1 } %115, 0
  %120 = sub i32 31, %119
  %121 = icmp ule i32 %120, 31
  br i1 %121, label %126, label %127

122:                                              ; preds = %126
  %123 = trunc i32 %119 to i5
  %124 = zext i5 %123 to i32
  %125 = shl i32 %93, %124
  store i32 %125, ptr %8, align 4
  br label %81

126:                                              ; preds = %118
  br label %122

127:                                              ; preds = %118
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable

128:                                              ; preds = %132, %167
  br label %180

129:                                              ; preds = %81
  %130 = load i32, ptr %7, align 4
  %131 = shl i32 %130, 9
  store i32 %131, ptr %4, align 4
  br label %142

132:                                              ; preds = %81
  %133 = load i32, ptr %7, align 4
  %134 = and i32 %133, 8388607
  store i32 %134, ptr %7, align 4
  %135 = load i32, ptr %7, align 4
  %136 = or i32 %135, 8388608
  store i32 %136, ptr %7, align 4
  br label %128

137:                                              ; preds = %151
  %138 = load i32, ptr %7, align 4
  %139 = load i32, ptr %5, align 4
  %140 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %139)
  %141 = extractvalue { i32, i1 } %140, 1
  br i1 %141, label %157, label %158

142:                                              ; preds = %146, %129
  %143 = load i32, ptr %4, align 4
  %144 = lshr i32 %143, 31
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %147, label %151

146:                                              ; preds = %153
  br label %142

147:                                              ; preds = %142
  %148 = load i32, ptr %5, align 4
  %149 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %148, i32 1)
  %150 = extractvalue { i32, i1 } %149, 1
  br i1 %150, label %152, label %153

151:                                              ; preds = %142
  br label %137

152:                                              ; preds = %147
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

153:                                              ; preds = %147
  %154 = extractvalue { i32, i1 } %149, 0
  store i32 %154, ptr %5, align 4
  %155 = load i32, ptr %4, align 4
  %156 = shl i32 %155, 1
  store i32 %156, ptr %4, align 4
  br label %146

157:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

158:                                              ; preds = %137
  %159 = extractvalue { i32, i1 } %140, 0
  %160 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %159, i32 1)
  %161 = extractvalue { i32, i1 } %160, 1
  br i1 %161, label %162, label %163

162:                                              ; preds = %158
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

163:                                              ; preds = %158
  %164 = extractvalue { i32, i1 } %160, 0
  %165 = sub i32 31, %164
  %166 = icmp ule i32 %165, 31
  br i1 %166, label %171, label %172

167:                                              ; preds = %171
  %168 = trunc i32 %164 to i5
  %169 = zext i5 %168 to i32
  %170 = shl i32 %138, %169
  store i32 %170, ptr %7, align 4
  br label %128

171:                                              ; preds = %163
  br label %167

172:                                              ; preds = %163
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable

173:                                              ; preds = %192
  %174 = load i32, ptr %8, align 4
  %175 = load i32, ptr %7, align 4
  %176 = sub i32 %174, %175
  store i32 %176, ptr %4, align 4
  %177 = load i32, ptr %4, align 4
  %178 = lshr i32 %177, 31
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %212, label %215

180:                                              ; preds = %184, %128
  %181 = load i32, ptr %6, align 4
  %182 = load i32, ptr %5, align 4
  %183 = icmp sgt i32 %181, %182
  br i1 %183, label %185, label %192

184:                                              ; preds = %209
  br label %180

185:                                              ; preds = %180
  %186 = load i32, ptr %8, align 4
  %187 = load i32, ptr %7, align 4
  %188 = sub i32 %186, %187
  store i32 %188, ptr %4, align 4
  %189 = load i32, ptr %4, align 4
  %190 = lshr i32 %189, 31
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %199, label %202

192:                                              ; preds = %180
  br label %173

193:                                              ; preds = %202, %203
  %194 = load i32, ptr %8, align 4
  %195 = shl i32 %194, 1
  store i32 %195, ptr %8, align 4
  %196 = load i32, ptr %6, align 4
  %197 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %196, i32 1)
  %198 = extractvalue { i32, i1 } %197, 1
  br i1 %198, label %208, label %209

199:                                              ; preds = %185
  %200 = load i32, ptr %4, align 4
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %205, label %207

202:                                              ; preds = %185
  br label %193

203:                                              ; preds = %207
  %204 = load i32, ptr %4, align 4
  store i32 %204, ptr %8, align 4
  br label %193

205:                                              ; preds = %199
  %206 = fmul float 0.000000e+00, %0
  br label %16

207:                                              ; preds = %199
  br label %203

208:                                              ; preds = %193
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

209:                                              ; preds = %193
  %210 = extractvalue { i32, i1 } %197, 0
  store i32 %210, ptr %6, align 4
  br label %184

211:                                              ; preds = %215, %216
  br label %224

212:                                              ; preds = %173
  %213 = load i32, ptr %4, align 4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %218, label %220

215:                                              ; preds = %173
  br label %211

216:                                              ; preds = %220
  %217 = load i32, ptr %4, align 4
  store i32 %217, ptr %8, align 4
  br label %211

218:                                              ; preds = %212
  %219 = fmul float 0.000000e+00, %0
  br label %16

220:                                              ; preds = %212
  br label %216

221:                                              ; preds = %235
  %222 = load i32, ptr %6, align 4
  %223 = icmp sgt i32 %222, 0
  br i1 %223, label %244, label %251

224:                                              ; preds = %228, %211
  %225 = load i32, ptr %8, align 4
  %226 = lshr i32 %225, 23
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %229, label %235

228:                                              ; preds = %237
  br label %224

229:                                              ; preds = %224
  %230 = load i32, ptr %8, align 4
  %231 = shl i32 %230, 1
  store i32 %231, ptr %8, align 4
  %232 = load i32, ptr %6, align 4
  %233 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %232, i32 1)
  %234 = extractvalue { i32, i1 } %233, 1
  br i1 %234, label %236, label %237

235:                                              ; preds = %224
  br label %221

236:                                              ; preds = %229
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

237:                                              ; preds = %229
  %238 = extractvalue { i32, i1 } %233, 0
  store i32 %238, ptr %6, align 4
  br label %228

239:                                              ; preds = %266, %244
  %240 = load i32, ptr %8, align 4
  %241 = or i32 %240, %28
  store i32 %241, ptr %8, align 4
  %242 = load i32, ptr %8, align 4
  %243 = bitcast i32 %242 to float
  br label %16

244:                                              ; preds = %221
  %245 = load i32, ptr %8, align 4
  %246 = sub i32 %245, 8388608
  store i32 %246, ptr %8, align 4
  %247 = load i32, ptr %8, align 4
  %248 = load i32, ptr %6, align 4
  %249 = shl i32 %248, 23
  %250 = or i32 %247, %249
  store i32 %250, ptr %8, align 4
  br label %239

251:                                              ; preds = %221
  %252 = load i32, ptr %8, align 4
  %253 = load i32, ptr %6, align 4
  %254 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %253)
  %255 = extractvalue { i32, i1 } %254, 1
  br i1 %255, label %256, label %257

256:                                              ; preds = %251
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

257:                                              ; preds = %251
  %258 = extractvalue { i32, i1 } %254, 0
  %259 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %258, i32 1)
  %260 = extractvalue { i32, i1 } %259, 1
  br i1 %260, label %261, label %262

261:                                              ; preds = %257
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

262:                                              ; preds = %257
  %263 = extractvalue { i32, i1 } %259, 0
  %264 = sub i32 31, %263
  %265 = icmp ule i32 %264, 31
  br i1 %265, label %270, label %271

266:                                              ; preds = %270
  %267 = trunc i32 %263 to i5
  %268 = zext i5 %267 to i32
  %269 = lshr i32 %252, %268
  store i32 %269, ptr %8, align 4
  br label %239

270:                                              ; preds = %262
  br label %266

271:                                              ; preds = %262
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @fmod(double %0, double %1) #0 {
  %3 = alloca [6 x i64], align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast double %0 to i64
  store i64 %9, ptr %8, align 8
  %10 = bitcast double %1 to i64
  store i64 %10, ptr %7, align 8
  %11 = load i64, ptr %8, align 8
  %12 = lshr i64 %11, 52
  %13 = and i64 %12, 2047
  %14 = sub i64 2147483647, %13
  %15 = icmp ule i64 %14, 2147483647
  br i1 %15, label %25, label %26

16:                                               ; preds = %279, %226, %213, %85, %86, %70
  %17 = phi double [ %73, %70 ], [ %87, %86 ], [ %0, %85 ], [ %214, %213 ], [ %227, %226 ], [ %284, %279 ]
  ret double %17

18:                                               ; preds = %25
  %19 = trunc i64 %13 to i32
  store i32 %19, ptr %6, align 4
  %20 = load i64, ptr %7, align 8
  %21 = lshr i64 %20, 52
  %22 = and i64 %21, 2047
  %23 = sub i64 2147483647, %22
  %24 = icmp ule i64 %23, 2147483647
  br i1 %24, label %33, label %34

25:                                               ; preds = %2
  br label %18

26:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

27:                                               ; preds = %33
  %28 = trunc i64 %22 to i32
  store i32 %28, ptr %5, align 4
  %29 = load i64, ptr %8, align 8
  %30 = lshr i64 %29, 63
  %31 = sub i64 2147483647, %30
  %32 = icmp ule i64 %31, 2147483647
  br i1 %32, label %49, label %50

33:                                               ; preds = %18
  br label %27

34:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

35:                                               ; preds = %49
  %36 = trunc i64 %30 to i32
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %37 = ptrtoint ptr %4 to i64
  %38 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %37, ptr %39, align 8
  %40 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %40, align 8
  %41 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %41, align 8
  %42 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %42, align 8
  %43 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %43, align 8
  %44 = ptrtoint ptr %3 to i64
  %45 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %44, i64 0)
  %46 = load i64, ptr %7, align 8
  %47 = shl i64 %46, 1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %59, label %60

49:                                               ; preds = %27
  br label %35

50:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

51:                                               ; preds = %74
  %52 = load i64, ptr %8, align 8
  %53 = shl i64 %52, 1
  %54 = load i64, ptr %7, align 8
  %55 = shl i64 %54, 1
  %56 = icmp ule i64 %53, %55
  br i1 %56, label %78, label %84

57:                                               ; preds = %60, %59
  %58 = phi i1 [ true, %59 ], [ %63, %60 ]
  br i1 %58, label %66, label %67

59:                                               ; preds = %35
  br label %57

60:                                               ; preds = %35
  %61 = load i64, ptr %7, align 8
  %62 = bitcast i64 %61 to double
  %63 = call fastcc i1 @math.isnan.isNan__anon_3714(double %62)
  br label %57

64:                                               ; preds = %67, %66
  %65 = phi i1 [ true, %66 ], [ %69, %67 ]
  br i1 %65, label %70, label %74

66:                                               ; preds = %57
  br label %64

67:                                               ; preds = %57
  %68 = load i32, ptr %6, align 4
  %69 = icmp eq i32 %68, 2047
  br label %64

70:                                               ; preds = %64
  %71 = fmul double %0, %1
  %72 = fmul double %0, %1
  %73 = fdiv double %71, %72
  br label %16

74:                                               ; preds = %64
  br label %51

75:                                               ; preds = %84
  %76 = load i32, ptr %6, align 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %92, label %95

78:                                               ; preds = %51
  %79 = load i64, ptr %8, align 8
  %80 = shl i64 %79, 1
  %81 = load i64, ptr %7, align 8
  %82 = shl i64 %81, 1
  %83 = icmp eq i64 %80, %82
  br i1 %83, label %86, label %88

84:                                               ; preds = %51
  br label %75

85:                                               ; preds = %88
  br label %16

86:                                               ; preds = %78
  %87 = fmul double 0.000000e+00, %0
  br label %16

88:                                               ; preds = %78
  br label %85

89:                                               ; preds = %95, %130
  %90 = load i32, ptr %5, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %137, label %140

92:                                               ; preds = %75
  %93 = load i64, ptr %8, align 8
  %94 = shl i64 %93, 12
  store i64 %94, ptr %4, align 8
  br label %105

95:                                               ; preds = %75
  %96 = load i64, ptr %8, align 8
  %97 = and i64 %96, 4503599627370495
  store i64 %97, ptr %8, align 8
  %98 = load i64, ptr %8, align 8
  %99 = or i64 %98, 4503599627370496
  store i64 %99, ptr %8, align 8
  br label %89

100:                                              ; preds = %114
  %101 = load i64, ptr %8, align 8
  %102 = load i32, ptr %6, align 4
  %103 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %102)
  %104 = extractvalue { i32, i1 } %103, 1
  br i1 %104, label %120, label %121

105:                                              ; preds = %109, %92
  %106 = load i64, ptr %4, align 8
  %107 = lshr i64 %106, 63
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %110, label %114

109:                                              ; preds = %116
  br label %105

110:                                              ; preds = %105
  %111 = load i32, ptr %6, align 4
  %112 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %111, i32 1)
  %113 = extractvalue { i32, i1 } %112, 1
  br i1 %113, label %115, label %116

114:                                              ; preds = %105
  br label %100

115:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %110
  %117 = extractvalue { i32, i1 } %112, 0
  store i32 %117, ptr %6, align 4
  %118 = load i64, ptr %4, align 8
  %119 = shl i64 %118, 1
  store i64 %119, ptr %4, align 8
  br label %109

120:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

121:                                              ; preds = %100
  %122 = extractvalue { i32, i1 } %103, 0
  %123 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %122, i32 1)
  %124 = extractvalue { i32, i1 } %123, 1
  br i1 %124, label %125, label %126

125:                                              ; preds = %121
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

126:                                              ; preds = %121
  %127 = extractvalue { i32, i1 } %123, 0
  %128 = sub i32 63, %127
  %129 = icmp ule i32 %128, 63
  br i1 %129, label %134, label %135

130:                                              ; preds = %134
  %131 = trunc i32 %127 to i6
  %132 = zext i6 %131 to i64
  %133 = shl i64 %101, %132
  store i64 %133, ptr %8, align 8
  br label %89

134:                                              ; preds = %126
  br label %130

135:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

136:                                              ; preds = %140, %175
  br label %188

137:                                              ; preds = %89
  %138 = load i64, ptr %7, align 8
  %139 = shl i64 %138, 12
  store i64 %139, ptr %4, align 8
  br label %150

140:                                              ; preds = %89
  %141 = load i64, ptr %7, align 8
  %142 = and i64 %141, 4503599627370495
  store i64 %142, ptr %7, align 8
  %143 = load i64, ptr %7, align 8
  %144 = or i64 %143, 4503599627370496
  store i64 %144, ptr %7, align 8
  br label %136

145:                                              ; preds = %159
  %146 = load i64, ptr %7, align 8
  %147 = load i32, ptr %5, align 4
  %148 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %147)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %165, label %166

150:                                              ; preds = %154, %137
  %151 = load i64, ptr %4, align 8
  %152 = lshr i64 %151, 63
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %155, label %159

154:                                              ; preds = %161
  br label %150

155:                                              ; preds = %150
  %156 = load i32, ptr %5, align 4
  %157 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %156, i32 1)
  %158 = extractvalue { i32, i1 } %157, 1
  br i1 %158, label %160, label %161

159:                                              ; preds = %150
  br label %145

160:                                              ; preds = %155
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

161:                                              ; preds = %155
  %162 = extractvalue { i32, i1 } %157, 0
  store i32 %162, ptr %5, align 4
  %163 = load i64, ptr %4, align 8
  %164 = shl i64 %163, 1
  store i64 %164, ptr %4, align 8
  br label %154

165:                                              ; preds = %145
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

166:                                              ; preds = %145
  %167 = extractvalue { i32, i1 } %148, 0
  %168 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %167, i32 1)
  %169 = extractvalue { i32, i1 } %168, 1
  br i1 %169, label %170, label %171

170:                                              ; preds = %166
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

171:                                              ; preds = %166
  %172 = extractvalue { i32, i1 } %168, 0
  %173 = sub i32 63, %172
  %174 = icmp ule i32 %173, 63
  br i1 %174, label %179, label %180

175:                                              ; preds = %179
  %176 = trunc i32 %172 to i6
  %177 = zext i6 %176 to i64
  %178 = shl i64 %146, %177
  store i64 %178, ptr %7, align 8
  br label %136

179:                                              ; preds = %171
  br label %175

180:                                              ; preds = %171
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

181:                                              ; preds = %200
  %182 = load i64, ptr %8, align 8
  %183 = load i64, ptr %7, align 8
  %184 = sub i64 %182, %183
  store i64 %184, ptr %4, align 8
  %185 = load i64, ptr %4, align 8
  %186 = lshr i64 %185, 63
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %220, label %223

188:                                              ; preds = %192, %136
  %189 = load i32, ptr %6, align 4
  %190 = load i32, ptr %5, align 4
  %191 = icmp sgt i32 %189, %190
  br i1 %191, label %193, label %200

192:                                              ; preds = %217
  br label %188

193:                                              ; preds = %188
  %194 = load i64, ptr %8, align 8
  %195 = load i64, ptr %7, align 8
  %196 = sub i64 %194, %195
  store i64 %196, ptr %4, align 8
  %197 = load i64, ptr %4, align 8
  %198 = lshr i64 %197, 63
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %207, label %210

200:                                              ; preds = %188
  br label %181

201:                                              ; preds = %210, %211
  %202 = load i64, ptr %8, align 8
  %203 = shl i64 %202, 1
  store i64 %203, ptr %8, align 8
  %204 = load i32, ptr %6, align 4
  %205 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %204, i32 1)
  %206 = extractvalue { i32, i1 } %205, 1
  br i1 %206, label %216, label %217

207:                                              ; preds = %193
  %208 = load i64, ptr %4, align 8
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %213, label %215

210:                                              ; preds = %193
  br label %201

211:                                              ; preds = %215
  %212 = load i64, ptr %4, align 8
  store i64 %212, ptr %8, align 8
  br label %201

213:                                              ; preds = %207
  %214 = fmul double 0.000000e+00, %0
  br label %16

215:                                              ; preds = %207
  br label %211

216:                                              ; preds = %201
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

217:                                              ; preds = %201
  %218 = extractvalue { i32, i1 } %205, 0
  store i32 %218, ptr %6, align 4
  br label %192

219:                                              ; preds = %223, %224
  br label %232

220:                                              ; preds = %181
  %221 = load i64, ptr %4, align 8
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %226, label %228

223:                                              ; preds = %181
  br label %219

224:                                              ; preds = %228
  %225 = load i64, ptr %4, align 8
  store i64 %225, ptr %8, align 8
  br label %219

226:                                              ; preds = %220
  %227 = fmul double 0.000000e+00, %0
  br label %16

228:                                              ; preds = %220
  br label %224

229:                                              ; preds = %243
  %230 = load i32, ptr %6, align 4
  %231 = icmp sgt i32 %230, 0
  br i1 %231, label %250, label %258

232:                                              ; preds = %236, %219
  %233 = load i64, ptr %8, align 8
  %234 = lshr i64 %233, 52
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %237, label %243

236:                                              ; preds = %245
  br label %232

237:                                              ; preds = %232
  %238 = load i64, ptr %8, align 8
  %239 = shl i64 %238, 1
  store i64 %239, ptr %8, align 8
  %240 = load i32, ptr %6, align 4
  %241 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %240, i32 1)
  %242 = extractvalue { i32, i1 } %241, 1
  br i1 %242, label %244, label %245

243:                                              ; preds = %232
  br label %229

244:                                              ; preds = %237
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

245:                                              ; preds = %237
  %246 = extractvalue { i32, i1 } %241, 0
  store i32 %246, ptr %6, align 4
  br label %236

247:                                              ; preds = %273, %250
  %248 = load i64, ptr %8, align 8
  %249 = icmp sge i32 %36, 0
  br i1 %249, label %285, label %286

250:                                              ; preds = %229
  %251 = load i64, ptr %8, align 8
  %252 = sub i64 %251, 4503599627370496
  store i64 %252, ptr %8, align 8
  %253 = load i64, ptr %8, align 8
  %254 = load i32, ptr %6, align 4
  %255 = zext i32 %254 to i64
  %256 = shl i64 %255, 52
  %257 = or i64 %253, %256
  store i64 %257, ptr %8, align 8
  br label %247

258:                                              ; preds = %229
  %259 = load i64, ptr %8, align 8
  %260 = load i32, ptr %6, align 4
  %261 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %260)
  %262 = extractvalue { i32, i1 } %261, 1
  br i1 %262, label %263, label %264

263:                                              ; preds = %258
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

264:                                              ; preds = %258
  %265 = extractvalue { i32, i1 } %261, 0
  %266 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %265, i32 1)
  %267 = extractvalue { i32, i1 } %266, 1
  br i1 %267, label %268, label %269

268:                                              ; preds = %264
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

269:                                              ; preds = %264
  %270 = extractvalue { i32, i1 } %266, 0
  %271 = sub i32 63, %270
  %272 = icmp ule i32 %271, 63
  br i1 %272, label %277, label %278

273:                                              ; preds = %277
  %274 = trunc i32 %270 to i6
  %275 = zext i6 %274 to i64
  %276 = lshr i64 %259, %275
  store i64 %276, ptr %8, align 8
  br label %247

277:                                              ; preds = %269
  br label %273

278:                                              ; preds = %269
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

279:                                              ; preds = %285
  %280 = sext i32 %36 to i64
  %281 = shl i64 %280, 63
  %282 = or i64 %248, %281
  store i64 %282, ptr %8, align 8
  %283 = load i64, ptr %8, align 8
  %284 = bitcast i64 %283 to double
  br label %16

285:                                              ; preds = %247
  br label %279

286:                                              ; preds = %247
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__fmodx(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i80, align 8
  %14 = alloca i80, align 8
  %15 = bitcast x86_fp80 %0 to i80
  store i80 %15, ptr %14, align 8
  %16 = bitcast x86_fp80 %1 to i80
  store i80 %16, ptr %13, align 8
  %17 = load i80, ptr %14, align 8
  %18 = and i80 %17, -604462909807314587353088
  %19 = bitcast x86_fp80 %0 to i80
  %20 = lshr i80 %19, 64
  br i1 true, label %25, label %26

21:                                               ; preds = %25
  %22 = and i80 %20, 32767
  %23 = sub i80 2147483647, %22
  %24 = icmp ule i80 %23, 2147483647
  br i1 %24, label %31, label %32

25:                                               ; preds = %2
  br label %21

26:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

27:                                               ; preds = %31
  %28 = trunc i80 %22 to i32
  store i32 %28, ptr %12, align 4
  %29 = bitcast x86_fp80 %1 to i80
  %30 = lshr i80 %29, 64
  br i1 true, label %37, label %38

31:                                               ; preds = %21
  br label %27

32:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

33:                                               ; preds = %37
  %34 = and i80 %30, 32767
  %35 = sub i80 2147483647, %34
  %36 = icmp ule i80 %35, 2147483647
  br i1 %36, label %42, label %43

37:                                               ; preds = %27
  br label %33

38:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

39:                                               ; preds = %42
  %40 = trunc i80 %34 to i32
  store i32 %40, ptr %11, align 4
  %41 = fcmp oeq x86_fp80 %1, 0xK00000000000000000000
  br i1 %41, label %54, label %55

42:                                               ; preds = %33
  br label %39

43:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

44:                                               ; preds = %67
  %45 = load i80, ptr %14, align 8
  %46 = and i80 %45, 604462909807314587353087
  store i80 %46, ptr %14, align 8
  %47 = load i80, ptr %13, align 8
  %48 = and i80 %47, 604462909807314587353087
  store i80 %48, ptr %13, align 8
  %49 = load i80, ptr %14, align 8
  %50 = load i80, ptr %13, align 8
  %51 = icmp ule i80 %49, %50
  br i1 %51, label %71, label %75

52:                                               ; preds = %55, %54
  %53 = phi i1 [ true, %54 ], [ %56, %55 ]
  br i1 %53, label %59, label %60

54:                                               ; preds = %39
  br label %52

55:                                               ; preds = %39
  %56 = call fastcc i1 @math.isnan.isNan__anon_3716(x86_fp80 %1)
  br label %52

57:                                               ; preds = %60, %59
  %58 = phi i1 [ true, %59 ], [ %62, %60 ]
  br i1 %58, label %63, label %67

59:                                               ; preds = %52
  br label %57

60:                                               ; preds = %52
  %61 = load i32, ptr %12, align 4
  %62 = icmp eq i32 %61, 32767
  br label %57

63:                                               ; preds = %57
  %64 = fmul x86_fp80 %0, %1
  %65 = fmul x86_fp80 %0, %1
  %66 = fdiv x86_fp80 %64, %65
  ret x86_fp80 %66

67:                                               ; preds = %57
  br label %44

68:                                               ; preds = %75
  %69 = load i32, ptr %12, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %83, label %85

71:                                               ; preds = %44
  %72 = load i80, ptr %14, align 8
  %73 = load i80, ptr %13, align 8
  %74 = icmp eq i80 %72, %73
  br i1 %74, label %77, label %79

75:                                               ; preds = %44
  br label %68

76:                                               ; preds = %79
  ret x86_fp80 %0

77:                                               ; preds = %71
  %78 = fmul x86_fp80 0xK00000000000000000000, %0
  ret x86_fp80 %78

79:                                               ; preds = %71
  br label %76

80:                                               ; preds = %85, %83
  %81 = load i32, ptr %11, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %91, label %93

83:                                               ; preds = %68
  %84 = call fastcc i32 @compiler_rt.common.normalize__anon_3659(ptr nonnull align 8 %14)
  store i32 %84, ptr %12, align 4
  br label %80

85:                                               ; preds = %68
  br label %80

86:                                               ; preds = %93, %91
  store i64 0, ptr %10, align 8
  store i64 0, ptr %9, align 8
  %87 = load i80, ptr %14, align 8
  %88 = trunc i80 %87 to i64
  store i64 %88, ptr %8, align 8
  %89 = load i80, ptr %13, align 8
  %90 = trunc i80 %89 to i64
  store i64 %90, ptr %7, align 8
  br label %104

91:                                               ; preds = %80
  %92 = call fastcc i32 @compiler_rt.common.normalize__anon_3659(ptr nonnull align 8 %13)
  store i32 %92, ptr %11, align 4
  br label %86

93:                                               ; preds = %80
  br label %86

94:                                               ; preds = %119
  %95 = load i64, ptr %10, align 8
  %96 = load i64, ptr %9, align 8
  %97 = sub i64 %95, %96
  store i64 %97, ptr %4, align 8
  %98 = load i64, ptr %8, align 8
  %99 = load i64, ptr %7, align 8
  %100 = sub i64 %98, %99
  store i64 %100, ptr %3, align 8
  %101 = load i64, ptr %8, align 8
  %102 = load i64, ptr %7, align 8
  %103 = icmp ult i64 %101, %102
  br i1 %103, label %171, label %174

104:                                              ; preds = %108, %86
  %105 = load i32, ptr %12, align 4
  %106 = load i32, ptr %11, align 4
  %107 = icmp sgt i32 %105, %106
  br i1 %107, label %109, label %119

108:                                              ; preds = %165
  br label %104

109:                                              ; preds = %104
  %110 = load i64, ptr %10, align 8
  %111 = load i64, ptr %9, align 8
  %112 = sub i64 %110, %111
  store i64 %112, ptr %6, align 8
  %113 = load i64, ptr %8, align 8
  %114 = load i64, ptr %7, align 8
  %115 = sub i64 %113, %114
  store i64 %115, ptr %5, align 8
  %116 = load i64, ptr %8, align 8
  %117 = load i64, ptr %7, align 8
  %118 = icmp ult i64 %116, %117
  br i1 %118, label %124, label %127

119:                                              ; preds = %104
  br label %94

120:                                              ; preds = %127, %124
  %121 = load i64, ptr %6, align 8
  %122 = lshr i64 %121, 63
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %132, label %137

124:                                              ; preds = %109
  %125 = load i64, ptr %6, align 8
  %126 = sub i64 %125, 1
  store i64 %126, ptr %6, align 8
  br label %120

127:                                              ; preds = %109
  br label %120

128:                                              ; preds = %160, %155
  %129 = load i32, ptr %12, align 4
  %130 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %129, i32 1)
  %131 = extractvalue { i32, i1 } %130, 1
  br i1 %131, label %164, label %165

132:                                              ; preds = %120
  %133 = load i64, ptr %6, align 8
  %134 = load i64, ptr %5, align 8
  %135 = or i64 %133, %134
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %151, label %153

137:                                              ; preds = %120
  %138 = load i64, ptr %10, align 8
  %139 = mul i64 2, %138
  %140 = load i64, ptr %8, align 8
  %141 = lshr i64 %140, 63
  %142 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %139, i64 %141)
  %143 = extractvalue { i64, i1 } %142, 1
  br i1 %143, label %159, label %160

144:                                              ; preds = %153
  %145 = load i64, ptr %6, align 8
  %146 = mul i64 2, %145
  %147 = load i64, ptr %5, align 8
  %148 = lshr i64 %147, 63
  %149 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %146, i64 %148)
  %150 = extractvalue { i64, i1 } %149, 1
  br i1 %150, label %154, label %155

151:                                              ; preds = %132
  %152 = fmul x86_fp80 0xK00000000000000000000, %0
  ret x86_fp80 %152

153:                                              ; preds = %132
  br label %144

154:                                              ; preds = %144
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

155:                                              ; preds = %144
  %156 = extractvalue { i64, i1 } %149, 0
  store i64 %156, ptr %10, align 8
  %157 = load i64, ptr %5, align 8
  %158 = mul i64 2, %157
  store i64 %158, ptr %8, align 8
  br label %128

159:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

160:                                              ; preds = %137
  %161 = extractvalue { i64, i1 } %142, 0
  store i64 %161, ptr %10, align 8
  %162 = load i64, ptr %8, align 8
  %163 = mul i64 2, %162
  store i64 %163, ptr %8, align 8
  br label %128

164:                                              ; preds = %128
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

165:                                              ; preds = %128
  %166 = extractvalue { i32, i1 } %130, 0
  store i32 %166, ptr %12, align 4
  br label %108

167:                                              ; preds = %174, %171
  %168 = load i64, ptr %4, align 8
  %169 = lshr i64 %168, 63
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %176, label %181

171:                                              ; preds = %94
  %172 = load i64, ptr %4, align 8
  %173 = sub i64 %172, 1
  store i64 %173, ptr %4, align 8
  br label %167

174:                                              ; preds = %94
  br label %167

175:                                              ; preds = %181, %182
  br label %191

176:                                              ; preds = %167
  %177 = load i64, ptr %4, align 8
  %178 = load i64, ptr %3, align 8
  %179 = or i64 %177, %178
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %185, label %187

181:                                              ; preds = %167
  br label %175

182:                                              ; preds = %187
  %183 = load i64, ptr %4, align 8
  store i64 %183, ptr %10, align 8
  %184 = load i64, ptr %3, align 8
  store i64 %184, ptr %8, align 8
  br label %175

185:                                              ; preds = %176
  %186 = fmul x86_fp80 0xK00000000000000000000, %0
  ret x86_fp80 %186

187:                                              ; preds = %176
  br label %182

188:                                              ; preds = %202
  %189 = load i32, ptr %12, align 4
  %190 = icmp slt i32 %189, -63
  br i1 %190, label %206, label %208

191:                                              ; preds = %195, %175
  %192 = load i64, ptr %8, align 8
  %193 = lshr i64 %192, 63
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %196, label %202

195:                                              ; preds = %204
  br label %191

196:                                              ; preds = %191
  %197 = load i64, ptr %8, align 8
  %198 = mul i64 2, %197
  store i64 %198, ptr %8, align 8
  %199 = load i32, ptr %12, align 4
  %200 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %199, i32 1)
  %201 = extractvalue { i32, i1 } %200, 1
  br i1 %201, label %203, label %204

202:                                              ; preds = %191
  br label %188

203:                                              ; preds = %196
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

204:                                              ; preds = %196
  %205 = extractvalue { i32, i1 } %200, 0
  store i32 %205, ptr %12, align 4
  br label %195

206:                                              ; preds = %188
  %207 = bitcast i80 %18 to x86_fp80
  ret x86_fp80 %207

208:                                              ; preds = %188
  %209 = load i32, ptr %12, align 4
  %210 = icmp sle i32 %209, 0
  br i1 %210, label %211, label %216

211:                                              ; preds = %208
  %212 = load i64, ptr %8, align 8
  %213 = load i32, ptr %12, align 4
  %214 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %213)
  %215 = extractvalue { i32, i1 } %214, 1
  br i1 %215, label %221, label %222

216:                                              ; preds = %208
  %217 = load i64, ptr %8, align 8
  %218 = load i32, ptr %12, align 4
  %219 = sub i32 65535, %218
  %220 = icmp ule i32 %219, 65535
  br i1 %220, label %238, label %239

221:                                              ; preds = %211
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

222:                                              ; preds = %211
  %223 = extractvalue { i32, i1 } %214, 0
  %224 = sub i32 63, %223
  %225 = icmp ule i32 %224, 63
  br i1 %225, label %233, label %234

226:                                              ; preds = %233
  %227 = trunc i32 %223 to i6
  %228 = zext i6 %227 to i64
  %229 = lshr i64 %212, %228
  %230 = zext i64 %229 to i80
  %231 = or i80 %230, %18
  %232 = bitcast i80 %231 to x86_fp80
  ret x86_fp80 %232

233:                                              ; preds = %222
  br label %226

234:                                              ; preds = %222
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

235:                                              ; preds = %238
  %236 = trunc i32 %218 to i16
  %237 = zext i16 %236 to i80
  br i1 true, label %246, label %247

238:                                              ; preds = %216
  br label %235

239:                                              ; preds = %216
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

240:                                              ; preds = %246
  %241 = shl i80 %237, 64
  %242 = zext i64 %217 to i80
  %243 = or i80 %242, %241
  %244 = or i80 %243, %18
  %245 = bitcast i80 %244 to x86_fp80
  ret x86_fp80 %245

246:                                              ; preds = %235
  br label %240

247:                                              ; preds = %235
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @fmodq(fp128 %0, fp128 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca fp128, align 16
  %17 = alloca fp128, align 16
  store fp128 %0, ptr %17, align 16
  store fp128 %1, ptr %16, align 16
  store ptr %17, ptr %15, align 8
  store ptr %17, ptr %14, align 8
  store ptr %16, ptr %13, align 8
  %18 = getelementptr inbounds i16, ptr %17, i64 7
  %19 = load i16, ptr %18, align 2
  %20 = and i16 %19, -32768
  %21 = getelementptr inbounds i16, ptr %17, i64 7
  %22 = load i16, ptr %21, align 2
  %23 = and i16 %22, 32767
  %24 = zext i16 %23 to i32
  store i32 %24, ptr %12, align 4
  %25 = getelementptr inbounds i16, ptr %16, i64 7
  %26 = load i16, ptr %25, align 2
  %27 = and i16 %26, 32767
  %28 = zext i16 %27 to i32
  store i32 %28, ptr %11, align 4
  %29 = call i32 @__eqtf2(fp128 %1, fp128 0xL00000000000000000000000000000000)
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %39, label %40

31:                                               ; preds = %52
  %32 = load ptr, ptr %14, align 8
  %33 = getelementptr inbounds i16, ptr %32, i64 7
  %34 = load i32, ptr %12, align 4
  %35 = sub i32 32767, %34
  %36 = icmp ule i32 %35, 65535
  br i1 %36, label %60, label %61

37:                                               ; preds = %40, %39
  %38 = phi i1 [ true, %39 ], [ %41, %40 ]
  br i1 %38, label %44, label %45

39:                                               ; preds = %2
  br label %37

40:                                               ; preds = %2
  %41 = call fastcc i1 @math.isnan.isNan__anon_3718(fp128 %1)
  br label %37

42:                                               ; preds = %45, %44
  %43 = phi i1 [ true, %44 ], [ %47, %45 ]
  br i1 %43, label %48, label %52

44:                                               ; preds = %37
  br label %42

45:                                               ; preds = %37
  %46 = load i32, ptr %12, align 4
  %47 = icmp eq i32 %46, 32767
  br label %42

48:                                               ; preds = %42
  %49 = call fp128 @__multf3(fp128 %0, fp128 %1)
  %50 = call fp128 @__multf3(fp128 %0, fp128 %1)
  %51 = call fp128 @__divtf3(fp128 %49, fp128 %50)
  ret fp128 %51

52:                                               ; preds = %42
  br label %31

53:                                               ; preds = %60
  %54 = trunc i32 %34 to i16
  store i16 %54, ptr %33, align 2
  %55 = load ptr, ptr %13, align 8
  %56 = getelementptr inbounds i16, ptr %55, i64 7
  %57 = load i32, ptr %11, align 4
  %58 = sub i32 32767, %57
  %59 = icmp ule i32 %58, 65535
  br i1 %59, label %68, label %69

60:                                               ; preds = %31
  br label %53

61:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @103)
  unreachable

62:                                               ; preds = %68
  %63 = trunc i32 %57 to i16
  store i16 %63, ptr %56, align 2
  %64 = load fp128, ptr %17, align 16
  %65 = load fp128, ptr %16, align 16
  %66 = call i32 @__letf2(fp128 %64, fp128 %65)
  %67 = icmp sle i32 %66, 0
  br i1 %67, label %73, label %78

68:                                               ; preds = %53
  br label %62

69:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @103)
  unreachable

70:                                               ; preds = %78
  %71 = load i32, ptr %12, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %86, label %94

73:                                               ; preds = %62
  %74 = load fp128, ptr %17, align 16
  %75 = load fp128, ptr %16, align 16
  %76 = call i32 @__eqtf2(fp128 %74, fp128 %75)
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %80, label %82

78:                                               ; preds = %62
  br label %70

79:                                               ; preds = %82
  ret fp128 %0

80:                                               ; preds = %73
  %81 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %0)
  ret fp128 %81

82:                                               ; preds = %73
  br label %79

83:                                               ; preds = %94, %96
  %84 = load i32, ptr %11, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %111, label %119

86:                                               ; preds = %70
  %87 = load fp128, ptr %17, align 16
  %88 = call fp128 @__multf3(fp128 %87, fp128 0xL00000000000000004077000000000000)
  store fp128 %88, ptr %17, align 16
  %89 = getelementptr inbounds i16, ptr %17, i64 7
  %90 = load i16, ptr %89, align 2
  %91 = zext i16 %90 to i32
  %92 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %91, i32 120)
  %93 = extractvalue { i32, i1 } %92, 1
  br i1 %93, label %95, label %96

94:                                               ; preds = %70
  br label %83

95:                                               ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

96:                                               ; preds = %86
  %97 = extractvalue { i32, i1 } %92, 0
  store i32 %97, ptr %12, align 4
  br label %83

98:                                               ; preds = %119, %121
  %99 = getelementptr inbounds i64, ptr %17, i64 1
  %100 = load i64, ptr %99, align 8
  %101 = and i64 %100, 281474976710655
  %102 = or i64 %101, 281474976710656
  store i64 %102, ptr %10, align 8
  %103 = getelementptr inbounds i64, ptr %16, i64 1
  %104 = load i64, ptr %103, align 8
  %105 = and i64 %104, 281474976710655
  %106 = or i64 %105, 281474976710656
  store i64 %106, ptr %9, align 8
  %107 = getelementptr inbounds i64, ptr %17, i64 0
  %108 = load i64, ptr %107, align 8
  store i64 %108, ptr %8, align 8
  %109 = getelementptr inbounds i64, ptr %16, i64 0
  %110 = load i64, ptr %109, align 8
  store i64 %110, ptr %7, align 8
  br label %133

111:                                              ; preds = %83
  %112 = load fp128, ptr %16, align 16
  %113 = call fp128 @__multf3(fp128 %112, fp128 0xL00000000000000004077000000000000)
  store fp128 %113, ptr %16, align 16
  %114 = getelementptr inbounds i16, ptr %16, i64 7
  %115 = load i16, ptr %114, align 2
  %116 = zext i16 %115 to i32
  %117 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %116, i32 120)
  %118 = extractvalue { i32, i1 } %117, 1
  br i1 %118, label %120, label %121

119:                                              ; preds = %83
  br label %98

120:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

121:                                              ; preds = %111
  %122 = extractvalue { i32, i1 } %117, 0
  store i32 %122, ptr %11, align 4
  br label %98

123:                                              ; preds = %148
  %124 = load i64, ptr %10, align 8
  %125 = load i64, ptr %9, align 8
  %126 = sub i64 %124, %125
  store i64 %126, ptr %4, align 8
  %127 = load i64, ptr %8, align 8
  %128 = load i64, ptr %7, align 8
  %129 = sub i64 %127, %128
  store i64 %129, ptr %3, align 8
  %130 = load i64, ptr %8, align 8
  %131 = load i64, ptr %7, align 8
  %132 = icmp ult i64 %130, %131
  br i1 %132, label %200, label %204

133:                                              ; preds = %137, %98
  %134 = load i32, ptr %12, align 4
  %135 = load i32, ptr %11, align 4
  %136 = icmp sgt i32 %134, %135
  br i1 %136, label %138, label %148

137:                                              ; preds = %194
  br label %133

138:                                              ; preds = %133
  %139 = load i64, ptr %10, align 8
  %140 = load i64, ptr %9, align 8
  %141 = sub i64 %139, %140
  store i64 %141, ptr %6, align 8
  %142 = load i64, ptr %8, align 8
  %143 = load i64, ptr %7, align 8
  %144 = sub i64 %142, %143
  store i64 %144, ptr %5, align 8
  %145 = load i64, ptr %8, align 8
  %146 = load i64, ptr %7, align 8
  %147 = icmp ult i64 %145, %146
  br i1 %147, label %153, label %156

148:                                              ; preds = %133
  br label %123

149:                                              ; preds = %156, %153
  %150 = load i64, ptr %6, align 8
  %151 = lshr i64 %150, 63
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %161, label %166

153:                                              ; preds = %138
  %154 = load i64, ptr %6, align 8
  %155 = sub i64 %154, 1
  store i64 %155, ptr %6, align 8
  br label %149

156:                                              ; preds = %138
  br label %149

157:                                              ; preds = %189, %184
  %158 = load i32, ptr %12, align 4
  %159 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %158, i32 1)
  %160 = extractvalue { i32, i1 } %159, 1
  br i1 %160, label %193, label %194

161:                                              ; preds = %149
  %162 = load i64, ptr %6, align 8
  %163 = load i64, ptr %5, align 8
  %164 = or i64 %162, %163
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %180, label %182

166:                                              ; preds = %149
  %167 = load i64, ptr %10, align 8
  %168 = mul i64 2, %167
  %169 = load i64, ptr %8, align 8
  %170 = lshr i64 %169, 63
  %171 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %168, i64 %170)
  %172 = extractvalue { i64, i1 } %171, 1
  br i1 %172, label %188, label %189

173:                                              ; preds = %182
  %174 = load i64, ptr %6, align 8
  %175 = mul i64 2, %174
  %176 = load i64, ptr %5, align 8
  %177 = lshr i64 %176, 63
  %178 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %175, i64 %177)
  %179 = extractvalue { i64, i1 } %178, 1
  br i1 %179, label %183, label %184

180:                                              ; preds = %161
  %181 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %0)
  ret fp128 %181

182:                                              ; preds = %161
  br label %173

183:                                              ; preds = %173
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

184:                                              ; preds = %173
  %185 = extractvalue { i64, i1 } %178, 0
  store i64 %185, ptr %10, align 8
  %186 = load i64, ptr %5, align 8
  %187 = mul i64 2, %186
  store i64 %187, ptr %8, align 8
  br label %157

188:                                              ; preds = %166
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

189:                                              ; preds = %166
  %190 = extractvalue { i64, i1 } %171, 0
  store i64 %190, ptr %10, align 8
  %191 = load i64, ptr %8, align 8
  %192 = mul i64 2, %191
  store i64 %192, ptr %8, align 8
  br label %157

193:                                              ; preds = %157
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

194:                                              ; preds = %157
  %195 = extractvalue { i32, i1 } %159, 0
  store i32 %195, ptr %12, align 4
  br label %137

196:                                              ; preds = %204, %206
  %197 = load i64, ptr %4, align 8
  %198 = lshr i64 %197, 63
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %209, label %214

200:                                              ; preds = %123
  %201 = load i64, ptr %4, align 8
  %202 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %201, i64 1)
  %203 = extractvalue { i64, i1 } %202, 1
  br i1 %203, label %205, label %206

204:                                              ; preds = %123
  br label %196

205:                                              ; preds = %200
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

206:                                              ; preds = %200
  %207 = extractvalue { i64, i1 } %202, 0
  store i64 %207, ptr %4, align 8
  br label %196

208:                                              ; preds = %214, %215
  br label %230

209:                                              ; preds = %196
  %210 = load i64, ptr %4, align 8
  %211 = load i64, ptr %3, align 8
  %212 = or i64 %210, %211
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %218, label %220

214:                                              ; preds = %196
  br label %208

215:                                              ; preds = %220
  %216 = load i64, ptr %4, align 8
  store i64 %216, ptr %10, align 8
  %217 = load i64, ptr %3, align 8
  store i64 %217, ptr %8, align 8
  br label %208

218:                                              ; preds = %209
  %219 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %0)
  ret fp128 %219

220:                                              ; preds = %209
  br label %215

221:                                              ; preds = %242
  %222 = load ptr, ptr %15, align 8
  %223 = getelementptr inbounds i64, ptr %222, i64 1
  %224 = load i64, ptr %10, align 8
  store i64 %224, ptr %223, align 8
  %225 = load ptr, ptr %15, align 8
  %226 = getelementptr inbounds i64, ptr %225, i64 0
  %227 = load i64, ptr %8, align 8
  store i64 %227, ptr %226, align 8
  %228 = load i32, ptr %12, align 4
  %229 = icmp sle i32 %228, 0
  br i1 %229, label %256, label %265

230:                                              ; preds = %234, %208
  %231 = load i64, ptr %10, align 8
  %232 = lshr i64 %231, 48
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %235, label %242

234:                                              ; preds = %252
  br label %230

235:                                              ; preds = %230
  %236 = load i64, ptr %10, align 8
  %237 = mul i64 2, %236
  %238 = load i64, ptr %8, align 8
  %239 = lshr i64 %238, 63
  %240 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %237, i64 %239)
  %241 = extractvalue { i64, i1 } %240, 1
  br i1 %241, label %243, label %244

242:                                              ; preds = %230
  br label %221

243:                                              ; preds = %235
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

244:                                              ; preds = %235
  %245 = extractvalue { i64, i1 } %240, 0
  store i64 %245, ptr %10, align 8
  %246 = load i64, ptr %8, align 8
  %247 = mul i64 2, %246
  store i64 %247, ptr %8, align 8
  %248 = load i32, ptr %12, align 4
  %249 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %248, i32 1)
  %250 = extractvalue { i32, i1 } %249, 1
  br i1 %250, label %251, label %252

251:                                              ; preds = %244
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

252:                                              ; preds = %244
  %253 = extractvalue { i32, i1 } %249, 0
  store i32 %253, ptr %12, align 4
  br label %234

254:                                              ; preds = %265, %256
  %255 = load fp128, ptr %17, align 16
  ret fp128 %255

256:                                              ; preds = %221
  %257 = load ptr, ptr %14, align 8
  %258 = getelementptr inbounds i16, ptr %257, i64 7
  %259 = load i32, ptr %12, align 4
  %260 = add i32 %259, 120
  %261 = trunc i32 %260 to i16
  %262 = or i16 %261, %20
  store i16 %262, ptr %258, align 2
  %263 = load fp128, ptr %17, align 16
  %264 = call fp128 @__multf3(fp128 %263, fp128 0xL00000000000000003F87000000000000)
  store fp128 %264, ptr %17, align 16
  br label %254

265:                                              ; preds = %221
  %266 = load ptr, ptr %14, align 8
  %267 = getelementptr inbounds i16, ptr %266, i64 7
  %268 = load i32, ptr %12, align 4
  %269 = trunc i32 %268 to i16
  %270 = or i16 %269, %20
  store i16 %270, ptr %267, align 2
  br label %254
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @fmodl(x86_fp80 %0, x86_fp80 %1) #0 {
  %3 = call x86_fp80 @__fmodx(x86_fp80 %0, x86_fp80 %1)
  ret x86_fp80 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__logh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @logf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @logf(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  store float %0, ptr %5, align 4
  %6 = load float, ptr %5, align 4
  %7 = bitcast float %6 to i32
  store i32 %7, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %8 = load i32, ptr %4, align 4
  %9 = icmp ult i32 %8, 8388608
  br i1 %9, label %16, label %17

10:                                               ; preds = %48, %42
  %11 = load i32, ptr %4, align 4
  %12 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %11, i32 4913933)
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %57, label %58

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %20, %17 ]
  br i1 %15, label %21, label %25

16:                                               ; preds = %1
  br label %14

17:                                               ; preds = %1
  %18 = load i32, ptr %4, align 4
  %19 = lshr i32 %18, 31
  %20 = icmp ne i32 %19, 0
  br label %14

21:                                               ; preds = %14
  %22 = load i32, ptr %4, align 4
  %23 = shl i32 %22, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %32, label %33

25:                                               ; preds = %14
  %26 = load i32, ptr %4, align 4
  %27 = icmp uge i32 %26, 2139095040
  br i1 %27, label %49, label %51

28:                                               ; preds = %33
  %29 = load i32, ptr %4, align 4
  %30 = lshr i32 %29, 31
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %38, label %40

32:                                               ; preds = %21
  ret float 0xFFF0000000000000

33:                                               ; preds = %21
  br label %28

34:                                               ; preds = %40
  %35 = load i32, ptr %3, align 4
  %36 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %35, i32 25)
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %41, label %42

38:                                               ; preds = %28
  store float 0x7FF0000020000000, ptr %2, align 4
  %39 = load float, ptr %2, align 4
  ret float %39

40:                                               ; preds = %28
  br label %34

41:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

42:                                               ; preds = %34
  %43 = extractvalue { i32, i1 } %36, 0
  store i32 %43, ptr %3, align 4
  %44 = load float, ptr %5, align 4
  %45 = fmul float %44, 0x4180000000000000
  store float %45, ptr %5, align 4
  %46 = load float, ptr %5, align 4
  %47 = bitcast float %46 to i32
  store i32 %47, ptr %4, align 4
  br label %10

48:                                               ; preds = %54
  br label %10

49:                                               ; preds = %25
  %50 = load float, ptr %5, align 4
  ret float %50

51:                                               ; preds = %25
  %52 = load i32, ptr %4, align 4
  %53 = icmp eq i32 %52, 1065353216
  br i1 %53, label %55, label %56

54:                                               ; preds = %56
  br label %48

55:                                               ; preds = %51
  ret float 0.000000e+00

56:                                               ; preds = %51
  br label %54

57:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %10
  %59 = extractvalue { i32, i1 } %12, 0
  store i32 %59, ptr %4, align 4
  %60 = load i32, ptr %3, align 4
  %61 = load i32, ptr %4, align 4
  %62 = lshr i32 %61, 23
  %63 = sub i32 2147483647, %62
  %64 = icmp ule i32 %63, 2147483647
  br i1 %64, label %68, label %69

65:                                               ; preds = %68
  %66 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %62, i32 127)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %70, label %71

68:                                               ; preds = %58
  br label %65

69:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @104)
  unreachable

70:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %65
  %72 = extractvalue { i32, i1 } %66, 0
  %73 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %60, i32 %72)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %75, label %76

75:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %71
  %77 = extractvalue { i32, i1 } %73, 0
  store i32 %77, ptr %3, align 4
  %78 = load i32, ptr %4, align 4
  %79 = and i32 %78, 8388607
  %80 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %79, i32 1060439283)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %76
  %84 = extractvalue { i32, i1 } %80, 0
  store i32 %84, ptr %4, align 4
  %85 = load i32, ptr %4, align 4
  %86 = bitcast i32 %85 to float
  store float %86, ptr %5, align 4
  %87 = load float, ptr %5, align 4
  %88 = fsub float %87, 1.000000e+00
  %89 = fadd float 2.000000e+00, %88
  %90 = fdiv float %88, %89
  %91 = fmul float %90, %90
  %92 = fmul float %91, %91
  %93 = fmul float %92, 0x3FCF13C4C0000000
  %94 = fadd float 0x3FD999C260000000, %93
  %95 = fmul float %92, %94
  %96 = fmul float %92, 0x3FD23D3DC0000000
  %97 = fadd float 0x3FE5555540000000, %96
  %98 = fmul float %91, %97
  %99 = fadd float %98, %95
  %100 = fmul float 5.000000e-01, %88
  %101 = fmul float %100, %88
  %102 = load i32, ptr %3, align 4
  %103 = sitofp i32 %102 to float
  %104 = fadd float %101, %99
  %105 = fmul float %90, %104
  %106 = fmul float %103, 0x3EE2FEFA20000000
  %107 = fadd float %105, %106
  %108 = fsub float %107, %101
  %109 = fadd float %108, %88
  %110 = fmul float %103, 0x3FE62E3000000000
  %111 = fadd float %109, %110
  ret float %111
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @log(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca double, align 8
  store double %0, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  %8 = bitcast double %7 to i64
  store i64 %8, ptr %5, align 8
  %9 = load i64, ptr %5, align 8
  %10 = lshr i64 %9, 32
  %11 = sub i64 4294967295, %10
  %12 = icmp ule i64 %11, 4294967295
  br i1 %12, label %17, label %18

13:                                               ; preds = %17
  %14 = trunc i64 %10 to i32
  store i32 %14, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %15 = load i32, ptr %4, align 4
  %16 = icmp ult i32 %15, 1048576
  br i1 %16, label %25, label %26

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @105)
  unreachable

19:                                               ; preds = %63, %59
  %20 = load i32, ptr %4, align 4
  %21 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %20, i32 614242)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %79, label %80

23:                                               ; preds = %26, %25
  %24 = phi i1 [ true, %25 ], [ %29, %26 ]
  br i1 %24, label %30, label %34

25:                                               ; preds = %13
  br label %23

26:                                               ; preds = %13
  %27 = load i32, ptr %4, align 4
  %28 = lshr i32 %27, 31
  %29 = icmp ne i32 %28, 0
  br label %23

30:                                               ; preds = %23
  %31 = load i64, ptr %5, align 8
  %32 = shl i64 %31, 1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %41, label %42

34:                                               ; preds = %23
  %35 = load i32, ptr %4, align 4
  %36 = icmp uge i32 %35, 2146435072
  br i1 %36, label %64, label %66

37:                                               ; preds = %42
  %38 = load i32, ptr %4, align 4
  %39 = lshr i32 %38, 31
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %47, label %49

41:                                               ; preds = %30
  ret double 0xFFF0000000000000

42:                                               ; preds = %30
  br label %37

43:                                               ; preds = %49
  %44 = load i32, ptr %3, align 4
  %45 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %44, i32 54)
  %46 = extractvalue { i32, i1 } %45, 1
  br i1 %46, label %50, label %51

47:                                               ; preds = %37
  store double 0x7FF0000000000001, ptr %2, align 8
  %48 = load double, ptr %2, align 8
  ret double %48

49:                                               ; preds = %37
  br label %43

50:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

51:                                               ; preds = %43
  %52 = extractvalue { i32, i1 } %45, 0
  store i32 %52, ptr %3, align 4
  %53 = load double, ptr %6, align 8
  %54 = fmul double %53, 0x4350000000000000
  store double %54, ptr %6, align 8
  %55 = load i64, ptr %5, align 8
  %56 = lshr i64 %55, 32
  %57 = sub i64 4294967295, %56
  %58 = icmp ule i64 %57, 4294967295
  br i1 %58, label %61, label %62

59:                                               ; preds = %61
  %60 = trunc i64 %56 to i32
  store i32 %60, ptr %4, align 4
  br label %19

61:                                               ; preds = %51
  br label %59

62:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @105)
  unreachable

63:                                               ; preds = %69
  br label %19

64:                                               ; preds = %34
  %65 = load double, ptr %6, align 8
  ret double %65

66:                                               ; preds = %34
  %67 = load i32, ptr %4, align 4
  %68 = icmp eq i32 %67, 1072693248
  br i1 %68, label %72, label %76

69:                                               ; preds = %78
  br label %63

70:                                               ; preds = %76, %72
  %71 = phi i1 [ %75, %72 ], [ false, %76 ]
  br i1 %71, label %77, label %78

72:                                               ; preds = %66
  %73 = load i64, ptr %5, align 8
  %74 = shl i64 %73, 32
  %75 = icmp eq i64 %74, 0
  br label %70

76:                                               ; preds = %66
  br label %70

77:                                               ; preds = %70
  ret double 0.000000e+00

78:                                               ; preds = %70
  br label %69

79:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %19
  %81 = extractvalue { i32, i1 } %21, 0
  store i32 %81, ptr %4, align 4
  %82 = load i32, ptr %3, align 4
  %83 = load i32, ptr %4, align 4
  %84 = lshr i32 %83, 20
  %85 = sub i32 2147483647, %84
  %86 = icmp ule i32 %85, 2147483647
  br i1 %86, label %90, label %91

87:                                               ; preds = %90
  %88 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %84, i32 1023)
  %89 = extractvalue { i32, i1 } %88, 1
  br i1 %89, label %92, label %93

90:                                               ; preds = %80
  br label %87

91:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @105)
  unreachable

92:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %87
  %94 = extractvalue { i32, i1 } %88, 0
  %95 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %82, i32 %94)
  %96 = extractvalue { i32, i1 } %95, 1
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %93
  %99 = extractvalue { i32, i1 } %95, 0
  store i32 %99, ptr %3, align 4
  %100 = load i32, ptr %4, align 4
  %101 = and i32 %100, 1048575
  %102 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %101, i32 1072079006)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %104, label %105

104:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %98
  %106 = extractvalue { i32, i1 } %102, 0
  store i32 %106, ptr %4, align 4
  %107 = load i32, ptr %4, align 4
  %108 = zext i32 %107 to i64
  %109 = shl i64 %108, 32
  %110 = load i64, ptr %5, align 8
  %111 = and i64 %110, 4294967295
  %112 = or i64 %109, %111
  store i64 %112, ptr %5, align 8
  %113 = load i64, ptr %5, align 8
  %114 = bitcast i64 %113 to double
  store double %114, ptr %6, align 8
  %115 = load double, ptr %6, align 8
  %116 = fsub double %115, 1.000000e+00
  %117 = fmul double 5.000000e-01, %116
  %118 = fmul double %117, %116
  %119 = fadd double 2.000000e+00, %116
  %120 = fdiv double %116, %119
  %121 = fmul double %120, %120
  %122 = fmul double %121, %121
  %123 = fmul double %122, 0x3FC39A09D078C69F
  %124 = fadd double 0x3FCC71C51D8E78AF, %123
  %125 = fmul double %122, %124
  %126 = fadd double 0x3FD999999997FA04, %125
  %127 = fmul double %122, %126
  %128 = fmul double %122, 0x3FC2F112DF3E5244
  %129 = fadd double 0x3FC7466496CB03DE, %128
  %130 = fmul double %122, %129
  %131 = fadd double 0x3FD2492494229359, %130
  %132 = fmul double %122, %131
  %133 = fadd double 0x3FE5555555555593, %132
  %134 = fmul double %121, %133
  %135 = fadd double %134, %127
  %136 = load i32, ptr %3, align 4
  %137 = sitofp i32 %136 to double
  %138 = fadd double %118, %135
  %139 = fmul double %120, %138
  %140 = fmul double %137, 0x3DEA39EF35793C76
  %141 = fadd double %139, %140
  %142 = fsub double %141, %118
  %143 = fadd double %142, %116
  %144 = fmul double %137, 0x3FE62E42FEE00000
  %145 = fadd double %143, %144
  ret double %145
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__logx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @logq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @logq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @log(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @logl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__logx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__log10h(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @log10f(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @log10f(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  store float %0, ptr %7, align 4
  %8 = load float, ptr %7, align 4
  %9 = bitcast float %8 to i32
  store i32 %9, ptr %6, align 4
  %10 = load i32, ptr %6, align 4
  store i32 %10, ptr %5, align 4
  store i32 0, ptr %4, align 4
  %11 = load i32, ptr %5, align 4
  %12 = icmp ult i32 %11, 8388608
  br i1 %12, label %19, label %20

13:                                               ; preds = %51, %45
  %14 = load i32, ptr %5, align 4
  %15 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %14, i32 4913933)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %60, label %61

17:                                               ; preds = %20, %19
  %18 = phi i1 [ true, %19 ], [ %23, %20 ]
  br i1 %18, label %24, label %28

19:                                               ; preds = %1
  br label %17

20:                                               ; preds = %1
  %21 = load i32, ptr %5, align 4
  %22 = lshr i32 %21, 31
  %23 = icmp ne i32 %22, 0
  br label %17

24:                                               ; preds = %17
  %25 = load i32, ptr %5, align 4
  %26 = shl i32 %25, 1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %35, label %36

28:                                               ; preds = %17
  %29 = load i32, ptr %5, align 4
  %30 = icmp uge i32 %29, 2139095040
  br i1 %30, label %52, label %54

31:                                               ; preds = %36
  %32 = load i32, ptr %5, align 4
  %33 = lshr i32 %32, 31
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %41, label %43

35:                                               ; preds = %24
  ret float 0xFFF0000000000000

36:                                               ; preds = %24
  br label %31

37:                                               ; preds = %43
  %38 = load i32, ptr %4, align 4
  %39 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %38, i32 25)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %44, label %45

41:                                               ; preds = %31
  store float 0x7FF0000020000000, ptr %3, align 4
  %42 = load float, ptr %3, align 4
  ret float %42

43:                                               ; preds = %31
  br label %37

44:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %37
  %46 = extractvalue { i32, i1 } %39, 0
  store i32 %46, ptr %4, align 4
  %47 = load float, ptr %7, align 4
  %48 = fmul float %47, 0x4180000000000000
  store float %48, ptr %7, align 4
  %49 = load float, ptr %7, align 4
  %50 = bitcast float %49 to i32
  store i32 %50, ptr %5, align 4
  br label %13

51:                                               ; preds = %57
  br label %13

52:                                               ; preds = %28
  %53 = load float, ptr %7, align 4
  ret float %53

54:                                               ; preds = %28
  %55 = load i32, ptr %5, align 4
  %56 = icmp eq i32 %55, 1065353216
  br i1 %56, label %58, label %59

57:                                               ; preds = %59
  br label %51

58:                                               ; preds = %54
  ret float 0.000000e+00

59:                                               ; preds = %54
  br label %57

60:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %13
  %62 = extractvalue { i32, i1 } %15, 0
  store i32 %62, ptr %5, align 4
  %63 = load i32, ptr %4, align 4
  %64 = load i32, ptr %5, align 4
  %65 = lshr i32 %64, 23
  %66 = sub i32 2147483647, %65
  %67 = icmp ule i32 %66, 2147483647
  br i1 %67, label %71, label %72

68:                                               ; preds = %71
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %65, i32 127)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %61
  br label %68

72:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @106)
  unreachable

73:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %68
  %75 = extractvalue { i32, i1 } %69, 0
  %76 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %63, i32 %75)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %74
  %80 = extractvalue { i32, i1 } %76, 0
  store i32 %80, ptr %4, align 4
  %81 = load i32, ptr %5, align 4
  %82 = and i32 %81, 8388607
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1060439283)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %79
  %87 = extractvalue { i32, i1 } %83, 0
  store i32 %87, ptr %5, align 4
  %88 = load i32, ptr %5, align 4
  %89 = bitcast i32 %88 to float
  store float %89, ptr %7, align 4
  %90 = load float, ptr %7, align 4
  %91 = fsub float %90, 1.000000e+00
  %92 = fadd float 2.000000e+00, %91
  %93 = fdiv float %91, %92
  %94 = fmul float %93, %93
  %95 = fmul float %94, %94
  %96 = fmul float %95, 0x3FCF13C4C0000000
  %97 = fadd float 0x3FD999C260000000, %96
  %98 = fmul float %95, %97
  %99 = fmul float %95, 0x3FD23D3DC0000000
  %100 = fadd float 0x3FE5555540000000, %99
  %101 = fmul float %94, %100
  %102 = fadd float %101, %98
  %103 = fmul float 5.000000e-01, %91
  %104 = fmul float %103, %91
  %105 = fsub float %91, %104
  store float %105, ptr %2, align 4
  %106 = load float, ptr %2, align 4
  %107 = bitcast float %106 to i32
  store i32 %107, ptr %6, align 4
  %108 = load i32, ptr %6, align 4
  %109 = and i32 %108, -4096
  store i32 %109, ptr %6, align 4
  %110 = load i32, ptr %6, align 4
  %111 = bitcast i32 %110 to float
  store float %111, ptr %2, align 4
  %112 = load float, ptr %2, align 4
  %113 = fsub float %91, %112
  %114 = fsub float %113, %104
  %115 = fadd float %104, %102
  %116 = fmul float %93, %115
  %117 = fadd float %114, %116
  %118 = load i32, ptr %4, align 4
  %119 = sitofp i32 %118 to float
  %120 = fmul float %119, 0x3EAA84FB60000000
  %121 = load float, ptr %2, align 4
  %122 = fadd float %117, %121
  %123 = fmul float %122, 0xBF009D5B20000000
  %124 = fadd float %120, %123
  %125 = fmul float %117, 0x3FDBCC0000000000
  %126 = fadd float %124, %125
  %127 = load float, ptr %2, align 4
  %128 = fmul float %127, 0x3FDBCC0000000000
  %129 = fadd float %126, %128
  %130 = fmul float %119, 0x3FD3441000000000
  %131 = fadd float %129, %130
  ret float %131
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @log10(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca i64, align 8
  %5 = alloca double, align 8
  %6 = alloca float, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  store double %0, ptr %10, align 8
  %11 = load double, ptr %10, align 8
  %12 = bitcast double %11 to i64
  store i64 %12, ptr %9, align 8
  %13 = load i64, ptr %9, align 8
  %14 = lshr i64 %13, 32
  %15 = sub i64 4294967295, %14
  %16 = icmp ule i64 %15, 4294967295
  br i1 %16, label %21, label %22

17:                                               ; preds = %21
  %18 = trunc i64 %14 to i32
  store i32 %18, ptr %8, align 4
  store i32 0, ptr %7, align 4
  %19 = load i32, ptr %8, align 4
  %20 = icmp ult i32 %19, 1048576
  br i1 %20, label %29, label %30

21:                                               ; preds = %1
  br label %17

22:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @107)
  unreachable

23:                                               ; preds = %69, %65
  %24 = load i32, ptr %8, align 4
  %25 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %24, i32 614242)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %85, label %86

27:                                               ; preds = %30, %29
  %28 = phi i1 [ true, %29 ], [ %33, %30 ]
  br i1 %28, label %34, label %38

29:                                               ; preds = %17
  br label %27

30:                                               ; preds = %17
  %31 = load i32, ptr %8, align 4
  %32 = lshr i32 %31, 31
  %33 = icmp ne i32 %32, 0
  br label %27

34:                                               ; preds = %27
  %35 = load i64, ptr %9, align 8
  %36 = shl i64 %35, 1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %45, label %46

38:                                               ; preds = %27
  %39 = load i32, ptr %8, align 4
  %40 = icmp uge i32 %39, 2146435072
  br i1 %40, label %70, label %72

41:                                               ; preds = %46
  %42 = load i32, ptr %8, align 4
  %43 = lshr i32 %42, 31
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %51, label %54

45:                                               ; preds = %34
  ret double 0xFFF0000000000000

46:                                               ; preds = %34
  br label %41

47:                                               ; preds = %54
  %48 = load i32, ptr %7, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %48, i32 54)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %55, label %56

51:                                               ; preds = %41
  store float 0x7FF0000020000000, ptr %6, align 4
  %52 = load float, ptr %6, align 4
  %53 = fpext float %52 to double
  ret double %53

54:                                               ; preds = %41
  br label %47

55:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

56:                                               ; preds = %47
  %57 = extractvalue { i32, i1 } %49, 0
  store i32 %57, ptr %7, align 4
  %58 = load double, ptr %10, align 8
  %59 = fmul double %58, 0x4350000000000000
  store double %59, ptr %10, align 8
  %60 = load double, ptr %10, align 8
  %61 = bitcast double %60 to i64
  %62 = lshr i64 %61, 32
  %63 = sub i64 4294967295, %62
  %64 = icmp ule i64 %63, 4294967295
  br i1 %64, label %67, label %68

65:                                               ; preds = %67
  %66 = trunc i64 %62 to i32
  store i32 %66, ptr %8, align 4
  br label %23

67:                                               ; preds = %56
  br label %65

68:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @107)
  unreachable

69:                                               ; preds = %75
  br label %23

70:                                               ; preds = %38
  %71 = load double, ptr %10, align 8
  ret double %71

72:                                               ; preds = %38
  %73 = load i32, ptr %8, align 4
  %74 = icmp eq i32 %73, 1072693248
  br i1 %74, label %78, label %82

75:                                               ; preds = %84
  br label %69

76:                                               ; preds = %82, %78
  %77 = phi i1 [ %81, %78 ], [ false, %82 ]
  br i1 %77, label %83, label %84

78:                                               ; preds = %72
  %79 = load i64, ptr %9, align 8
  %80 = shl i64 %79, 32
  %81 = icmp eq i64 %80, 0
  br label %76

82:                                               ; preds = %72
  br label %76

83:                                               ; preds = %76
  ret double 0.000000e+00

84:                                               ; preds = %76
  br label %75

85:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %23
  %87 = extractvalue { i32, i1 } %25, 0
  store i32 %87, ptr %8, align 4
  %88 = load i32, ptr %7, align 4
  %89 = load i32, ptr %8, align 4
  %90 = lshr i32 %89, 20
  %91 = sub i32 2147483647, %90
  %92 = icmp ule i32 %91, 2147483647
  br i1 %92, label %96, label %97

93:                                               ; preds = %96
  %94 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %90, i32 1023)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %98, label %99

96:                                               ; preds = %86
  br label %93

97:                                               ; preds = %86
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @107)
  unreachable

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i32, i1 } %94, 0
  %101 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %88, i32 %100)
  %102 = extractvalue { i32, i1 } %101, 1
  br i1 %102, label %103, label %104

103:                                              ; preds = %99
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %99
  %105 = extractvalue { i32, i1 } %101, 0
  store i32 %105, ptr %7, align 4
  %106 = load i32, ptr %8, align 4
  %107 = and i32 %106, 1048575
  %108 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %107, i32 1072079006)
  %109 = extractvalue { i32, i1 } %108, 1
  br i1 %109, label %110, label %111

110:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

111:                                              ; preds = %104
  %112 = extractvalue { i32, i1 } %108, 0
  store i32 %112, ptr %8, align 4
  %113 = load i32, ptr %8, align 4
  %114 = zext i32 %113 to i64
  %115 = shl i64 %114, 32
  %116 = load i64, ptr %9, align 8
  %117 = and i64 %116, 4294967295
  %118 = or i64 %115, %117
  store i64 %118, ptr %9, align 8
  %119 = load i64, ptr %9, align 8
  %120 = bitcast i64 %119 to double
  store double %120, ptr %10, align 8
  %121 = load double, ptr %10, align 8
  %122 = fsub double %121, 1.000000e+00
  %123 = fmul double 5.000000e-01, %122
  %124 = fmul double %123, %122
  %125 = fadd double 2.000000e+00, %122
  %126 = fdiv double %122, %125
  %127 = fmul double %126, %126
  %128 = fmul double %127, %127
  %129 = fmul double %128, 0x3FC39A09D078C69F
  %130 = fadd double 0x3FCC71C51D8E78AF, %129
  %131 = fmul double %128, %130
  %132 = fadd double 0x3FD999999997FA04, %131
  %133 = fmul double %128, %132
  %134 = fmul double %128, 0x3FC2F112DF3E5244
  %135 = fadd double 0x3FC7466496CB03DE, %134
  %136 = fmul double %128, %135
  %137 = fadd double 0x3FD2492494229359, %136
  %138 = fmul double %128, %137
  %139 = fadd double 0x3FE5555555555593, %138
  %140 = fmul double %127, %139
  %141 = fadd double %140, %133
  %142 = fsub double %122, %124
  store double %142, ptr %5, align 8
  %143 = load double, ptr %5, align 8
  %144 = bitcast double %143 to i64
  store i64 %144, ptr %4, align 8
  %145 = load i64, ptr %4, align 8
  %146 = and i64 %145, -4294967296
  store i64 %146, ptr %4, align 8
  %147 = load i64, ptr %4, align 8
  %148 = bitcast i64 %147 to double
  store double %148, ptr %5, align 8
  %149 = load double, ptr %5, align 8
  %150 = fsub double %122, %149
  %151 = fsub double %150, %124
  %152 = fadd double %124, %141
  %153 = fmul double %126, %152
  %154 = fadd double %151, %153
  %155 = load double, ptr %5, align 8
  %156 = fmul double %155, 0x3FDBCB7B15200000
  store double %156, ptr %3, align 8
  %157 = load i32, ptr %7, align 4
  %158 = sitofp i32 %157 to double
  %159 = fmul double %158, 0x3FD34413509F6000
  %160 = fmul double %158, 0x3D59FEF311F12B36
  %161 = load double, ptr %5, align 8
  %162 = fadd double %154, %161
  %163 = fmul double %162, 0x3DBB9438CA9AADD5
  %164 = fadd double %160, %163
  %165 = fmul double %154, 0x3FDBCB7B15200000
  %166 = fadd double %164, %165
  store double %166, ptr %2, align 8
  %167 = load double, ptr %3, align 8
  %168 = fadd double %159, %167
  %169 = load double, ptr %2, align 8
  %170 = fsub double %159, %168
  %171 = load double, ptr %3, align 8
  %172 = fadd double %170, %171
  %173 = fadd double %169, %172
  store double %173, ptr %2, align 8
  store double %168, ptr %3, align 8
  %174 = load double, ptr %2, align 8
  %175 = load double, ptr %3, align 8
  %176 = fadd double %174, %175
  ret double %176
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__log10x(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @log10q(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @log10q(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @log10(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @log10l(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__log10x(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__log2h(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @log2f(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @log2f(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  store float %0, ptr %7, align 4
  %8 = load float, ptr %7, align 4
  %9 = bitcast float %8 to i32
  store i32 %9, ptr %6, align 4
  %10 = load i32, ptr %6, align 4
  store i32 %10, ptr %5, align 4
  store i32 0, ptr %4, align 4
  %11 = load i32, ptr %5, align 4
  %12 = icmp ult i32 %11, 8388608
  br i1 %12, label %19, label %20

13:                                               ; preds = %51, %45
  %14 = load i32, ptr %5, align 4
  %15 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %14, i32 4913933)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %60, label %61

17:                                               ; preds = %20, %19
  %18 = phi i1 [ true, %19 ], [ %23, %20 ]
  br i1 %18, label %24, label %28

19:                                               ; preds = %1
  br label %17

20:                                               ; preds = %1
  %21 = load i32, ptr %5, align 4
  %22 = lshr i32 %21, 31
  %23 = icmp ne i32 %22, 0
  br label %17

24:                                               ; preds = %17
  %25 = load i32, ptr %5, align 4
  %26 = shl i32 %25, 1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %35, label %36

28:                                               ; preds = %17
  %29 = load i32, ptr %5, align 4
  %30 = icmp uge i32 %29, 2139095040
  br i1 %30, label %52, label %54

31:                                               ; preds = %36
  %32 = load i32, ptr %5, align 4
  %33 = lshr i32 %32, 31
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %41, label %43

35:                                               ; preds = %24
  ret float 0xFFF0000000000000

36:                                               ; preds = %24
  br label %31

37:                                               ; preds = %43
  %38 = load i32, ptr %4, align 4
  %39 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %38, i32 25)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %44, label %45

41:                                               ; preds = %31
  store float 0x7FF0000020000000, ptr %3, align 4
  %42 = load float, ptr %3, align 4
  ret float %42

43:                                               ; preds = %31
  br label %37

44:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %37
  %46 = extractvalue { i32, i1 } %39, 0
  store i32 %46, ptr %4, align 4
  %47 = load float, ptr %7, align 4
  %48 = fmul float %47, 0x4180000000000000
  store float %48, ptr %7, align 4
  %49 = load float, ptr %7, align 4
  %50 = bitcast float %49 to i32
  store i32 %50, ptr %5, align 4
  br label %13

51:                                               ; preds = %57
  br label %13

52:                                               ; preds = %28
  %53 = load float, ptr %7, align 4
  ret float %53

54:                                               ; preds = %28
  %55 = load i32, ptr %5, align 4
  %56 = icmp eq i32 %55, 1065353216
  br i1 %56, label %58, label %59

57:                                               ; preds = %59
  br label %51

58:                                               ; preds = %54
  ret float 0.000000e+00

59:                                               ; preds = %54
  br label %57

60:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %13
  %62 = extractvalue { i32, i1 } %15, 0
  store i32 %62, ptr %5, align 4
  %63 = load i32, ptr %4, align 4
  %64 = load i32, ptr %5, align 4
  %65 = lshr i32 %64, 23
  %66 = sub i32 2147483647, %65
  %67 = icmp ule i32 %66, 2147483647
  br i1 %67, label %71, label %72

68:                                               ; preds = %71
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %65, i32 127)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %61
  br label %68

72:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @108)
  unreachable

73:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %68
  %75 = extractvalue { i32, i1 } %69, 0
  %76 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %63, i32 %75)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %74
  %80 = extractvalue { i32, i1 } %76, 0
  store i32 %80, ptr %4, align 4
  %81 = load i32, ptr %5, align 4
  %82 = and i32 %81, 8388607
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1060439283)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %79
  %87 = extractvalue { i32, i1 } %83, 0
  store i32 %87, ptr %5, align 4
  %88 = load i32, ptr %5, align 4
  %89 = bitcast i32 %88 to float
  store float %89, ptr %7, align 4
  %90 = load float, ptr %7, align 4
  %91 = fsub float %90, 1.000000e+00
  %92 = fadd float 2.000000e+00, %91
  %93 = fdiv float %91, %92
  %94 = fmul float %93, %93
  %95 = fmul float %94, %94
  %96 = fmul float %95, 0x3FCF13C4C0000000
  %97 = fadd float 0x3FD999C260000000, %96
  %98 = fmul float %95, %97
  %99 = fmul float %95, 0x3FD23D3DC0000000
  %100 = fadd float 0x3FE5555540000000, %99
  %101 = fmul float %94, %100
  %102 = fadd float %101, %98
  %103 = fmul float 5.000000e-01, %91
  %104 = fmul float %103, %91
  %105 = fsub float %91, %104
  store float %105, ptr %2, align 4
  %106 = load float, ptr %2, align 4
  %107 = bitcast float %106 to i32
  store i32 %107, ptr %6, align 4
  %108 = load i32, ptr %6, align 4
  %109 = and i32 %108, -4096
  store i32 %109, ptr %6, align 4
  %110 = load i32, ptr %6, align 4
  %111 = bitcast i32 %110 to float
  store float %111, ptr %2, align 4
  %112 = load float, ptr %2, align 4
  %113 = fsub float %91, %112
  %114 = fsub float %113, %104
  %115 = fadd float %104, %102
  %116 = fmul float %93, %115
  %117 = fadd float %114, %116
  %118 = load float, ptr %2, align 4
  %119 = fadd float %117, %118
  %120 = fmul float %119, 0xBF27135A80000000
  %121 = fmul float %117, 0x3FF7160000000000
  %122 = fadd float %120, %121
  %123 = load float, ptr %2, align 4
  %124 = fmul float %123, 0x3FF7160000000000
  %125 = fadd float %122, %124
  %126 = load i32, ptr %4, align 4
  %127 = sitofp i32 %126 to float
  %128 = fadd float %125, %127
  ret float %128
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @log2(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca i64, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  store double %0, ptr %10, align 8
  %11 = load double, ptr %10, align 8
  %12 = bitcast double %11 to i64
  store i64 %12, ptr %9, align 8
  %13 = load i64, ptr %9, align 8
  %14 = lshr i64 %13, 32
  %15 = sub i64 4294967295, %14
  %16 = icmp ule i64 %15, 4294967295
  br i1 %16, label %21, label %22

17:                                               ; preds = %21
  %18 = trunc i64 %14 to i32
  store i32 %18, ptr %8, align 4
  store i32 0, ptr %7, align 4
  %19 = load i32, ptr %8, align 4
  %20 = icmp ult i32 %19, 1048576
  br i1 %20, label %29, label %30

21:                                               ; preds = %1
  br label %17

22:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @109)
  unreachable

23:                                               ; preds = %68, %64
  %24 = load i32, ptr %8, align 4
  %25 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %24, i32 614242)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %84, label %85

27:                                               ; preds = %30, %29
  %28 = phi i1 [ true, %29 ], [ %33, %30 ]
  br i1 %28, label %34, label %38

29:                                               ; preds = %17
  br label %27

30:                                               ; preds = %17
  %31 = load i32, ptr %8, align 4
  %32 = lshr i32 %31, 31
  %33 = icmp ne i32 %32, 0
  br label %27

34:                                               ; preds = %27
  %35 = load i64, ptr %9, align 8
  %36 = shl i64 %35, 1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %45, label %46

38:                                               ; preds = %27
  %39 = load i32, ptr %8, align 4
  %40 = icmp uge i32 %39, 2146435072
  br i1 %40, label %69, label %71

41:                                               ; preds = %46
  %42 = load i32, ptr %8, align 4
  %43 = lshr i32 %42, 31
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %51, label %53

45:                                               ; preds = %34
  ret double 0xFFF0000000000000

46:                                               ; preds = %34
  br label %41

47:                                               ; preds = %53
  %48 = load i32, ptr %7, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %48, i32 54)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %54, label %55

51:                                               ; preds = %41
  store double 0x7FF0000000000001, ptr %6, align 8
  %52 = load double, ptr %6, align 8
  ret double %52

53:                                               ; preds = %41
  br label %47

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i32, i1 } %49, 0
  store i32 %56, ptr %7, align 4
  %57 = load double, ptr %10, align 8
  %58 = fmul double %57, 0x4350000000000000
  store double %58, ptr %10, align 8
  %59 = load double, ptr %10, align 8
  %60 = bitcast double %59 to i64
  %61 = lshr i64 %60, 32
  %62 = sub i64 4294967295, %61
  %63 = icmp ule i64 %62, 4294967295
  br i1 %63, label %66, label %67

64:                                               ; preds = %66
  %65 = trunc i64 %61 to i32
  store i32 %65, ptr %8, align 4
  br label %23

66:                                               ; preds = %55
  br label %64

67:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @109)
  unreachable

68:                                               ; preds = %74
  br label %23

69:                                               ; preds = %38
  %70 = load double, ptr %10, align 8
  ret double %70

71:                                               ; preds = %38
  %72 = load i32, ptr %8, align 4
  %73 = icmp eq i32 %72, 1072693248
  br i1 %73, label %77, label %81

74:                                               ; preds = %83
  br label %68

75:                                               ; preds = %81, %77
  %76 = phi i1 [ %80, %77 ], [ false, %81 ]
  br i1 %76, label %82, label %83

77:                                               ; preds = %71
  %78 = load i64, ptr %9, align 8
  %79 = shl i64 %78, 32
  %80 = icmp eq i64 %79, 0
  br label %75

81:                                               ; preds = %71
  br label %75

82:                                               ; preds = %75
  ret double 0.000000e+00

83:                                               ; preds = %75
  br label %74

84:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %23
  %86 = extractvalue { i32, i1 } %25, 0
  store i32 %86, ptr %8, align 4
  %87 = load i32, ptr %7, align 4
  %88 = load i32, ptr %8, align 4
  %89 = lshr i32 %88, 20
  %90 = sub i32 2147483647, %89
  %91 = icmp ule i32 %90, 2147483647
  br i1 %91, label %95, label %96

92:                                               ; preds = %95
  %93 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %89, i32 1023)
  %94 = extractvalue { i32, i1 } %93, 1
  br i1 %94, label %97, label %98

95:                                               ; preds = %85
  br label %92

96:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @109)
  unreachable

97:                                               ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %92
  %99 = extractvalue { i32, i1 } %93, 0
  %100 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %87, i32 %99)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %102, label %103

102:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %98
  %104 = extractvalue { i32, i1 } %100, 0
  store i32 %104, ptr %7, align 4
  %105 = load i32, ptr %8, align 4
  %106 = and i32 %105, 1048575
  %107 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %106, i32 1072079006)
  %108 = extractvalue { i32, i1 } %107, 1
  br i1 %108, label %109, label %110

109:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

110:                                              ; preds = %103
  %111 = extractvalue { i32, i1 } %107, 0
  store i32 %111, ptr %8, align 4
  %112 = load i32, ptr %8, align 4
  %113 = zext i32 %112 to i64
  %114 = shl i64 %113, 32
  %115 = load i64, ptr %9, align 8
  %116 = and i64 %115, 4294967295
  %117 = or i64 %114, %116
  store i64 %117, ptr %9, align 8
  %118 = load i64, ptr %9, align 8
  %119 = bitcast i64 %118 to double
  store double %119, ptr %10, align 8
  %120 = load double, ptr %10, align 8
  %121 = fsub double %120, 1.000000e+00
  %122 = fmul double 5.000000e-01, %121
  %123 = fmul double %122, %121
  %124 = fadd double 2.000000e+00, %121
  %125 = fdiv double %121, %124
  %126 = fmul double %125, %125
  %127 = fmul double %126, %126
  %128 = fmul double %127, 0x3FC39A09D078C69F
  %129 = fadd double 0x3FCC71C51D8E78AF, %128
  %130 = fmul double %127, %129
  %131 = fadd double 0x3FD999999997FA04, %130
  %132 = fmul double %127, %131
  %133 = fmul double %127, 0x3FC2F112DF3E5244
  %134 = fadd double 0x3FC7466496CB03DE, %133
  %135 = fmul double %127, %134
  %136 = fadd double 0x3FD2492494229359, %135
  %137 = fmul double %127, %136
  %138 = fadd double 0x3FE5555555555593, %137
  %139 = fmul double %126, %138
  %140 = fadd double %139, %132
  %141 = fsub double %121, %123
  store double %141, ptr %5, align 8
  %142 = load double, ptr %5, align 8
  %143 = bitcast double %142 to i64
  store i64 %143, ptr %4, align 8
  %144 = load i64, ptr %4, align 8
  %145 = and i64 %144, -4294967296
  store i64 %145, ptr %4, align 8
  %146 = load i64, ptr %4, align 8
  %147 = bitcast i64 %146 to double
  store double %147, ptr %5, align 8
  %148 = load double, ptr %5, align 8
  %149 = fsub double %121, %148
  %150 = fsub double %149, %123
  %151 = fadd double %123, %140
  %152 = fmul double %125, %151
  %153 = fadd double %150, %152
  %154 = load double, ptr %5, align 8
  %155 = fmul double %154, 0x3FF7154765200000
  store double %155, ptr %3, align 8
  %156 = load double, ptr %5, align 8
  %157 = fadd double %153, %156
  %158 = fmul double %157, 0x3DE705FC2EEFA200
  %159 = fmul double %153, 0x3FF7154765200000
  %160 = fadd double %158, %159
  store double %160, ptr %2, align 8
  %161 = load i32, ptr %7, align 4
  %162 = sitofp i32 %161 to double
  %163 = load double, ptr %3, align 8
  %164 = fadd double %162, %163
  %165 = load double, ptr %2, align 8
  %166 = fsub double %162, %164
  %167 = load double, ptr %3, align 8
  %168 = fadd double %166, %167
  %169 = fadd double %165, %168
  store double %169, ptr %2, align 8
  store double %164, ptr %3, align 8
  %170 = load double, ptr %2, align 8
  %171 = load double, ptr %3, align 8
  %172 = fadd double %170, %171
  ret double %172
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__log2x(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @log2q(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @log2q(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @log2(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @log2l(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__log2x(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__roundh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @roundf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @roundf(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  store float %0, ptr %4, align 4
  %5 = load float, ptr %4, align 4
  %6 = bitcast float %5 to i32
  %7 = lshr i32 %6, 23
  %8 = and i32 %7, 255
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %9 = ptrtoint ptr %3 to i64
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %9, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %15, align 8
  %16 = ptrtoint ptr %2 to i64
  %17 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %16, i64 0)
  %18 = icmp uge i32 %8, 150
  br i1 %18, label %22, label %24

19:                                               ; preds = %24
  %20 = lshr i32 %6, 31
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %27, label %30

22:                                               ; preds = %1
  %23 = load float, ptr %4, align 4
  ret float %23

24:                                               ; preds = %1
  br label %19

25:                                               ; preds = %30, %27
  %26 = icmp ult i32 %8, 126
  br i1 %26, label %39, label %44

27:                                               ; preds = %19
  %28 = load float, ptr %4, align 4
  %29 = fneg float %28
  store float %29, ptr %4, align 4
  br label %25

30:                                               ; preds = %19
  br label %25

31:                                               ; preds = %44
  %32 = load float, ptr %4, align 4
  %33 = fadd float %32, 0x4160000000000000
  %34 = fsub float %33, 0x4160000000000000
  %35 = load float, ptr %4, align 4
  %36 = fsub float %34, %35
  store float %36, ptr %3, align 4
  %37 = load float, ptr %3, align 4
  %38 = fcmp ogt float %37, 5.000000e-01
  br i1 %38, label %48, label %53

39:                                               ; preds = %25
  %40 = load float, ptr %4, align 4
  %41 = fadd float %40, 0x4160000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %41)
  %42 = bitcast i32 %6 to float
  %43 = fmul float 0.000000e+00, %42
  ret float %43

44:                                               ; preds = %25
  br label %31

45:                                               ; preds = %56, %48
  %46 = lshr i32 %6, 31
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %66, label %69

48:                                               ; preds = %31
  %49 = load float, ptr %3, align 4
  %50 = load float, ptr %4, align 4
  %51 = fadd float %49, %50
  %52 = fsub float %51, 1.000000e+00
  store float %52, ptr %3, align 4
  br label %45

53:                                               ; preds = %31
  %54 = load float, ptr %3, align 4
  %55 = fcmp ole float %54, -5.000000e-01
  br i1 %55, label %57, label %62

56:                                               ; preds = %62, %57
  br label %45

57:                                               ; preds = %53
  %58 = load float, ptr %3, align 4
  %59 = load float, ptr %4, align 4
  %60 = fadd float %58, %59
  %61 = fadd float %60, 1.000000e+00
  store float %61, ptr %3, align 4
  br label %56

62:                                               ; preds = %53
  %63 = load float, ptr %3, align 4
  %64 = load float, ptr %4, align 4
  %65 = fadd float %63, %64
  store float %65, ptr %3, align 4
  br label %56

66:                                               ; preds = %45
  %67 = load float, ptr %3, align 4
  %68 = fneg float %67
  ret float %68

69:                                               ; preds = %45
  %70 = load float, ptr %3, align 4
  ret float %70
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @round(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  store double %0, ptr %4, align 8
  %5 = load double, ptr %4, align 8
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = and i64 %7, 2047
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %9 = ptrtoint ptr %3 to i64
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %9, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %15, align 8
  %16 = ptrtoint ptr %2 to i64
  %17 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %16, i64 0)
  %18 = icmp uge i64 %8, 1075
  br i1 %18, label %22, label %24

19:                                               ; preds = %24
  %20 = lshr i64 %6, 63
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %27, label %30

22:                                               ; preds = %1
  %23 = load double, ptr %4, align 8
  ret double %23

24:                                               ; preds = %1
  br label %19

25:                                               ; preds = %30, %27
  %26 = icmp ult i64 %8, 1022
  br i1 %26, label %39, label %44

27:                                               ; preds = %19
  %28 = load double, ptr %4, align 8
  %29 = fneg double %28
  store double %29, ptr %4, align 8
  br label %25

30:                                               ; preds = %19
  br label %25

31:                                               ; preds = %44
  %32 = load double, ptr %4, align 8
  %33 = fadd double %32, 0x4330000000000000
  %34 = fsub double %33, 0x4330000000000000
  %35 = load double, ptr %4, align 8
  %36 = fsub double %34, %35
  store double %36, ptr %3, align 8
  %37 = load double, ptr %3, align 8
  %38 = fcmp ogt double %37, 5.000000e-01
  br i1 %38, label %48, label %53

39:                                               ; preds = %25
  %40 = load double, ptr %4, align 8
  %41 = fadd double %40, 0x4330000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3776(double %41)
  %42 = bitcast i64 %6 to double
  %43 = fmul double 0.000000e+00, %42
  ret double %43

44:                                               ; preds = %25
  br label %31

45:                                               ; preds = %56, %48
  %46 = lshr i64 %6, 63
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %66, label %69

48:                                               ; preds = %31
  %49 = load double, ptr %3, align 8
  %50 = load double, ptr %4, align 8
  %51 = fadd double %49, %50
  %52 = fsub double %51, 1.000000e+00
  store double %52, ptr %3, align 8
  br label %45

53:                                               ; preds = %31
  %54 = load double, ptr %3, align 8
  %55 = fcmp ole double %54, -5.000000e-01
  br i1 %55, label %57, label %62

56:                                               ; preds = %62, %57
  br label %45

57:                                               ; preds = %53
  %58 = load double, ptr %3, align 8
  %59 = load double, ptr %4, align 8
  %60 = fadd double %58, %59
  %61 = fadd double %60, 1.000000e+00
  store double %61, ptr %3, align 8
  br label %56

62:                                               ; preds = %53
  %63 = load double, ptr %3, align 8
  %64 = load double, ptr %4, align 8
  %65 = fadd double %63, %64
  store double %65, ptr %3, align 8
  br label %56

66:                                               ; preds = %45
  %67 = load double, ptr %3, align 8
  %68 = fneg double %67
  ret double %68

69:                                               ; preds = %45
  %70 = load double, ptr %3, align 8
  ret double %70
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__roundx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @roundq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @roundq(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca fp128, align 16
  %4 = alloca fp128, align 16
  store fp128 %0, ptr %4, align 16
  %5 = load fp128, ptr %4, align 16
  %6 = bitcast fp128 %5 to i128
  %7 = lshr i128 %6, 112
  %8 = and i128 %7, 32767
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %9 = ptrtoint ptr %3 to i64
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %9, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %15, align 8
  %16 = ptrtoint ptr %2 to i64
  %17 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %16, i64 0)
  %18 = icmp uge i128 %8, 16495
  br i1 %18, label %22, label %24

19:                                               ; preds = %24
  %20 = lshr i128 %6, 127
  %21 = icmp ne i128 %20, 0
  br i1 %21, label %27, label %32

22:                                               ; preds = %1
  %23 = load fp128, ptr %4, align 16
  ret fp128 %23

24:                                               ; preds = %1
  br label %19

25:                                               ; preds = %32, %27
  %26 = icmp ult i128 %8, 16382
  br i1 %26, label %42, label %47

27:                                               ; preds = %19
  %28 = load fp128, ptr %4, align 16
  %29 = bitcast fp128 %28 to i128
  %30 = xor i128 %29, -170141183460469231731687303715884105728
  %31 = bitcast i128 %30 to fp128
  store fp128 %31, ptr %4, align 16
  br label %25

32:                                               ; preds = %19
  br label %25

33:                                               ; preds = %47
  %34 = load fp128, ptr %4, align 16
  %35 = call fp128 @__addtf3(fp128 %34, fp128 0xL0000000000000000406F000000000000)
  %36 = call fp128 @__subtf3(fp128 %35, fp128 0xL0000000000000000406F000000000000)
  %37 = load fp128, ptr %4, align 16
  %38 = call fp128 @__subtf3(fp128 %36, fp128 %37)
  store fp128 %38, ptr %3, align 16
  %39 = load fp128, ptr %3, align 16
  %40 = call i32 @__gttf2(fp128 %39, fp128 0xL00000000000000003FFE000000000000)
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %51, label %56

42:                                               ; preds = %25
  %43 = load fp128, ptr %4, align 16
  %44 = call fp128 @__addtf3(fp128 %43, fp128 0xL0000000000000000406F000000000000)
  call fastcc void @math.doNotOptimizeAway__anon_3777(fp128 %44)
  %45 = bitcast i128 %6 to fp128
  %46 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %45)
  ret fp128 %46

47:                                               ; preds = %25
  br label %33

48:                                               ; preds = %60, %51
  %49 = lshr i128 %6, 127
  %50 = icmp ne i128 %49, 0
  br i1 %50, label %70, label %75

51:                                               ; preds = %33
  %52 = load fp128, ptr %3, align 16
  %53 = load fp128, ptr %4, align 16
  %54 = call fp128 @__addtf3(fp128 %52, fp128 %53)
  %55 = call fp128 @__subtf3(fp128 %54, fp128 0xL00000000000000003FFF000000000000)
  store fp128 %55, ptr %3, align 16
  br label %48

56:                                               ; preds = %33
  %57 = load fp128, ptr %3, align 16
  %58 = call i32 @__letf2(fp128 %57, fp128 0xL0000000000000000BFFE000000000000)
  %59 = icmp sle i32 %58, 0
  br i1 %59, label %61, label %66

60:                                               ; preds = %66, %61
  br label %48

61:                                               ; preds = %56
  %62 = load fp128, ptr %3, align 16
  %63 = load fp128, ptr %4, align 16
  %64 = call fp128 @__addtf3(fp128 %62, fp128 %63)
  %65 = call fp128 @__addtf3(fp128 %64, fp128 0xL00000000000000003FFF000000000000)
  store fp128 %65, ptr %3, align 16
  br label %60

66:                                               ; preds = %56
  %67 = load fp128, ptr %3, align 16
  %68 = load fp128, ptr %4, align 16
  %69 = call fp128 @__addtf3(fp128 %67, fp128 %68)
  store fp128 %69, ptr %3, align 16
  br label %60

70:                                               ; preds = %48
  %71 = load fp128, ptr %3, align 16
  %72 = bitcast fp128 %71 to i128
  %73 = xor i128 %72, -170141183460469231731687303715884105728
  %74 = bitcast i128 %73 to fp128
  ret fp128 %74

75:                                               ; preds = %48
  %76 = load fp128, ptr %3, align 16
  ret fp128 %76
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @roundl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__roundx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__sinh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @sinf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @sinf(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca [6 x i64], align 8
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  store i32 %6, ptr %5, align 4
  %7 = load i32, ptr %5, align 4
  %8 = lshr i32 %7, 31
  %9 = icmp ne i32 %8, 0
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 2147483647
  store i32 %11, ptr %5, align 4
  %12 = load i32, ptr %5, align 4
  %13 = icmp ule i32 %12, 1061752794
  br i1 %13, label %17, label %20

14:                                               ; preds = %20
  %15 = load i32, ptr %5, align 4
  %16 = icmp ule i32 %15, 1081824209
  br i1 %16, label %37, label %40

17:                                               ; preds = %1
  %18 = load i32, ptr %5, align 4
  %19 = icmp ult i32 %18, 964689920
  br i1 %19, label %24, label %27

20:                                               ; preds = %1
  br label %14

21:                                               ; preds = %27
  %22 = fpext float %0 to double
  %23 = call fastcc float @compiler_rt.trig.__sindf(double %22)
  ret float %23

24:                                               ; preds = %17
  %25 = load i32, ptr %5, align 4
  %26 = icmp ult i32 %25, 8388608
  br i1 %26, label %30, label %32

27:                                               ; preds = %17
  br label %21

28:                                               ; preds = %32, %30
  %29 = phi float [ %31, %30 ], [ %33, %32 ]
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %29)
  ret float %0

30:                                               ; preds = %24
  %31 = fdiv float %0, 0x4770000000000000
  br label %28

32:                                               ; preds = %24
  %33 = fadd float %0, 0x4770000000000000
  br label %28

34:                                               ; preds = %40
  %35 = load i32, ptr %5, align 4
  %36 = icmp ule i32 %35, 1088565717
  br i1 %36, label %67, label %70

37:                                               ; preds = %14
  %38 = load i32, ptr %5, align 4
  %39 = icmp ule i32 %38, 1075235811
  br i1 %39, label %42, label %43

40:                                               ; preds = %14
  br label %34

41:                                               ; preds = %43
  br i1 %9, label %56, label %60

42:                                               ; preds = %37
  br i1 %9, label %44, label %49

43:                                               ; preds = %37
  br label %41

44:                                               ; preds = %42
  %45 = fpext float %0 to double
  %46 = fadd double %45, 0x3FF921FB54442D18
  %47 = call fastcc float @compiler_rt.trig.__cosdf(double %46)
  %48 = fneg float %47
  ret float %48

49:                                               ; preds = %42
  %50 = fpext float %0 to double
  %51 = fsub double %50, 0x3FF921FB54442D18
  %52 = call fastcc float @compiler_rt.trig.__cosdf(double %51)
  ret float %52

53:                                               ; preds = %60, %56
  %54 = phi double [ %59, %56 ], [ %63, %60 ]
  %55 = call fastcc float @compiler_rt.trig.__sindf(double %54)
  ret float %55

56:                                               ; preds = %41
  %57 = fpext float %0 to double
  %58 = fadd double %57, 0x400921FB54442D18
  %59 = fneg double %58
  br label %53

60:                                               ; preds = %41
  %61 = fpext float %0 to double
  %62 = fsub double %61, 0x400921FB54442D18
  %63 = fneg double %62
  br label %53

64:                                               ; preds = %70
  %65 = load i32, ptr %5, align 4
  %66 = icmp uge i32 %65, 2139095040
  br i1 %66, label %104, label %106

67:                                               ; preds = %34
  %68 = load i32, ptr %5, align 4
  %69 = icmp ule i32 %68, 1085271519
  br i1 %69, label %72, label %73

70:                                               ; preds = %34
  br label %64

71:                                               ; preds = %73
  br i1 %9, label %86, label %89

72:                                               ; preds = %67
  br i1 %9, label %74, label %78

73:                                               ; preds = %67
  br label %71

74:                                               ; preds = %72
  %75 = fpext float %0 to double
  %76 = fadd double %75, 0x4012D97C7F3321D2
  %77 = call fastcc float @compiler_rt.trig.__cosdf(double %76)
  ret float %77

78:                                               ; preds = %72
  %79 = fpext float %0 to double
  %80 = fsub double %79, 0x4012D97C7F3321D2
  %81 = call fastcc float @compiler_rt.trig.__cosdf(double %80)
  %82 = fneg float %81
  ret float %82

83:                                               ; preds = %89, %86
  %84 = phi double [ %88, %86 ], [ %91, %89 ]
  %85 = call fastcc float @compiler_rt.trig.__sindf(double %84)
  ret float %85

86:                                               ; preds = %71
  %87 = fpext float %0 to double
  %88 = fadd double %87, 0x401921FB54442D18
  br label %83

89:                                               ; preds = %71
  %90 = fpext float %0 to double
  %91 = fsub double %90, 0x401921FB54442D18
  br label %83

92:                                               ; preds = %106
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %93 = ptrtoint ptr %4 to i64
  %94 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %94, align 8
  %95 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %93, ptr %95, align 8
  %96 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 8, ptr %96, align 8
  %97 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %97, align 8
  %98 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %98, align 8
  %99 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %99, align 8
  %100 = ptrtoint ptr %3 to i64
  %101 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %100, i64 0)
  %102 = call fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %4)
  %103 = and i32 %102, 3
  switch i32 %103, label %109 [
    i32 0, label %113
    i32 1, label %116
    i32 2, label %119
  ]

104:                                              ; preds = %64
  %105 = fsub float %0, %0
  ret float %105

106:                                              ; preds = %64
  br label %92

107:                                              ; preds = %109, %119, %116, %113
  %108 = load float, ptr %2, align 4
  ret float %108

109:                                              ; preds = %92
  %110 = load double, ptr %4, align 8
  %111 = call fastcc float @compiler_rt.trig.__cosdf(double %110)
  %112 = fneg float %111
  store float %112, ptr %2, align 4
  br label %107

113:                                              ; preds = %92
  %114 = load double, ptr %4, align 8
  %115 = call fastcc float @compiler_rt.trig.__sindf(double %114)
  store float %115, ptr %2, align 4
  br label %107

116:                                              ; preds = %92
  %117 = load double, ptr %4, align 8
  %118 = call fastcc float @compiler_rt.trig.__cosdf(double %117)
  store float %118, ptr %2, align 4
  br label %107

119:                                              ; preds = %92
  %120 = load double, ptr %4, align 8
  %121 = fneg double %120
  %122 = call fastcc float @compiler_rt.trig.__sindf(double %121)
  store float %122, ptr %2, align 4
  br label %107
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @sin(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca [6 x i64], align 8
  %4 = alloca [2 x double], align 8
  %5 = alloca i64, align 8
  %6 = bitcast double %0 to i64
  %7 = lshr i64 %6, 32
  store i64 %7, ptr %5, align 8
  %8 = load i64, ptr %5, align 8
  %9 = and i64 %8, 2147483647
  store i64 %9, ptr %5, align 8
  %10 = load i64, ptr %5, align 8
  %11 = icmp ule i64 %10, 1072243195
  br i1 %11, label %15, label %18

12:                                               ; preds = %18
  %13 = load i64, ptr %5, align 8
  %14 = icmp uge i64 %13, 2146435072
  br i1 %14, label %43, label %45

15:                                               ; preds = %1
  %16 = load i64, ptr %5, align 8
  %17 = icmp ult i64 %16, 1045430272
  br i1 %17, label %21, label %24

18:                                               ; preds = %1
  br label %12

19:                                               ; preds = %24
  %20 = call fastcc double @compiler_rt.trig.__sin(double %0, double 0.000000e+00, i32 0)
  ret double %20

21:                                               ; preds = %15
  %22 = load i64, ptr %5, align 8
  %23 = icmp ult i64 %22, 1048576
  br i1 %23, label %27, label %29

24:                                               ; preds = %15
  br label %19

25:                                               ; preds = %29, %27
  %26 = phi double [ %28, %27 ], [ %30, %29 ]
  call fastcc void @math.doNotOptimizeAway__anon_3776(double %26)
  ret double %0

27:                                               ; preds = %21
  %28 = fdiv double %0, 0x4770000000000000
  br label %25

29:                                               ; preds = %21
  %30 = fadd double %0, 0x4770000000000000
  br label %25

31:                                               ; preds = %45
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %32 = ptrtoint ptr %4 to i64
  %33 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 0
  store i64 1296236545, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 1
  store i64 %32, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 2
  store i64 16, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 3
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 4
  store i64 0, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %3, i64 0, i64 5
  store i64 0, ptr %38, align 8
  %39 = ptrtoint ptr %3 to i64
  %40 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %39, i64 0)
  %41 = call fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %4)
  %42 = and i32 %41, 3
  switch i32 %42, label %48 [
    i32 0, label %55
    i32 1, label %61
    i32 2, label %67
  ]

43:                                               ; preds = %12
  %44 = fsub double %0, %0
  ret double %44

45:                                               ; preds = %12
  br label %31

46:                                               ; preds = %48, %67, %61, %55
  %47 = load double, ptr %2, align 8
  ret double %47

48:                                               ; preds = %31
  %49 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %50 = load double, ptr %49, align 8
  %51 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %52 = load double, ptr %51, align 8
  %53 = call fastcc double @compiler_rt.trig.__cos(double %50, double %52)
  %54 = fneg double %53
  store double %54, ptr %2, align 8
  br label %46

55:                                               ; preds = %31
  %56 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %57 = load double, ptr %56, align 8
  %58 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %59 = load double, ptr %58, align 8
  %60 = call fastcc double @compiler_rt.trig.__sin(double %57, double %59, i32 1)
  store double %60, ptr %2, align 8
  br label %46

61:                                               ; preds = %31
  %62 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %63 = load double, ptr %62, align 8
  %64 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %65 = load double, ptr %64, align 8
  %66 = call fastcc double @compiler_rt.trig.__cos(double %63, double %65)
  store double %66, ptr %2, align 8
  br label %46

67:                                               ; preds = %31
  %68 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %69 = load double, ptr %68, align 8
  %70 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %71 = load double, ptr %70, align 8
  %72 = call fastcc double @compiler_rt.trig.__sin(double %69, double %71, i32 1)
  %73 = fneg double %72
  store double %73, ptr %2, align 8
  br label %46
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__sinx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @sinq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @sinq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @sin(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @sinl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__sinx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__sincosh(half %0, ptr nonnull align 2 %1, ptr nonnull align 2 %2) #0 {
  %4 = alloca float, align 4
  %5 = alloca [6 x i64], align 8
  %6 = alloca float, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -86, i64 4, i1 false)
  %7 = ptrtoint ptr %6 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 4, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %5 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %16 = ptrtoint ptr %4 to i64
  %17 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %16, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 4, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %22, align 8
  %23 = ptrtoint ptr %5 to i64
  %24 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %23, i64 0)
  %25 = fpext half %0 to float
  call void @sincosf(float %25, ptr nonnull align 4 %6, ptr nonnull align 4 %4)
  %26 = load float, ptr %6, align 4
  %27 = fptrunc float %26 to half
  store half %27, ptr %1, align 2
  %28 = load float, ptr %4, align 4
  %29 = fptrunc float %28 to half
  store half %29, ptr %2, align 2
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @sincosf(float %0, ptr nonnull align 4 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca [6 x i64], align 8
  %5 = alloca double, align 8
  %6 = bitcast float %0 to i32
  %7 = lshr i32 %6, 31
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %6, 2147483647
  %10 = icmp ule i32 %9, 1061752794
  br i1 %10, label %13, label %15

11:                                               ; preds = %15
  %12 = icmp ule i32 %9, 1081824209
  br i1 %12, label %32, label %34

13:                                               ; preds = %3
  %14 = icmp ult i32 %9, 964689920
  br i1 %14, label %21, label %23

15:                                               ; preds = %3
  br label %11

16:                                               ; preds = %23
  %17 = fpext float %0 to double
  %18 = call fastcc float @compiler_rt.trig.__sindf(double %17)
  store float %18, ptr %1, align 4
  %19 = fpext float %0 to double
  %20 = call fastcc float @compiler_rt.trig.__cosdf(double %19)
  store float %20, ptr %2, align 4
  ret void

21:                                               ; preds = %13
  %22 = icmp ult i32 %9, 1048576
  br i1 %22, label %26, label %28

23:                                               ; preds = %13
  br label %16

24:                                               ; preds = %28, %26
  %25 = phi float [ %27, %26 ], [ %29, %28 ]
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %25)
  store float %0, ptr %1, align 4
  store float 1.000000e+00, ptr %2, align 4
  ret void

26:                                               ; preds = %21
  %27 = fdiv float %0, 0x4770000000000000
  br label %24

28:                                               ; preds = %21
  %29 = fadd float %0, 0x4770000000000000
  br label %24

30:                                               ; preds = %34
  %31 = icmp ule i32 %9, 1088565717
  br i1 %31, label %76, label %78

32:                                               ; preds = %11
  %33 = icmp ule i32 %9, 1075235811
  br i1 %33, label %36, label %37

34:                                               ; preds = %11
  br label %30

35:                                               ; preds = %37
  br i1 %8, label %58, label %61

36:                                               ; preds = %32
  br i1 %8, label %39, label %47

37:                                               ; preds = %32
  br label %35

38:                                               ; preds = %47, %39
  ret void

39:                                               ; preds = %36
  %40 = fpext float %0 to double
  %41 = fadd double %40, 0x3FF921FB54442D18
  %42 = call fastcc float @compiler_rt.trig.__cosdf(double %41)
  %43 = fneg float %42
  store float %43, ptr %1, align 4
  %44 = fpext float %0 to double
  %45 = fadd double %44, 0x3FF921FB54442D18
  %46 = call fastcc float @compiler_rt.trig.__sindf(double %45)
  store float %46, ptr %2, align 4
  br label %38

47:                                               ; preds = %36
  %48 = fpext float %0 to double
  %49 = fsub double 0x3FF921FB54442D18, %48
  %50 = call fastcc float @compiler_rt.trig.__cosdf(double %49)
  store float %50, ptr %1, align 4
  %51 = fpext float %0 to double
  %52 = fsub double 0x3FF921FB54442D18, %51
  %53 = call fastcc float @compiler_rt.trig.__sindf(double %52)
  store float %53, ptr %2, align 4
  br label %38

54:                                               ; preds = %61, %58
  %55 = phi double [ %60, %58 ], [ %63, %61 ]
  %56 = call fastcc float @compiler_rt.trig.__sindf(double %55)
  %57 = fneg float %56
  store float %57, ptr %1, align 4
  br i1 %8, label %68, label %71

58:                                               ; preds = %35
  %59 = fpext float %0 to double
  %60 = fadd double %59, 0x400921FB54442D18
  br label %54

61:                                               ; preds = %35
  %62 = fpext float %0 to double
  %63 = fsub double %62, 0x400921FB54442D18
  br label %54

64:                                               ; preds = %71, %68
  %65 = phi double [ %70, %68 ], [ %73, %71 ]
  %66 = call fastcc float @compiler_rt.trig.__cosdf(double %65)
  %67 = fneg float %66
  store float %67, ptr %2, align 4
  ret void

68:                                               ; preds = %54
  %69 = fpext float %0 to double
  %70 = fadd double %69, 0x400921FB54442D18
  br label %64

71:                                               ; preds = %54
  %72 = fpext float %0 to double
  %73 = fsub double %72, 0x400921FB54442D18
  br label %64

74:                                               ; preds = %78
  %75 = icmp uge i32 %9, 2139095040
  br i1 %75, label %133, label %135

76:                                               ; preds = %30
  %77 = icmp ule i32 %9, 1085271519
  br i1 %77, label %80, label %81

78:                                               ; preds = %30
  br label %74

79:                                               ; preds = %81
  br i1 %8, label %102, label %105

80:                                               ; preds = %76
  br i1 %8, label %83, label %91

81:                                               ; preds = %76
  br label %79

82:                                               ; preds = %91, %83
  ret void

83:                                               ; preds = %80
  %84 = fpext float %0 to double
  %85 = fadd double %84, 0x4012D97C7F3321D2
  %86 = call fastcc float @compiler_rt.trig.__cosdf(double %85)
  store float %86, ptr %1, align 4
  %87 = fpext float %0 to double
  %88 = fadd double %87, 0x4012D97C7F3321D2
  %89 = call fastcc float @compiler_rt.trig.__sindf(double %88)
  %90 = fneg float %89
  store float %90, ptr %2, align 4
  br label %82

91:                                               ; preds = %80
  %92 = fpext float %0 to double
  %93 = fsub double %92, 0x4012D97C7F3321D2
  %94 = call fastcc float @compiler_rt.trig.__cosdf(double %93)
  %95 = fneg float %94
  store float %95, ptr %1, align 4
  %96 = fpext float %0 to double
  %97 = fsub double %96, 0x4012D97C7F3321D2
  %98 = call fastcc float @compiler_rt.trig.__sindf(double %97)
  store float %98, ptr %2, align 4
  br label %82

99:                                               ; preds = %105, %102
  %100 = phi double [ %104, %102 ], [ %107, %105 ]
  %101 = call fastcc float @compiler_rt.trig.__sindf(double %100)
  store float %101, ptr %1, align 4
  br i1 %8, label %111, label %114

102:                                              ; preds = %79
  %103 = fpext float %0 to double
  %104 = fadd double %103, 0x401921FB54442D18
  br label %99

105:                                              ; preds = %79
  %106 = fpext float %0 to double
  %107 = fsub double %106, 0x401921FB54442D18
  br label %99

108:                                              ; preds = %114, %111
  %109 = phi double [ %113, %111 ], [ %116, %114 ]
  %110 = call fastcc float @compiler_rt.trig.__cosdf(double %109)
  store float %110, ptr %2, align 4
  ret void

111:                                              ; preds = %99
  %112 = fpext float %0 to double
  %113 = fadd double %112, 0x401921FB54442D18
  br label %108

114:                                              ; preds = %99
  %115 = fpext float %0 to double
  %116 = fsub double %115, 0x401921FB54442D18
  br label %108

117:                                              ; preds = %135
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 8, i1 false)
  %118 = ptrtoint ptr %5 to i64
  %119 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %119, align 8
  %120 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %118, ptr %120, align 8
  %121 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 8, ptr %121, align 8
  %122 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %122, align 8
  %123 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %123, align 8
  %124 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %124, align 8
  %125 = ptrtoint ptr %4 to i64
  %126 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %125, i64 0)
  %127 = call fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %5)
  %128 = load double, ptr %5, align 8
  %129 = call fastcc float @compiler_rt.trig.__sindf(double %128)
  %130 = load double, ptr %5, align 8
  %131 = call fastcc float @compiler_rt.trig.__cosdf(double %130)
  %132 = and i32 %127, 3
  switch i32 %132, label %137 [
    i32 0, label %139
    i32 1, label %140
    i32 2, label %142
  ]

133:                                              ; preds = %74
  %134 = fsub float %0, %0
  store float %134, ptr %1, align 4
  store float %134, ptr %2, align 4
  ret void

135:                                              ; preds = %74
  br label %117

136:                                              ; preds = %137, %142, %140, %139
  ret void

137:                                              ; preds = %117
  %138 = fneg float %131
  store float %138, ptr %1, align 4
  store float %129, ptr %2, align 4
  br label %136

139:                                              ; preds = %117
  store float %129, ptr %1, align 4
  store float %131, ptr %2, align 4
  br label %136

140:                                              ; preds = %117
  store float %131, ptr %1, align 4
  %141 = fneg float %129
  store float %141, ptr %2, align 4
  br label %136

142:                                              ; preds = %117
  %143 = fneg float %129
  store float %143, ptr %1, align 4
  %144 = fneg float %131
  store float %144, ptr %2, align 4
  br label %136
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @sincos(double %0, ptr nonnull align 8 %1, ptr nonnull align 8 %2) #0 {
  %4 = alloca [6 x i64], align 8
  %5 = alloca [2 x double], align 8
  %6 = bitcast double %0 to i64
  %7 = lshr i64 %6, 32
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2147483647
  %10 = icmp ule i32 %9, 1072243195
  br i1 %10, label %13, label %15

11:                                               ; preds = %15
  %12 = icmp uge i32 %9, 2146435072
  br i1 %12, label %50, label %52

13:                                               ; preds = %3
  %14 = icmp ult i32 %9, 1044816030
  br i1 %14, label %19, label %21

15:                                               ; preds = %3
  br label %11

16:                                               ; preds = %21
  %17 = call fastcc double @compiler_rt.trig.__sin(double %0, double 0.000000e+00, i32 0)
  store double %17, ptr %1, align 8
  %18 = call fastcc double @compiler_rt.trig.__cos(double %0, double 0.000000e+00)
  store double %18, ptr %2, align 8
  ret void

19:                                               ; preds = %13
  %20 = icmp ult i32 %9, 1048576
  br i1 %20, label %24, label %26

21:                                               ; preds = %13
  br label %16

22:                                               ; preds = %26, %24
  %23 = phi double [ %25, %24 ], [ %27, %26 ]
  call fastcc void @math.doNotOptimizeAway__anon_3776(double %23)
  store double %0, ptr %1, align 8
  store double 1.000000e+00, ptr %2, align 8
  ret void

24:                                               ; preds = %19
  %25 = fdiv double %0, 0x4770000000000000
  br label %22

26:                                               ; preds = %19
  %27 = fadd double %0, 0x4770000000000000
  br label %22

28:                                               ; preds = %52
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 16, i1 false)
  %29 = ptrtoint ptr %5 to i64
  %30 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 0
  store i64 1296236545, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 1
  store i64 %29, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 2
  store i64 16, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 3
  store i64 0, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 4
  store i64 0, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 5
  store i64 0, ptr %35, align 8
  %36 = ptrtoint ptr %4 to i64
  %37 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %36, i64 0)
  %38 = call fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %5)
  %39 = getelementptr inbounds [2 x double], ptr %5, i64 0, i64 0
  %40 = load double, ptr %39, align 8
  %41 = getelementptr inbounds [2 x double], ptr %5, i64 0, i64 1
  %42 = load double, ptr %41, align 8
  %43 = call fastcc double @compiler_rt.trig.__sin(double %40, double %42, i32 1)
  %44 = getelementptr inbounds [2 x double], ptr %5, i64 0, i64 0
  %45 = load double, ptr %44, align 8
  %46 = getelementptr inbounds [2 x double], ptr %5, i64 0, i64 1
  %47 = load double, ptr %46, align 8
  %48 = call fastcc double @compiler_rt.trig.__cos(double %45, double %47)
  %49 = and i32 %38, 3
  switch i32 %49, label %54 [
    i32 0, label %56
    i32 1, label %57
    i32 2, label %59
  ]

50:                                               ; preds = %11
  %51 = fsub double %0, %0
  store double %51, ptr %1, align 8
  store double %51, ptr %2, align 8
  ret void

52:                                               ; preds = %11
  br label %28

53:                                               ; preds = %54, %59, %57, %56
  ret void

54:                                               ; preds = %28
  %55 = fneg double %48
  store double %55, ptr %1, align 8
  store double %43, ptr %2, align 8
  br label %53

56:                                               ; preds = %28
  store double %43, ptr %1, align 8
  store double %48, ptr %2, align 8
  br label %53

57:                                               ; preds = %28
  store double %48, ptr %1, align 8
  %58 = fneg double %43
  store double %58, ptr %2, align 8
  br label %53

59:                                               ; preds = %28
  %60 = fneg double %43
  store double %60, ptr %1, align 8
  %61 = fneg double %48
  store double %61, ptr %2, align 8
  br label %53
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__sincosx(x86_fp80 %0, ptr nonnull align 16 %1, ptr nonnull align 16 %2) #0 {
  %4 = alloca fp128, align 16
  %5 = alloca [6 x i64], align 8
  %6 = alloca fp128, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %6, i8 -86, i64 16, i1 false)
  %7 = ptrtoint ptr %6 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 16, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %5 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %16 = ptrtoint ptr %4 to i64
  %17 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %16, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 16, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %22, align 8
  %23 = ptrtoint ptr %5 to i64
  %24 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %23, i64 0)
  %25 = call fp128 @__extendxftf2(x86_fp80 %0)
  call void @sincosq(fp128 %25, ptr nonnull align 16 %6, ptr nonnull align 16 %4)
  %26 = load fp128, ptr %6, align 16
  %27 = call x86_fp80 @__trunctfxf2(fp128 %26)
  store x86_fp80 %27, ptr %1, align 16
  %28 = load fp128, ptr %4, align 16
  %29 = call x86_fp80 @__trunctfxf2(fp128 %28)
  store x86_fp80 %29, ptr %2, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @sincosq(fp128 %0, ptr nonnull align 16 %1, ptr nonnull align 16 %2) #0 {
  %4 = alloca double, align 8
  %5 = alloca [6 x i64], align 8
  %6 = alloca double, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 8, i1 false)
  %7 = ptrtoint ptr %6 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %5 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %16 = ptrtoint ptr %4 to i64
  %17 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %16, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 8, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %22, align 8
  %23 = ptrtoint ptr %5 to i64
  %24 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %23, i64 0)
  %25 = call double @__trunctfdf2(fp128 %0)
  call void @sincos(double %25, ptr nonnull align 8 %6, ptr nonnull align 8 %4)
  %26 = load double, ptr %6, align 8
  %27 = call fp128 @__extenddftf2(double %26)
  store fp128 %27, ptr %1, align 16
  %28 = load double, ptr %4, align 8
  %29 = call fp128 @__extenddftf2(double %28)
  store fp128 %29, ptr %2, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @sincosl(x86_fp80 %0, ptr nonnull align 16 %1, ptr nonnull align 16 %2) #0 {
  call void @__sincosx(x86_fp80 %0, ptr nonnull align 16 %1, ptr nonnull align 16 %2)
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__sqrth(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @sqrtf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @sqrtf(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca float, align 4
  %9 = alloca i32, align 4
  %10 = bitcast float %0 to i32
  store i32 %10, ptr %9, align 4
  %11 = load i32, ptr %9, align 4
  %12 = and i32 %11, 2139095040
  %13 = icmp eq i32 %12, 2139095040
  br i1 %13, label %17, label %20

14:                                               ; preds = %20
  %15 = load i32, ptr %9, align 4
  %16 = icmp sle i32 %15, 0
  br i1 %16, label %26, label %30

17:                                               ; preds = %1
  %18 = fmul float %0, %0
  %19 = fadd float %18, %0
  ret float %19

20:                                               ; preds = %1
  br label %14

21:                                               ; preds = %30, %36
  %22 = load i32, ptr %9, align 4
  %23 = ashr i32 %22, 23
  store i32 %23, ptr %7, align 4
  %24 = load i32, ptr %7, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %44, label %45

26:                                               ; preds = %14
  %27 = load i32, ptr %9, align 4
  %28 = and i32 %27, 2147483647
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %35

30:                                               ; preds = %14
  br label %21

31:                                               ; preds = %35
  %32 = load i32, ptr %9, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %37, label %39

34:                                               ; preds = %26
  ret float %0

35:                                               ; preds = %26
  br label %31

36:                                               ; preds = %39
  br label %21

37:                                               ; preds = %31
  store float 0x7FF0000020000000, ptr %8, align 4
  %38 = load float, ptr %8, align 4
  ret float %38

39:                                               ; preds = %31
  br label %36

40:                                               ; preds = %45, %72
  %41 = load i32, ptr %7, align 4
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %41, i32 127)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %74, label %75

44:                                               ; preds = %21
  store i32 0, ptr %6, align 4
  br label %51

45:                                               ; preds = %21
  br label %40

46:                                               ; preds = %62
  %47 = load i32, ptr %7, align 4
  %48 = load i32, ptr %6, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %48, i32 1)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %66, label %67

51:                                               ; preds = %55, %44
  %52 = load i32, ptr %9, align 4
  %53 = and i32 %52, 8388608
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %56, label %62

55:                                               ; preds = %64
  br label %51

56:                                               ; preds = %51
  %57 = load i32, ptr %9, align 4
  %58 = shl i32 %57, 1
  store i32 %58, ptr %9, align 4
  %59 = load i32, ptr %6, align 4
  %60 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %59, i32 1)
  %61 = extractvalue { i32, i1 } %60, 1
  br i1 %61, label %63, label %64

62:                                               ; preds = %51
  br label %46

63:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

64:                                               ; preds = %56
  %65 = extractvalue { i32, i1 } %60, 0
  store i32 %65, ptr %6, align 4
  br label %55

66:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %46
  %68 = extractvalue { i32, i1 } %49, 0
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %47, i32 %68)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %71, label %72

71:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %67
  %73 = extractvalue { i32, i1 } %69, 0
  store i32 %73, ptr %7, align 4
  br label %40

74:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %40
  %76 = extractvalue { i32, i1 } %42, 0
  store i32 %76, ptr %7, align 4
  %77 = load i32, ptr %9, align 4
  %78 = and i32 %77, 8388607
  %79 = or i32 %78, 8388608
  store i32 %79, ptr %9, align 4
  %80 = load i32, ptr %7, align 4
  %81 = and i32 %80, 1
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %90, label %95

83:                                               ; preds = %95, %97
  %84 = load i32, ptr %7, align 4
  %85 = ashr i32 %84, 1
  store i32 %85, ptr %7, align 4
  %86 = load i32, ptr %9, align 4
  %87 = load i32, ptr %9, align 4
  %88 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %86, i32 %87)
  %89 = extractvalue { i32, i1 } %88, 1
  br i1 %89, label %99, label %100

90:                                               ; preds = %75
  %91 = load i32, ptr %9, align 4
  %92 = load i32, ptr %9, align 4
  %93 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %91, i32 %92)
  %94 = extractvalue { i32, i1 } %93, 1
  br i1 %94, label %96, label %97

95:                                               ; preds = %75
  br label %83

96:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %90
  %98 = extractvalue { i32, i1 } %93, 0
  store i32 %98, ptr %9, align 4
  br label %83

99:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %83
  %101 = extractvalue { i32, i1 } %88, 0
  store i32 %101, ptr %9, align 4
  store i32 0, ptr %5, align 4
  store i32 0, ptr %4, align 4
  store i32 16777216, ptr %3, align 4
  br label %105

102:                                              ; preds = %114
  %103 = load i32, ptr %9, align 4
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %156, label %159

105:                                              ; preds = %108, %100
  %106 = load i32, ptr %3, align 4
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %109, label %114

108:                                              ; preds = %147
  br label %105

109:                                              ; preds = %105
  %110 = load i32, ptr %4, align 4
  %111 = load i32, ptr %3, align 4
  %112 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %110, i32 %111)
  %113 = extractvalue { i32, i1 } %112, 1
  br i1 %113, label %115, label %116

114:                                              ; preds = %105
  br label %102

115:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %109
  %117 = extractvalue { i32, i1 } %112, 0
  %118 = load i32, ptr %9, align 4
  %119 = icmp sle i32 %117, %118
  br i1 %119, label %125, label %129

120:                                              ; preds = %129, %144
  %121 = load i32, ptr %9, align 4
  %122 = load i32, ptr %9, align 4
  %123 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %121, i32 %122)
  %124 = extractvalue { i32, i1 } %123, 1
  br i1 %124, label %146, label %147

125:                                              ; preds = %116
  %126 = load i32, ptr %3, align 4
  %127 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %117, i32 %126)
  %128 = extractvalue { i32, i1 } %127, 1
  br i1 %128, label %130, label %131

129:                                              ; preds = %116
  br label %120

130:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

131:                                              ; preds = %125
  %132 = extractvalue { i32, i1 } %127, 0
  store i32 %132, ptr %4, align 4
  %133 = load i32, ptr %9, align 4
  %134 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %133, i32 %117)
  %135 = extractvalue { i32, i1 } %134, 1
  br i1 %135, label %136, label %137

136:                                              ; preds = %131
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %131
  %138 = extractvalue { i32, i1 } %134, 0
  store i32 %138, ptr %9, align 4
  %139 = load i32, ptr %5, align 4
  %140 = load i32, ptr %3, align 4
  %141 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %139, i32 %140)
  %142 = extractvalue { i32, i1 } %141, 1
  br i1 %142, label %143, label %144

143:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

144:                                              ; preds = %137
  %145 = extractvalue { i32, i1 } %141, 0
  store i32 %145, ptr %5, align 4
  br label %120

146:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

147:                                              ; preds = %120
  %148 = extractvalue { i32, i1 } %123, 0
  store i32 %148, ptr %9, align 4
  %149 = load i32, ptr %3, align 4
  %150 = ashr i32 %149, 1
  store i32 %150, ptr %3, align 4
  br label %108

151:                                              ; preds = %159, %160
  %152 = load i32, ptr %5, align 4
  %153 = ashr i32 %152, 1
  %154 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %153, i32 1056964608)
  %155 = extractvalue { i32, i1 } %154, 1
  br i1 %155, label %186, label %187

156:                                              ; preds = %102
  store float 1.000000e+00, ptr %2, align 4
  %157 = load float, ptr %2, align 4
  %158 = fcmp oge float %157, 1.000000e+00
  br i1 %158, label %161, label %164

159:                                              ; preds = %102
  br label %151

160:                                              ; preds = %164, %165
  br label %151

161:                                              ; preds = %156
  store float 1.000000e+00, ptr %2, align 4
  %162 = load float, ptr %2, align 4
  %163 = fcmp ogt float %162, 1.000000e+00
  br i1 %163, label %166, label %170

164:                                              ; preds = %156
  br label %160

165:                                              ; preds = %177, %175
  br label %160

166:                                              ; preds = %161
  %167 = load i32, ptr %5, align 4
  %168 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %167, i32 2)
  %169 = extractvalue { i32, i1 } %168, 1
  br i1 %169, label %174, label %175

170:                                              ; preds = %161
  %171 = load i32, ptr %5, align 4
  %172 = and i32 %171, 1
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %178, label %182

174:                                              ; preds = %166
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

175:                                              ; preds = %166
  %176 = extractvalue { i32, i1 } %168, 0
  store i32 %176, ptr %5, align 4
  br label %165

177:                                              ; preds = %182, %184
  br label %165

178:                                              ; preds = %170
  %179 = load i32, ptr %5, align 4
  %180 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %179, i32 1)
  %181 = extractvalue { i32, i1 } %180, 1
  br i1 %181, label %183, label %184

182:                                              ; preds = %170
  br label %177

183:                                              ; preds = %178
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

184:                                              ; preds = %178
  %185 = extractvalue { i32, i1 } %180, 0
  store i32 %185, ptr %5, align 4
  br label %177

186:                                              ; preds = %151
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

187:                                              ; preds = %151
  %188 = extractvalue { i32, i1 } %154, 0
  store i32 %188, ptr %9, align 4
  %189 = load i32, ptr %9, align 4
  %190 = load i32, ptr %7, align 4
  %191 = shl i32 %190, 23
  %192 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %189, i32 %191)
  %193 = extractvalue { i32, i1 } %192, 1
  br i1 %193, label %194, label %195

194:                                              ; preds = %187
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

195:                                              ; preds = %187
  %196 = extractvalue { i32, i1 } %192, 0
  store i32 %196, ptr %9, align 4
  %197 = load i32, ptr %9, align 4
  %198 = bitcast i32 %197 to float
  ret float %198
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @sqrt(double %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca double, align 8
  %4 = alloca i32, align 4
  %5 = alloca [6 x i64], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = bitcast double %0 to i64
  %18 = lshr i64 %17, 32
  %19 = sub i64 4294967295, %18
  %20 = icmp ule i64 %19, 4294967295
  br i1 %20, label %26, label %27

21:                                               ; preds = %26
  %22 = trunc i64 %18 to i32
  store i32 %22, ptr %16, align 4
  %23 = and i64 %17, 4294967295
  %24 = sub i64 4294967295, %23
  %25 = icmp ule i64 %24, 4294967295
  br i1 %25, label %33, label %34

26:                                               ; preds = %1
  br label %21

27:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

28:                                               ; preds = %33
  %29 = trunc i64 %23 to i32
  store i32 %29, ptr %15, align 4
  %30 = load i32, ptr %16, align 4
  %31 = and i32 %30, 2146435072
  %32 = icmp eq i32 %31, 2146435072
  br i1 %32, label %37, label %40

33:                                               ; preds = %21
  br label %28

34:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

35:                                               ; preds = %40
  %36 = fcmp oeq double %0, 0.000000e+00
  br i1 %36, label %45, label %46

37:                                               ; preds = %28
  %38 = fmul double %0, %0
  %39 = fadd double %38, %0
  ret double %39

40:                                               ; preds = %28
  br label %35

41:                                               ; preds = %46
  %42 = load i32, ptr %16, align 4
  %43 = and i32 %42, -2147483648
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %52, label %54

45:                                               ; preds = %35
  ret double %0

46:                                               ; preds = %35
  br label %41

47:                                               ; preds = %54
  %48 = load i32, ptr %16, align 4
  %49 = lshr i32 %48, 20
  %50 = sub i32 2147483647, %49
  %51 = icmp ule i32 %50, 2147483647
  br i1 %51, label %58, label %59

52:                                               ; preds = %41
  store double 0x7FF0000000000001, ptr %14, align 8
  %53 = load double, ptr %14, align 8
  ret double %53

54:                                               ; preds = %41
  br label %47

55:                                               ; preds = %58
  store i32 %49, ptr %13, align 4
  %56 = load i32, ptr %13, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %64, label %65

58:                                               ; preds = %47
  br label %55

59:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

60:                                               ; preds = %65, %139
  %61 = load i32, ptr %13, align 4
  %62 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %61, i32 1023)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %145, label %146

64:                                               ; preds = %55
  br label %67

65:                                               ; preds = %55
  br label %60

66:                                               ; preds = %75
  store i32 0, ptr %12, align 4
  br label %90

67:                                               ; preds = %70, %64
  %68 = load i32, ptr %16, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %71, label %75

70:                                               ; preds = %77
  br label %67

71:                                               ; preds = %67
  %72 = load i32, ptr %13, align 4
  %73 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %72, i32 21)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %76, label %77

75:                                               ; preds = %67
  br label %66

76:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %71
  %78 = extractvalue { i32, i1 } %73, 0
  store i32 %78, ptr %13, align 4
  %79 = load i32, ptr %16, align 4
  %80 = load i32, ptr %15, align 4
  %81 = lshr i32 %80, 11
  %82 = or i32 %79, %81
  store i32 %82, ptr %16, align 4
  %83 = load i32, ptr %15, align 4
  %84 = shl i32 %83, 21
  store i32 %84, ptr %15, align 4
  br label %70

85:                                               ; preds = %101
  %86 = load i32, ptr %13, align 4
  %87 = load i32, ptr %12, align 4
  %88 = sub i32 2147483647, %87
  %89 = icmp ule i32 %88, 2147483647
  br i1 %89, label %108, label %109

90:                                               ; preds = %94, %66
  %91 = load i32, ptr %16, align 4
  %92 = and i32 %91, 1048576
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %95, label %101

94:                                               ; preds = %103
  br label %90

95:                                               ; preds = %90
  %96 = load i32, ptr %16, align 4
  %97 = shl i32 %96, 1
  store i32 %97, ptr %16, align 4
  %98 = load i32, ptr %12, align 4
  %99 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %98, i32 1)
  %100 = extractvalue { i32, i1 } %99, 1
  br i1 %100, label %102, label %103

101:                                              ; preds = %90
  br label %85

102:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %95
  %104 = extractvalue { i32, i1 } %99, 0
  store i32 %104, ptr %12, align 4
  br label %94

105:                                              ; preds = %108
  %106 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %87, i32 1)
  %107 = extractvalue { i32, i1 } %106, 1
  br i1 %107, label %110, label %111

108:                                              ; preds = %85
  br label %105

109:                                              ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

110:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

111:                                              ; preds = %105
  %112 = extractvalue { i32, i1 } %106, 0
  %113 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %86, i32 %112)
  %114 = extractvalue { i32, i1 } %113, 1
  br i1 %114, label %115, label %116

115:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %111
  %117 = extractvalue { i32, i1 } %113, 0
  store i32 %117, ptr %13, align 4
  %118 = load i32, ptr %16, align 4
  %119 = load i32, ptr %15, align 4
  %120 = load i32, ptr %12, align 4
  %121 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 32, i32 %120)
  %122 = extractvalue { i32, i1 } %121, 1
  br i1 %122, label %123, label %124

123:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

124:                                              ; preds = %116
  %125 = extractvalue { i32, i1 } %121, 0
  %126 = sub i32 31, %125
  %127 = icmp ule i32 %126, 31
  br i1 %127, label %137, label %138

128:                                              ; preds = %137
  %129 = trunc i32 %125 to i5
  %130 = zext i5 %129 to i32
  %131 = lshr i32 %119, %130
  %132 = or i32 %118, %131
  store i32 %132, ptr %16, align 4
  %133 = load i32, ptr %15, align 4
  %134 = load i32, ptr %12, align 4
  %135 = sub i32 31, %134
  %136 = icmp ule i32 %135, 31
  br i1 %136, label %143, label %144

137:                                              ; preds = %124
  br label %128

138:                                              ; preds = %124
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

139:                                              ; preds = %143
  %140 = trunc i32 %134 to i5
  %141 = zext i5 %140 to i32
  %142 = shl i32 %133, %141
  store i32 %142, ptr %15, align 4
  br label %60

143:                                              ; preds = %128
  br label %139

144:                                              ; preds = %128
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

145:                                              ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

146:                                              ; preds = %60
  %147 = extractvalue { i32, i1 } %62, 0
  store i32 %147, ptr %13, align 4
  %148 = load i32, ptr %16, align 4
  %149 = and i32 %148, 1048575
  %150 = or i32 %149, 1048576
  store i32 %150, ptr %16, align 4
  %151 = load i32, ptr %13, align 4
  %152 = and i32 %151, 1
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %163, label %170

154:                                              ; preds = %170, %177
  %155 = load i32, ptr %13, align 4
  %156 = ashr i32 %155, 1
  store i32 %156, ptr %13, align 4
  %157 = load i32, ptr %16, align 4
  %158 = load i32, ptr %16, align 4
  %159 = load i32, ptr %15, align 4
  %160 = lshr i32 %159, 31
  %161 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %158, i32 %160)
  %162 = extractvalue { i32, i1 } %161, 1
  br i1 %162, label %182, label %183

163:                                              ; preds = %146
  %164 = load i32, ptr %16, align 4
  %165 = load i32, ptr %16, align 4
  %166 = load i32, ptr %15, align 4
  %167 = lshr i32 %166, 31
  %168 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %165, i32 %167)
  %169 = extractvalue { i32, i1 } %168, 1
  br i1 %169, label %171, label %172

170:                                              ; preds = %146
  br label %154

171:                                              ; preds = %163
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %163
  %173 = extractvalue { i32, i1 } %168, 0
  %174 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %164, i32 %173)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

176:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %172
  %178 = extractvalue { i32, i1 } %174, 0
  store i32 %178, ptr %16, align 4
  %179 = load i32, ptr %15, align 4
  %180 = load i32, ptr %15, align 4
  %181 = add i32 %179, %180
  store i32 %181, ptr %15, align 4
  br label %154

182:                                              ; preds = %154
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

183:                                              ; preds = %154
  %184 = extractvalue { i32, i1 } %161, 0
  %185 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %157, i32 %184)
  %186 = extractvalue { i32, i1 } %185, 1
  br i1 %186, label %187, label %188

187:                                              ; preds = %183
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

188:                                              ; preds = %183
  %189 = extractvalue { i32, i1 } %185, 0
  store i32 %189, ptr %16, align 4
  %190 = load i32, ptr %15, align 4
  %191 = load i32, ptr %15, align 4
  %192 = add i32 %190, %191
  store i32 %192, ptr %15, align 4
  store i32 0, ptr %11, align 4
  store i32 0, ptr %10, align 4
  store i32 0, ptr %9, align 4
  store i32 0, ptr %8, align 4
  store i32 2097152, ptr %7, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -86, i64 4, i1 false)
  %193 = ptrtoint ptr %6 to i64
  %194 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %194, align 8
  %195 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %193, ptr %195, align 8
  %196 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 4, ptr %196, align 8
  %197 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %197, align 8
  %198 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %198, align 8
  %199 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %199, align 8
  %200 = ptrtoint ptr %5 to i64
  %201 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %200, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %202 = ptrtoint ptr %4 to i64
  %203 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %203, align 8
  %204 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %202, ptr %204, align 8
  %205 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 4, ptr %205, align 8
  %206 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %206, align 8
  %207 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %207, align 8
  %208 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %208, align 8
  %209 = ptrtoint ptr %5 to i64
  %210 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %209, i64 0)
  br label %212

211:                                              ; preds = %223
  store i32 -2147483648, ptr %7, align 4
  br label %264

212:                                              ; preds = %215, %188
  %213 = load i32, ptr %7, align 4
  %214 = icmp ne i32 %213, 0
  br i1 %214, label %216, label %223

215:                                              ; preds = %224
  br label %212

216:                                              ; preds = %212
  %217 = load i32, ptr %9, align 4
  %218 = load i32, ptr %7, align 4
  %219 = add i32 %217, %218
  store i32 %219, ptr %6, align 4
  %220 = load i32, ptr %6, align 4
  %221 = load i32, ptr %16, align 4
  %222 = icmp ule i32 %220, %221
  br i1 %222, label %236, label %241

223:                                              ; preds = %212
  br label %211

224:                                              ; preds = %241, %257
  %225 = load i32, ptr %16, align 4
  %226 = load i32, ptr %16, align 4
  %227 = add i32 %225, %226
  %228 = load i32, ptr %15, align 4
  %229 = lshr i32 %228, 31
  %230 = add i32 %227, %229
  store i32 %230, ptr %16, align 4
  %231 = load i32, ptr %15, align 4
  %232 = load i32, ptr %15, align 4
  %233 = add i32 %231, %232
  store i32 %233, ptr %15, align 4
  %234 = load i32, ptr %7, align 4
  %235 = lshr i32 %234, 1
  store i32 %235, ptr %7, align 4
  br label %215

236:                                              ; preds = %216
  %237 = load i32, ptr %6, align 4
  %238 = load i32, ptr %7, align 4
  %239 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %237, i32 %238)
  %240 = extractvalue { i32, i1 } %239, 1
  br i1 %240, label %242, label %243

241:                                              ; preds = %216
  br label %224

242:                                              ; preds = %236
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

243:                                              ; preds = %236
  %244 = extractvalue { i32, i1 } %239, 0
  store i32 %244, ptr %9, align 4
  %245 = load i32, ptr %16, align 4
  %246 = load i32, ptr %6, align 4
  %247 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %245, i32 %246)
  %248 = extractvalue { i32, i1 } %247, 1
  br i1 %248, label %249, label %250

249:                                              ; preds = %243
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

250:                                              ; preds = %243
  %251 = extractvalue { i32, i1 } %247, 0
  store i32 %251, ptr %16, align 4
  %252 = load i32, ptr %11, align 4
  %253 = load i32, ptr %7, align 4
  %254 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %252, i32 %253)
  %255 = extractvalue { i32, i1 } %254, 1
  br i1 %255, label %256, label %257

256:                                              ; preds = %250
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

257:                                              ; preds = %250
  %258 = extractvalue { i32, i1 } %254, 0
  store i32 %258, ptr %11, align 4
  br label %224

259:                                              ; preds = %276
  %260 = load i32, ptr %16, align 4
  %261 = load i32, ptr %15, align 4
  %262 = or i32 %260, %261
  %263 = icmp ne i32 %262, 0
  br i1 %263, label %361, label %364

264:                                              ; preds = %267, %211
  %265 = load i32, ptr %7, align 4
  %266 = icmp ne i32 %265, 0
  br i1 %266, label %268, label %276

267:                                              ; preds = %277
  br label %264

268:                                              ; preds = %264
  %269 = load i32, ptr %8, align 4
  %270 = load i32, ptr %7, align 4
  %271 = add i32 %269, %270
  store i32 %271, ptr %4, align 4
  %272 = load i32, ptr %9, align 4
  store i32 %272, ptr %6, align 4
  %273 = load i32, ptr %6, align 4
  %274 = load i32, ptr %16, align 4
  %275 = icmp ult i32 %273, %274
  br i1 %275, label %291, label %292

276:                                              ; preds = %264
  br label %259

277:                                              ; preds = %310, %354
  %278 = load i32, ptr %16, align 4
  %279 = load i32, ptr %16, align 4
  %280 = add i32 %278, %279
  %281 = load i32, ptr %15, align 4
  %282 = lshr i32 %281, 31
  %283 = add i32 %280, %282
  store i32 %283, ptr %16, align 4
  %284 = load i32, ptr %15, align 4
  %285 = load i32, ptr %15, align 4
  %286 = add i32 %284, %285
  store i32 %286, ptr %15, align 4
  %287 = load i32, ptr %7, align 4
  %288 = lshr i32 %287, 1
  store i32 %288, ptr %7, align 4
  br label %267

289:                                              ; preds = %296, %291
  %290 = phi i1 [ true, %291 ], [ %297, %296 ]
  br i1 %290, label %303, label %310

291:                                              ; preds = %268
  br label %289

292:                                              ; preds = %268
  %293 = load i32, ptr %6, align 4
  %294 = load i32, ptr %16, align 4
  %295 = icmp eq i32 %293, %294
  br i1 %295, label %298, label %302

296:                                              ; preds = %302, %298
  %297 = phi i1 [ %301, %298 ], [ false, %302 ]
  br label %289

298:                                              ; preds = %292
  %299 = load i32, ptr %4, align 4
  %300 = load i32, ptr %15, align 4
  %301 = icmp ule i32 %299, %300
  br label %296

302:                                              ; preds = %292
  br label %296

303:                                              ; preds = %289
  %304 = load i32, ptr %4, align 4
  %305 = load i32, ptr %7, align 4
  %306 = add i32 %304, %305
  store i32 %306, ptr %8, align 4
  %307 = load i32, ptr %4, align 4
  %308 = and i32 %307, -2147483648
  %309 = icmp eq i32 %308, -2147483648
  br i1 %309, label %318, label %322

310:                                              ; preds = %289
  br label %277

311:                                              ; preds = %327, %329
  %312 = load i32, ptr %16, align 4
  %313 = load i32, ptr %6, align 4
  %314 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %312, i32 %313)
  %315 = extractvalue { i32, i1 } %314, 1
  br i1 %315, label %331, label %332

316:                                              ; preds = %322, %318
  %317 = phi i1 [ %321, %318 ], [ false, %322 ]
  br i1 %317, label %323, label %327

318:                                              ; preds = %303
  %319 = load i32, ptr %8, align 4
  %320 = and i32 %319, -2147483648
  %321 = icmp eq i32 %320, 0
  br label %316

322:                                              ; preds = %303
  br label %316

323:                                              ; preds = %316
  %324 = load i32, ptr %9, align 4
  %325 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %324, i32 1)
  %326 = extractvalue { i32, i1 } %325, 1
  br i1 %326, label %328, label %329

327:                                              ; preds = %316
  br label %311

328:                                              ; preds = %323
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

329:                                              ; preds = %323
  %330 = extractvalue { i32, i1 } %325, 0
  store i32 %330, ptr %9, align 4
  br label %311

331:                                              ; preds = %311
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

332:                                              ; preds = %311
  %333 = extractvalue { i32, i1 } %314, 0
  store i32 %333, ptr %16, align 4
  %334 = load i32, ptr %15, align 4
  %335 = load i32, ptr %4, align 4
  %336 = icmp ult i32 %334, %335
  br i1 %336, label %345, label %349

337:                                              ; preds = %349, %351
  %338 = load i32, ptr %15, align 4
  %339 = load i32, ptr %4, align 4
  %340 = sub i32 %338, %339
  store i32 %340, ptr %15, align 4
  %341 = load i32, ptr %10, align 4
  %342 = load i32, ptr %7, align 4
  %343 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %341, i32 %342)
  %344 = extractvalue { i32, i1 } %343, 1
  br i1 %344, label %353, label %354

345:                                              ; preds = %332
  %346 = load i32, ptr %16, align 4
  %347 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %346, i32 1)
  %348 = extractvalue { i32, i1 } %347, 1
  br i1 %348, label %350, label %351

349:                                              ; preds = %332
  br label %337

350:                                              ; preds = %345
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

351:                                              ; preds = %345
  %352 = extractvalue { i32, i1 } %347, 0
  store i32 %352, ptr %16, align 4
  br label %337

353:                                              ; preds = %337
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

354:                                              ; preds = %337
  %355 = extractvalue { i32, i1 } %343, 0
  store i32 %355, ptr %10, align 4
  br label %277

356:                                              ; preds = %364, %365
  %357 = load i32, ptr %11, align 4
  %358 = lshr i32 %357, 1
  %359 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %358, i32 1071644672)
  %360 = extractvalue { i32, i1 } %359, 1
  br i1 %360, label %409, label %410

361:                                              ; preds = %259
  store double 1.000000e+00, ptr %3, align 8
  %362 = load double, ptr %3, align 8
  %363 = fcmp oge double %362, 1.000000e+00
  br i1 %363, label %366, label %369

364:                                              ; preds = %259
  br label %356

365:                                              ; preds = %369, %370
  br label %356

366:                                              ; preds = %361
  store double 1.000000e+00, ptr %3, align 8
  %367 = load i32, ptr %10, align 4
  %368 = icmp eq i32 %367, -1
  br i1 %368, label %371, label %375

369:                                              ; preds = %361
  br label %365

370:                                              ; preds = %381, %379
  br label %365

371:                                              ; preds = %366
  store i32 0, ptr %10, align 4
  %372 = load i32, ptr %11, align 4
  %373 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %372, i32 1)
  %374 = extractvalue { i32, i1 } %373, 1
  br i1 %374, label %378, label %379

375:                                              ; preds = %366
  %376 = load double, ptr %3, align 8
  %377 = fcmp ogt double %376, 1.000000e+00
  br i1 %377, label %382, label %385

378:                                              ; preds = %371
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

379:                                              ; preds = %371
  %380 = extractvalue { i32, i1 } %373, 0
  store i32 %380, ptr %11, align 4
  br label %370

381:                                              ; preds = %407, %404
  br label %370

382:                                              ; preds = %375
  %383 = load i32, ptr %10, align 4
  %384 = icmp eq i32 %383, -2
  br i1 %384, label %395, label %399

385:                                              ; preds = %375
  %386 = load i32, ptr %10, align 4
  %387 = load i32, ptr %10, align 4
  %388 = and i32 %387, 1
  %389 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %386, i32 %388)
  %390 = extractvalue { i32, i1 } %389, 1
  br i1 %390, label %406, label %407

391:                                              ; preds = %399, %401
  %392 = load i32, ptr %10, align 4
  %393 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %392, i32 2)
  %394 = extractvalue { i32, i1 } %393, 1
  br i1 %394, label %403, label %404

395:                                              ; preds = %382
  %396 = load i32, ptr %11, align 4
  %397 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %396, i32 1)
  %398 = extractvalue { i32, i1 } %397, 1
  br i1 %398, label %400, label %401

399:                                              ; preds = %382
  br label %391

400:                                              ; preds = %395
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

401:                                              ; preds = %395
  %402 = extractvalue { i32, i1 } %397, 0
  store i32 %402, ptr %11, align 4
  br label %391

403:                                              ; preds = %391
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

404:                                              ; preds = %391
  %405 = extractvalue { i32, i1 } %393, 0
  store i32 %405, ptr %10, align 4
  br label %381

406:                                              ; preds = %385
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

407:                                              ; preds = %385
  %408 = extractvalue { i32, i1 } %389, 0
  store i32 %408, ptr %10, align 4
  br label %381

409:                                              ; preds = %356
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

410:                                              ; preds = %356
  %411 = extractvalue { i32, i1 } %359, 0
  store i32 %411, ptr %16, align 4
  %412 = load i32, ptr %10, align 4
  %413 = lshr i32 %412, 1
  store i32 %413, ptr %15, align 4
  %414 = load i32, ptr %11, align 4
  %415 = and i32 %414, 1
  %416 = icmp ne i32 %415, 0
  br i1 %416, label %421, label %424

417:                                              ; preds = %424, %421
  %418 = load i32, ptr %16, align 4
  %419 = sub i32 2147483647, %418
  %420 = icmp ule i32 %419, 2147483647
  br i1 %420, label %432, label %433

421:                                              ; preds = %410
  %422 = load i32, ptr %15, align 4
  %423 = or i32 %422, -2147483648
  store i32 %423, ptr %15, align 4
  br label %417

424:                                              ; preds = %410
  br label %417

425:                                              ; preds = %432
  store i32 %418, ptr %2, align 4
  %426 = load i32, ptr %2, align 4
  %427 = load i32, ptr %13, align 4
  %428 = shl i32 %427, 20
  %429 = add i32 %426, %428
  store i32 %429, ptr %2, align 4
  %430 = load i32, ptr %2, align 4
  %431 = icmp sge i32 %430, 0
  br i1 %431, label %441, label %442

432:                                              ; preds = %417
  br label %425

433:                                              ; preds = %417
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

434:                                              ; preds = %441
  %435 = sext i32 %430 to i64
  %436 = shl i64 %435, 32
  %437 = load i32, ptr %15, align 4
  %438 = zext i32 %437 to i64
  %439 = or i64 %436, %438
  %440 = bitcast i64 %439 to double
  ret double %440

441:                                              ; preds = %425
  br label %434

442:                                              ; preds = %425
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__sqrtx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @sqrtq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @sqrtq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @sqrt(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @sqrtl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__sqrtx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__tanh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @tanf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @tanf(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca double, align 8
  %4 = alloca i32, align 4
  %5 = bitcast float %0 to i32
  store i32 %5, ptr %4, align 4
  %6 = load i32, ptr %4, align 4
  %7 = lshr i32 %6, 31
  %8 = icmp ne i32 %7, 0
  %9 = load i32, ptr %4, align 4
  %10 = and i32 %9, 2147483647
  store i32 %10, ptr %4, align 4
  %11 = load i32, ptr %4, align 4
  %12 = icmp ule i32 %11, 1061752794
  br i1 %12, label %16, label %19

13:                                               ; preds = %19
  %14 = load i32, ptr %4, align 4
  %15 = icmp ule i32 %14, 1081824209
  br i1 %15, label %36, label %39

16:                                               ; preds = %1
  %17 = load i32, ptr %4, align 4
  %18 = icmp ult i32 %17, 964689920
  br i1 %18, label %23, label %26

19:                                               ; preds = %1
  br label %13

20:                                               ; preds = %26
  %21 = fpext float %0 to double
  %22 = call fastcc float @compiler_rt.trig.__tandf(double %21, i1 false)
  ret float %22

23:                                               ; preds = %16
  %24 = load i32, ptr %4, align 4
  %25 = icmp ult i32 %24, 8388608
  br i1 %25, label %29, label %31

26:                                               ; preds = %16
  br label %20

27:                                               ; preds = %31, %29
  %28 = phi float [ %30, %29 ], [ %32, %31 ]
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %28)
  ret float %0

29:                                               ; preds = %23
  %30 = fdiv float %0, 0x4770000000000000
  br label %27

31:                                               ; preds = %23
  %32 = fadd float %0, 0x4770000000000000
  br label %27

33:                                               ; preds = %39
  %34 = load i32, ptr %4, align 4
  %35 = icmp ule i32 %34, 1088565717
  br i1 %35, label %63, label %66

36:                                               ; preds = %13
  %37 = load i32, ptr %4, align 4
  %38 = icmp ule i32 %37, 1075235811
  br i1 %38, label %40, label %41

39:                                               ; preds = %13
  br label %33

40:                                               ; preds = %36
  br i1 %8, label %45, label %48

41:                                               ; preds = %36
  br i1 %8, label %54, label %57

42:                                               ; preds = %48, %45
  %43 = phi double [ %47, %45 ], [ %50, %48 ]
  %44 = call fastcc float @compiler_rt.trig.__tandf(double %43, i1 true)
  ret float %44

45:                                               ; preds = %40
  %46 = fpext float %0 to double
  %47 = fadd double %46, 0x3FF921FB54442D18
  br label %42

48:                                               ; preds = %40
  %49 = fpext float %0 to double
  %50 = fsub double %49, 0x3FF921FB54442D18
  br label %42

51:                                               ; preds = %57, %54
  %52 = phi double [ %56, %54 ], [ %59, %57 ]
  %53 = call fastcc float @compiler_rt.trig.__tandf(double %52, i1 false)
  ret float %53

54:                                               ; preds = %41
  %55 = fpext float %0 to double
  %56 = fadd double %55, 0x400921FB54442D18
  br label %51

57:                                               ; preds = %41
  %58 = fpext float %0 to double
  %59 = fsub double %58, 0x400921FB54442D18
  br label %51

60:                                               ; preds = %66
  %61 = load i32, ptr %4, align 4
  %62 = icmp uge i32 %61, 2139095040
  br i1 %62, label %102, label %104

63:                                               ; preds = %33
  %64 = load i32, ptr %4, align 4
  %65 = icmp ule i32 %64, 1085271519
  br i1 %65, label %67, label %68

66:                                               ; preds = %33
  br label %60

67:                                               ; preds = %63
  br i1 %8, label %72, label %75

68:                                               ; preds = %63
  br i1 %8, label %81, label %84

69:                                               ; preds = %75, %72
  %70 = phi double [ %74, %72 ], [ %77, %75 ]
  %71 = call fastcc float @compiler_rt.trig.__tandf(double %70, i1 true)
  ret float %71

72:                                               ; preds = %67
  %73 = fpext float %0 to double
  %74 = fadd double %73, 0x4012D97C7F3321D2
  br label %69

75:                                               ; preds = %67
  %76 = fpext float %0 to double
  %77 = fsub double %76, 0x4012D97C7F3321D2
  br label %69

78:                                               ; preds = %84, %81
  %79 = phi double [ %83, %81 ], [ %86, %84 ]
  %80 = call fastcc float @compiler_rt.trig.__tandf(double %79, i1 false)
  ret float %80

81:                                               ; preds = %68
  %82 = fpext float %0 to double
  %83 = fadd double %82, 0x401921FB54442D18
  br label %78

84:                                               ; preds = %68
  %85 = fpext float %0 to double
  %86 = fsub double %85, 0x401921FB54442D18
  br label %78

87:                                               ; preds = %104
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %88 = ptrtoint ptr %3 to i64
  %89 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %89, align 8
  %90 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %88, ptr %90, align 8
  %91 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %91, align 8
  %92 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %92, align 8
  %93 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %93, align 8
  %94 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %94, align 8
  %95 = ptrtoint ptr %2 to i64
  %96 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %95, i64 0)
  %97 = call fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %3)
  %98 = load double, ptr %3, align 8
  %99 = and i32 %97, 1
  %100 = icmp ne i32 %99, 0
  %101 = call fastcc float @compiler_rt.trig.__tandf(double %98, i1 %100)
  ret float %101

102:                                              ; preds = %60
  %103 = fsub float %0, %0
  ret float %103

104:                                              ; preds = %60
  br label %87
}

; Function Attrs: nounwind uwtable
define internal fastcc float @compiler_rt.trig.__tandf(double %0, i1 %1) unnamed_addr #0 {
  %3 = fmul double %0, %0
  %4 = fmul double %3, 0x3F8362B9BF971BCD
  %5 = fadd double 0x3F685DADFCECF44E, %4
  %6 = fmul double %3, 0x3F991DF3908C33CE
  %7 = fadd double 0x3FAB54C91D865AFE, %6
  %8 = fmul double %3, %3
  %9 = fmul double %3, %0
  %10 = fmul double %3, 0x3FC112FD38999F72
  %11 = fadd double 0x3FD5554D3418C99F, %10
  %12 = fmul double %9, %11
  %13 = fadd double %0, %12
  %14 = fmul double %9, %8
  %15 = fmul double %8, %5
  %16 = fadd double %7, %15
  %17 = fmul double %14, %16
  %18 = fadd double %13, %17
  br i1 %1, label %22, label %24

19:                                               ; preds = %24, %22
  %20 = phi double [ %23, %22 ], [ %18, %24 ]
  %21 = fptrunc double %20 to float
  ret float %21

22:                                               ; preds = %2
  %23 = fdiv double -1.000000e+00, %18
  br label %19

24:                                               ; preds = %2
  br label %19
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @tan(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca [2 x double], align 8
  %4 = alloca i64, align 8
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 32
  store i64 %6, ptr %4, align 8
  %7 = load i64, ptr %4, align 8
  %8 = and i64 %7, 2147483647
  store i64 %8, ptr %4, align 8
  %9 = load i64, ptr %4, align 8
  %10 = icmp ule i64 %9, 1072243195
  br i1 %10, label %14, label %17

11:                                               ; preds = %17
  %12 = load i64, ptr %4, align 8
  %13 = icmp uge i64 %12, 2146435072
  br i1 %13, label %48, label %50

14:                                               ; preds = %1
  %15 = load i64, ptr %4, align 8
  %16 = icmp ult i64 %15, 1044381696
  br i1 %16, label %20, label %23

17:                                               ; preds = %1
  br label %11

18:                                               ; preds = %23
  %19 = call fastcc double @compiler_rt.trig.__tan(double %0, double 0.000000e+00, i1 false)
  ret double %19

20:                                               ; preds = %14
  %21 = load i64, ptr %4, align 8
  %22 = icmp ult i64 %21, 1048576
  br i1 %22, label %26, label %28

23:                                               ; preds = %14
  br label %18

24:                                               ; preds = %28, %26
  %25 = phi double [ %27, %26 ], [ %29, %28 ]
  call fastcc void @math.doNotOptimizeAway__anon_3776(double %25)
  ret double %0

26:                                               ; preds = %20
  %27 = fdiv double %0, 0x4770000000000000
  br label %24

28:                                               ; preds = %20
  %29 = fadd double %0, 0x4770000000000000
  br label %24

30:                                               ; preds = %50
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %31 = ptrtoint ptr %3 to i64
  %32 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %31, ptr %33, align 8
  %34 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %34, align 8
  %35 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %35, align 8
  %36 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %37, align 8
  %38 = ptrtoint ptr %2 to i64
  %39 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %38, i64 0)
  %40 = call fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %3)
  %41 = getelementptr inbounds [2 x double], ptr %3, i64 0, i64 0
  %42 = load double, ptr %41, align 8
  %43 = getelementptr inbounds [2 x double], ptr %3, i64 0, i64 1
  %44 = load double, ptr %43, align 8
  %45 = and i32 %40, 1
  %46 = icmp ne i32 %45, 0
  %47 = call fastcc double @compiler_rt.trig.__tan(double %42, double %44, i1 %46)
  ret double %47

48:                                               ; preds = %11
  %49 = fsub double %0, %0
  ret double %49

50:                                               ; preds = %11
  br label %30
}

; Function Attrs: nounwind uwtable
define internal fastcc double @compiler_rt.trig.__tan(double %0, double %1, i1 %2) unnamed_addr #0 {
  %4 = alloca double, align 8
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca [6 x i64], align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store double %0, ptr %17, align 8
  store double %1, ptr %16, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %15, i8 -86, i64 8, i1 false)
  %18 = ptrtoint ptr %15 to i64
  %19 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %18, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 8, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %22, align 8
  %23 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %23, align 8
  %24 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %24, align 8
  %25 = ptrtoint ptr %14 to i64
  %26 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %25, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %13, i8 -86, i64 8, i1 false)
  %27 = ptrtoint ptr %13 to i64
  %28 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %27, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 8, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %32, align 8
  %33 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %33, align 8
  %34 = ptrtoint ptr %14 to i64
  %35 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %34, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %12, i8 -86, i64 8, i1 false)
  %36 = ptrtoint ptr %12 to i64
  %37 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %36, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 8, ptr %39, align 8
  %40 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %40, align 8
  %41 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %41, align 8
  %42 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %42, align 8
  %43 = ptrtoint ptr %14 to i64
  %44 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %43, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 -86, i64 8, i1 false)
  %45 = ptrtoint ptr %11 to i64
  %46 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %46, align 8
  %47 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %45, ptr %47, align 8
  %48 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 8, ptr %48, align 8
  %49 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %49, align 8
  %50 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %50, align 8
  %51 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %51, align 8
  %52 = ptrtoint ptr %14 to i64
  %53 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %52, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 -86, i64 8, i1 false)
  %54 = ptrtoint ptr %10 to i64
  %55 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %55, align 8
  %56 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %54, ptr %56, align 8
  %57 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 8, ptr %57, align 8
  %58 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %58, align 8
  %59 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %59, align 8
  %60 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %60, align 8
  %61 = ptrtoint ptr %14 to i64
  %62 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %61, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 8, i1 false)
  %63 = ptrtoint ptr %9 to i64
  %64 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %64, align 8
  %65 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %63, ptr %65, align 8
  %66 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 8, ptr %66, align 8
  %67 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %67, align 8
  %68 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %68, align 8
  %69 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %69, align 8
  %70 = ptrtoint ptr %14 to i64
  %71 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %70, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 8, i1 false)
  %72 = ptrtoint ptr %8 to i64
  %73 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %73, align 8
  %74 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %72, ptr %74, align 8
  %75 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 8, ptr %75, align 8
  %76 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %76, align 8
  %77 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %77, align 8
  %78 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %78, align 8
  %79 = ptrtoint ptr %14 to i64
  %80 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %79, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %7, i8 -86, i64 8, i1 false)
  %81 = ptrtoint ptr %7 to i64
  %82 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %82, align 8
  %83 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %81, ptr %83, align 8
  %84 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 8, ptr %84, align 8
  %85 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %85, align 8
  %86 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %86, align 8
  %87 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %87, align 8
  %88 = ptrtoint ptr %14 to i64
  %89 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %88, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -86, i64 4, i1 false)
  %90 = ptrtoint ptr %6 to i64
  %91 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %91, align 8
  %92 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %90, ptr %92, align 8
  %93 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 4, ptr %93, align 8
  %94 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %94, align 8
  %95 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %95, align 8
  %96 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %96, align 8
  %97 = ptrtoint ptr %14 to i64
  %98 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %97, i64 0)
  call void @llvm.memset.p0.i64(ptr align 1 %5, i8 -86, i64 1, i1 false)
  %99 = ptrtoint ptr %5 to i64
  %100 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 0
  store i64 1296236545, ptr %100, align 8
  %101 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 1
  store i64 %99, ptr %101, align 8
  %102 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 2
  store i64 1, ptr %102, align 8
  %103 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 3
  store i64 0, ptr %103, align 8
  %104 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 4
  store i64 0, ptr %104, align 8
  %105 = getelementptr inbounds [6 x i64], ptr %14, i64 0, i64 5
  store i64 0, ptr %105, align 8
  %106 = ptrtoint ptr %14 to i64
  %107 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %106, i64 0)
  %108 = load double, ptr %17, align 8
  %109 = bitcast double %108 to i64
  %110 = lshr i64 %109, 32
  %111 = sub i64 4294967295, %110
  %112 = icmp ule i64 %111, 4294967295
  br i1 %112, label %118, label %119

113:                                              ; preds = %118
  %114 = trunc i64 %110 to i32
  store i32 %114, ptr %6, align 4
  %115 = load i32, ptr %6, align 4
  %116 = and i32 %115, 2147483647
  %117 = icmp uge i32 %116, 1072010280
  br i1 %117, label %179, label %184

118:                                              ; preds = %3
  br label %113

119:                                              ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @169)
  unreachable

120:                                              ; preds = %184, %185
  %121 = load double, ptr %17, align 8
  %122 = load double, ptr %17, align 8
  %123 = fmul double %121, %122
  store double %123, ptr %15, align 8
  %124 = load double, ptr %15, align 8
  %125 = load double, ptr %15, align 8
  %126 = fmul double %124, %125
  store double %126, ptr %11, align 8
  %127 = load double, ptr %11, align 8
  %128 = load double, ptr %11, align 8
  %129 = load double, ptr %11, align 8
  %130 = load double, ptr %11, align 8
  %131 = load double, ptr %11, align 8
  %132 = fmul double %131, 0xBEF375CBDB605373
  %133 = fadd double 0x3F147E88A03792A6, %132
  %134 = fmul double %130, %133
  %135 = fadd double 0x3F4344D8F2F26501, %134
  %136 = fmul double %129, %135
  %137 = fadd double 0x3F6D6D22C9560328, %136
  %138 = fmul double %128, %137
  %139 = fadd double 0x3F9664F48406D637, %138
  %140 = fmul double %127, %139
  %141 = fadd double 0x3FC111111110FE7A, %140
  store double %141, ptr %13, align 8
  %142 = load double, ptr %15, align 8
  %143 = load double, ptr %11, align 8
  %144 = load double, ptr %11, align 8
  %145 = load double, ptr %11, align 8
  %146 = load double, ptr %11, align 8
  %147 = load double, ptr %11, align 8
  %148 = fmul double %147, 0x3EFB2A7074BF7AD4
  %149 = fadd double 0x3F12B80F32F0A7E9, %148
  %150 = fmul double %146, %149
  %151 = fadd double 0x3F3026F71A8D1068, %150
  %152 = fmul double %145, %151
  %153 = fadd double 0x3F57DBC8FEE08315, %152
  %154 = fmul double %144, %153
  %155 = fadd double 0x3F8226E3E96E8493, %154
  %156 = fmul double %143, %155
  %157 = fadd double 0x3FABA1BA1BB341FE, %156
  %158 = fmul double %142, %157
  store double %158, ptr %12, align 8
  %159 = load double, ptr %15, align 8
  %160 = load double, ptr %17, align 8
  %161 = fmul double %159, %160
  store double %161, ptr %10, align 8
  %162 = load double, ptr %16, align 8
  %163 = load double, ptr %15, align 8
  %164 = load double, ptr %10, align 8
  %165 = load double, ptr %13, align 8
  %166 = load double, ptr %12, align 8
  %167 = fadd double %165, %166
  %168 = fmul double %164, %167
  %169 = load double, ptr %16, align 8
  %170 = fadd double %168, %169
  %171 = fmul double %163, %170
  %172 = fadd double %162, %171
  %173 = load double, ptr %10, align 8
  %174 = fmul double %173, 0x3FD5555555555563
  %175 = fadd double %172, %174
  store double %175, ptr %13, align 8
  %176 = load double, ptr %17, align 8
  %177 = load double, ptr %13, align 8
  %178 = fadd double %176, %177
  store double %178, ptr %11, align 8
  br i1 %117, label %199, label %218

179:                                              ; preds = %113
  %180 = load i32, ptr %6, align 4
  %181 = lshr i32 %180, 31
  %182 = icmp ne i32 %181, 0
  store i1 %182, ptr %5, align 1
  %183 = load i1, ptr %5, align 1
  br i1 %183, label %191, label %196

184:                                              ; preds = %113
  br label %120

185:                                              ; preds = %196, %191
  %186 = load double, ptr %17, align 8
  %187 = fsub double 0x3FE921FB54442D18, %186
  %188 = load double, ptr %16, align 8
  %189 = fsub double 0x3C81A62633145C07, %188
  %190 = fadd double %187, %189
  store double %190, ptr %17, align 8
  store double 0.000000e+00, ptr %16, align 8
  br label %120

191:                                              ; preds = %179
  %192 = load double, ptr %17, align 8
  %193 = fneg double %192
  store double %193, ptr %17, align 8
  %194 = load double, ptr %16, align 8
  %195 = fneg double %194
  store double %195, ptr %16, align 8
  br label %185

196:                                              ; preds = %179
  br label %185

197:                                              ; preds = %218
  %198 = xor i1 %2, true
  br i1 %198, label %256, label %258

199:                                              ; preds = %120
  %200 = uitofp i1 %2 to double
  %201 = fmul double 2.000000e+00, %200
  %202 = fsub double 1.000000e+00, %201
  store double %202, ptr %10, align 8
  %203 = load double, ptr %10, align 8
  %204 = load double, ptr %17, align 8
  %205 = load double, ptr %13, align 8
  %206 = load double, ptr %11, align 8
  %207 = load double, ptr %11, align 8
  %208 = fmul double %206, %207
  %209 = load double, ptr %11, align 8
  %210 = load double, ptr %10, align 8
  %211 = fadd double %209, %210
  %212 = fdiv double %208, %211
  %213 = fsub double %205, %212
  %214 = fadd double %204, %213
  %215 = fmul double 2.000000e+00, %214
  %216 = fsub double %203, %215
  store double %216, ptr %12, align 8
  %217 = load i1, ptr %5, align 1
  br i1 %217, label %221, label %224

218:                                              ; preds = %120
  br label %197

219:                                              ; preds = %224, %221
  %220 = load double, ptr %4, align 8
  ret double %220

221:                                              ; preds = %199
  %222 = load double, ptr %12, align 8
  %223 = fneg double %222
  store double %223, ptr %4, align 8
  br label %219

224:                                              ; preds = %199
  %225 = load double, ptr %12, align 8
  store double %225, ptr %4, align 8
  br label %219

226:                                              ; preds = %258
  %227 = load double, ptr %11, align 8
  store double %227, ptr %8, align 8
  %228 = load double, ptr %8, align 8
  %229 = bitcast double %228 to i64
  %230 = and i64 %229, -4294967296
  %231 = bitcast i64 %230 to double
  store double %231, ptr %8, align 8
  %232 = load double, ptr %13, align 8
  %233 = load double, ptr %8, align 8
  %234 = load double, ptr %17, align 8
  %235 = fsub double %233, %234
  %236 = fsub double %232, %235
  store double %236, ptr %12, align 8
  %237 = load double, ptr %11, align 8
  %238 = fdiv double -1.000000e+00, %237
  store double %238, ptr %9, align 8
  %239 = load double, ptr %9, align 8
  store double %239, ptr %7, align 8
  %240 = load double, ptr %7, align 8
  %241 = bitcast double %240 to i64
  %242 = and i64 %241, -4294967296
  %243 = bitcast i64 %242 to double
  store double %243, ptr %7, align 8
  %244 = load double, ptr %7, align 8
  %245 = load double, ptr %9, align 8
  %246 = load double, ptr %7, align 8
  %247 = load double, ptr %8, align 8
  %248 = fmul double %246, %247
  %249 = fadd double 1.000000e+00, %248
  %250 = load double, ptr %7, align 8
  %251 = load double, ptr %12, align 8
  %252 = fmul double %250, %251
  %253 = fadd double %249, %252
  %254 = fmul double %245, %253
  %255 = fadd double %244, %254
  ret double %255

256:                                              ; preds = %197
  %257 = load double, ptr %11, align 8
  ret double %257

258:                                              ; preds = %197
  br label %226
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__tanx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @tanq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @tanq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @tan(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @tanl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__tanx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local half @__trunch(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @truncf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local float @truncf(float %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast float %0 to i32
  %6 = lshr i32 %5, 23
  %7 = and i32 %6, 255
  %8 = sub i32 2147483647, %7
  %9 = icmp ule i32 %8, 2147483647
  br i1 %9, label %13, label %14

10:                                               ; preds = %13
  %11 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %7, i32 127)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  br label %10

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @111)
  unreachable

15:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %10
  %17 = extractvalue { i32, i1 } %11, 0
  %18 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %17, i32 9)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i32, i1 } %18, 0
  store i32 %22, ptr %4, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %23 = ptrtoint ptr %3 to i64
  %24 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %24, align 8
  %25 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %23, ptr %25, align 8
  %26 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 4, ptr %26, align 8
  %27 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %29, align 8
  %30 = ptrtoint ptr %2 to i64
  %31 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %30, i64 0)
  %32 = load i32, ptr %4, align 4
  %33 = icmp sge i32 %32, 32
  br i1 %33, label %37, label %38

34:                                               ; preds = %38
  %35 = load i32, ptr %4, align 4
  %36 = icmp slt i32 %35, 9
  br i1 %36, label %43, label %44

37:                                               ; preds = %21
  ret float %0

38:                                               ; preds = %21
  br label %34

39:                                               ; preds = %44, %43
  %40 = load i32, ptr %4, align 4
  %41 = sub i32 31, %40
  %42 = icmp ule i32 %41, 31
  br i1 %42, label %52, label %53

43:                                               ; preds = %34
  store i32 1, ptr %4, align 4
  br label %39

44:                                               ; preds = %34
  br label %39

45:                                               ; preds = %52
  %46 = trunc i32 %40 to i5
  %47 = zext i5 %46 to i32
  %48 = lshr i32 -1, %47
  store i32 %48, ptr %3, align 4
  %49 = load i32, ptr %3, align 4
  %50 = and i32 %5, %49
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %54, label %55

52:                                               ; preds = %39
  br label %45

53:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @111)
  unreachable

54:                                               ; preds = %45
  ret float %0

55:                                               ; preds = %45
  %56 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3775(float %56)
  %57 = load i32, ptr %3, align 4
  %58 = xor i32 %57, -1
  %59 = and i32 %5, %58
  %60 = bitcast i32 %59 to float
  ret float %60
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local double @trunc(double %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 52
  %7 = and i64 %6, 2047
  %8 = sub i64 2147483647, %7
  %9 = icmp ule i64 %8, 2147483647
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i64 %7 to i32
  %12 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 1023)
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @112)
  unreachable

16:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %10
  %18 = extractvalue { i32, i1 } %12, 0
  %19 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %18, i32 12)
  %20 = extractvalue { i32, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i32, i1 } %19, 0
  store i32 %23, ptr %4, align 4
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %24 = ptrtoint ptr %3 to i64
  %25 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %25, align 8
  %26 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %24, ptr %26, align 8
  %27 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 8, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %30, align 8
  %31 = ptrtoint ptr %2 to i64
  %32 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %31, i64 0)
  %33 = load i32, ptr %4, align 4
  %34 = icmp sge i32 %33, 64
  br i1 %34, label %38, label %39

35:                                               ; preds = %39
  %36 = load i32, ptr %4, align 4
  %37 = icmp slt i32 %36, 12
  br i1 %37, label %44, label %45

38:                                               ; preds = %22
  ret double %0

39:                                               ; preds = %22
  br label %35

40:                                               ; preds = %45, %44
  %41 = load i32, ptr %4, align 4
  %42 = sub i32 63, %41
  %43 = icmp ule i32 %42, 63
  br i1 %43, label %53, label %54

44:                                               ; preds = %35
  store i32 1, ptr %4, align 4
  br label %40

45:                                               ; preds = %35
  br label %40

46:                                               ; preds = %53
  %47 = trunc i32 %41 to i6
  %48 = zext i6 %47 to i64
  %49 = lshr i64 -1, %48
  store i64 %49, ptr %3, align 8
  %50 = load i64, ptr %3, align 8
  %51 = and i64 %5, %50
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %55, label %56

53:                                               ; preds = %40
  br label %46

54:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @112)
  unreachable

55:                                               ; preds = %46
  ret double %0

56:                                               ; preds = %46
  %57 = fadd double %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3776(double %57)
  %58 = load i64, ptr %3, align 8
  %59 = xor i64 %58, -1
  %60 = and i64 %5, %59
  %61 = bitcast i64 %60 to double
  ret double %61
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @__truncx(x86_fp80 %0) #0 {
  %2 = call fp128 @__extendxftf2(x86_fp80 %0)
  %3 = call fp128 @truncq(fp128 %2)
  %4 = call x86_fp80 @__trunctfxf2(fp128 %3)
  ret x86_fp80 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local fp128 @truncq(fp128 %0) #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca i128, align 8
  %4 = alloca i32, align 4
  %5 = bitcast fp128 %0 to i128
  %6 = lshr i128 %5, 112
  %7 = and i128 %6, 32767
  %8 = sub i128 2147483647, %7
  %9 = icmp ule i128 %8, 2147483647
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i128 %7 to i32
  %12 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 16383)
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @113)
  unreachable

16:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %10
  %18 = extractvalue { i32, i1 } %12, 0
  %19 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %18, i32 16)
  %20 = extractvalue { i32, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i32, i1 } %19, 0
  store i32 %23, ptr %4, align 4
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %24 = ptrtoint ptr %3 to i64
  %25 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %25, align 8
  %26 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %24, ptr %26, align 8
  %27 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 16, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %30, align 8
  %31 = ptrtoint ptr %2 to i64
  %32 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %31, i64 0)
  %33 = load i32, ptr %4, align 4
  %34 = icmp sge i32 %33, 128
  br i1 %34, label %38, label %39

35:                                               ; preds = %39
  %36 = load i32, ptr %4, align 4
  %37 = icmp slt i32 %36, 16
  br i1 %37, label %44, label %45

38:                                               ; preds = %22
  ret fp128 %0

39:                                               ; preds = %22
  br label %35

40:                                               ; preds = %45, %44
  %41 = load i32, ptr %4, align 4
  %42 = sub i32 127, %41
  %43 = icmp ule i32 %42, 127
  br i1 %43, label %53, label %54

44:                                               ; preds = %35
  store i32 1, ptr %4, align 4
  br label %40

45:                                               ; preds = %35
  br label %40

46:                                               ; preds = %53
  %47 = trunc i32 %41 to i7
  %48 = zext i7 %47 to i128
  %49 = lshr i128 -1, %48
  store i128 %49, ptr %3, align 8
  %50 = load i128, ptr %3, align 8
  %51 = and i128 %5, %50
  %52 = icmp eq i128 %51, 0
  br i1 %52, label %55, label %56

53:                                               ; preds = %40
  br label %46

54:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @113)
  unreachable

55:                                               ; preds = %46
  ret fp128 %0

56:                                               ; preds = %46
  %57 = call fp128 @__addtf3(fp128 %0, fp128 0xL00000000000000004077000000000000)
  call fastcc void @math.doNotOptimizeAway__anon_3777(fp128 %57)
  %58 = load i128, ptr %3, align 8
  %59 = xor i128 %58, -1
  %60 = and i128 %5, %59
  %61 = bitcast i128 %60 to fp128
  ret fp128 %61
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local x86_fp80 @truncl(x86_fp80 %0) #0 {
  %2 = call x86_fp80 @__truncx(x86_fp80 %0)
  ret x86_fp80 %2
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__udivei4(ptr nonnull align 4 %0, ptr nonnull readonly align 4 %1, ptr nonnull readonly align 4 %2, i64 %3) #0 {
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca i32, align 4
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca { ptr, i64 }, align 8
  %12 = alloca i32, align 4
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca { ptr, i64 }, align 8
  %15 = alloca { ptr, i64 }, align 8
  %16 = alloca i32, align 4
  %17 = alloca { ptr, i64 }, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i64, align 8
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i64, align 8
  %31 = alloca { ptr, i64 }, align 8
  %32 = alloca i32, align 4
  %33 = alloca { ptr, i64 }, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca { ptr, i64 }, align 8
  %37 = alloca i32, align 4
  %38 = alloca [2049 x i32], align 4
  %39 = alloca { ptr, i64 }, align 8
  %40 = alloca i32, align 4
  %41 = alloca { ptr, i64 }, align 8
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i64, align 8
  %45 = alloca [6 x i64], align 8
  %46 = alloca [2048 x i32], align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca { ptr, i64 }, align 8
  %53 = alloca { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, align 8
  %54 = alloca ptr, align 8
  %55 = alloca { ptr, i64 }, align 8
  %56 = alloca ptr, align 8
  %57 = alloca ptr, align 8
  store ptr %1, ptr %57, align 8
  %58 = udiv i64 %3, 32
  %59 = load ptr, ptr %57, align 8
  %60 = getelementptr inbounds i32, ptr %59, i64 0
  %61 = insertvalue { ptr, i64 } poison, ptr %60, 0
  %62 = insertvalue { ptr, i64 } %61, i64 %58, 1
  store ptr %2, ptr %56, align 8
  %63 = udiv i64 %3, 32
  %64 = load ptr, ptr %56, align 8
  %65 = getelementptr inbounds i32, ptr %64, i64 0
  %66 = insertvalue { ptr, i64 } poison, ptr %65, 0
  %67 = insertvalue { ptr, i64 } %66, i64 %63, 1
  store ptr %0, ptr %54, align 8
  %68 = udiv i64 %3, 32
  %69 = load ptr, ptr %54, align 8
  %70 = getelementptr inbounds i32, ptr %69, i64 0
  %71 = insertvalue { ptr, i64 } poison, ptr %70, 0
  %72 = insertvalue { ptr, i64 } %71, i64 %68, 1
  store { ptr, i64 } %72, ptr %55, align 8
  %73 = load { ptr, i64 }, ptr %55, align 8
  %74 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 0
  store { ptr, i64 } %73, ptr %74, align 8
  %75 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 1
  store { ptr, i64 } %62, ptr %75, align 8
  %76 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 2
  store { ptr, i64 } %67, ptr %76, align 8
  %77 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 0
  %78 = load { ptr, i64 }, ptr %77, align 8
  %79 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 1
  %80 = load { ptr, i64 }, ptr %79, align 8
  %81 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 2
  %82 = load { ptr, i64 }, ptr %81, align 8
  %83 = extractvalue { ptr, i64 } %78, 0
  %84 = icmp ne ptr %83, null
  br i1 %84, label %92, label %98

85:                                               ; preds = %969
  ret void

86:                                               ; preds = %427, %198, %189, %159, %126
  %87 = phi i16 [ 2, %126 ], [ 0, %159 ], [ 2, %189 ], [ 0, %198 ], [ 0, %427 ]
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %969, label %970

89:                                               ; preds = %98, %108
  %90 = extractvalue { ptr, i64 } %80, 1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %122, label %123

92:                                               ; preds = %4
  store { ptr, i64 } %78, ptr %52, align 8
  %93 = load { ptr, i64 }, ptr %52, align 8
  %94 = extractvalue { ptr, i64 } %93, 0
  %95 = getelementptr inbounds i32, ptr %94, i64 0
  %96 = extractvalue { ptr, i64 } %93, 1
  %97 = icmp ule i64 0, %96
  br i1 %97, label %102, label %103

98:                                               ; preds = %4
  br label %89

99:                                               ; preds = %102
  %100 = extractvalue { ptr, i64 } %93, 1
  %101 = icmp ule i64 %96, %100
  br i1 %101, label %106, label %107

102:                                              ; preds = %92
  br label %99

103:                                              ; preds = %92
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %96)
  unreachable

104:                                              ; preds = %106
  %105 = icmp ule i64 0, %96
  br i1 %105, label %114, label %115

106:                                              ; preds = %99
  br label %104

107:                                              ; preds = %99
  call fastcc void @builtin.panicOutOfBounds(i64 %96, i64 %100)
  unreachable

108:                                              ; preds = %114
  %109 = insertvalue { ptr, i64 } poison, ptr %95, 0
  %110 = insertvalue { ptr, i64 } %109, i64 %96, 1
  %111 = extractvalue { ptr, i64 } %110, 0
  %112 = extractvalue { ptr, i64 } %110, 1
  %113 = mul nuw i64 %112, 4
  call void @llvm.memset.p0.i64(ptr align 4 %111, i8 0, i64 %113, i1 false)
  br label %89

114:                                              ; preds = %104
  br label %108

115:                                              ; preds = %104
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %96)
  unreachable

116:                                              ; preds = %127
  %117 = extractvalue { ptr, i64 } %80, 1
  %118 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %117, i64 1)
  %119 = extractvalue { i64, i1 } %118, 1
  br i1 %119, label %128, label %129

120:                                              ; preds = %123, %122
  %121 = phi i1 [ true, %122 ], [ %125, %123 ]
  br i1 %121, label %126, label %127

122:                                              ; preds = %89
  br label %120

123:                                              ; preds = %89
  %124 = extractvalue { ptr, i64 } %82, 1
  %125 = icmp eq i64 %124, 0
  br label %120

126:                                              ; preds = %120
  br label %86

127:                                              ; preds = %120
  br label %116

128:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

129:                                              ; preds = %116
  %130 = extractvalue { i64, i1 } %118, 0
  store i64 %130, ptr %51, align 8
  %131 = extractvalue { ptr, i64 } %82, 1
  %132 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %131, i64 1)
  %133 = extractvalue { i64, i1 } %132, 1
  br i1 %133, label %134, label %135

134:                                              ; preds = %129
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

135:                                              ; preds = %129
  %136 = extractvalue { i64, i1 } %132, 0
  store i64 %136, ptr %50, align 8
  br label %138

137:                                              ; preds = %154
  br label %168

138:                                              ; preds = %142, %135
  %139 = load i64, ptr %51, align 8
  %140 = extractvalue { ptr, i64 } %80, 1
  %141 = icmp ult i64 %139, %140
  br i1 %141, label %149, label %150

142:                                              ; preds = %162
  br label %138

143:                                              ; preds = %149
  %144 = extractvalue { ptr, i64 } %80, 0
  %145 = getelementptr inbounds i32, ptr %144, i64 %139
  %146 = load i32, ptr %145, align 4
  store i32 %146, ptr %49, align 4
  %147 = load i32, ptr %49, align 4
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %151, label %154

149:                                              ; preds = %138
  br label %143

150:                                              ; preds = %138
  call fastcc void @builtin.panicOutOfBounds(i64 %139, i64 %140)
  unreachable

151:                                              ; preds = %143
  %152 = load i64, ptr %51, align 8
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %159, label %160

154:                                              ; preds = %143
  br label %137

155:                                              ; preds = %160
  %156 = load i64, ptr %51, align 8
  %157 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %156, i64 1)
  %158 = extractvalue { i64, i1 } %157, 1
  br i1 %158, label %161, label %162

159:                                              ; preds = %151
  br label %86

160:                                              ; preds = %151
  br label %155

161:                                              ; preds = %155
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

162:                                              ; preds = %155
  %163 = extractvalue { i64, i1 } %157, 0
  store i64 %163, ptr %51, align 8
  br label %142

164:                                              ; preds = %184
  %165 = load i64, ptr %50, align 8
  %166 = load i64, ptr %51, align 8
  %167 = icmp ugt i64 %165, %166
  br i1 %167, label %198, label %199

168:                                              ; preds = %172, %137
  %169 = load i64, ptr %50, align 8
  %170 = extractvalue { ptr, i64 } %82, 1
  %171 = icmp ult i64 %169, %170
  br i1 %171, label %179, label %180

172:                                              ; preds = %192
  br label %168

173:                                              ; preds = %179
  %174 = extractvalue { ptr, i64 } %82, 0
  %175 = getelementptr inbounds i32, ptr %174, i64 %169
  %176 = load i32, ptr %175, align 4
  store i32 %176, ptr %48, align 4
  %177 = load i32, ptr %48, align 4
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %181, label %184

179:                                              ; preds = %168
  br label %173

180:                                              ; preds = %168
  call fastcc void @builtin.panicOutOfBounds(i64 %169, i64 %170)
  unreachable

181:                                              ; preds = %173
  %182 = load i64, ptr %50, align 8
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %189, label %190

184:                                              ; preds = %173
  br label %164

185:                                              ; preds = %190
  %186 = load i64, ptr %50, align 8
  %187 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %186, i64 1)
  %188 = extractvalue { i64, i1 } %187, 1
  br i1 %188, label %191, label %192

189:                                              ; preds = %181
  br label %86

190:                                              ; preds = %181
  br label %185

191:                                              ; preds = %185
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

192:                                              ; preds = %185
  %193 = extractvalue { i64, i1 } %187, 0
  store i64 %193, ptr %50, align 8
  br label %172

194:                                              ; preds = %199
  %195 = load i64, ptr %50, align 8
  %196 = extractvalue { ptr, i64 } %82, 1
  %197 = icmp ult i64 %195, %196
  br i1 %197, label %217, label %218

198:                                              ; preds = %164
  br label %86

199:                                              ; preds = %164
  br label %194

200:                                              ; preds = %217
  %201 = extractvalue { ptr, i64 } %82, 0
  %202 = getelementptr inbounds i32, ptr %201, i64 %195
  %203 = load i32, ptr %202, align 4
  store i32 %203, ptr %47, align 4
  %204 = load i32, ptr %47, align 4
  %205 = call i32 @llvm.ctlz.i32(i32 %204, i1 false)
  %206 = trunc i32 %205 to i6
  call void @llvm.memset.p0.i64(ptr align 4 %46, i8 -86, i64 8192, i1 false)
  %207 = ptrtoint ptr %46 to i64
  %208 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 0
  store i64 1296236545, ptr %208, align 8
  %209 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 1
  store i64 %207, ptr %209, align 8
  %210 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 2
  store i64 8192, ptr %210, align 8
  %211 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 3
  store i64 0, ptr %211, align 8
  %212 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 4
  store i64 0, ptr %212, align 8
  %213 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 5
  store i64 0, ptr %213, align 8
  %214 = ptrtoint ptr %45 to i64
  %215 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %214, i64 0)
  %216 = load i64, ptr %50, align 8
  store i64 %216, ptr %44, align 8
  br label %222

217:                                              ; preds = %194
  br label %200

218:                                              ; preds = %194
  call fastcc void @builtin.panicOutOfBounds(i64 %195, i64 %196)
  unreachable

219:                                              ; preds = %231
  %220 = extractvalue { ptr, i64 } %82, 1
  %221 = icmp ult i64 0, %220
  br i1 %221, label %291, label %292

222:                                              ; preds = %225, %200
  %223 = load i64, ptr %44, align 8
  %224 = icmp ugt i64 %223, 0
  br i1 %224, label %226, label %231

225:                                              ; preds = %277
  br label %222

226:                                              ; preds = %222
  %227 = load i64, ptr %44, align 8
  %228 = load i64, ptr %44, align 8
  %229 = extractvalue { ptr, i64 } %82, 1
  %230 = icmp ult i64 %228, %229
  br i1 %230, label %241, label %242

231:                                              ; preds = %222
  br label %219

232:                                              ; preds = %241
  %233 = extractvalue { ptr, i64 } %82, 0
  %234 = getelementptr inbounds i32, ptr %233, i64 %228
  %235 = load i32, ptr %234, align 4
  store i32 %235, ptr %43, align 4
  %236 = load i32, ptr %43, align 4
  %237 = call fastcc i32 @math.shl__anon_3896(i32 %236, i6 %206)
  %238 = load i64, ptr %44, align 8
  %239 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %238, i64 1)
  %240 = extractvalue { i64, i1 } %239, 1
  br i1 %240, label %243, label %244

241:                                              ; preds = %226
  br label %232

242:                                              ; preds = %226
  call fastcc void @builtin.panicOutOfBounds(i64 %228, i64 %229)
  unreachable

243:                                              ; preds = %232
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

244:                                              ; preds = %232
  %245 = extractvalue { i64, i1 } %239, 0
  %246 = extractvalue { ptr, i64 } %82, 1
  %247 = icmp ult i64 %245, %246
  br i1 %247, label %255, label %256

248:                                              ; preds = %255
  %249 = extractvalue { ptr, i64 } %82, 0
  %250 = getelementptr inbounds i32, ptr %249, i64 %245
  %251 = load i32, ptr %250, align 4
  store i32 %251, ptr %42, align 4
  %252 = load i32, ptr %42, align 4
  %253 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %206)
  %254 = extractvalue { i6, i1 } %253, 1
  br i1 %254, label %257, label %258

255:                                              ; preds = %244
  br label %248

256:                                              ; preds = %244
  call fastcc void @builtin.panicOutOfBounds(i64 %245, i64 %246)
  unreachable

257:                                              ; preds = %248
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

258:                                              ; preds = %248
  %259 = extractvalue { i6, i1 } %253, 0
  %260 = call fastcc i32 @math.shr__anon_3897(i32 %252, i6 %259)
  %261 = or i32 %237, %260
  %262 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %263 = insertvalue { ptr, i64 } poison, ptr %262, 0
  %264 = insertvalue { ptr, i64 } %263, i64 2048, 1
  store { ptr, i64 } %264, ptr %41, align 8
  %265 = load { ptr, i64 }, ptr %41, align 8
  %266 = extractvalue { ptr, i64 } %265, 1
  %267 = icmp ult i64 %227, %266
  br i1 %267, label %274, label %275

268:                                              ; preds = %274
  %269 = extractvalue { ptr, i64 } %265, 0
  %270 = getelementptr inbounds i32, ptr %269, i64 %227
  store i32 %261, ptr %270, align 4
  %271 = load i64, ptr %44, align 8
  %272 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %271, i64 1)
  %273 = extractvalue { i64, i1 } %272, 1
  br i1 %273, label %276, label %277

274:                                              ; preds = %258
  br label %268

275:                                              ; preds = %258
  call fastcc void @builtin.panicOutOfBounds(i64 %227, i64 %266)
  unreachable

276:                                              ; preds = %268
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

277:                                              ; preds = %268
  %278 = extractvalue { i64, i1 } %272, 0
  store i64 %278, ptr %44, align 8
  br label %225

279:                                              ; preds = %291
  %280 = extractvalue { ptr, i64 } %82, 0
  %281 = getelementptr inbounds i32, ptr %280, i64 0
  %282 = load i32, ptr %281, align 4
  store i32 %282, ptr %40, align 4
  %283 = load i32, ptr %40, align 4
  %284 = call fastcc i32 @math.shl__anon_3896(i32 %283, i6 %206)
  %285 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %286 = insertvalue { ptr, i64 } poison, ptr %285, 0
  %287 = insertvalue { ptr, i64 } %286, i64 2048, 1
  store { ptr, i64 } %287, ptr %39, align 8
  %288 = load { ptr, i64 }, ptr %39, align 8
  %289 = extractvalue { ptr, i64 } %288, 1
  %290 = icmp ult i64 0, %289
  br i1 %290, label %308, label %309

291:                                              ; preds = %219
  br label %279

292:                                              ; preds = %219
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %220)
  unreachable

293:                                              ; preds = %308
  %294 = extractvalue { ptr, i64 } %288, 0
  %295 = getelementptr inbounds i32, ptr %294, i64 0
  store i32 %284, ptr %295, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %38, i8 -86, i64 8196, i1 false)
  %296 = ptrtoint ptr %38 to i64
  %297 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 0
  store i64 1296236545, ptr %297, align 8
  %298 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 1
  store i64 %296, ptr %298, align 8
  %299 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 2
  store i64 8196, ptr %299, align 8
  %300 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 3
  store i64 0, ptr %300, align 8
  %301 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 4
  store i64 0, ptr %301, align 8
  %302 = getelementptr inbounds [6 x i64], ptr %45, i64 0, i64 5
  store i64 0, ptr %302, align 8
  %303 = ptrtoint ptr %45 to i64
  %304 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %303, i64 0)
  %305 = load i64, ptr %51, align 8
  %306 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %305, i64 1)
  %307 = extractvalue { i64, i1 } %306, 1
  br i1 %307, label %310, label %311

308:                                              ; preds = %279
  br label %293

309:                                              ; preds = %279
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %289)
  unreachable

310:                                              ; preds = %293
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

311:                                              ; preds = %293
  %312 = extractvalue { i64, i1 } %306, 0
  %313 = load i64, ptr %51, align 8
  %314 = extractvalue { ptr, i64 } %80, 1
  %315 = icmp ult i64 %313, %314
  br i1 %315, label %323, label %324

316:                                              ; preds = %323
  %317 = extractvalue { ptr, i64 } %80, 0
  %318 = getelementptr inbounds i32, ptr %317, i64 %313
  %319 = load i32, ptr %318, align 4
  store i32 %319, ptr %37, align 4
  %320 = load i32, ptr %37, align 4
  %321 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %206)
  %322 = extractvalue { i6, i1 } %321, 1
  br i1 %322, label %325, label %326

323:                                              ; preds = %311
  br label %316

324:                                              ; preds = %311
  call fastcc void @builtin.panicOutOfBounds(i64 %313, i64 %314)
  unreachable

325:                                              ; preds = %316
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

326:                                              ; preds = %316
  %327 = extractvalue { i6, i1 } %321, 0
  %328 = call fastcc i32 @math.shr__anon_3897(i32 %320, i6 %327)
  %329 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %330 = insertvalue { ptr, i64 } poison, ptr %329, 0
  %331 = insertvalue { ptr, i64 } %330, i64 2049, 1
  store { ptr, i64 } %331, ptr %36, align 8
  %332 = load { ptr, i64 }, ptr %36, align 8
  %333 = extractvalue { ptr, i64 } %332, 1
  %334 = icmp ult i64 %312, %333
  br i1 %334, label %339, label %340

335:                                              ; preds = %339
  %336 = extractvalue { ptr, i64 } %332, 0
  %337 = getelementptr inbounds i32, ptr %336, i64 %312
  store i32 %328, ptr %337, align 4
  %338 = load i64, ptr %51, align 8
  store i64 %338, ptr %44, align 8
  br label %344

339:                                              ; preds = %326
  br label %335

340:                                              ; preds = %326
  call fastcc void @builtin.panicOutOfBounds(i64 %312, i64 %333)
  unreachable

341:                                              ; preds = %353
  %342 = extractvalue { ptr, i64 } %80, 1
  %343 = icmp ult i64 0, %342
  br i1 %343, label %413, label %414

344:                                              ; preds = %347, %335
  %345 = load i64, ptr %44, align 8
  %346 = icmp ugt i64 %345, 0
  br i1 %346, label %348, label %353

347:                                              ; preds = %399
  br label %344

348:                                              ; preds = %344
  %349 = load i64, ptr %44, align 8
  %350 = load i64, ptr %44, align 8
  %351 = extractvalue { ptr, i64 } %80, 1
  %352 = icmp ult i64 %350, %351
  br i1 %352, label %363, label %364

353:                                              ; preds = %344
  br label %341

354:                                              ; preds = %363
  %355 = extractvalue { ptr, i64 } %80, 0
  %356 = getelementptr inbounds i32, ptr %355, i64 %350
  %357 = load i32, ptr %356, align 4
  store i32 %357, ptr %35, align 4
  %358 = load i32, ptr %35, align 4
  %359 = call fastcc i32 @math.shl__anon_3896(i32 %358, i6 %206)
  %360 = load i64, ptr %44, align 8
  %361 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %360, i64 1)
  %362 = extractvalue { i64, i1 } %361, 1
  br i1 %362, label %365, label %366

363:                                              ; preds = %348
  br label %354

364:                                              ; preds = %348
  call fastcc void @builtin.panicOutOfBounds(i64 %350, i64 %351)
  unreachable

365:                                              ; preds = %354
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

366:                                              ; preds = %354
  %367 = extractvalue { i64, i1 } %361, 0
  %368 = extractvalue { ptr, i64 } %80, 1
  %369 = icmp ult i64 %367, %368
  br i1 %369, label %377, label %378

370:                                              ; preds = %377
  %371 = extractvalue { ptr, i64 } %80, 0
  %372 = getelementptr inbounds i32, ptr %371, i64 %367
  %373 = load i32, ptr %372, align 4
  store i32 %373, ptr %34, align 4
  %374 = load i32, ptr %34, align 4
  %375 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %206)
  %376 = extractvalue { i6, i1 } %375, 1
  br i1 %376, label %379, label %380

377:                                              ; preds = %366
  br label %370

378:                                              ; preds = %366
  call fastcc void @builtin.panicOutOfBounds(i64 %367, i64 %368)
  unreachable

379:                                              ; preds = %370
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

380:                                              ; preds = %370
  %381 = extractvalue { i6, i1 } %375, 0
  %382 = call fastcc i32 @math.shr__anon_3897(i32 %374, i6 %381)
  %383 = or i32 %359, %382
  %384 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %385 = insertvalue { ptr, i64 } poison, ptr %384, 0
  %386 = insertvalue { ptr, i64 } %385, i64 2049, 1
  store { ptr, i64 } %386, ptr %33, align 8
  %387 = load { ptr, i64 }, ptr %33, align 8
  %388 = extractvalue { ptr, i64 } %387, 1
  %389 = icmp ult i64 %349, %388
  br i1 %389, label %396, label %397

390:                                              ; preds = %396
  %391 = extractvalue { ptr, i64 } %387, 0
  %392 = getelementptr inbounds i32, ptr %391, i64 %349
  store i32 %383, ptr %392, align 4
  %393 = load i64, ptr %44, align 8
  %394 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %393, i64 1)
  %395 = extractvalue { i64, i1 } %394, 1
  br i1 %395, label %398, label %399

396:                                              ; preds = %380
  br label %390

397:                                              ; preds = %380
  call fastcc void @builtin.panicOutOfBounds(i64 %349, i64 %388)
  unreachable

398:                                              ; preds = %390
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

399:                                              ; preds = %390
  %400 = extractvalue { i64, i1 } %394, 0
  store i64 %400, ptr %44, align 8
  br label %347

401:                                              ; preds = %413
  %402 = extractvalue { ptr, i64 } %80, 0
  %403 = getelementptr inbounds i32, ptr %402, i64 0
  %404 = load i32, ptr %403, align 4
  store i32 %404, ptr %32, align 4
  %405 = load i32, ptr %32, align 4
  %406 = call fastcc i32 @math.shl__anon_3896(i32 %405, i6 %206)
  %407 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %408 = insertvalue { ptr, i64 } poison, ptr %407, 0
  %409 = insertvalue { ptr, i64 } %408, i64 2049, 1
  store { ptr, i64 } %409, ptr %31, align 8
  %410 = load { ptr, i64 }, ptr %31, align 8
  %411 = extractvalue { ptr, i64 } %410, 1
  %412 = icmp ult i64 0, %411
  br i1 %412, label %422, label %423

413:                                              ; preds = %341
  br label %401

414:                                              ; preds = %341
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %342)
  unreachable

415:                                              ; preds = %422
  %416 = extractvalue { ptr, i64 } %410, 0
  %417 = getelementptr inbounds i32, ptr %416, i64 0
  store i32 %406, ptr %417, align 4
  %418 = load i64, ptr %51, align 8
  %419 = load i64, ptr %50, align 8
  %420 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %418, i64 %419)
  %421 = extractvalue { i64, i1 } %420, 1
  br i1 %421, label %424, label %425

422:                                              ; preds = %401
  br label %415

423:                                              ; preds = %401
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %411)
  unreachable

424:                                              ; preds = %415
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

425:                                              ; preds = %415
  %426 = extractvalue { i64, i1 } %420, 0
  store i64 %426, ptr %30, align 8
  br label %428

427:                                              ; preds = %964
  br label %86

428:                                              ; preds = %967, %425
  %429 = load i64, ptr %30, align 8
  %430 = load i64, ptr %50, align 8
  %431 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %429, i64 %430)
  %432 = extractvalue { i64, i1 } %431, 1
  br i1 %432, label %433, label %434

433:                                              ; preds = %428
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

434:                                              ; preds = %428
  %435 = extractvalue { i64, i1 } %431, 0
  %436 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %435, i64 1)
  %437 = extractvalue { i64, i1 } %436, 1
  br i1 %437, label %438, label %439

438:                                              ; preds = %434
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

439:                                              ; preds = %434
  %440 = extractvalue { i64, i1 } %436, 0
  %441 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %442 = insertvalue { ptr, i64 } poison, ptr %441, 0
  %443 = insertvalue { ptr, i64 } %442, i64 2049, 1
  %444 = extractvalue { ptr, i64 } %443, 1
  %445 = icmp ult i64 %440, %444
  br i1 %445, label %457, label %458

446:                                              ; preds = %457
  %447 = extractvalue { ptr, i64 } %443, 0
  %448 = getelementptr inbounds i32, ptr %447, i64 %440
  %449 = load i32, ptr %448, align 4
  store i32 %449, ptr %29, align 4
  %450 = load i32, ptr %29, align 4
  %451 = zext i32 %450 to i64
  %452 = shl i64 %451, 32
  %453 = load i64, ptr %30, align 8
  %454 = load i64, ptr %50, align 8
  %455 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %453, i64 %454)
  %456 = extractvalue { i64, i1 } %455, 1
  br i1 %456, label %459, label %460

457:                                              ; preds = %439
  br label %446

458:                                              ; preds = %439
  call fastcc void @builtin.panicOutOfBounds(i64 %440, i64 %444)
  unreachable

459:                                              ; preds = %446
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

460:                                              ; preds = %446
  %461 = extractvalue { i64, i1 } %455, 0
  %462 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %463 = insertvalue { ptr, i64 } poison, ptr %462, 0
  %464 = insertvalue { ptr, i64 } %463, i64 2049, 1
  %465 = extractvalue { ptr, i64 } %464, 1
  %466 = icmp ult i64 %461, %465
  br i1 %466, label %475, label %476

467:                                              ; preds = %475
  %468 = extractvalue { ptr, i64 } %464, 0
  %469 = getelementptr inbounds i32, ptr %468, i64 %461
  %470 = load i32, ptr %469, align 4
  store i32 %470, ptr %28, align 4
  %471 = load i32, ptr %28, align 4
  %472 = zext i32 %471 to i64
  %473 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %452, i64 %472)
  %474 = extractvalue { i64, i1 } %473, 1
  br i1 %474, label %477, label %478

475:                                              ; preds = %460
  br label %467

476:                                              ; preds = %460
  call fastcc void @builtin.panicOutOfBounds(i64 %461, i64 %465)
  unreachable

477:                                              ; preds = %467
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

478:                                              ; preds = %467
  %479 = extractvalue { i64, i1 } %473, 0
  %480 = load i64, ptr %50, align 8
  %481 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %482 = insertvalue { ptr, i64 } poison, ptr %481, 0
  %483 = insertvalue { ptr, i64 } %482, i64 2048, 1
  %484 = extractvalue { ptr, i64 } %483, 1
  %485 = icmp ult i64 %480, %484
  br i1 %485, label %493, label %494

486:                                              ; preds = %493
  %487 = extractvalue { ptr, i64 } %483, 0
  %488 = getelementptr inbounds i32, ptr %487, i64 %480
  %489 = load i32, ptr %488, align 4
  store i32 %489, ptr %26, align 4
  %490 = load i32, ptr %26, align 4
  %491 = zext i32 %490 to i64
  %492 = icmp ne i64 %491, 0
  br i1 %492, label %503, label %504

493:                                              ; preds = %478
  br label %486

494:                                              ; preds = %478
  call fastcc void @builtin.panicOutOfBounds(i64 %480, i64 %484)
  unreachable

495:                                              ; preds = %503
  %496 = udiv i64 %479, %491
  store i64 %496, ptr %27, align 8
  %497 = load i64, ptr %50, align 8
  %498 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %499 = insertvalue { ptr, i64 } poison, ptr %498, 0
  %500 = insertvalue { ptr, i64 } %499, i64 2048, 1
  %501 = extractvalue { ptr, i64 } %500, 1
  %502 = icmp ult i64 %497, %501
  br i1 %502, label %512, label %513

503:                                              ; preds = %486
  br label %495

504:                                              ; preds = %486
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @114)
  unreachable

505:                                              ; preds = %512
  %506 = extractvalue { ptr, i64 } %500, 0
  %507 = getelementptr inbounds i32, ptr %506, i64 %497
  %508 = load i32, ptr %507, align 4
  store i32 %508, ptr %24, align 4
  %509 = load i32, ptr %24, align 4
  %510 = zext i32 %509 to i64
  %511 = icmp ne i64 %510, 0
  br i1 %511, label %516, label %517

512:                                              ; preds = %495
  br label %505

513:                                              ; preds = %495
  call fastcc void @builtin.panicOutOfBounds(i64 %497, i64 %501)
  unreachable

514:                                              ; preds = %516
  %515 = urem i64 %479, %510
  store i64 %515, ptr %25, align 8
  br label %519

516:                                              ; preds = %505
  br label %514

517:                                              ; preds = %505
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @114)
  unreachable

518:                                              ; preds = %523
  store i64 0, ptr %20, align 8
  store i64 0, ptr %44, align 8
  br label %630

519:                                              ; preds = %522, %514
  %520 = load i64, ptr %27, align 8
  %521 = icmp uge i64 %520, 4294967296
  br i1 %521, label %526, label %527

522:                                              ; preds = %623
  br label %519

523:                                              ; preds = %596, %622
  br label %518

524:                                              ; preds = %530, %526
  %525 = phi i1 [ true, %526 ], [ %531, %530 ]
  br i1 %525, label %592, label %596

526:                                              ; preds = %519
  br label %524

527:                                              ; preds = %519
  %528 = load i64, ptr %50, align 8
  %529 = icmp ugt i64 %528, 0
  br i1 %529, label %532, label %537

530:                                              ; preds = %537, %589
  %531 = phi i1 [ %591, %589 ], [ false, %537 ]
  br label %524

532:                                              ; preds = %527
  %533 = load i64, ptr %27, align 8
  %534 = load i64, ptr %50, align 8
  %535 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %534, i64 1)
  %536 = extractvalue { i64, i1 } %535, 1
  br i1 %536, label %538, label %539

537:                                              ; preds = %527
  br label %530

538:                                              ; preds = %532
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

539:                                              ; preds = %532
  %540 = extractvalue { i64, i1 } %535, 0
  %541 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %542 = insertvalue { ptr, i64 } poison, ptr %541, 0
  %543 = insertvalue { ptr, i64 } %542, i64 2048, 1
  %544 = extractvalue { ptr, i64 } %543, 1
  %545 = icmp ult i64 %540, %544
  br i1 %545, label %554, label %555

546:                                              ; preds = %554
  %547 = extractvalue { ptr, i64 } %543, 0
  %548 = getelementptr inbounds i32, ptr %547, i64 %540
  %549 = load i32, ptr %548, align 4
  store i32 %549, ptr %23, align 4
  %550 = load i32, ptr %23, align 4
  %551 = zext i32 %550 to i64
  %552 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %533, i64 %551)
  %553 = extractvalue { i64, i1 } %552, 1
  br i1 %553, label %556, label %557

554:                                              ; preds = %539
  br label %546

555:                                              ; preds = %539
  call fastcc void @builtin.panicOutOfBounds(i64 %540, i64 %544)
  unreachable

556:                                              ; preds = %546
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

557:                                              ; preds = %546
  %558 = extractvalue { i64, i1 } %552, 0
  %559 = load i64, ptr %25, align 8
  %560 = shl i64 %559, 32
  %561 = load i64, ptr %30, align 8
  %562 = load i64, ptr %50, align 8
  %563 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %561, i64 %562)
  %564 = extractvalue { i64, i1 } %563, 1
  br i1 %564, label %565, label %566

565:                                              ; preds = %557
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

566:                                              ; preds = %557
  %567 = extractvalue { i64, i1 } %563, 0
  %568 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %567, i64 1)
  %569 = extractvalue { i64, i1 } %568, 1
  br i1 %569, label %570, label %571

570:                                              ; preds = %566
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

571:                                              ; preds = %566
  %572 = extractvalue { i64, i1 } %568, 0
  %573 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %574 = insertvalue { ptr, i64 } poison, ptr %573, 0
  %575 = insertvalue { ptr, i64 } %574, i64 2049, 1
  %576 = extractvalue { ptr, i64 } %575, 1
  %577 = icmp ult i64 %572, %576
  br i1 %577, label %586, label %587

578:                                              ; preds = %586
  %579 = extractvalue { ptr, i64 } %575, 0
  %580 = getelementptr inbounds i32, ptr %579, i64 %572
  %581 = load i32, ptr %580, align 4
  store i32 %581, ptr %22, align 4
  %582 = load i32, ptr %22, align 4
  %583 = zext i32 %582 to i64
  %584 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %560, i64 %583)
  %585 = extractvalue { i64, i1 } %584, 1
  br i1 %585, label %588, label %589

586:                                              ; preds = %571
  br label %578

587:                                              ; preds = %571
  call fastcc void @builtin.panicOutOfBounds(i64 %572, i64 %576)
  unreachable

588:                                              ; preds = %578
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

589:                                              ; preds = %578
  %590 = extractvalue { i64, i1 } %584, 0
  %591 = icmp ugt i64 %558, %590
  br label %530

592:                                              ; preds = %524
  %593 = load i64, ptr %27, align 8
  %594 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %593, i64 1)
  %595 = extractvalue { i64, i1 } %594, 1
  br i1 %595, label %597, label %598

596:                                              ; preds = %524
  br label %523

597:                                              ; preds = %592
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

598:                                              ; preds = %592
  %599 = extractvalue { i64, i1 } %594, 0
  store i64 %599, ptr %27, align 8
  %600 = load i64, ptr %25, align 8
  %601 = load i64, ptr %50, align 8
  %602 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %603 = insertvalue { ptr, i64 } poison, ptr %602, 0
  %604 = insertvalue { ptr, i64 } %603, i64 2048, 1
  %605 = extractvalue { ptr, i64 } %604, 1
  %606 = icmp ult i64 %601, %605
  br i1 %606, label %615, label %616

607:                                              ; preds = %615
  %608 = extractvalue { ptr, i64 } %604, 0
  %609 = getelementptr inbounds i32, ptr %608, i64 %601
  %610 = load i32, ptr %609, align 4
  store i32 %610, ptr %21, align 4
  %611 = load i32, ptr %21, align 4
  %612 = zext i32 %611 to i64
  %613 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %600, i64 %612)
  %614 = extractvalue { i64, i1 } %613, 1
  br i1 %614, label %617, label %618

615:                                              ; preds = %598
  br label %607

616:                                              ; preds = %598
  call fastcc void @builtin.panicOutOfBounds(i64 %601, i64 %605)
  unreachable

617:                                              ; preds = %607
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

618:                                              ; preds = %607
  %619 = extractvalue { i64, i1 } %613, 0
  store i64 %619, ptr %25, align 8
  %620 = load i64, ptr %25, align 8
  %621 = icmp ult i64 %620, 4294967296
  br i1 %621, label %623, label %624

622:                                              ; preds = %624
  br label %523

623:                                              ; preds = %618
  br label %522

624:                                              ; preds = %618
  br label %622

625:                                              ; preds = %643
  %626 = load i64, ptr %30, align 8
  %627 = load i64, ptr %50, align 8
  %628 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %626, i64 %627)
  %629 = extractvalue { i64, i1 } %628, 1
  br i1 %629, label %727, label %728

630:                                              ; preds = %634, %518
  %631 = load i64, ptr %44, align 8
  %632 = load i64, ptr %50, align 8
  %633 = icmp ule i64 %631, %632
  br i1 %633, label %635, label %643

634:                                              ; preds = %725
  br label %630

635:                                              ; preds = %630
  %636 = load i64, ptr %27, align 8
  %637 = load i64, ptr %44, align 8
  %638 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %639 = insertvalue { ptr, i64 } poison, ptr %638, 0
  %640 = insertvalue { ptr, i64 } %639, i64 2048, 1
  %641 = extractvalue { ptr, i64 } %640, 1
  %642 = icmp ult i64 %637, %641
  br i1 %642, label %652, label %653

643:                                              ; preds = %630
  br label %625

644:                                              ; preds = %652
  %645 = extractvalue { ptr, i64 } %640, 0
  %646 = getelementptr inbounds i32, ptr %645, i64 %637
  %647 = load i32, ptr %646, align 4
  store i32 %647, ptr %19, align 4
  %648 = load i32, ptr %19, align 4
  %649 = zext i32 %648 to i64
  %650 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %636, i64 %649)
  %651 = extractvalue { i64, i1 } %650, 1
  br i1 %651, label %654, label %655

652:                                              ; preds = %635
  br label %644

653:                                              ; preds = %635
  call fastcc void @builtin.panicOutOfBounds(i64 %637, i64 %641)
  unreachable

654:                                              ; preds = %644
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

655:                                              ; preds = %644
  %656 = extractvalue { i64, i1 } %650, 0
  %657 = load i64, ptr %44, align 8
  %658 = load i64, ptr %30, align 8
  %659 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %657, i64 %658)
  %660 = extractvalue { i64, i1 } %659, 1
  br i1 %660, label %661, label %662

661:                                              ; preds = %655
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

662:                                              ; preds = %655
  %663 = extractvalue { i64, i1 } %659, 0
  %664 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %665 = insertvalue { ptr, i64 } poison, ptr %664, 0
  %666 = insertvalue { ptr, i64 } %665, i64 2049, 1
  %667 = extractvalue { ptr, i64 } %666, 1
  %668 = icmp ult i64 %663, %667
  br i1 %668, label %678, label %679

669:                                              ; preds = %678
  %670 = extractvalue { ptr, i64 } %666, 0
  %671 = getelementptr inbounds i32, ptr %670, i64 %663
  %672 = load i32, ptr %671, align 4
  store i32 %672, ptr %18, align 4
  %673 = load i32, ptr %18, align 4
  %674 = load i64, ptr %20, align 8
  %675 = zext i32 %673 to i64
  %676 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %675, i64 %674)
  %677 = extractvalue { i64, i1 } %676, 1
  br i1 %677, label %680, label %681

678:                                              ; preds = %662
  br label %669

679:                                              ; preds = %662
  call fastcc void @builtin.panicOutOfBounds(i64 %663, i64 %667)
  unreachable

680:                                              ; preds = %669
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

681:                                              ; preds = %669
  %682 = extractvalue { i64, i1 } %676, 0
  %683 = trunc i64 %656 to i32
  %684 = zext i32 %683 to i64
  %685 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %682, i64 %684)
  %686 = extractvalue { i64, i1 } %685, 1
  br i1 %686, label %687, label %688

687:                                              ; preds = %681
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

688:                                              ; preds = %681
  %689 = extractvalue { i64, i1 } %685, 0
  %690 = load i64, ptr %44, align 8
  %691 = load i64, ptr %30, align 8
  %692 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %690, i64 %691)
  %693 = extractvalue { i64, i1 } %692, 1
  br i1 %693, label %694, label %695

694:                                              ; preds = %688
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

695:                                              ; preds = %688
  %696 = extractvalue { i64, i1 } %692, 0
  %697 = trunc i64 %689 to i32
  %698 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %699 = insertvalue { ptr, i64 } poison, ptr %698, 0
  %700 = insertvalue { ptr, i64 } %699, i64 2049, 1
  store { ptr, i64 } %700, ptr %17, align 8
  %701 = load { ptr, i64 }, ptr %17, align 8
  %702 = extractvalue { ptr, i64 } %701, 1
  %703 = icmp ult i64 %696, %702
  br i1 %703, label %710, label %711

704:                                              ; preds = %710
  %705 = extractvalue { ptr, i64 } %701, 0
  %706 = getelementptr inbounds i32, ptr %705, i64 %696
  store i32 %697, ptr %706, align 4
  %707 = lshr i64 %656, 32
  %708 = sub i64 9223372036854775807, %707
  %709 = icmp ule i64 %708, 9223372036854775807
  br i1 %709, label %716, label %717

710:                                              ; preds = %695
  br label %704

711:                                              ; preds = %695
  call fastcc void @builtin.panicOutOfBounds(i64 %696, i64 %702)
  unreachable

712:                                              ; preds = %716
  %713 = ashr i64 %689, 32
  %714 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %707, i64 %713)
  %715 = extractvalue { i64, i1 } %714, 1
  br i1 %715, label %718, label %719

716:                                              ; preds = %704
  br label %712

717:                                              ; preds = %704
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @114)
  unreachable

718:                                              ; preds = %712
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

719:                                              ; preds = %712
  %720 = extractvalue { i64, i1 } %714, 0
  store i64 %720, ptr %20, align 8
  %721 = load i64, ptr %44, align 8
  %722 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %721, i64 1)
  %723 = extractvalue { i64, i1 } %722, 1
  br i1 %723, label %724, label %725

724:                                              ; preds = %719
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

725:                                              ; preds = %719
  %726 = extractvalue { i64, i1 } %722, 0
  store i64 %726, ptr %44, align 8
  br label %634

727:                                              ; preds = %625
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

728:                                              ; preds = %625
  %729 = extractvalue { i64, i1 } %628, 0
  %730 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %729, i64 1)
  %731 = extractvalue { i64, i1 } %730, 1
  br i1 %731, label %732, label %733

732:                                              ; preds = %728
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

733:                                              ; preds = %728
  %734 = extractvalue { i64, i1 } %730, 0
  %735 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %736 = insertvalue { ptr, i64 } poison, ptr %735, 0
  %737 = insertvalue { ptr, i64 } %736, i64 2049, 1
  %738 = extractvalue { ptr, i64 } %737, 1
  %739 = icmp ult i64 %734, %738
  br i1 %739, label %752, label %753

740:                                              ; preds = %752
  %741 = extractvalue { ptr, i64 } %737, 0
  %742 = getelementptr inbounds i32, ptr %741, i64 %734
  %743 = load i32, ptr %742, align 4
  store i32 %743, ptr %16, align 4
  %744 = load i32, ptr %16, align 4
  %745 = load i64, ptr %20, align 8
  %746 = zext i32 %744 to i64
  %747 = sub i64 %746, %745
  %748 = load i64, ptr %30, align 8
  %749 = load i64, ptr %50, align 8
  %750 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %748, i64 %749)
  %751 = extractvalue { i64, i1 } %750, 1
  br i1 %751, label %754, label %755

752:                                              ; preds = %733
  br label %740

753:                                              ; preds = %733
  call fastcc void @builtin.panicOutOfBounds(i64 %734, i64 %738)
  unreachable

754:                                              ; preds = %740
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

755:                                              ; preds = %740
  %756 = extractvalue { i64, i1 } %750, 0
  %757 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %756, i64 1)
  %758 = extractvalue { i64, i1 } %757, 1
  br i1 %758, label %759, label %760

759:                                              ; preds = %755
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

760:                                              ; preds = %755
  %761 = extractvalue { i64, i1 } %757, 0
  %762 = trunc i64 %747 to i32
  %763 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %764 = insertvalue { ptr, i64 } poison, ptr %763, 0
  %765 = insertvalue { ptr, i64 } %764, i64 2049, 1
  store { ptr, i64 } %765, ptr %15, align 8
  %766 = load { ptr, i64 }, ptr %15, align 8
  %767 = extractvalue { ptr, i64 } %766, 1
  %768 = icmp ult i64 %761, %767
  br i1 %768, label %774, label %775

769:                                              ; preds = %774
  %770 = extractvalue { ptr, i64 } %766, 0
  %771 = getelementptr inbounds i32, ptr %770, i64 %761
  store i32 %762, ptr %771, align 4
  %772 = extractvalue { ptr, i64 } %78, 0
  %773 = icmp ne ptr %772, null
  br i1 %773, label %778, label %785

774:                                              ; preds = %760
  br label %769

775:                                              ; preds = %760
  call fastcc void @builtin.panicOutOfBounds(i64 %761, i64 %767)
  unreachable

776:                                              ; preds = %785, %786
  %777 = icmp slt i64 %747, 0
  br i1 %777, label %794, label %797

778:                                              ; preds = %769
  %779 = load i64, ptr %30, align 8
  %780 = load i64, ptr %27, align 8
  %781 = trunc i64 %780 to i32
  store { ptr, i64 } %78, ptr %14, align 8
  %782 = load { ptr, i64 }, ptr %14, align 8
  %783 = extractvalue { ptr, i64 } %782, 1
  %784 = icmp ult i64 %779, %783
  br i1 %784, label %789, label %790

785:                                              ; preds = %769
  br label %776

786:                                              ; preds = %789
  %787 = extractvalue { ptr, i64 } %782, 0
  %788 = getelementptr inbounds i32, ptr %787, i64 %779
  store i32 %781, ptr %788, align 4
  br label %776

789:                                              ; preds = %778
  br label %786

790:                                              ; preds = %778
  call fastcc void @builtin.panicOutOfBounds(i64 %779, i64 %783)
  unreachable

791:                                              ; preds = %797, %955
  %792 = load i64, ptr %30, align 8
  %793 = icmp eq i64 %792, 0
  br i1 %793, label %964, label %965

794:                                              ; preds = %776
  %795 = extractvalue { ptr, i64 } %78, 0
  %796 = icmp ne ptr %795, null
  br i1 %796, label %799, label %805

797:                                              ; preds = %776
  br label %791

798:                                              ; preds = %805, %821
  store i64 0, ptr %10, align 8
  store i64 0, ptr %44, align 8
  br label %831

799:                                              ; preds = %794
  %800 = load i64, ptr %30, align 8
  %801 = load i64, ptr %30, align 8
  store { ptr, i64 } %78, ptr %13, align 8
  %802 = load { ptr, i64 }, ptr %13, align 8
  %803 = extractvalue { ptr, i64 } %802, 1
  %804 = icmp ult i64 %801, %803
  br i1 %804, label %813, label %814

805:                                              ; preds = %794
  br label %798

806:                                              ; preds = %813
  %807 = extractvalue { ptr, i64 } %802, 0
  %808 = getelementptr inbounds i32, ptr %807, i64 %801
  %809 = load i32, ptr %808, align 4
  store i32 %809, ptr %12, align 4
  %810 = load i32, ptr %12, align 4
  %811 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %810, i32 1)
  %812 = extractvalue { i32, i1 } %811, 1
  br i1 %812, label %815, label %816

813:                                              ; preds = %799
  br label %806

814:                                              ; preds = %799
  call fastcc void @builtin.panicOutOfBounds(i64 %801, i64 %803)
  unreachable

815:                                              ; preds = %806
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

816:                                              ; preds = %806
  %817 = extractvalue { i32, i1 } %811, 0
  store { ptr, i64 } %78, ptr %11, align 8
  %818 = load { ptr, i64 }, ptr %11, align 8
  %819 = extractvalue { ptr, i64 } %818, 1
  %820 = icmp ult i64 %800, %819
  br i1 %820, label %824, label %825

821:                                              ; preds = %824
  %822 = extractvalue { ptr, i64 } %818, 0
  %823 = getelementptr inbounds i32, ptr %822, i64 %800
  store i32 %817, ptr %823, align 4
  br label %798

824:                                              ; preds = %816
  br label %821

825:                                              ; preds = %816
  call fastcc void @builtin.panicOutOfBounds(i64 %800, i64 %819)
  unreachable

826:                                              ; preds = %841
  %827 = load i64, ptr %30, align 8
  %828 = load i64, ptr %50, align 8
  %829 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %827, i64 %828)
  %830 = extractvalue { i64, i1 } %829, 1
  br i1 %830, label %909, label %910

831:                                              ; preds = %835, %798
  %832 = load i64, ptr %44, align 8
  %833 = load i64, ptr %50, align 8
  %834 = icmp ule i64 %832, %833
  br i1 %834, label %836, label %841

835:                                              ; preds = %907
  br label %831

836:                                              ; preds = %831
  %837 = load i64, ptr %44, align 8
  %838 = load i64, ptr %30, align 8
  %839 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %837, i64 %838)
  %840 = extractvalue { i64, i1 } %839, 1
  br i1 %840, label %842, label %843

841:                                              ; preds = %831
  br label %826

842:                                              ; preds = %836
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

843:                                              ; preds = %836
  %844 = extractvalue { i64, i1 } %839, 0
  %845 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %846 = insertvalue { ptr, i64 } poison, ptr %845, 0
  %847 = insertvalue { ptr, i64 } %846, i64 2049, 1
  %848 = extractvalue { ptr, i64 } %847, 1
  %849 = icmp ult i64 %844, %848
  br i1 %849, label %862, label %863

850:                                              ; preds = %862
  %851 = extractvalue { ptr, i64 } %847, 0
  %852 = getelementptr inbounds i32, ptr %851, i64 %844
  %853 = load i32, ptr %852, align 4
  store i32 %853, ptr %9, align 4
  %854 = load i32, ptr %9, align 4
  %855 = zext i32 %854 to i64
  %856 = load i64, ptr %44, align 8
  %857 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %858 = insertvalue { ptr, i64 } poison, ptr %857, 0
  %859 = insertvalue { ptr, i64 } %858, i64 2048, 1
  %860 = extractvalue { ptr, i64 } %859, 1
  %861 = icmp ult i64 %856, %860
  br i1 %861, label %872, label %873

862:                                              ; preds = %843
  br label %850

863:                                              ; preds = %843
  call fastcc void @builtin.panicOutOfBounds(i64 %844, i64 %848)
  unreachable

864:                                              ; preds = %872
  %865 = extractvalue { ptr, i64 } %859, 0
  %866 = getelementptr inbounds i32, ptr %865, i64 %856
  %867 = load i32, ptr %866, align 4
  store i32 %867, ptr %8, align 4
  %868 = load i32, ptr %8, align 4
  %869 = zext i32 %868 to i64
  %870 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %855, i64 %869)
  %871 = extractvalue { i64, i1 } %870, 1
  br i1 %871, label %874, label %875

872:                                              ; preds = %850
  br label %864

873:                                              ; preds = %850
  call fastcc void @builtin.panicOutOfBounds(i64 %856, i64 %860)
  unreachable

874:                                              ; preds = %864
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

875:                                              ; preds = %864
  %876 = extractvalue { i64, i1 } %870, 0
  %877 = load i64, ptr %10, align 8
  %878 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %876, i64 %877)
  %879 = extractvalue { i64, i1 } %878, 1
  br i1 %879, label %880, label %881

880:                                              ; preds = %875
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

881:                                              ; preds = %875
  %882 = extractvalue { i64, i1 } %878, 0
  %883 = load i64, ptr %44, align 8
  %884 = load i64, ptr %30, align 8
  %885 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %883, i64 %884)
  %886 = extractvalue { i64, i1 } %885, 1
  br i1 %886, label %887, label %888

887:                                              ; preds = %881
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

888:                                              ; preds = %881
  %889 = extractvalue { i64, i1 } %885, 0
  %890 = trunc i64 %882 to i32
  %891 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %892 = insertvalue { ptr, i64 } poison, ptr %891, 0
  %893 = insertvalue { ptr, i64 } %892, i64 2049, 1
  store { ptr, i64 } %893, ptr %7, align 8
  %894 = load { ptr, i64 }, ptr %7, align 8
  %895 = extractvalue { ptr, i64 } %894, 1
  %896 = icmp ult i64 %889, %895
  br i1 %896, label %904, label %905

897:                                              ; preds = %904
  %898 = extractvalue { ptr, i64 } %894, 0
  %899 = getelementptr inbounds i32, ptr %898, i64 %889
  store i32 %890, ptr %899, align 4
  %900 = lshr i64 %882, 32
  store i64 %900, ptr %10, align 8
  %901 = load i64, ptr %44, align 8
  %902 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %901, i64 1)
  %903 = extractvalue { i64, i1 } %902, 1
  br i1 %903, label %906, label %907

904:                                              ; preds = %888
  br label %897

905:                                              ; preds = %888
  call fastcc void @builtin.panicOutOfBounds(i64 %889, i64 %895)
  unreachable

906:                                              ; preds = %897
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

907:                                              ; preds = %897
  %908 = extractvalue { i64, i1 } %902, 0
  store i64 %908, ptr %44, align 8
  br label %835

909:                                              ; preds = %826
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

910:                                              ; preds = %826
  %911 = extractvalue { i64, i1 } %829, 0
  %912 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %911, i64 1)
  %913 = extractvalue { i64, i1 } %912, 1
  br i1 %913, label %914, label %915

914:                                              ; preds = %910
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

915:                                              ; preds = %910
  %916 = extractvalue { i64, i1 } %912, 0
  %917 = load i64, ptr %30, align 8
  %918 = load i64, ptr %50, align 8
  %919 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %917, i64 %918)
  %920 = extractvalue { i64, i1 } %919, 1
  br i1 %920, label %921, label %922

921:                                              ; preds = %915
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

922:                                              ; preds = %915
  %923 = extractvalue { i64, i1 } %919, 0
  %924 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %923, i64 1)
  %925 = extractvalue { i64, i1 } %924, 1
  br i1 %925, label %926, label %927

926:                                              ; preds = %922
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

927:                                              ; preds = %922
  %928 = extractvalue { i64, i1 } %924, 0
  %929 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %930 = insertvalue { ptr, i64 } poison, ptr %929, 0
  %931 = insertvalue { ptr, i64 } %930, i64 2049, 1
  %932 = extractvalue { ptr, i64 } %931, 1
  %933 = icmp ult i64 %928, %932
  br i1 %933, label %943, label %944

934:                                              ; preds = %943
  %935 = extractvalue { ptr, i64 } %931, 0
  %936 = getelementptr inbounds i32, ptr %935, i64 %928
  %937 = load i32, ptr %936, align 4
  store i32 %937, ptr %6, align 4
  %938 = load i32, ptr %6, align 4
  %939 = load i64, ptr %10, align 8
  %940 = zext i32 %938 to i64
  %941 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %940, i64 %939)
  %942 = extractvalue { i64, i1 } %941, 1
  br i1 %942, label %945, label %946

943:                                              ; preds = %927
  br label %934

944:                                              ; preds = %927
  call fastcc void @builtin.panicOutOfBounds(i64 %928, i64 %932)
  unreachable

945:                                              ; preds = %934
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

946:                                              ; preds = %934
  %947 = extractvalue { i64, i1 } %941, 0
  %948 = trunc i64 %947 to i32
  %949 = getelementptr inbounds [2049 x i32], ptr %38, i64 0, i64 0
  %950 = insertvalue { ptr, i64 } poison, ptr %949, 0
  %951 = insertvalue { ptr, i64 } %950, i64 2049, 1
  store { ptr, i64 } %951, ptr %5, align 8
  %952 = load { ptr, i64 }, ptr %5, align 8
  %953 = extractvalue { ptr, i64 } %952, 1
  %954 = icmp ult i64 %916, %953
  br i1 %954, label %958, label %959

955:                                              ; preds = %958
  %956 = extractvalue { ptr, i64 } %952, 0
  %957 = getelementptr inbounds i32, ptr %956, i64 %916
  store i32 %948, ptr %957, align 4
  br label %791

958:                                              ; preds = %946
  br label %955

959:                                              ; preds = %946
  call fastcc void @builtin.panicOutOfBounds(i64 %916, i64 %953)
  unreachable

960:                                              ; preds = %965
  %961 = load i64, ptr %30, align 8
  %962 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %961, i64 1)
  %963 = extractvalue { i64, i1 } %962, 1
  br i1 %963, label %966, label %967

964:                                              ; preds = %791
  br label %427

965:                                              ; preds = %791
  br label %960

966:                                              ; preds = %960
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

967:                                              ; preds = %960
  %968 = extractvalue { i64, i1 } %962, 0
  store i64 %968, ptr %30, align 8
  br label %428

969:                                              ; preds = %86
  br label %85

970:                                              ; preds = %86
  unreachable
}

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @builtin.panicStartGreaterThanEnd(i64 %0, i64 %1) unnamed_addr #2 {
  %3 = alloca { i64, i8, [7 x i8] }, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = call fastcc ptr @llvm.returnaddress(i32 0)
  %6 = ptrtoint ptr %5 to i64
  %7 = getelementptr inbounds { i64, i64 }, ptr %4, i32 0, i32 0
  store i64 %0, ptr %7, align 8
  %8 = getelementptr inbounds { i64, i64 }, ptr %4, i32 0, i32 1
  store i64 %1, ptr %8, align 8
  %9 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 0
  store i64 %6, ptr %9, align 8
  %10 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 1
  store i8 1, ptr %10, align 1
  call fastcc void @debug.panicExtra__anon_4345(ptr align 8 null, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.shl__anon_3896(i32 %0, i6 %1) unnamed_addr #0 {
  %3 = call fastcc i6 @math.absCast__anon_4346(i6 %1)
  %4 = icmp uge i6 %3, -32
  br i1 %4, label %8, label %9

5:                                                ; preds = %9
  %6 = sub i6 31, %3
  %7 = icmp ule i6 %6, 31
  br i1 %7, label %14, label %15

8:                                                ; preds = %2
  ret i32 0

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %14
  %11 = trunc i6 %3 to i5
  %12 = zext i5 %11 to i32
  %13 = shl i32 %0, %12
  ret i32 %13

14:                                               ; preds = %5
  br label %10

15:                                               ; preds = %5
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @170)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.shr__anon_3897(i32 %0, i6 %1) unnamed_addr #0 {
  %3 = call fastcc i6 @math.absCast__anon_4346(i6 %1)
  %4 = icmp uge i6 %3, -32
  br i1 %4, label %8, label %9

5:                                                ; preds = %9
  %6 = sub i6 31, %3
  %7 = icmp ule i6 %6, 31
  br i1 %7, label %14, label %15

8:                                                ; preds = %2
  ret i32 0

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %14
  %11 = trunc i6 %3 to i5
  %12 = zext i5 %11 to i32
  %13 = lshr i32 %0, %12
  ret i32 %13

14:                                               ; preds = %5
  br label %10

15:                                               ; preds = %5
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @171)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__umodei4(ptr nonnull align 4 %0, ptr nonnull readonly align 4 %1, ptr nonnull readonly align 4 %2, i64 %3) #0 {
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca i32, align 4
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca { ptr, i64 }, align 8
  %11 = alloca i32, align 4
  %12 = alloca { ptr, i64 }, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca { ptr, i64 }, align 8
  %17 = alloca i32, align 4
  %18 = alloca { ptr, i64 }, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i64, align 8
  %27 = alloca i32, align 4
  %28 = alloca i64, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i64, align 8
  %32 = alloca { ptr, i64 }, align 8
  %33 = alloca i32, align 4
  %34 = alloca { ptr, i64 }, align 8
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca { ptr, i64 }, align 8
  %38 = alloca i32, align 4
  %39 = alloca [2049 x i32], align 4
  %40 = alloca { ptr, i64 }, align 8
  %41 = alloca i32, align 4
  %42 = alloca { ptr, i64 }, align 8
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i64, align 8
  %46 = alloca [6 x i64], align 8
  %47 = alloca [2048 x i32], align 4
  %48 = alloca i32, align 4
  %49 = alloca { ptr, i64 }, align 8
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca { ptr, i64 }, align 8
  %55 = alloca { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, align 8
  %56 = alloca ptr, align 8
  %57 = alloca { ptr, i64 }, align 8
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  store ptr %1, ptr %59, align 8
  %60 = udiv i64 %3, 32
  %61 = load ptr, ptr %59, align 8
  %62 = getelementptr inbounds i32, ptr %61, i64 0
  %63 = insertvalue { ptr, i64 } poison, ptr %62, 0
  %64 = insertvalue { ptr, i64 } %63, i64 %60, 1
  store ptr %2, ptr %58, align 8
  %65 = udiv i64 %3, 32
  %66 = load ptr, ptr %58, align 8
  %67 = getelementptr inbounds i32, ptr %66, i64 0
  %68 = insertvalue { ptr, i64 } poison, ptr %67, 0
  %69 = insertvalue { ptr, i64 } %68, i64 %65, 1
  store ptr %0, ptr %56, align 8
  %70 = udiv i64 %3, 32
  %71 = load ptr, ptr %56, align 8
  %72 = getelementptr inbounds i32, ptr %71, i64 0
  %73 = insertvalue { ptr, i64 } poison, ptr %72, 0
  %74 = insertvalue { ptr, i64 } %73, i64 %70, 1
  store { ptr, i64 } %74, ptr %57, align 8
  %75 = load { ptr, i64 }, ptr %57, align 8
  %76 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 0
  store { ptr, i64 } %75, ptr %76, align 8
  %77 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 1
  store { ptr, i64 } %64, ptr %77, align 8
  %78 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 2
  store { ptr, i64 } %69, ptr %78, align 8
  %79 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 0
  %80 = load { ptr, i64 }, ptr %79, align 8
  %81 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 1
  %82 = load { ptr, i64 }, ptr %81, align 8
  %83 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 2
  %84 = load { ptr, i64 }, ptr %83, align 8
  %85 = extractvalue { ptr, i64 } %80, 0
  %86 = icmp ne ptr %85, null
  br i1 %86, label %94, label %100

87:                                               ; preds = %1058
  ret void

88:                                               ; preds = %970, %204, %191, %161, %128
  %89 = phi i16 [ 2, %128 ], [ 0, %161 ], [ 2, %191 ], [ 0, %204 ], [ 0, %970 ]
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %1058, label %1059

91:                                               ; preds = %100, %110
  %92 = extractvalue { ptr, i64 } %82, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %124, label %125

94:                                               ; preds = %4
  store { ptr, i64 } %80, ptr %54, align 8
  %95 = load { ptr, i64 }, ptr %54, align 8
  %96 = extractvalue { ptr, i64 } %95, 0
  %97 = getelementptr inbounds i32, ptr %96, i64 0
  %98 = extractvalue { ptr, i64 } %95, 1
  %99 = icmp ule i64 0, %98
  br i1 %99, label %104, label %105

100:                                              ; preds = %4
  br label %91

101:                                              ; preds = %104
  %102 = extractvalue { ptr, i64 } %95, 1
  %103 = icmp ule i64 %98, %102
  br i1 %103, label %108, label %109

104:                                              ; preds = %94
  br label %101

105:                                              ; preds = %94
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %98)
  unreachable

106:                                              ; preds = %108
  %107 = icmp ule i64 0, %98
  br i1 %107, label %116, label %117

108:                                              ; preds = %101
  br label %106

109:                                              ; preds = %101
  call fastcc void @builtin.panicOutOfBounds(i64 %98, i64 %102)
  unreachable

110:                                              ; preds = %116
  %111 = insertvalue { ptr, i64 } poison, ptr %97, 0
  %112 = insertvalue { ptr, i64 } %111, i64 %98, 1
  %113 = extractvalue { ptr, i64 } %112, 0
  %114 = extractvalue { ptr, i64 } %112, 1
  %115 = mul nuw i64 %114, 4
  call void @llvm.memset.p0.i64(ptr align 4 %113, i8 0, i64 %115, i1 false)
  br label %91

116:                                              ; preds = %106
  br label %110

117:                                              ; preds = %106
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %98)
  unreachable

118:                                              ; preds = %129
  %119 = extractvalue { ptr, i64 } %82, 1
  %120 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %119, i64 1)
  %121 = extractvalue { i64, i1 } %120, 1
  br i1 %121, label %130, label %131

122:                                              ; preds = %125, %124
  %123 = phi i1 [ true, %124 ], [ %127, %125 ]
  br i1 %123, label %128, label %129

124:                                              ; preds = %91
  br label %122

125:                                              ; preds = %91
  %126 = extractvalue { ptr, i64 } %84, 1
  %127 = icmp eq i64 %126, 0
  br label %122

128:                                              ; preds = %122
  br label %88

129:                                              ; preds = %122
  br label %118

130:                                              ; preds = %118
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

131:                                              ; preds = %118
  %132 = extractvalue { i64, i1 } %120, 0
  store i64 %132, ptr %53, align 8
  %133 = extractvalue { ptr, i64 } %84, 1
  %134 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %133, i64 1)
  %135 = extractvalue { i64, i1 } %134, 1
  br i1 %135, label %136, label %137

136:                                              ; preds = %131
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %131
  %138 = extractvalue { i64, i1 } %134, 0
  store i64 %138, ptr %52, align 8
  br label %140

139:                                              ; preds = %156
  br label %170

140:                                              ; preds = %144, %137
  %141 = load i64, ptr %53, align 8
  %142 = extractvalue { ptr, i64 } %82, 1
  %143 = icmp ult i64 %141, %142
  br i1 %143, label %151, label %152

144:                                              ; preds = %164
  br label %140

145:                                              ; preds = %151
  %146 = extractvalue { ptr, i64 } %82, 0
  %147 = getelementptr inbounds i32, ptr %146, i64 %141
  %148 = load i32, ptr %147, align 4
  store i32 %148, ptr %51, align 4
  %149 = load i32, ptr %51, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %153, label %156

151:                                              ; preds = %140
  br label %145

152:                                              ; preds = %140
  call fastcc void @builtin.panicOutOfBounds(i64 %141, i64 %142)
  unreachable

153:                                              ; preds = %145
  %154 = load i64, ptr %53, align 8
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %161, label %162

156:                                              ; preds = %145
  br label %139

157:                                              ; preds = %162
  %158 = load i64, ptr %53, align 8
  %159 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %158, i64 1)
  %160 = extractvalue { i64, i1 } %159, 1
  br i1 %160, label %163, label %164

161:                                              ; preds = %153
  br label %88

162:                                              ; preds = %153
  br label %157

163:                                              ; preds = %157
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

164:                                              ; preds = %157
  %165 = extractvalue { i64, i1 } %159, 0
  store i64 %165, ptr %53, align 8
  br label %144

166:                                              ; preds = %186
  %167 = load i64, ptr %52, align 8
  %168 = load i64, ptr %53, align 8
  %169 = icmp ugt i64 %167, %168
  br i1 %169, label %200, label %203

170:                                              ; preds = %174, %139
  %171 = load i64, ptr %52, align 8
  %172 = extractvalue { ptr, i64 } %84, 1
  %173 = icmp ult i64 %171, %172
  br i1 %173, label %181, label %182

174:                                              ; preds = %194
  br label %170

175:                                              ; preds = %181
  %176 = extractvalue { ptr, i64 } %84, 0
  %177 = getelementptr inbounds i32, ptr %176, i64 %171
  %178 = load i32, ptr %177, align 4
  store i32 %178, ptr %50, align 4
  %179 = load i32, ptr %50, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %183, label %186

181:                                              ; preds = %170
  br label %175

182:                                              ; preds = %170
  call fastcc void @builtin.panicOutOfBounds(i64 %171, i64 %172)
  unreachable

183:                                              ; preds = %175
  %184 = load i64, ptr %52, align 8
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %191, label %192

186:                                              ; preds = %175
  br label %166

187:                                              ; preds = %192
  %188 = load i64, ptr %52, align 8
  %189 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %188, i64 1)
  %190 = extractvalue { i64, i1 } %189, 1
  br i1 %190, label %193, label %194

191:                                              ; preds = %183
  br label %88

192:                                              ; preds = %183
  br label %187

193:                                              ; preds = %187
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

194:                                              ; preds = %187
  %195 = extractvalue { i64, i1 } %189, 0
  store i64 %195, ptr %52, align 8
  br label %174

196:                                              ; preds = %203
  %197 = load i64, ptr %52, align 8
  %198 = extractvalue { ptr, i64 } %84, 1
  %199 = icmp ult i64 %197, %198
  br i1 %199, label %262, label %263

200:                                              ; preds = %166
  %201 = extractvalue { ptr, i64 } %80, 0
  %202 = icmp ne ptr %201, null
  br i1 %202, label %205, label %211

203:                                              ; preds = %166
  br label %196

204:                                              ; preds = %211, %239
  br label %88

205:                                              ; preds = %200
  store { ptr, i64 } %80, ptr %49, align 8
  %206 = extractvalue { ptr, i64 } %82, 1
  %207 = load { ptr, i64 }, ptr %49, align 8
  %208 = extractvalue { ptr, i64 } %207, 0
  %209 = getelementptr inbounds i32, ptr %208, i64 0
  %210 = icmp ule i64 0, %206
  br i1 %210, label %215, label %216

211:                                              ; preds = %200
  br label %204

212:                                              ; preds = %215
  %213 = extractvalue { ptr, i64 } %207, 1
  %214 = icmp ule i64 %206, %213
  br i1 %214, label %219, label %220

215:                                              ; preds = %205
  br label %212

216:                                              ; preds = %205
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %206)
  unreachable

217:                                              ; preds = %219
  %218 = icmp ule i64 0, %206
  br i1 %218, label %227, label %228

219:                                              ; preds = %212
  br label %217

220:                                              ; preds = %212
  call fastcc void @builtin.panicOutOfBounds(i64 %206, i64 %213)
  unreachable

221:                                              ; preds = %227
  %222 = insertvalue { ptr, i64 } poison, ptr %209, 0
  %223 = insertvalue { ptr, i64 } %222, i64 %206, 1
  %224 = extractvalue { ptr, i64 } %223, 1
  %225 = extractvalue { ptr, i64 } %82, 1
  %226 = icmp eq i64 %224, %225
  br i1 %226, label %237, label %238

227:                                              ; preds = %217
  br label %221

228:                                              ; preds = %217
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %206)
  unreachable

229:                                              ; preds = %237
  %230 = extractvalue { ptr, i64 } %82, 0
  %231 = extractvalue { ptr, i64 } %223, 0
  %232 = getelementptr inbounds i32, ptr %230, i64 %224
  %233 = getelementptr inbounds i32, ptr %231, i64 %224
  %234 = icmp uge ptr %231, %232
  %235 = icmp uge ptr %230, %233
  %236 = or i1 %234, %235
  br i1 %236, label %243, label %244

237:                                              ; preds = %221
  br label %229

238:                                              ; preds = %221
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_len_mismatch__anon_3898, i64 40, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

239:                                              ; preds = %243
  %240 = extractvalue { ptr, i64 } %223, 1
  %241 = mul nuw i64 %240, 4
  %242 = extractvalue { ptr, i64 } %223, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %242, ptr align 4 %230, i64 %241, i1 false)
  br label %204

243:                                              ; preds = %229
  br label %239

244:                                              ; preds = %229
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

245:                                              ; preds = %262
  %246 = extractvalue { ptr, i64 } %84, 0
  %247 = getelementptr inbounds i32, ptr %246, i64 %197
  %248 = load i32, ptr %247, align 4
  store i32 %248, ptr %48, align 4
  %249 = load i32, ptr %48, align 4
  %250 = call i32 @llvm.ctlz.i32(i32 %249, i1 false)
  %251 = trunc i32 %250 to i6
  call void @llvm.memset.p0.i64(ptr align 4 %47, i8 -86, i64 8192, i1 false)
  %252 = ptrtoint ptr %47 to i64
  %253 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 0
  store i64 1296236545, ptr %253, align 8
  %254 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 1
  store i64 %252, ptr %254, align 8
  %255 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 2
  store i64 8192, ptr %255, align 8
  %256 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 3
  store i64 0, ptr %256, align 8
  %257 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 4
  store i64 0, ptr %257, align 8
  %258 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 5
  store i64 0, ptr %258, align 8
  %259 = ptrtoint ptr %46 to i64
  %260 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %259, i64 0)
  %261 = load i64, ptr %52, align 8
  store i64 %261, ptr %45, align 8
  br label %267

262:                                              ; preds = %196
  br label %245

263:                                              ; preds = %196
  call fastcc void @builtin.panicOutOfBounds(i64 %197, i64 %198)
  unreachable

264:                                              ; preds = %276
  %265 = extractvalue { ptr, i64 } %84, 1
  %266 = icmp ult i64 0, %265
  br i1 %266, label %336, label %337

267:                                              ; preds = %270, %245
  %268 = load i64, ptr %45, align 8
  %269 = icmp ugt i64 %268, 0
  br i1 %269, label %271, label %276

270:                                              ; preds = %322
  br label %267

271:                                              ; preds = %267
  %272 = load i64, ptr %45, align 8
  %273 = load i64, ptr %45, align 8
  %274 = extractvalue { ptr, i64 } %84, 1
  %275 = icmp ult i64 %273, %274
  br i1 %275, label %286, label %287

276:                                              ; preds = %267
  br label %264

277:                                              ; preds = %286
  %278 = extractvalue { ptr, i64 } %84, 0
  %279 = getelementptr inbounds i32, ptr %278, i64 %273
  %280 = load i32, ptr %279, align 4
  store i32 %280, ptr %44, align 4
  %281 = load i32, ptr %44, align 4
  %282 = call fastcc i32 @math.shl__anon_3896(i32 %281, i6 %251)
  %283 = load i64, ptr %45, align 8
  %284 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %283, i64 1)
  %285 = extractvalue { i64, i1 } %284, 1
  br i1 %285, label %288, label %289

286:                                              ; preds = %271
  br label %277

287:                                              ; preds = %271
  call fastcc void @builtin.panicOutOfBounds(i64 %273, i64 %274)
  unreachable

288:                                              ; preds = %277
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

289:                                              ; preds = %277
  %290 = extractvalue { i64, i1 } %284, 0
  %291 = extractvalue { ptr, i64 } %84, 1
  %292 = icmp ult i64 %290, %291
  br i1 %292, label %300, label %301

293:                                              ; preds = %300
  %294 = extractvalue { ptr, i64 } %84, 0
  %295 = getelementptr inbounds i32, ptr %294, i64 %290
  %296 = load i32, ptr %295, align 4
  store i32 %296, ptr %43, align 4
  %297 = load i32, ptr %43, align 4
  %298 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %251)
  %299 = extractvalue { i6, i1 } %298, 1
  br i1 %299, label %302, label %303

300:                                              ; preds = %289
  br label %293

301:                                              ; preds = %289
  call fastcc void @builtin.panicOutOfBounds(i64 %290, i64 %291)
  unreachable

302:                                              ; preds = %293
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

303:                                              ; preds = %293
  %304 = extractvalue { i6, i1 } %298, 0
  %305 = call fastcc i32 @math.shr__anon_3897(i32 %297, i6 %304)
  %306 = or i32 %282, %305
  %307 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %308 = insertvalue { ptr, i64 } poison, ptr %307, 0
  %309 = insertvalue { ptr, i64 } %308, i64 2048, 1
  store { ptr, i64 } %309, ptr %42, align 8
  %310 = load { ptr, i64 }, ptr %42, align 8
  %311 = extractvalue { ptr, i64 } %310, 1
  %312 = icmp ult i64 %272, %311
  br i1 %312, label %319, label %320

313:                                              ; preds = %319
  %314 = extractvalue { ptr, i64 } %310, 0
  %315 = getelementptr inbounds i32, ptr %314, i64 %272
  store i32 %306, ptr %315, align 4
  %316 = load i64, ptr %45, align 8
  %317 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %316, i64 1)
  %318 = extractvalue { i64, i1 } %317, 1
  br i1 %318, label %321, label %322

319:                                              ; preds = %303
  br label %313

320:                                              ; preds = %303
  call fastcc void @builtin.panicOutOfBounds(i64 %272, i64 %311)
  unreachable

321:                                              ; preds = %313
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

322:                                              ; preds = %313
  %323 = extractvalue { i64, i1 } %317, 0
  store i64 %323, ptr %45, align 8
  br label %270

324:                                              ; preds = %336
  %325 = extractvalue { ptr, i64 } %84, 0
  %326 = getelementptr inbounds i32, ptr %325, i64 0
  %327 = load i32, ptr %326, align 4
  store i32 %327, ptr %41, align 4
  %328 = load i32, ptr %41, align 4
  %329 = call fastcc i32 @math.shl__anon_3896(i32 %328, i6 %251)
  %330 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %331 = insertvalue { ptr, i64 } poison, ptr %330, 0
  %332 = insertvalue { ptr, i64 } %331, i64 2048, 1
  store { ptr, i64 } %332, ptr %40, align 8
  %333 = load { ptr, i64 }, ptr %40, align 8
  %334 = extractvalue { ptr, i64 } %333, 1
  %335 = icmp ult i64 0, %334
  br i1 %335, label %353, label %354

336:                                              ; preds = %264
  br label %324

337:                                              ; preds = %264
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %265)
  unreachable

338:                                              ; preds = %353
  %339 = extractvalue { ptr, i64 } %333, 0
  %340 = getelementptr inbounds i32, ptr %339, i64 0
  store i32 %329, ptr %340, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %39, i8 -86, i64 8196, i1 false)
  %341 = ptrtoint ptr %39 to i64
  %342 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 0
  store i64 1296236545, ptr %342, align 8
  %343 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 1
  store i64 %341, ptr %343, align 8
  %344 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 2
  store i64 8196, ptr %344, align 8
  %345 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 3
  store i64 0, ptr %345, align 8
  %346 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 4
  store i64 0, ptr %346, align 8
  %347 = getelementptr inbounds [6 x i64], ptr %46, i64 0, i64 5
  store i64 0, ptr %347, align 8
  %348 = ptrtoint ptr %46 to i64
  %349 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %348, i64 0)
  %350 = load i64, ptr %53, align 8
  %351 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %350, i64 1)
  %352 = extractvalue { i64, i1 } %351, 1
  br i1 %352, label %355, label %356

353:                                              ; preds = %324
  br label %338

354:                                              ; preds = %324
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %334)
  unreachable

355:                                              ; preds = %338
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

356:                                              ; preds = %338
  %357 = extractvalue { i64, i1 } %351, 0
  %358 = load i64, ptr %53, align 8
  %359 = extractvalue { ptr, i64 } %82, 1
  %360 = icmp ult i64 %358, %359
  br i1 %360, label %368, label %369

361:                                              ; preds = %368
  %362 = extractvalue { ptr, i64 } %82, 0
  %363 = getelementptr inbounds i32, ptr %362, i64 %358
  %364 = load i32, ptr %363, align 4
  store i32 %364, ptr %38, align 4
  %365 = load i32, ptr %38, align 4
  %366 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %251)
  %367 = extractvalue { i6, i1 } %366, 1
  br i1 %367, label %370, label %371

368:                                              ; preds = %356
  br label %361

369:                                              ; preds = %356
  call fastcc void @builtin.panicOutOfBounds(i64 %358, i64 %359)
  unreachable

370:                                              ; preds = %361
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

371:                                              ; preds = %361
  %372 = extractvalue { i6, i1 } %366, 0
  %373 = call fastcc i32 @math.shr__anon_3897(i32 %365, i6 %372)
  %374 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %375 = insertvalue { ptr, i64 } poison, ptr %374, 0
  %376 = insertvalue { ptr, i64 } %375, i64 2049, 1
  store { ptr, i64 } %376, ptr %37, align 8
  %377 = load { ptr, i64 }, ptr %37, align 8
  %378 = extractvalue { ptr, i64 } %377, 1
  %379 = icmp ult i64 %357, %378
  br i1 %379, label %384, label %385

380:                                              ; preds = %384
  %381 = extractvalue { ptr, i64 } %377, 0
  %382 = getelementptr inbounds i32, ptr %381, i64 %357
  store i32 %373, ptr %382, align 4
  %383 = load i64, ptr %53, align 8
  store i64 %383, ptr %45, align 8
  br label %389

384:                                              ; preds = %371
  br label %380

385:                                              ; preds = %371
  call fastcc void @builtin.panicOutOfBounds(i64 %357, i64 %378)
  unreachable

386:                                              ; preds = %398
  %387 = extractvalue { ptr, i64 } %82, 1
  %388 = icmp ult i64 0, %387
  br i1 %388, label %458, label %459

389:                                              ; preds = %392, %380
  %390 = load i64, ptr %45, align 8
  %391 = icmp ugt i64 %390, 0
  br i1 %391, label %393, label %398

392:                                              ; preds = %444
  br label %389

393:                                              ; preds = %389
  %394 = load i64, ptr %45, align 8
  %395 = load i64, ptr %45, align 8
  %396 = extractvalue { ptr, i64 } %82, 1
  %397 = icmp ult i64 %395, %396
  br i1 %397, label %408, label %409

398:                                              ; preds = %389
  br label %386

399:                                              ; preds = %408
  %400 = extractvalue { ptr, i64 } %82, 0
  %401 = getelementptr inbounds i32, ptr %400, i64 %395
  %402 = load i32, ptr %401, align 4
  store i32 %402, ptr %36, align 4
  %403 = load i32, ptr %36, align 4
  %404 = call fastcc i32 @math.shl__anon_3896(i32 %403, i6 %251)
  %405 = load i64, ptr %45, align 8
  %406 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %405, i64 1)
  %407 = extractvalue { i64, i1 } %406, 1
  br i1 %407, label %410, label %411

408:                                              ; preds = %393
  br label %399

409:                                              ; preds = %393
  call fastcc void @builtin.panicOutOfBounds(i64 %395, i64 %396)
  unreachable

410:                                              ; preds = %399
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

411:                                              ; preds = %399
  %412 = extractvalue { i64, i1 } %406, 0
  %413 = extractvalue { ptr, i64 } %82, 1
  %414 = icmp ult i64 %412, %413
  br i1 %414, label %422, label %423

415:                                              ; preds = %422
  %416 = extractvalue { ptr, i64 } %82, 0
  %417 = getelementptr inbounds i32, ptr %416, i64 %412
  %418 = load i32, ptr %417, align 4
  store i32 %418, ptr %35, align 4
  %419 = load i32, ptr %35, align 4
  %420 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %251)
  %421 = extractvalue { i6, i1 } %420, 1
  br i1 %421, label %424, label %425

422:                                              ; preds = %411
  br label %415

423:                                              ; preds = %411
  call fastcc void @builtin.panicOutOfBounds(i64 %412, i64 %413)
  unreachable

424:                                              ; preds = %415
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

425:                                              ; preds = %415
  %426 = extractvalue { i6, i1 } %420, 0
  %427 = call fastcc i32 @math.shr__anon_3897(i32 %419, i6 %426)
  %428 = or i32 %404, %427
  %429 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %430 = insertvalue { ptr, i64 } poison, ptr %429, 0
  %431 = insertvalue { ptr, i64 } %430, i64 2049, 1
  store { ptr, i64 } %431, ptr %34, align 8
  %432 = load { ptr, i64 }, ptr %34, align 8
  %433 = extractvalue { ptr, i64 } %432, 1
  %434 = icmp ult i64 %394, %433
  br i1 %434, label %441, label %442

435:                                              ; preds = %441
  %436 = extractvalue { ptr, i64 } %432, 0
  %437 = getelementptr inbounds i32, ptr %436, i64 %394
  store i32 %428, ptr %437, align 4
  %438 = load i64, ptr %45, align 8
  %439 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %438, i64 1)
  %440 = extractvalue { i64, i1 } %439, 1
  br i1 %440, label %443, label %444

441:                                              ; preds = %425
  br label %435

442:                                              ; preds = %425
  call fastcc void @builtin.panicOutOfBounds(i64 %394, i64 %433)
  unreachable

443:                                              ; preds = %435
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

444:                                              ; preds = %435
  %445 = extractvalue { i64, i1 } %439, 0
  store i64 %445, ptr %45, align 8
  br label %392

446:                                              ; preds = %458
  %447 = extractvalue { ptr, i64 } %82, 0
  %448 = getelementptr inbounds i32, ptr %447, i64 0
  %449 = load i32, ptr %448, align 4
  store i32 %449, ptr %33, align 4
  %450 = load i32, ptr %33, align 4
  %451 = call fastcc i32 @math.shl__anon_3896(i32 %450, i6 %251)
  %452 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %453 = insertvalue { ptr, i64 } poison, ptr %452, 0
  %454 = insertvalue { ptr, i64 } %453, i64 2049, 1
  store { ptr, i64 } %454, ptr %32, align 8
  %455 = load { ptr, i64 }, ptr %32, align 8
  %456 = extractvalue { ptr, i64 } %455, 1
  %457 = icmp ult i64 0, %456
  br i1 %457, label %467, label %468

458:                                              ; preds = %386
  br label %446

459:                                              ; preds = %386
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %387)
  unreachable

460:                                              ; preds = %467
  %461 = extractvalue { ptr, i64 } %455, 0
  %462 = getelementptr inbounds i32, ptr %461, i64 0
  store i32 %451, ptr %462, align 4
  %463 = load i64, ptr %53, align 8
  %464 = load i64, ptr %52, align 8
  %465 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %463, i64 %464)
  %466 = extractvalue { i64, i1 } %465, 1
  br i1 %466, label %469, label %470

467:                                              ; preds = %446
  br label %460

468:                                              ; preds = %446
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %456)
  unreachable

469:                                              ; preds = %460
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

470:                                              ; preds = %460
  %471 = extractvalue { i64, i1 } %465, 0
  store i64 %471, ptr %31, align 8
  br label %475

472:                                              ; preds = %965
  %473 = extractvalue { ptr, i64 } %80, 0
  %474 = icmp ne ptr %473, null
  br i1 %474, label %971, label %972

475:                                              ; preds = %968, %470
  %476 = load i64, ptr %31, align 8
  %477 = load i64, ptr %52, align 8
  %478 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %476, i64 %477)
  %479 = extractvalue { i64, i1 } %478, 1
  br i1 %479, label %480, label %481

480:                                              ; preds = %475
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

481:                                              ; preds = %475
  %482 = extractvalue { i64, i1 } %478, 0
  %483 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %482, i64 1)
  %484 = extractvalue { i64, i1 } %483, 1
  br i1 %484, label %485, label %486

485:                                              ; preds = %481
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

486:                                              ; preds = %481
  %487 = extractvalue { i64, i1 } %483, 0
  %488 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %489 = insertvalue { ptr, i64 } poison, ptr %488, 0
  %490 = insertvalue { ptr, i64 } %489, i64 2049, 1
  %491 = extractvalue { ptr, i64 } %490, 1
  %492 = icmp ult i64 %487, %491
  br i1 %492, label %504, label %505

493:                                              ; preds = %504
  %494 = extractvalue { ptr, i64 } %490, 0
  %495 = getelementptr inbounds i32, ptr %494, i64 %487
  %496 = load i32, ptr %495, align 4
  store i32 %496, ptr %30, align 4
  %497 = load i32, ptr %30, align 4
  %498 = zext i32 %497 to i64
  %499 = shl i64 %498, 32
  %500 = load i64, ptr %31, align 8
  %501 = load i64, ptr %52, align 8
  %502 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %500, i64 %501)
  %503 = extractvalue { i64, i1 } %502, 1
  br i1 %503, label %506, label %507

504:                                              ; preds = %486
  br label %493

505:                                              ; preds = %486
  call fastcc void @builtin.panicOutOfBounds(i64 %487, i64 %491)
  unreachable

506:                                              ; preds = %493
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

507:                                              ; preds = %493
  %508 = extractvalue { i64, i1 } %502, 0
  %509 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %510 = insertvalue { ptr, i64 } poison, ptr %509, 0
  %511 = insertvalue { ptr, i64 } %510, i64 2049, 1
  %512 = extractvalue { ptr, i64 } %511, 1
  %513 = icmp ult i64 %508, %512
  br i1 %513, label %522, label %523

514:                                              ; preds = %522
  %515 = extractvalue { ptr, i64 } %511, 0
  %516 = getelementptr inbounds i32, ptr %515, i64 %508
  %517 = load i32, ptr %516, align 4
  store i32 %517, ptr %29, align 4
  %518 = load i32, ptr %29, align 4
  %519 = zext i32 %518 to i64
  %520 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %499, i64 %519)
  %521 = extractvalue { i64, i1 } %520, 1
  br i1 %521, label %524, label %525

522:                                              ; preds = %507
  br label %514

523:                                              ; preds = %507
  call fastcc void @builtin.panicOutOfBounds(i64 %508, i64 %512)
  unreachable

524:                                              ; preds = %514
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

525:                                              ; preds = %514
  %526 = extractvalue { i64, i1 } %520, 0
  %527 = load i64, ptr %52, align 8
  %528 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %529 = insertvalue { ptr, i64 } poison, ptr %528, 0
  %530 = insertvalue { ptr, i64 } %529, i64 2048, 1
  %531 = extractvalue { ptr, i64 } %530, 1
  %532 = icmp ult i64 %527, %531
  br i1 %532, label %540, label %541

533:                                              ; preds = %540
  %534 = extractvalue { ptr, i64 } %530, 0
  %535 = getelementptr inbounds i32, ptr %534, i64 %527
  %536 = load i32, ptr %535, align 4
  store i32 %536, ptr %27, align 4
  %537 = load i32, ptr %27, align 4
  %538 = zext i32 %537 to i64
  %539 = icmp ne i64 %538, 0
  br i1 %539, label %550, label %551

540:                                              ; preds = %525
  br label %533

541:                                              ; preds = %525
  call fastcc void @builtin.panicOutOfBounds(i64 %527, i64 %531)
  unreachable

542:                                              ; preds = %550
  %543 = udiv i64 %526, %538
  store i64 %543, ptr %28, align 8
  %544 = load i64, ptr %52, align 8
  %545 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %546 = insertvalue { ptr, i64 } poison, ptr %545, 0
  %547 = insertvalue { ptr, i64 } %546, i64 2048, 1
  %548 = extractvalue { ptr, i64 } %547, 1
  %549 = icmp ult i64 %544, %548
  br i1 %549, label %559, label %560

550:                                              ; preds = %533
  br label %542

551:                                              ; preds = %533
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

552:                                              ; preds = %559
  %553 = extractvalue { ptr, i64 } %547, 0
  %554 = getelementptr inbounds i32, ptr %553, i64 %544
  %555 = load i32, ptr %554, align 4
  store i32 %555, ptr %25, align 4
  %556 = load i32, ptr %25, align 4
  %557 = zext i32 %556 to i64
  %558 = icmp ne i64 %557, 0
  br i1 %558, label %563, label %564

559:                                              ; preds = %542
  br label %552

560:                                              ; preds = %542
  call fastcc void @builtin.panicOutOfBounds(i64 %544, i64 %548)
  unreachable

561:                                              ; preds = %563
  %562 = urem i64 %526, %557
  store i64 %562, ptr %26, align 8
  br label %566

563:                                              ; preds = %552
  br label %561

564:                                              ; preds = %552
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

565:                                              ; preds = %570
  store i64 0, ptr %21, align 8
  store i64 0, ptr %45, align 8
  br label %677

566:                                              ; preds = %569, %561
  %567 = load i64, ptr %28, align 8
  %568 = icmp uge i64 %567, 4294967296
  br i1 %568, label %573, label %574

569:                                              ; preds = %670
  br label %566

570:                                              ; preds = %643, %669
  br label %565

571:                                              ; preds = %577, %573
  %572 = phi i1 [ true, %573 ], [ %578, %577 ]
  br i1 %572, label %639, label %643

573:                                              ; preds = %566
  br label %571

574:                                              ; preds = %566
  %575 = load i64, ptr %52, align 8
  %576 = icmp ugt i64 %575, 0
  br i1 %576, label %579, label %584

577:                                              ; preds = %584, %636
  %578 = phi i1 [ %638, %636 ], [ false, %584 ]
  br label %571

579:                                              ; preds = %574
  %580 = load i64, ptr %28, align 8
  %581 = load i64, ptr %52, align 8
  %582 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %581, i64 1)
  %583 = extractvalue { i64, i1 } %582, 1
  br i1 %583, label %585, label %586

584:                                              ; preds = %574
  br label %577

585:                                              ; preds = %579
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

586:                                              ; preds = %579
  %587 = extractvalue { i64, i1 } %582, 0
  %588 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %589 = insertvalue { ptr, i64 } poison, ptr %588, 0
  %590 = insertvalue { ptr, i64 } %589, i64 2048, 1
  %591 = extractvalue { ptr, i64 } %590, 1
  %592 = icmp ult i64 %587, %591
  br i1 %592, label %601, label %602

593:                                              ; preds = %601
  %594 = extractvalue { ptr, i64 } %590, 0
  %595 = getelementptr inbounds i32, ptr %594, i64 %587
  %596 = load i32, ptr %595, align 4
  store i32 %596, ptr %24, align 4
  %597 = load i32, ptr %24, align 4
  %598 = zext i32 %597 to i64
  %599 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %580, i64 %598)
  %600 = extractvalue { i64, i1 } %599, 1
  br i1 %600, label %603, label %604

601:                                              ; preds = %586
  br label %593

602:                                              ; preds = %586
  call fastcc void @builtin.panicOutOfBounds(i64 %587, i64 %591)
  unreachable

603:                                              ; preds = %593
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

604:                                              ; preds = %593
  %605 = extractvalue { i64, i1 } %599, 0
  %606 = load i64, ptr %26, align 8
  %607 = shl i64 %606, 32
  %608 = load i64, ptr %31, align 8
  %609 = load i64, ptr %52, align 8
  %610 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %608, i64 %609)
  %611 = extractvalue { i64, i1 } %610, 1
  br i1 %611, label %612, label %613

612:                                              ; preds = %604
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

613:                                              ; preds = %604
  %614 = extractvalue { i64, i1 } %610, 0
  %615 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %614, i64 1)
  %616 = extractvalue { i64, i1 } %615, 1
  br i1 %616, label %617, label %618

617:                                              ; preds = %613
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

618:                                              ; preds = %613
  %619 = extractvalue { i64, i1 } %615, 0
  %620 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %621 = insertvalue { ptr, i64 } poison, ptr %620, 0
  %622 = insertvalue { ptr, i64 } %621, i64 2049, 1
  %623 = extractvalue { ptr, i64 } %622, 1
  %624 = icmp ult i64 %619, %623
  br i1 %624, label %633, label %634

625:                                              ; preds = %633
  %626 = extractvalue { ptr, i64 } %622, 0
  %627 = getelementptr inbounds i32, ptr %626, i64 %619
  %628 = load i32, ptr %627, align 4
  store i32 %628, ptr %23, align 4
  %629 = load i32, ptr %23, align 4
  %630 = zext i32 %629 to i64
  %631 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %607, i64 %630)
  %632 = extractvalue { i64, i1 } %631, 1
  br i1 %632, label %635, label %636

633:                                              ; preds = %618
  br label %625

634:                                              ; preds = %618
  call fastcc void @builtin.panicOutOfBounds(i64 %619, i64 %623)
  unreachable

635:                                              ; preds = %625
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

636:                                              ; preds = %625
  %637 = extractvalue { i64, i1 } %631, 0
  %638 = icmp ugt i64 %605, %637
  br label %577

639:                                              ; preds = %571
  %640 = load i64, ptr %28, align 8
  %641 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %640, i64 1)
  %642 = extractvalue { i64, i1 } %641, 1
  br i1 %642, label %644, label %645

643:                                              ; preds = %571
  br label %570

644:                                              ; preds = %639
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

645:                                              ; preds = %639
  %646 = extractvalue { i64, i1 } %641, 0
  store i64 %646, ptr %28, align 8
  %647 = load i64, ptr %26, align 8
  %648 = load i64, ptr %52, align 8
  %649 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %650 = insertvalue { ptr, i64 } poison, ptr %649, 0
  %651 = insertvalue { ptr, i64 } %650, i64 2048, 1
  %652 = extractvalue { ptr, i64 } %651, 1
  %653 = icmp ult i64 %648, %652
  br i1 %653, label %662, label %663

654:                                              ; preds = %662
  %655 = extractvalue { ptr, i64 } %651, 0
  %656 = getelementptr inbounds i32, ptr %655, i64 %648
  %657 = load i32, ptr %656, align 4
  store i32 %657, ptr %22, align 4
  %658 = load i32, ptr %22, align 4
  %659 = zext i32 %658 to i64
  %660 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %647, i64 %659)
  %661 = extractvalue { i64, i1 } %660, 1
  br i1 %661, label %664, label %665

662:                                              ; preds = %645
  br label %654

663:                                              ; preds = %645
  call fastcc void @builtin.panicOutOfBounds(i64 %648, i64 %652)
  unreachable

664:                                              ; preds = %654
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

665:                                              ; preds = %654
  %666 = extractvalue { i64, i1 } %660, 0
  store i64 %666, ptr %26, align 8
  %667 = load i64, ptr %26, align 8
  %668 = icmp ult i64 %667, 4294967296
  br i1 %668, label %670, label %671

669:                                              ; preds = %671
  br label %570

670:                                              ; preds = %665
  br label %569

671:                                              ; preds = %665
  br label %669

672:                                              ; preds = %690
  %673 = load i64, ptr %31, align 8
  %674 = load i64, ptr %52, align 8
  %675 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %673, i64 %674)
  %676 = extractvalue { i64, i1 } %675, 1
  br i1 %676, label %774, label %775

677:                                              ; preds = %681, %565
  %678 = load i64, ptr %45, align 8
  %679 = load i64, ptr %52, align 8
  %680 = icmp ule i64 %678, %679
  br i1 %680, label %682, label %690

681:                                              ; preds = %772
  br label %677

682:                                              ; preds = %677
  %683 = load i64, ptr %28, align 8
  %684 = load i64, ptr %45, align 8
  %685 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %686 = insertvalue { ptr, i64 } poison, ptr %685, 0
  %687 = insertvalue { ptr, i64 } %686, i64 2048, 1
  %688 = extractvalue { ptr, i64 } %687, 1
  %689 = icmp ult i64 %684, %688
  br i1 %689, label %699, label %700

690:                                              ; preds = %677
  br label %672

691:                                              ; preds = %699
  %692 = extractvalue { ptr, i64 } %687, 0
  %693 = getelementptr inbounds i32, ptr %692, i64 %684
  %694 = load i32, ptr %693, align 4
  store i32 %694, ptr %20, align 4
  %695 = load i32, ptr %20, align 4
  %696 = zext i32 %695 to i64
  %697 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %683, i64 %696)
  %698 = extractvalue { i64, i1 } %697, 1
  br i1 %698, label %701, label %702

699:                                              ; preds = %682
  br label %691

700:                                              ; preds = %682
  call fastcc void @builtin.panicOutOfBounds(i64 %684, i64 %688)
  unreachable

701:                                              ; preds = %691
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

702:                                              ; preds = %691
  %703 = extractvalue { i64, i1 } %697, 0
  %704 = load i64, ptr %45, align 8
  %705 = load i64, ptr %31, align 8
  %706 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %704, i64 %705)
  %707 = extractvalue { i64, i1 } %706, 1
  br i1 %707, label %708, label %709

708:                                              ; preds = %702
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

709:                                              ; preds = %702
  %710 = extractvalue { i64, i1 } %706, 0
  %711 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %712 = insertvalue { ptr, i64 } poison, ptr %711, 0
  %713 = insertvalue { ptr, i64 } %712, i64 2049, 1
  %714 = extractvalue { ptr, i64 } %713, 1
  %715 = icmp ult i64 %710, %714
  br i1 %715, label %725, label %726

716:                                              ; preds = %725
  %717 = extractvalue { ptr, i64 } %713, 0
  %718 = getelementptr inbounds i32, ptr %717, i64 %710
  %719 = load i32, ptr %718, align 4
  store i32 %719, ptr %19, align 4
  %720 = load i32, ptr %19, align 4
  %721 = load i64, ptr %21, align 8
  %722 = zext i32 %720 to i64
  %723 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %722, i64 %721)
  %724 = extractvalue { i64, i1 } %723, 1
  br i1 %724, label %727, label %728

725:                                              ; preds = %709
  br label %716

726:                                              ; preds = %709
  call fastcc void @builtin.panicOutOfBounds(i64 %710, i64 %714)
  unreachable

727:                                              ; preds = %716
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

728:                                              ; preds = %716
  %729 = extractvalue { i64, i1 } %723, 0
  %730 = trunc i64 %703 to i32
  %731 = zext i32 %730 to i64
  %732 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %729, i64 %731)
  %733 = extractvalue { i64, i1 } %732, 1
  br i1 %733, label %734, label %735

734:                                              ; preds = %728
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

735:                                              ; preds = %728
  %736 = extractvalue { i64, i1 } %732, 0
  %737 = load i64, ptr %45, align 8
  %738 = load i64, ptr %31, align 8
  %739 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %737, i64 %738)
  %740 = extractvalue { i64, i1 } %739, 1
  br i1 %740, label %741, label %742

741:                                              ; preds = %735
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

742:                                              ; preds = %735
  %743 = extractvalue { i64, i1 } %739, 0
  %744 = trunc i64 %736 to i32
  %745 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %746 = insertvalue { ptr, i64 } poison, ptr %745, 0
  %747 = insertvalue { ptr, i64 } %746, i64 2049, 1
  store { ptr, i64 } %747, ptr %18, align 8
  %748 = load { ptr, i64 }, ptr %18, align 8
  %749 = extractvalue { ptr, i64 } %748, 1
  %750 = icmp ult i64 %743, %749
  br i1 %750, label %757, label %758

751:                                              ; preds = %757
  %752 = extractvalue { ptr, i64 } %748, 0
  %753 = getelementptr inbounds i32, ptr %752, i64 %743
  store i32 %744, ptr %753, align 4
  %754 = lshr i64 %703, 32
  %755 = sub i64 9223372036854775807, %754
  %756 = icmp ule i64 %755, 9223372036854775807
  br i1 %756, label %763, label %764

757:                                              ; preds = %742
  br label %751

758:                                              ; preds = %742
  call fastcc void @builtin.panicOutOfBounds(i64 %743, i64 %749)
  unreachable

759:                                              ; preds = %763
  %760 = ashr i64 %736, 32
  %761 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %754, i64 %760)
  %762 = extractvalue { i64, i1 } %761, 1
  br i1 %762, label %765, label %766

763:                                              ; preds = %751
  br label %759

764:                                              ; preds = %751
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

765:                                              ; preds = %759
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

766:                                              ; preds = %759
  %767 = extractvalue { i64, i1 } %761, 0
  store i64 %767, ptr %21, align 8
  %768 = load i64, ptr %45, align 8
  %769 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %768, i64 1)
  %770 = extractvalue { i64, i1 } %769, 1
  br i1 %770, label %771, label %772

771:                                              ; preds = %766
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

772:                                              ; preds = %766
  %773 = extractvalue { i64, i1 } %769, 0
  store i64 %773, ptr %45, align 8
  br label %681

774:                                              ; preds = %672
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

775:                                              ; preds = %672
  %776 = extractvalue { i64, i1 } %675, 0
  %777 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %776, i64 1)
  %778 = extractvalue { i64, i1 } %777, 1
  br i1 %778, label %779, label %780

779:                                              ; preds = %775
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

780:                                              ; preds = %775
  %781 = extractvalue { i64, i1 } %777, 0
  %782 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %783 = insertvalue { ptr, i64 } poison, ptr %782, 0
  %784 = insertvalue { ptr, i64 } %783, i64 2049, 1
  %785 = extractvalue { ptr, i64 } %784, 1
  %786 = icmp ult i64 %781, %785
  br i1 %786, label %799, label %800

787:                                              ; preds = %799
  %788 = extractvalue { ptr, i64 } %784, 0
  %789 = getelementptr inbounds i32, ptr %788, i64 %781
  %790 = load i32, ptr %789, align 4
  store i32 %790, ptr %17, align 4
  %791 = load i32, ptr %17, align 4
  %792 = load i64, ptr %21, align 8
  %793 = zext i32 %791 to i64
  %794 = sub i64 %793, %792
  %795 = load i64, ptr %31, align 8
  %796 = load i64, ptr %52, align 8
  %797 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %795, i64 %796)
  %798 = extractvalue { i64, i1 } %797, 1
  br i1 %798, label %801, label %802

799:                                              ; preds = %780
  br label %787

800:                                              ; preds = %780
  call fastcc void @builtin.panicOutOfBounds(i64 %781, i64 %785)
  unreachable

801:                                              ; preds = %787
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

802:                                              ; preds = %787
  %803 = extractvalue { i64, i1 } %797, 0
  %804 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %803, i64 1)
  %805 = extractvalue { i64, i1 } %804, 1
  br i1 %805, label %806, label %807

806:                                              ; preds = %802
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

807:                                              ; preds = %802
  %808 = extractvalue { i64, i1 } %804, 0
  %809 = trunc i64 %794 to i32
  %810 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %811 = insertvalue { ptr, i64 } poison, ptr %810, 0
  %812 = insertvalue { ptr, i64 } %811, i64 2049, 1
  store { ptr, i64 } %812, ptr %16, align 8
  %813 = load { ptr, i64 }, ptr %16, align 8
  %814 = extractvalue { ptr, i64 } %813, 1
  %815 = icmp ult i64 %808, %814
  br i1 %815, label %820, label %821

816:                                              ; preds = %820
  %817 = extractvalue { ptr, i64 } %813, 0
  %818 = getelementptr inbounds i32, ptr %817, i64 %808
  store i32 %809, ptr %818, align 4
  %819 = icmp slt i64 %794, 0
  br i1 %819, label %825, label %826

820:                                              ; preds = %807
  br label %816

821:                                              ; preds = %807
  call fastcc void @builtin.panicOutOfBounds(i64 %808, i64 %814)
  unreachable

822:                                              ; preds = %826, %956
  %823 = load i64, ptr %31, align 8
  %824 = icmp eq i64 %823, 0
  br i1 %824, label %965, label %966

825:                                              ; preds = %816
  store i64 0, ptr %15, align 8
  store i64 0, ptr %45, align 8
  br label %832

826:                                              ; preds = %816
  br label %822

827:                                              ; preds = %842
  %828 = load i64, ptr %31, align 8
  %829 = load i64, ptr %52, align 8
  %830 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %828, i64 %829)
  %831 = extractvalue { i64, i1 } %830, 1
  br i1 %831, label %910, label %911

832:                                              ; preds = %836, %825
  %833 = load i64, ptr %45, align 8
  %834 = load i64, ptr %52, align 8
  %835 = icmp ule i64 %833, %834
  br i1 %835, label %837, label %842

836:                                              ; preds = %908
  br label %832

837:                                              ; preds = %832
  %838 = load i64, ptr %45, align 8
  %839 = load i64, ptr %31, align 8
  %840 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %838, i64 %839)
  %841 = extractvalue { i64, i1 } %840, 1
  br i1 %841, label %843, label %844

842:                                              ; preds = %832
  br label %827

843:                                              ; preds = %837
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

844:                                              ; preds = %837
  %845 = extractvalue { i64, i1 } %840, 0
  %846 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %847 = insertvalue { ptr, i64 } poison, ptr %846, 0
  %848 = insertvalue { ptr, i64 } %847, i64 2049, 1
  %849 = extractvalue { ptr, i64 } %848, 1
  %850 = icmp ult i64 %845, %849
  br i1 %850, label %863, label %864

851:                                              ; preds = %863
  %852 = extractvalue { ptr, i64 } %848, 0
  %853 = getelementptr inbounds i32, ptr %852, i64 %845
  %854 = load i32, ptr %853, align 4
  store i32 %854, ptr %14, align 4
  %855 = load i32, ptr %14, align 4
  %856 = zext i32 %855 to i64
  %857 = load i64, ptr %45, align 8
  %858 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %859 = insertvalue { ptr, i64 } poison, ptr %858, 0
  %860 = insertvalue { ptr, i64 } %859, i64 2048, 1
  %861 = extractvalue { ptr, i64 } %860, 1
  %862 = icmp ult i64 %857, %861
  br i1 %862, label %873, label %874

863:                                              ; preds = %844
  br label %851

864:                                              ; preds = %844
  call fastcc void @builtin.panicOutOfBounds(i64 %845, i64 %849)
  unreachable

865:                                              ; preds = %873
  %866 = extractvalue { ptr, i64 } %860, 0
  %867 = getelementptr inbounds i32, ptr %866, i64 %857
  %868 = load i32, ptr %867, align 4
  store i32 %868, ptr %13, align 4
  %869 = load i32, ptr %13, align 4
  %870 = zext i32 %869 to i64
  %871 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %856, i64 %870)
  %872 = extractvalue { i64, i1 } %871, 1
  br i1 %872, label %875, label %876

873:                                              ; preds = %851
  br label %865

874:                                              ; preds = %851
  call fastcc void @builtin.panicOutOfBounds(i64 %857, i64 %861)
  unreachable

875:                                              ; preds = %865
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

876:                                              ; preds = %865
  %877 = extractvalue { i64, i1 } %871, 0
  %878 = load i64, ptr %15, align 8
  %879 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %877, i64 %878)
  %880 = extractvalue { i64, i1 } %879, 1
  br i1 %880, label %881, label %882

881:                                              ; preds = %876
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

882:                                              ; preds = %876
  %883 = extractvalue { i64, i1 } %879, 0
  %884 = load i64, ptr %45, align 8
  %885 = load i64, ptr %31, align 8
  %886 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %884, i64 %885)
  %887 = extractvalue { i64, i1 } %886, 1
  br i1 %887, label %888, label %889

888:                                              ; preds = %882
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

889:                                              ; preds = %882
  %890 = extractvalue { i64, i1 } %886, 0
  %891 = trunc i64 %883 to i32
  %892 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %893 = insertvalue { ptr, i64 } poison, ptr %892, 0
  %894 = insertvalue { ptr, i64 } %893, i64 2049, 1
  store { ptr, i64 } %894, ptr %12, align 8
  %895 = load { ptr, i64 }, ptr %12, align 8
  %896 = extractvalue { ptr, i64 } %895, 1
  %897 = icmp ult i64 %890, %896
  br i1 %897, label %905, label %906

898:                                              ; preds = %905
  %899 = extractvalue { ptr, i64 } %895, 0
  %900 = getelementptr inbounds i32, ptr %899, i64 %890
  store i32 %891, ptr %900, align 4
  %901 = lshr i64 %883, 32
  store i64 %901, ptr %15, align 8
  %902 = load i64, ptr %45, align 8
  %903 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %902, i64 1)
  %904 = extractvalue { i64, i1 } %903, 1
  br i1 %904, label %907, label %908

905:                                              ; preds = %889
  br label %898

906:                                              ; preds = %889
  call fastcc void @builtin.panicOutOfBounds(i64 %890, i64 %896)
  unreachable

907:                                              ; preds = %898
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

908:                                              ; preds = %898
  %909 = extractvalue { i64, i1 } %903, 0
  store i64 %909, ptr %45, align 8
  br label %836

910:                                              ; preds = %827
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

911:                                              ; preds = %827
  %912 = extractvalue { i64, i1 } %830, 0
  %913 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %912, i64 1)
  %914 = extractvalue { i64, i1 } %913, 1
  br i1 %914, label %915, label %916

915:                                              ; preds = %911
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

916:                                              ; preds = %911
  %917 = extractvalue { i64, i1 } %913, 0
  %918 = load i64, ptr %31, align 8
  %919 = load i64, ptr %52, align 8
  %920 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %918, i64 %919)
  %921 = extractvalue { i64, i1 } %920, 1
  br i1 %921, label %922, label %923

922:                                              ; preds = %916
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

923:                                              ; preds = %916
  %924 = extractvalue { i64, i1 } %920, 0
  %925 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %924, i64 1)
  %926 = extractvalue { i64, i1 } %925, 1
  br i1 %926, label %927, label %928

927:                                              ; preds = %923
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

928:                                              ; preds = %923
  %929 = extractvalue { i64, i1 } %925, 0
  %930 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %931 = insertvalue { ptr, i64 } poison, ptr %930, 0
  %932 = insertvalue { ptr, i64 } %931, i64 2049, 1
  %933 = extractvalue { ptr, i64 } %932, 1
  %934 = icmp ult i64 %929, %933
  br i1 %934, label %944, label %945

935:                                              ; preds = %944
  %936 = extractvalue { ptr, i64 } %932, 0
  %937 = getelementptr inbounds i32, ptr %936, i64 %929
  %938 = load i32, ptr %937, align 4
  store i32 %938, ptr %11, align 4
  %939 = load i32, ptr %11, align 4
  %940 = load i64, ptr %15, align 8
  %941 = zext i32 %939 to i64
  %942 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %941, i64 %940)
  %943 = extractvalue { i64, i1 } %942, 1
  br i1 %943, label %946, label %947

944:                                              ; preds = %928
  br label %935

945:                                              ; preds = %928
  call fastcc void @builtin.panicOutOfBounds(i64 %929, i64 %933)
  unreachable

946:                                              ; preds = %935
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

947:                                              ; preds = %935
  %948 = extractvalue { i64, i1 } %942, 0
  %949 = trunc i64 %948 to i32
  %950 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %951 = insertvalue { ptr, i64 } poison, ptr %950, 0
  %952 = insertvalue { ptr, i64 } %951, i64 2049, 1
  store { ptr, i64 } %952, ptr %10, align 8
  %953 = load { ptr, i64 }, ptr %10, align 8
  %954 = extractvalue { ptr, i64 } %953, 1
  %955 = icmp ult i64 %917, %954
  br i1 %955, label %959, label %960

956:                                              ; preds = %959
  %957 = extractvalue { ptr, i64 } %953, 0
  %958 = getelementptr inbounds i32, ptr %957, i64 %917
  store i32 %949, ptr %958, align 4
  br label %822

959:                                              ; preds = %947
  br label %956

960:                                              ; preds = %947
  call fastcc void @builtin.panicOutOfBounds(i64 %917, i64 %954)
  unreachable

961:                                              ; preds = %966
  %962 = load i64, ptr %31, align 8
  %963 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %962, i64 1)
  %964 = extractvalue { i64, i1 } %963, 1
  br i1 %964, label %967, label %968

965:                                              ; preds = %822
  br label %472

966:                                              ; preds = %822
  br label %961

967:                                              ; preds = %961
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

968:                                              ; preds = %961
  %969 = extractvalue { i64, i1 } %963, 0
  store i64 %969, ptr %31, align 8
  br label %475

970:                                              ; preds = %972, %1053
  br label %88

971:                                              ; preds = %472
  store i64 0, ptr %45, align 8
  br label %981

972:                                              ; preds = %472
  br label %970

973:                                              ; preds = %994
  %974 = load i64, ptr %52, align 8
  %975 = load i64, ptr %52, align 8
  %976 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %977 = insertvalue { ptr, i64 } poison, ptr %976, 0
  %978 = insertvalue { ptr, i64 } %977, i64 2049, 1
  %979 = extractvalue { ptr, i64 } %978, 1
  %980 = icmp ult i64 %975, %979
  br i1 %980, label %1051, label %1052

981:                                              ; preds = %985, %971
  %982 = load i64, ptr %45, align 8
  %983 = load i64, ptr %52, align 8
  %984 = icmp ule i64 %982, %983
  br i1 %984, label %986, label %994

985:                                              ; preds = %1040
  br label %981

986:                                              ; preds = %981
  %987 = load i64, ptr %45, align 8
  %988 = load i64, ptr %45, align 8
  %989 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %990 = insertvalue { ptr, i64 } poison, ptr %989, 0
  %991 = insertvalue { ptr, i64 } %990, i64 2049, 1
  %992 = extractvalue { ptr, i64 } %991, 1
  %993 = icmp ult i64 %988, %992
  br i1 %993, label %1004, label %1005

994:                                              ; preds = %981
  br label %973

995:                                              ; preds = %1004
  %996 = extractvalue { ptr, i64 } %991, 0
  %997 = getelementptr inbounds i32, ptr %996, i64 %988
  %998 = load i32, ptr %997, align 4
  store i32 %998, ptr %9, align 4
  %999 = load i32, ptr %9, align 4
  %1000 = call fastcc i32 @math.shr__anon_3897(i32 %999, i6 %251)
  %1001 = load i64, ptr %45, align 8
  %1002 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1001, i64 1)
  %1003 = extractvalue { i64, i1 } %1002, 1
  br i1 %1003, label %1006, label %1007

1004:                                             ; preds = %986
  br label %995

1005:                                             ; preds = %986
  call fastcc void @builtin.panicOutOfBounds(i64 %988, i64 %992)
  unreachable

1006:                                             ; preds = %995
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1007:                                             ; preds = %995
  %1008 = extractvalue { i64, i1 } %1002, 0
  %1009 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %1010 = insertvalue { ptr, i64 } poison, ptr %1009, 0
  %1011 = insertvalue { ptr, i64 } %1010, i64 2049, 1
  %1012 = extractvalue { ptr, i64 } %1011, 1
  %1013 = icmp ult i64 %1008, %1012
  br i1 %1013, label %1021, label %1022

1014:                                             ; preds = %1021
  %1015 = extractvalue { ptr, i64 } %1011, 0
  %1016 = getelementptr inbounds i32, ptr %1015, i64 %1008
  %1017 = load i32, ptr %1016, align 4
  store i32 %1017, ptr %8, align 4
  %1018 = load i32, ptr %8, align 4
  %1019 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %251)
  %1020 = extractvalue { i6, i1 } %1019, 1
  br i1 %1020, label %1023, label %1024

1021:                                             ; preds = %1007
  br label %1014

1022:                                             ; preds = %1007
  call fastcc void @builtin.panicOutOfBounds(i64 %1008, i64 %1012)
  unreachable

1023:                                             ; preds = %1014
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1024:                                             ; preds = %1014
  %1025 = extractvalue { i6, i1 } %1019, 0
  %1026 = call fastcc i32 @math.shl__anon_3896(i32 %1018, i6 %1025)
  %1027 = or i32 %1000, %1026
  store { ptr, i64 } %80, ptr %7, align 8
  %1028 = load { ptr, i64 }, ptr %7, align 8
  %1029 = extractvalue { ptr, i64 } %1028, 1
  %1030 = icmp ult i64 %987, %1029
  br i1 %1030, label %1037, label %1038

1031:                                             ; preds = %1037
  %1032 = extractvalue { ptr, i64 } %1028, 0
  %1033 = getelementptr inbounds i32, ptr %1032, i64 %987
  store i32 %1027, ptr %1033, align 4
  %1034 = load i64, ptr %45, align 8
  %1035 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1034, i64 1)
  %1036 = extractvalue { i64, i1 } %1035, 1
  br i1 %1036, label %1039, label %1040

1037:                                             ; preds = %1024
  br label %1031

1038:                                             ; preds = %1024
  call fastcc void @builtin.panicOutOfBounds(i64 %987, i64 %1029)
  unreachable

1039:                                             ; preds = %1031
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1040:                                             ; preds = %1031
  %1041 = extractvalue { i64, i1 } %1035, 0
  store i64 %1041, ptr %45, align 8
  br label %985

1042:                                             ; preds = %1051
  %1043 = extractvalue { ptr, i64 } %978, 0
  %1044 = getelementptr inbounds i32, ptr %1043, i64 %975
  %1045 = load i32, ptr %1044, align 4
  store i32 %1045, ptr %6, align 4
  %1046 = load i32, ptr %6, align 4
  %1047 = call fastcc i32 @math.shr__anon_3897(i32 %1046, i6 %251)
  store { ptr, i64 } %80, ptr %5, align 8
  %1048 = load { ptr, i64 }, ptr %5, align 8
  %1049 = extractvalue { ptr, i64 } %1048, 1
  %1050 = icmp ult i64 %974, %1049
  br i1 %1050, label %1056, label %1057

1051:                                             ; preds = %973
  br label %1042

1052:                                             ; preds = %973
  call fastcc void @builtin.panicOutOfBounds(i64 %975, i64 %979)
  unreachable

1053:                                             ; preds = %1056
  %1054 = extractvalue { ptr, i64 } %1048, 0
  %1055 = getelementptr inbounds i32, ptr %1054, i64 %974
  store i32 %1047, ptr %1055, align 4
  br label %970

1056:                                             ; preds = %1042
  br label %1053

1057:                                             ; preds = %1042
  call fastcc void @builtin.panicOutOfBounds(i64 %974, i64 %1049)
  unreachable

1058:                                             ; preds = %88
  br label %87

1059:                                             ; preds = %88
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__udivmodti4(i128 %0, i128 %1, ptr align 8 %2) #0 {
  %4 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3472(i128 %0, i128 %1, ptr align 8 %2)
  ret i128 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__clear_cache(i64 %0, i64 %1) #0 {
  call fastcc void @compiler_rt.clear_cache.exportIt()
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.clear_cache.exportIt() unnamed_addr #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__atomic_load(i32 %0, ptr nonnull align 1 %1, ptr nonnull align 1 %2, i32 %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = ptrtoint ptr %1 to i64
  %8 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %7)
  store ptr %8, ptr %6, align 8
  store ptr %2, ptr %5, align 8
  %9 = load ptr, ptr %5, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 0
  %11 = zext i32 %0 to i64
  %12 = icmp ule i64 0, %11
  br i1 %12, label %15, label %16

13:                                               ; preds = %15
  %14 = icmp ule i64 0, %11
  br i1 %14, label %27, label %28

15:                                               ; preds = %4
  br label %13

16:                                               ; preds = %4
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %11)
  unreachable

17:                                               ; preds = %27
  %18 = insertvalue { ptr, i64 } poison, ptr %10, 0
  %19 = insertvalue { ptr, i64 } %18, i64 %11, 1
  %20 = extractvalue { ptr, i64 } %19, 1
  %21 = extractvalue { ptr, i64 } %19, 0
  %22 = getelementptr inbounds i8, ptr %1, i64 %20
  %23 = getelementptr inbounds i8, ptr %21, i64 %20
  %24 = icmp uge ptr %21, %22
  %25 = icmp uge ptr %1, %23
  %26 = or i1 %24, %25
  br i1 %26, label %33, label %34

27:                                               ; preds = %13
  br label %17

28:                                               ; preds = %13
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %11)
  unreachable

29:                                               ; preds = %33
  %30 = extractvalue { ptr, i64 } %19, 1
  %31 = extractvalue { ptr, i64 } %19, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %31, ptr align 1 %1, i64 %30, i1 false)
  %32 = load ptr, ptr %6, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %32)
  ret void

33:                                               ; preds = %17
  br label %29

34:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @116)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 %0, i64 %1) unnamed_addr #0 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  store ptr %0, ptr %3, align 8
  %5 = load ptr, ptr %3, align 8
  %6 = getelementptr inbounds %compiler_rt.atomics.SpinlockTable, ptr %5, i32 0, i32 0
  %7 = lshr i64 %1, 3
  %8 = urem i64 %7, 64
  %9 = icmp ult i64 %8, 64
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = getelementptr inbounds [64 x %compiler_rt.atomics.SpinlockTable.Spinlock], ptr %6, i64 0, i64 %8
  store ptr %11, ptr %4, align 8
  %12 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.acquire(ptr nonnull align 64 %12)
  %13 = load ptr, ptr %4, align 8
  ret ptr %13

14:                                               ; preds = %2
  br label %10

15:                                               ; preds = %2
  call fastcc void @builtin.panicOutOfBounds(i64 %8, i64 64)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %compiler_rt.atomics.SpinlockTable.Spinlock, ptr %3, i32 0, i32 0
  store atomic i64 0, ptr %4 release, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__atomic_store(i32 %0, ptr nonnull align 1 %1, ptr nonnull align 1 %2, i32 %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = ptrtoint ptr %1 to i64
  %8 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %7)
  store ptr %8, ptr %6, align 8
  store ptr %1, ptr %5, align 8
  %9 = load ptr, ptr %5, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 0
  %11 = zext i32 %0 to i64
  %12 = icmp ule i64 0, %11
  br i1 %12, label %15, label %16

13:                                               ; preds = %15
  %14 = icmp ule i64 0, %11
  br i1 %14, label %27, label %28

15:                                               ; preds = %4
  br label %13

16:                                               ; preds = %4
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %11)
  unreachable

17:                                               ; preds = %27
  %18 = insertvalue { ptr, i64 } poison, ptr %10, 0
  %19 = insertvalue { ptr, i64 } %18, i64 %11, 1
  %20 = extractvalue { ptr, i64 } %19, 1
  %21 = extractvalue { ptr, i64 } %19, 0
  %22 = getelementptr inbounds i8, ptr %2, i64 %20
  %23 = getelementptr inbounds i8, ptr %21, i64 %20
  %24 = icmp uge ptr %21, %22
  %25 = icmp uge ptr %2, %23
  %26 = or i1 %24, %25
  br i1 %26, label %33, label %34

27:                                               ; preds = %13
  br label %17

28:                                               ; preds = %13
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %11)
  unreachable

29:                                               ; preds = %33
  %30 = extractvalue { ptr, i64 } %19, 1
  %31 = extractvalue { ptr, i64 } %19, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %31, ptr align 1 %2, i64 %30, i1 false)
  %32 = load ptr, ptr %6, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %32)
  ret void

33:                                               ; preds = %17
  br label %29

34:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @117)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__atomic_exchange(i32 %0, ptr nonnull align 1 %1, ptr nonnull align 1 %2, ptr nonnull align 1 %3, i32 %4) #0 {
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = ptrtoint ptr %1 to i64
  %10 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %9)
  store ptr %10, ptr %8, align 8
  store ptr %3, ptr %7, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 0
  %13 = zext i32 %0 to i64
  %14 = icmp ule i64 0, %13
  br i1 %14, label %17, label %18

15:                                               ; preds = %17
  %16 = icmp ule i64 0, %13
  br i1 %16, label %29, label %30

17:                                               ; preds = %5
  br label %15

18:                                               ; preds = %5
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %13)
  unreachable

19:                                               ; preds = %29
  %20 = insertvalue { ptr, i64 } poison, ptr %12, 0
  %21 = insertvalue { ptr, i64 } %20, i64 %13, 1
  %22 = extractvalue { ptr, i64 } %21, 1
  %23 = extractvalue { ptr, i64 } %21, 0
  %24 = getelementptr inbounds i8, ptr %1, i64 %22
  %25 = getelementptr inbounds i8, ptr %23, i64 %22
  %26 = icmp uge ptr %23, %24
  %27 = icmp uge ptr %1, %25
  %28 = or i1 %26, %27
  br i1 %28, label %38, label %39

29:                                               ; preds = %15
  br label %19

30:                                               ; preds = %15
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %13)
  unreachable

31:                                               ; preds = %38
  %32 = extractvalue { ptr, i64 } %21, 1
  %33 = extractvalue { ptr, i64 } %21, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %33, ptr align 1 %1, i64 %32, i1 false)
  store ptr %1, ptr %6, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = getelementptr inbounds i8, ptr %34, i64 0
  %36 = zext i32 %0 to i64
  %37 = icmp ule i64 0, %36
  br i1 %37, label %42, label %43

38:                                               ; preds = %19
  br label %31

39:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @118)
  unreachable

40:                                               ; preds = %42
  %41 = icmp ule i64 0, %36
  br i1 %41, label %54, label %55

42:                                               ; preds = %31
  br label %40

43:                                               ; preds = %31
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %36)
  unreachable

44:                                               ; preds = %54
  %45 = insertvalue { ptr, i64 } poison, ptr %35, 0
  %46 = insertvalue { ptr, i64 } %45, i64 %36, 1
  %47 = extractvalue { ptr, i64 } %46, 1
  %48 = extractvalue { ptr, i64 } %46, 0
  %49 = getelementptr inbounds i8, ptr %2, i64 %47
  %50 = getelementptr inbounds i8, ptr %48, i64 %47
  %51 = icmp uge ptr %48, %49
  %52 = icmp uge ptr %2, %50
  %53 = or i1 %51, %52
  br i1 %53, label %60, label %61

54:                                               ; preds = %40
  br label %44

55:                                               ; preds = %40
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %36)
  unreachable

56:                                               ; preds = %60
  %57 = extractvalue { ptr, i64 } %46, 1
  %58 = extractvalue { ptr, i64 } %46, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %58, ptr align 1 %2, i64 %57, i1 false)
  %59 = load ptr, ptr %8, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %59)
  ret void

60:                                               ; preds = %44
  br label %56

61:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @118)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange(i32 %0, ptr nonnull align 1 %1, ptr nonnull align 1 %2, ptr nonnull align 1 %3, i32 %4, i32 %5) #0 {
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca ptr, align 8
  %12 = ptrtoint ptr %1 to i64
  %13 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %12)
  store ptr %13, ptr %11, align 8
  store i64 0, ptr %10, align 8
  store ptr %1, ptr %9, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = getelementptr inbounds i8, ptr %14, i64 0
  %16 = zext i32 %0 to i64
  %17 = icmp ule i64 0, %16
  br i1 %17, label %20, label %21

18:                                               ; preds = %20
  %19 = icmp ule i64 0, %16
  br i1 %19, label %26, label %27

20:                                               ; preds = %6
  br label %18

21:                                               ; preds = %6
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %16)
  unreachable

22:                                               ; preds = %26
  %23 = insertvalue { ptr, i64 } poison, ptr %15, 0
  %24 = insertvalue { ptr, i64 } %23, i64 %16, 1
  %25 = extractvalue { ptr, i64 } %24, 1
  br label %33

26:                                               ; preds = %18
  br label %22

27:                                               ; preds = %18
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %16)
  unreachable

28:                                               ; preds = %51
  store ptr %2, ptr %7, align 8
  %29 = load ptr, ptr %7, align 8
  %30 = getelementptr inbounds i8, ptr %29, i64 0
  %31 = zext i32 %0 to i64
  %32 = icmp ule i64 0, %31
  br i1 %32, label %77, label %78

33:                                               ; preds = %36, %22
  %34 = load i64, ptr %10, align 8
  %35 = icmp ult i64 %34, %25
  br i1 %35, label %38, label %45

36:                                               ; preds = %50
  %37 = add nuw i64 %34, 1
  store i64 %37, ptr %10, align 8
  br label %33

38:                                               ; preds = %33
  %39 = extractvalue { ptr, i64 } %24, 0
  %40 = getelementptr inbounds i8, ptr %39, i64 %34
  %41 = load i8, ptr %40, align 1
  %42 = getelementptr inbounds i8, ptr %2, i64 %34
  %43 = load i8, ptr %42, align 1
  %44 = icmp ne i8 %43, %41
  br i1 %44, label %51, label %52

45:                                               ; preds = %33
  store ptr %1, ptr %8, align 8
  %46 = load ptr, ptr %8, align 8
  %47 = getelementptr inbounds i8, ptr %46, i64 0
  %48 = zext i32 %0 to i64
  %49 = icmp ule i64 0, %48
  br i1 %49, label %55, label %56

50:                                               ; preds = %52
  br label %36

51:                                               ; preds = %38
  br label %28

52:                                               ; preds = %38
  br label %50

53:                                               ; preds = %55
  %54 = icmp ule i64 0, %48
  br i1 %54, label %67, label %68

55:                                               ; preds = %45
  br label %53

56:                                               ; preds = %45
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %48)
  unreachable

57:                                               ; preds = %67
  %58 = insertvalue { ptr, i64 } poison, ptr %47, 0
  %59 = insertvalue { ptr, i64 } %58, i64 %48, 1
  %60 = extractvalue { ptr, i64 } %59, 1
  %61 = extractvalue { ptr, i64 } %59, 0
  %62 = getelementptr inbounds i8, ptr %3, i64 %60
  %63 = getelementptr inbounds i8, ptr %61, i64 %60
  %64 = icmp uge ptr %61, %62
  %65 = icmp uge ptr %3, %63
  %66 = or i1 %64, %65
  br i1 %66, label %73, label %74

67:                                               ; preds = %53
  br label %57

68:                                               ; preds = %53
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %48)
  unreachable

69:                                               ; preds = %73
  %70 = extractvalue { ptr, i64 } %59, 1
  %71 = extractvalue { ptr, i64 } %59, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %71, ptr align 1 %3, i64 %70, i1 false)
  %72 = load ptr, ptr %11, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %72)
  ret i32 1

73:                                               ; preds = %57
  br label %69

74:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @119)
  unreachable

75:                                               ; preds = %77
  %76 = icmp ule i64 0, %31
  br i1 %76, label %89, label %90

77:                                               ; preds = %28
  br label %75

78:                                               ; preds = %28
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %31)
  unreachable

79:                                               ; preds = %89
  %80 = insertvalue { ptr, i64 } poison, ptr %30, 0
  %81 = insertvalue { ptr, i64 } %80, i64 %31, 1
  %82 = extractvalue { ptr, i64 } %81, 1
  %83 = extractvalue { ptr, i64 } %81, 0
  %84 = getelementptr inbounds i8, ptr %1, i64 %82
  %85 = getelementptr inbounds i8, ptr %83, i64 %82
  %86 = icmp uge ptr %83, %84
  %87 = icmp uge ptr %1, %85
  %88 = or i1 %86, %87
  br i1 %88, label %95, label %96

89:                                               ; preds = %75
  br label %79

90:                                               ; preds = %75
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %31)
  unreachable

91:                                               ; preds = %95
  %92 = extractvalue { ptr, i64 } %81, 1
  %93 = extractvalue { ptr, i64 } %81, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %93, ptr align 1 %1, i64 %92, i1 false)
  %94 = load ptr, ptr %11, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %94)
  ret i32 0

95:                                               ; preds = %79
  br label %91

96:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @119)
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_add_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = atomicrmw add ptr %0, i8 %1 seq_cst, align 1
  ret i8 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_add_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = atomicrmw add ptr %0, i16 %1 seq_cst, align 2
  ret i16 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_fetch_add_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = atomicrmw add ptr %0, i32 %1 seq_cst, align 4
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_fetch_add_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = atomicrmw add ptr %0, i64 %1 seq_cst, align 8
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_fetch_add_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 8
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = add i128 %1, %0
  store i128 %4, ptr %3, align 8
  %5 = load i128, ptr %3, align 8
  ret i128 %5
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_sub_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = atomicrmw sub ptr %0, i8 %1 seq_cst, align 1
  ret i8 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_sub_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = atomicrmw sub ptr %0, i16 %1 seq_cst, align 2
  ret i16 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_fetch_sub_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = atomicrmw sub ptr %0, i32 %1 seq_cst, align 4
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_fetch_sub_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = atomicrmw sub ptr %0, i64 %1 seq_cst, align 8
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_fetch_sub_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.9(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 8
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.9(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = sub i128 %1, %0
  store i128 %4, ptr %3, align 8
  %5 = load i128, ptr %3, align 8
  ret i128 %5
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_and_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = and i8 %loaded, %1
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_and_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = and i16 %loaded, %1
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_fetch_and_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = and i32 %loaded, %1
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_fetch_and_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = and i64 %loaded, %1
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_fetch_and_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.10(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 8
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.10(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = and i128 %1, %0
  store i128 %4, ptr %3, align 8
  %5 = load i128, ptr %3, align 8
  ret i128 %5
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_or_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = or i8 %loaded, %1
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_or_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = or i16 %loaded, %1
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_fetch_or_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = or i32 %loaded, %1
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_fetch_or_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = or i64 %loaded, %1
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_fetch_or_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.11(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 8
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.11(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = or i128 %1, %0
  store i128 %4, ptr %3, align 8
  %5 = load i128, ptr %3, align 8
  ret i128 %5
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_xor_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = xor i8 %loaded, %1
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_xor_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = xor i16 %loaded, %1
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_fetch_xor_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = xor i32 %loaded, %1
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_fetch_xor_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = xor i64 %loaded, %1
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_fetch_xor_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.12(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 8
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.12(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = xor i128 %1, %0
  store i128 %4, ptr %3, align 8
  %5 = load i128, ptr %3, align 8
  ret i128 %5
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_nand_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = and i8 %loaded, %1
  %new = xor i8 %5, -1
  %6 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %6, 1
  %newloaded = extractvalue { i8, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_nand_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = and i16 %loaded, %1
  %new = xor i16 %5, -1
  %6 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %6, 1
  %newloaded = extractvalue { i16, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_fetch_nand_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = and i32 %loaded, %1
  %new = xor i32 %5, -1
  %6 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %6, 1
  %newloaded = extractvalue { i32, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_fetch_nand_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = and i64 %loaded, %1
  %new = xor i64 %5, -1
  %6 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %6, 1
  %newloaded = extractvalue { i64, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_fetch_nand_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.13(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 8
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.13(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = and i128 %1, %0
  %5 = xor i128 %4, -1
  store i128 %5, ptr %3, align 8
  %6 = load i128, ptr %3, align 8
  ret i128 %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_umax_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ugt i8 %loaded, %1
  %new = select i1 %5, i8 %loaded, i8 %1
  %6 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %6, 1
  %newloaded = extractvalue { i8, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_umax_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ugt i16 %loaded, %1
  %new = select i1 %5, i16 %loaded, i16 %1
  %6 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %6, 1
  %newloaded = extractvalue { i16, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_fetch_umax_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ugt i32 %loaded, %1
  %new = select i1 %5, i32 %loaded, i32 %1
  %6 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %6, 1
  %newloaded = extractvalue { i32, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_fetch_umax_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ugt i64 %loaded, %1
  %new = select i1 %5, i64 %loaded, i64 %1
  %6 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %6, 1
  %newloaded = extractvalue { i64, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_fetch_umax_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.14(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 8
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.14(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = call i128 @llvm.umax.i128(i128 %1, i128 %0)
  store i128 %4, ptr %3, align 8
  %5 = load i128, ptr %3, align 8
  ret i128 %5
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_umin_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ule i8 %loaded, %1
  %new = select i1 %5, i8 %loaded, i8 %1
  %6 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %6, 1
  %newloaded = extractvalue { i8, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_umin_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ule i16 %loaded, %1
  %new = select i1 %5, i16 %loaded, i16 %1
  %6 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %6, 1
  %newloaded = extractvalue { i16, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_fetch_umin_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ule i32 %loaded, %1
  %new = select i1 %5, i32 %loaded, i32 %1
  %6 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %6, 1
  %newloaded = extractvalue { i32, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_fetch_umin_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ule i64 %loaded, %1
  %new = select i1 %5, i64 %loaded, i64 %1
  %6 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %6, 1
  %newloaded = extractvalue { i64, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_fetch_umin_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.15(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 8
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.15(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 8
  %4 = call i128 @llvm.umin.i128(i128 %1, i128 %0)
  store i128 %4, ptr %3, align 8
  %5 = load i128, ptr %3, align 8
  ret i128 %5
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_load_1(ptr nonnull align 1 %0, i32 %1) #0 {
  %3 = load atomic i8, ptr %0 seq_cst, align 1
  ret i8 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_load_2(ptr nonnull align 2 %0, i32 %1) #0 {
  %3 = load atomic i16, ptr %0 seq_cst, align 2
  ret i16 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_load_4(ptr nonnull align 4 %0, i32 %1) #0 {
  %3 = load atomic i32, ptr %0 seq_cst, align 4
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_load_8(ptr nonnull align 8 %0, i32 %1) #0 {
  %3 = load atomic i64, ptr %0 seq_cst, align 8
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_load_16(ptr nonnull align 8 %0, i32 %1) #0 {
  %3 = alloca ptr, align 8
  %4 = ptrtoint ptr %0 to i64
  %5 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %4)
  store ptr %5, ptr %3, align 8
  %6 = load i128, ptr %0, align 8
  %7 = load ptr, ptr %3, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %7)
  ret i128 %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__atomic_store_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  store atomic i8 %1, ptr %0 seq_cst, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__atomic_store_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  store atomic i16 %1, ptr %0 seq_cst, align 2
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__atomic_store_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  store atomic i32 %1, ptr %0 seq_cst, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__atomic_store_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  store atomic i64 %1, ptr %0 seq_cst, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local void @__atomic_store_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  store i128 %1, ptr %0, align 8
  %7 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %7)
  ret void
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i8 @__atomic_exchange_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = atomicrmw xchg ptr %0, i8 %1 seq_cst, align 1
  ret i8 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local zeroext i16 @__atomic_exchange_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = atomicrmw xchg ptr %0, i16 %1 seq_cst, align 2
  ret i16 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_exchange_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = atomicrmw xchg ptr %0, i32 %1 seq_cst, align 4
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i64 @__atomic_exchange_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = atomicrmw xchg ptr %0, i64 %1 seq_cst, align 8
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i128 @__atomic_exchange_16(ptr nonnull align 8 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 8
  store i128 %1, ptr %0, align 8
  %8 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %8)
  ret i128 %7
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_1(ptr nonnull align 1 %0, ptr nonnull align 1 %1, i8 zeroext %2, i32 %3, i32 %4) #0 {
  %6 = alloca { i8, i8 }, align 1
  %7 = load i8, ptr %1, align 1
  %8 = cmpxchg ptr %0, i8 %7, i8 %2 seq_cst seq_cst, align 1
  %9 = extractvalue { i8, i1 } %8, 0
  %10 = extractvalue { i8, i1 } %8, 1
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds { i8, i8 }, ptr %6, i32 0, i32 0
  store i8 %9, ptr %13, align 1
  %14 = getelementptr inbounds { i8, i8 }, ptr %6, i32 0, i32 1
  store i8 %12, ptr %14, align 1
  %15 = getelementptr inbounds { i8, i8 }, ptr %6, i32 0, i32 1
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %21, label %24

18:                                               ; preds = %20, %21
  %19 = phi i32 [ 0, %21 ], [ 1, %20 ]
  ret i32 %19

20:                                               ; preds = %24
  br label %18

21:                                               ; preds = %5
  %22 = getelementptr inbounds { i8, i8 }, ptr %6, i32 0, i32 0
  %23 = load i8, ptr %22, align 1
  store i8 %23, ptr %1, align 1
  br label %18

24:                                               ; preds = %5
  br label %20
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_2(ptr nonnull align 2 %0, ptr nonnull align 2 %1, i16 zeroext %2, i32 %3, i32 %4) #0 {
  %6 = alloca { i16, i8, [1 x i8] }, align 2
  %7 = load i16, ptr %1, align 2
  %8 = cmpxchg ptr %0, i16 %7, i16 %2 seq_cst seq_cst, align 2
  %9 = extractvalue { i16, i1 } %8, 0
  %10 = extractvalue { i16, i1 } %8, 1
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds { i16, i8, [1 x i8] }, ptr %6, i32 0, i32 0
  store i16 %9, ptr %13, align 2
  %14 = getelementptr inbounds { i16, i8, [1 x i8] }, ptr %6, i32 0, i32 1
  store i8 %12, ptr %14, align 1
  %15 = getelementptr inbounds { i16, i8, [1 x i8] }, ptr %6, i32 0, i32 1
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %21, label %24

18:                                               ; preds = %20, %21
  %19 = phi i32 [ 0, %21 ], [ 1, %20 ]
  ret i32 %19

20:                                               ; preds = %24
  br label %18

21:                                               ; preds = %5
  %22 = getelementptr inbounds { i16, i8, [1 x i8] }, ptr %6, i32 0, i32 0
  %23 = load i16, ptr %22, align 2
  store i16 %23, ptr %1, align 2
  br label %18

24:                                               ; preds = %5
  br label %20
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_4(ptr nonnull align 4 %0, ptr nonnull align 4 %1, i32 %2, i32 %3, i32 %4) #0 {
  %6 = alloca { i32, i8, [3 x i8] }, align 4
  %7 = load i32, ptr %1, align 4
  %8 = cmpxchg ptr %0, i32 %7, i32 %2 seq_cst seq_cst, align 4
  %9 = extractvalue { i32, i1 } %8, 0
  %10 = extractvalue { i32, i1 } %8, 1
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %6, i32 0, i32 0
  store i32 %9, ptr %13, align 4
  %14 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %6, i32 0, i32 1
  store i8 %12, ptr %14, align 1
  %15 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %6, i32 0, i32 1
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %21, label %24

18:                                               ; preds = %20, %21
  %19 = phi i32 [ 0, %21 ], [ 1, %20 ]
  ret i32 %19

20:                                               ; preds = %24
  br label %18

21:                                               ; preds = %5
  %22 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %6, i32 0, i32 0
  %23 = load i32, ptr %22, align 4
  store i32 %23, ptr %1, align 4
  br label %18

24:                                               ; preds = %5
  br label %20
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_8(ptr nonnull align 8 %0, ptr nonnull align 8 %1, i64 %2, i32 %3, i32 %4) #0 {
  %6 = alloca { i64, i8, [7 x i8] }, align 8
  %7 = load i64, ptr %1, align 8
  %8 = cmpxchg ptr %0, i64 %7, i64 %2 seq_cst seq_cst, align 8
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %6, i32 0, i32 0
  store i64 %9, ptr %13, align 8
  %14 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %6, i32 0, i32 1
  store i8 %12, ptr %14, align 1
  %15 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %6, i32 0, i32 1
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %21, label %24

18:                                               ; preds = %20, %21
  %19 = phi i32 [ 0, %21 ], [ 1, %20 ]
  ret i32 %19

20:                                               ; preds = %24
  br label %18

21:                                               ; preds = %5
  %22 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %6, i32 0, i32 0
  %23 = load i64, ptr %22, align 8
  store i64 %23, ptr %1, align 8
  br label %18

24:                                               ; preds = %5
  br label %20
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_16(ptr nonnull align 8 %0, ptr nonnull align 8 %1, i128 %2, i32 %3, i32 %4) #0 {
  %6 = alloca ptr, align 8
  %7 = ptrtoint ptr %0 to i64
  %8 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %7)
  store ptr %8, ptr %6, align 8
  %9 = load i128, ptr %0, align 8
  %10 = load i128, ptr %1, align 8
  %11 = icmp eq i128 %9, %10
  br i1 %11, label %16, label %18

12:                                               ; preds = %14, %16
  %13 = phi i32 [ 1, %16 ], [ 0, %14 ]
  ret i32 %13

14:                                               ; preds = %18
  store i128 %9, ptr %1, align 8
  %15 = load ptr, ptr %6, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %15)
  br label %12

16:                                               ; preds = %5
  store i128 %2, ptr %0, align 8
  %17 = load ptr, ptr %6, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %17)
  br label %12

18:                                               ; preds = %5
  br label %14
}

; Function Attrs: naked nounwind uwtable
define weak_odr dso_local void @__zig_probe_stack() #5 {
  call void asm sideeffect "        push   %rcx\0A        mov    %rax, %rcx\0A        cmp    $$0x1000,%rcx\0A        jb     2f\0A 1:\0A        sub    $$0x1000,%rsp\0A        orl    $$0,16(%rsp)\0A        sub    $$0x1000,%rcx\0A        cmp    $$0x1000,%rcx\0A        ja     1b\0A 2:\0A        sub    %rcx, %rsp\0A        orl    $$0,16(%rsp)\0A        add    %rax,%rsp\0A        pop    %rcx\0A        ret", "~{dirflag},~{fpsr},~{flags}"()
  unreachable
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local ptr @memcpy(ptr noalias align 1 %0, ptr noalias readonly align 1 %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = icmp ne i64 %2, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %10, %11
  ret ptr %0

9:                                                ; preds = %3
  store ptr %0, ptr %6, align 8
  store ptr %1, ptr %5, align 8
  store i64 %2, ptr %4, align 8
  br label %12

10:                                               ; preds = %3
  br label %8

11:                                               ; preds = %27
  br label %8

12:                                               ; preds = %22, %9
  %13 = load ptr, ptr %6, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 0
  %15 = load ptr, ptr %5, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 0
  %17 = load i8, ptr %16, align 1
  store i8 %17, ptr %14, align 1
  %18 = load i64, ptr %4, align 8
  %19 = sub nuw i64 %18, 1
  store i64 %19, ptr %4, align 8
  %20 = load i64, ptr %4, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %27, label %28

22:                                               ; preds = %28
  %23 = load ptr, ptr %6, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 1
  store ptr %24, ptr %6, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = getelementptr inbounds i8, ptr %25, i64 1
  store ptr %26, ptr %5, align 8
  br label %12

27:                                               ; preds = %12
  br label %11

28:                                               ; preds = %12
  br label %22
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local ptr @memset(ptr align 1 %0, i8 zeroext %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca ptr, align 8
  %6 = icmp ne i64 %2, 0
  br i1 %6, label %8, label %9

7:                                                ; preds = %9, %10
  ret ptr %0

8:                                                ; preds = %3
  store ptr %0, ptr %5, align 8
  store i64 %2, ptr %4, align 8
  br label %11

9:                                                ; preds = %3
  br label %7

10:                                               ; preds = %21
  br label %7

11:                                               ; preds = %18, %8
  %12 = load ptr, ptr %5, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 0
  store i8 %1, ptr %13, align 1
  %14 = load i64, ptr %4, align 8
  %15 = sub nuw i64 %14, 1
  store i64 %15, ptr %4, align 8
  %16 = load i64, ptr %4, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %21, label %22

18:                                               ; preds = %22
  %19 = load ptr, ptr %5, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 1
  store ptr %20, ptr %5, align 8
  br label %11

21:                                               ; preds = %11
  br label %10

22:                                               ; preds = %11
  br label %18
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local ptr @__memset(ptr align 1 %0, i8 zeroext %1, i64 %2, i64 %3) #0 {
  %5 = icmp ult i64 %3, %2
  br i1 %5, label %8, label %9

6:                                                ; preds = %9
  %7 = call ptr @memset(ptr align 1 %0, i8 zeroext %1, i64 %2)
  ret ptr %7

8:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.memset.__memset__anon_4032, i64 15, ptr align 8 null, ptr nonnull readonly align 8 @120)
  unreachable

9:                                                ; preds = %4
  br label %6
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local ptr @memmove(ptr align 1 %0, ptr readonly align 1 %1, i64 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i64, align 8
  %8 = ptrtoint ptr %0 to i64
  %9 = ptrtoint ptr %1 to i64
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %12, label %13

11:                                               ; preds = %29, %14
  ret ptr %0

12:                                               ; preds = %3
  store i64 0, ptr %7, align 8
  br label %15

13:                                               ; preds = %3
  store i64 %2, ptr %5, align 8
  br label %30

14:                                               ; preds = %28
  br label %11

15:                                               ; preds = %18, %12
  %16 = load i64, ptr %7, align 8
  %17 = icmp ne i64 %16, %2
  br i1 %17, label %19, label %28

18:                                               ; preds = %19
  br label %15

19:                                               ; preds = %15
  store ptr %0, ptr %6, align 8
  %20 = load i64, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 %20
  %23 = load i64, ptr %7, align 8
  %24 = getelementptr inbounds i8, ptr %1, i64 %23
  %25 = load i8, ptr %24, align 1
  store i8 %25, ptr %22, align 1
  %26 = load i64, ptr %7, align 8
  %27 = add nuw i64 %26, 1
  store i64 %27, ptr %7, align 8
  br label %18

28:                                               ; preds = %15
  br label %14

29:                                               ; preds = %43
  br label %11

30:                                               ; preds = %33, %13
  %31 = load i64, ptr %5, align 8
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %34, label %43

33:                                               ; preds = %34
  br label %30

34:                                               ; preds = %30
  %35 = load i64, ptr %5, align 8
  %36 = sub nuw i64 %35, 1
  store i64 %36, ptr %5, align 8
  store ptr %0, ptr %4, align 8
  %37 = load i64, ptr %5, align 8
  %38 = load ptr, ptr %4, align 8
  %39 = getelementptr inbounds i8, ptr %38, i64 %37
  %40 = load i64, ptr %5, align 8
  %41 = getelementptr inbounds i8, ptr %1, i64 %40
  %42 = load i8, ptr %41, align 1
  store i8 %42, ptr %39, align 1
  br label %33

43:                                               ; preds = %30
  br label %29
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @memcmp(ptr nonnull readonly align 1 %0, ptr nonnull readonly align 1 %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  store i64 0, ptr %4, align 8
  br label %6

5:                                                ; preds = %21
  ret i32 0

6:                                                ; preds = %9, %3
  %7 = load i64, ptr %4, align 8
  %8 = icmp ult i64 %7, %2
  br i1 %8, label %10, label %21

9:                                                ; preds = %29
  br label %6

10:                                               ; preds = %6
  %11 = load i64, ptr %4, align 8
  %12 = getelementptr inbounds i8, ptr %0, i64 %11
  %13 = load i8, ptr %12, align 1
  %14 = zext i8 %13 to i32
  %15 = load i64, ptr %4, align 8
  %16 = getelementptr inbounds i8, ptr %1, i64 %15
  %17 = load i8, ptr %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub i32 %14, %18
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %26, label %27

21:                                               ; preds = %6
  br label %5

22:                                               ; preds = %27
  %23 = load i64, ptr %4, align 8
  %24 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %23, i64 1)
  %25 = extractvalue { i64, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %10
  ret i32 %19

27:                                               ; preds = %10
  br label %22

28:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %22
  %30 = extractvalue { i64, i1 } %24, 0
  store i64 %30, ptr %4, align 8
  br label %9
}

; Function Attrs: nounwind uwtable
define weak_odr dso_local i32 @bcmp(ptr readonly align 1 %0, ptr readonly align 1 %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  store i64 0, ptr %4, align 8
  br label %6

5:                                                ; preds = %18
  ret i32 0

6:                                                ; preds = %9, %3
  %7 = load i64, ptr %4, align 8
  %8 = icmp ne i64 %7, %2
  br i1 %8, label %10, label %18

9:                                                ; preds = %19
  br label %6

10:                                               ; preds = %6
  %11 = load i64, ptr %4, align 8
  %12 = getelementptr inbounds i8, ptr %0, i64 %11
  %13 = load i8, ptr %12, align 1
  %14 = load i64, ptr %4, align 8
  %15 = getelementptr inbounds i8, ptr %1, i64 %14
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %13, %16
  br i1 %17, label %22, label %23

18:                                               ; preds = %6
  br label %5

19:                                               ; preds = %23
  %20 = load i64, ptr %4, align 8
  %21 = add nuw i64 %20, 1
  store i64 %21, ptr %4, align 8
  br label %9

22:                                               ; preds = %10
  ret i32 1

23:                                               ; preds = %10
  br label %19
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare ptr @llvm.returnaddress(i32 immarg) #6

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @debug.panicImpl(ptr readonly align 8 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #2 {
  %5 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %6 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %7 = alloca %fs.file.File, align 4
  %8 = alloca %fs.file.File, align 4
  %9 = alloca { { ptr, i64 } }, align 8
  %10 = alloca { i32 }, align 4
  %11 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %12 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %13 = alloca %fs.file.File, align 4
  %14 = alloca %fs.file.File, align 4
  %15 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %16 = insertvalue { ptr, i64 } %15, i64 %3, 1
  call fastcc void @debug.resetSegfaultHandler()
  %17 = load i64, ptr @debug.panic_stage, align 8
  switch i64 %17, label %19 [
    i64 0, label %20
    i64 1, label %39
  ]

18:                                               ; preds = %19, %42, %36
  call fastcc void @os.abort()
  unreachable

19:                                               ; preds = %4
  br label %18

20:                                               ; preds = %4
  store i64 1, ptr @debug.panic_stage, align 8
  %21 = atomicrmw add ptr @debug.panicking, i8 1 seq_cst, align 1
  call fastcc void @Thread.Mutex.lock(ptr nonnull align 4 @debug.panic_mutex)
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %14)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %13, ptr align 4 %14, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %12, ptr nonnull readonly align 4 %13)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %11, ptr align 4 %12, i64 4, i1 false)
  %22 = call fastcc i32 @Thread.getCurrentId()
  %23 = getelementptr inbounds { i32 }, ptr %10, i32 0, i32 0
  store i32 %22, ptr %23, align 4
  %24 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6073"(ptr nonnull readonly align 4 %11, ptr nonnull readonly align 4 %10)
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %30, label %31

26:                                               ; preds = %30
  %27 = getelementptr inbounds { { ptr, i64 } }, ptr %9, i32 0, i32 0
  store { ptr, i64 } %16, ptr %27, align 8
  %28 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6075"(ptr nonnull readonly align 4 %11, ptr nonnull readonly align 8 %9)
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %34, label %35

30:                                               ; preds = %20
  br label %26

31:                                               ; preds = %20
  call fastcc void @os.abort()
  unreachable

32:                                               ; preds = %34
  %33 = icmp ne ptr %0, null
  br i1 %33, label %37, label %38

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @os.abort()
  unreachable

36:                                               ; preds = %38, %37
  call fastcc void @debug.dumpCurrentStackTrace(ptr nonnull readonly align 8 %1)
  call fastcc void @Thread.Mutex.unlock(ptr nonnull align 4 @debug.panic_mutex)
  call fastcc void @debug.waitForOtherThreadToFinishPanicking()
  br label %18

37:                                               ; preds = %32
  call fastcc void @debug.dumpStackTrace(ptr nonnull readonly align 8 %0)
  br label %36

38:                                               ; preds = %32
  br label %36

39:                                               ; preds = %4
  store i64 2, ptr @debug.panic_stage, align 8
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %8)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %7, ptr align 4 %8, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %6, ptr nonnull readonly align 4 %7)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %6, i64 4, i1 false)
  %40 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6077"(ptr nonnull readonly align 4 %5)
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %43, label %44

42:                                               ; preds = %43
  br label %18

43:                                               ; preds = %39
  br label %42

44:                                               ; preds = %39
  call fastcc void @os.abort()
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.udivmod.divwide__anon_4038(i32 %0, i32 %1, i32 %2, ptr nonnull align 4 %3) unnamed_addr #0 {
  %5 = call fastcc i32 @compiler_rt.udivmod.divwide_generic__anon_6078(i32 %0, i32 %1, i32 %2, ptr nonnull align 4 %3)
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.udivmod.divwide__anon_4044(i64 %0, i64 %1, i64 %2, ptr nonnull align 8 %3) unnamed_addr #0 {
  %5 = alloca i64, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 undef, i64 8, i1 false)
  %6 = call { i64, i64 } asm "divq ${2}", "={rax},={rdx},r,{rax},{rdx},~{dirflag},~{fpsr},~{flags}"(i64 %2, i64 %1, i64 %0)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  store i64 %8, ptr %5, align 8
  %9 = load i64, ptr %5, align 8
  store i64 %9, ptr %3, align 8
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.absCast__anon_4045(i32 %0) unnamed_addr #0 {
  %2 = icmp slt i32 %0, 0
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = add i32 %0, -1
  %5 = xor i32 %4, -1
  ret i32 %5

6:                                                ; preds = %1
  %7 = icmp sge i32 %0, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  ret i32 %0

9:                                                ; preds = %6
  br label %8

10:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @172)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i4, i1 } @llvm.usub.with.overflow.i4(i4, i4) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.cttz.i32(i32, i1 immarg) #1

; Function Attrs: nounwind uwtable
define internal fastcc i64 @math.absCast__anon_4046(i64 %0) unnamed_addr #0 {
  %2 = icmp slt i64 %0, 0
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = add i64 %0, -1
  %5 = xor i64 %4, -1
  ret i64 %5

6:                                                ; preds = %1
  %7 = icmp sge i64 %0, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  ret i64 %0

9:                                                ; preds = %6
  br label %8

10:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @173)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.cttz.i64(i64, i1 immarg) #1

; Function Attrs: nounwind uwtable
define internal fastcc i128 @math.absCast__anon_4047(i128 %0) unnamed_addr #0 {
  %2 = icmp slt i128 %0, 0
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = add i128 %0, -1
  %5 = xor i128 %4, -1
  ret i128 %5

6:                                                ; preds = %1
  %7 = icmp sge i128 %0, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  ret i128 %0

9:                                                ; preds = %6
  br label %8

10:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @174)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i8, i1 } @llvm.usub.with.overflow.i8(i8, i8) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.cttz.i128(i128, i1 immarg) #1

; Function Attrs: nounwind uwtable
define internal fastcc i64 @math.absCast__anon_4048(i64 %0) unnamed_addr #0 {
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.absCast__anon_4049(i32 %0) unnamed_addr #0 {
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define internal fastcc i128 @math.absCast__anon_4050(i128 %0) unnamed_addr #0 {
  ret i128 %0
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.loWord(i64 %0) unnamed_addr #0 {
  %2 = trunc i64 %0 to i32
  %3 = zext i32 %2 to i64
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3676.S.hiWord(i64 %0) unnamed_addr #0 {
  %2 = lshr i64 %0, 32
  %3 = trunc i64 %2 to i32
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_1(i128 %0) unnamed_addr #0 {
  %2 = lshr i128 %0, 96
  %3 = trunc i128 %2 to i32
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_2(i128 %0) unnamed_addr #0 {
  %2 = lshr i128 %0, 64
  %3 = trunc i128 %2 to i32
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_3(i128 %0) unnamed_addr #0 {
  %2 = lshr i128 %0, 32
  %3 = trunc i128 %2 to i32
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3681.S.Word_4(i128 %0) unnamed_addr #0 {
  %2 = trunc i128 %0 to i32
  %3 = zext i32 %2 to i64
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_4061(half %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i16, align 2
  %4 = bitcast half %0 to i16
  %5 = and i16 %4, 32767
  store i16 %5, ptr %3, align 2
  %6 = load i16, ptr %3, align 2
  %7 = lshr i16 %6, 10
  %8 = zext i16 %7 to i32
  store i32 %8, ptr %2, align 4
  %9 = load i32, ptr %2, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %17

11:                                               ; preds = %17
  %12 = load i32, ptr %2, align 4
  %13 = icmp eq i32 %12, 31
  br i1 %13, label %34, label %37

14:                                               ; preds = %1
  %15 = load i16, ptr %3, align 2
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %25, label %26

17:                                               ; preds = %1
  br label %11

18:                                               ; preds = %26
  %19 = load i16, ptr %3, align 2
  %20 = call i16 @llvm.ctlz.i16(i16 %19, i1 false)
  %21 = trunc i16 %20 to i5
  %22 = zext i5 %21 to i32
  %23 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -9, i32 %22)
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %27, label %28

25:                                               ; preds = %14
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

26:                                               ; preds = %14
  br label %18

27:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %18
  %29 = extractvalue { i32, i1 } %23, 0
  ret i32 %29

30:                                               ; preds = %37
  %31 = load i32, ptr %2, align 4
  %32 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %31, i32 15)
  %33 = extractvalue { i32, i1 } %32, 1
  br i1 %33, label %40, label %41

34:                                               ; preds = %11
  call fastcc void @math.raiseInvalid()
  %35 = load i16, ptr %3, align 2
  %36 = icmp ugt i16 %35, 31744
  br i1 %36, label %38, label %39

37:                                               ; preds = %11
  br label %30

38:                                               ; preds = %34
  ret i32 -2147483648

39:                                               ; preds = %34
  ret i32 2147483647

40:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %30
  %42 = extractvalue { i32, i1 } %32, 0
  ret i32 %42
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.cttz.i16(i16, i1 immarg) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_4062(float %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast float %0 to i32
  %5 = and i32 %4, 2147483647
  store i32 %5, ptr %3, align 4
  %6 = load i32, ptr %3, align 4
  %7 = lshr i32 %6, 23
  %8 = sub i32 2147483647, %7
  %9 = icmp ule i32 %8, 2147483647
  br i1 %9, label %13, label %14

10:                                               ; preds = %13
  store i32 %7, ptr %2, align 4
  %11 = load i32, ptr %2, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %21

13:                                               ; preds = %1
  br label %10

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @175)
  unreachable

15:                                               ; preds = %21
  %16 = load i32, ptr %2, align 4
  %17 = icmp eq i32 %16, 255
  br i1 %17, label %38, label %41

18:                                               ; preds = %10
  %19 = load i32, ptr %3, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %29, label %30

21:                                               ; preds = %10
  br label %15

22:                                               ; preds = %30
  %23 = load i32, ptr %3, align 4
  %24 = call i32 @llvm.ctlz.i32(i32 %23, i1 false)
  %25 = trunc i32 %24 to i6
  %26 = zext i6 %25 to i32
  %27 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -118, i32 %26)
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %31, label %32

29:                                               ; preds = %18
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

30:                                               ; preds = %18
  br label %22

31:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

32:                                               ; preds = %22
  %33 = extractvalue { i32, i1 } %27, 0
  ret i32 %33

34:                                               ; preds = %41
  %35 = load i32, ptr %2, align 4
  %36 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %35, i32 127)
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %44, label %45

38:                                               ; preds = %15
  call fastcc void @math.raiseInvalid()
  %39 = load i32, ptr %3, align 4
  %40 = icmp ugt i32 %39, 2139095040
  br i1 %40, label %42, label %43

41:                                               ; preds = %15
  br label %34

42:                                               ; preds = %38
  ret i32 -2147483648

43:                                               ; preds = %38
  ret i32 2147483647

44:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %34
  %46 = extractvalue { i32, i1 } %36, 0
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_4063(double %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast double %0 to i64
  %5 = and i64 %4, 9223372036854775807
  store i64 %5, ptr %3, align 8
  %6 = load i64, ptr %3, align 8
  %7 = lshr i64 %6, 52
  %8 = sub i64 2147483647, %7
  %9 = icmp ule i64 %8, 2147483647
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i64 %7 to i32
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %22

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @176)
  unreachable

16:                                               ; preds = %22
  %17 = load i32, ptr %2, align 4
  %18 = icmp eq i32 %17, 2047
  br i1 %18, label %39, label %42

19:                                               ; preds = %10
  %20 = load i64, ptr %3, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %30, label %31

22:                                               ; preds = %10
  br label %16

23:                                               ; preds = %31
  %24 = load i64, ptr %3, align 8
  %25 = call i64 @llvm.ctlz.i64(i64 %24, i1 false)
  %26 = trunc i64 %25 to i7
  %27 = zext i7 %26 to i32
  %28 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -1011, i32 %27)
  %29 = extractvalue { i32, i1 } %28, 1
  br i1 %29, label %32, label %33

30:                                               ; preds = %19
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

31:                                               ; preds = %19
  br label %23

32:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %23
  %34 = extractvalue { i32, i1 } %28, 0
  ret i32 %34

35:                                               ; preds = %42
  %36 = load i32, ptr %2, align 4
  %37 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %36, i32 1023)
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %45, label %46

39:                                               ; preds = %16
  call fastcc void @math.raiseInvalid()
  %40 = load i64, ptr %3, align 8
  %41 = icmp ugt i64 %40, 9218868437227405312
  br i1 %41, label %43, label %44

42:                                               ; preds = %16
  br label %35

43:                                               ; preds = %39
  ret i32 -2147483648

44:                                               ; preds = %39
  ret i32 2147483647

45:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %35
  %47 = extractvalue { i32, i1 } %37, 0
  ret i32 %47
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_4064(x86_fp80 %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i80, align 8
  %4 = bitcast x86_fp80 %0 to i80
  %5 = and i80 %4, 604462909807314587353087
  store i80 %5, ptr %3, align 8
  %6 = load i80, ptr %3, align 8
  %7 = lshr i80 %6, 64
  br i1 true, label %11, label %12

8:                                                ; preds = %11
  %9 = sub i80 2147483647, %7
  %10 = icmp ule i80 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %1
  br label %8

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @177)
  unreachable

13:                                               ; preds = %17
  %14 = trunc i80 %7 to i32
  store i32 %14, ptr %2, align 4
  %15 = load i32, ptr %2, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %25

17:                                               ; preds = %8
  br label %13

18:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @177)
  unreachable

19:                                               ; preds = %25
  %20 = load i32, ptr %2, align 4
  %21 = icmp eq i32 %20, 32767
  br i1 %21, label %42, label %45

22:                                               ; preds = %13
  %23 = load i80, ptr %3, align 8
  %24 = icmp eq i80 %23, 0
  br i1 %24, label %33, label %34

25:                                               ; preds = %13
  br label %19

26:                                               ; preds = %34
  %27 = load i80, ptr %3, align 8
  %28 = call i80 @llvm.ctlz.i80(i80 %27, i1 false)
  %29 = trunc i80 %28 to i7
  %30 = zext i7 %29 to i32
  %31 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -16366, i32 %30)
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %35, label %36

33:                                               ; preds = %22
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

34:                                               ; preds = %22
  br label %26

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

36:                                               ; preds = %26
  %37 = extractvalue { i32, i1 } %31, 0
  ret i32 %37

38:                                               ; preds = %45
  %39 = load i32, ptr %2, align 4
  %40 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %39, i32 16383)
  %41 = extractvalue { i32, i1 } %40, 1
  br i1 %41, label %48, label %49

42:                                               ; preds = %19
  call fastcc void @math.raiseInvalid()
  %43 = load i80, ptr %3, align 8
  %44 = icmp ugt i80 %43, 604453686435277732577280
  br i1 %44, label %46, label %47

45:                                               ; preds = %19
  br label %38

46:                                               ; preds = %42
  ret i32 -2147483648

47:                                               ; preds = %42
  ret i32 2147483647

48:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %38
  %50 = extractvalue { i32, i1 } %40, 0
  ret i32 %50
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i80 @llvm.cttz.i80(i80, i1 immarg) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_4065(fp128 %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i128, align 8
  %4 = bitcast fp128 %0 to i128
  %5 = and i128 %4, 170141183460469231731687303715884105727
  store i128 %5, ptr %3, align 8
  %6 = load i128, ptr %3, align 8
  %7 = lshr i128 %6, 112
  %8 = sub i128 2147483647, %7
  %9 = icmp ule i128 %8, 2147483647
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i128 %7 to i32
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %22

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @178)
  unreachable

16:                                               ; preds = %22
  %17 = load i32, ptr %2, align 4
  %18 = icmp eq i32 %17, 32767
  br i1 %18, label %39, label %42

19:                                               ; preds = %10
  %20 = load i128, ptr %3, align 8
  %21 = icmp eq i128 %20, 0
  br i1 %21, label %30, label %31

22:                                               ; preds = %10
  br label %16

23:                                               ; preds = %31
  %24 = load i128, ptr %3, align 8
  %25 = call i128 @llvm.ctlz.i128(i128 %24, i1 false)
  %26 = trunc i128 %25 to i8
  %27 = zext i8 %26 to i32
  %28 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -16367, i32 %27)
  %29 = extractvalue { i32, i1 } %28, 1
  br i1 %29, label %32, label %33

30:                                               ; preds = %19
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

31:                                               ; preds = %19
  br label %23

32:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %23
  %34 = extractvalue { i32, i1 } %28, 0
  ret i32 %34

35:                                               ; preds = %42
  %36 = load i32, ptr %2, align 4
  %37 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %36, i32 16383)
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %45, label %46

39:                                               ; preds = %16
  call fastcc void @math.raiseInvalid()
  %40 = load i128, ptr %3, align 8
  %41 = icmp ugt i128 %40, 170135991163610696904058773219554885632
  br i1 %41, label %43, label %44

42:                                               ; preds = %16
  br label %35

43:                                               ; preds = %39
  ret i32 -2147483648

44:                                               ; preds = %39
  ret i32 2147483647

45:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %35
  %47 = extractvalue { i32, i1 } %37, 0
  ret i32 %47
}

; Function Attrs: nounwind uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_4327(float %0) unnamed_addr #0 {
  %2 = alloca i8, align 1
  store i8 0, ptr %2, align 1
  call void asm sideeffect "", "rm,~{dirflag},~{fpsr},~{flags}"(float %0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_4328(double %0) unnamed_addr #0 {
  %2 = alloca i8, align 1
  store i8 0, ptr %2, align 1
  call void asm sideeffect "", "rm,~{dirflag},~{fpsr},~{flags}"(double %0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_4329(fp128 %0) unnamed_addr #0 {
  %2 = alloca fp128, align 16
  %3 = alloca i8, align 1
  store i8 0, ptr %3, align 1
  store fp128 %0, ptr %2, align 16
  call fastcc void @mem.doNotOptimizeAway__anon_6088(ptr nonnull readonly align 16 %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.rem_pio2_large.rem_pio2_large(ptr nonnull align 8 %0, i64 %1, ptr nonnull align 8 %2, i64 %3, i32 %4, i32 %5, i64 %6) unnamed_addr #0 {
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca [20 x double], align 8
  %10 = alloca { ptr, i64 }, align 8
  %11 = alloca [20 x double], align 8
  %12 = alloca { ptr, i64 }, align 8
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca { ptr, i64 }, align 8
  %15 = alloca { ptr, i64 }, align 8
  %16 = alloca { ptr, i64 }, align 8
  %17 = alloca { ptr, i64 }, align 8
  %18 = alloca [20 x double], align 8
  %19 = alloca [20 x double], align 8
  %20 = alloca [20 x double], align 8
  %21 = alloca [20 x double], align 8
  %22 = alloca [20 x double], align 8
  %23 = alloca [20 x double], align 8
  %24 = alloca [20 x double], align 8
  %25 = alloca { ptr, i64 }, align 8
  %26 = alloca [20 x double], align 8
  %27 = alloca [20 x double], align 8
  %28 = alloca [20 x i32], align 4
  %29 = alloca [20 x i32], align 4
  %30 = alloca [20 x double], align 8
  %31 = alloca [20 x i32], align 4
  %32 = alloca [20 x i32], align 4
  %33 = alloca [20 x i32], align 4
  %34 = alloca [20 x i32], align 4
  %35 = alloca [20 x i32], align 4
  %36 = alloca [20 x i32], align 4
  %37 = alloca [20 x double], align 8
  %38 = alloca [20 x double], align 8
  %39 = alloca [20 x double], align 8
  %40 = alloca [20 x double], align 8
  %41 = alloca [20 x double], align 8
  %42 = alloca [20 x double], align 8
  %43 = alloca double, align 8
  %44 = alloca double, align 8
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca [20 x i32], align 4
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca [6 x i64], align 8
  %59 = alloca i32, align 4
  %60 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %61 = insertvalue { ptr, i64 } %60, i64 %1, 1
  %62 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %63 = insertvalue { ptr, i64 } %62, i64 %3, 1
  call void @llvm.memset.p0.i64(ptr align 4 %59, i8 -86, i64 4, i1 false)
  %64 = ptrtoint ptr %59 to i64
  %65 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %65, align 8
  %66 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %64, ptr %66, align 8
  %67 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %67, align 8
  %68 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %68, align 8
  %69 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %69, align 8
  %70 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %70, align 8
  %71 = ptrtoint ptr %58 to i64
  %72 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %71, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %57, i8 -86, i64 4, i1 false)
  %73 = ptrtoint ptr %57 to i64
  %74 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %74, align 8
  %75 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %73, ptr %75, align 8
  %76 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %76, align 8
  %77 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %77, align 8
  %78 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %78, align 8
  %79 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %79, align 8
  %80 = ptrtoint ptr %58 to i64
  %81 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %80, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %56, i8 -86, i64 4, i1 false)
  %82 = ptrtoint ptr %56 to i64
  %83 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %83, align 8
  %84 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %82, ptr %84, align 8
  %85 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %85, align 8
  %86 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %86, align 8
  %87 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %87, align 8
  %88 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %88, align 8
  %89 = ptrtoint ptr %58 to i64
  %90 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %89, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %55, i8 -86, i64 4, i1 false)
  %91 = ptrtoint ptr %55 to i64
  %92 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %92, align 8
  %93 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %91, ptr %93, align 8
  %94 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %94, align 8
  %95 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %95, align 8
  %96 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %96, align 8
  %97 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %97, align 8
  %98 = ptrtoint ptr %58 to i64
  %99 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %98, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %54, i8 -86, i64 4, i1 false)
  %100 = ptrtoint ptr %54 to i64
  %101 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %101, align 8
  %102 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %100, ptr %102, align 8
  %103 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %103, align 8
  %104 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %104, align 8
  %105 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %105, align 8
  %106 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %106, align 8
  %107 = ptrtoint ptr %58 to i64
  %108 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %107, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %53, i8 -86, i64 4, i1 false)
  %109 = ptrtoint ptr %53 to i64
  %110 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %110, align 8
  %111 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %109, ptr %111, align 8
  %112 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %112, align 8
  %113 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %113, align 8
  %114 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %114, align 8
  %115 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %115, align 8
  %116 = ptrtoint ptr %58 to i64
  %117 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %116, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %52, i8 -86, i64 4, i1 false)
  %118 = ptrtoint ptr %52 to i64
  %119 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %119, align 8
  %120 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %118, ptr %120, align 8
  %121 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %121, align 8
  %122 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %122, align 8
  %123 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %123, align 8
  %124 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %124, align 8
  %125 = ptrtoint ptr %58 to i64
  %126 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %125, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %51, i8 -86, i64 80, i1 false)
  %127 = ptrtoint ptr %51 to i64
  %128 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %128, align 8
  %129 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %127, ptr %129, align 8
  %130 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 80, ptr %130, align 8
  %131 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %131, align 8
  %132 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %132, align 8
  %133 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %133, align 8
  %134 = ptrtoint ptr %58 to i64
  %135 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %134, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %50, i8 -86, i64 4, i1 false)
  %136 = ptrtoint ptr %50 to i64
  %137 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %137, align 8
  %138 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %136, ptr %138, align 8
  %139 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %139, align 8
  %140 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %140, align 8
  %141 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %141, align 8
  %142 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %142, align 8
  %143 = ptrtoint ptr %58 to i64
  %144 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %143, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %49, i8 -86, i64 4, i1 false)
  %145 = ptrtoint ptr %49 to i64
  %146 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %146, align 8
  %147 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %145, ptr %147, align 8
  %148 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %148, align 8
  %149 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %149, align 8
  %150 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %150, align 8
  %151 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %151, align 8
  %152 = ptrtoint ptr %58 to i64
  %153 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %152, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %48, i8 -86, i64 4, i1 false)
  %154 = ptrtoint ptr %48 to i64
  %155 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %155, align 8
  %156 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %154, ptr %156, align 8
  %157 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %157, align 8
  %158 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %158, align 8
  %159 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %159, align 8
  %160 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %160, align 8
  %161 = ptrtoint ptr %58 to i64
  %162 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %161, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %47, i8 -86, i64 4, i1 false)
  %163 = ptrtoint ptr %47 to i64
  %164 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %164, align 8
  %165 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %163, ptr %165, align 8
  %166 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %166, align 8
  %167 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %167, align 8
  %168 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %168, align 8
  %169 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %169, align 8
  %170 = ptrtoint ptr %58 to i64
  %171 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %170, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %46, i8 -86, i64 4, i1 false)
  %172 = ptrtoint ptr %46 to i64
  %173 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %173, align 8
  %174 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %172, ptr %174, align 8
  %175 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %175, align 8
  %176 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %176, align 8
  %177 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %177, align 8
  %178 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %178, align 8
  %179 = ptrtoint ptr %58 to i64
  %180 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %179, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %45, i8 -86, i64 4, i1 false)
  %181 = ptrtoint ptr %45 to i64
  %182 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %182, align 8
  %183 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %181, ptr %183, align 8
  %184 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 4, ptr %184, align 8
  %185 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %185, align 8
  %186 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %186, align 8
  %187 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %187, align 8
  %188 = ptrtoint ptr %58 to i64
  %189 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %188, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %44, i8 -86, i64 8, i1 false)
  %190 = ptrtoint ptr %44 to i64
  %191 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %191, align 8
  %192 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %190, ptr %192, align 8
  %193 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 8, ptr %193, align 8
  %194 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %194, align 8
  %195 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %195, align 8
  %196 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %196, align 8
  %197 = ptrtoint ptr %58 to i64
  %198 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %197, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %43, i8 -86, i64 8, i1 false)
  %199 = ptrtoint ptr %43 to i64
  %200 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %200, align 8
  %201 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %199, ptr %201, align 8
  %202 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 8, ptr %202, align 8
  %203 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %203, align 8
  %204 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %204, align 8
  %205 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %205, align 8
  %206 = ptrtoint ptr %58 to i64
  %207 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %206, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %42, i8 -86, i64 160, i1 false)
  %208 = ptrtoint ptr %42 to i64
  %209 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %209, align 8
  %210 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %208, ptr %210, align 8
  %211 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 160, ptr %211, align 8
  %212 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %212, align 8
  %213 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %213, align 8
  %214 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %214, align 8
  %215 = ptrtoint ptr %58 to i64
  %216 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %215, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %41, i8 -86, i64 160, i1 false)
  %217 = ptrtoint ptr %41 to i64
  %218 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %218, align 8
  %219 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %217, ptr %219, align 8
  %220 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 160, ptr %220, align 8
  %221 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %221, align 8
  %222 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %222, align 8
  %223 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %223, align 8
  %224 = ptrtoint ptr %58 to i64
  %225 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %224, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %40, i8 -86, i64 160, i1 false)
  %226 = ptrtoint ptr %40 to i64
  %227 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 0
  store i64 1296236545, ptr %227, align 8
  %228 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 1
  store i64 %226, ptr %228, align 8
  %229 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 2
  store i64 160, ptr %229, align 8
  %230 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 3
  store i64 0, ptr %230, align 8
  %231 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 4
  store i64 0, ptr %231, align 8
  %232 = getelementptr inbounds [6 x i64], ptr %58, i64 0, i64 5
  store i64 0, ptr %232, align 8
  %233 = ptrtoint ptr %58 to i64
  %234 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %233, i64 0)
  %235 = icmp ult i64 %6, 4
  br i1 %235, label %242, label %243

236:                                              ; preds = %242
  %237 = getelementptr inbounds [4 x i32], ptr @179, i64 0, i64 %6
  %238 = load i32, ptr %237, align 4
  store i32 %238, ptr %54, align 4
  %239 = load i32, ptr %54, align 4
  store i32 %239, ptr %55, align 4
  %240 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %5, i32 1)
  %241 = extractvalue { i32, i1 } %240, 1
  br i1 %241, label %244, label %245

242:                                              ; preds = %7
  br label %236

243:                                              ; preds = %7
  call fastcc void @builtin.panicOutOfBounds(i64 %6, i64 4)
  unreachable

244:                                              ; preds = %236
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

245:                                              ; preds = %236
  %246 = extractvalue { i32, i1 } %240, 0
  store i32 %246, ptr %57, align 4
  %247 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 3)
  %248 = extractvalue { i32, i1 } %247, 1
  br i1 %248, label %249, label %250

249:                                              ; preds = %245
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

250:                                              ; preds = %245
  %251 = extractvalue { i32, i1 } %247, 0
  %252 = sdiv i32 %251, 24
  %253 = srem i32 %251, 24
  %254 = xor i32 %251, 24
  %255 = ashr i32 %254, 31
  %256 = icmp ne i32 %253, 0
  %257 = select i1 %256, i32 %255, i32 0
  %258 = add nsw i32 %252, %257
  store i32 %258, ptr %56, align 4
  %259 = load i32, ptr %56, align 4
  %260 = icmp slt i32 %259, 0
  br i1 %260, label %265, label %266

261:                                              ; preds = %266, %265
  %262 = load i32, ptr %56, align 4
  %263 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %262, i32 1)
  %264 = extractvalue { i32, i1 } %263, 1
  br i1 %264, label %267, label %268

265:                                              ; preds = %250
  store i32 0, ptr %56, align 4
  br label %261

266:                                              ; preds = %250
  br label %261

267:                                              ; preds = %261
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

268:                                              ; preds = %261
  %269 = extractvalue { i32, i1 } %263, 0
  %270 = call fastcc { i32, i1 } @llvm.smul.with.overflow.i32(i32 24, i32 %269)
  %271 = extractvalue { i32, i1 } %270, 1
  br i1 %271, label %272, label %273

272:                                              ; preds = %268
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

273:                                              ; preds = %268
  %274 = extractvalue { i32, i1 } %270, 0
  %275 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 %274)
  %276 = extractvalue { i32, i1 } %275, 1
  br i1 %276, label %277, label %278

277:                                              ; preds = %273
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

278:                                              ; preds = %273
  %279 = extractvalue { i32, i1 } %275, 0
  store i32 %279, ptr %46, align 4
  %280 = load i32, ptr %56, align 4
  %281 = load i32, ptr %57, align 4
  %282 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %280, i32 %281)
  %283 = extractvalue { i32, i1 } %282, 1
  br i1 %283, label %284, label %285

284:                                              ; preds = %278
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

285:                                              ; preds = %278
  %286 = extractvalue { i32, i1 } %282, 0
  store i32 %286, ptr %49, align 4
  %287 = load i32, ptr %57, align 4
  %288 = load i32, ptr %54, align 4
  %289 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %287, i32 %288)
  %290 = extractvalue { i32, i1 } %289, 1
  br i1 %290, label %291, label %292

291:                                              ; preds = %285
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

292:                                              ; preds = %285
  %293 = extractvalue { i32, i1 } %289, 0
  store i32 %293, ptr %47, align 4
  store i32 0, ptr %50, align 4
  br label %295

294:                                              ; preds = %304
  store i32 0, ptr %50, align 4
  br label %337

295:                                              ; preds = %299, %292
  %296 = load i32, ptr %50, align 4
  %297 = load i32, ptr %47, align 4
  %298 = icmp sle i32 %296, %297
  br i1 %298, label %300, label %304

299:                                              ; preds = %333
  br label %295

300:                                              ; preds = %295
  %301 = load i32, ptr %50, align 4
  %302 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %301)
  %303 = icmp ult i64 %302, 20
  br i1 %303, label %309, label %310

304:                                              ; preds = %295
  br label %294

305:                                              ; preds = %309
  %306 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 %302
  %307 = load i32, ptr %49, align 4
  %308 = icmp slt i32 %307, 0
  br i1 %308, label %315, label %316

309:                                              ; preds = %300
  br label %305

310:                                              ; preds = %300
  call fastcc void @builtin.panicOutOfBounds(i64 %302, i64 20)
  unreachable

311:                                              ; preds = %320, %315
  %312 = load i32, ptr %50, align 4
  %313 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %312, i32 1)
  %314 = extractvalue { i32, i1 } %313, 1
  br i1 %314, label %326, label %327

315:                                              ; preds = %305
  store double 0.000000e+00, ptr %306, align 8
  br label %311

316:                                              ; preds = %305
  %317 = load i32, ptr %49, align 4
  %318 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %317)
  %319 = icmp ult i64 %318, 690
  br i1 %319, label %324, label %325

320:                                              ; preds = %324
  %321 = getelementptr inbounds [690 x i32], ptr @180, i64 0, i64 %318
  %322 = load i32, ptr %321, align 4
  %323 = sitofp i32 %322 to double
  store double %323, ptr %306, align 8
  br label %311

324:                                              ; preds = %316
  br label %320

325:                                              ; preds = %316
  call fastcc void @builtin.panicOutOfBounds(i64 %318, i64 690)
  unreachable

326:                                              ; preds = %311
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

327:                                              ; preds = %311
  %328 = extractvalue { i32, i1 } %313, 0
  store i32 %328, ptr %50, align 4
  %329 = load i32, ptr %49, align 4
  %330 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %329, i32 1)
  %331 = extractvalue { i32, i1 } %330, 1
  br i1 %331, label %332, label %333

332:                                              ; preds = %327
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

333:                                              ; preds = %327
  %334 = extractvalue { i32, i1 } %330, 0
  store i32 %334, ptr %49, align 4
  br label %299

335:                                              ; preds = %343
  %336 = load i32, ptr %54, align 4
  store i32 %336, ptr %59, align 4
  br label %405

337:                                              ; preds = %341, %294
  %338 = load i32, ptr %50, align 4
  %339 = load i32, ptr %54, align 4
  %340 = icmp sle i32 %338, %339
  br i1 %340, label %342, label %343

341:                                              ; preds = %403
  br label %337

342:                                              ; preds = %337
  store i32 0, ptr %49, align 4
  store double 0.000000e+00, ptr %43, align 8
  br label %348

343:                                              ; preds = %337
  br label %335

344:                                              ; preds = %359
  %345 = load i32, ptr %50, align 4
  %346 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %345)
  %347 = icmp ult i64 %346, 20
  br i1 %347, label %400, label %401

348:                                              ; preds = %352, %342
  %349 = load i32, ptr %49, align 4
  %350 = load i32, ptr %57, align 4
  %351 = icmp sle i32 %349, %350
  br i1 %351, label %353, label %359

352:                                              ; preds = %392
  br label %348

353:                                              ; preds = %348
  %354 = load double, ptr %43, align 8
  %355 = load i32, ptr %49, align 4
  %356 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %355)
  %357 = extractvalue { ptr, i64 } %61, 1
  %358 = icmp ult i64 %356, %357
  br i1 %358, label %368, label %369

359:                                              ; preds = %348
  br label %344

360:                                              ; preds = %368
  %361 = extractvalue { ptr, i64 } %61, 0
  %362 = getelementptr inbounds double, ptr %361, i64 %356
  %363 = load double, ptr %362, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %39, ptr align 8 %42, i64 160, i1 false)
  %364 = load i32, ptr %57, align 4
  %365 = load i32, ptr %50, align 4
  %366 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %364, i32 %365)
  %367 = extractvalue { i32, i1 } %366, 1
  br i1 %367, label %370, label %371

368:                                              ; preds = %353
  br label %360

369:                                              ; preds = %353
  call fastcc void @builtin.panicOutOfBounds(i64 %356, i64 %357)
  unreachable

370:                                              ; preds = %360
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

371:                                              ; preds = %360
  %372 = extractvalue { i32, i1 } %366, 0
  %373 = load i32, ptr %49, align 4
  %374 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %372, i32 %373)
  %375 = extractvalue { i32, i1 } %374, 1
  br i1 %375, label %376, label %377

376:                                              ; preds = %371
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

377:                                              ; preds = %371
  %378 = extractvalue { i32, i1 } %374, 0
  %379 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %378)
  %380 = icmp ult i64 %379, 20
  br i1 %380, label %389, label %390

381:                                              ; preds = %389
  %382 = getelementptr inbounds [20 x double], ptr %39, i64 0, i64 %379
  %383 = load double, ptr %382, align 8
  %384 = fmul double %363, %383
  %385 = fadd double %354, %384
  store double %385, ptr %43, align 8
  %386 = load i32, ptr %49, align 4
  %387 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %386, i32 1)
  %388 = extractvalue { i32, i1 } %387, 1
  br i1 %388, label %391, label %392

389:                                              ; preds = %377
  br label %381

390:                                              ; preds = %377
  call fastcc void @builtin.panicOutOfBounds(i64 %379, i64 20)
  unreachable

391:                                              ; preds = %381
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

392:                                              ; preds = %381
  %393 = extractvalue { i32, i1 } %387, 0
  store i32 %393, ptr %49, align 4
  br label %352

394:                                              ; preds = %400
  %395 = getelementptr inbounds [20 x double], ptr %40, i64 0, i64 %346
  %396 = load double, ptr %43, align 8
  store double %396, ptr %395, align 8
  %397 = load i32, ptr %50, align 4
  %398 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %397, i32 1)
  %399 = extractvalue { i32, i1 } %398, 1
  br i1 %399, label %402, label %403

400:                                              ; preds = %344
  br label %394

401:                                              ; preds = %344
  call fastcc void @builtin.panicOutOfBounds(i64 %346, i64 20)
  unreachable

402:                                              ; preds = %394
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

403:                                              ; preds = %394
  %404 = extractvalue { i32, i1 } %398, 0
  store i32 %404, ptr %50, align 4
  br label %341

405:                                              ; preds = %410, %335
  store i32 0, ptr %50, align 4
  %406 = load i32, ptr %59, align 4
  store i32 %406, ptr %49, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %38, ptr align 8 %40, i64 160, i1 false)
  %407 = load i32, ptr %59, align 4
  %408 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %407)
  %409 = icmp ult i64 %408, 20
  br i1 %409, label %414, label %415

410:                                              ; preds = %933
  br label %405

411:                                              ; preds = %414
  %412 = getelementptr inbounds [20 x double], ptr %38, i64 0, i64 %408
  %413 = load double, ptr %412, align 8
  store double %413, ptr %44, align 8
  br label %433

414:                                              ; preds = %405
  br label %411

415:                                              ; preds = %405
  call fastcc void @builtin.panicOutOfBounds(i64 %408, i64 20)
  unreachable

416:                                              ; preds = %446
  %417 = load double, ptr %44, align 8
  %418 = load i32, ptr %46, align 4
  %419 = call fastcc double @math.ldexp.ldexp__anon_3767(double %417, i32 %418)
  store double %419, ptr %44, align 8
  %420 = load double, ptr %44, align 8
  %421 = load double, ptr %44, align 8
  %422 = fmul double %421, 1.250000e-01
  %423 = call double @llvm.floor.f64(double %422)
  %424 = fmul double 8.000000e+00, %423
  %425 = fsub double %420, %424
  store double %425, ptr %44, align 8
  %426 = load double, ptr %44, align 8
  %427 = fptosi double %426 to i32
  %428 = sitofp i32 %427 to double
  %429 = fsub double %426, %428
  %430 = fcmp olt double %429, 1.000000e+00
  %431 = fcmp ogt double %429, -1.000000e+00
  %432 = and i1 %430, %431
  br i1 %432, label %505, label %506

433:                                              ; preds = %436, %411
  %434 = load i32, ptr %49, align 4
  %435 = icmp sgt i32 %434, 0
  br i1 %435, label %437, label %446

436:                                              ; preds = %496
  br label %433

437:                                              ; preds = %433
  %438 = load double, ptr %44, align 8
  %439 = fmul double 0x3E70000000000000, %438
  %440 = fptosi double %439 to i32
  %441 = sitofp i32 %440 to double
  %442 = fsub double %439, %441
  %443 = fcmp olt double %442, 1.000000e+00
  %444 = fcmp ogt double %442, -1.000000e+00
  %445 = and i1 %443, %444
  br i1 %445, label %452, label %453

446:                                              ; preds = %433
  br label %416

447:                                              ; preds = %452
  %448 = sitofp i32 %440 to double
  store double %448, ptr %43, align 8
  %449 = load i32, ptr %50, align 4
  %450 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %449)
  %451 = icmp ult i64 %450, 20
  br i1 %451, label %466, label %467

452:                                              ; preds = %437
  br label %447

453:                                              ; preds = %437
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

454:                                              ; preds = %466
  %455 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %450
  %456 = load double, ptr %44, align 8
  %457 = load double, ptr %43, align 8
  %458 = fmul double 0x4170000000000000, %457
  %459 = fsub double %456, %458
  %460 = fptosi double %459 to i32
  %461 = sitofp i32 %460 to double
  %462 = fsub double %459, %461
  %463 = fcmp olt double %462, 1.000000e+00
  %464 = fcmp ogt double %462, -1.000000e+00
  %465 = and i1 %463, %464
  br i1 %465, label %472, label %473

466:                                              ; preds = %447
  br label %454

467:                                              ; preds = %447
  call fastcc void @builtin.panicOutOfBounds(i64 %450, i64 20)
  unreachable

468:                                              ; preds = %472
  store i32 %460, ptr %455, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %37, ptr align 8 %40, i64 160, i1 false)
  %469 = load i32, ptr %49, align 4
  %470 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %469, i32 1)
  %471 = extractvalue { i32, i1 } %470, 1
  br i1 %471, label %474, label %475

472:                                              ; preds = %454
  br label %468

473:                                              ; preds = %454
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

474:                                              ; preds = %468
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

475:                                              ; preds = %468
  %476 = extractvalue { i32, i1 } %470, 0
  %477 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %476)
  %478 = icmp ult i64 %477, 20
  br i1 %478, label %487, label %488

479:                                              ; preds = %487
  %480 = getelementptr inbounds [20 x double], ptr %37, i64 0, i64 %477
  %481 = load double, ptr %480, align 8
  %482 = load double, ptr %43, align 8
  %483 = fadd double %481, %482
  store double %483, ptr %44, align 8
  %484 = load i32, ptr %50, align 4
  %485 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %484, i32 1)
  %486 = extractvalue { i32, i1 } %485, 1
  br i1 %486, label %489, label %490

487:                                              ; preds = %475
  br label %479

488:                                              ; preds = %475
  call fastcc void @builtin.panicOutOfBounds(i64 %477, i64 20)
  unreachable

489:                                              ; preds = %479
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

490:                                              ; preds = %479
  %491 = extractvalue { i32, i1 } %485, 0
  store i32 %491, ptr %50, align 4
  %492 = load i32, ptr %49, align 4
  %493 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %492, i32 1)
  %494 = extractvalue { i32, i1 } %493, 1
  br i1 %494, label %495, label %496

495:                                              ; preds = %490
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

496:                                              ; preds = %490
  %497 = extractvalue { i32, i1 } %493, 0
  store i32 %497, ptr %49, align 4
  br label %436

498:                                              ; preds = %505
  store i32 %427, ptr %52, align 4
  %499 = load double, ptr %44, align 8
  %500 = load i32, ptr %52, align 4
  %501 = sitofp i32 %500 to double
  %502 = fsub double %499, %501
  store double %502, ptr %44, align 8
  store i32 0, ptr %45, align 4
  %503 = load i32, ptr %46, align 4
  %504 = icmp sgt i32 %503, 0
  br i1 %504, label %510, label %514

505:                                              ; preds = %416
  br label %498

506:                                              ; preds = %416
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

507:                                              ; preds = %608, %602
  %508 = load i32, ptr %45, align 4
  %509 = icmp sgt i32 %508, 0
  br i1 %509, label %633, label %637

510:                                              ; preds = %498
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %36, ptr align 4 %51, i64 80, i1 false)
  %511 = load i32, ptr %59, align 4
  %512 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %511, i32 1)
  %513 = extractvalue { i32, i1 } %512, 1
  br i1 %513, label %517, label %518

514:                                              ; preds = %498
  %515 = load i32, ptr %46, align 4
  %516 = icmp eq i32 %515, 0
  br i1 %516, label %609, label %613

517:                                              ; preds = %510
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

518:                                              ; preds = %510
  %519 = extractvalue { i32, i1 } %512, 0
  %520 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %519)
  %521 = icmp ult i64 %520, 20
  br i1 %521, label %528, label %529

522:                                              ; preds = %528
  %523 = getelementptr inbounds [20 x i32], ptr %36, i64 0, i64 %520
  %524 = load i32, ptr %523, align 4
  %525 = load i32, ptr %46, align 4
  %526 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 24, i32 %525)
  %527 = extractvalue { i32, i1 } %526, 1
  br i1 %527, label %530, label %531

528:                                              ; preds = %518
  br label %522

529:                                              ; preds = %518
  call fastcc void @builtin.panicOutOfBounds(i64 %520, i64 20)
  unreachable

530:                                              ; preds = %522
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

531:                                              ; preds = %522
  %532 = extractvalue { i32, i1 } %526, 0
  %533 = sub i32 31, %532
  %534 = icmp ule i32 %533, 31
  br i1 %534, label %543, label %544

535:                                              ; preds = %543
  %536 = trunc i32 %532 to i5
  %537 = zext i5 %536 to i32
  %538 = ashr i32 %524, %537
  store i32 %538, ptr %50, align 4
  %539 = load i32, ptr %52, align 4
  %540 = load i32, ptr %50, align 4
  %541 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %539, i32 %540)
  %542 = extractvalue { i32, i1 } %541, 1
  br i1 %542, label %545, label %546

543:                                              ; preds = %531
  br label %535

544:                                              ; preds = %531
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

545:                                              ; preds = %535
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

546:                                              ; preds = %535
  %547 = extractvalue { i32, i1 } %541, 0
  store i32 %547, ptr %52, align 4
  %548 = load i32, ptr %59, align 4
  %549 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %548, i32 1)
  %550 = extractvalue { i32, i1 } %549, 1
  br i1 %550, label %551, label %552

551:                                              ; preds = %546
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

552:                                              ; preds = %546
  %553 = extractvalue { i32, i1 } %549, 0
  %554 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %553)
  %555 = icmp ult i64 %554, 20
  br i1 %555, label %563, label %564

556:                                              ; preds = %563
  %557 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %554
  %558 = load i32, ptr %557, align 4
  %559 = load i32, ptr %50, align 4
  %560 = load i32, ptr %46, align 4
  %561 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 24, i32 %560)
  %562 = extractvalue { i32, i1 } %561, 1
  br i1 %562, label %565, label %566

563:                                              ; preds = %552
  br label %556

564:                                              ; preds = %552
  call fastcc void @builtin.panicOutOfBounds(i64 %554, i64 20)
  unreachable

565:                                              ; preds = %556
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

566:                                              ; preds = %556
  %567 = extractvalue { i32, i1 } %561, 0
  %568 = sub i32 31, %567
  %569 = icmp ule i32 %568, 31
  br i1 %569, label %576, label %577

570:                                              ; preds = %576
  %571 = trunc i32 %567 to i5
  %572 = zext i5 %571 to i32
  %573 = shl i32 %559, %572
  %574 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %558, i32 %573)
  %575 = extractvalue { i32, i1 } %574, 1
  br i1 %575, label %578, label %579

576:                                              ; preds = %566
  br label %570

577:                                              ; preds = %566
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

578:                                              ; preds = %570
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

579:                                              ; preds = %570
  %580 = extractvalue { i32, i1 } %574, 0
  store i32 %580, ptr %557, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %35, ptr align 4 %51, i64 80, i1 false)
  %581 = load i32, ptr %59, align 4
  %582 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %581, i32 1)
  %583 = extractvalue { i32, i1 } %582, 1
  br i1 %583, label %584, label %585

584:                                              ; preds = %579
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

585:                                              ; preds = %579
  %586 = extractvalue { i32, i1 } %582, 0
  %587 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %586)
  %588 = icmp ult i64 %587, 20
  br i1 %588, label %595, label %596

589:                                              ; preds = %595
  %590 = getelementptr inbounds [20 x i32], ptr %35, i64 0, i64 %587
  %591 = load i32, ptr %590, align 4
  %592 = load i32, ptr %46, align 4
  %593 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %592)
  %594 = extractvalue { i32, i1 } %593, 1
  br i1 %594, label %597, label %598

595:                                              ; preds = %585
  br label %589

596:                                              ; preds = %585
  call fastcc void @builtin.panicOutOfBounds(i64 %587, i64 20)
  unreachable

597:                                              ; preds = %589
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

598:                                              ; preds = %589
  %599 = extractvalue { i32, i1 } %593, 0
  %600 = sub i32 31, %599
  %601 = icmp ule i32 %600, 31
  br i1 %601, label %606, label %607

602:                                              ; preds = %606
  %603 = trunc i32 %599 to i5
  %604 = zext i5 %603 to i32
  %605 = ashr i32 %591, %604
  store i32 %605, ptr %45, align 4
  br label %507

606:                                              ; preds = %598
  br label %602

607:                                              ; preds = %598
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

608:                                              ; preds = %627, %621
  br label %507

609:                                              ; preds = %514
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %34, ptr align 4 %51, i64 80, i1 false)
  %610 = load i32, ptr %59, align 4
  %611 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %610, i32 1)
  %612 = extractvalue { i32, i1 } %611, 1
  br i1 %612, label %616, label %617

613:                                              ; preds = %514
  %614 = load double, ptr %44, align 8
  %615 = fcmp oge double %614, 5.000000e-01
  br i1 %615, label %628, label %629

616:                                              ; preds = %609
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

617:                                              ; preds = %609
  %618 = extractvalue { i32, i1 } %611, 0
  %619 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %618)
  %620 = icmp ult i64 %619, 20
  br i1 %620, label %625, label %626

621:                                              ; preds = %625
  %622 = getelementptr inbounds [20 x i32], ptr %34, i64 0, i64 %619
  %623 = load i32, ptr %622, align 4
  %624 = ashr i32 %623, 23
  store i32 %624, ptr %45, align 4
  br label %608

625:                                              ; preds = %617
  br label %621

626:                                              ; preds = %617
  call fastcc void @builtin.panicOutOfBounds(i64 %619, i64 20)
  unreachable

627:                                              ; preds = %629, %628
  br label %608

628:                                              ; preds = %613
  store i32 2, ptr %45, align 4
  br label %627

629:                                              ; preds = %613
  br label %627

630:                                              ; preds = %637, %739
  %631 = load double, ptr %44, align 8
  %632 = fcmp oeq double %631, 0.000000e+00
  br i1 %632, label %756, label %760

633:                                              ; preds = %507
  %634 = load i32, ptr %52, align 4
  %635 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %634, i32 1)
  %636 = extractvalue { i32, i1 } %635, 1
  br i1 %636, label %638, label %639

637:                                              ; preds = %507
  br label %630

638:                                              ; preds = %633
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

639:                                              ; preds = %633
  %640 = extractvalue { i32, i1 } %635, 0
  store i32 %640, ptr %52, align 4
  store i32 0, ptr %53, align 4
  store i32 0, ptr %50, align 4
  br label %644

641:                                              ; preds = %653
  %642 = load i32, ptr %46, align 4
  %643 = icmp sgt i32 %642, 0
  br i1 %643, label %704, label %706

644:                                              ; preds = %648, %639
  %645 = load i32, ptr %50, align 4
  %646 = load i32, ptr %59, align 4
  %647 = icmp slt i32 %645, %646
  br i1 %647, label %649, label %653

648:                                              ; preds = %699
  br label %644

649:                                              ; preds = %644
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %33, ptr align 4 %51, i64 80, i1 false)
  %650 = load i32, ptr %50, align 4
  %651 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %650)
  %652 = icmp ult i64 %651, 20
  br i1 %652, label %659, label %660

653:                                              ; preds = %644
  br label %641

654:                                              ; preds = %659
  %655 = getelementptr inbounds [20 x i32], ptr %33, i64 0, i64 %651
  %656 = load i32, ptr %655, align 4
  store i32 %656, ptr %49, align 4
  %657 = load i32, ptr %53, align 4
  %658 = icmp eq i32 %657, 0
  br i1 %658, label %665, label %668

659:                                              ; preds = %649
  br label %654

660:                                              ; preds = %649
  call fastcc void @builtin.panicOutOfBounds(i64 %651, i64 20)
  unreachable

661:                                              ; preds = %696, %672
  %662 = load i32, ptr %50, align 4
  %663 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %662, i32 1)
  %664 = extractvalue { i32, i1 } %663, 1
  br i1 %664, label %698, label %699

665:                                              ; preds = %654
  %666 = load i32, ptr %49, align 4
  %667 = icmp ne i32 %666, 0
  br i1 %667, label %673, label %677

668:                                              ; preds = %654
  %669 = load i32, ptr %50, align 4
  %670 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %669)
  %671 = icmp ult i64 %670, 20
  br i1 %671, label %693, label %694

672:                                              ; preds = %677, %686
  br label %661

673:                                              ; preds = %665
  store i32 1, ptr %53, align 4
  %674 = load i32, ptr %50, align 4
  %675 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %674)
  %676 = icmp ult i64 %675, 20
  br i1 %676, label %683, label %684

677:                                              ; preds = %665
  br label %672

678:                                              ; preds = %683
  %679 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %675
  %680 = load i32, ptr %49, align 4
  %681 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16777216, i32 %680)
  %682 = extractvalue { i32, i1 } %681, 1
  br i1 %682, label %685, label %686

683:                                              ; preds = %673
  br label %678

684:                                              ; preds = %673
  call fastcc void @builtin.panicOutOfBounds(i64 %675, i64 20)
  unreachable

685:                                              ; preds = %678
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

686:                                              ; preds = %678
  %687 = extractvalue { i32, i1 } %681, 0
  store i32 %687, ptr %679, align 4
  br label %672

688:                                              ; preds = %693
  %689 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %670
  %690 = load i32, ptr %49, align 4
  %691 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16777215, i32 %690)
  %692 = extractvalue { i32, i1 } %691, 1
  br i1 %692, label %695, label %696

693:                                              ; preds = %668
  br label %688

694:                                              ; preds = %668
  call fastcc void @builtin.panicOutOfBounds(i64 %670, i64 20)
  unreachable

695:                                              ; preds = %688
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

696:                                              ; preds = %688
  %697 = extractvalue { i32, i1 } %691, 0
  store i32 %697, ptr %689, align 4
  br label %661

698:                                              ; preds = %661
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

699:                                              ; preds = %661
  %700 = extractvalue { i32, i1 } %663, 0
  store i32 %700, ptr %50, align 4
  br label %648

701:                                              ; preds = %706, %707
  %702 = load i32, ptr %45, align 4
  %703 = icmp eq i32 %702, 2
  br i1 %703, label %740, label %745

704:                                              ; preds = %641
  %705 = load i32, ptr %46, align 4
  switch i32 %705, label %708 [
    i32 1, label %709
    i32 2, label %724
  ]

706:                                              ; preds = %641
  br label %701

707:                                              ; preds = %733, %718
  br label %701

708:                                              ; preds = %704
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

709:                                              ; preds = %704
  %710 = load i32, ptr %59, align 4
  %711 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %710, i32 1)
  %712 = extractvalue { i32, i1 } %711, 1
  br i1 %712, label %713, label %714

713:                                              ; preds = %709
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

714:                                              ; preds = %709
  %715 = extractvalue { i32, i1 } %711, 0
  %716 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %715)
  %717 = icmp ult i64 %716, 20
  br i1 %717, label %722, label %723

718:                                              ; preds = %722
  %719 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %716
  %720 = load i32, ptr %719, align 4
  %721 = and i32 %720, 8388607
  store i32 %721, ptr %719, align 4
  br label %707

722:                                              ; preds = %714
  br label %718

723:                                              ; preds = %714
  call fastcc void @builtin.panicOutOfBounds(i64 %716, i64 20)
  unreachable

724:                                              ; preds = %704
  %725 = load i32, ptr %59, align 4
  %726 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %725, i32 1)
  %727 = extractvalue { i32, i1 } %726, 1
  br i1 %727, label %728, label %729

728:                                              ; preds = %724
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

729:                                              ; preds = %724
  %730 = extractvalue { i32, i1 } %726, 0
  %731 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %730)
  %732 = icmp ult i64 %731, 20
  br i1 %732, label %737, label %738

733:                                              ; preds = %737
  %734 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %731
  %735 = load i32, ptr %734, align 4
  %736 = and i32 %735, 4194303
  store i32 %736, ptr %734, align 4
  br label %707

737:                                              ; preds = %729
  br label %733

738:                                              ; preds = %729
  call fastcc void @builtin.panicOutOfBounds(i64 %731, i64 20)
  unreachable

739:                                              ; preds = %745, %746
  br label %630

740:                                              ; preds = %701
  %741 = load double, ptr %44, align 8
  %742 = fsub double 1.000000e+00, %741
  store double %742, ptr %44, align 8
  %743 = load i32, ptr %53, align 4
  %744 = icmp ne i32 %743, 0
  br i1 %744, label %747, label %752

745:                                              ; preds = %701
  br label %739

746:                                              ; preds = %752, %747
  br label %739

747:                                              ; preds = %740
  %748 = load double, ptr %44, align 8
  %749 = load i32, ptr %46, align 4
  %750 = call fastcc double @math.ldexp.ldexp__anon_3767(double 1.000000e+00, i32 %749)
  %751 = fsub double %748, %750
  store double %751, ptr %44, align 8
  br label %746

752:                                              ; preds = %740
  br label %746

753:                                              ; preds = %760, %790
  %754 = load double, ptr %44, align 8
  %755 = fcmp oeq double %754, 0.000000e+00
  br i1 %755, label %939, label %943

756:                                              ; preds = %630
  store i32 0, ptr %49, align 4
  %757 = load i32, ptr %59, align 4
  %758 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %757, i32 1)
  %759 = extractvalue { i32, i1 } %758, 1
  br i1 %759, label %761, label %762

760:                                              ; preds = %630
  br label %753

761:                                              ; preds = %756
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

762:                                              ; preds = %756
  %763 = extractvalue { i32, i1 } %758, 0
  store i32 %763, ptr %50, align 4
  br label %767

764:                                              ; preds = %777
  %765 = load i32, ptr %49, align 4
  %766 = icmp eq i32 %765, 0
  br i1 %766, label %791, label %792

767:                                              ; preds = %771, %762
  %768 = load i32, ptr %50, align 4
  %769 = load i32, ptr %54, align 4
  %770 = icmp sge i32 %768, %769
  br i1 %770, label %772, label %777

771:                                              ; preds = %788
  br label %767

772:                                              ; preds = %767
  %773 = load i32, ptr %49, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %32, ptr align 4 %51, i64 80, i1 false)
  %774 = load i32, ptr %50, align 4
  %775 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %774)
  %776 = icmp ult i64 %775, 20
  br i1 %776, label %785, label %786

777:                                              ; preds = %767
  br label %764

778:                                              ; preds = %785
  %779 = getelementptr inbounds [20 x i32], ptr %32, i64 0, i64 %775
  %780 = load i32, ptr %779, align 4
  %781 = or i32 %773, %780
  store i32 %781, ptr %49, align 4
  %782 = load i32, ptr %50, align 4
  %783 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %782, i32 1)
  %784 = extractvalue { i32, i1 } %783, 1
  br i1 %784, label %787, label %788

785:                                              ; preds = %772
  br label %778

786:                                              ; preds = %772
  call fastcc void @builtin.panicOutOfBounds(i64 %775, i64 20)
  unreachable

787:                                              ; preds = %778
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

788:                                              ; preds = %778
  %789 = extractvalue { i32, i1 } %783, 0
  store i32 %789, ptr %50, align 4
  br label %771

790:                                              ; preds = %792
  br label %753

791:                                              ; preds = %764
  store i32 1, ptr %48, align 4
  br label %797

792:                                              ; preds = %764
  br label %790

793:                                              ; preds = %818
  %794 = load i32, ptr %59, align 4
  %795 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %794, i32 1)
  %796 = extractvalue { i32, i1 } %795, 1
  br i1 %796, label %822, label %823

797:                                              ; preds = %802, %791
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %31, ptr align 4 %51, i64 80, i1 false)
  %798 = load i32, ptr %54, align 4
  %799 = load i32, ptr %48, align 4
  %800 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %798, i32 %799)
  %801 = extractvalue { i32, i1 } %800, 1
  br i1 %801, label %803, label %804

802:                                              ; preds = %820
  br label %797

803:                                              ; preds = %797
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

804:                                              ; preds = %797
  %805 = extractvalue { i32, i1 } %800, 0
  %806 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %805)
  %807 = icmp ult i64 %806, 20
  br i1 %807, label %812, label %813

808:                                              ; preds = %812
  %809 = getelementptr inbounds [20 x i32], ptr %31, i64 0, i64 %806
  %810 = load i32, ptr %809, align 4
  %811 = icmp eq i32 %810, 0
  br i1 %811, label %814, label %818

812:                                              ; preds = %804
  br label %808

813:                                              ; preds = %804
  call fastcc void @builtin.panicOutOfBounds(i64 %806, i64 20)
  unreachable

814:                                              ; preds = %808
  %815 = load i32, ptr %48, align 4
  %816 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %815, i32 1)
  %817 = extractvalue { i32, i1 } %816, 1
  br i1 %817, label %819, label %820

818:                                              ; preds = %808
  br label %793

819:                                              ; preds = %814
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

820:                                              ; preds = %814
  %821 = extractvalue { i32, i1 } %816, 0
  store i32 %821, ptr %48, align 4
  br label %802

822:                                              ; preds = %793
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

823:                                              ; preds = %793
  %824 = extractvalue { i32, i1 } %795, 0
  store i32 %824, ptr %50, align 4
  br label %830

825:                                              ; preds = %846
  %826 = load i32, ptr %59, align 4
  %827 = load i32, ptr %48, align 4
  %828 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %826, i32 %827)
  %829 = extractvalue { i32, i1 } %828, 1
  br i1 %829, label %932, label %933

830:                                              ; preds = %836, %823
  %831 = load i32, ptr %50, align 4
  %832 = load i32, ptr %59, align 4
  %833 = load i32, ptr %48, align 4
  %834 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %832, i32 %833)
  %835 = extractvalue { i32, i1 } %834, 1
  br i1 %835, label %837, label %838

836:                                              ; preds = %930
  br label %830

837:                                              ; preds = %830
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

838:                                              ; preds = %830
  %839 = extractvalue { i32, i1 } %834, 0
  %840 = icmp sle i32 %831, %839
  br i1 %840, label %841, label %846

841:                                              ; preds = %838
  %842 = load i32, ptr %57, align 4
  %843 = load i32, ptr %50, align 4
  %844 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %842, i32 %843)
  %845 = extractvalue { i32, i1 } %844, 1
  br i1 %845, label %847, label %848

846:                                              ; preds = %838
  br label %825

847:                                              ; preds = %841
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

848:                                              ; preds = %841
  %849 = extractvalue { i32, i1 } %844, 0
  %850 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %849)
  %851 = icmp ult i64 %850, 20
  br i1 %851, label %858, label %859

852:                                              ; preds = %858
  %853 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 %850
  %854 = load i32, ptr %56, align 4
  %855 = load i32, ptr %50, align 4
  %856 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %854, i32 %855)
  %857 = extractvalue { i32, i1 } %856, 1
  br i1 %857, label %860, label %861

858:                                              ; preds = %848
  br label %852

859:                                              ; preds = %848
  call fastcc void @builtin.panicOutOfBounds(i64 %850, i64 20)
  unreachable

860:                                              ; preds = %852
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

861:                                              ; preds = %852
  %862 = extractvalue { i32, i1 } %856, 0
  %863 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %862)
  %864 = icmp ult i64 %863, 690
  br i1 %864, label %869, label %870

865:                                              ; preds = %869
  %866 = getelementptr inbounds [690 x i32], ptr @180, i64 0, i64 %863
  %867 = load i32, ptr %866, align 4
  %868 = sitofp i32 %867 to double
  store double %868, ptr %853, align 8
  store i32 0, ptr %49, align 4
  store double 0.000000e+00, ptr %43, align 8
  br label %875

869:                                              ; preds = %861
  br label %865

870:                                              ; preds = %861
  call fastcc void @builtin.panicOutOfBounds(i64 %863, i64 690)
  unreachable

871:                                              ; preds = %886
  %872 = load i32, ptr %50, align 4
  %873 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %872)
  %874 = icmp ult i64 %873, 20
  br i1 %874, label %927, label %928

875:                                              ; preds = %879, %865
  %876 = load i32, ptr %49, align 4
  %877 = load i32, ptr %57, align 4
  %878 = icmp sle i32 %876, %877
  br i1 %878, label %880, label %886

879:                                              ; preds = %919
  br label %875

880:                                              ; preds = %875
  %881 = load double, ptr %43, align 8
  %882 = load i32, ptr %49, align 4
  %883 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %882)
  %884 = extractvalue { ptr, i64 } %61, 1
  %885 = icmp ult i64 %883, %884
  br i1 %885, label %895, label %896

886:                                              ; preds = %875
  br label %871

887:                                              ; preds = %895
  %888 = extractvalue { ptr, i64 } %61, 0
  %889 = getelementptr inbounds double, ptr %888, i64 %883
  %890 = load double, ptr %889, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %30, ptr align 8 %42, i64 160, i1 false)
  %891 = load i32, ptr %57, align 4
  %892 = load i32, ptr %50, align 4
  %893 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %891, i32 %892)
  %894 = extractvalue { i32, i1 } %893, 1
  br i1 %894, label %897, label %898

895:                                              ; preds = %880
  br label %887

896:                                              ; preds = %880
  call fastcc void @builtin.panicOutOfBounds(i64 %883, i64 %884)
  unreachable

897:                                              ; preds = %887
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

898:                                              ; preds = %887
  %899 = extractvalue { i32, i1 } %893, 0
  %900 = load i32, ptr %49, align 4
  %901 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %899, i32 %900)
  %902 = extractvalue { i32, i1 } %901, 1
  br i1 %902, label %903, label %904

903:                                              ; preds = %898
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

904:                                              ; preds = %898
  %905 = extractvalue { i32, i1 } %901, 0
  %906 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %905)
  %907 = icmp ult i64 %906, 20
  br i1 %907, label %916, label %917

908:                                              ; preds = %916
  %909 = getelementptr inbounds [20 x double], ptr %30, i64 0, i64 %906
  %910 = load double, ptr %909, align 8
  %911 = fmul double %890, %910
  %912 = fadd double %881, %911
  store double %912, ptr %43, align 8
  %913 = load i32, ptr %49, align 4
  %914 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %913, i32 1)
  %915 = extractvalue { i32, i1 } %914, 1
  br i1 %915, label %918, label %919

916:                                              ; preds = %904
  br label %908

917:                                              ; preds = %904
  call fastcc void @builtin.panicOutOfBounds(i64 %906, i64 20)
  unreachable

918:                                              ; preds = %908
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

919:                                              ; preds = %908
  %920 = extractvalue { i32, i1 } %914, 0
  store i32 %920, ptr %49, align 4
  br label %879

921:                                              ; preds = %927
  %922 = getelementptr inbounds [20 x double], ptr %40, i64 0, i64 %873
  %923 = load double, ptr %43, align 8
  store double %923, ptr %922, align 8
  %924 = load i32, ptr %50, align 4
  %925 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %924, i32 1)
  %926 = extractvalue { i32, i1 } %925, 1
  br i1 %926, label %929, label %930

927:                                              ; preds = %871
  br label %921

928:                                              ; preds = %871
  call fastcc void @builtin.panicOutOfBounds(i64 %873, i64 20)
  unreachable

929:                                              ; preds = %921
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

930:                                              ; preds = %921
  %931 = extractvalue { i32, i1 } %925, 0
  store i32 %931, ptr %50, align 4
  br label %836

932:                                              ; preds = %825
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

933:                                              ; preds = %825
  %934 = extractvalue { i32, i1 } %828, 0
  store i32 %934, ptr %59, align 4
  br label %410

935:                                              ; preds = %989, %957
  %936 = load i32, ptr %46, align 4
  %937 = call fastcc double @math.ldexp.ldexp__anon_3767(double 1.000000e+00, i32 %936)
  store double %937, ptr %43, align 8
  %938 = load i32, ptr %59, align 4
  store i32 %938, ptr %50, align 4
  br label %1072

939:                                              ; preds = %753
  %940 = load i32, ptr %59, align 4
  %941 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %940, i32 1)
  %942 = extractvalue { i32, i1 } %941, 1
  br i1 %942, label %948, label %949

943:                                              ; preds = %753
  %944 = load double, ptr %44, align 8
  %945 = load i32, ptr %46, align 4
  %946 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %945)
  %947 = extractvalue { i32, i1 } %946, 1
  br i1 %947, label %983, label %984

948:                                              ; preds = %939
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

949:                                              ; preds = %939
  %950 = extractvalue { i32, i1 } %941, 0
  store i32 %950, ptr %59, align 4
  %951 = load i32, ptr %46, align 4
  %952 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %951, i32 24)
  %953 = extractvalue { i32, i1 } %952, 1
  br i1 %953, label %954, label %955

954:                                              ; preds = %949
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

955:                                              ; preds = %949
  %956 = extractvalue { i32, i1 } %952, 0
  store i32 %956, ptr %46, align 4
  br label %958

957:                                              ; preds = %973
  br label %935

958:                                              ; preds = %962, %955
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %29, ptr align 4 %51, i64 80, i1 false)
  %959 = load i32, ptr %59, align 4
  %960 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %959)
  %961 = icmp ult i64 %960, 20
  br i1 %961, label %967, label %968

962:                                              ; preds = %981
  br label %958

963:                                              ; preds = %967
  %964 = getelementptr inbounds [20 x i32], ptr %29, i64 0, i64 %960
  %965 = load i32, ptr %964, align 4
  %966 = icmp eq i32 %965, 0
  br i1 %966, label %969, label %973

967:                                              ; preds = %958
  br label %963

968:                                              ; preds = %958
  call fastcc void @builtin.panicOutOfBounds(i64 %960, i64 20)
  unreachable

969:                                              ; preds = %963
  %970 = load i32, ptr %59, align 4
  %971 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %970, i32 1)
  %972 = extractvalue { i32, i1 } %971, 1
  br i1 %972, label %974, label %975

973:                                              ; preds = %963
  br label %957

974:                                              ; preds = %969
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

975:                                              ; preds = %969
  %976 = extractvalue { i32, i1 } %971, 0
  store i32 %976, ptr %59, align 4
  %977 = load i32, ptr %46, align 4
  %978 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %977, i32 24)
  %979 = extractvalue { i32, i1 } %978, 1
  br i1 %979, label %980, label %981

980:                                              ; preds = %975
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

981:                                              ; preds = %975
  %982 = extractvalue { i32, i1 } %978, 0
  store i32 %982, ptr %46, align 4
  br label %962

983:                                              ; preds = %943
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

984:                                              ; preds = %943
  %985 = extractvalue { i32, i1 } %946, 0
  %986 = call fastcc double @math.ldexp.ldexp__anon_3767(double %944, i32 %985)
  store double %986, ptr %44, align 8
  %987 = load double, ptr %44, align 8
  %988 = fcmp oge double %987, 0x4170000000000000
  br i1 %988, label %990, label %999

989:                                              ; preds = %1067, %1053
  br label %935

990:                                              ; preds = %984
  %991 = load double, ptr %44, align 8
  %992 = fmul double 0x3E70000000000000, %991
  %993 = fptosi double %992 to i32
  %994 = sitofp i32 %993 to double
  %995 = fsub double %992, %994
  %996 = fcmp olt double %995, 1.000000e+00
  %997 = fcmp ogt double %995, -1.000000e+00
  %998 = and i1 %996, %997
  br i1 %998, label %1008, label %1009

999:                                              ; preds = %984
  %1000 = load i32, ptr %59, align 4
  %1001 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1000)
  %1002 = icmp ult i64 %1001, 20
  br i1 %1002, label %1065, label %1066

1003:                                             ; preds = %1008
  %1004 = sitofp i32 %993 to double
  store double %1004, ptr %43, align 8
  %1005 = load i32, ptr %59, align 4
  %1006 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1005)
  %1007 = icmp ult i64 %1006, 20
  br i1 %1007, label %1022, label %1023

1008:                                             ; preds = %990
  br label %1003

1009:                                             ; preds = %990
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

1010:                                             ; preds = %1022
  %1011 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %1006
  %1012 = load double, ptr %44, align 8
  %1013 = load double, ptr %43, align 8
  %1014 = fmul double 0x4170000000000000, %1013
  %1015 = fsub double %1012, %1014
  %1016 = fptosi double %1015 to i32
  %1017 = sitofp i32 %1016 to double
  %1018 = fsub double %1015, %1017
  %1019 = fcmp olt double %1018, 1.000000e+00
  %1020 = fcmp ogt double %1018, -1.000000e+00
  %1021 = and i1 %1019, %1020
  br i1 %1021, label %1028, label %1029

1022:                                             ; preds = %1003
  br label %1010

1023:                                             ; preds = %1003
  call fastcc void @builtin.panicOutOfBounds(i64 %1006, i64 20)
  unreachable

1024:                                             ; preds = %1028
  store i32 %1016, ptr %1011, align 4
  %1025 = load i32, ptr %59, align 4
  %1026 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1025, i32 1)
  %1027 = extractvalue { i32, i1 } %1026, 1
  br i1 %1027, label %1030, label %1031

1028:                                             ; preds = %1010
  br label %1024

1029:                                             ; preds = %1010
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

1030:                                             ; preds = %1024
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1031:                                             ; preds = %1024
  %1032 = extractvalue { i32, i1 } %1026, 0
  store i32 %1032, ptr %59, align 4
  %1033 = load i32, ptr %46, align 4
  %1034 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1033, i32 24)
  %1035 = extractvalue { i32, i1 } %1034, 1
  br i1 %1035, label %1036, label %1037

1036:                                             ; preds = %1031
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1037:                                             ; preds = %1031
  %1038 = extractvalue { i32, i1 } %1034, 0
  store i32 %1038, ptr %46, align 4
  %1039 = load i32, ptr %59, align 4
  %1040 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1039)
  %1041 = icmp ult i64 %1040, 20
  br i1 %1041, label %1051, label %1052

1042:                                             ; preds = %1051
  %1043 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %1040
  %1044 = load double, ptr %43, align 8
  %1045 = fptosi double %1044 to i32
  %1046 = sitofp i32 %1045 to double
  %1047 = fsub double %1044, %1046
  %1048 = fcmp olt double %1047, 1.000000e+00
  %1049 = fcmp ogt double %1047, -1.000000e+00
  %1050 = and i1 %1048, %1049
  br i1 %1050, label %1054, label %1055

1051:                                             ; preds = %1037
  br label %1042

1052:                                             ; preds = %1037
  call fastcc void @builtin.panicOutOfBounds(i64 %1040, i64 20)
  unreachable

1053:                                             ; preds = %1054
  store i32 %1045, ptr %1043, align 4
  br label %989

1054:                                             ; preds = %1042
  br label %1053

1055:                                             ; preds = %1042
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

1056:                                             ; preds = %1065
  %1057 = getelementptr inbounds [20 x i32], ptr %51, i64 0, i64 %1001
  %1058 = load double, ptr %44, align 8
  %1059 = fptosi double %1058 to i32
  %1060 = sitofp i32 %1059 to double
  %1061 = fsub double %1058, %1060
  %1062 = fcmp olt double %1061, 1.000000e+00
  %1063 = fcmp ogt double %1061, -1.000000e+00
  %1064 = and i1 %1062, %1063
  br i1 %1064, label %1068, label %1069

1065:                                             ; preds = %999
  br label %1056

1066:                                             ; preds = %999
  call fastcc void @builtin.panicOutOfBounds(i64 %1001, i64 20)
  unreachable

1067:                                             ; preds = %1068
  store i32 %1059, ptr %1057, align 4
  br label %989

1068:                                             ; preds = %1056
  br label %1067

1069:                                             ; preds = %1056
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

1070:                                             ; preds = %1080
  %1071 = load i32, ptr %59, align 4
  store i32 %1071, ptr %50, align 4
  br label %1105

1072:                                             ; preds = %1075, %935
  %1073 = load i32, ptr %50, align 4
  %1074 = icmp sge i32 %1073, 0
  br i1 %1074, label %1076, label %1080

1075:                                             ; preds = %1102
  br label %1072

1076:                                             ; preds = %1072
  %1077 = load i32, ptr %50, align 4
  %1078 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1077)
  %1079 = icmp ult i64 %1078, 20
  br i1 %1079, label %1087, label %1088

1080:                                             ; preds = %1072
  br label %1070

1081:                                             ; preds = %1087
  %1082 = getelementptr inbounds [20 x double], ptr %40, i64 0, i64 %1078
  %1083 = load double, ptr %43, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %28, ptr align 4 %51, i64 80, i1 false)
  %1084 = load i32, ptr %50, align 4
  %1085 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1084)
  %1086 = icmp ult i64 %1085, 20
  br i1 %1086, label %1099, label %1100

1087:                                             ; preds = %1076
  br label %1081

1088:                                             ; preds = %1076
  call fastcc void @builtin.panicOutOfBounds(i64 %1078, i64 20)
  unreachable

1089:                                             ; preds = %1099
  %1090 = getelementptr inbounds [20 x i32], ptr %28, i64 0, i64 %1085
  %1091 = load i32, ptr %1090, align 4
  %1092 = sitofp i32 %1091 to double
  %1093 = fmul double %1083, %1092
  store double %1093, ptr %1082, align 8
  %1094 = load double, ptr %43, align 8
  %1095 = fmul double %1094, 0x3E70000000000000
  store double %1095, ptr %43, align 8
  %1096 = load i32, ptr %50, align 4
  %1097 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1096, i32 1)
  %1098 = extractvalue { i32, i1 } %1097, 1
  br i1 %1098, label %1101, label %1102

1099:                                             ; preds = %1081
  br label %1089

1100:                                             ; preds = %1081
  call fastcc void @builtin.panicOutOfBounds(i64 %1085, i64 20)
  unreachable

1101:                                             ; preds = %1089
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1102:                                             ; preds = %1089
  %1103 = extractvalue { i32, i1 } %1097, 0
  store i32 %1103, ptr %50, align 4
  br label %1075

1104:                                             ; preds = %1110
  switch i64 %6, label %1186 [
    i64 0, label %1187
    i64 3, label %1228
    i64 1, label %1465
    i64 2, label %1465
  ]

1105:                                             ; preds = %1108, %1070
  %1106 = load i32, ptr %50, align 4
  %1107 = icmp sge i32 %1106, 0
  br i1 %1107, label %1109, label %1110

1108:                                             ; preds = %1181
  br label %1105

1109:                                             ; preds = %1105
  store double 0.000000e+00, ptr %43, align 8
  store i32 0, ptr %48, align 4
  br label %1116

1110:                                             ; preds = %1105
  br label %1104

1111:                                             ; preds = %1139
  %1112 = load i32, ptr %59, align 4
  %1113 = load i32, ptr %50, align 4
  %1114 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1112, i32 %1113)
  %1115 = extractvalue { i32, i1 } %1114, 1
  br i1 %1115, label %1167, label %1168

1116:                                             ; preds = %1120, %1109
  %1117 = load i32, ptr %48, align 4
  %1118 = load i32, ptr %55, align 4
  %1119 = icmp sle i32 %1117, %1118
  br i1 %1119, label %1123, label %1129

1120:                                             ; preds = %1165
  br label %1116

1121:                                             ; preds = %1129, %1131
  %1122 = phi i1 [ %1133, %1131 ], [ false, %1129 ]
  br i1 %1122, label %1134, label %1139

1123:                                             ; preds = %1116
  %1124 = load i32, ptr %48, align 4
  %1125 = load i32, ptr %59, align 4
  %1126 = load i32, ptr %50, align 4
  %1127 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1125, i32 %1126)
  %1128 = extractvalue { i32, i1 } %1127, 1
  br i1 %1128, label %1130, label %1131

1129:                                             ; preds = %1116
  br label %1121

1130:                                             ; preds = %1123
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1131:                                             ; preds = %1123
  %1132 = extractvalue { i32, i1 } %1127, 0
  %1133 = icmp sle i32 %1124, %1132
  br label %1121

1134:                                             ; preds = %1121
  %1135 = load double, ptr %43, align 8
  %1136 = load i32, ptr %48, align 4
  %1137 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1136)
  %1138 = icmp ult i64 %1137, 8
  br i1 %1138, label %1147, label %1148

1139:                                             ; preds = %1121
  br label %1111

1140:                                             ; preds = %1147
  %1141 = getelementptr inbounds [8 x double], ptr @182, i64 0, i64 %1137
  %1142 = load double, ptr %1141, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %27, ptr align 8 %40, i64 160, i1 false)
  %1143 = load i32, ptr %50, align 4
  %1144 = load i32, ptr %48, align 4
  %1145 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1143, i32 %1144)
  %1146 = extractvalue { i32, i1 } %1145, 1
  br i1 %1146, label %1149, label %1150

1147:                                             ; preds = %1134
  br label %1140

1148:                                             ; preds = %1134
  call fastcc void @builtin.panicOutOfBounds(i64 %1137, i64 8)
  unreachable

1149:                                             ; preds = %1140
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1150:                                             ; preds = %1140
  %1151 = extractvalue { i32, i1 } %1145, 0
  %1152 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1151)
  %1153 = icmp ult i64 %1152, 20
  br i1 %1153, label %1162, label %1163

1154:                                             ; preds = %1162
  %1155 = getelementptr inbounds [20 x double], ptr %27, i64 0, i64 %1152
  %1156 = load double, ptr %1155, align 8
  %1157 = fmul double %1142, %1156
  %1158 = fadd double %1135, %1157
  store double %1158, ptr %43, align 8
  %1159 = load i32, ptr %48, align 4
  %1160 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1159, i32 1)
  %1161 = extractvalue { i32, i1 } %1160, 1
  br i1 %1161, label %1164, label %1165

1162:                                             ; preds = %1150
  br label %1154

1163:                                             ; preds = %1150
  call fastcc void @builtin.panicOutOfBounds(i64 %1152, i64 20)
  unreachable

1164:                                             ; preds = %1154
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1165:                                             ; preds = %1154
  %1166 = extractvalue { i32, i1 } %1160, 0
  store i32 %1166, ptr %48, align 4
  br label %1120

1167:                                             ; preds = %1111
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1168:                                             ; preds = %1111
  %1169 = extractvalue { i32, i1 } %1114, 0
  %1170 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1169)
  %1171 = icmp ult i64 %1170, 20
  br i1 %1171, label %1178, label %1179

1172:                                             ; preds = %1178
  %1173 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 %1170
  %1174 = load double, ptr %43, align 8
  store double %1174, ptr %1173, align 8
  %1175 = load i32, ptr %50, align 4
  %1176 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1175, i32 1)
  %1177 = extractvalue { i32, i1 } %1176, 1
  br i1 %1177, label %1180, label %1181

1178:                                             ; preds = %1168
  br label %1172

1179:                                             ; preds = %1168
  call fastcc void @builtin.panicOutOfBounds(i64 %1170, i64 20)
  unreachable

1180:                                             ; preds = %1172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1181:                                             ; preds = %1172
  %1182 = extractvalue { i32, i1 } %1176, 0
  store i32 %1182, ptr %50, align 4
  br label %1108

1183:                                             ; preds = %1545, %1401, %1222
  %1184 = load i32, ptr %52, align 4
  %1185 = and i32 %1184, 7
  ret i32 %1185

1186:                                             ; preds = %1104
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @181)
  unreachable

1187:                                             ; preds = %1104
  store double 0.000000e+00, ptr %43, align 8
  %1188 = load i32, ptr %59, align 4
  store i32 %1188, ptr %50, align 4
  br label %1193

1189:                                             ; preds = %1202
  store { ptr, i64 } %63, ptr %25, align 8
  %1190 = load { ptr, i64 }, ptr %25, align 8
  %1191 = extractvalue { ptr, i64 } %1190, 1
  %1192 = icmp ult i64 0, %1191
  br i1 %1192, label %1220, label %1221

1193:                                             ; preds = %1196, %1187
  %1194 = load i32, ptr %50, align 4
  %1195 = icmp sge i32 %1194, 0
  br i1 %1195, label %1197, label %1202

1196:                                             ; preds = %1213
  br label %1193

1197:                                             ; preds = %1193
  %1198 = load double, ptr %43, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %26, ptr align 8 %41, i64 160, i1 false)
  %1199 = load i32, ptr %50, align 4
  %1200 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1199)
  %1201 = icmp ult i64 %1200, 20
  br i1 %1201, label %1210, label %1211

1202:                                             ; preds = %1193
  br label %1189

1203:                                             ; preds = %1210
  %1204 = getelementptr inbounds [20 x double], ptr %26, i64 0, i64 %1200
  %1205 = load double, ptr %1204, align 8
  %1206 = fadd double %1198, %1205
  store double %1206, ptr %43, align 8
  %1207 = load i32, ptr %50, align 4
  %1208 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1207, i32 1)
  %1209 = extractvalue { i32, i1 } %1208, 1
  br i1 %1209, label %1212, label %1213

1210:                                             ; preds = %1197
  br label %1203

1211:                                             ; preds = %1197
  call fastcc void @builtin.panicOutOfBounds(i64 %1200, i64 20)
  unreachable

1212:                                             ; preds = %1203
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1213:                                             ; preds = %1203
  %1214 = extractvalue { i32, i1 } %1208, 0
  store i32 %1214, ptr %50, align 4
  br label %1196

1215:                                             ; preds = %1220
  %1216 = extractvalue { ptr, i64 } %1190, 0
  %1217 = getelementptr inbounds double, ptr %1216, i64 0
  %1218 = load i32, ptr %45, align 4
  %1219 = icmp eq i32 %1218, 0
  br i1 %1219, label %1223, label %1225

1220:                                             ; preds = %1189
  br label %1215

1221:                                             ; preds = %1189
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %1191)
  unreachable

1222:                                             ; preds = %1225, %1223
  br label %1183

1223:                                             ; preds = %1215
  %1224 = load double, ptr %43, align 8
  store double %1224, ptr %1217, align 8
  br label %1222

1225:                                             ; preds = %1215
  %1226 = load double, ptr %43, align 8
  %1227 = fneg double %1226
  store double %1227, ptr %1217, align 8
  br label %1222

1228:                                             ; preds = %1104
  %1229 = load i32, ptr %59, align 4
  store i32 %1229, ptr %50, align 4
  br label %1232

1230:                                             ; preds = %1240
  %1231 = load i32, ptr %59, align 4
  store i32 %1231, ptr %50, align 4
  br label %1305

1232:                                             ; preds = %1235, %1228
  %1233 = load i32, ptr %50, align 4
  %1234 = icmp sgt i32 %1233, 0
  br i1 %1234, label %1236, label %1240

1235:                                             ; preds = %1301
  br label %1232

1236:                                             ; preds = %1232
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %24, ptr align 8 %41, i64 160, i1 false)
  %1237 = load i32, ptr %50, align 4
  %1238 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1237, i32 1)
  %1239 = extractvalue { i32, i1 } %1238, 1
  br i1 %1239, label %1241, label %1242

1240:                                             ; preds = %1232
  br label %1230

1241:                                             ; preds = %1236
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1242:                                             ; preds = %1236
  %1243 = extractvalue { i32, i1 } %1238, 0
  %1244 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1243)
  %1245 = icmp ult i64 %1244, 20
  br i1 %1245, label %1252, label %1253

1246:                                             ; preds = %1252
  %1247 = getelementptr inbounds [20 x double], ptr %24, i64 0, i64 %1244
  %1248 = load double, ptr %1247, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %23, ptr align 8 %41, i64 160, i1 false)
  %1249 = load i32, ptr %50, align 4
  %1250 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1249)
  %1251 = icmp ult i64 %1250, 20
  br i1 %1251, label %1261, label %1262

1252:                                             ; preds = %1242
  br label %1246

1253:                                             ; preds = %1242
  call fastcc void @builtin.panicOutOfBounds(i64 %1244, i64 20)
  unreachable

1254:                                             ; preds = %1261
  %1255 = getelementptr inbounds [20 x double], ptr %23, i64 0, i64 %1250
  %1256 = load double, ptr %1255, align 8
  %1257 = fadd double %1248, %1256
  store double %1257, ptr %43, align 8
  %1258 = load i32, ptr %50, align 4
  %1259 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1258)
  %1260 = icmp ult i64 %1259, 20
  br i1 %1260, label %1269, label %1270

1261:                                             ; preds = %1246
  br label %1254

1262:                                             ; preds = %1246
  call fastcc void @builtin.panicOutOfBounds(i64 %1250, i64 20)
  unreachable

1263:                                             ; preds = %1269
  %1264 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 %1259
  %1265 = load double, ptr %1264, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %22, ptr align 8 %41, i64 160, i1 false)
  %1266 = load i32, ptr %50, align 4
  %1267 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1266, i32 1)
  %1268 = extractvalue { i32, i1 } %1267, 1
  br i1 %1268, label %1271, label %1272

1269:                                             ; preds = %1254
  br label %1263

1270:                                             ; preds = %1254
  call fastcc void @builtin.panicOutOfBounds(i64 %1259, i64 20)
  unreachable

1271:                                             ; preds = %1263
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1272:                                             ; preds = %1263
  %1273 = extractvalue { i32, i1 } %1267, 0
  %1274 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1273)
  %1275 = icmp ult i64 %1274, 20
  br i1 %1275, label %1285, label %1286

1276:                                             ; preds = %1285
  %1277 = getelementptr inbounds [20 x double], ptr %22, i64 0, i64 %1274
  %1278 = load double, ptr %1277, align 8
  %1279 = load double, ptr %43, align 8
  %1280 = fsub double %1278, %1279
  %1281 = fadd double %1265, %1280
  store double %1281, ptr %1264, align 8
  %1282 = load i32, ptr %50, align 4
  %1283 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1282, i32 1)
  %1284 = extractvalue { i32, i1 } %1283, 1
  br i1 %1284, label %1287, label %1288

1285:                                             ; preds = %1272
  br label %1276

1286:                                             ; preds = %1272
  call fastcc void @builtin.panicOutOfBounds(i64 %1274, i64 20)
  unreachable

1287:                                             ; preds = %1276
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1288:                                             ; preds = %1276
  %1289 = extractvalue { i32, i1 } %1283, 0
  %1290 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1289)
  %1291 = icmp ult i64 %1290, 20
  br i1 %1291, label %1298, label %1299

1292:                                             ; preds = %1298
  %1293 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 %1290
  %1294 = load double, ptr %43, align 8
  store double %1294, ptr %1293, align 8
  %1295 = load i32, ptr %50, align 4
  %1296 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1295, i32 1)
  %1297 = extractvalue { i32, i1 } %1296, 1
  br i1 %1297, label %1300, label %1301

1298:                                             ; preds = %1288
  br label %1292

1299:                                             ; preds = %1288
  call fastcc void @builtin.panicOutOfBounds(i64 %1290, i64 20)
  unreachable

1300:                                             ; preds = %1292
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1301:                                             ; preds = %1292
  %1302 = extractvalue { i32, i1 } %1296, 0
  store i32 %1302, ptr %50, align 4
  br label %1235

1303:                                             ; preds = %1313
  store double 0.000000e+00, ptr %43, align 8
  %1304 = load i32, ptr %59, align 4
  store i32 %1304, ptr %50, align 4
  br label %1379

1305:                                             ; preds = %1308, %1230
  %1306 = load i32, ptr %50, align 4
  %1307 = icmp sgt i32 %1306, 1
  br i1 %1307, label %1309, label %1313

1308:                                             ; preds = %1374
  br label %1305

1309:                                             ; preds = %1305
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %21, ptr align 8 %41, i64 160, i1 false)
  %1310 = load i32, ptr %50, align 4
  %1311 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1310, i32 1)
  %1312 = extractvalue { i32, i1 } %1311, 1
  br i1 %1312, label %1314, label %1315

1313:                                             ; preds = %1305
  br label %1303

1314:                                             ; preds = %1309
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1315:                                             ; preds = %1309
  %1316 = extractvalue { i32, i1 } %1311, 0
  %1317 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1316)
  %1318 = icmp ult i64 %1317, 20
  br i1 %1318, label %1325, label %1326

1319:                                             ; preds = %1325
  %1320 = getelementptr inbounds [20 x double], ptr %21, i64 0, i64 %1317
  %1321 = load double, ptr %1320, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %20, ptr align 8 %41, i64 160, i1 false)
  %1322 = load i32, ptr %50, align 4
  %1323 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1322)
  %1324 = icmp ult i64 %1323, 20
  br i1 %1324, label %1334, label %1335

1325:                                             ; preds = %1315
  br label %1319

1326:                                             ; preds = %1315
  call fastcc void @builtin.panicOutOfBounds(i64 %1317, i64 20)
  unreachable

1327:                                             ; preds = %1334
  %1328 = getelementptr inbounds [20 x double], ptr %20, i64 0, i64 %1323
  %1329 = load double, ptr %1328, align 8
  %1330 = fadd double %1321, %1329
  store double %1330, ptr %43, align 8
  %1331 = load i32, ptr %50, align 4
  %1332 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1331)
  %1333 = icmp ult i64 %1332, 20
  br i1 %1333, label %1342, label %1343

1334:                                             ; preds = %1319
  br label %1327

1335:                                             ; preds = %1319
  call fastcc void @builtin.panicOutOfBounds(i64 %1323, i64 20)
  unreachable

1336:                                             ; preds = %1342
  %1337 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 %1332
  %1338 = load double, ptr %1337, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %19, ptr align 8 %41, i64 160, i1 false)
  %1339 = load i32, ptr %50, align 4
  %1340 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1339, i32 1)
  %1341 = extractvalue { i32, i1 } %1340, 1
  br i1 %1341, label %1344, label %1345

1342:                                             ; preds = %1327
  br label %1336

1343:                                             ; preds = %1327
  call fastcc void @builtin.panicOutOfBounds(i64 %1332, i64 20)
  unreachable

1344:                                             ; preds = %1336
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1345:                                             ; preds = %1336
  %1346 = extractvalue { i32, i1 } %1340, 0
  %1347 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1346)
  %1348 = icmp ult i64 %1347, 20
  br i1 %1348, label %1358, label %1359

1349:                                             ; preds = %1358
  %1350 = getelementptr inbounds [20 x double], ptr %19, i64 0, i64 %1347
  %1351 = load double, ptr %1350, align 8
  %1352 = load double, ptr %43, align 8
  %1353 = fsub double %1351, %1352
  %1354 = fadd double %1338, %1353
  store double %1354, ptr %1337, align 8
  %1355 = load i32, ptr %50, align 4
  %1356 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1355, i32 1)
  %1357 = extractvalue { i32, i1 } %1356, 1
  br i1 %1357, label %1360, label %1361

1358:                                             ; preds = %1345
  br label %1349

1359:                                             ; preds = %1345
  call fastcc void @builtin.panicOutOfBounds(i64 %1347, i64 20)
  unreachable

1360:                                             ; preds = %1349
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1361:                                             ; preds = %1349
  %1362 = extractvalue { i32, i1 } %1356, 0
  %1363 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1362)
  %1364 = icmp ult i64 %1363, 20
  br i1 %1364, label %1371, label %1372

1365:                                             ; preds = %1371
  %1366 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 %1363
  %1367 = load double, ptr %43, align 8
  store double %1367, ptr %1366, align 8
  %1368 = load i32, ptr %50, align 4
  %1369 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1368, i32 1)
  %1370 = extractvalue { i32, i1 } %1369, 1
  br i1 %1370, label %1373, label %1374

1371:                                             ; preds = %1361
  br label %1365

1372:                                             ; preds = %1361
  call fastcc void @builtin.panicOutOfBounds(i64 %1363, i64 20)
  unreachable

1373:                                             ; preds = %1365
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1374:                                             ; preds = %1365
  %1375 = extractvalue { i32, i1 } %1369, 0
  store i32 %1375, ptr %50, align 4
  br label %1308

1376:                                             ; preds = %1388
  %1377 = load i32, ptr %45, align 4
  %1378 = icmp eq i32 %1377, 0
  br i1 %1378, label %1402, label %1406

1379:                                             ; preds = %1382, %1303
  %1380 = load i32, ptr %50, align 4
  %1381 = icmp sge i32 %1380, 2
  br i1 %1381, label %1383, label %1388

1382:                                             ; preds = %1399
  br label %1379

1383:                                             ; preds = %1379
  %1384 = load double, ptr %43, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %18, ptr align 8 %41, i64 160, i1 false)
  %1385 = load i32, ptr %50, align 4
  %1386 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1385)
  %1387 = icmp ult i64 %1386, 20
  br i1 %1387, label %1396, label %1397

1388:                                             ; preds = %1379
  br label %1376

1389:                                             ; preds = %1396
  %1390 = getelementptr inbounds [20 x double], ptr %18, i64 0, i64 %1386
  %1391 = load double, ptr %1390, align 8
  %1392 = fadd double %1384, %1391
  store double %1392, ptr %43, align 8
  %1393 = load i32, ptr %50, align 4
  %1394 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1393, i32 1)
  %1395 = extractvalue { i32, i1 } %1394, 1
  br i1 %1395, label %1398, label %1399

1396:                                             ; preds = %1383
  br label %1389

1397:                                             ; preds = %1383
  call fastcc void @builtin.panicOutOfBounds(i64 %1386, i64 20)
  unreachable

1398:                                             ; preds = %1389
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1399:                                             ; preds = %1389
  %1400 = extractvalue { i32, i1 } %1394, 0
  store i32 %1400, ptr %50, align 4
  br label %1382

1401:                                             ; preds = %1458, %1430
  br label %1183

1402:                                             ; preds = %1376
  store { ptr, i64 } %63, ptr %17, align 8
  %1403 = load { ptr, i64 }, ptr %17, align 8
  %1404 = extractvalue { ptr, i64 } %1403, 1
  %1405 = icmp ult i64 0, %1404
  br i1 %1405, label %1418, label %1419

1406:                                             ; preds = %1376
  store { ptr, i64 } %63, ptr %14, align 8
  %1407 = load { ptr, i64 }, ptr %14, align 8
  %1408 = extractvalue { ptr, i64 } %1407, 1
  %1409 = icmp ult i64 0, %1408
  br i1 %1409, label %1445, label %1446

1410:                                             ; preds = %1418
  %1411 = extractvalue { ptr, i64 } %1403, 0
  %1412 = getelementptr inbounds double, ptr %1411, i64 0
  %1413 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 0
  %1414 = load double, ptr %1413, align 8
  store double %1414, ptr %1412, align 8
  store { ptr, i64 } %63, ptr %16, align 8
  %1415 = load { ptr, i64 }, ptr %16, align 8
  %1416 = extractvalue { ptr, i64 } %1415, 1
  %1417 = icmp ult i64 1, %1416
  br i1 %1417, label %1428, label %1429

1418:                                             ; preds = %1402
  br label %1410

1419:                                             ; preds = %1402
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %1404)
  unreachable

1420:                                             ; preds = %1428
  %1421 = extractvalue { ptr, i64 } %1415, 0
  %1422 = getelementptr inbounds double, ptr %1421, i64 1
  %1423 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 1
  %1424 = load double, ptr %1423, align 8
  store double %1424, ptr %1422, align 8
  store { ptr, i64 } %63, ptr %15, align 8
  %1425 = load { ptr, i64 }, ptr %15, align 8
  %1426 = extractvalue { ptr, i64 } %1425, 1
  %1427 = icmp ult i64 2, %1426
  br i1 %1427, label %1434, label %1435

1428:                                             ; preds = %1410
  br label %1420

1429:                                             ; preds = %1410
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %1416)
  unreachable

1430:                                             ; preds = %1434
  %1431 = extractvalue { ptr, i64 } %1425, 0
  %1432 = getelementptr inbounds double, ptr %1431, i64 2
  %1433 = load double, ptr %43, align 8
  store double %1433, ptr %1432, align 8
  br label %1401

1434:                                             ; preds = %1420
  br label %1430

1435:                                             ; preds = %1420
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %1426)
  unreachable

1436:                                             ; preds = %1445
  %1437 = extractvalue { ptr, i64 } %1407, 0
  %1438 = getelementptr inbounds double, ptr %1437, i64 0
  %1439 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 0
  %1440 = load double, ptr %1439, align 8
  %1441 = fneg double %1440
  store double %1441, ptr %1438, align 8
  store { ptr, i64 } %63, ptr %13, align 8
  %1442 = load { ptr, i64 }, ptr %13, align 8
  %1443 = extractvalue { ptr, i64 } %1442, 1
  %1444 = icmp ult i64 1, %1443
  br i1 %1444, label %1456, label %1457

1445:                                             ; preds = %1406
  br label %1436

1446:                                             ; preds = %1406
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %1408)
  unreachable

1447:                                             ; preds = %1456
  %1448 = extractvalue { ptr, i64 } %1442, 0
  %1449 = getelementptr inbounds double, ptr %1448, i64 1
  %1450 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 1
  %1451 = load double, ptr %1450, align 8
  %1452 = fneg double %1451
  store double %1452, ptr %1449, align 8
  store { ptr, i64 } %63, ptr %12, align 8
  %1453 = load { ptr, i64 }, ptr %12, align 8
  %1454 = extractvalue { ptr, i64 } %1453, 1
  %1455 = icmp ult i64 2, %1454
  br i1 %1455, label %1463, label %1464

1456:                                             ; preds = %1436
  br label %1447

1457:                                             ; preds = %1436
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %1443)
  unreachable

1458:                                             ; preds = %1463
  %1459 = extractvalue { ptr, i64 } %1453, 0
  %1460 = getelementptr inbounds double, ptr %1459, i64 2
  %1461 = load double, ptr %43, align 8
  %1462 = fneg double %1461
  store double %1462, ptr %1460, align 8
  br label %1401

1463:                                             ; preds = %1447
  br label %1458

1464:                                             ; preds = %1447
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %1454)
  unreachable

1465:                                             ; preds = %1104, %1104
  store double 0.000000e+00, ptr %43, align 8
  %1466 = load i32, ptr %59, align 4
  store i32 %1466, ptr %50, align 4
  br label %1472

1467:                                             ; preds = %1481
  %1468 = load double, ptr %43, align 8
  store double %1468, ptr %43, align 8
  store { ptr, i64 } %63, ptr %10, align 8
  %1469 = load { ptr, i64 }, ptr %10, align 8
  %1470 = extractvalue { ptr, i64 } %1469, 1
  %1471 = icmp ult i64 0, %1470
  br i1 %1471, label %1499, label %1500

1472:                                             ; preds = %1475, %1465
  %1473 = load i32, ptr %50, align 4
  %1474 = icmp sge i32 %1473, 0
  br i1 %1474, label %1476, label %1481

1475:                                             ; preds = %1492
  br label %1472

1476:                                             ; preds = %1472
  %1477 = load double, ptr %43, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %41, i64 160, i1 false)
  %1478 = load i32, ptr %50, align 4
  %1479 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1478)
  %1480 = icmp ult i64 %1479, 20
  br i1 %1480, label %1489, label %1490

1481:                                             ; preds = %1472
  br label %1467

1482:                                             ; preds = %1489
  %1483 = getelementptr inbounds [20 x double], ptr %11, i64 0, i64 %1479
  %1484 = load double, ptr %1483, align 8
  %1485 = fadd double %1477, %1484
  store double %1485, ptr %43, align 8
  %1486 = load i32, ptr %50, align 4
  %1487 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1486, i32 1)
  %1488 = extractvalue { i32, i1 } %1487, 1
  br i1 %1488, label %1491, label %1492

1489:                                             ; preds = %1476
  br label %1482

1490:                                             ; preds = %1476
  call fastcc void @builtin.panicOutOfBounds(i64 %1479, i64 20)
  unreachable

1491:                                             ; preds = %1482
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1492:                                             ; preds = %1482
  %1493 = extractvalue { i32, i1 } %1487, 0
  store i32 %1493, ptr %50, align 4
  br label %1475

1494:                                             ; preds = %1499
  %1495 = extractvalue { ptr, i64 } %1469, 0
  %1496 = getelementptr inbounds double, ptr %1495, i64 0
  %1497 = load i32, ptr %45, align 4
  %1498 = icmp eq i32 %1497, 0
  br i1 %1498, label %1506, label %1508

1499:                                             ; preds = %1467
  br label %1494

1500:                                             ; preds = %1467
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %1470)
  unreachable

1501:                                             ; preds = %1508, %1506
  %1502 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 0
  %1503 = load double, ptr %1502, align 8
  %1504 = load double, ptr %43, align 8
  %1505 = fsub double %1503, %1504
  store double %1505, ptr %43, align 8
  store i32 1, ptr %50, align 4
  br label %1515

1506:                                             ; preds = %1494
  %1507 = load double, ptr %43, align 8
  store double %1507, ptr %1496, align 8
  br label %1501

1508:                                             ; preds = %1494
  %1509 = load double, ptr %43, align 8
  %1510 = fneg double %1509
  store double %1510, ptr %1496, align 8
  br label %1501

1511:                                             ; preds = %1525
  store { ptr, i64 } %63, ptr %8, align 8
  %1512 = load { ptr, i64 }, ptr %8, align 8
  %1513 = extractvalue { ptr, i64 } %1512, 1
  %1514 = icmp ult i64 1, %1513
  br i1 %1514, label %1543, label %1544

1515:                                             ; preds = %1519, %1501
  %1516 = load i32, ptr %50, align 4
  %1517 = load i32, ptr %59, align 4
  %1518 = icmp sle i32 %1516, %1517
  br i1 %1518, label %1520, label %1525

1519:                                             ; preds = %1536
  br label %1515

1520:                                             ; preds = %1515
  %1521 = load double, ptr %43, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %41, i64 160, i1 false)
  %1522 = load i32, ptr %50, align 4
  %1523 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %1522)
  %1524 = icmp ult i64 %1523, 20
  br i1 %1524, label %1533, label %1534

1525:                                             ; preds = %1515
  br label %1511

1526:                                             ; preds = %1533
  %1527 = getelementptr inbounds [20 x double], ptr %9, i64 0, i64 %1523
  %1528 = load double, ptr %1527, align 8
  %1529 = fadd double %1521, %1528
  store double %1529, ptr %43, align 8
  %1530 = load i32, ptr %50, align 4
  %1531 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1530, i32 1)
  %1532 = extractvalue { i32, i1 } %1531, 1
  br i1 %1532, label %1535, label %1536

1533:                                             ; preds = %1520
  br label %1526

1534:                                             ; preds = %1520
  call fastcc void @builtin.panicOutOfBounds(i64 %1523, i64 20)
  unreachable

1535:                                             ; preds = %1526
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

1536:                                             ; preds = %1526
  %1537 = extractvalue { i32, i1 } %1531, 0
  store i32 %1537, ptr %50, align 4
  br label %1519

1538:                                             ; preds = %1543
  %1539 = extractvalue { ptr, i64 } %1512, 0
  %1540 = getelementptr inbounds double, ptr %1539, i64 1
  %1541 = load i32, ptr %45, align 4
  %1542 = icmp eq i32 %1541, 0
  br i1 %1542, label %1546, label %1548

1543:                                             ; preds = %1511
  br label %1538

1544:                                             ; preds = %1511
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %1513)
  unreachable

1545:                                             ; preds = %1548, %1546
  br label %1183

1546:                                             ; preds = %1538
  %1547 = load double, ptr %43, align 8
  store double %1547, ptr %1540, align 8
  br label %1545

1548:                                             ; preds = %1538
  %1549 = load double, ptr %43, align 8
  %1550 = fneg double %1549
  store double %1550, ptr %1540, align 8
  br label %1545
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.rem_pio2.medium(i32 %0, double %1, ptr nonnull align 8 %2) unnamed_addr #0 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca [6 x i64], align 8
  %16 = alloca double, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %16, i8 -86, i64 8, i1 false)
  %17 = ptrtoint ptr %16 to i64
  %18 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 0
  store i64 1296236545, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 1
  store i64 %17, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 2
  store i64 8, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 3
  store i64 0, ptr %21, align 8
  %22 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 4
  store i64 0, ptr %22, align 8
  %23 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 5
  store i64 0, ptr %23, align 8
  %24 = ptrtoint ptr %15 to i64
  %25 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %24, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %14, i8 -86, i64 8, i1 false)
  %26 = ptrtoint ptr %14 to i64
  %27 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 0
  store i64 1296236545, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 1
  store i64 %26, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 2
  store i64 8, ptr %29, align 8
  %30 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 3
  store i64 0, ptr %30, align 8
  %31 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 4
  store i64 0, ptr %31, align 8
  %32 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 5
  store i64 0, ptr %32, align 8
  %33 = ptrtoint ptr %15 to i64
  %34 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %33, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %13, i8 -86, i64 8, i1 false)
  %35 = ptrtoint ptr %13 to i64
  %36 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 0
  store i64 1296236545, ptr %36, align 8
  %37 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 1
  store i64 %35, ptr %37, align 8
  %38 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 2
  store i64 8, ptr %38, align 8
  %39 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 3
  store i64 0, ptr %39, align 8
  %40 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 4
  store i64 0, ptr %40, align 8
  %41 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 5
  store i64 0, ptr %41, align 8
  %42 = ptrtoint ptr %15 to i64
  %43 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %42, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %12, i8 -86, i64 8, i1 false)
  %44 = ptrtoint ptr %12 to i64
  %45 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 0
  store i64 1296236545, ptr %45, align 8
  %46 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 1
  store i64 %44, ptr %46, align 8
  %47 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 2
  store i64 8, ptr %47, align 8
  %48 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 3
  store i64 0, ptr %48, align 8
  %49 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 4
  store i64 0, ptr %49, align 8
  %50 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 5
  store i64 0, ptr %50, align 8
  %51 = ptrtoint ptr %15 to i64
  %52 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %51, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %11, i8 -86, i64 4, i1 false)
  %53 = ptrtoint ptr %11 to i64
  %54 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 0
  store i64 1296236545, ptr %54, align 8
  %55 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 1
  store i64 %53, ptr %55, align 8
  %56 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 2
  store i64 4, ptr %56, align 8
  %57 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 3
  store i64 0, ptr %57, align 8
  %58 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 4
  store i64 0, ptr %58, align 8
  %59 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 5
  store i64 0, ptr %59, align 8
  %60 = ptrtoint ptr %15 to i64
  %61 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %60, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %10, i8 -86, i64 4, i1 false)
  %62 = ptrtoint ptr %10 to i64
  %63 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 0
  store i64 1296236545, ptr %63, align 8
  %64 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 1
  store i64 %62, ptr %64, align 8
  %65 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 2
  store i64 4, ptr %65, align 8
  %66 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 3
  store i64 0, ptr %66, align 8
  %67 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 4
  store i64 0, ptr %67, align 8
  %68 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 5
  store i64 0, ptr %68, align 8
  %69 = ptrtoint ptr %15 to i64
  %70 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %69, i64 0)
  call void @llvm.memset.p0.i64(ptr align 4 %9, i8 -86, i64 4, i1 false)
  %71 = ptrtoint ptr %9 to i64
  %72 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 0
  store i64 1296236545, ptr %72, align 8
  %73 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 1
  store i64 %71, ptr %73, align 8
  %74 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 2
  store i64 4, ptr %74, align 8
  %75 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 3
  store i64 0, ptr %75, align 8
  %76 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 4
  store i64 0, ptr %76, align 8
  %77 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 5
  store i64 0, ptr %77, align 8
  %78 = ptrtoint ptr %15 to i64
  %79 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %78, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 8, i1 false)
  %80 = ptrtoint ptr %8 to i64
  %81 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 0
  store i64 1296236545, ptr %81, align 8
  %82 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 1
  store i64 %80, ptr %82, align 8
  %83 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 2
  store i64 8, ptr %83, align 8
  %84 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 3
  store i64 0, ptr %84, align 8
  %85 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 4
  store i64 0, ptr %85, align 8
  %86 = getelementptr inbounds [6 x i64], ptr %15, i64 0, i64 5
  store i64 0, ptr %86, align 8
  %87 = ptrtoint ptr %15 to i64
  %88 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %87, i64 0)
  %89 = fmul double %1, 0x3FE45F306DC9C883
  %90 = fadd double %89, 0x4338000000000000
  %91 = fsub double %90, 0x4338000000000000
  store double %91, ptr %12, align 8
  %92 = load double, ptr %12, align 8
  %93 = fptosi double %92 to i32
  %94 = sitofp i32 %93 to double
  %95 = fsub double %92, %94
  %96 = fcmp olt double %95, 1.000000e+00
  %97 = fcmp ogt double %95, -1.000000e+00
  %98 = and i1 %96, %97
  br i1 %98, label %109, label %110

99:                                               ; preds = %109
  store i32 %93, ptr %11, align 4
  %100 = load double, ptr %12, align 8
  %101 = fmul double %100, 0x3FF921FB54400000
  %102 = fsub double %1, %101
  store double %102, ptr %13, align 8
  %103 = load double, ptr %12, align 8
  %104 = fmul double %103, 0x3DD0B4611A626331
  store double %104, ptr %16, align 8
  %105 = load double, ptr %13, align 8
  %106 = load double, ptr %16, align 8
  %107 = fsub double %105, %106
  %108 = fcmp olt double %107, 0xBFE921FB54442D18
  br i1 %108, label %125, label %129

109:                                              ; preds = %3
  br label %99

110:                                              ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3812, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

111:                                              ; preds = %144, %135
  store ptr %2, ptr %7, align 8
  %112 = load ptr, ptr %7, align 8
  %113 = getelementptr inbounds [2 x double], ptr %112, i64 0, i64 0
  %114 = load double, ptr %13, align 8
  %115 = load double, ptr %16, align 8
  %116 = fsub double %114, %115
  store double %116, ptr %113, align 8
  %117 = getelementptr inbounds [2 x double], ptr %2, i64 0, i64 0
  %118 = load double, ptr %117, align 8
  %119 = bitcast double %118 to i64
  store i64 %119, ptr %8, align 8
  %120 = load i64, ptr %8, align 8
  %121 = lshr i64 %120, 52
  %122 = and i64 %121, 2047
  %123 = sub i64 2147483647, %122
  %124 = icmp ule i64 %123, 2147483647
  br i1 %124, label %165, label %166

125:                                              ; preds = %99
  %126 = load i32, ptr %11, align 4
  %127 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %126, i32 1)
  %128 = extractvalue { i32, i1 } %127, 1
  br i1 %128, label %134, label %135

129:                                              ; preds = %99
  %130 = load double, ptr %13, align 8
  %131 = load double, ptr %16, align 8
  %132 = fsub double %130, %131
  %133 = fcmp ogt double %132, 0x3FE921FB54442D18
  br i1 %133, label %145, label %149

134:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

135:                                              ; preds = %125
  %136 = extractvalue { i32, i1 } %127, 0
  store i32 %136, ptr %11, align 4
  %137 = load double, ptr %12, align 8
  %138 = fsub double %137, 1.000000e+00
  store double %138, ptr %12, align 8
  %139 = load double, ptr %12, align 8
  %140 = fmul double %139, 0x3FF921FB54400000
  %141 = fsub double %1, %140
  store double %141, ptr %13, align 8
  %142 = load double, ptr %12, align 8
  %143 = fmul double %142, 0x3DD0B4611A626331
  store double %143, ptr %16, align 8
  br label %111

144:                                              ; preds = %149, %151
  br label %111

145:                                              ; preds = %129
  %146 = load i32, ptr %11, align 4
  %147 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %146, i32 1)
  %148 = extractvalue { i32, i1 } %147, 1
  br i1 %148, label %150, label %151

149:                                              ; preds = %129
  br label %144

150:                                              ; preds = %145
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

151:                                              ; preds = %145
  %152 = extractvalue { i32, i1 } %147, 0
  store i32 %152, ptr %11, align 4
  %153 = load double, ptr %12, align 8
  %154 = fadd double %153, 1.000000e+00
  store double %154, ptr %12, align 8
  %155 = load double, ptr %12, align 8
  %156 = fmul double %155, 0x3FF921FB54400000
  %157 = fsub double %1, %156
  store double %157, ptr %13, align 8
  %158 = load double, ptr %12, align 8
  %159 = fmul double %158, 0x3DD0B4611A626331
  store double %159, ptr %16, align 8
  br label %144

160:                                              ; preds = %165
  %161 = trunc i64 %122 to i32
  store i32 %161, ptr %9, align 4
  %162 = lshr i32 %0, 20
  %163 = sub i32 2147483647, %162
  %164 = icmp ule i32 %163, 2147483647
  br i1 %164, label %172, label %173

165:                                              ; preds = %111
  br label %160

166:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

167:                                              ; preds = %172
  store i32 %162, ptr %10, align 4
  %168 = load i32, ptr %10, align 4
  %169 = load i32, ptr %9, align 4
  %170 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %168, i32 %169)
  %171 = extractvalue { i32, i1 } %170, 1
  br i1 %171, label %184, label %185

172:                                              ; preds = %160
  br label %167

173:                                              ; preds = %160
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

174:                                              ; preds = %216, %225
  store ptr %2, ptr %4, align 8
  %175 = load ptr, ptr %4, align 8
  %176 = getelementptr inbounds [2 x double], ptr %175, i64 0, i64 1
  %177 = load double, ptr %13, align 8
  %178 = getelementptr inbounds [2 x double], ptr %2, i64 0, i64 0
  %179 = load double, ptr %178, align 8
  %180 = fsub double %177, %179
  %181 = load double, ptr %16, align 8
  %182 = fsub double %180, %181
  store double %182, ptr %176, align 8
  %183 = load i32, ptr %11, align 4
  ret i32 %183

184:                                              ; preds = %167
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

185:                                              ; preds = %167
  %186 = extractvalue { i32, i1 } %170, 0
  %187 = icmp sgt i32 %186, 16
  br i1 %187, label %188, label %216

188:                                              ; preds = %185
  %189 = load double, ptr %13, align 8
  store double %189, ptr %14, align 8
  %190 = load double, ptr %12, align 8
  %191 = fmul double %190, 0x3DD0B4611A600000
  store double %191, ptr %16, align 8
  %192 = load double, ptr %14, align 8
  %193 = load double, ptr %16, align 8
  %194 = fsub double %192, %193
  store double %194, ptr %13, align 8
  %195 = load double, ptr %12, align 8
  %196 = fmul double %195, 0x3BA3198A2E037073
  %197 = load double, ptr %14, align 8
  %198 = load double, ptr %13, align 8
  %199 = fsub double %197, %198
  %200 = load double, ptr %16, align 8
  %201 = fsub double %199, %200
  %202 = fsub double %196, %201
  store double %202, ptr %16, align 8
  store ptr %2, ptr %6, align 8
  %203 = load ptr, ptr %6, align 8
  %204 = getelementptr inbounds [2 x double], ptr %203, i64 0, i64 0
  %205 = load double, ptr %13, align 8
  %206 = load double, ptr %16, align 8
  %207 = fsub double %205, %206
  store double %207, ptr %204, align 8
  %208 = getelementptr inbounds [2 x double], ptr %2, i64 0, i64 0
  %209 = load double, ptr %208, align 8
  %210 = bitcast double %209 to i64
  store i64 %210, ptr %8, align 8
  %211 = load i64, ptr %8, align 8
  %212 = lshr i64 %211, 52
  %213 = and i64 %212, 2047
  %214 = sub i64 2147483647, %213
  %215 = icmp ule i64 %214, 2147483647
  br i1 %215, label %223, label %224

216:                                              ; preds = %185
  br label %174

217:                                              ; preds = %223
  %218 = trunc i64 %213 to i32
  store i32 %218, ptr %9, align 4
  %219 = load i32, ptr %10, align 4
  %220 = load i32, ptr %9, align 4
  %221 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %219, i32 %220)
  %222 = extractvalue { i32, i1 } %221, 1
  br i1 %222, label %226, label %227

223:                                              ; preds = %188
  br label %217

224:                                              ; preds = %188
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

225:                                              ; preds = %250, %230
  br label %174

226:                                              ; preds = %217
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

227:                                              ; preds = %217
  %228 = extractvalue { i32, i1 } %221, 0
  %229 = icmp sgt i32 %228, 49
  br i1 %229, label %230, label %250

230:                                              ; preds = %227
  %231 = load double, ptr %13, align 8
  store double %231, ptr %14, align 8
  %232 = load double, ptr %12, align 8
  %233 = fmul double %232, 0x3BA3198A2E000000
  store double %233, ptr %16, align 8
  %234 = load double, ptr %14, align 8
  %235 = load double, ptr %16, align 8
  %236 = fsub double %234, %235
  store double %236, ptr %13, align 8
  %237 = load double, ptr %12, align 8
  %238 = fmul double %237, 0x397B839A252049C1
  %239 = load double, ptr %14, align 8
  %240 = load double, ptr %13, align 8
  %241 = fsub double %239, %240
  %242 = load double, ptr %16, align 8
  %243 = fsub double %241, %242
  %244 = fsub double %238, %243
  store double %244, ptr %16, align 8
  store ptr %2, ptr %5, align 8
  %245 = load ptr, ptr %5, align 8
  %246 = getelementptr inbounds [2 x double], ptr %245, i64 0, i64 0
  %247 = load double, ptr %13, align 8
  %248 = load double, ptr %16, align 8
  %249 = fsub double %247, %248
  store double %249, ptr %246, align 8
  br label %225

250:                                              ; preds = %227
  br label %225
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.rem_pio2.U__anon_4338(i32 %0) unnamed_addr #0 {
  %2 = icmp sge i32 %0, 0
  br i1 %2, label %5, label %6

3:                                                ; preds = %5
  %4 = sext i32 %0 to i64
  ret i64 %4

5:                                                ; preds = %1
  br label %3

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @184)
  unreachable
}

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @debug.panicExtra__anon_4340(ptr align 8 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #2 {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca [6 x i64], align 8
  %7 = alloca [4111 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %7, i8 -86, i64 4111, i1 false)
  %8 = ptrtoint ptr %7 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 2
  store i64 4111, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %6 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = getelementptr inbounds i8, ptr %7, i64 0
  %18 = getelementptr inbounds [4096 x i8], ptr %17, i64 0, i64 0
  %19 = insertvalue { ptr, i64 } poison, ptr %18, 0
  %20 = insertvalue { ptr, i64 } %19, i64 4096, 1
  %21 = extractvalue { ptr, i64 } %20, 0
  %22 = extractvalue { ptr, i64 } %20, 1
  call fastcc void @fmt.bufPrint__anon_6236(ptr sret({ { ptr, i64 }, i16, [6 x i8] }) %5, ptr nonnull align 1 %21, i64 %22, ptr nonnull readonly align 8 %2)
  %23 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %24 = load i16, ptr %23, align 2
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %31, label %34

26:                                               ; preds = %37, %31
  %27 = phi { ptr, i64 } [ %33, %31 ], [ %41, %37 ]
  store { ptr, i64 } %27, ptr %4, align 8
  %28 = load { ptr, i64 }, ptr %4, align 8
  %29 = extractvalue { ptr, i64 } %28, 0
  %30 = extractvalue { ptr, i64 } %28, 1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 %29, i64 %30, ptr align 8 %0, ptr nonnull readonly align 8 %1)
  unreachable

31:                                               ; preds = %3
  %32 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  %33 = load { ptr, i64 }, ptr %32, align 8
  br label %26

34:                                               ; preds = %3
  %35 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %36 = load i16, ptr %35, align 2
  switch i16 %36, label %42 [
    i16 6, label %43
  ]

37:                                               ; preds = %49
  %38 = phi ptr [ %7, %49 ]
  %39 = getelementptr inbounds [4111 x i8], ptr %38, i64 0, i64 0
  %40 = insertvalue { ptr, i64 } poison, ptr %39, 0
  %41 = insertvalue { ptr, i64 } %40, i64 4111, 1
  br label %26

42:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6237, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @185)
  unreachable

43:                                               ; preds = %34
  %44 = getelementptr inbounds i8, ptr %7, i64 4096
  %45 = getelementptr inbounds i8, ptr %44, i64 15
  %46 = icmp uge ptr %44, getelementptr inbounds (i8, ptr @debug.panicExtra__anon_4340__anon_6091, i64 15)
  %47 = icmp uge ptr @debug.panicExtra__anon_4340__anon_6091, %45
  %48 = or i1 %46, %47
  br i1 %48, label %50, label %51

49:                                               ; preds = %50
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %44, ptr align 1 @debug.panicExtra__anon_4340__anon_6091, i64 15, i1 false)
  br label %37

50:                                               ; preds = %43
  br label %49

51:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @185)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_4341(half %0) unnamed_addr #0 {
  %2 = alloca half, align 2
  %3 = alloca i8, align 1
  store i8 0, ptr %3, align 1
  store half %0, ptr %2, align 2
  call fastcc void @mem.doNotOptimizeAway__anon_6241(ptr nonnull readonly align 2 %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.frexp.frexp64(ptr noalias nonnull sret(%"math.frexp.Frexp(f64)") %0, double %1) unnamed_addr #0 {
  %3 = alloca %"math.frexp.Frexp(f64)", align 8
  %4 = alloca i64, align 8
  %5 = alloca [6 x i64], align 8
  %6 = alloca %"math.frexp.Frexp(f64)", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 16, i1 false)
  %7 = ptrtoint ptr %6 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 16, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %5 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = bitcast double %1 to i64
  store i64 %16, ptr %4, align 8
  %17 = load i64, ptr %4, align 8
  %18 = lshr i64 %17, 52
  %19 = sub i64 2147483647, %18
  %20 = icmp ule i64 %19, 2147483647
  br i1 %20, label %25, label %26

21:                                               ; preds = %25
  %22 = trunc i64 %18 to i32
  %23 = and i32 %22, 2047
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %31, label %33

25:                                               ; preds = %2
  br label %21

26:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @186)
  unreachable

27:                                               ; preds = %48
  %28 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  %29 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 1022)
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %69, label %70

31:                                               ; preds = %21
  %32 = fcmp une double %1, 0.000000e+00
  br i1 %32, label %36, label %42

33:                                               ; preds = %21
  %34 = icmp eq i32 %23, 2047
  br i1 %34, label %49, label %64

35:                                               ; preds = %42, %46
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void

36:                                               ; preds = %31
  %37 = fmul double %1, 0x43F0000000000000
  call fastcc void @math.frexp.frexp64(ptr sret(%"math.frexp.Frexp(f64)") %3, double %37)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %3, i64 16, i1 false)
  %38 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  %39 = load i32, ptr %38, align 4
  %40 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %39, i32 64)
  %41 = extractvalue { i32, i1 } %40, 1
  br i1 %41, label %45, label %46

42:                                               ; preds = %31
  %43 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 0
  store double %1, ptr %43, align 8
  %44 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  store i32 0, ptr %44, align 4
  br label %35

45:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %36
  %47 = extractvalue { i32, i1 } %40, 0
  store i32 %47, ptr %38, align 4
  br label %35

48:                                               ; preds = %64
  br label %27

49:                                               ; preds = %33
  %50 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 0
  store double %1, ptr %50, align 8
  %51 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  call void @llvm.memset.p0.i64(ptr align 4 %51, i8 -86, i64 4, i1 false)
  %52 = ptrtoint ptr %51 to i64
  %53 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %53, align 8
  %54 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %52, ptr %54, align 8
  %55 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 4, ptr %55, align 8
  %56 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %56, align 8
  %57 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %57, align 8
  %58 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %58, align 8
  %59 = ptrtoint ptr %5 to i64
  %60 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %59, i64 0)
  %61 = bitcast double %1 to i64
  %62 = and i64 %61, 9223372036854775807
  %63 = icmp eq i64 %62, 9218868437227405312
  br i1 %63, label %66, label %68

64:                                               ; preds = %33
  br label %48

65:                                               ; preds = %68, %66
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void

66:                                               ; preds = %49
  %67 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  store i32 0, ptr %67, align 4
  br label %65

68:                                               ; preds = %49
  br label %65

69:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %27
  %71 = extractvalue { i32, i1 } %29, 0
  store i32 %71, ptr %28, align 4
  %72 = load i64, ptr %4, align 8
  %73 = and i64 %72, -9218868437227405313
  store i64 %73, ptr %4, align 8
  %74 = load i64, ptr %4, align 8
  %75 = or i64 %74, 4602678819172646912
  store i64 %75, ptr %4, align 8
  %76 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 0
  %77 = load i64, ptr %4, align 8
  %78 = bitcast i64 %77 to double
  store double %78, ptr %76, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.frexp.frexp128(ptr noalias nonnull sret(%"math.frexp.Frexp(f128)") %0, fp128 %1) unnamed_addr #0 {
  %3 = alloca %"math.frexp.Frexp(f128)", align 16
  %4 = alloca i128, align 8
  %5 = alloca [6 x i64], align 8
  %6 = alloca %"math.frexp.Frexp(f128)", align 16
  call void @llvm.memset.p0.i64(ptr align 16 %6, i8 -86, i64 32, i1 false)
  %7 = ptrtoint ptr %6 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 32, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %5 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = bitcast fp128 %1 to i128
  store i128 %16, ptr %4, align 8
  %17 = load i128, ptr %4, align 8
  %18 = lshr i128 %17, 112
  %19 = sub i128 2147483647, %18
  %20 = icmp ule i128 %19, 2147483647
  br i1 %20, label %25, label %26

21:                                               ; preds = %25
  %22 = trunc i128 %18 to i32
  %23 = and i32 %22, 32767
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %31, label %34

25:                                               ; preds = %2
  br label %21

26:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @187)
  unreachable

27:                                               ; preds = %49
  %28 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  %29 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 16382)
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %70, label %71

31:                                               ; preds = %21
  %32 = call i32 @__netf2(fp128 %1, fp128 0xL00000000000000000000000000000000)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %37, label %43

34:                                               ; preds = %21
  %35 = icmp eq i32 %23, 32767
  br i1 %35, label %50, label %65

36:                                               ; preds = %43, %47
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %6, i64 32, i1 false)
  ret void

37:                                               ; preds = %31
  %38 = call fp128 @__multf3(fp128 %1, fp128 0xL00000000000000004077000000000000)
  call fastcc void @math.frexp.frexp128(ptr sret(%"math.frexp.Frexp(f128)") %3, fp128 %38)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %6, ptr align 16 %3, i64 32, i1 false)
  %39 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  %40 = load i32, ptr %39, align 4
  %41 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %40, i32 120)
  %42 = extractvalue { i32, i1 } %41, 1
  br i1 %42, label %46, label %47

43:                                               ; preds = %31
  %44 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 0
  store fp128 %1, ptr %44, align 16
  %45 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  store i32 0, ptr %45, align 4
  br label %36

46:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %37
  %48 = extractvalue { i32, i1 } %41, 0
  store i32 %48, ptr %39, align 4
  br label %36

49:                                               ; preds = %65
  br label %27

50:                                               ; preds = %34
  %51 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 0
  store fp128 %1, ptr %51, align 16
  %52 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  call void @llvm.memset.p0.i64(ptr align 4 %52, i8 -86, i64 4, i1 false)
  %53 = ptrtoint ptr %52 to i64
  %54 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %54, align 8
  %55 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %53, ptr %55, align 8
  %56 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 4, ptr %56, align 8
  %57 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %57, align 8
  %58 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %58, align 8
  %59 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %59, align 8
  %60 = ptrtoint ptr %5 to i64
  %61 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %60, i64 0)
  %62 = bitcast fp128 %1 to i128
  %63 = and i128 %62, 170141183460469231731687303715884105727
  %64 = icmp eq i128 %63, 170135991163610696904058773219554885632
  br i1 %64, label %67, label %69

65:                                               ; preds = %34
  br label %49

66:                                               ; preds = %69, %67
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %6, i64 32, i1 false)
  ret void

67:                                               ; preds = %50
  %68 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  store i32 0, ptr %68, align 4
  br label %66

69:                                               ; preds = %50
  br label %66

70:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %27
  %72 = extractvalue { i32, i1 } %29, 0
  store i32 %72, ptr %28, align 4
  %73 = load i128, ptr %4, align 8
  %74 = and i128 %73, -170135991163610696904058773219554885633
  store i128 %74, ptr %4, align 8
  %75 = load i128, ptr %4, align 8
  %76 = or i128 %75, 85060207136517546210586590865283612672
  store i128 %76, ptr %4, align 8
  %77 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 0
  %78 = load i128, ptr %4, align 8
  %79 = bitcast i128 %78 to fp128
  store fp128 %79, ptr %77, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %6, i64 32, i1 false)
  ret void
}

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @debug.panicExtra__anon_4345(ptr align 8 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #2 {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca [6 x i64], align 8
  %7 = alloca [4111 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %7, i8 -86, i64 4111, i1 false)
  %8 = ptrtoint ptr %7 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 2
  store i64 4111, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %6 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = getelementptr inbounds i8, ptr %7, i64 0
  %18 = getelementptr inbounds [4096 x i8], ptr %17, i64 0, i64 0
  %19 = insertvalue { ptr, i64 } poison, ptr %18, 0
  %20 = insertvalue { ptr, i64 } %19, i64 4096, 1
  %21 = extractvalue { ptr, i64 } %20, 0
  %22 = extractvalue { ptr, i64 } %20, 1
  call fastcc void @fmt.bufPrint__anon_6242(ptr sret({ { ptr, i64 }, i16, [6 x i8] }) %5, ptr nonnull align 1 %21, i64 %22, ptr nonnull readonly align 8 %2)
  %23 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %24 = load i16, ptr %23, align 2
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %31, label %34

26:                                               ; preds = %37, %31
  %27 = phi { ptr, i64 } [ %33, %31 ], [ %41, %37 ]
  store { ptr, i64 } %27, ptr %4, align 8
  %28 = load { ptr, i64 }, ptr %4, align 8
  %29 = extractvalue { ptr, i64 } %28, 0
  %30 = extractvalue { ptr, i64 } %28, 1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 %29, i64 %30, ptr align 8 %0, ptr nonnull readonly align 8 %1)
  unreachable

31:                                               ; preds = %3
  %32 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  %33 = load { ptr, i64 }, ptr %32, align 8
  br label %26

34:                                               ; preds = %3
  %35 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %36 = load i16, ptr %35, align 2
  switch i16 %36, label %42 [
    i16 6, label %43
  ]

37:                                               ; preds = %49
  %38 = phi ptr [ %7, %49 ]
  %39 = getelementptr inbounds [4111 x i8], ptr %38, i64 0, i64 0
  %40 = insertvalue { ptr, i64 } poison, ptr %39, 0
  %41 = insertvalue { ptr, i64 } %40, i64 4111, 1
  br label %26

42:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6237, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @188)
  unreachable

43:                                               ; preds = %34
  %44 = getelementptr inbounds i8, ptr %7, i64 4096
  %45 = getelementptr inbounds i8, ptr %44, i64 15
  %46 = icmp uge ptr %44, getelementptr inbounds (i8, ptr @debug.panicExtra__anon_4340__anon_6091, i64 15)
  %47 = icmp uge ptr @debug.panicExtra__anon_4340__anon_6091, %45
  %48 = or i1 %46, %47
  br i1 %48, label %50, label %51

49:                                               ; preds = %50
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %44, ptr align 1 @debug.panicExtra__anon_4340__anon_6091, i64 15, i1 false)
  br label %37

50:                                               ; preds = %43
  br label %49

51:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @188)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i6 @math.absCast__anon_4346(i6 %0) unnamed_addr #0 {
  ret i6 %0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.acquire(ptr nonnull align 64 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  br label %4

3:                                                ; preds = %10
  ret void

4:                                                ; preds = %8, %1
  store ptr %0, ptr %2, align 8
  %5 = load ptr, ptr %2, align 8
  %6 = getelementptr inbounds %compiler_rt.atomics.SpinlockTable.Spinlock, ptr %5, i32 0, i32 0
  %7 = atomicrmw xchg ptr %6, i64 1 acquire, align 8
  switch i64 %7, label %9 [
    i64 0, label %10
    i64 1, label %11
  ]

8:                                                ; preds = %11
  br label %4

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6237, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @189)
  unreachable

10:                                               ; preds = %4
  br label %3

11:                                               ; preds = %4
  br label %8
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.umax.i128(i128, i128) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.umin.i128(i128, i128) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @debug.resetSegfaultHandler() unnamed_addr #0 {
  %1 = alloca %os.linux.Sigaction, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 @190, i64 152, i1 false)
  %2 = call fastcc i16 @debug.updateSegfaultHandler(ptr readonly align 8 %1)
  %3 = icmp eq i16 %2, 0
  br i1 %3, label %5, label %6

4:                                                ; preds = %6, %5
  ret void

5:                                                ; preds = %0
  br label %4

6:                                                ; preds = %0
  br label %4
}

; Function Attrs: nounwind uwtable
define internal fastcc void @Thread.Mutex.lock(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %8, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %Thread.Mutex, ptr %9, i32 0, i32 0
  %11 = call fastcc i32 @Thread.getCurrentId()
  store ptr %10, ptr %7, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %12, i32 0, i32 0
  store ptr %13, ptr %5, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %14, i32 0, i32 0
  %16 = load atomic i32, ptr %15 unordered, align 4
  store i32 %16, ptr %6, align 4
  %17 = load i32, ptr %6, align 4
  %18 = icmp eq i32 %17, %11
  br i1 %18, label %28, label %30

19:                                               ; preds = %32
  store ptr %10, ptr %4, align 8
  %20 = load ptr, ptr %4, align 8
  %21 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %20, i32 0, i32 1
  call fastcc void @Thread.Mutex.FutexImpl.lock(ptr nonnull align 4 %21)
  store ptr %10, ptr %3, align 8
  %22 = load ptr, ptr %3, align 8
  %23 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %22, i32 0, i32 0
  store ptr %23, ptr %2, align 8
  %24 = load ptr, ptr %2, align 8
  %25 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %24, i32 0, i32 0
  store atomic i32 %11, ptr %25 unordered, align 4
  ret void

26:                                               ; preds = %30, %28
  %27 = phi i1 [ %29, %28 ], [ false, %30 ]
  br i1 %27, label %31, label %32

28:                                               ; preds = %1
  %29 = icmp ne i32 %11, 0
  br label %26

30:                                               ; preds = %1
  br label %26

31:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @Thread.Mutex.DebugImpl.lock__anon_6310, i64 17, ptr align 8 null, ptr nonnull readonly align 8 @191)
  unreachable

32:                                               ; preds = %26
  br label %19
}

; Function Attrs: nounwind uwtable
define internal fastcc void @io.getStdErr(ptr noalias nonnull sret(%fs.file.File) %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %fs.file.File, ptr %0, i32 0, i32 0
  %3 = call fastcc i32 @io.getStdErrHandle()
  store i32 %3, ptr %2, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fs.file.File.writer(ptr noalias nonnull sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %0, ptr nonnull readonly align 4 %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", ptr %0, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %1, i64 4, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @Thread.getCurrentId() unnamed_addr #0 {
  %1 = call fastcc i32 @Thread.LinuxThreadImpl.getCurrentId()
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6073"(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 4 %1) unnamed_addr #0 {
  %3 = call fastcc i16 @fmt.format__anon_6322(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 4 %1)
  ret i16 %3
}

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @os.abort() unnamed_addr #2 {
  %1 = alloca { i1, i8 }, align 1
  %2 = call fastcc i16 @os.raise(i8 6)
  %3 = icmp eq i16 %2, 0
  br i1 %3, label %5, label %6

4:                                                ; preds = %6, %5
  call fastcc void @os.sigprocmask(i32 0, ptr noalias readonly align 4 @os.linux.all_mask, ptr noalias align 4 null)
  br label %10

5:                                                ; preds = %0
  br label %4

6:                                                ; preds = %0
  br label %4

7:                                                ; preds = %24
  %8 = call fastcc i16 @os.sigaction(i6 6, ptr noalias readonly align 8 @os.abort__anon_6378, ptr noalias align 8 null)
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %30, label %31

10:                                               ; preds = %22, %4
  %11 = cmpxchg weak ptr @os.abort.global.abort_entered, i8 0, i8 1 seq_cst seq_cst, align 1
  %12 = extractvalue { i8, i1 } %11, 0
  %13 = trunc i8 %12 to i1
  %14 = extractvalue { i8, i1 } %11, 1
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds { i1, i8 }, ptr %1, i32 0, i32 0
  store i1 %13, ptr %17, align 1
  %18 = getelementptr inbounds { i1, i8 }, ptr %1, i32 0, i32 1
  store i8 %16, ptr %18, align 1
  %19 = getelementptr inbounds { i1, i8 }, ptr %1, i32 0, i32 1
  %20 = load i8, ptr %19, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %23, label %24

22:                                               ; preds = %23
  br label %10

23:                                               ; preds = %10
  br label %22

24:                                               ; preds = %10
  br label %7

25:                                               ; preds = %30
  %26 = call fastcc i32 @os.linux.gettid()
  %27 = call fastcc i64 @os.linux.tkill(i32 %26, i32 6)
  call fastcc void @os.sigprocmask(i32 1, ptr noalias readonly align 4 @os.abort__anon_6380, ptr noalias align 4 null)
  store volatile i8 0, ptr null, align 1
  %28 = call fastcc i16 @os.raise(i8 9)
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %35, label %36

30:                                               ; preds = %7
  br label %25

31:                                               ; preds = %7
  switch i16 %8, label %32 [
    i16 18, label %33
  ]

32:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6237, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @193)
  unreachable

33:                                               ; preds = %31
  call fastcc void @builtin.panicUnwrapError(ptr align 8 null, i16 %8)
  unreachable

34:                                               ; preds = %36, %35
  call fastcc void @os.exit(i8 127)
  unreachable

35:                                               ; preds = %25
  br label %34

36:                                               ; preds = %25
  br label %34
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6075"(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %3 = call fastcc i16 @fmt.format__anon_6381(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1)
  ret i16 %3
}

; Function Attrs: nounwind uwtable
define internal fastcc void @debug.dumpStackTrace(ptr nonnull readonly align 8 %0) unnamed_addr #0 {
  %2 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %fs.file.File, align 4
  %5 = alloca %fs.file.File, align 4
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %5)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %5, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %3, ptr nonnull readonly align 4 %4)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %3, i64 4, i1 false)
  %6 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6418"(ptr nonnull readonly align 4 %2)
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %1
  br label %8

10:                                               ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @debug.dumpCurrentStackTrace(ptr nonnull readonly align 8 %0) unnamed_addr #0 {
  %2 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %fs.file.File, align 4
  %5 = alloca %fs.file.File, align 4
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %5)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %5, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %3, ptr nonnull readonly align 4 %4)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %3, i64 4, i1 false)
  %6 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6418"(ptr nonnull readonly align 4 %2)
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %1
  br label %8

10:                                               ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @Thread.Mutex.unlock(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %8, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %Thread.Mutex, ptr %9, i32 0, i32 0
  store ptr %10, ptr %7, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %11, i32 0, i32 0
  store ptr %12, ptr %5, align 8
  %13 = load ptr, ptr %5, align 8
  %14 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %13, i32 0, i32 0
  %15 = load atomic i32, ptr %14 unordered, align 4
  store i32 %15, ptr %6, align 4
  %16 = load i32, ptr %6, align 4
  %17 = call fastcc i32 @Thread.getCurrentId()
  %18 = icmp eq i32 %16, %17
  call fastcc void @debug.assert(i1 %18)
  store ptr %10, ptr %4, align 8
  %19 = load ptr, ptr %4, align 8
  %20 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %19, i32 0, i32 0
  store ptr %20, ptr %3, align 8
  %21 = load ptr, ptr %3, align 8
  %22 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %21, i32 0, i32 0
  store atomic i32 0, ptr %22 unordered, align 4
  store ptr %10, ptr %2, align 8
  %23 = load ptr, ptr %2, align 8
  %24 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %23, i32 0, i32 1
  call fastcc void @Thread.Mutex.FutexImpl.unlock(ptr nonnull align 4 %24)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @debug.waitForOtherThreadToFinishPanicking() unnamed_addr #0 {
  %1 = alloca %"atomic.Atomic.Atomic(u32)", align 4
  %2 = alloca %"atomic.Atomic.Atomic(u32)", align 4
  %3 = call i8 @llvm.x86.atomic.sub.cc.i8(ptr @debug.panicking, i8 1, i32 5)
  %4 = trunc i8 %3 to i1
  br i1 %4, label %6, label %7

5:                                                ; preds = %7
  ret void

6:                                                ; preds = %0
  call fastcc void @"atomic.Atomic.Atomic(u32).init"(ptr sret(%"atomic.Atomic.Atomic(u32)") %1, i32 0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %1, i64 4, i1 false)
  br label %8

7:                                                ; preds = %0
  br label %5

8:                                                ; preds = %8, %6
  call fastcc void @Thread.Futex.wait(ptr nonnull readonly align 4 %2, i32 0)
  br label %8
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6077"(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %2 = call fastcc i16 @fmt.format__anon_6449(ptr nonnull readonly align 4 %0)
  ret i16 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compiler_rt.udivmod.divwide_generic__anon_6078(i32 %0, i32 %1, i32 %2, ptr nonnull align 4 %3) unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %2, ptr %11, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %10, i8 undef, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %9, i8 undef, i64 4, i1 false)
  %12 = load i32, ptr %11, align 4
  %13 = call i32 @llvm.ctlz.i32(i32 %12, i1 false)
  %14 = trunc i32 %13 to i6
  %15 = trunc i6 %14 to i5
  %16 = icmp ugt i5 %15, 0
  br i1 %16, label %32, label %46

17:                                               ; preds = %46, %32
  %18 = load i32, ptr %11, align 4
  %19 = lshr i32 %18, 16
  %20 = load i32, ptr %11, align 4
  %21 = and i32 %20, 65535
  %22 = load i32, ptr %9, align 4
  %23 = lshr i32 %22, 16
  %24 = load i32, ptr %9, align 4
  %25 = and i32 %24, 65535
  %26 = load i32, ptr %10, align 4
  %27 = udiv i32 %26, %19
  store i32 %27, ptr %8, align 4
  %28 = load i32, ptr %10, align 4
  %29 = load i32, ptr %8, align 4
  %30 = mul i32 %29, %19
  %31 = sub i32 %28, %30
  store i32 %31, ptr %7, align 4
  br label %61

32:                                               ; preds = %4
  %33 = load i32, ptr %11, align 4
  %34 = zext i5 %15 to i32
  %35 = shl i32 %33, %34
  store i32 %35, ptr %11, align 4
  %36 = zext i5 %15 to i32
  %37 = shl i32 %0, %36
  %38 = zext i5 %15 to i32
  %39 = sub nuw i32 32, %38
  %40 = trunc i32 %39 to i5
  %41 = zext i5 %40 to i32
  %42 = lshr i32 %1, %41
  %43 = or i32 %37, %42
  store i32 %43, ptr %10, align 4
  %44 = zext i5 %15 to i32
  %45 = shl i32 %1, %44
  store i32 %45, ptr %9, align 4
  br label %17

46:                                               ; preds = %4
  store i32 %0, ptr %10, align 4
  store i32 %1, ptr %9, align 4
  br label %17

47:                                               ; preds = %82, %84
  %48 = load i32, ptr %10, align 4
  %49 = mul i32 %48, 65536
  %50 = add i32 %49, %23
  %51 = load i32, ptr %8, align 4
  %52 = load i32, ptr %11, align 4
  %53 = mul i32 %51, %52
  %54 = sub i32 %50, %53
  store i32 %54, ptr %6, align 4
  %55 = load i32, ptr %6, align 4
  %56 = udiv i32 %55, %19
  store i32 %56, ptr %5, align 4
  %57 = load i32, ptr %6, align 4
  %58 = load i32, ptr %5, align 4
  %59 = mul i32 %58, %19
  %60 = sub i32 %57, %59
  store i32 %60, ptr %7, align 4
  br label %100

61:                                               ; preds = %64, %17
  %62 = load i32, ptr %8, align 4
  %63 = icmp uge i32 %62, 65536
  br i1 %63, label %67, label %68

64:                                               ; preds = %83
  br label %61

65:                                               ; preds = %68, %67
  %66 = phi i1 [ true, %67 ], [ %74, %68 ]
  br i1 %66, label %75, label %82

67:                                               ; preds = %61
  br label %65

68:                                               ; preds = %61
  %69 = load i32, ptr %8, align 4
  %70 = mul nuw i32 %69, %21
  %71 = load i32, ptr %7, align 4
  %72 = mul nuw i32 65536, %71
  %73 = add nuw i32 %72, %23
  %74 = icmp ugt i32 %70, %73
  br label %65

75:                                               ; preds = %65
  %76 = load i32, ptr %8, align 4
  %77 = sub nuw i32 %76, 1
  store i32 %77, ptr %8, align 4
  %78 = load i32, ptr %7, align 4
  %79 = add nuw i32 %78, %19
  store i32 %79, ptr %7, align 4
  %80 = load i32, ptr %7, align 4
  %81 = icmp uge i32 %80, 65536
  br i1 %81, label %84, label %85

82:                                               ; preds = %65
  br label %47

83:                                               ; preds = %85
  br label %64

84:                                               ; preds = %75
  br label %47

85:                                               ; preds = %75
  br label %83

86:                                               ; preds = %121, %123
  %87 = load i32, ptr %6, align 4
  %88 = mul i32 %87, 65536
  %89 = add i32 %88, %25
  %90 = load i32, ptr %5, align 4
  %91 = load i32, ptr %11, align 4
  %92 = mul i32 %90, %91
  %93 = sub i32 %89, %92
  %94 = zext i5 %15 to i32
  %95 = lshr i32 %93, %94
  store i32 %95, ptr %3, align 4
  %96 = load i32, ptr %8, align 4
  %97 = mul i32 %96, 65536
  %98 = load i32, ptr %5, align 4
  %99 = add i32 %97, %98
  ret i32 %99

100:                                              ; preds = %103, %47
  %101 = load i32, ptr %5, align 4
  %102 = icmp uge i32 %101, 65536
  br i1 %102, label %106, label %107

103:                                              ; preds = %122
  br label %100

104:                                              ; preds = %107, %106
  %105 = phi i1 [ true, %106 ], [ %113, %107 ]
  br i1 %105, label %114, label %121

106:                                              ; preds = %100
  br label %104

107:                                              ; preds = %100
  %108 = load i32, ptr %5, align 4
  %109 = mul nuw i32 %108, %21
  %110 = load i32, ptr %7, align 4
  %111 = mul nuw i32 65536, %110
  %112 = add nuw i32 %111, %25
  %113 = icmp ugt i32 %109, %112
  br label %104

114:                                              ; preds = %104
  %115 = load i32, ptr %5, align 4
  %116 = sub nuw i32 %115, 1
  store i32 %116, ptr %5, align 4
  %117 = load i32, ptr %7, align 4
  %118 = add nuw i32 %117, %19
  store i32 %118, ptr %7, align 4
  %119 = load i32, ptr %7, align 4
  %120 = icmp uge i32 %119, 65536
  br i1 %120, label %123, label %124

121:                                              ; preds = %104
  br label %86

122:                                              ; preds = %124
  br label %103

123:                                              ; preds = %114
  br label %86

124:                                              ; preds = %114
  br label %122
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.raiseInvalid() unnamed_addr #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_6088(ptr nonnull readonly align 16 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i8, align 1
  store i8 0, ptr %3, align 1
  store ptr %0, ptr %2, align 8
  call void asm sideeffect "", "m,~{memory},~{dirflag},~{fpsr},~{flags}"(ptr %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6089(i32 %0) unnamed_addr #0 {
  %2 = icmp sge i32 %0, 0
  br i1 %2, label %5, label %6

3:                                                ; preds = %5
  %4 = sext i32 %0 to i64
  ret i64 %4

5:                                                ; preds = %1
  br label %3

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3467, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @195)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @fmt.bufPrint__anon_6236(ptr noalias nonnull sret({ { ptr, i64 }, i16, [6 x i8] }) %0, ptr nonnull align 1 %1, i64 %2, ptr nonnull readonly align 8 %3) unnamed_addr #0 {
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %7 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %8 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %9 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %10 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %11 = insertvalue { ptr, i64 } %10, i64 %2, 1
  %12 = extractvalue { ptr, i64 } %11, 0
  %13 = extractvalue { ptr, i64 } %11, 1
  call fastcc void @io.fixed_buffer_stream.fixedBufferStream__anon_6499(ptr sret(%"io.fixed_buffer_stream.FixedBufferStream([]u8)") %8, ptr nonnull align 1 %12, i64 %13)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %8, i64 24, i1 false)
  call fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).writer"(ptr sret(%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))") %7, ptr nonnull align 8 %9)
  %14 = call fastcc i16 @fmt.format__anon_6515(ptr nonnull readonly align 8 %7, ptr nonnull readonly align 8 %3)
  %15 = icmp ne i16 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %4
  %17 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 %14, ptr %17, align 2
  %18 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 24, i1 false)
  ret void

19:                                               ; preds = %4
  %20 = call fastcc { ptr, i64 } @"io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten"(ptr nonnull readonly align 8 %9)
  %21 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  store i16 0, ptr %21, align 2
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  store { ptr, i64 } %20, ptr %22, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_6241(ptr nonnull readonly align 2 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i8, align 1
  store i8 0, ptr %3, align 1
  store ptr %0, ptr %2, align 8
  call void asm sideeffect "", "m,~{memory},~{dirflag},~{fpsr},~{flags}"(ptr %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fmt.bufPrint__anon_6242(ptr noalias nonnull sret({ { ptr, i64 }, i16, [6 x i8] }) %0, ptr nonnull align 1 %1, i64 %2, ptr nonnull readonly align 8 %3) unnamed_addr #0 {
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %7 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %8 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %9 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %10 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %11 = insertvalue { ptr, i64 } %10, i64 %2, 1
  %12 = extractvalue { ptr, i64 } %11, 0
  %13 = extractvalue { ptr, i64 } %11, 1
  call fastcc void @io.fixed_buffer_stream.fixedBufferStream__anon_6499(ptr sret(%"io.fixed_buffer_stream.FixedBufferStream([]u8)") %8, ptr nonnull align 1 %12, i64 %13)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %8, i64 24, i1 false)
  call fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).writer"(ptr sret(%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))") %7, ptr nonnull align 8 %9)
  %14 = call fastcc i16 @fmt.format__anon_6559(ptr nonnull readonly align 8 %7, ptr nonnull readonly align 8 %3)
  %15 = icmp ne i16 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %4
  %17 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 %14, ptr %17, align 2
  %18 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 24, i1 false)
  ret void

19:                                               ; preds = %4
  %20 = call fastcc { ptr, i64 } @"io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten"(ptr nonnull readonly align 8 %9)
  %21 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  store i16 0, ptr %21, align 2
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  store { ptr, i64 } %20, ptr %22, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @debug.updateSegfaultHandler(ptr readonly align 8 %0) unnamed_addr #0 {
  %2 = call fastcc i16 @os.sigaction(i6 11, ptr noalias readonly align 8 %0, ptr noalias align 8 null)
  %3 = icmp ne i16 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  ret i16 %2

5:                                                ; preds = %1
  %6 = call fastcc i16 @os.sigaction(i6 4, ptr noalias readonly align 8 %0, ptr noalias align 8 null)
  %7 = icmp ne i16 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  ret i16 %6

9:                                                ; preds = %5
  %10 = call fastcc i16 @os.sigaction(i6 7, ptr noalias readonly align 8 %0, ptr noalias align 8 null)
  %11 = icmp ne i16 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  ret i16 %10

13:                                               ; preds = %9
  %14 = call fastcc i16 @os.sigaction(i6 8, ptr noalias readonly align 8 %0, ptr noalias align 8 null)
  %15 = icmp ne i16 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  ret i16 %14

17:                                               ; preds = %13
  ret i16 0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @Thread.Mutex.FutexImpl.lock(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  store ptr %0, ptr %7, align 8
  %8 = load ptr, ptr %7, align 8
  store ptr %8, ptr %6, align 8
  %9 = load ptr, ptr %6, align 8
  %10 = getelementptr inbounds %Thread.Mutex.FutexImpl, ptr %9, i32 0, i32 0
  store ptr %10, ptr %5, align 8
  %11 = load ptr, ptr %5, align 8
  store ptr %11, ptr %4, align 8
  %12 = load ptr, ptr %4, align 8
  store ptr %12, ptr %3, align 8
  %13 = load ptr, ptr %3, align 8
  %14 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %13, i32 0, i32 0
  %15 = call i32 @llvm.x86.atomic.bts.i32(ptr %14, i8 0)
  %16 = icmp ne i32 %15, 0
  %17 = icmp eq i1 %16, false
  %18 = xor i1 %17, true
  br i1 %18, label %20, label %22

19:                                               ; preds = %22, %20
  ret void

20:                                               ; preds = %1
  store ptr %0, ptr %2, align 8
  %21 = load ptr, ptr %2, align 8
  call fastcc void @Thread.Mutex.FutexImpl.lockSlow(ptr nonnull align 4 %21)
  br label %19

22:                                               ; preds = %1
  br label %19
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @io.getStdErrHandle() unnamed_addr #0 {
  ret i32 2
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @Thread.LinuxThreadImpl.getCurrentId() unnamed_addr #0 {
  %1 = alloca { i32, i8, [3 x i8] }, align 4
  %2 = alloca { i32, i8, [3 x i8] }, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 @Thread.LinuxThreadImpl.tls_thread_id, i64 8, i1 false)
  %3 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %2, i32 0, i32 1
  %4 = load i8, ptr %3, align 1
  %5 = icmp ne i8 %4, 0
  br i1 %5, label %8, label %11

6:                                                ; preds = %8
  %7 = phi i32 [ %10, %8 ]
  ret i32 %7

8:                                                ; preds = %0
  %9 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %2, i32 0, i32 0
  %10 = load i32, ptr %9, align 4
  br label %6

11:                                               ; preds = %0
  %12 = call fastcc i32 @os.linux.gettid()
  %13 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %1, i32 0, i32 0
  store i32 %12, ptr %13, align 4
  %14 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %1, i32 0, i32 1
  store i8 1, ptr %14, align 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 @Thread.LinuxThreadImpl.tls_thread_id, ptr align 4 %1, i64 8, i1 false)
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.format__anon_6322(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 4 %1) unnamed_addr #0 {
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %0, i64 4, i1 false)
  %5 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %4, ptr nonnull readonly align 1 @debug.panicImpl__anon_6072, i64 7)
  %6 = icmp ne i16 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  ret i16 %5

8:                                                ; preds = %2
  %9 = getelementptr inbounds { i32 }, ptr %1, i32 0, i32 0
  %10 = load i32, ptr %9, align 4
  %11 = call fastcc i16 @fmt.formatType__anon_6371(i32 %10, ptr nonnull readonly align 8 @192, ptr nonnull readonly align 4 %0, i64 3)
  %12 = icmp ne i16 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  ret i16 %11

14:                                               ; preds = %8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %0, i64 4, i1 false)
  %15 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %3, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @debug.panicImpl__anon_6072, i64 9), i64 8)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  ret i16 %15

18:                                               ; preds = %14
  ret i16 0
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { i64, i16, [6 x i8] }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %7 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %8 = alloca i64, align 8
  %9 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %10 = insertvalue { ptr, i64 } %9, i64 %2, 1
  store i64 0, ptr %8, align 8
  br label %12

11:                                               ; preds = %25
  ret i16 0

12:                                               ; preds = %16, %3
  %13 = load i64, ptr %8, align 8
  %14 = extractvalue { ptr, i64 } %10, 1
  %15 = icmp ne i64 %13, %14
  br i1 %15, label %17, label %25

16:                                               ; preds = %55
  br label %12

17:                                               ; preds = %12
  %18 = load i64, ptr %8, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %7, ptr align 4 %0, i64 4, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %7, i64 4, i1 false)
  store { ptr, i64 } %10, ptr %5, align 8
  %19 = load i64, ptr %8, align 8
  %20 = load { ptr, i64 }, ptr %5, align 8
  %21 = extractvalue { ptr, i64 } %20, 0
  %22 = getelementptr inbounds i8, ptr %21, i64 %19
  %23 = extractvalue { ptr, i64 } %20, 1
  %24 = icmp ule i64 %19, %23
  br i1 %24, label %30, label %31

25:                                               ; preds = %12
  br label %11

26:                                               ; preds = %30
  %27 = sub nuw i64 %23, %19
  %28 = extractvalue { ptr, i64 } %20, 1
  %29 = icmp ule i64 %23, %28
  br i1 %29, label %34, label %35

30:                                               ; preds = %17
  br label %26

31:                                               ; preds = %17
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %19, i64 %23)
  unreachable

32:                                               ; preds = %34
  %33 = icmp ule i64 %19, %23
  br i1 %33, label %44, label %45

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @builtin.panicOutOfBounds(i64 %23, i64 %28)
  unreachable

36:                                               ; preds = %44
  %37 = insertvalue { ptr, i64 } poison, ptr %22, 0
  %38 = insertvalue { ptr, i64 } %37, i64 %27, 1
  %39 = extractvalue { ptr, i64 } %38, 0
  %40 = extractvalue { ptr, i64 } %38, 1
  call fastcc void @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).write"(ptr sret({ i64, i16, [6 x i8] }) %4, ptr nonnull readonly align 4 %6, ptr nonnull readonly align 1 %39, i64 %40)
  %41 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %4, i32 0, i32 1
  %42 = load i16, ptr %41, align 2
  %43 = icmp ne i16 %42, 0
  br i1 %43, label %46, label %49

44:                                               ; preds = %32
  br label %36

45:                                               ; preds = %32
  call fastcc void @builtin.panicOutOfBounds(i64 %19, i64 %23)
  unreachable

46:                                               ; preds = %36
  %47 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %4, i32 0, i32 1
  %48 = load i16, ptr %47, align 2
  ret i16 %48

49:                                               ; preds = %36
  %50 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %4, i32 0, i32 0
  %51 = load i64, ptr %50, align 8
  %52 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %18, i64 %51)
  %53 = extractvalue { i64, i1 } %52, 1
  br i1 %53, label %54, label %55

54:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %49
  %56 = extractvalue { i64, i1 } %52, 0
  store i64 %56, ptr %8, align 8
  br label %16
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatType__anon_6371(i32 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2, i64 %3) unnamed_addr #0 {
  %5 = call fastcc i16 @fmt.formatValue__anon_6587(i32 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %5
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @os.raise(i8 %0) unnamed_addr #0 {
  %2 = alloca [6 x i64], align 8
  %3 = alloca [32 x i32], align 4
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 128, i1 false)
  %4 = ptrtoint ptr %3 to i64
  %5 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 0
  store i64 1296236545, ptr %5, align 8
  %6 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 1
  store i64 %4, ptr %6, align 8
  %7 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 2
  store i64 128, ptr %7, align 8
  %8 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 3
  store i64 0, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 4
  store i64 0, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %2, i64 0, i64 5
  store i64 0, ptr %10, align 8
  %11 = ptrtoint ptr %2 to i64
  %12 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %11, i64 0)
  call fastcc void @os.sigprocmask(i32 0, ptr noalias readonly align 4 @os.linux.app_mask, ptr noalias align 4 %3)
  %13 = call fastcc i32 @os.linux.gettid()
  %14 = zext i8 %0 to i32
  %15 = call fastcc i64 @os.linux.tkill(i32 %13, i32 %14)
  call fastcc void @os.sigprocmask(i32 2, ptr noalias readonly align 4 %3, ptr noalias align 4 null)
  %16 = call fastcc i16 @os.linux.getErrno(i64 %15)
  switch i16 %16, label %17 [
    i16 0, label %19
  ]

17:                                               ; preds = %1
  %18 = call fastcc i16 @os.unexpectedErrno(i16 %16)
  ret i16 %18

19:                                               ; preds = %1
  ret i16 0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @os.sigprocmask(i32 %0, ptr noalias readonly align 4 %1, ptr noalias align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i64 @os.linux.sigprocmask(i32 %0, ptr noalias readonly align 4 %1, ptr noalias align 4 %2)
  %5 = call fastcc i16 @os.linux.getErrno(i64 %4)
  switch i16 %5, label %6 [
    i16 0, label %7
    i16 14, label %8
    i16 22, label %9
  ]

6:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @206)
  unreachable

7:                                                ; preds = %3
  ret void

8:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @206)
  unreachable

9:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @206)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @os.sigaction(i6 %0, ptr noalias readonly align 8 %1, ptr noalias align 8 %2) unnamed_addr #0 {
  %4 = call fastcc i64 @os.linux.sigaction(i6 %0, ptr noalias readonly align 8 %1, ptr noalias align 8 %2)
  %5 = call fastcc i16 @os.linux.getErrno(i64 %4)
  switch i16 %5, label %6 [
    i16 0, label %7
    i16 22, label %8
    i16 38, label %8
  ]

6:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @207)
  unreachable

7:                                                ; preds = %3
  ret i16 0

8:                                                ; preds = %3, %3
  ret i16 18
}

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @builtin.panicUnwrapError(ptr align 8 %0, i16 %1) unnamed_addr #2 {
  %3 = alloca { i64, i8, [7 x i8] }, align 8
  %4 = alloca { { ptr, i64 } }, align 8
  %5 = call fastcc ptr @llvm.returnaddress(i32 0)
  %6 = ptrtoint ptr %5 to i64
  %7 = load ptr, ptr @__zig_err_name_table, align 8
  %8 = getelementptr inbounds { ptr, i64 }, ptr %7, i16 %1
  %9 = load { ptr, i64 }, ptr %8, align 8
  %10 = getelementptr inbounds { { ptr, i64 } }, ptr %4, i32 0, i32 0
  store { ptr, i64 } %9, ptr %10, align 8
  %11 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 0
  store i64 %6, ptr %11, align 8
  %12 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 1
  store i8 1, ptr %12, align 1
  call fastcc void @debug.panicExtra__anon_6675(ptr align 8 %0, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @os.linux.gettid() unnamed_addr #0 {
  %1 = call fastcc i64 @os.linux.x86_64.syscall0(i64 186)
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.tkill(i32 %0, i32 %1) unnamed_addr #0 {
  %3 = sext i32 %0 to i64
  %4 = sext i32 %1 to i64
  %5 = call fastcc i64 @os.linux.x86_64.syscall2(i64 200, i64 %3, i64 %4)
  ret i64 %5
}

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @os.exit(i8 %0) unnamed_addr #7 {
  %2 = zext i8 %0 to i32
  call fastcc void @os.linux.exit_group(i32 %2)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.format__anon_6381(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = getelementptr inbounds { { ptr, i64 } }, ptr %1, i32 0, i32 0
  %5 = load { ptr, i64 }, ptr %4, align 8
  %6 = extractvalue { ptr, i64 } %5, 0
  %7 = extractvalue { ptr, i64 } %5, 1
  %8 = call fastcc i16 @fmt.formatType__anon_6413(ptr nonnull readonly align 1 %6, i64 %7, ptr nonnull readonly align 8 @194, ptr nonnull readonly align 4 %0, i64 3)
  %9 = icmp ne i16 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  ret i16 %8

11:                                               ; preds = %2
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %0, i64 4, i1 false)
  %12 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %3, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @debug.panicImpl__anon_6074, i64 3), i64 1)
  %13 = icmp ne i16 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %11
  ret i16 %12

15:                                               ; preds = %11
  ret i16 0
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatType__anon_6413(ptr nonnull readonly align 1 %0, i64 %1, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 4 %3, i64 %4) unnamed_addr #0 {
  %6 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %7 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %8 = insertvalue { ptr, i64 } %7, i64 %1, 1
  %9 = icmp eq i64 %4, 0
  br i1 %9, label %14, label %16

10:                                               ; preds = %16
  %11 = extractvalue { ptr, i64 } %8, 0
  %12 = extractvalue { ptr, i64 } %8, 1
  %13 = call fastcc i16 @fmt.formatBuf__anon_6593(ptr nonnull readonly align 1 %11, i64 %12, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 4 %3)
  ret i16 %13

14:                                               ; preds = %5
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %3, i64 4, i1 false)
  %15 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %6, ptr nonnull readonly align 1 @fmt.formatType__anon_6413__anon_6749, i64 7)
  ret i16 %15

16:                                               ; preds = %5
  br label %10
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6418"(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %2 = call fastcc i16 @fmt.format__anon_6750(ptr nonnull readonly align 4 %0)
  ret i16 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc void @debug.assert(i1 %0) unnamed_addr #0 {
  %2 = xor i1 %0, true
  br i1 %2, label %4, label %5

3:                                                ; preds = %5
  ret void

4:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @208)
  unreachable

5:                                                ; preds = %1
  br label %3
}

; Function Attrs: nounwind uwtable
define internal fastcc void @Thread.Mutex.FutexImpl.unlock(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  store ptr %0, ptr %5, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %Thread.Mutex.FutexImpl, ptr %6, i32 0, i32 0
  store ptr %7, ptr %4, align 8
  %8 = load ptr, ptr %4, align 8
  store ptr %8, ptr %3, align 8
  %9 = load ptr, ptr %3, align 8
  %10 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %9, i32 0, i32 0
  %11 = atomicrmw xchg ptr %10, i32 0 release, align 4
  %12 = icmp ne i32 %11, 0
  call fastcc void @debug.assert(i1 %12)
  %13 = icmp eq i32 %11, 3
  br i1 %13, label %15, label %18

14:                                               ; preds = %18, %15
  ret void

15:                                               ; preds = %1
  store ptr %0, ptr %2, align 8
  %16 = load ptr, ptr %2, align 8
  %17 = getelementptr inbounds %Thread.Mutex.FutexImpl, ptr %16, i32 0, i32 0
  call fastcc void @Thread.Futex.wake(ptr nonnull readonly align 4 %17, i32 1)
  br label %14

18:                                               ; preds = %1
  br label %14
}

; Function Attrs: nounwind uwtable
define internal fastcc void @"atomic.Atomic.Atomic(u32).init"(ptr noalias nonnull sret(%"atomic.Atomic.Atomic(u32)") %0, i32 %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: cold nounwind uwtable
define internal fastcc void @Thread.Futex.wait(ptr nonnull readonly align 4 %0, i32 %1) unnamed_addr #8 {
  %3 = call fastcc i16 @Thread.Futex.LinuxImpl.wait(ptr nonnull readonly align 4 %0, i32 %1, ptr nonnull readonly align 8 @209)
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %6, label %7

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %2
  br label %5

7:                                                ; preds = %2
  switch i16 %3, label %8 [
    i16 25, label %9
  ]

8:                                                ; preds = %7
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6237, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @210)
  unreachable

9:                                                ; preds = %7
  call fastcc void @builtin.panicUnwrapError(ptr align 8 null, i16 %3)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.format__anon_6449(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %2 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %0, i64 4, i1 false)
  %3 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %2, ptr nonnull readonly align 1 @debug.panicImpl__anon_6076, i64 35)
  %4 = icmp ne i16 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  ret i16 %3

6:                                                ; preds = %1
  ret i16 0
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.format__anon_6515(ptr nonnull readonly align 8 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %3 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %4 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %0, i64 8, i1 false)
  %5 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %4, ptr nonnull readonly align 1 @builtin.panicOutOfBounds__anon_4339, i64 27)
  %6 = icmp ne i16 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  ret i16 %5

8:                                                ; preds = %2
  %9 = getelementptr inbounds { i64, i64 }, ptr %1, i32 0, i32 0
  %10 = load i64, ptr %9, align 8
  %11 = call fastcc i16 @fmt.formatType__anon_6549(i64 %10, ptr nonnull readonly align 8 @196, ptr nonnull readonly align 8 %0, i64 3)
  %12 = icmp ne i16 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  ret i16 %11

14:                                               ; preds = %8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %0, i64 8, i1 false)
  %15 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %3, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @builtin.panicOutOfBounds__anon_4339, i64 30), i64 6)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  ret i16 %15

18:                                               ; preds = %14
  %19 = getelementptr inbounds { i64, i64 }, ptr %1, i32 0, i32 1
  %20 = load i64, ptr %19, align 8
  %21 = call fastcc i16 @fmt.formatType__anon_6549(i64 %20, ptr nonnull readonly align 8 @196, ptr nonnull readonly align 8 %0, i64 3)
  %22 = icmp ne i16 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %18
  ret i16 %21

24:                                               ; preds = %18
  ret i16 0
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { i64, i16, [6 x i8] }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %7 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %8 = alloca i64, align 8
  %9 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %10 = insertvalue { ptr, i64 } %9, i64 %2, 1
  store i64 0, ptr %8, align 8
  br label %12

11:                                               ; preds = %25
  ret i16 0

12:                                               ; preds = %16, %3
  %13 = load i64, ptr %8, align 8
  %14 = extractvalue { ptr, i64 } %10, 1
  %15 = icmp ne i64 %13, %14
  br i1 %15, label %17, label %25

16:                                               ; preds = %55
  br label %12

17:                                               ; preds = %12
  %18 = load i64, ptr %8, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %0, i64 8, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %7, i64 8, i1 false)
  store { ptr, i64 } %10, ptr %5, align 8
  %19 = load i64, ptr %8, align 8
  %20 = load { ptr, i64 }, ptr %5, align 8
  %21 = extractvalue { ptr, i64 } %20, 0
  %22 = getelementptr inbounds i8, ptr %21, i64 %19
  %23 = extractvalue { ptr, i64 } %20, 1
  %24 = icmp ule i64 %19, %23
  br i1 %24, label %30, label %31

25:                                               ; preds = %12
  br label %11

26:                                               ; preds = %30
  %27 = sub nuw i64 %23, %19
  %28 = extractvalue { ptr, i64 } %20, 1
  %29 = icmp ule i64 %23, %28
  br i1 %29, label %34, label %35

30:                                               ; preds = %17
  br label %26

31:                                               ; preds = %17
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %19, i64 %23)
  unreachable

32:                                               ; preds = %34
  %33 = icmp ule i64 %19, %23
  br i1 %33, label %44, label %45

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @builtin.panicOutOfBounds(i64 %23, i64 %28)
  unreachable

36:                                               ; preds = %44
  %37 = insertvalue { ptr, i64 } poison, ptr %22, 0
  %38 = insertvalue { ptr, i64 } %37, i64 %27, 1
  %39 = extractvalue { ptr, i64 } %38, 0
  %40 = extractvalue { ptr, i64 } %38, 1
  call fastcc void @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).write"(ptr sret({ i64, i16, [6 x i8] }) %4, ptr nonnull readonly align 8 %6, ptr nonnull readonly align 1 %39, i64 %40)
  %41 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %4, i32 0, i32 1
  %42 = load i16, ptr %41, align 2
  %43 = icmp ne i16 %42, 0
  br i1 %43, label %46, label %49

44:                                               ; preds = %32
  br label %36

45:                                               ; preds = %32
  call fastcc void @builtin.panicOutOfBounds(i64 %19, i64 %23)
  unreachable

46:                                               ; preds = %36
  %47 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %4, i32 0, i32 1
  %48 = load i16, ptr %47, align 2
  ret i16 %48

49:                                               ; preds = %36
  %50 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %4, i32 0, i32 0
  %51 = load i64, ptr %50, align 8
  %52 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %18, i64 %51)
  %53 = extractvalue { i64, i1 } %52, 1
  br i1 %53, label %54, label %55

54:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %49
  %56 = extractvalue { i64, i1 } %52, 0
  store i64 %56, ptr %8, align 8
  br label %16
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatType__anon_6549(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2, i64 %3) unnamed_addr #0 {
  %5 = call fastcc i16 @fmt.formatValue__anon_6764(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2)
  ret i16 %5
}

; Function Attrs: nounwind uwtable
define internal fastcc void @io.fixed_buffer_stream.fixedBufferStream__anon_6499(ptr noalias nonnull sret(%"io.fixed_buffer_stream.FixedBufferStream([]u8)") %0, ptr nonnull align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %5 = insertvalue { ptr, i64 } %4, i64 %2, 1
  %6 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %0, i32 0, i32 0
  store { ptr, i64 } %5, ptr %6, align 8
  %7 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %0, i32 0, i32 1
  store i64 0, ptr %7, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).writer"(ptr noalias nonnull sret(%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))") %0, ptr nonnull align 8 %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", ptr %0, i32 0, i32 0
  store ptr %1, ptr %3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc { ptr, i64 } @"io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten"(ptr nonnull readonly align 8 %0) unnamed_addr #0 {
  %2 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %0, i64 24, i1 false)
  %3 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %2, i32 0, i32 0
  %4 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %0, i32 0, i32 1
  %5 = load i64, ptr %4, align 8
  %6 = load { ptr, i64 }, ptr %3, align 8
  %7 = extractvalue { ptr, i64 } %6, 0
  %8 = getelementptr inbounds i8, ptr %7, i64 0
  %9 = icmp ule i64 0, %5
  br i1 %9, label %13, label %14

10:                                               ; preds = %13
  %11 = extractvalue { ptr, i64 } %6, 1
  %12 = icmp ule i64 %5, %11
  br i1 %12, label %17, label %18

13:                                               ; preds = %1
  br label %10

14:                                               ; preds = %1
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %5)
  unreachable

15:                                               ; preds = %17
  %16 = icmp ule i64 0, %5
  br i1 %16, label %22, label %23

17:                                               ; preds = %10
  br label %15

18:                                               ; preds = %10
  call fastcc void @builtin.panicOutOfBounds(i64 %5, i64 %11)
  unreachable

19:                                               ; preds = %22
  %20 = insertvalue { ptr, i64 } poison, ptr %8, 0
  %21 = insertvalue { ptr, i64 } %20, i64 %5, 1
  ret { ptr, i64 } %21

22:                                               ; preds = %15
  br label %19

23:                                               ; preds = %15
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %5)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.format__anon_6559(ptr nonnull readonly align 8 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %3 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %4 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %0, i64 8, i1 false)
  %5 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %4, ptr nonnull readonly align 1 @builtin.panicStartGreaterThanEnd__anon_4344, i64 12)
  %6 = icmp ne i16 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  ret i16 %5

8:                                                ; preds = %2
  %9 = getelementptr inbounds { i64, i64 }, ptr %1, i32 0, i32 0
  %10 = load i64, ptr %9, align 8
  %11 = call fastcc i16 @fmt.formatType__anon_6549(i64 %10, ptr nonnull readonly align 8 @197, ptr nonnull readonly align 8 %0, i64 3)
  %12 = icmp ne i16 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  ret i16 %11

14:                                               ; preds = %8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %0, i64 8, i1 false)
  %15 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %3, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @builtin.panicStartGreaterThanEnd__anon_4344, i64 15), i64 26)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  ret i16 %15

18:                                               ; preds = %14
  %19 = getelementptr inbounds { i64, i64 }, ptr %1, i32 0, i32 1
  %20 = load i64, ptr %19, align 8
  %21 = call fastcc i16 @fmt.formatType__anon_6549(i64 %20, ptr nonnull readonly align 8 @197, ptr nonnull readonly align 8 %0, i64 3)
  %22 = icmp ne i16 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %18
  ret i16 %21

24:                                               ; preds = %18
  ret i16 0
}

; Function Attrs: cold nounwind uwtable
define internal fastcc void @Thread.Mutex.FutexImpl.lockSlow(ptr nonnull align 4 %0) unnamed_addr #8 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  store ptr %0, ptr %9, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %Thread.Mutex.FutexImpl, ptr %10, i32 0, i32 0
  store ptr %11, ptr %7, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %12, i32 0, i32 0
  %14 = load atomic i32, ptr %13 monotonic, align 4
  store i32 %14, ptr %8, align 4
  %15 = load i32, ptr %8, align 4
  %16 = icmp eq i32 %15, 3
  br i1 %16, label %18, label %21

17:                                               ; preds = %21, %18
  br label %23

18:                                               ; preds = %1
  store ptr %0, ptr %6, align 8
  %19 = load ptr, ptr %6, align 8
  %20 = getelementptr inbounds %Thread.Mutex.FutexImpl, ptr %19, i32 0, i32 0
  call fastcc void @Thread.Futex.wait(ptr nonnull readonly align 4 %20, i32 3)
  br label %17

21:                                               ; preds = %1
  br label %17

22:                                               ; preds = %35
  ret void

23:                                               ; preds = %31, %17
  store ptr %0, ptr %5, align 8
  %24 = load ptr, ptr %5, align 8
  %25 = getelementptr inbounds %Thread.Mutex.FutexImpl, ptr %24, i32 0, i32 0
  store ptr %25, ptr %4, align 8
  %26 = load ptr, ptr %4, align 8
  store ptr %26, ptr %3, align 8
  %27 = load ptr, ptr %3, align 8
  %28 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %27, i32 0, i32 0
  %29 = atomicrmw xchg ptr %28, i32 3 acquire, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %32, label %35

31:                                               ; preds = %32
  br label %23

32:                                               ; preds = %23
  store ptr %0, ptr %2, align 8
  %33 = load ptr, ptr %2, align 8
  %34 = getelementptr inbounds %Thread.Mutex.FutexImpl, ptr %33, i32 0, i32 0
  call fastcc void @Thread.Futex.wait(ptr nonnull readonly align 4 %34, i32 3)
  br label %31

35:                                               ; preds = %23
  br label %22
}

; Function Attrs: nounwind uwtable
define internal fastcc void @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).write"(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull readonly align 4 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %7 = insertvalue { ptr, i64 } %6, i64 %3, 1
  %8 = getelementptr inbounds %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", ptr %1, i32 0, i32 0
  %9 = extractvalue { ptr, i64 } %7, 0
  %10 = extractvalue { ptr, i64 } %7, 1
  call fastcc void @fs.file.File.write(ptr sret({ i64, i16, [6 x i8] }) %5, ptr nonnull readonly align 4 %8, ptr nonnull readonly align 1 %9, i64 %10)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @unicode.utf8ByteSequenceLength(ptr noalias nonnull sret({ i16, i3, [1 x i8] }) %0, i8 %1) unnamed_addr #0 {
  switch i8 %1, label %4 [
  ]

3:                                                ; preds = %24, %23, %18, %13, %8
  ret void

4:                                                ; preds = %2
  %5 = icmp uge i8 %1, 0
  %6 = icmp ule i8 %1, 127
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @198, i64 4, i1 false)
  br label %3

9:                                                ; preds = %4
  %10 = icmp uge i8 %1, -64
  %11 = icmp ule i8 %1, -33
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @199, i64 4, i1 false)
  br label %3

14:                                               ; preds = %9
  %15 = icmp uge i8 %1, -32
  %16 = icmp ule i8 %1, -17
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @200, i64 4, i1 false)
  br label %3

19:                                               ; preds = %14
  %20 = icmp uge i8 %1, -16
  %21 = icmp ule i8 %1, -9
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %19
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @201, i64 4, i1 false)
  br label %3

24:                                               ; preds = %19
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @202, i64 4, i1 false)
  br label %3
}

; Function Attrs: nounwind uwtable
define internal fastcc void @unicode.utf8CountCodepoints(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { i64, i16, [6 x i8] }, align 8
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = alloca { i21, i16, [2 x i8] }, align 4
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca { i64, i16, [6 x i8] }, align 8
  %9 = alloca { i16, i3, [1 x i8] }, align 2
  %10 = alloca { ptr, i64 }, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %14 = insertvalue { ptr, i64 } %13, i64 %2, 1
  store i64 0, ptr %12, align 8
  store i64 0, ptr %11, align 8
  br label %19

15:                                               ; preds = %25
  %16 = load i64, ptr %12, align 8
  %17 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %4, i32 0, i32 1
  store i16 0, ptr %17, align 2
  %18 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %4, i32 0, i32 0
  store i64 %16, ptr %18, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %4, i64 16, i1 false)
  ret void

19:                                               ; preds = %23, %3
  %20 = load i64, ptr %11, align 8
  %21 = extractvalue { ptr, i64 } %14, 1
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %24, label %25

23:                                               ; preds = %70
  br label %19

24:                                               ; preds = %19
  br label %30

25:                                               ; preds = %19
  br label %15

26:                                               ; preds = %48, %59
  %27 = load i64, ptr %11, align 8
  %28 = extractvalue { ptr, i64 } %14, 1
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %71, label %75

30:                                               ; preds = %34, %24
  %31 = load i64, ptr %11, align 8
  %32 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %31, i64 8)
  %33 = extractvalue { i64, i1 } %32, 1
  br i1 %33, label %35, label %36

34:                                               ; preds = %68
  br label %30

35:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

36:                                               ; preds = %30
  %37 = extractvalue { i64, i1 } %32, 0
  %38 = extractvalue { ptr, i64 } %14, 1
  %39 = icmp ule i64 %37, %38
  br i1 %39, label %40, label %48

40:                                               ; preds = %36
  store { ptr, i64 } %14, ptr %10, align 8
  %41 = load i64, ptr %11, align 8
  %42 = load { ptr, i64 }, ptr %10, align 8
  %43 = extractvalue { ptr, i64 } %42, 0
  %44 = getelementptr inbounds i8, ptr %43, i64 %41
  %45 = add nuw i64 %41, 8
  %46 = extractvalue { ptr, i64 } %42, 1
  %47 = icmp ule i64 %45, %46
  br i1 %47, label %53, label %54

48:                                               ; preds = %36
  br label %26

49:                                               ; preds = %53
  %50 = call fastcc i64 @mem.readIntNative__anon_6667(ptr nonnull readonly align 1 %44)
  %51 = and i64 %50, -9187201950435737472
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %59, label %60

53:                                               ; preds = %40
  br label %49

54:                                               ; preds = %40
  call fastcc void @builtin.panicOutOfBounds(i64 %45, i64 %46)
  unreachable

55:                                               ; preds = %60
  %56 = load i64, ptr %12, align 8
  %57 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %56, i64 8)
  %58 = extractvalue { i64, i1 } %57, 1
  br i1 %58, label %61, label %62

59:                                               ; preds = %49
  br label %26

60:                                               ; preds = %49
  br label %55

61:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %55
  %63 = extractvalue { i64, i1 } %57, 0
  store i64 %63, ptr %12, align 8
  %64 = load i64, ptr %11, align 8
  %65 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %64, i64 8)
  %66 = extractvalue { i64, i1 } %65, 1
  br i1 %66, label %67, label %68

67:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %62
  %69 = extractvalue { i64, i1 } %65, 0
  store i64 %69, ptr %11, align 8
  br label %34

70:                                               ; preds = %75, %148
  br label %23

71:                                               ; preds = %26
  %72 = load i64, ptr %11, align 8
  %73 = extractvalue { ptr, i64 } %14, 1
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %83, label %84

75:                                               ; preds = %26
  br label %70

76:                                               ; preds = %83
  %77 = extractvalue { ptr, i64 } %14, 0
  %78 = getelementptr inbounds i8, ptr %77, i64 %72
  %79 = load i8, ptr %78, align 1
  call fastcc void @unicode.utf8ByteSequenceLength(ptr sret({ i16, i3, [1 x i8] }) %9, i8 %79)
  %80 = getelementptr inbounds { i16, i3, [1 x i8] }, ptr %9, i32 0, i32 0
  %81 = load i16, ptr %80, align 2
  %82 = icmp ne i16 %81, 0
  br i1 %82, label %85, label %90

83:                                               ; preds = %71
  br label %76

84:                                               ; preds = %71
  call fastcc void @builtin.panicOutOfBounds(i64 %72, i64 %73)
  unreachable

85:                                               ; preds = %76
  %86 = getelementptr inbounds { i16, i3, [1 x i8] }, ptr %9, i32 0, i32 0
  %87 = load i16, ptr %86, align 2
  %88 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %8, i32 0, i32 1
  store i16 %87, ptr %88, align 2
  %89 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %8, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %8, i64 16, i1 false)
  ret void

90:                                               ; preds = %76
  %91 = getelementptr inbounds { i16, i3, [1 x i8] }, ptr %9, i32 0, i32 1
  %92 = load i3, ptr %91, align 1
  %93 = load i64, ptr %11, align 8
  %94 = zext i3 %92 to i64
  %95 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %93, i64 %94)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %104
  switch i3 %92, label %110 [
    i3 1, label %120
  ]

98:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %90
  %100 = extractvalue { i64, i1 } %95, 0
  %101 = extractvalue { ptr, i64 } %14, 1
  %102 = icmp ugt i64 %100, %101
  br i1 %102, label %103, label %104

103:                                              ; preds = %99
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @203, i64 16, i1 false)
  ret void

104:                                              ; preds = %99
  br label %97

105:                                              ; preds = %140, %120
  %106 = load i64, ptr %11, align 8
  %107 = zext i3 %92 to i64
  %108 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %106, i64 %107)
  %109 = extractvalue { i64, i1 } %108, 1
  br i1 %109, label %141, label %142

110:                                              ; preds = %97
  store { ptr, i64 } %14, ptr %7, align 8
  %111 = load i64, ptr %11, align 8
  %112 = load { ptr, i64 }, ptr %7, align 8
  %113 = extractvalue { ptr, i64 } %112, 0
  %114 = getelementptr inbounds i8, ptr %113, i64 %111
  %115 = zext i3 %92 to i64
  %116 = add nuw i64 %111, %115
  %117 = zext i3 %92 to i64
  %118 = extractvalue { ptr, i64 } %112, 1
  %119 = icmp ule i64 %116, %118
  br i1 %119, label %123, label %124

120:                                              ; preds = %97
  br label %105

121:                                              ; preds = %123
  %122 = icmp ule i64 %111, %116
  br i1 %122, label %133, label %134

123:                                              ; preds = %110
  br label %121

124:                                              ; preds = %110
  call fastcc void @builtin.panicOutOfBounds(i64 %116, i64 %118)
  unreachable

125:                                              ; preds = %133
  %126 = insertvalue { ptr, i64 } poison, ptr %114, 0
  %127 = insertvalue { ptr, i64 } %126, i64 %117, 1
  %128 = extractvalue { ptr, i64 } %127, 0
  %129 = extractvalue { ptr, i64 } %127, 1
  call fastcc void @unicode.utf8Decode(ptr sret({ i21, i16, [2 x i8] }) %6, ptr nonnull readonly align 1 %128, i64 %129)
  %130 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %6, i32 0, i32 1
  %131 = load i16, ptr %130, align 2
  %132 = icmp ne i16 %131, 0
  br i1 %132, label %135, label %140

133:                                              ; preds = %121
  br label %125

134:                                              ; preds = %121
  call fastcc void @builtin.panicOutOfBounds(i64 %111, i64 %116)
  unreachable

135:                                              ; preds = %125
  %136 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %6, i32 0, i32 1
  %137 = load i16, ptr %136, align 2
  %138 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  store i16 %137, ptr %138, align 2
  %139 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void

140:                                              ; preds = %125
  br label %105

141:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

142:                                              ; preds = %105
  %143 = extractvalue { i64, i1 } %108, 0
  store i64 %143, ptr %11, align 8
  %144 = load i64, ptr %12, align 8
  %145 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %144, i64 1)
  %146 = extractvalue { i64, i1 } %145, 1
  br i1 %146, label %147, label %148

147:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

148:                                              ; preds = %142
  %149 = extractvalue { i64, i1 } %145, 0
  store i64 %149, ptr %12, align 8
  br label %70
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @mem.readIntNative__anon_6667(ptr nonnull readonly align 1 %0) unnamed_addr #0 {
  %2 = load i64, ptr %0, align 1
  ret i64 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc void @unicode.utf8Decode(ptr noalias nonnull sret({ i21, i16, [2 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { i21, i16, [2 x i8] }, align 4
  %5 = alloca { i21, i16, [2 x i8] }, align 4
  %6 = alloca { i21, i16, [2 x i8] }, align 4
  %7 = alloca { i21, i16, [2 x i8] }, align 4
  %8 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %9 = insertvalue { ptr, i64 } %8, i64 %2, 1
  %10 = extractvalue { ptr, i64 } %9, 1
  switch i64 %10, label %12 [
    i64 1, label %13
    i64 2, label %25
    i64 3, label %28
    i64 4, label %31
  ]

11:                                               ; preds = %31, %28, %25, %16
  ret void

12:                                               ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @214)
  unreachable

13:                                               ; preds = %3
  %14 = extractvalue { ptr, i64 } %9, 1
  %15 = icmp ult i64 0, %14
  br i1 %15, label %23, label %24

16:                                               ; preds = %23
  %17 = extractvalue { ptr, i64 } %9, 0
  %18 = getelementptr inbounds i8, ptr %17, i64 0
  %19 = load i8, ptr %18, align 1
  %20 = zext i8 %19 to i21
  %21 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %7, i32 0, i32 1
  store i16 0, ptr %21, align 2
  %22 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %7, i32 0, i32 0
  store i21 %20, ptr %22, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %7, i64 8, i1 false)
  br label %11

23:                                               ; preds = %13
  br label %16

24:                                               ; preds = %13
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %14)
  unreachable

25:                                               ; preds = %3
  %26 = extractvalue { ptr, i64 } %9, 0
  %27 = extractvalue { ptr, i64 } %9, 1
  call fastcc void @unicode.utf8Decode2(ptr sret({ i21, i16, [2 x i8] }) %6, ptr nonnull readonly align 1 %26, i64 %27)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %6, i64 8, i1 false)
  br label %11

28:                                               ; preds = %3
  %29 = extractvalue { ptr, i64 } %9, 0
  %30 = extractvalue { ptr, i64 } %9, 1
  call fastcc void @unicode.utf8Decode3(ptr sret({ i21, i16, [2 x i8] }) %5, ptr nonnull readonly align 1 %29, i64 %30)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %5, i64 8, i1 false)
  br label %11

31:                                               ; preds = %3
  %32 = extractvalue { ptr, i64 } %9, 0
  %33 = extractvalue { ptr, i64 } %9, 1
  call fastcc void @unicode.utf8Decode4(ptr sret({ i21, i16, [2 x i8] }) %4, ptr nonnull readonly align 1 %32, i64 %33)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %4, i64 8, i1 false)
  br label %11
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatBuf__anon_6593(ptr nonnull readonly align 1 %0, i64 %1, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 4 %3) unnamed_addr #0 {
  %5 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %6 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %7 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %8 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %9 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %10 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %11 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %12 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %13 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %14 = alloca { i64, i16, [6 x i8] }, align 8
  %15 = alloca { i64, i8, [7 x i8] }, align 8
  %16 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %17 = insertvalue { ptr, i64 } %16, i64 %1, 1
  %18 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %18, i64 16, i1 false)
  %19 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %15, i32 0, i32 1
  %20 = load i8, ptr %19, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %23, label %31

22:                                               ; preds = %117, %62
  ret i16 0

23:                                               ; preds = %4
  %24 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %15, i32 0, i32 0
  %25 = load i64, ptr %24, align 8
  %26 = extractvalue { ptr, i64 } %17, 0
  %27 = extractvalue { ptr, i64 } %17, 1
  call fastcc void @unicode.utf8CountCodepoints(ptr sret({ i64, i16, [6 x i8] }) %14, ptr nonnull readonly align 1 %26, i64 %27)
  %28 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %14, i32 0, i32 1
  %29 = load i16, ptr %28, align 2
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %39, label %42

31:                                               ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %3, i64 4, i1 false)
  %32 = extractvalue { ptr, i64 } %17, 0
  %33 = extractvalue { ptr, i64 } %17, 1
  %34 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %5, ptr nonnull readonly align 1 %32, i64 %33)
  %35 = icmp ne i16 %34, 0
  br i1 %35, label %116, label %117

36:                                               ; preds = %42, %39
  %37 = phi i64 [ %41, %39 ], [ %43, %42 ]
  %38 = icmp ult i64 %37, %25
  br i1 %38, label %47, label %50

39:                                               ; preds = %23
  %40 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %14, i32 0, i32 0
  %41 = load i64, ptr %40, align 8
  br label %36

42:                                               ; preds = %23
  %43 = extractvalue { ptr, i64 } %17, 1
  br label %36

44:                                               ; preds = %50, %52
  %45 = phi i64 [ %53, %52 ], [ 0, %50 ]
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %57, label %61

47:                                               ; preds = %36
  %48 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %25, i64 %37)
  %49 = extractvalue { i64, i1 } %48, 1
  br i1 %49, label %51, label %52

50:                                               ; preds = %36
  br label %44

51:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %47
  %53 = extractvalue { i64, i1 } %48, 0
  br label %44

54:                                               ; preds = %61
  %55 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 2
  %56 = load i2, ptr %55, align 1
  switch i2 %56, label %63 [
    i2 0, label %64
    i2 1, label %77
    i2 -2, label %103
  ]

57:                                               ; preds = %44
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %13, ptr align 4 %3, i64 4, i1 false)
  %58 = extractvalue { ptr, i64 } %17, 0
  %59 = extractvalue { ptr, i64 } %17, 1
  %60 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %13, ptr nonnull readonly align 1 %58, i64 %59)
  ret i16 %60

61:                                               ; preds = %44
  br label %54

62:                                               ; preds = %115, %102, %76
  br label %22

63:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6237, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @204)
  unreachable

64:                                               ; preds = %54
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %12, ptr align 4 %3, i64 4, i1 false)
  %65 = extractvalue { ptr, i64 } %17, 0
  %66 = extractvalue { ptr, i64 } %17, 1
  %67 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %12, ptr nonnull readonly align 1 %65, i64 %66)
  %68 = icmp ne i16 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %64
  ret i16 %67

70:                                               ; preds = %64
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %11, ptr align 4 %3, i64 4, i1 false)
  %71 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %72 = load i8, ptr %71, align 1
  %73 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %11, i8 %72, i64 %45)
  %74 = icmp ne i16 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %70
  ret i16 %73

76:                                               ; preds = %70
  br label %62

77:                                               ; preds = %54
  %78 = udiv i64 %45, 2
  %79 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %45, i64 1)
  %80 = extractvalue { i64, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %77
  %83 = extractvalue { i64, i1 } %79, 0
  %84 = udiv i64 %83, 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %10, ptr align 4 %3, i64 4, i1 false)
  %85 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %86 = load i8, ptr %85, align 1
  %87 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %10, i8 %86, i64 %78)
  %88 = icmp ne i16 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %82
  ret i16 %87

90:                                               ; preds = %82
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %9, ptr align 4 %3, i64 4, i1 false)
  %91 = extractvalue { ptr, i64 } %17, 0
  %92 = extractvalue { ptr, i64 } %17, 1
  %93 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %9, ptr nonnull readonly align 1 %91, i64 %92)
  %94 = icmp ne i16 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %90
  ret i16 %93

96:                                               ; preds = %90
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %8, ptr align 4 %3, i64 4, i1 false)
  %97 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %98 = load i8, ptr %97, align 1
  %99 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %8, i8 %98, i64 %84)
  %100 = icmp ne i16 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %96
  ret i16 %99

102:                                              ; preds = %96
  br label %62

103:                                              ; preds = %54
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %7, ptr align 4 %3, i64 4, i1 false)
  %104 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %105 = load i8, ptr %104, align 1
  %106 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %7, i8 %105, i64 %45)
  %107 = icmp ne i16 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %103
  ret i16 %106

109:                                              ; preds = %103
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %3, i64 4, i1 false)
  %110 = extractvalue { ptr, i64 } %17, 0
  %111 = extractvalue { ptr, i64 } %17, 1
  %112 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %6, ptr nonnull readonly align 1 %110, i64 %111)
  %113 = icmp ne i16 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %109
  ret i16 %112

115:                                              ; preds = %109
  br label %62

116:                                              ; preds = %31
  ret i16 %34

117:                                              ; preds = %31
  br label %22
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %0, i8 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %6 = alloca i64, align 8
  %7 = alloca [6 x i64], align 8
  %8 = alloca [256 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %8, i8 -86, i64 256, i1 false)
  %9 = ptrtoint ptr %8 to i64
  %10 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 0
  store i64 1296236545, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 1
  store i64 %9, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 2
  store i64 256, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 3
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 4
  store i64 0, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 5
  store i64 0, ptr %15, align 8
  %16 = ptrtoint ptr %7 to i64
  %17 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %16, i64 0)
  %18 = getelementptr inbounds i8, ptr %8, i64 0
  call void @llvm.memset.p0.i64(ptr align 1 %18, i8 %1, i64 256, i1 false)
  store i64 %2, ptr %6, align 8
  br label %20

19:                                               ; preds = %31
  ret i16 0

20:                                               ; preds = %23, %3
  %21 = load i64, ptr %6, align 8
  %22 = icmp ugt i64 %21, 0
  br i1 %22, label %24, label %31

23:                                               ; preds = %57
  br label %20

24:                                               ; preds = %20
  %25 = load i64, ptr %6, align 8
  %26 = call i64 @llvm.umin.i64(i64 256, i64 %25)
  %27 = trunc i64 %26 to i9
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %0, i64 4, i1 false)
  %28 = getelementptr inbounds i8, ptr %8, i64 0
  %29 = zext i9 %27 to i64
  %30 = icmp ule i64 0, %29
  br i1 %30, label %34, label %35

31:                                               ; preds = %20
  br label %19

32:                                               ; preds = %34
  %33 = icmp ule i64 %29, 256
  br i1 %33, label %38, label %39

34:                                               ; preds = %24
  br label %32

35:                                               ; preds = %24
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %29)
  unreachable

36:                                               ; preds = %38
  %37 = icmp ule i64 0, %29
  br i1 %37, label %48, label %49

38:                                               ; preds = %32
  br label %36

39:                                               ; preds = %32
  call fastcc void @builtin.panicOutOfBounds(i64 %29, i64 256)
  unreachable

40:                                               ; preds = %48
  %41 = insertvalue { ptr, i64 } poison, ptr %28, 0
  %42 = insertvalue { ptr, i64 } %41, i64 %29, 1
  store { ptr, i64 } %42, ptr %4, align 8
  %43 = load { ptr, i64 }, ptr %4, align 8
  %44 = extractvalue { ptr, i64 } %43, 0
  %45 = extractvalue { ptr, i64 } %43, 1
  %46 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %5, ptr nonnull readonly align 1 %44, i64 %45)
  %47 = icmp ne i16 %46, 0
  br i1 %47, label %50, label %51

48:                                               ; preds = %36
  br label %40

49:                                               ; preds = %36
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %29)
  unreachable

50:                                               ; preds = %40
  ret i16 %46

51:                                               ; preds = %40
  %52 = load i64, ptr %6, align 8
  %53 = zext i9 %27 to i64
  %54 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %52, i64 %53)
  %55 = extractvalue { i64, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %51
  %58 = extractvalue { i64, i1 } %54, 0
  store i64 %58, ptr %6, align 8
  br label %23
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatInt__anon_6592(i32 %0, i8 %1, i1 %2, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 4 %4) unnamed_addr #0 {
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca [2 x i8], align 1
  %8 = alloca [2 x i8], align 1
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca [6 x i64], align 8
  %12 = alloca [33 x i8], align 1
  %13 = icmp uge i8 %1, 2
  call fastcc void @debug.assert(i1 %13)
  %14 = call fastcc i32 @math.absCast__anon_4049(i32 %0)
  call void @llvm.memset.p0.i64(ptr align 1 %12, i8 -86, i64 33, i1 false)
  %15 = ptrtoint ptr %12 to i64
  %16 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 0
  store i64 1296236545, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 1
  store i64 %15, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 2
  store i64 33, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 3
  store i64 0, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 4
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 5
  store i64 0, ptr %21, align 8
  %22 = ptrtoint ptr %11 to i64
  %23 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %22, i64 0)
  store i32 %14, ptr %10, align 4
  store i64 33, ptr %9, align 8
  %24 = icmp eq i8 %1, 10
  br i1 %24, label %29, label %30

25:                                               ; preds = %90, %53
  %26 = load i64, ptr %9, align 8
  %27 = getelementptr inbounds i8, ptr %12, i64 %26
  %28 = icmp ule i64 %26, 33
  br i1 %28, label %132, label %133

29:                                               ; preds = %5
  br label %34

30:                                               ; preds = %5
  br label %91

31:                                               ; preds = %42
  %32 = load i32, ptr %10, align 4
  %33 = icmp ult i32 %32, 10
  br i1 %33, label %54, label %58

34:                                               ; preds = %37, %29
  %35 = load i32, ptr %10, align 4
  %36 = icmp uge i32 %35, 100
  br i1 %36, label %38, label %42

37:                                               ; preds = %44
  br label %34

38:                                               ; preds = %34
  %39 = load i64, ptr %9, align 8
  %40 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %39, i64 2)
  %41 = extractvalue { i64, i1 } %40, 1
  br i1 %41, label %43, label %44

42:                                               ; preds = %34
  br label %31

43:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %38
  %45 = extractvalue { i64, i1 } %40, 0
  store i64 %45, ptr %9, align 8
  %46 = load i64, ptr %9, align 8
  %47 = getelementptr inbounds i8, ptr %12, i64 %46
  %48 = load i32, ptr %10, align 4
  %49 = urem i32 %48, 100
  %50 = zext i32 %49 to i64
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %8, i64 %50)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %47, ptr align 1 %8, i64 2, i1 false)
  %51 = load i32, ptr %10, align 4
  %52 = udiv i32 %51, 100
  store i32 %52, ptr %10, align 4
  br label %37

53:                                               ; preds = %84, %81
  br label %25

54:                                               ; preds = %31
  %55 = load i64, ptr %9, align 8
  %56 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %55, i64 1)
  %57 = extractvalue { i64, i1 } %56, 1
  br i1 %57, label %62, label %63

58:                                               ; preds = %31
  %59 = load i64, ptr %9, align 8
  %60 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %59, i64 2)
  %61 = extractvalue { i64, i1 } %60, 1
  br i1 %61, label %83, label %84

62:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %54
  %64 = extractvalue { i64, i1 } %56, 0
  store i64 %64, ptr %9, align 8
  %65 = load i64, ptr %9, align 8
  %66 = icmp ult i64 %65, 33
  br i1 %66, label %72, label %73

67:                                               ; preds = %72
  %68 = getelementptr inbounds [33 x i8], ptr %12, i64 0, i64 %65
  %69 = load i32, ptr %10, align 4
  %70 = sub i32 255, %69
  %71 = icmp ule i32 %70, 255
  br i1 %71, label %78, label %79

72:                                               ; preds = %63
  br label %67

73:                                               ; preds = %63
  call fastcc void @builtin.panicOutOfBounds(i64 %65, i64 33)
  unreachable

74:                                               ; preds = %78
  %75 = trunc i32 %69 to i8
  %76 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 48, i8 %75)
  %77 = extractvalue { i8, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %67
  br label %74

79:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @205)
  unreachable

80:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %74
  %82 = extractvalue { i8, i1 } %76, 0
  store i8 %82, ptr %68, align 1
  br label %53

83:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %58
  %85 = extractvalue { i64, i1 } %60, 0
  store i64 %85, ptr %9, align 8
  %86 = load i64, ptr %9, align 8
  %87 = getelementptr inbounds i8, ptr %12, i64 %86
  %88 = load i32, ptr %10, align 4
  %89 = zext i32 %88 to i64
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %7, i64 %89)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %87, ptr align 1 %7, i64 2, i1 false)
  br label %53

90:                                               ; preds = %128
  br label %25

91:                                               ; preds = %127, %30
  %92 = load i32, ptr %10, align 4
  %93 = zext i8 %1 to i32
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %100, label %101

95:                                               ; preds = %100
  %96 = urem i32 %92, %93
  %97 = load i64, ptr %9, align 8
  %98 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %97, i64 1)
  %99 = extractvalue { i64, i1 } %98, 1
  br i1 %99, label %102, label %103

100:                                              ; preds = %91
  br label %95

101:                                              ; preds = %91
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @205)
  unreachable

102:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %95
  %104 = extractvalue { i64, i1 } %98, 0
  store i64 %104, ptr %9, align 8
  %105 = load i64, ptr %9, align 8
  %106 = icmp ult i64 %105, 33
  br i1 %106, label %111, label %112

107:                                              ; preds = %111
  %108 = getelementptr inbounds [33 x i8], ptr %12, i64 0, i64 %105
  %109 = sub i32 255, %96
  %110 = icmp ule i32 %109, 255
  br i1 %110, label %119, label %120

111:                                              ; preds = %103
  br label %107

112:                                              ; preds = %103
  call fastcc void @builtin.panicOutOfBounds(i64 %105, i64 33)
  unreachable

113:                                              ; preds = %119
  %114 = trunc i32 %96 to i8
  %115 = call fastcc i8 @fmt.digitToChar(i8 %114, i1 %2)
  store i8 %115, ptr %108, align 1
  %116 = load i32, ptr %10, align 4
  %117 = zext i8 %1 to i32
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %125, label %126

119:                                              ; preds = %107
  br label %113

120:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @205)
  unreachable

121:                                              ; preds = %125
  %122 = udiv i32 %116, %117
  store i32 %122, ptr %10, align 4
  %123 = load i32, ptr %10, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %128, label %129

125:                                              ; preds = %113
  br label %121

126:                                              ; preds = %113
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @205)
  unreachable

127:                                              ; preds = %129
  br label %91

128:                                              ; preds = %121
  br label %90

129:                                              ; preds = %121
  br label %127

130:                                              ; preds = %132
  %131 = sub nuw i64 33, %26
  br i1 true, label %136, label %137

132:                                              ; preds = %25
  br label %130

133:                                              ; preds = %25
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %26, i64 33)
  unreachable

134:                                              ; preds = %136
  %135 = icmp ule i64 %26, 33
  br i1 %135, label %145, label %146

136:                                              ; preds = %130
  br label %134

137:                                              ; preds = %130
  call fastcc void @builtin.panicOutOfBounds(i64 33, i64 33)
  unreachable

138:                                              ; preds = %145
  %139 = insertvalue { ptr, i64 } poison, ptr %27, 0
  %140 = insertvalue { ptr, i64 } %139, i64 %131, 1
  store { ptr, i64 } %140, ptr %6, align 8
  %141 = load { ptr, i64 }, ptr %6, align 8
  %142 = extractvalue { ptr, i64 } %141, 0
  %143 = extractvalue { ptr, i64 } %141, 1
  %144 = call fastcc i16 @fmt.formatBuf__anon_6593(ptr nonnull readonly align 1 %142, i64 %143, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 4 %4)
  ret i16 %144

145:                                              ; preds = %134
  br label %138

146:                                              ; preds = %134
  call fastcc void @builtin.panicOutOfBounds(i64 %26, i64 33)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fmt.digits2(ptr noalias nonnull sret([2 x i8]) %0, i64 %1) unnamed_addr #0 {
  %3 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1, i64 2)
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

6:                                                ; preds = %2
  %7 = extractvalue { i64, i1 } %3, 0
  %8 = getelementptr inbounds i8, ptr @fmt.digits2__anon_6781, i64 %7
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %0, ptr align 1 %8, i64 2, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i8, i1 } @llvm.uadd.with.overflow.i8(i8, i8) #1

; Function Attrs: nounwind uwtable
define internal fastcc i8 @fmt.digitToChar(i8 %0, i1 %1) unnamed_addr #0 {
  %3 = alloca i8, align 1
  switch i8 %0, label %6 [
  ]

4:                                                ; preds = %35, %18
  %5 = load i8, ptr %3, align 1
  ret i8 %5

6:                                                ; preds = %2
  %7 = icmp uge i8 %0, 0
  %8 = icmp ule i8 %0, 9
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %13

10:                                               ; preds = %6
  %11 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %0, i8 48)
  %12 = extractvalue { i8, i1 } %11, 1
  br i1 %12, label %17, label %18

13:                                               ; preds = %6
  %14 = icmp uge i8 %0, 10
  %15 = icmp ule i8 %0, 35
  %16 = and i1 %14, %15
  br i1 %16, label %20, label %22

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i8, i1 } %11, 0
  store i8 %19, ptr %3, align 1
  br label %4

20:                                               ; preds = %13
  %21 = icmp eq i1 %1, true
  br i1 %21, label %27, label %28

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @213)
  unreachable

23:                                               ; preds = %28, %27
  %24 = phi i8 [ 65, %27 ], [ 97, %28 ]
  %25 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %24, i8 10)
  %26 = extractvalue { i8, i1 } %25, 1
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  br label %23

28:                                               ; preds = %20
  br label %23

29:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

30:                                               ; preds = %23
  %31 = extractvalue { i8, i1 } %25, 0
  %32 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %0, i8 %31)
  %33 = extractvalue { i8, i1 } %32, 1
  br i1 %33, label %34, label %35

34:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %30
  %36 = extractvalue { i8, i1 } %32, 0
  store i8 %36, ptr %3, align 1
  br label %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatIntValue__anon_6588(i32 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatInt__anon_6592(i32 %0, i8 10, i1 false, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatValue__anon_6587(i32 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatIntValue__anon_6588(i32 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @os.linux.getErrno(i64 %0) unnamed_addr #0 {
  %2 = icmp sgt i64 %0, -4096
  br i1 %2, label %8, label %10

3:                                                ; preds = %14, %16
  %4 = phi i64 [ %17, %16 ], [ 0, %14 ]
  %5 = trunc i64 %4 to i16
  ret i16 %5

6:                                                ; preds = %10, %8
  %7 = phi i1 [ %9, %8 ], [ false, %10 ]
  br i1 %7, label %11, label %14

8:                                                ; preds = %1
  %9 = icmp slt i64 %0, 0
  br label %6

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %6
  %12 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %15, label %16

14:                                               ; preds = %6
  br label %3

15:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %11
  %17 = extractvalue { i64, i1 } %12, 0
  br label %3
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @os.unexpectedErrno(i16 %0) unnamed_addr #0 {
  %2 = alloca { i16 }, align 2
  %3 = getelementptr inbounds { i16 }, ptr %2, i32 0, i32 0
  store i16 %0, ptr %3, align 2
  call fastcc void @debug.print__anon_6784(ptr nonnull readonly align 2 %2)
  call fastcc void @debug.dumpCurrentStackTrace(ptr nonnull readonly align 8 @215)
  ret i16 17
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.sigprocmask(i32 %0, ptr noalias readonly align 4 %1, ptr noalias align 4 %2) unnamed_addr #0 {
  %4 = ptrtoint ptr %1 to i64
  %5 = ptrtoint ptr %2 to i64
  %6 = zext i32 %0 to i64
  %7 = call fastcc i64 @os.linux.x86_64.syscall4(i64 14, i64 %6, i64 %4, i64 %5, i64 8)
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.sigaction(i6 %0, ptr noalias readonly align 8 %1, ptr noalias align 8 %2) unnamed_addr #0 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca %os.linux.k_sigaction__struct_6785, align 8
  %9 = alloca [6 x i64], align 8
  %10 = alloca %os.linux.k_sigaction__struct_6785, align 8
  %11 = icmp uge i6 %0, 1
  call fastcc void @debug.assert(i1 %11)
  %12 = icmp ne i6 %0, 9
  call fastcc void @debug.assert(i1 %12)
  %13 = icmp ne i6 %0, 19
  call fastcc void @debug.assert(i1 %13)
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 -86, i64 32, i1 false)
  %14 = ptrtoint ptr %10 to i64
  %15 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 0
  store i64 1296236545, ptr %15, align 8
  %16 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 1
  store i64 %14, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 2
  store i64 32, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 3
  store i64 0, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 4
  store i64 0, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 5
  store i64 0, ptr %20, align 8
  %21 = ptrtoint ptr %9 to i64
  %22 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %21, i64 0)
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 32, i1 false)
  %23 = ptrtoint ptr %8 to i64
  %24 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 0
  store i64 1296236545, ptr %24, align 8
  %25 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 1
  store i64 %23, ptr %25, align 8
  %26 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 2
  store i64 32, ptr %26, align 8
  %27 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 3
  store i64 0, ptr %27, align 8
  %28 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 4
  store i64 0, ptr %28, align 8
  %29 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 5
  store i64 0, ptr %29, align 8
  %30 = ptrtoint ptr %9 to i64
  %31 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %30, i64 0)
  %32 = icmp ne ptr %1, null
  br i1 %32, label %35, label %40

33:                                               ; preds = %40, %75
  %34 = icmp ne ptr %1, null
  br i1 %34, label %81, label %83

35:                                               ; preds = %3
  store ptr %1, ptr %7, align 8
  %36 = getelementptr inbounds %os.linux.Sigaction, ptr %1, i32 0, i32 2
  %37 = load i32, ptr %36, align 8
  %38 = and i32 %37, 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %73, label %74

40:                                               ; preds = %3
  br label %33

41:                                               ; preds = %74, %73
  %42 = phi ptr [ @os.linux.x86_64.restore_rt, %73 ], [ @os.linux.x86_64.restore_rt, %74 ]
  %43 = getelementptr inbounds %os.linux.k_sigaction__struct_6785, ptr %10, i32 0, i32 0
  %44 = getelementptr inbounds %os.linux.Sigaction, ptr %1, i32 0, i32 0
  %45 = getelementptr inbounds %os.linux.Sigaction.Sigaction__union_6246, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  store ptr %46, ptr %43, align 8
  %47 = getelementptr inbounds %os.linux.k_sigaction__struct_6785, ptr %10, i32 0, i32 1
  %48 = getelementptr inbounds %os.linux.Sigaction, ptr %1, i32 0, i32 2
  %49 = load i32, ptr %48, align 8
  %50 = or i32 %49, 67108864
  %51 = zext i32 %50 to i64
  store i64 %51, ptr %47, align 8
  %52 = getelementptr inbounds %os.linux.k_sigaction__struct_6785, ptr %10, i32 0, i32 3
  call void @llvm.memset.p0.i64(ptr align 8 %52, i8 -86, i64 8, i1 false)
  %53 = ptrtoint ptr %52 to i64
  %54 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 0
  store i64 1296236545, ptr %54, align 8
  %55 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 1
  store i64 %53, ptr %55, align 8
  %56 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 2
  store i64 8, ptr %56, align 8
  %57 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 3
  store i64 0, ptr %57, align 8
  %58 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 4
  store i64 0, ptr %58, align 8
  %59 = getelementptr inbounds [6 x i64], ptr %9, i64 0, i64 5
  store i64 0, ptr %59, align 8
  %60 = ptrtoint ptr %9 to i64
  %61 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %60, i64 0)
  %62 = getelementptr inbounds %os.linux.k_sigaction__struct_6785, ptr %10, i32 0, i32 2
  store ptr %42, ptr %62, align 8
  %63 = getelementptr inbounds %os.linux.k_sigaction__struct_6785, ptr %10, i32 0, i32 3
  store ptr %63, ptr %6, align 8
  %64 = load ptr, ptr %6, align 8
  %65 = getelementptr inbounds i8, ptr %64, i64 0
  %66 = load ptr, ptr %7, align 8
  %67 = getelementptr inbounds %os.linux.Sigaction, ptr %66, i32 0, i32 1
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  %69 = getelementptr inbounds i8, ptr %65, i64 8
  %70 = icmp uge ptr %65, %68
  %71 = icmp uge ptr %67, %69
  %72 = or i1 %70, %71
  br i1 %72, label %76, label %77

73:                                               ; preds = %35
  br label %41

74:                                               ; preds = %35
  br label %41

75:                                               ; preds = %76
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %65, ptr align 1 %67, i64 8, i1 false)
  br label %33

76:                                               ; preds = %41
  br label %75

77:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @216)
  unreachable

78:                                               ; preds = %83, %81
  %79 = phi i64 [ %82, %81 ], [ 0, %83 ]
  %80 = icmp ne ptr %2, null
  br i1 %80, label %90, label %92

81:                                               ; preds = %33
  %82 = ptrtoint ptr %10 to i64
  br label %78

83:                                               ; preds = %33
  br label %78

84:                                               ; preds = %92, %90
  %85 = phi i64 [ %91, %90 ], [ 0, %92 ]
  %86 = zext i6 %0 to i64
  %87 = call fastcc i64 @os.linux.x86_64.syscall4(i64 13, i64 %86, i64 %79, i64 %85, i64 8)
  %88 = call fastcc i16 @os.linux.getErrno(i64 %87)
  %89 = icmp ne i16 %88, 0
  br i1 %89, label %95, label %96

90:                                               ; preds = %78
  %91 = ptrtoint ptr %8 to i64
  br label %84

92:                                               ; preds = %78
  br label %84

93:                                               ; preds = %96
  %94 = icmp ne ptr %2, null
  br i1 %94, label %98, label %119

95:                                               ; preds = %84
  ret i64 %87

96:                                               ; preds = %84
  br label %93

97:                                               ; preds = %119, %120
  ret i64 0

98:                                               ; preds = %93
  store ptr %2, ptr %5, align 8
  %99 = load ptr, ptr %5, align 8
  %100 = getelementptr inbounds %os.linux.Sigaction, ptr %99, i32 0, i32 0
  %101 = getelementptr inbounds %os.linux.Sigaction.Sigaction__union_6246, ptr %100, i32 0, i32 0
  %102 = getelementptr inbounds %os.linux.k_sigaction__struct_6785, ptr %8, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  store ptr %103, ptr %101, align 8
  %104 = load ptr, ptr %5, align 8
  %105 = getelementptr inbounds %os.linux.Sigaction, ptr %104, i32 0, i32 2
  %106 = getelementptr inbounds %os.linux.k_sigaction__struct_6785, ptr %8, i32 0, i32 1
  %107 = load i64, ptr %106, align 8
  %108 = trunc i64 %107 to i32
  store i32 %108, ptr %105, align 8
  %109 = load ptr, ptr %5, align 8
  %110 = getelementptr inbounds %os.linux.Sigaction, ptr %109, i32 0, i32 1
  store ptr %110, ptr %4, align 8
  %111 = load ptr, ptr %4, align 8
  %112 = getelementptr inbounds i8, ptr %111, i64 0
  %113 = getelementptr inbounds %os.linux.k_sigaction__struct_6785, ptr %8, i32 0, i32 3
  %114 = getelementptr inbounds i8, ptr %113, i64 8
  %115 = getelementptr inbounds i8, ptr %112, i64 8
  %116 = icmp uge ptr %112, %114
  %117 = icmp uge ptr %113, %115
  %118 = or i1 %116, %117
  br i1 %118, label %121, label %122

119:                                              ; preds = %93
  br label %97

120:                                              ; preds = %121
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %112, ptr align 1 %113, i64 8, i1 false)
  br label %97

121:                                              ; preds = %98
  br label %120

122:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @216)
  unreachable
}

; Function Attrs: cold noreturn nounwind uwtable
define internal fastcc void @debug.panicExtra__anon_6675(ptr align 8 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #2 {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca [6 x i64], align 8
  %7 = alloca [4111 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %7, i8 -86, i64 4111, i1 false)
  %8 = ptrtoint ptr %7 to i64
  %9 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 0
  store i64 1296236545, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 1
  store i64 %8, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 2
  store i64 4111, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 3
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 4
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %6, i64 0, i64 5
  store i64 0, ptr %14, align 8
  %15 = ptrtoint ptr %6 to i64
  %16 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %15, i64 0)
  %17 = getelementptr inbounds i8, ptr %7, i64 0
  %18 = getelementptr inbounds [4096 x i8], ptr %17, i64 0, i64 0
  %19 = insertvalue { ptr, i64 } poison, ptr %18, 0
  %20 = insertvalue { ptr, i64 } %19, i64 4096, 1
  %21 = extractvalue { ptr, i64 } %20, 0
  %22 = extractvalue { ptr, i64 } %20, 1
  call fastcc void @fmt.bufPrint__anon_6798(ptr sret({ { ptr, i64 }, i16, [6 x i8] }) %5, ptr nonnull align 1 %21, i64 %22, ptr nonnull readonly align 8 %2)
  %23 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %24 = load i16, ptr %23, align 2
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %31, label %34

26:                                               ; preds = %37, %31
  %27 = phi { ptr, i64 } [ %33, %31 ], [ %41, %37 ]
  store { ptr, i64 } %27, ptr %4, align 8
  %28 = load { ptr, i64 }, ptr %4, align 8
  %29 = extractvalue { ptr, i64 } %28, 0
  %30 = extractvalue { ptr, i64 } %28, 1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 %29, i64 %30, ptr align 8 %0, ptr nonnull readonly align 8 %1)
  unreachable

31:                                               ; preds = %3
  %32 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  %33 = load { ptr, i64 }, ptr %32, align 8
  br label %26

34:                                               ; preds = %3
  %35 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %36 = load i16, ptr %35, align 2
  switch i16 %36, label %42 [
    i16 6, label %43
  ]

37:                                               ; preds = %49
  %38 = phi ptr [ %7, %49 ]
  %39 = getelementptr inbounds [4111 x i8], ptr %38, i64 0, i64 0
  %40 = insertvalue { ptr, i64 } poison, ptr %39, 0
  %41 = insertvalue { ptr, i64 } %40, i64 4111, 1
  br label %26

42:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6237, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @217)
  unreachable

43:                                               ; preds = %34
  %44 = getelementptr inbounds i8, ptr %7, i64 4096
  %45 = getelementptr inbounds i8, ptr %44, i64 15
  %46 = icmp uge ptr %44, getelementptr inbounds (i8, ptr @debug.panicExtra__anon_4340__anon_6091, i64 15)
  %47 = icmp uge ptr @debug.panicExtra__anon_4340__anon_6091, %45
  %48 = or i1 %46, %47
  br i1 %48, label %50, label %51

49:                                               ; preds = %50
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %44, ptr align 1 @debug.panicExtra__anon_4340__anon_6091, i64 15, i1 false)
  br label %37

50:                                               ; preds = %43
  br label %49

51:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @217)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.x86_64.syscall0(i64 %0) unnamed_addr #0 {
  %2 = call i64 asm sideeffect "syscall", "={rax},{rax},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 %0)
  ret i64 %2
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.x86_64.syscall2(i64 %0, i64 %1, i64 %2) unnamed_addr #0 {
  %4 = call i64 asm sideeffect "syscall", "={rax},{rax},{rdi},{rsi},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 %0, i64 %1, i64 %2)
  ret i64 %4
}

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @os.linux.exit_group(i32 %0) unnamed_addr #7 {
  %2 = sext i32 %0 to i64
  %3 = call fastcc i64 @os.linux.x86_64.syscall1(i64 231, i64 %2)
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @218)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.format__anon_6750(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %2 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %0, i64 4, i1 false)
  %3 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %2, ptr nonnull readonly align 1 @debug.dumpStackTrace__anon_6417, i64 48)
  %4 = icmp ne i16 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  ret i16 %3

6:                                                ; preds = %1
  ret i16 0
}

; Function Attrs: cold nounwind uwtable
define internal fastcc void @Thread.Futex.wake(ptr nonnull readonly align 4 %0, i32 %1) unnamed_addr #8 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %5, label %6

4:                                                ; preds = %6
  call fastcc void @Thread.Futex.LinuxImpl.wake(ptr nonnull readonly align 4 %0, i32 %1)
  ret void

5:                                                ; preds = %2
  ret void

6:                                                ; preds = %2
  br label %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @Thread.Futex.LinuxImpl.wait(ptr nonnull readonly align 4 %0, i32 %1, ptr nonnull readonly align 8 %2) unnamed_addr #0 {
  %4 = alloca ptr, align 8
  %5 = alloca [6 x i64], align 8
  %6 = alloca %os.linux.timespec, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 16, i1 false)
  %7 = ptrtoint ptr %6 to i64
  %8 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 0
  store i64 1296236545, ptr %8, align 8
  %9 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 1
  store i64 %7, ptr %9, align 8
  %10 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 2
  store i64 16, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 3
  store i64 0, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 4
  store i64 0, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 5
  store i64 0, ptr %13, align 8
  %14 = ptrtoint ptr %5 to i64
  %15 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %14, i64 0)
  %16 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %2, i32 0, i32 1
  %17 = load i8, ptr %16, align 1
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %25, label %32

19:                                               ; preds = %32, %40
  store ptr %0, ptr %4, align 8
  %20 = load ptr, ptr %4, align 8
  %21 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %20, i32 0, i32 0
  %22 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %2, i32 0, i32 1
  %23 = load i8, ptr %22, align 1
  %24 = icmp ne i8 %23, 0
  br i1 %24, label %47, label %48

25:                                               ; preds = %3
  %26 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %2, i32 0, i32 0
  %27 = load i64, ptr %26, align 8
  %28 = getelementptr inbounds %os.linux.timespec, ptr %6, i32 0, i32 0
  %29 = udiv i64 %27, 1000000000
  %30 = sub i64 9223372036854775807, %29
  %31 = icmp ule i64 %30, 9223372036854775807
  br i1 %31, label %38, label %39

32:                                               ; preds = %3
  br label %19

33:                                               ; preds = %38
  store i64 %29, ptr %28, align 8
  %34 = getelementptr inbounds %os.linux.timespec, ptr %6, i32 0, i32 1
  %35 = urem i64 %27, 1000000000
  %36 = sub i64 9223372036854775807, %35
  %37 = icmp ule i64 %36, 9223372036854775807
  br i1 %37, label %41, label %42

38:                                               ; preds = %25
  br label %33

39:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @219)
  unreachable

40:                                               ; preds = %41
  store i64 %35, ptr %34, align 8
  br label %19

41:                                               ; preds = %33
  br label %40

42:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @219)
  unreachable

43:                                               ; preds = %48, %47
  %44 = phi ptr [ %6, %47 ], [ null, %48 ]
  %45 = call fastcc i64 @os.linux.futex_wait(ptr nonnull readonly align 4 %21, i32 128, i32 %1, ptr readonly align 8 %44)
  %46 = call fastcc i16 @os.linux.getErrno(i64 %45)
  switch i16 %46, label %50 [
    i16 0, label %51
    i16 4, label %52
    i16 11, label %53
    i16 110, label %54
    i16 22, label %58
    i16 14, label %59
  ]

47:                                               ; preds = %19
  br label %43

48:                                               ; preds = %19
  br label %43

49:                                               ; preds = %58, %53, %52, %51
  ret i16 0

50:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @219)
  unreachable

51:                                               ; preds = %43
  br label %49

52:                                               ; preds = %43
  br label %49

53:                                               ; preds = %43
  br label %49

54:                                               ; preds = %43
  %55 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %2, i32 0, i32 1
  %56 = load i8, ptr %55, align 1
  %57 = icmp ne i8 %56, 0
  call fastcc void @debug.assert(i1 %57)
  ret i16 25

58:                                               ; preds = %43
  br label %49

59:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @219)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc void @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).write"(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %7 = insertvalue { ptr, i64 } %6, i64 %3, 1
  %8 = getelementptr inbounds %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", ptr %1, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = extractvalue { ptr, i64 } %7, 0
  %11 = extractvalue { ptr, i64 } %7, 1
  call fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).write"(ptr sret({ i64, i16, [6 x i8] }) %5, ptr nonnull align 8 %9, ptr nonnull readonly align 1 %10, i64 %11)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatBuf__anon_6772(ptr nonnull readonly align 1 %0, i64 %1, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 8 %3) unnamed_addr #0 {
  %5 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %6 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %7 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %8 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %9 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %10 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %11 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %12 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %13 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %14 = alloca { i64, i16, [6 x i8] }, align 8
  %15 = alloca { i64, i8, [7 x i8] }, align 8
  %16 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %17 = insertvalue { ptr, i64 } %16, i64 %1, 1
  %18 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %18, i64 16, i1 false)
  %19 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %15, i32 0, i32 1
  %20 = load i8, ptr %19, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %23, label %31

22:                                               ; preds = %117, %62
  ret i16 0

23:                                               ; preds = %4
  %24 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %15, i32 0, i32 0
  %25 = load i64, ptr %24, align 8
  %26 = extractvalue { ptr, i64 } %17, 0
  %27 = extractvalue { ptr, i64 } %17, 1
  call fastcc void @unicode.utf8CountCodepoints(ptr sret({ i64, i16, [6 x i8] }) %14, ptr nonnull readonly align 1 %26, i64 %27)
  %28 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %14, i32 0, i32 1
  %29 = load i16, ptr %28, align 2
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %39, label %42

31:                                               ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %3, i64 8, i1 false)
  %32 = extractvalue { ptr, i64 } %17, 0
  %33 = extractvalue { ptr, i64 } %17, 1
  %34 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %5, ptr nonnull readonly align 1 %32, i64 %33)
  %35 = icmp ne i16 %34, 0
  br i1 %35, label %116, label %117

36:                                               ; preds = %42, %39
  %37 = phi i64 [ %41, %39 ], [ %43, %42 ]
  %38 = icmp ult i64 %37, %25
  br i1 %38, label %47, label %50

39:                                               ; preds = %23
  %40 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %14, i32 0, i32 0
  %41 = load i64, ptr %40, align 8
  br label %36

42:                                               ; preds = %23
  %43 = extractvalue { ptr, i64 } %17, 1
  br label %36

44:                                               ; preds = %50, %52
  %45 = phi i64 [ %53, %52 ], [ 0, %50 ]
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %57, label %61

47:                                               ; preds = %36
  %48 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %25, i64 %37)
  %49 = extractvalue { i64, i1 } %48, 1
  br i1 %49, label %51, label %52

50:                                               ; preds = %36
  br label %44

51:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %47
  %53 = extractvalue { i64, i1 } %48, 0
  br label %44

54:                                               ; preds = %61
  %55 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 2
  %56 = load i2, ptr %55, align 1
  switch i2 %56, label %63 [
    i2 0, label %64
    i2 1, label %77
    i2 -2, label %103
  ]

57:                                               ; preds = %44
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %13, ptr align 8 %3, i64 8, i1 false)
  %58 = extractvalue { ptr, i64 } %17, 0
  %59 = extractvalue { ptr, i64 } %17, 1
  %60 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %13, ptr nonnull readonly align 1 %58, i64 %59)
  ret i16 %60

61:                                               ; preds = %44
  br label %54

62:                                               ; preds = %115, %102, %76
  br label %22

63:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6237, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @211)
  unreachable

64:                                               ; preds = %54
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %3, i64 8, i1 false)
  %65 = extractvalue { ptr, i64 } %17, 0
  %66 = extractvalue { ptr, i64 } %17, 1
  %67 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %12, ptr nonnull readonly align 1 %65, i64 %66)
  %68 = icmp ne i16 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %64
  ret i16 %67

70:                                               ; preds = %64
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %3, i64 8, i1 false)
  %71 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %72 = load i8, ptr %71, align 1
  %73 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %11, i8 %72, i64 %45)
  %74 = icmp ne i16 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %70
  ret i16 %73

76:                                               ; preds = %70
  br label %62

77:                                               ; preds = %54
  %78 = udiv i64 %45, 2
  %79 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %45, i64 1)
  %80 = extractvalue { i64, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %77
  %83 = extractvalue { i64, i1 } %79, 0
  %84 = udiv i64 %83, 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %3, i64 8, i1 false)
  %85 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %86 = load i8, ptr %85, align 1
  %87 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %10, i8 %86, i64 %78)
  %88 = icmp ne i16 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %82
  ret i16 %87

90:                                               ; preds = %82
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %3, i64 8, i1 false)
  %91 = extractvalue { ptr, i64 } %17, 0
  %92 = extractvalue { ptr, i64 } %17, 1
  %93 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %9, ptr nonnull readonly align 1 %91, i64 %92)
  %94 = icmp ne i16 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %90
  ret i16 %93

96:                                               ; preds = %90
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %3, i64 8, i1 false)
  %97 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %98 = load i8, ptr %97, align 1
  %99 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %8, i8 %98, i64 %84)
  %100 = icmp ne i16 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %96
  ret i16 %99

102:                                              ; preds = %96
  br label %62

103:                                              ; preds = %54
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %3, i64 8, i1 false)
  %104 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %105 = load i8, ptr %104, align 1
  %106 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %7, i8 %105, i64 %45)
  %107 = icmp ne i16 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %103
  ret i16 %106

109:                                              ; preds = %103
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %3, i64 8, i1 false)
  %110 = extractvalue { ptr, i64 } %17, 0
  %111 = extractvalue { ptr, i64 } %17, 1
  %112 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %6, ptr nonnull readonly align 1 %110, i64 %111)
  %113 = icmp ne i16 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %109
  ret i16 %112

115:                                              ; preds = %109
  br label %62

116:                                              ; preds = %31
  ret i16 %34

117:                                              ; preds = %31
  br label %22
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %0, i8 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %6 = alloca i64, align 8
  %7 = alloca [6 x i64], align 8
  %8 = alloca [256 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %8, i8 -86, i64 256, i1 false)
  %9 = ptrtoint ptr %8 to i64
  %10 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 0
  store i64 1296236545, ptr %10, align 8
  %11 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 1
  store i64 %9, ptr %11, align 8
  %12 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 2
  store i64 256, ptr %12, align 8
  %13 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 3
  store i64 0, ptr %13, align 8
  %14 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 4
  store i64 0, ptr %14, align 8
  %15 = getelementptr inbounds [6 x i64], ptr %7, i64 0, i64 5
  store i64 0, ptr %15, align 8
  %16 = ptrtoint ptr %7 to i64
  %17 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %16, i64 0)
  %18 = getelementptr inbounds i8, ptr %8, i64 0
  call void @llvm.memset.p0.i64(ptr align 1 %18, i8 %1, i64 256, i1 false)
  store i64 %2, ptr %6, align 8
  br label %20

19:                                               ; preds = %31
  ret i16 0

20:                                               ; preds = %23, %3
  %21 = load i64, ptr %6, align 8
  %22 = icmp ugt i64 %21, 0
  br i1 %22, label %24, label %31

23:                                               ; preds = %57
  br label %20

24:                                               ; preds = %20
  %25 = load i64, ptr %6, align 8
  %26 = call i64 @llvm.umin.i64(i64 256, i64 %25)
  %27 = trunc i64 %26 to i9
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %0, i64 8, i1 false)
  %28 = getelementptr inbounds i8, ptr %8, i64 0
  %29 = zext i9 %27 to i64
  %30 = icmp ule i64 0, %29
  br i1 %30, label %34, label %35

31:                                               ; preds = %20
  br label %19

32:                                               ; preds = %34
  %33 = icmp ule i64 %29, 256
  br i1 %33, label %38, label %39

34:                                               ; preds = %24
  br label %32

35:                                               ; preds = %24
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %29)
  unreachable

36:                                               ; preds = %38
  %37 = icmp ule i64 0, %29
  br i1 %37, label %48, label %49

38:                                               ; preds = %32
  br label %36

39:                                               ; preds = %32
  call fastcc void @builtin.panicOutOfBounds(i64 %29, i64 256)
  unreachable

40:                                               ; preds = %48
  %41 = insertvalue { ptr, i64 } poison, ptr %28, 0
  %42 = insertvalue { ptr, i64 } %41, i64 %29, 1
  store { ptr, i64 } %42, ptr %4, align 8
  %43 = load { ptr, i64 }, ptr %4, align 8
  %44 = extractvalue { ptr, i64 } %43, 0
  %45 = extractvalue { ptr, i64 } %43, 1
  %46 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %5, ptr nonnull readonly align 1 %44, i64 %45)
  %47 = icmp ne i16 %46, 0
  br i1 %47, label %50, label %51

48:                                               ; preds = %36
  br label %40

49:                                               ; preds = %36
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %29)
  unreachable

50:                                               ; preds = %40
  ret i16 %46

51:                                               ; preds = %40
  %52 = load i64, ptr %6, align 8
  %53 = zext i9 %27 to i64
  %54 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %52, i64 %53)
  %55 = extractvalue { i64, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %51
  %58 = extractvalue { i64, i1 } %54, 0
  store i64 %58, ptr %6, align 8
  br label %23
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatInt__anon_6770(i64 %0, i8 %1, i1 %2, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4) unnamed_addr #0 {
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca [2 x i8], align 1
  %8 = alloca [2 x i8], align 1
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca [6 x i64], align 8
  %12 = alloca [65 x i8], align 1
  %13 = icmp uge i8 %1, 2
  call fastcc void @debug.assert(i1 %13)
  %14 = call fastcc i64 @math.absCast__anon_6771(i64 %0)
  call void @llvm.memset.p0.i64(ptr align 1 %12, i8 -86, i64 65, i1 false)
  %15 = ptrtoint ptr %12 to i64
  %16 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 0
  store i64 1296236545, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 1
  store i64 %15, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 2
  store i64 65, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 3
  store i64 0, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 4
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 5
  store i64 0, ptr %21, align 8
  %22 = ptrtoint ptr %11 to i64
  %23 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %22, i64 0)
  store i64 %14, ptr %10, align 8
  store i64 65, ptr %9, align 8
  %24 = icmp eq i8 %1, 10
  br i1 %24, label %29, label %30

25:                                               ; preds = %88, %52
  %26 = load i64, ptr %9, align 8
  %27 = getelementptr inbounds i8, ptr %12, i64 %26
  %28 = icmp ule i64 %26, 65
  br i1 %28, label %130, label %131

29:                                               ; preds = %5
  br label %34

30:                                               ; preds = %5
  br label %89

31:                                               ; preds = %42
  %32 = load i64, ptr %10, align 8
  %33 = icmp ult i64 %32, 10
  br i1 %33, label %53, label %57

34:                                               ; preds = %37, %29
  %35 = load i64, ptr %10, align 8
  %36 = icmp uge i64 %35, 100
  br i1 %36, label %38, label %42

37:                                               ; preds = %44
  br label %34

38:                                               ; preds = %34
  %39 = load i64, ptr %9, align 8
  %40 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %39, i64 2)
  %41 = extractvalue { i64, i1 } %40, 1
  br i1 %41, label %43, label %44

42:                                               ; preds = %34
  br label %31

43:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %38
  %45 = extractvalue { i64, i1 } %40, 0
  store i64 %45, ptr %9, align 8
  %46 = load i64, ptr %9, align 8
  %47 = getelementptr inbounds i8, ptr %12, i64 %46
  %48 = load i64, ptr %10, align 8
  %49 = urem i64 %48, 100
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %8, i64 %49)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %47, ptr align 1 %8, i64 2, i1 false)
  %50 = load i64, ptr %10, align 8
  %51 = udiv i64 %50, 100
  store i64 %51, ptr %10, align 8
  br label %37

52:                                               ; preds = %83, %80
  br label %25

53:                                               ; preds = %31
  %54 = load i64, ptr %9, align 8
  %55 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %54, i64 1)
  %56 = extractvalue { i64, i1 } %55, 1
  br i1 %56, label %61, label %62

57:                                               ; preds = %31
  %58 = load i64, ptr %9, align 8
  %59 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %58, i64 2)
  %60 = extractvalue { i64, i1 } %59, 1
  br i1 %60, label %82, label %83

61:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %53
  %63 = extractvalue { i64, i1 } %55, 0
  store i64 %63, ptr %9, align 8
  %64 = load i64, ptr %9, align 8
  %65 = icmp ult i64 %64, 65
  br i1 %65, label %71, label %72

66:                                               ; preds = %71
  %67 = getelementptr inbounds [65 x i8], ptr %12, i64 0, i64 %64
  %68 = load i64, ptr %10, align 8
  %69 = sub i64 255, %68
  %70 = icmp ule i64 %69, 255
  br i1 %70, label %77, label %78

71:                                               ; preds = %62
  br label %66

72:                                               ; preds = %62
  call fastcc void @builtin.panicOutOfBounds(i64 %64, i64 65)
  unreachable

73:                                               ; preds = %77
  %74 = trunc i64 %68 to i8
  %75 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 48, i8 %74)
  %76 = extractvalue { i8, i1 } %75, 1
  br i1 %76, label %79, label %80

77:                                               ; preds = %66
  br label %73

78:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @212)
  unreachable

79:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %73
  %81 = extractvalue { i8, i1 } %75, 0
  store i8 %81, ptr %67, align 1
  br label %52

82:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %57
  %84 = extractvalue { i64, i1 } %59, 0
  store i64 %84, ptr %9, align 8
  %85 = load i64, ptr %9, align 8
  %86 = getelementptr inbounds i8, ptr %12, i64 %85
  %87 = load i64, ptr %10, align 8
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %7, i64 %87)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %86, ptr align 1 %7, i64 2, i1 false)
  br label %52

88:                                               ; preds = %126
  br label %25

89:                                               ; preds = %125, %30
  %90 = load i64, ptr %10, align 8
  %91 = zext i8 %1 to i64
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %98, label %99

93:                                               ; preds = %98
  %94 = urem i64 %90, %91
  %95 = load i64, ptr %9, align 8
  %96 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %95, i64 1)
  %97 = extractvalue { i64, i1 } %96, 1
  br i1 %97, label %100, label %101

98:                                               ; preds = %89
  br label %93

99:                                               ; preds = %89
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @212)
  unreachable

100:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %93
  %102 = extractvalue { i64, i1 } %96, 0
  store i64 %102, ptr %9, align 8
  %103 = load i64, ptr %9, align 8
  %104 = icmp ult i64 %103, 65
  br i1 %104, label %109, label %110

105:                                              ; preds = %109
  %106 = getelementptr inbounds [65 x i8], ptr %12, i64 0, i64 %103
  %107 = sub i64 255, %94
  %108 = icmp ule i64 %107, 255
  br i1 %108, label %117, label %118

109:                                              ; preds = %101
  br label %105

110:                                              ; preds = %101
  call fastcc void @builtin.panicOutOfBounds(i64 %103, i64 65)
  unreachable

111:                                              ; preds = %117
  %112 = trunc i64 %94 to i8
  %113 = call fastcc i8 @fmt.digitToChar(i8 %112, i1 %2)
  store i8 %113, ptr %106, align 1
  %114 = load i64, ptr %10, align 8
  %115 = zext i8 %1 to i64
  %116 = icmp ne i64 %115, 0
  br i1 %116, label %123, label %124

117:                                              ; preds = %105
  br label %111

118:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @212)
  unreachable

119:                                              ; preds = %123
  %120 = udiv i64 %114, %115
  store i64 %120, ptr %10, align 8
  %121 = load i64, ptr %10, align 8
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %126, label %127

123:                                              ; preds = %111
  br label %119

124:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @212)
  unreachable

125:                                              ; preds = %127
  br label %89

126:                                              ; preds = %119
  br label %88

127:                                              ; preds = %119
  br label %125

128:                                              ; preds = %130
  %129 = sub nuw i64 65, %26
  br i1 true, label %134, label %135

130:                                              ; preds = %25
  br label %128

131:                                              ; preds = %25
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %26, i64 65)
  unreachable

132:                                              ; preds = %134
  %133 = icmp ule i64 %26, 65
  br i1 %133, label %143, label %144

134:                                              ; preds = %128
  br label %132

135:                                              ; preds = %128
  call fastcc void @builtin.panicOutOfBounds(i64 65, i64 65)
  unreachable

136:                                              ; preds = %143
  %137 = insertvalue { ptr, i64 } poison, ptr %27, 0
  %138 = insertvalue { ptr, i64 } %137, i64 %129, 1
  store { ptr, i64 } %138, ptr %6, align 8
  %139 = load { ptr, i64 }, ptr %6, align 8
  %140 = extractvalue { ptr, i64 } %139, 0
  %141 = extractvalue { ptr, i64 } %139, 1
  %142 = call fastcc i16 @fmt.formatBuf__anon_6772(ptr nonnull readonly align 1 %140, i64 %141, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4)
  ret i16 %142

143:                                              ; preds = %132
  br label %136

144:                                              ; preds = %132
  call fastcc void @builtin.panicOutOfBounds(i64 %26, i64 65)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @math.absCast__anon_6771(i64 %0) unnamed_addr #0 {
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatIntValue__anon_6765(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatInt__anon_6770(i64 %0, i8 10, i1 false, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2)
  ret i16 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatValue__anon_6764(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatIntValue__anon_6765(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2)
  ret i16 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fs.file.File.write(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull readonly align 4 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %7 = insertvalue { ptr, i64 } %6, i64 %3, 1
  %8 = getelementptr inbounds %fs.file.File, ptr %1, i32 0, i32 0
  %9 = load i32, ptr %8, align 4
  %10 = extractvalue { ptr, i64 } %7, 0
  %11 = extractvalue { ptr, i64 } %7, 1
  call fastcc void @os.write(ptr sret({ i64, i16, [6 x i8] }) %5, i32 %9, ptr nonnull readonly align 1 %10, i64 %11)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @unicode.utf8Decode2(ptr noalias nonnull sret({ i21, i16, [2 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { i21, i16, [2 x i8] }, align 4
  %5 = alloca i21, align 4
  %6 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %7 = insertvalue { ptr, i64 } %6, i64 %2, 1
  %8 = extractvalue { ptr, i64 } %7, 1
  %9 = icmp eq i64 %8, 2
  call fastcc void @debug.assert(i1 %9)
  %10 = extractvalue { ptr, i64 } %7, 1
  %11 = icmp ult i64 0, %10
  br i1 %11, label %20, label %21

12:                                               ; preds = %20
  %13 = extractvalue { ptr, i64 } %7, 0
  %14 = getelementptr inbounds i8, ptr %13, i64 0
  %15 = load i8, ptr %14, align 1
  %16 = and i8 %15, -32
  %17 = icmp eq i8 %16, -64
  call fastcc void @debug.assert(i1 %17)
  %18 = extractvalue { ptr, i64 } %7, 1
  %19 = icmp ult i64 0, %18
  br i1 %19, label %30, label %31

20:                                               ; preds = %3
  br label %12

21:                                               ; preds = %3
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %10)
  unreachable

22:                                               ; preds = %30
  %23 = extractvalue { ptr, i64 } %7, 0
  %24 = getelementptr inbounds i8, ptr %23, i64 0
  %25 = load i8, ptr %24, align 1
  %26 = and i8 %25, 31
  %27 = zext i8 %26 to i21
  store i21 %27, ptr %5, align 4
  %28 = extractvalue { ptr, i64 } %7, 1
  %29 = icmp ult i64 1, %28
  br i1 %29, label %40, label %41

30:                                               ; preds = %12
  br label %22

31:                                               ; preds = %12
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %18)
  unreachable

32:                                               ; preds = %43
  %33 = load i21, ptr %5, align 4
  br i1 true, label %49, label %50

34:                                               ; preds = %40
  %35 = extractvalue { ptr, i64 } %7, 0
  %36 = getelementptr inbounds i8, ptr %35, i64 1
  %37 = load i8, ptr %36, align 1
  %38 = and i8 %37, -64
  %39 = icmp ne i8 %38, -128
  br i1 %39, label %42, label %43

40:                                               ; preds = %22
  br label %34

41:                                               ; preds = %22
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %28)
  unreachable

42:                                               ; preds = %34
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @220, i64 8, i1 false)
  ret void

43:                                               ; preds = %34
  br label %32

44:                                               ; preds = %49
  %45 = shl i21 %33, 6
  store i21 %45, ptr %5, align 4
  %46 = load i21, ptr %5, align 4
  %47 = extractvalue { ptr, i64 } %7, 1
  %48 = icmp ult i64 1, %47
  br i1 %48, label %60, label %61

49:                                               ; preds = %32
  br label %44

50:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @221)
  unreachable

51:                                               ; preds = %60
  %52 = extractvalue { ptr, i64 } %7, 0
  %53 = getelementptr inbounds i8, ptr %52, i64 1
  %54 = load i8, ptr %53, align 1
  %55 = and i8 %54, 63
  %56 = zext i8 %55 to i21
  %57 = or i21 %46, %56
  store i21 %57, ptr %5, align 4
  %58 = load i21, ptr %5, align 4
  %59 = icmp ult i21 %58, 128
  br i1 %59, label %66, label %67

60:                                               ; preds = %44
  br label %51

61:                                               ; preds = %44
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %47)
  unreachable

62:                                               ; preds = %67
  %63 = load i21, ptr %5, align 4
  %64 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %4, i32 0, i32 1
  store i16 0, ptr %64, align 2
  %65 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %4, i32 0, i32 0
  store i21 %63, ptr %65, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %4, i64 8, i1 false)
  ret void

66:                                               ; preds = %51
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @222, i64 8, i1 false)
  ret void

67:                                               ; preds = %51
  br label %62
}

; Function Attrs: nounwind uwtable
define internal fastcc void @unicode.utf8Decode3(ptr noalias nonnull sret({ i21, i16, [2 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { i21, i16, [2 x i8] }, align 4
  %5 = alloca i21, align 4
  %6 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %7 = insertvalue { ptr, i64 } %6, i64 %2, 1
  %8 = extractvalue { ptr, i64 } %7, 1
  %9 = icmp eq i64 %8, 3
  call fastcc void @debug.assert(i1 %9)
  %10 = extractvalue { ptr, i64 } %7, 1
  %11 = icmp ult i64 0, %10
  br i1 %11, label %20, label %21

12:                                               ; preds = %20
  %13 = extractvalue { ptr, i64 } %7, 0
  %14 = getelementptr inbounds i8, ptr %13, i64 0
  %15 = load i8, ptr %14, align 1
  %16 = and i8 %15, -16
  %17 = icmp eq i8 %16, -32
  call fastcc void @debug.assert(i1 %17)
  %18 = extractvalue { ptr, i64 } %7, 1
  %19 = icmp ult i64 0, %18
  br i1 %19, label %30, label %31

20:                                               ; preds = %3
  br label %12

21:                                               ; preds = %3
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %10)
  unreachable

22:                                               ; preds = %30
  %23 = extractvalue { ptr, i64 } %7, 0
  %24 = getelementptr inbounds i8, ptr %23, i64 0
  %25 = load i8, ptr %24, align 1
  %26 = and i8 %25, 15
  %27 = zext i8 %26 to i21
  store i21 %27, ptr %5, align 4
  %28 = extractvalue { ptr, i64 } %7, 1
  %29 = icmp ult i64 1, %28
  br i1 %29, label %40, label %41

30:                                               ; preds = %12
  br label %22

31:                                               ; preds = %12
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %18)
  unreachable

32:                                               ; preds = %43
  %33 = load i21, ptr %5, align 4
  br i1 true, label %49, label %50

34:                                               ; preds = %40
  %35 = extractvalue { ptr, i64 } %7, 0
  %36 = getelementptr inbounds i8, ptr %35, i64 1
  %37 = load i8, ptr %36, align 1
  %38 = and i8 %37, -64
  %39 = icmp ne i8 %38, -128
  br i1 %39, label %42, label %43

40:                                               ; preds = %22
  br label %34

41:                                               ; preds = %22
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %28)
  unreachable

42:                                               ; preds = %34
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @223, i64 8, i1 false)
  ret void

43:                                               ; preds = %34
  br label %32

44:                                               ; preds = %49
  %45 = shl i21 %33, 6
  store i21 %45, ptr %5, align 4
  %46 = load i21, ptr %5, align 4
  %47 = extractvalue { ptr, i64 } %7, 1
  %48 = icmp ult i64 1, %47
  br i1 %48, label %60, label %61

49:                                               ; preds = %32
  br label %44

50:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @224)
  unreachable

51:                                               ; preds = %60
  %52 = extractvalue { ptr, i64 } %7, 0
  %53 = getelementptr inbounds i8, ptr %52, i64 1
  %54 = load i8, ptr %53, align 1
  %55 = and i8 %54, 63
  %56 = zext i8 %55 to i21
  %57 = or i21 %46, %56
  store i21 %57, ptr %5, align 4
  %58 = extractvalue { ptr, i64 } %7, 1
  %59 = icmp ult i64 2, %58
  br i1 %59, label %70, label %71

60:                                               ; preds = %44
  br label %51

61:                                               ; preds = %44
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %47)
  unreachable

62:                                               ; preds = %73
  %63 = load i21, ptr %5, align 4
  br i1 true, label %79, label %80

64:                                               ; preds = %70
  %65 = extractvalue { ptr, i64 } %7, 0
  %66 = getelementptr inbounds i8, ptr %65, i64 2
  %67 = load i8, ptr %66, align 1
  %68 = and i8 %67, -64
  %69 = icmp ne i8 %68, -128
  br i1 %69, label %72, label %73

70:                                               ; preds = %51
  br label %64

71:                                               ; preds = %51
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %58)
  unreachable

72:                                               ; preds = %64
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @223, i64 8, i1 false)
  ret void

73:                                               ; preds = %64
  br label %62

74:                                               ; preds = %79
  %75 = shl i21 %63, 6
  store i21 %75, ptr %5, align 4
  %76 = load i21, ptr %5, align 4
  %77 = extractvalue { ptr, i64 } %7, 1
  %78 = icmp ult i64 2, %77
  br i1 %78, label %90, label %91

79:                                               ; preds = %62
  br label %74

80:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @224)
  unreachable

81:                                               ; preds = %90
  %82 = extractvalue { ptr, i64 } %7, 0
  %83 = getelementptr inbounds i8, ptr %82, i64 2
  %84 = load i8, ptr %83, align 1
  %85 = and i8 %84, 63
  %86 = zext i8 %85 to i21
  %87 = or i21 %76, %86
  store i21 %87, ptr %5, align 4
  %88 = load i21, ptr %5, align 4
  %89 = icmp ult i21 %88, 2048
  br i1 %89, label %95, label %96

90:                                               ; preds = %74
  br label %81

91:                                               ; preds = %74
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %77)
  unreachable

92:                                               ; preds = %96
  %93 = load i21, ptr %5, align 4
  %94 = icmp ule i21 55296, %93
  br i1 %94, label %103, label %106

95:                                               ; preds = %81
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @225, i64 8, i1 false)
  ret void

96:                                               ; preds = %81
  br label %92

97:                                               ; preds = %108
  %98 = load i21, ptr %5, align 4
  %99 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %4, i32 0, i32 1
  store i16 0, ptr %99, align 2
  %100 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %4, i32 0, i32 0
  store i21 %98, ptr %100, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %4, i64 8, i1 false)
  ret void

101:                                              ; preds = %106, %103
  %102 = phi i1 [ %105, %103 ], [ false, %106 ]
  br i1 %102, label %107, label %108

103:                                              ; preds = %92
  %104 = load i21, ptr %5, align 4
  %105 = icmp ule i21 %104, 57343
  br label %101

106:                                              ; preds = %92
  br label %101

107:                                              ; preds = %101
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @226, i64 8, i1 false)
  ret void

108:                                              ; preds = %101
  br label %97
}

; Function Attrs: nounwind uwtable
define internal fastcc void @unicode.utf8Decode4(ptr noalias nonnull sret({ i21, i16, [2 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = alloca { i21, i16, [2 x i8] }, align 4
  %5 = alloca i21, align 4
  %6 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %7 = insertvalue { ptr, i64 } %6, i64 %2, 1
  %8 = extractvalue { ptr, i64 } %7, 1
  %9 = icmp eq i64 %8, 4
  call fastcc void @debug.assert(i1 %9)
  %10 = extractvalue { ptr, i64 } %7, 1
  %11 = icmp ult i64 0, %10
  br i1 %11, label %20, label %21

12:                                               ; preds = %20
  %13 = extractvalue { ptr, i64 } %7, 0
  %14 = getelementptr inbounds i8, ptr %13, i64 0
  %15 = load i8, ptr %14, align 1
  %16 = and i8 %15, -8
  %17 = icmp eq i8 %16, -16
  call fastcc void @debug.assert(i1 %17)
  %18 = extractvalue { ptr, i64 } %7, 1
  %19 = icmp ult i64 0, %18
  br i1 %19, label %30, label %31

20:                                               ; preds = %3
  br label %12

21:                                               ; preds = %3
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %10)
  unreachable

22:                                               ; preds = %30
  %23 = extractvalue { ptr, i64 } %7, 0
  %24 = getelementptr inbounds i8, ptr %23, i64 0
  %25 = load i8, ptr %24, align 1
  %26 = and i8 %25, 7
  %27 = zext i8 %26 to i21
  store i21 %27, ptr %5, align 4
  %28 = extractvalue { ptr, i64 } %7, 1
  %29 = icmp ult i64 1, %28
  br i1 %29, label %40, label %41

30:                                               ; preds = %12
  br label %22

31:                                               ; preds = %12
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %18)
  unreachable

32:                                               ; preds = %43
  %33 = load i21, ptr %5, align 4
  br i1 true, label %49, label %50

34:                                               ; preds = %40
  %35 = extractvalue { ptr, i64 } %7, 0
  %36 = getelementptr inbounds i8, ptr %35, i64 1
  %37 = load i8, ptr %36, align 1
  %38 = and i8 %37, -64
  %39 = icmp ne i8 %38, -128
  br i1 %39, label %42, label %43

40:                                               ; preds = %22
  br label %34

41:                                               ; preds = %22
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %28)
  unreachable

42:                                               ; preds = %34
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @227, i64 8, i1 false)
  ret void

43:                                               ; preds = %34
  br label %32

44:                                               ; preds = %49
  %45 = shl i21 %33, 6
  store i21 %45, ptr %5, align 4
  %46 = load i21, ptr %5, align 4
  %47 = extractvalue { ptr, i64 } %7, 1
  %48 = icmp ult i64 1, %47
  br i1 %48, label %60, label %61

49:                                               ; preds = %32
  br label %44

50:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @228)
  unreachable

51:                                               ; preds = %60
  %52 = extractvalue { ptr, i64 } %7, 0
  %53 = getelementptr inbounds i8, ptr %52, i64 1
  %54 = load i8, ptr %53, align 1
  %55 = and i8 %54, 63
  %56 = zext i8 %55 to i21
  %57 = or i21 %46, %56
  store i21 %57, ptr %5, align 4
  %58 = extractvalue { ptr, i64 } %7, 1
  %59 = icmp ult i64 2, %58
  br i1 %59, label %70, label %71

60:                                               ; preds = %44
  br label %51

61:                                               ; preds = %44
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %47)
  unreachable

62:                                               ; preds = %73
  %63 = load i21, ptr %5, align 4
  br i1 true, label %79, label %80

64:                                               ; preds = %70
  %65 = extractvalue { ptr, i64 } %7, 0
  %66 = getelementptr inbounds i8, ptr %65, i64 2
  %67 = load i8, ptr %66, align 1
  %68 = and i8 %67, -64
  %69 = icmp ne i8 %68, -128
  br i1 %69, label %72, label %73

70:                                               ; preds = %51
  br label %64

71:                                               ; preds = %51
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %58)
  unreachable

72:                                               ; preds = %64
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @227, i64 8, i1 false)
  ret void

73:                                               ; preds = %64
  br label %62

74:                                               ; preds = %79
  %75 = shl i21 %63, 6
  store i21 %75, ptr %5, align 4
  %76 = load i21, ptr %5, align 4
  %77 = extractvalue { ptr, i64 } %7, 1
  %78 = icmp ult i64 2, %77
  br i1 %78, label %90, label %91

79:                                               ; preds = %62
  br label %74

80:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @228)
  unreachable

81:                                               ; preds = %90
  %82 = extractvalue { ptr, i64 } %7, 0
  %83 = getelementptr inbounds i8, ptr %82, i64 2
  %84 = load i8, ptr %83, align 1
  %85 = and i8 %84, 63
  %86 = zext i8 %85 to i21
  %87 = or i21 %76, %86
  store i21 %87, ptr %5, align 4
  %88 = extractvalue { ptr, i64 } %7, 1
  %89 = icmp ult i64 3, %88
  br i1 %89, label %100, label %101

90:                                               ; preds = %74
  br label %81

91:                                               ; preds = %74
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %77)
  unreachable

92:                                               ; preds = %103
  %93 = load i21, ptr %5, align 4
  br i1 true, label %109, label %110

94:                                               ; preds = %100
  %95 = extractvalue { ptr, i64 } %7, 0
  %96 = getelementptr inbounds i8, ptr %95, i64 3
  %97 = load i8, ptr %96, align 1
  %98 = and i8 %97, -64
  %99 = icmp ne i8 %98, -128
  br i1 %99, label %102, label %103

100:                                              ; preds = %81
  br label %94

101:                                              ; preds = %81
  call fastcc void @builtin.panicOutOfBounds(i64 3, i64 %88)
  unreachable

102:                                              ; preds = %94
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @227, i64 8, i1 false)
  ret void

103:                                              ; preds = %94
  br label %92

104:                                              ; preds = %109
  %105 = shl i21 %93, 6
  store i21 %105, ptr %5, align 4
  %106 = load i21, ptr %5, align 4
  %107 = extractvalue { ptr, i64 } %7, 1
  %108 = icmp ult i64 3, %107
  br i1 %108, label %120, label %121

109:                                              ; preds = %92
  br label %104

110:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3609, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @228)
  unreachable

111:                                              ; preds = %120
  %112 = extractvalue { ptr, i64 } %7, 0
  %113 = getelementptr inbounds i8, ptr %112, i64 3
  %114 = load i8, ptr %113, align 1
  %115 = and i8 %114, 63
  %116 = zext i8 %115 to i21
  %117 = or i21 %106, %116
  store i21 %117, ptr %5, align 4
  %118 = load i21, ptr %5, align 4
  %119 = icmp ult i21 %118, 65536
  br i1 %119, label %125, label %126

120:                                              ; preds = %104
  br label %111

121:                                              ; preds = %104
  call fastcc void @builtin.panicOutOfBounds(i64 3, i64 %107)
  unreachable

122:                                              ; preds = %126
  %123 = load i21, ptr %5, align 4
  %124 = icmp ugt i21 %123, -983041
  br i1 %124, label %131, label %132

125:                                              ; preds = %111
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @229, i64 8, i1 false)
  ret void

126:                                              ; preds = %111
  br label %122

127:                                              ; preds = %132
  %128 = load i21, ptr %5, align 4
  %129 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %4, i32 0, i32 1
  store i16 0, ptr %129, align 2
  %130 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %4, i32 0, i32 0
  store i21 %128, ptr %130, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %4, i64 8, i1 false)
  ret void

131:                                              ; preds = %122
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @230, i64 8, i1 false)
  ret void

132:                                              ; preds = %122
  br label %127
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @debug.print__anon_6784(ptr nonnull readonly align 2 %0) unnamed_addr #0 {
  %2 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %fs.file.File, align 4
  %5 = alloca %fs.file.File, align 4
  call fastcc void @Thread.Mutex.lock(ptr nonnull align 4 @debug.stderr_mutex)
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %5)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %5, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %3, ptr nonnull readonly align 4 %4)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %3, i64 4, i1 false)
  %6 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6857"(ptr nonnull readonly align 4 %2, ptr nonnull readonly align 2 %0)
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  call fastcc void @Thread.Mutex.unlock(ptr nonnull align 4 @debug.stderr_mutex)
  ret void

9:                                                ; preds = %1
  br label %8

10:                                               ; preds = %1
  call fastcc void @Thread.Mutex.unlock(ptr nonnull align 4 @debug.stderr_mutex)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.x86_64.syscall4(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4) unnamed_addr #0 {
  %6 = call i64 asm sideeffect "syscall", "={rax},{rax},{rdi},{rsi},{rdx},{r10},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4)
  ret i64 %6
}

; Function Attrs: naked noreturn nounwind uwtable
define internal void @os.linux.x86_64.restore_rt() unnamed_addr #9 {
  call void asm sideeffect " syscall", "{rax},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 15)
  call coldcc void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fmt.bufPrint__anon_6798(ptr noalias nonnull sret({ { ptr, i64 }, i16, [6 x i8] }) %0, ptr nonnull align 1 %1, i64 %2, ptr nonnull readonly align 8 %3) unnamed_addr #0 {
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %7 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %8 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %9 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %10 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %11 = insertvalue { ptr, i64 } %10, i64 %2, 1
  %12 = extractvalue { ptr, i64 } %11, 0
  %13 = extractvalue { ptr, i64 } %11, 1
  call fastcc void @io.fixed_buffer_stream.fixedBufferStream__anon_6499(ptr sret(%"io.fixed_buffer_stream.FixedBufferStream([]u8)") %8, ptr nonnull align 1 %12, i64 %13)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %8, i64 24, i1 false)
  call fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).writer"(ptr sret(%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))") %7, ptr nonnull align 8 %9)
  %14 = call fastcc i16 @fmt.format__anon_6858(ptr nonnull readonly align 8 %7, ptr nonnull readonly align 8 %3)
  %15 = icmp ne i16 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %4
  %17 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 %14, ptr %17, align 2
  %18 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 24, i1 false)
  ret void

19:                                               ; preds = %4
  %20 = call fastcc { ptr, i64 } @"io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten"(ptr nonnull readonly align 8 %9)
  %21 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  store i16 0, ptr %21, align 2
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  store { ptr, i64 } %20, ptr %22, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.x86_64.syscall1(i64 %0, i64 %1) unnamed_addr #0 {
  %3 = call i64 asm sideeffect "syscall", "={rax},{rax},{rdi},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 %0, i64 %1)
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define internal fastcc void @Thread.Futex.LinuxImpl.wake(ptr nonnull readonly align 4 %0, i32 %1) unnamed_addr #0 {
  %3 = alloca { i32, i8, [3 x i8] }, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %4, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %"atomic.Atomic.Atomic(u32)", ptr %5, i32 0, i32 0
  call fastcc void @math.cast__anon_6871(ptr sret({ i32, i8, [3 x i8] }) %3, i32 %1)
  %7 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %3, i32 0, i32 1
  %8 = load i8, ptr %7, align 1
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %14, label %17

10:                                               ; preds = %17, %14
  %11 = phi i32 [ %16, %14 ], [ 2147483647, %17 ]
  %12 = call fastcc i64 @os.linux.futex_wake(ptr nonnull readonly align 4 %6, i32 129, i32 %11)
  %13 = call fastcc i16 @os.linux.getErrno(i64 %12)
  switch i16 %13, label %19 [
    i16 0, label %20
    i16 22, label %21
    i16 14, label %22
  ]

14:                                               ; preds = %2
  %15 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %3, i32 0, i32 0
  %16 = load i32, ptr %15, align 4
  br label %10

17:                                               ; preds = %2
  br label %10

18:                                               ; preds = %22, %21, %20
  ret void

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @232)
  unreachable

20:                                               ; preds = %10
  br label %18

21:                                               ; preds = %10
  br label %18

22:                                               ; preds = %10
  br label %18
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.futex_wait(ptr nonnull readonly align 4 %0, i32 %1, i32 %2, ptr readonly align 8 %3) unnamed_addr #0 {
  %5 = ptrtoint ptr %0 to i64
  %6 = ptrtoint ptr %3 to i64
  %7 = zext i32 %1 to i64
  %8 = zext i32 %2 to i64
  %9 = call fastcc i64 @os.linux.x86_64.syscall4(i64 202, i64 %5, i64 %7, i64 %8, i64 %6)
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define internal fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).write"(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull align 8 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca ptr, align 8
  %9 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %10 = insertvalue { ptr, i64 } %9, i64 %3, 1
  %11 = extractvalue { ptr, i64 } %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %20, label %21

13:                                               ; preds = %21
  %14 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 1
  %15 = load i64, ptr %14, align 8
  %16 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 0
  %17 = load { ptr, i64 }, ptr %16, align 8
  %18 = extractvalue { ptr, i64 } %17, 1
  %19 = icmp uge i64 %15, %18
  br i1 %19, label %28, label %29

20:                                               ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @233, i64 16, i1 false)
  ret void

21:                                               ; preds = %4
  br label %13

22:                                               ; preds = %29
  %23 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 1
  %24 = load i64, ptr %23, align 8
  %25 = extractvalue { ptr, i64 } %10, 1
  %26 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %24, i64 %25)
  %27 = extractvalue { i64, i1 } %26, 1
  br i1 %27, label %42, label %43

28:                                               ; preds = %13
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @234, i64 16, i1 false)
  ret void

29:                                               ; preds = %13
  br label %22

30:                                               ; preds = %60, %49
  %31 = phi i64 [ %50, %49 ], [ %61, %60 ]
  store ptr %1, ptr %8, align 8
  %32 = load ptr, ptr %8, align 8
  %33 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %32, i32 0, i32 0
  %34 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 1
  %35 = load i64, ptr %34, align 8
  %36 = load { ptr, i64 }, ptr %33, align 8
  %37 = extractvalue { ptr, i64 } %36, 0
  %38 = getelementptr inbounds i8, ptr %37, i64 %35
  %39 = add nuw i64 %35, %31
  %40 = extractvalue { ptr, i64 } %36, 1
  %41 = icmp ule i64 %39, %40
  br i1 %41, label %64, label %65

42:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

43:                                               ; preds = %22
  %44 = extractvalue { i64, i1 } %26, 0
  %45 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 0
  %46 = load { ptr, i64 }, ptr %45, align 8
  %47 = extractvalue { ptr, i64 } %46, 1
  %48 = icmp ule i64 %44, %47
  br i1 %48, label %49, label %51

49:                                               ; preds = %43
  %50 = extractvalue { ptr, i64 } %10, 1
  br label %30

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 0
  %53 = load { ptr, i64 }, ptr %52, align 8
  %54 = extractvalue { ptr, i64 } %53, 1
  %55 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 1
  %56 = load i64, ptr %55, align 8
  %57 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %54, i64 %56)
  %58 = extractvalue { i64, i1 } %57, 1
  br i1 %58, label %59, label %60

59:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %51
  %61 = extractvalue { i64, i1 } %57, 0
  br label %30

62:                                               ; preds = %64
  %63 = icmp ule i64 %35, %39
  br i1 %63, label %73, label %74

64:                                               ; preds = %30
  br label %62

65:                                               ; preds = %30
  call fastcc void @builtin.panicOutOfBounds(i64 %39, i64 %40)
  unreachable

66:                                               ; preds = %73
  %67 = insertvalue { ptr, i64 } poison, ptr %38, 0
  %68 = insertvalue { ptr, i64 } %67, i64 %31, 1
  store { ptr, i64 } %10, ptr %7, align 8
  %69 = load { ptr, i64 }, ptr %7, align 8
  %70 = extractvalue { ptr, i64 } %69, 0
  %71 = getelementptr inbounds i8, ptr %70, i64 0
  %72 = icmp ule i64 0, %31
  br i1 %72, label %78, label %79

73:                                               ; preds = %62
  br label %66

74:                                               ; preds = %62
  call fastcc void @builtin.panicOutOfBounds(i64 %35, i64 %39)
  unreachable

75:                                               ; preds = %78
  %76 = extractvalue { ptr, i64 } %69, 1
  %77 = icmp ule i64 %31, %76
  br i1 %77, label %82, label %83

78:                                               ; preds = %66
  br label %75

79:                                               ; preds = %66
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %31)
  unreachable

80:                                               ; preds = %82
  %81 = icmp ule i64 0, %31
  br i1 %81, label %90, label %91

82:                                               ; preds = %75
  br label %80

83:                                               ; preds = %75
  call fastcc void @builtin.panicOutOfBounds(i64 %31, i64 %76)
  unreachable

84:                                               ; preds = %90
  %85 = insertvalue { ptr, i64 } poison, ptr %71, 0
  %86 = insertvalue { ptr, i64 } %85, i64 %31, 1
  %87 = extractvalue { ptr, i64 } %68, 1
  %88 = extractvalue { ptr, i64 } %86, 1
  %89 = icmp eq i64 %87, %88
  br i1 %89, label %100, label %101

90:                                               ; preds = %80
  br label %84

91:                                               ; preds = %80
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %31)
  unreachable

92:                                               ; preds = %100
  %93 = extractvalue { ptr, i64 } %86, 0
  %94 = extractvalue { ptr, i64 } %68, 0
  %95 = getelementptr inbounds i8, ptr %93, i64 %87
  %96 = getelementptr inbounds i8, ptr %94, i64 %87
  %97 = icmp uge ptr %94, %95
  %98 = icmp uge ptr %93, %96
  %99 = or i1 %97, %98
  br i1 %99, label %110, label %111

100:                                              ; preds = %84
  br label %92

101:                                              ; preds = %84
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_len_mismatch__anon_3898, i64 40, ptr align 8 null, ptr nonnull readonly align 8 @235)
  unreachable

102:                                              ; preds = %110
  %103 = extractvalue { ptr, i64 } %68, 1
  %104 = extractvalue { ptr, i64 } %68, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %104, ptr align 1 %93, i64 %103, i1 false)
  store ptr %1, ptr %6, align 8
  %105 = load ptr, ptr %6, align 8
  %106 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %105, i32 0, i32 1
  %107 = load i64, ptr %106, align 8
  %108 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %107, i64 %31)
  %109 = extractvalue { i64, i1 } %108, 1
  br i1 %109, label %112, label %113

110:                                              ; preds = %92
  br label %102

111:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3899, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @235)
  unreachable

112:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %102
  %114 = extractvalue { i64, i1 } %108, 0
  store i64 %114, ptr %106, align 8
  %115 = icmp eq i64 %31, 0
  br i1 %115, label %119, label %120

116:                                              ; preds = %120
  %117 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  store i16 0, ptr %117, align 2
  %118 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  store i64 %31, ptr %118, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void

119:                                              ; preds = %113
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @234, i64 16, i1 false)
  ret void

120:                                              ; preds = %113
  br label %116
}

; Function Attrs: nounwind uwtable
define internal fastcc void @os.write(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, i32 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = alloca { i64, i16, [6 x i8] }, align 8
  %7 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %8 = insertvalue { ptr, i64 } %7, i64 %3, 1
  %9 = extractvalue { ptr, i64 } %8, 1
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %15, label %16

11:                                               ; preds = %16
  %12 = extractvalue { ptr, i64 } %8, 1
  %13 = call i64 @llvm.umin.i64(i64 2147479552, i64 %12)
  %14 = trunc i64 %13 to i31
  br label %17

15:                                               ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @236, i64 16, i1 false)
  ret void

16:                                               ; preds = %4
  br label %11

17:                                               ; preds = %22, %11
  %18 = extractvalue { ptr, i64 } %8, 0
  %19 = zext i31 %14 to i64
  %20 = call fastcc i64 @os.linux.write(i32 %1, ptr nonnull readonly align 1 %18, i64 %19)
  %21 = call fastcc i16 @os.linux.getErrno(i64 %20)
  switch i16 %21, label %23 [
    i16 0, label %27
    i16 4, label %30
    i16 22, label %31
    i16 14, label %32
    i16 11, label %33
    i16 9, label %34
    i16 89, label %35
    i16 122, label %36
    i16 27, label %37
    i16 5, label %38
    i16 28, label %39
    i16 1, label %40
    i16 32, label %41
    i16 104, label %42
    i16 16, label %43
  ]

22:                                               ; preds = %30
  br label %17

23:                                               ; preds = %17
  %24 = call fastcc i16 @os.unexpectedErrno(i16 %21)
  %25 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  store i16 %24, ptr %25, align 2
  %26 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void

27:                                               ; preds = %17
  %28 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 0, ptr %28, align 2
  %29 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  store i64 %20, ptr %29, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void

30:                                               ; preds = %17
  br label %22

31:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @237, i64 16, i1 false)
  ret void

32:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @238)
  unreachable

33:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @239, i64 16, i1 false)
  ret void

34:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @240, i64 16, i1 false)
  ret void

35:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6090, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @238)
  unreachable

36:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @241, i64 16, i1 false)
  ret void

37:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @242, i64 16, i1 false)
  ret void

38:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @243, i64 16, i1 false)
  ret void

39:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @244, i64 16, i1 false)
  ret void

40:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @245, i64 16, i1 false)
  ret void

41:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @246, i64 16, i1 false)
  ret void

42:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @247, i64 16, i1 false)
  ret void

43:                                               ; preds = %17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @248, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6857"(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 2 %1) unnamed_addr #0 {
  %3 = call fastcc i16 @fmt.format__anon_6872(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 2 %1)
  ret i16 %3
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.format__anon_6858(ptr nonnull readonly align 8 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %3 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %0, i64 8, i1 false)
  %4 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %3, ptr nonnull readonly align 1 @builtin.panicUnwrapError__anon_6674, i64 25)
  %5 = icmp ne i16 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  ret i16 %4

7:                                                ; preds = %2
  %8 = getelementptr inbounds { { ptr, i64 } }, ptr %1, i32 0, i32 0
  %9 = load { ptr, i64 }, ptr %8, align 8
  %10 = extractvalue { ptr, i64 } %9, 0
  %11 = extractvalue { ptr, i64 } %9, 1
  %12 = call fastcc i16 @fmt.formatType__anon_6870(ptr nonnull readonly align 1 %10, i64 %11, ptr nonnull readonly align 8 @231, ptr nonnull readonly align 8 %0, i64 3)
  %13 = icmp ne i16 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %7
  ret i16 %12

15:                                               ; preds = %7
  ret i16 0
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatType__anon_6870(ptr nonnull readonly align 1 %0, i64 %1, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 8 %3, i64 %4) unnamed_addr #0 {
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %8 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %9 = insertvalue { ptr, i64 } %8, i64 %1, 1
  %10 = icmp eq i64 %4, 0
  br i1 %10, label %16, label %18

11:                                               ; preds = %18
  store { ptr, i64 } %9, ptr %6, align 8
  %12 = load { ptr, i64 }, ptr %6, align 8
  %13 = extractvalue { ptr, i64 } %12, 0
  %14 = extractvalue { ptr, i64 } %12, 1
  %15 = call fastcc i16 @fmt.formatBuf__anon_6772(ptr nonnull readonly align 1 %13, i64 %14, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 8 %3)
  ret i16 %15

16:                                               ; preds = %5
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %3, i64 8, i1 false)
  %17 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %7, ptr nonnull readonly align 1 @fmt.formatType__anon_6413__anon_6749, i64 7)
  ret i16 %17

18:                                               ; preds = %5
  br label %11
}

; Function Attrs: nounwind uwtable
define internal fastcc void @math.cast__anon_6871(ptr noalias nonnull sret({ i32, i8, [3 x i8] }) %0, i32 %1) unnamed_addr #0 {
  %3 = alloca { i32, i8, [3 x i8] }, align 4
  %4 = icmp ugt i32 %1, 2147483647
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @250, i64 8, i1 false)
  ret void

6:                                                ; preds = %2
  %7 = sub i32 2147483647, %1
  %8 = icmp ule i32 %7, 2147483647
  br i1 %8, label %12, label %13

9:                                                ; preds = %12
  %10 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %3, i32 0, i32 0
  store i32 %1, ptr %10, align 4
  %11 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %3, i32 0, i32 1
  store i8 1, ptr %11, align 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %3, i64 8, i1 false)
  ret void

12:                                               ; preds = %6
  br label %9

13:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @251)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.futex_wake(ptr nonnull readonly align 4 %0, i32 %1, i32 %2) unnamed_addr #0 {
  %4 = ptrtoint ptr %0 to i64
  %5 = zext i32 %1 to i64
  %6 = zext i32 %2 to i64
  %7 = call fastcc i64 @os.linux.x86_64.syscall3(i64 202, i64 %4, i64 %5, i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.write(i32 %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = sext i32 %0 to i64
  %5 = ptrtoint ptr %1 to i64
  %6 = call fastcc i64 @os.linux.x86_64.syscall3(i64 1, i64 %4, i64 %5, i64 %2)
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.format__anon_6872(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 2 %1) unnamed_addr #0 {
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %0, i64 4, i1 false)
  %5 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %4, ptr nonnull readonly align 1 @os.unexpectedErrno__anon_6783, i64 18)
  %6 = icmp ne i16 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  ret i16 %5

8:                                                ; preds = %2
  %9 = getelementptr inbounds { i16 }, ptr %1, i32 0, i32 0
  %10 = load i16, ptr %9, align 2
  %11 = call fastcc i16 @fmt.formatType__anon_6884(i16 %10, ptr nonnull readonly align 8 @249, ptr nonnull readonly align 4 %0, i64 3)
  %12 = icmp ne i16 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  ret i16 %11

14:                                               ; preds = %8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %0, i64 4, i1 false)
  %15 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %3, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @os.unexpectedErrno__anon_6783, i64 21), i64 1)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  ret i16 %15

18:                                               ; preds = %14
  ret i16 0
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatType__anon_6884(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2, i64 %3) unnamed_addr #0 {
  %5 = call fastcc i16 @fmt.formatValue__anon_6892(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %5
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @os.linux.x86_64.syscall3(i64 %0, i64 %1, i64 %2, i64 %3) unnamed_addr #0 {
  %5 = call i64 asm sideeffect "syscall", "={rax},{rax},{rdi},{rsi},{rdx},~{rcx},~{r11},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 %0, i64 %1, i64 %2, i64 %3)
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatInt__anon_6896(i16 %0, i8 %1, i1 %2, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 4 %4) unnamed_addr #0 {
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca [2 x i8], align 1
  %8 = alloca [2 x i8], align 1
  %9 = alloca i64, align 8
  %10 = alloca i16, align 2
  %11 = alloca [6 x i64], align 8
  %12 = alloca [17 x i8], align 1
  %13 = icmp uge i8 %1, 2
  call fastcc void @debug.assert(i1 %13)
  %14 = call fastcc i16 @math.absCast__anon_6897(i16 %0)
  call void @llvm.memset.p0.i64(ptr align 1 %12, i8 -86, i64 17, i1 false)
  %15 = ptrtoint ptr %12 to i64
  %16 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 0
  store i64 1296236545, ptr %16, align 8
  %17 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 1
  store i64 %15, ptr %17, align 8
  %18 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 2
  store i64 17, ptr %18, align 8
  %19 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 3
  store i64 0, ptr %19, align 8
  %20 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 4
  store i64 0, ptr %20, align 8
  %21 = getelementptr inbounds [6 x i64], ptr %11, i64 0, i64 5
  store i64 0, ptr %21, align 8
  %22 = ptrtoint ptr %11 to i64
  %23 = call i64 asm sideeffect "rolq $$3,  %rdi ; rolq $$13, %rdi\0Arolq $$61, %rdi ; rolq $$51, %rdi\0Axchgq %rbx,%rbx", "={rdx},{rax},0,~{cc},~{memory}"(i64 %22, i64 0)
  store i16 %14, ptr %10, align 2
  store i64 17, ptr %9, align 8
  %24 = icmp eq i8 %1, 10
  br i1 %24, label %29, label %30

25:                                               ; preds = %90, %53
  %26 = load i64, ptr %9, align 8
  %27 = getelementptr inbounds i8, ptr %12, i64 %26
  %28 = icmp ule i64 %26, 17
  br i1 %28, label %132, label %133

29:                                               ; preds = %5
  br label %34

30:                                               ; preds = %5
  br label %91

31:                                               ; preds = %42
  %32 = load i16, ptr %10, align 2
  %33 = icmp ult i16 %32, 10
  br i1 %33, label %54, label %58

34:                                               ; preds = %37, %29
  %35 = load i16, ptr %10, align 2
  %36 = icmp uge i16 %35, 100
  br i1 %36, label %38, label %42

37:                                               ; preds = %44
  br label %34

38:                                               ; preds = %34
  %39 = load i64, ptr %9, align 8
  %40 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %39, i64 2)
  %41 = extractvalue { i64, i1 } %40, 1
  br i1 %41, label %43, label %44

42:                                               ; preds = %34
  br label %31

43:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %38
  %45 = extractvalue { i64, i1 } %40, 0
  store i64 %45, ptr %9, align 8
  %46 = load i64, ptr %9, align 8
  %47 = getelementptr inbounds i8, ptr %12, i64 %46
  %48 = load i16, ptr %10, align 2
  %49 = urem i16 %48, 100
  %50 = zext i16 %49 to i64
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %8, i64 %50)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %47, ptr align 1 %8, i64 2, i1 false)
  %51 = load i16, ptr %10, align 2
  %52 = udiv i16 %51, 100
  store i16 %52, ptr %10, align 2
  br label %37

53:                                               ; preds = %84, %81
  br label %25

54:                                               ; preds = %31
  %55 = load i64, ptr %9, align 8
  %56 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %55, i64 1)
  %57 = extractvalue { i64, i1 } %56, 1
  br i1 %57, label %62, label %63

58:                                               ; preds = %31
  %59 = load i64, ptr %9, align 8
  %60 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %59, i64 2)
  %61 = extractvalue { i64, i1 } %60, 1
  br i1 %61, label %83, label %84

62:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %54
  %64 = extractvalue { i64, i1 } %56, 0
  store i64 %64, ptr %9, align 8
  %65 = load i64, ptr %9, align 8
  %66 = icmp ult i64 %65, 17
  br i1 %66, label %72, label %73

67:                                               ; preds = %72
  %68 = getelementptr inbounds [17 x i8], ptr %12, i64 0, i64 %65
  %69 = load i16, ptr %10, align 2
  %70 = sub i16 255, %69
  %71 = icmp ule i16 %70, 255
  br i1 %71, label %78, label %79

72:                                               ; preds = %63
  br label %67

73:                                               ; preds = %63
  call fastcc void @builtin.panicOutOfBounds(i64 %65, i64 17)
  unreachable

74:                                               ; preds = %78
  %75 = trunc i16 %69 to i8
  %76 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 48, i8 %75)
  %77 = extractvalue { i8, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %67
  br label %74

79:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @252)
  unreachable

80:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %74
  %82 = extractvalue { i8, i1 } %76, 0
  store i8 %82, ptr %68, align 1
  br label %53

83:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %58
  %85 = extractvalue { i64, i1 } %60, 0
  store i64 %85, ptr %9, align 8
  %86 = load i64, ptr %9, align 8
  %87 = getelementptr inbounds i8, ptr %12, i64 %86
  %88 = load i16, ptr %10, align 2
  %89 = zext i16 %88 to i64
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %7, i64 %89)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %87, ptr align 1 %7, i64 2, i1 false)
  br label %53

90:                                               ; preds = %128
  br label %25

91:                                               ; preds = %127, %30
  %92 = load i16, ptr %10, align 2
  %93 = zext i8 %1 to i16
  %94 = icmp ne i16 %93, 0
  br i1 %94, label %100, label %101

95:                                               ; preds = %100
  %96 = urem i16 %92, %93
  %97 = load i64, ptr %9, align 8
  %98 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %97, i64 1)
  %99 = extractvalue { i64, i1 } %98, 1
  br i1 %99, label %102, label %103

100:                                              ; preds = %91
  br label %95

101:                                              ; preds = %91
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @252)
  unreachable

102:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3384, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %95
  %104 = extractvalue { i64, i1 } %98, 0
  store i64 %104, ptr %9, align 8
  %105 = load i64, ptr %9, align 8
  %106 = icmp ult i64 %105, 17
  br i1 %106, label %111, label %112

107:                                              ; preds = %111
  %108 = getelementptr inbounds [17 x i8], ptr %12, i64 0, i64 %105
  %109 = sub i16 255, %96
  %110 = icmp ule i16 %109, 255
  br i1 %110, label %119, label %120

111:                                              ; preds = %103
  br label %107

112:                                              ; preds = %103
  call fastcc void @builtin.panicOutOfBounds(i64 %105, i64 17)
  unreachable

113:                                              ; preds = %119
  %114 = trunc i16 %96 to i8
  %115 = call fastcc i8 @fmt.digitToChar(i8 %114, i1 %2)
  store i8 %115, ptr %108, align 1
  %116 = load i16, ptr %10, align 2
  %117 = zext i8 %1 to i16
  %118 = icmp ne i16 %117, 0
  br i1 %118, label %125, label %126

119:                                              ; preds = %107
  br label %113

120:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3387, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @252)
  unreachable

121:                                              ; preds = %125
  %122 = udiv i16 %116, %117
  store i16 %122, ptr %10, align 2
  %123 = load i16, ptr %10, align 2
  %124 = icmp eq i16 %123, 0
  br i1 %124, label %128, label %129

125:                                              ; preds = %113
  br label %121

126:                                              ; preds = %113
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3466, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @252)
  unreachable

127:                                              ; preds = %129
  br label %91

128:                                              ; preds = %121
  br label %90

129:                                              ; preds = %121
  br label %127

130:                                              ; preds = %132
  %131 = sub nuw i64 17, %26
  br i1 true, label %136, label %137

132:                                              ; preds = %25
  br label %130

133:                                              ; preds = %25
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %26, i64 17)
  unreachable

134:                                              ; preds = %136
  %135 = icmp ule i64 %26, 17
  br i1 %135, label %145, label %146

136:                                              ; preds = %130
  br label %134

137:                                              ; preds = %130
  call fastcc void @builtin.panicOutOfBounds(i64 17, i64 17)
  unreachable

138:                                              ; preds = %145
  %139 = insertvalue { ptr, i64 } poison, ptr %27, 0
  %140 = insertvalue { ptr, i64 } %139, i64 %131, 1
  store { ptr, i64 } %140, ptr %6, align 8
  %141 = load { ptr, i64 }, ptr %6, align 8
  %142 = extractvalue { ptr, i64 } %141, 0
  %143 = extractvalue { ptr, i64 } %141, 1
  %144 = call fastcc i16 @fmt.formatBuf__anon_6593(ptr nonnull readonly align 1 %142, i64 %143, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 4 %4)
  ret i16 %144

145:                                              ; preds = %134
  br label %138

146:                                              ; preds = %134
  call fastcc void @builtin.panicOutOfBounds(i64 %26, i64 17)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @math.absCast__anon_6897(i16 %0) unnamed_addr #0 {
  ret i16 %0
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatIntValue__anon_6893(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatInt__anon_6896(i16 %0, i8 10, i1 false, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc i16 @fmt.formatValue__anon_6892(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatIntValue__anon_6893(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %4
}

; Function Attrs: nounwind
declare i8 @llvm.x86.atomic.sub.cc.i8(ptr, i8, i32 immarg) #11

; Function Attrs: nounwind
declare i32 @llvm.x86.atomic.bts.i32(ptr, i8 immarg) #11

attributes #0 = { nounwind uwtable "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="-16bit-mode,-32bit-mode,-3dnow,-3dnowa,+64bit,-adx,-aes,-allow-light-256-bit,-amx-bf16,-amx-fp16,-amx-int8,-amx-tile,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxifma,-avxneconvert,-avxvnni,-avxvnniint8,-bmi,-bmi2,-branchfusion,-cldemote,-clflushopt,-clwb,-clzero,+cmov,-cmpccxadd,-crc32,-cx16,+cx8,-enqcmd,-ermsb,-f16c,-false-deps-getmant,-false-deps-lzcnt-tzcnt,-false-deps-mulc,-false-deps-mullq,-false-deps-perm,-false-deps-popcnt,-false-deps-range,-fast-11bytenop,-fast-15bytenop,-fast-7bytenop,-fast-bextr,-fast-gather,-fast-hops,-fast-lzcnt,-fast-movbe,-fast-scalar-fsqrt,-fast-scalar-shift-masks,-fast-shld-rotate,-fast-variable-crosslane-shuffle,-fast-variable-perlane-shuffle,-fast-vector-fsqrt,-fast-vector-shift-masks,-fma,-fma4,-fsgsbase,-fsrm,+fxsr,-gfni,-harden-sls-ijmp,-harden-sls-ret,-hreset,-idivl-to-divb,+idivq-to-divl,-invpcid,-kl,-lea-sp,-lea-uses-ag,-lvi-cfi,-lvi-load-hardening,-lwp,-lzcnt,+macrofusion,+mmx,-movbe,-movdir64b,-movdiri,-mwaitx,+nopl,-pad-short-functions,-pclmul,-pconfig,-pku,-popcnt,-prefer-128-bit,-prefer-256-bit,-prefer-mask-registers,-prefetchi,-prefetchwt1,-prfchw,-ptwrite,-raoint,-rdpid,-rdpru,-rdrnd,-rdseed,-retpoline,-retpoline-external-thunk,-retpoline-indirect-branches,-retpoline-indirect-calls,-rtm,-sahf,-sbb-dep-breaking,-serialize,-seses,-sgx,-sha,-shstk,+slow-3ops-lea,+slow-incdec,-slow-lea,-slow-pmaddwd,-slow-pmulld,-slow-shld,-slow-two-mem-ops,-slow-unaligned-mem-16,-slow-unaligned-mem-32,-soft-float,+sse,+sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-sse-unaligned-mem,-ssse3,-tagged-globals,-tbm,-tsxldtrk,-uintr,-use-glm-div-sqrt-costs,-use-slm-arith-costs,-vaes,-vpclmulqdq,+vzeroupper,-waitpkg,-wbnoinvd,-widekl,+x87,-xop,-xsave,-xsavec,-xsaveopt,-xsaves" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { cold noreturn nounwind uwtable "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="-16bit-mode,-32bit-mode,-3dnow,-3dnowa,+64bit,-adx,-aes,-allow-light-256-bit,-amx-bf16,-amx-fp16,-amx-int8,-amx-tile,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxifma,-avxneconvert,-avxvnni,-avxvnniint8,-bmi,-bmi2,-branchfusion,-cldemote,-clflushopt,-clwb,-clzero,+cmov,-cmpccxadd,-crc32,-cx16,+cx8,-enqcmd,-ermsb,-f16c,-false-deps-getmant,-false-deps-lzcnt-tzcnt,-false-deps-mulc,-false-deps-mullq,-false-deps-perm,-false-deps-popcnt,-false-deps-range,-fast-11bytenop,-fast-15bytenop,-fast-7bytenop,-fast-bextr,-fast-gather,-fast-hops,-fast-lzcnt,-fast-movbe,-fast-scalar-fsqrt,-fast-scalar-shift-masks,-fast-shld-rotate,-fast-variable-crosslane-shuffle,-fast-variable-perlane-shuffle,-fast-vector-fsqrt,-fast-vector-shift-masks,-fma,-fma4,-fsgsbase,-fsrm,+fxsr,-gfni,-harden-sls-ijmp,-harden-sls-ret,-hreset,-idivl-to-divb,+idivq-to-divl,-invpcid,-kl,-lea-sp,-lea-uses-ag,-lvi-cfi,-lvi-load-hardening,-lwp,-lzcnt,+macrofusion,+mmx,-movbe,-movdir64b,-movdiri,-mwaitx,+nopl,-pad-short-functions,-pclmul,-pconfig,-pku,-popcnt,-prefer-128-bit,-prefer-256-bit,-prefer-mask-registers,-prefetchi,-prefetchwt1,-prfchw,-ptwrite,-raoint,-rdpid,-rdpru,-rdrnd,-rdseed,-retpoline,-retpoline-external-thunk,-retpoline-indirect-branches,-retpoline-indirect-calls,-rtm,-sahf,-sbb-dep-breaking,-serialize,-seses,-sgx,-sha,-shstk,+slow-3ops-lea,+slow-incdec,-slow-lea,-slow-pmaddwd,-slow-pmulld,-slow-shld,-slow-two-mem-ops,-slow-unaligned-mem-16,-slow-unaligned-mem-32,-soft-float,+sse,+sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-sse-unaligned-mem,-ssse3,-tagged-globals,-tbm,-tsxldtrk,-uintr,-use-glm-div-sqrt-costs,-use-slm-arith-costs,-vaes,-vpclmulqdq,+vzeroupper,-waitpkg,-wbnoinvd,-widekl,+x87,-xop,-xsave,-xsavec,-xsaveopt,-xsaves" }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { naked nounwind uwtable "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="-16bit-mode,-32bit-mode,-3dnow,-3dnowa,+64bit,-adx,-aes,-allow-light-256-bit,-amx-bf16,-amx-fp16,-amx-int8,-amx-tile,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxifma,-avxneconvert,-avxvnni,-avxvnniint8,-bmi,-bmi2,-branchfusion,-cldemote,-clflushopt,-clwb,-clzero,+cmov,-cmpccxadd,-crc32,-cx16,+cx8,-enqcmd,-ermsb,-f16c,-false-deps-getmant,-false-deps-lzcnt-tzcnt,-false-deps-mulc,-false-deps-mullq,-false-deps-perm,-false-deps-popcnt,-false-deps-range,-fast-11bytenop,-fast-15bytenop,-fast-7bytenop,-fast-bextr,-fast-gather,-fast-hops,-fast-lzcnt,-fast-movbe,-fast-scalar-fsqrt,-fast-scalar-shift-masks,-fast-shld-rotate,-fast-variable-crosslane-shuffle,-fast-variable-perlane-shuffle,-fast-vector-fsqrt,-fast-vector-shift-masks,-fma,-fma4,-fsgsbase,-fsrm,+fxsr,-gfni,-harden-sls-ijmp,-harden-sls-ret,-hreset,-idivl-to-divb,+idivq-to-divl,-invpcid,-kl,-lea-sp,-lea-uses-ag,-lvi-cfi,-lvi-load-hardening,-lwp,-lzcnt,+macrofusion,+mmx,-movbe,-movdir64b,-movdiri,-mwaitx,+nopl,-pad-short-functions,-pclmul,-pconfig,-pku,-popcnt,-prefer-128-bit,-prefer-256-bit,-prefer-mask-registers,-prefetchi,-prefetchwt1,-prfchw,-ptwrite,-raoint,-rdpid,-rdpru,-rdrnd,-rdseed,-retpoline,-retpoline-external-thunk,-retpoline-indirect-branches,-retpoline-indirect-calls,-rtm,-sahf,-sbb-dep-breaking,-serialize,-seses,-sgx,-sha,-shstk,+slow-3ops-lea,+slow-incdec,-slow-lea,-slow-pmaddwd,-slow-pmulld,-slow-shld,-slow-two-mem-ops,-slow-unaligned-mem-16,-slow-unaligned-mem-32,-soft-float,+sse,+sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-sse-unaligned-mem,-ssse3,-tagged-globals,-tbm,-tsxldtrk,-uintr,-use-glm-div-sqrt-costs,-use-slm-arith-costs,-vaes,-vpclmulqdq,+vzeroupper,-waitpkg,-wbnoinvd,-widekl,+x87,-xop,-xsave,-xsavec,-xsaveopt,-xsaves" }
attributes #6 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #7 = { noreturn nounwind uwtable "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="-16bit-mode,-32bit-mode,-3dnow,-3dnowa,+64bit,-adx,-aes,-allow-light-256-bit,-amx-bf16,-amx-fp16,-amx-int8,-amx-tile,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxifma,-avxneconvert,-avxvnni,-avxvnniint8,-bmi,-bmi2,-branchfusion,-cldemote,-clflushopt,-clwb,-clzero,+cmov,-cmpccxadd,-crc32,-cx16,+cx8,-enqcmd,-ermsb,-f16c,-false-deps-getmant,-false-deps-lzcnt-tzcnt,-false-deps-mulc,-false-deps-mullq,-false-deps-perm,-false-deps-popcnt,-false-deps-range,-fast-11bytenop,-fast-15bytenop,-fast-7bytenop,-fast-bextr,-fast-gather,-fast-hops,-fast-lzcnt,-fast-movbe,-fast-scalar-fsqrt,-fast-scalar-shift-masks,-fast-shld-rotate,-fast-variable-crosslane-shuffle,-fast-variable-perlane-shuffle,-fast-vector-fsqrt,-fast-vector-shift-masks,-fma,-fma4,-fsgsbase,-fsrm,+fxsr,-gfni,-harden-sls-ijmp,-harden-sls-ret,-hreset,-idivl-to-divb,+idivq-to-divl,-invpcid,-kl,-lea-sp,-lea-uses-ag,-lvi-cfi,-lvi-load-hardening,-lwp,-lzcnt,+macrofusion,+mmx,-movbe,-movdir64b,-movdiri,-mwaitx,+nopl,-pad-short-functions,-pclmul,-pconfig,-pku,-popcnt,-prefer-128-bit,-prefer-256-bit,-prefer-mask-registers,-prefetchi,-prefetchwt1,-prfchw,-ptwrite,-raoint,-rdpid,-rdpru,-rdrnd,-rdseed,-retpoline,-retpoline-external-thunk,-retpoline-indirect-branches,-retpoline-indirect-calls,-rtm,-sahf,-sbb-dep-breaking,-serialize,-seses,-sgx,-sha,-shstk,+slow-3ops-lea,+slow-incdec,-slow-lea,-slow-pmaddwd,-slow-pmulld,-slow-shld,-slow-two-mem-ops,-slow-unaligned-mem-16,-slow-unaligned-mem-32,-soft-float,+sse,+sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-sse-unaligned-mem,-ssse3,-tagged-globals,-tbm,-tsxldtrk,-uintr,-use-glm-div-sqrt-costs,-use-slm-arith-costs,-vaes,-vpclmulqdq,+vzeroupper,-waitpkg,-wbnoinvd,-widekl,+x87,-xop,-xsave,-xsavec,-xsaveopt,-xsaves" }
attributes #8 = { cold nounwind uwtable "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="-16bit-mode,-32bit-mode,-3dnow,-3dnowa,+64bit,-adx,-aes,-allow-light-256-bit,-amx-bf16,-amx-fp16,-amx-int8,-amx-tile,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxifma,-avxneconvert,-avxvnni,-avxvnniint8,-bmi,-bmi2,-branchfusion,-cldemote,-clflushopt,-clwb,-clzero,+cmov,-cmpccxadd,-crc32,-cx16,+cx8,-enqcmd,-ermsb,-f16c,-false-deps-getmant,-false-deps-lzcnt-tzcnt,-false-deps-mulc,-false-deps-mullq,-false-deps-perm,-false-deps-popcnt,-false-deps-range,-fast-11bytenop,-fast-15bytenop,-fast-7bytenop,-fast-bextr,-fast-gather,-fast-hops,-fast-lzcnt,-fast-movbe,-fast-scalar-fsqrt,-fast-scalar-shift-masks,-fast-shld-rotate,-fast-variable-crosslane-shuffle,-fast-variable-perlane-shuffle,-fast-vector-fsqrt,-fast-vector-shift-masks,-fma,-fma4,-fsgsbase,-fsrm,+fxsr,-gfni,-harden-sls-ijmp,-harden-sls-ret,-hreset,-idivl-to-divb,+idivq-to-divl,-invpcid,-kl,-lea-sp,-lea-uses-ag,-lvi-cfi,-lvi-load-hardening,-lwp,-lzcnt,+macrofusion,+mmx,-movbe,-movdir64b,-movdiri,-mwaitx,+nopl,-pad-short-functions,-pclmul,-pconfig,-pku,-popcnt,-prefer-128-bit,-prefer-256-bit,-prefer-mask-registers,-prefetchi,-prefetchwt1,-prfchw,-ptwrite,-raoint,-rdpid,-rdpru,-rdrnd,-rdseed,-retpoline,-retpoline-external-thunk,-retpoline-indirect-branches,-retpoline-indirect-calls,-rtm,-sahf,-sbb-dep-breaking,-serialize,-seses,-sgx,-sha,-shstk,+slow-3ops-lea,+slow-incdec,-slow-lea,-slow-pmaddwd,-slow-pmulld,-slow-shld,-slow-two-mem-ops,-slow-unaligned-mem-16,-slow-unaligned-mem-32,-soft-float,+sse,+sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-sse-unaligned-mem,-ssse3,-tagged-globals,-tbm,-tsxldtrk,-uintr,-use-glm-div-sqrt-costs,-use-slm-arith-costs,-vaes,-vpclmulqdq,+vzeroupper,-waitpkg,-wbnoinvd,-widekl,+x87,-xop,-xsave,-xsavec,-xsaveopt,-xsaves" }
attributes #9 = { naked noreturn nounwind uwtable "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="-16bit-mode,-32bit-mode,-3dnow,-3dnowa,+64bit,-adx,-aes,-allow-light-256-bit,-amx-bf16,-amx-fp16,-amx-int8,-amx-tile,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxifma,-avxneconvert,-avxvnni,-avxvnniint8,-bmi,-bmi2,-branchfusion,-cldemote,-clflushopt,-clwb,-clzero,+cmov,-cmpccxadd,-crc32,-cx16,+cx8,-enqcmd,-ermsb,-f16c,-false-deps-getmant,-false-deps-lzcnt-tzcnt,-false-deps-mulc,-false-deps-mullq,-false-deps-perm,-false-deps-popcnt,-false-deps-range,-fast-11bytenop,-fast-15bytenop,-fast-7bytenop,-fast-bextr,-fast-gather,-fast-hops,-fast-lzcnt,-fast-movbe,-fast-scalar-fsqrt,-fast-scalar-shift-masks,-fast-shld-rotate,-fast-variable-crosslane-shuffle,-fast-variable-perlane-shuffle,-fast-vector-fsqrt,-fast-vector-shift-masks,-fma,-fma4,-fsgsbase,-fsrm,+fxsr,-gfni,-harden-sls-ijmp,-harden-sls-ret,-hreset,-idivl-to-divb,+idivq-to-divl,-invpcid,-kl,-lea-sp,-lea-uses-ag,-lvi-cfi,-lvi-load-hardening,-lwp,-lzcnt,+macrofusion,+mmx,-movbe,-movdir64b,-movdiri,-mwaitx,+nopl,-pad-short-functions,-pclmul,-pconfig,-pku,-popcnt,-prefer-128-bit,-prefer-256-bit,-prefer-mask-registers,-prefetchi,-prefetchwt1,-prfchw,-ptwrite,-raoint,-rdpid,-rdpru,-rdrnd,-rdseed,-retpoline,-retpoline-external-thunk,-retpoline-indirect-branches,-retpoline-indirect-calls,-rtm,-sahf,-sbb-dep-breaking,-serialize,-seses,-sgx,-sha,-shstk,+slow-3ops-lea,+slow-incdec,-slow-lea,-slow-pmaddwd,-slow-pmulld,-slow-shld,-slow-two-mem-ops,-slow-unaligned-mem-16,-slow-unaligned-mem-32,-soft-float,+sse,+sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-sse-unaligned-mem,-ssse3,-tagged-globals,-tbm,-tsxldtrk,-uintr,-use-glm-div-sqrt-costs,-use-slm-arith-costs,-vaes,-vpclmulqdq,+vzeroupper,-waitpkg,-wbnoinvd,-widekl,+x87,-xop,-xsave,-xsavec,-xsaveopt,-xsaves" }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { nounwind }
