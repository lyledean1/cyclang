; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-macosx11.7.1-unknown"

%compiler_rt.atomics.SpinlockTable = type { [64 x %compiler_rt.atomics.SpinlockTable.Spinlock] }
%compiler_rt.atomics.SpinlockTable.Spinlock = type { i64, [56 x i8] }
%Thread.Mutex = type { %Thread.Mutex.DebugImpl }
%Thread.Mutex.DebugImpl = type { %"atomic.Atomic.Atomic(u64)", %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", [4 x i8] }
%"atomic.Atomic.Atomic(u64)" = type { i64 }
%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))" = type { %fs.file.File }
%fs.file.File = type { i32 }
%fmt.FormatOptions = type { { i64, i8, [7 x i8] }, { i64, i8, [7 x i8] }, i2, i8, [6 x i8] }
%"atomic.Atomic.Atomic(u8)" = type { i8 }
%macho.mach_header_64 = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%c.darwin.Sigaction = type { %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", i32, i32 }
%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))" = type { ptr }
%"io.fixed_buffer_stream.FixedBufferStream([]u8)" = type { { ptr, i64 }, i64 }
%"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472" = type { i16, i16 }
%"compiler_rt.common.HalveInt(i128,false)" = type { i128 }
%"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490" = type { i64, i64 }
%"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508" = type { i32, i32 }
%math.F80 = type { i64, i16, [6 x i8] }
%"compiler_rt.mulc3.Complex(f16)" = type { half, half }
%"compiler_rt.mulc3.Complex(f32)" = type { float, float }
%"compiler_rt.mulc3.Complex(f64)" = type { double, double }
%"compiler_rt.mulc3.Complex(f80)" = type { i80, i80 }
%"compiler_rt.mulc3.Complex(f128)" = type { fp128, fp128 }
%"math.frexp.Frexp(f64)" = type { double, i32, [4 x i8] }
%"math.frexp.Frexp(f128)" = type { fp128, i32, [12 x i8] }

@builtin.panic_messages.integer_overflow__anon_3450 = internal unnamed_addr constant [17 x i8] c"integer overflow\00", align 1
@0 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.cast_truncated_data__anon_3452 = internal unnamed_addr constant [28 x i8] c"integer cast truncated bits\00", align 1
@1 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@2 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@3 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@4 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@5 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@6 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@7 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@8 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@9 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@10 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@11 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@12 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@13 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@14 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@15 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@16 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@17 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@18 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@19 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@20 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@21 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.divide_by_zero__anon_3531 = internal unnamed_addr constant [17 x i8] c"division by zero\00", align 1
@22 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@23 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.negative_to_unsigned__anon_3532 = internal unnamed_addr constant [51 x i8] c"attempt to cast negative value to unsigned integer\00", align 1
@compiler_rt.absv.absv__anon_3538 = internal unnamed_addr constant [27 x i8] c"compiler_rt absv: overflow\00", align 1
@24 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@25 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@26 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.negv.negvXi__anon_3539 = internal unnamed_addr constant [27 x i8] c"compiler_rt negv: overflow\00", align 1
@27 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@28 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@29 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@30 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@31 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@32 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@33 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@34 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@35 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@36 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@37 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@38 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@39 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@40 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@41 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@42 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@43 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@44 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@45 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@46 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@47 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@48 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@49 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@50 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@51 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@52 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@53 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@54 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@55 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@56 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@57 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@58 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@59 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@60 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@61 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@62 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.shift_rhs_too_big__anon_3577 = internal unnamed_addr constant [43 x i8] c"shift amount is greater than the type size\00", align 1
@63 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@64 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@65 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@66 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@67 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@68 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@69 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@70 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@71 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@72 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@73 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@74 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@75 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@76 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@77 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@78 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@79 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@80 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@81 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@82 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@83 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@84 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@85 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@86 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@87 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@88 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@89 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@90 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@91 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@92 = private unnamed_addr constant [2 x float] [float 5.000000e-01, float -5.000000e-01], align 4
@builtin.panic_messages.integer_part_out_of_bounds__anon_3780 = internal unnamed_addr constant [51 x i8] c"integer part of floating point value out of bounds\00", align 1
@93 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@94 = private unnamed_addr constant [2 x double] [double 5.000000e-01, double -5.000000e-01], align 8
@95 = private unnamed_addr constant [16 x double] [double 0x3FE6A09E667F3BCD, double 0x3FE7A11473EB0187, double 0x3FE8ACE5422AA0DB, double 0x3FE9C49182A3F090, double 0x3FEAE89F995AD3AD, double 0x3FEC199BDD85529C, double 0x3FED5818DCFBA487, double 0x3FEEA4AFA2A490DA, double 1.000000e+00, double 0x3FF0B5586CF9890F, double 0x3FF172B83C7D517B, double 0x3FF2387A6E756238, double 0x3FF306FE0A31B715, double 0x3FF3DEA64C123422, double 0x3FF4BFDAD5362A27, double 0x3FF5AB07DD485429], align 8
@96 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@97 = private unnamed_addr constant [512 x double] [double 0x3FE6A09E667F3D5D, double 0x3D39880000000000, double 0x3FE6B052FA751744, double 0x3CD8000000000000, double 0x3FE6C012750BD9FE, double 0xBD28780000000000, double 0x3FE6CFDCDDD476BF, double 0x3D1EC00000000000, double 0x3FE6DFB23C651A29, double 0xBCD8000000000000, double 0x3FE6EF9298593AE3, double 0xBCBC000000000000, double 0x3FE6FF7DF9519386, double 0xBD2FD80000000000, double 0x3FE70F7466F42DA3, double 0xBD2C880000000000, double 0x3FE71F75E8EC5FC3, double 0x3D13C00000000000, double 0x3FE72F8286EACF05, double 0xBD38300000000000, double 0x3FE73F9A48A58152, double 0xBD00C00000000000, double 0x3FE74FBD35D7CCFC, double 0x3D2F880000000000, double 0x3FE75FEB564267F1, double 0x3D03E00000000000, double 0x3FE77024B1AB6D48, double 0xBD27D00000000000, double 0x3FE780694FDE5D38, double 0xBCDD000000000000, double 0x3FE790B938AC1D00, double 0x3CE3000000000000, double 0x3FE7A11473EB0178, double 0xBCED000000000000, double 0x3FE7B17B0976D060, double 0x3D20400000000000, double 0x3FE7C1ED0130C133, double 0x3CA0000000000000, double 0x3FE7D26A62FF8636, double 0xBD26900000000000, double 0x3FE7E2F336CF4E3B, double 0xBD02E00000000000, double 0x3FE7F3878491C3E8, double 0xBD24580000000000, double 0x3FE80427543E1B4E, double 0x3D33000000000000, double 0x3FE814D2ADD1071A, double 0x3D0F000000000000, double 0x3FE82589994CCD7E, double 0xBD21C00000000000, double 0x3FE8364C1EB942D0, double 0x3D29D00000000000, double 0x3FE8471A4623CAB5, double 0x3D47100000000000, double 0x3FE857F4179F5BBC, double 0x3D22600000000000, double 0x3FE868D99B4491AF, double 0xBD32C40000000000, double 0x3FE879CAD931A395, double 0xBD23000000000000, double 0x3FE88AC7D98A65B8, double 0xBD2A800000000000, double 0x3FE89BD0A4785800, double 0xBCED000000000000, double 0x3FE8ACE5422AA223, double 0x3D33280000000000, double 0x3FE8BE05BAD619FA, double 0x3D42B40000000000, double 0x3FE8CF3216B54383, double 0xBD2ED00000000000, double 0x3FE8E06A5E08664C, double 0xBD20500000000000, double 0x3FE8F1AE99157807, double 0x3D28280000000000, double 0x3FE902FED0282C0E, double 0xBD1CB00000000000, double 0x3FE9145B0B91FF96, double 0xBD05E00000000000, double 0x3FE925C353AA2FF9, double 0x3CF5400000000000, double 0x3FE93737B0CDC64A, double 0x3D17200000000000, double 0x3FE948B82B5F98AE, double 0xBD09000000000000, double 0x3FE95A44CBC852CB, double 0x3D25680000000000, double 0x3FE96BDD9A766F21, double 0xBD36D00000000000, double 0x3FE97D829FDE4E2A, double 0xBD01000000000000, double 0x3FE98F33E47A23A3, double 0x3D2D000000000000, double 0x3FE9A0F170CA0604, double 0xBD38A40000000000, double 0x3FE9B2BB4D53FF89, double 0x3D355C0000000000, double 0x3FE9C49182A3F15B, double 0x3D26B80000000000, double 0x3FE9D674194BB8C5, double 0xBCEC000000000000, double 0x3FE9E86319E3238E, double 0x3D17D00000000000, double 0x3FE9FA5E8D07F302, double 0x3D16400000000000, double 0x3FEA0C667B5DE54D, double 0xBCF5000000000000, double 0x3FEA1E7AED8EB8F6, double 0x3D09E00000000000, double 0x3FEA309BEC4A2E27, double 0x3D2AD80000000000, double 0x3FEA42C980460A5D, double 0xBD1AF00000000000, double 0x3FEA5503B23E259B, double 0x3D0B600000000000, double 0x3FEA674A8AF46213, double 0x3D38880000000000, double 0x3FEA799E1330B3A7, double 0x3D11200000000000, double 0x3FEA8BFE53C12E8D, double 0x3D06C00000000000, double 0x3FEA9E6B5579FCD2, double 0xBD29B80000000000, double 0x3FEAB0E521356FB8, double 0x3D2B700000000000, double 0x3FEAC36BBFD3F381, double 0x3CD9000000000000, double 0x3FEAD5FF3A3C2780, double 0x3CE4000000000000, double 0x3FEAE89F995AD2A3, double 0xBD2C900000000000, double 0x3FEAFB4CE622F367, double 0x3D16500000000000, double 0x3FEB0E07298DB790, double 0x3D2FD40000000000, double 0x3FEB20CE6C9A89A9, double 0x3D12700000000000, double 0x3FEB33A2B84F1A4B, double 0x3D4D470000000000, double 0x3FEB468415B747E7, double 0xBD38380000000000, double 0x3FEB59728DE5593A, double 0x3C98000000000000, double 0x3FEB6C6E29F1C56A, double 0x3D0AD00000000000, double 0x3FEB7F76F2FB5E50, double 0x3CDE800000000000, double 0x3FEB928CF22749B2, double 0xBD04C00000000000, double 0x3FEBA5B030A10603, double 0xBD0D700000000000, double 0x3FEBB8E0B79A6F66, double 0x3D0D900000000000, double 0x3FEBCC1E904BC1FF, double 0x3D02A00000000000, double 0x3FEBDF69C3F3A16F, double 0xBD1F780000000000, double 0x3FEBF2C25BD71DB8, double 0xBD10A00000000000, double 0x3FEC06286141B2E9, double 0xBD11400000000000, double 0x3FEC199BDD8552E0, double 0x3D0BE00000000000, double 0x3FEC2D1CD9FA64EE, double 0xBD09400000000000, double 0x3FEC40AB5FFFD02F, double 0xBD0ED00000000000, double 0x3FEC544778FAFD15, double 0x3D39660000000000, double 0x3FEC67F12E57D0CB, double 0xBD1A100000000000, double 0x3FEC7BA88988C1B6, double 0xBD58458000000000, double 0x3FEC8F6D9406E733, double 0xBD1A480000000000, double 0x3FECA3405751C4DF, double 0x3CCB000000000000, double 0x3FECB720DCEF9094, double 0x3D01400000000000, double 0x3FECCB0F2E6D1689, double 0x3CF0200000000000, double 0x3FECDF0B555DC412, double 0x3CF3600000000000, double 0x3FECF3155B5BAB3B, double 0xBD06900000000000, double 0x3FED072D4A0789BC, double 0x3D09A00000000000, double 0x3FED1B532B08C8FA, double 0xBD15E00000000000, double 0x3FED2F87080D8A85, double 0x3D1D280000000000, double 0x3FED43C8EACAA203, double 0x3D01A00000000000, double 0x3FED5818DCFBA491, double 0x3CDF000000000000, double 0x3FED6C76E862E6A1, double 0xBD03A00000000000, double 0x3FED80E316C9834E, double 0xBD0CD80000000000, double 0x3FED955D71FF6090, double 0x3CF4C00000000000, double 0x3FEDA9E603DB32AE, double 0x3CFF900000000000, double 0x3FEDBE7CD63A8325, double 0x3CE9800000000000, double 0x3FEDD321F301B445, double 0xBCF5200000000000, double 0x3FEDE7D5641C05BF, double 0xBD1D700000000000, double 0x3FEDFC97337B9AEC, double 0xBD16140000000000, double 0x3FEE11676B197D5E, double 0x3D0B480000000000, double 0x3FEE264614F5A3E7, double 0x3D40CE0000000000, double 0x3FEE3B333B16EE5C, double 0x3D0C680000000000, double 0x3FEE502EE78B3FB4, double 0xBD09300000000000, double 0x3FEE653924676D68, double 0xBCE5000000000000, double 0x3FEE7A51FBC74C44, double 0xBD07F80000000000, double 0x3FEE8F7977CDB726, double 0xBCF3700000000000, double 0x3FEEA4AFA2A490E8, double 0x3CE5D00000000000, double 0x3FEEB9F4867CCAE4, double 0x3D161A0000000000, double 0x3FEECF482D8E680D, double 0x3CF5500000000000, double 0x3FEEE4AAA2188514, double 0x3CC6400000000000, double 0x3FEEFA1BEE615A13, double 0xBCEE800000000000, double 0x3FEF0F9C1CB64106, double 0xBCFA880000000000, double 0x3FEF252B376BB963, double 0xBD2C900000000000, double 0x3FEF3AC948DD7275, double 0x3CAA000000000000, double 0x3FEF50765B6E4524, double 0xBCF4F00000000000, double 0x3FEF6632798844FD, double 0x3CCA800000000000, double 0x3FEF7BFDAD9CBE38, double 0x3CFABC0000000000, double 0x3FEF91D802243C82, double 0xBCD4600000000000, double 0x3FEFA7C1819E908E, double 0xBD0B0C0000000000, double 0x3FEFBDBA3692D511, double 0xBCC0E00000000000, double 0x3FEFD3C22B8F7194, double 0xBD10DE8000000000, double 0x3FEFE9D96B2A23EE, double 0x3CEE430000000000, double 1.000000e+00, double 0.000000e+00, double 0x3FF00B1AFA5ABCBE, double 0xBCB3400000000000, double 0x3FF0163DA9FB3303, double 0xBD12170000000000, double 0x3FF02168143B0282, double 0x3CBA400000000000, double 0x3FF02C9A3E77806C, double 0x3CEF980000000000, double 0x3FF037D42E11BBCA, double 0xBCC7400000000000, double 0x3FF04315E86E7F89, double 0x3CD8300000000000, double 0x3FF04E5F72F65467, double 0xBD1A3F0000000000, double 0x3FF059B0D315855A, double 0xBD02840000000000, double 0x3FF0650A0E3C1F95, double 0x3CF1600000000000, double 0x3FF0706B29DDF71A, double 0x3D15240000000000, double 0x3FF07BD42B72A82D, double 0xBCE9A00000000000, double 0x3FF0874518759BD0, double 0x3CE6400000000000, double 0x3FF092BDF66607C8, double 0xBD00780000000000, double 0x3FF09E3ECAC6F383, double 0xBC98000000000000, double 0x3FF0A9C79B1F3930, double 0x3CFFA00000000000, double 0x3FF0B5586CF988FC, double 0xBCFAC80000000000, double 0x3FF0C0F145E46C8A, double 0x3CD9C00000000000, double 0x3FF0CC922B724816, double 0x3D05200000000000, double 0x3FF0D83B23395DD8, double 0xBCFAD00000000000, double 0x3FF0E3EC32D3D1F3, double 0x3D1BAC0000000000, double 0x3FF0EFA55FDFA9A6, double 0xBD04E80000000000, double 0x3FF0FB66AFFED2F0, double 0xBD0D300000000000, double 0x3FF1073028D7234B, double 0x3CF1500000000000, double 0x3FF11301D0125B5B, double 0x3CEC000000000000, double 0x3FF11EDBAB5E2AF9, double 0x3D16BC0000000000, double 0x3FF12ABDC06C31D5, double 0x3CE8400000000000, double 0x3FF136A814F2047D, double 0xBD0ED00000000000, double 0x3FF1429AAEA92DE9, double 0x3CE8E00000000000, double 0x3FF14E95934F3138, double 0x3CEB400000000000, double 0x3FF15A98C8A58E71, double 0x3D05300000000000, double 0x3FF166A45471C3DF, double 0x3D03380000000000, double 0x3FF172B83C7D5211, double 0x3D28D40000000000, double 0x3FF17ED48695BB9F, double 0xBD05D00000000000, double 0x3FF18AF9388C8D93, double 0xBD1C880000000000, double 0x3FF1972658375D66, double 0x3D11F00000000000, double 0x3FF1A35BEB6FCBA7, double 0x3D10480000000000, double 0x3FF1AF99F81387E3, double 0xBD47390000000000, double 0x3FF1BBE084045D54, double 0x3D24E40000000000, double 0x3FF1C82F95281C43, double 0xBD0A200000000000, double 0x3FF1D4873168B9B2, double 0x3CE3800000000000, double 0x3FF1E0E75EB44031, double 0x3CEAC00000000000, double 0x3FF1ED5022FCD938, double 0x3D01900000000000, double 0x3FF1F9C18438CDF7, double 0xBD1B780000000000, double 0x3FF2063B88628D8F, double 0x3D2D940000000000, double 0x3FF212BE3578A81E, double 0x3CD8000000000000, double 0x3FF21F49917DDD41, double 0x3D2B340000000000, double 0x3FF22BDDA2791323, double 0x3D19F80000000000, double 0x3FF2387A6E7561E7, double 0xBD19C80000000000, double 0x3FF2451FFB821427, double 0x3D02300000000000, double 0x3FF251CE4FB2A602, double 0xBD13480000000000, double 0x3FF25E85711ECEB0, double 0x3D12700000000000, double 0x3FF26B4565E27D16, double 0x3D11D00000000000, double 0x3FF2780E341DE00F, double 0x3D31EE0000000000, double 0x3FF284DFE1F5633E, double 0xBD14C00000000000, double 0x3FF291BA7591BB30, double 0xBD13D80000000000, double 0x3FF29E9DF51FDF09, double 0x3D08B00000000000, double 0x3FF2AB8A66D10E9B, double 0xBD227C0000000000, double 0x3FF2B87FD0DADA3A, double 0x3D2A340000000000, double 0x3FF2C57E39771AF9, double 0xBD10800000000000, double 0x3FF2D285A6E402D9, double 0xBD0ED00000000000, double 0x3FF2DF961F641579, double 0xBCF4200000000000, double 0x3FF2ECAFA93E2ECF, double 0xBD24980000000000, double 0x3FF2F9D24ABD8822, double 0xBD16300000000000, double 0x3FF306FE0A31B625, double 0xBD32360000000000, double 0x3FF31432EDEEA50B, double 0xBD70DF8000000000, double 0x3FF32170FC4CD7B8, double 0xBD22480000000000, double 0x3FF32EB83BA8E9A2, double 0xBD25980000000000, double 0x3FF33C08B2641766, double 0x3D1ED00000000000, double 0x3FF3496266E3FA27, double 0xBCDC000000000000, double 0x3FF356C55F929F0F, double 0xBD30D80000000000, double 0x3FF36431A2DE88B9, double 0x3D22C80000000000, double 0x3FF371A7373AAA39, double 0x3D20600000000000, double 0x3FF37F26231E74FE, double 0xBD16600000000000, double 0x3FF38CAE6D05D838, double 0xBD0AE00000000000, double 0x3FF39A401B713EC3, double 0xBD44720000000000, double 0x3FF3A7DB34E5A020, double 0x3D08200000000000, double 0x3FF3B57FBFEC6E95, double 0x3D3E800000000000, double 0x3FF3C32DC313A8F2, double 0x3CEF800000000000, double 0x3FF3D0E544EDE122, double 0xBD17A00000000000, double 0x3FF3DEA64C1234BB, double 0x3D26300000000000, double 0x3FF3EC70DF1C4ECC, double 0xBD48A60000000000, double 0x3FF3FA4504AC7E8C, double 0xBD3CDC0000000000, double 0x3FF40822C367A0BB, double 0x3D25B80000000000, double 0x3FF4160A21F72E95, double 0x3D1EC00000000000, double 0x3FF423FB27094646, double 0xBD13600000000000, double 0x3FF431F5D950A920, double 0x3D23980000000000, double 0x3FF43FFA3F84B9EB, double 0x3CFA000000000000, double 0x3FF44E0860618919, double 0xBCF6C00000000000, double 0x3FF45C2042A7D201, double 0xBD0BC00000000000, double 0x3FF46A41ED1D0016, double 0xBD12800000000000, double 0x3FF4786D668B3326, double 0x3D30E00000000000, double 0x3FF486A2B5C13C00, double 0xBD2D400000000000, double 0x3FF494E1E192AF04, double 0x3D0C200000000000, double 0x3FF4A32AF0D7D372, double 0xBD1E500000000000, double 0x3FF4B17DEA6DB801, double 0x3D07800000000000, double 0x3FF4BFDAD53629E1, double 0xBD13800000000000, double 0x3FF4CE41B817C132, double 0x3D00800000000000, double 0x3FF4DCB299FDDDDB, double 0x3D2C700000000000, double 0x3FF4EB2D81D8AB96, double 0xBD1CE00000000000, double 0x3FF4F9B2769D2D02, double 0x3D19200000000000, double 0x3FF508417F4531C1, double 0xBD08C00000000000, double 0x3FF516DAA2CF662A, double 0xBCFA000000000000, double 0x3FF5257DE83F51EA, double 0x3D4A080000000000, double 0x3FF5342B569D4EDA, double 0xBD26D80000000000, double 0x3FF542E2F4F6AC1A, double 0xBD32440000000000, double 0x3FF551A4CA5D94DB, double 0x3D483C0000000000, double 0x3FF56070DDE9116B, double 0x3D24B00000000000, double 0x3FF56F4736B529DE, double 0x3D415A0000000000, double 0x3FF57E27DBE2C40E, double 0xBD29E00000000000, double 0x3FF58D12D497C76F, double 0xBD23080000000000, double 0x3FF59C0827FF0B4C, double 0x3D4DEC0000000000, double 0x3FF5AB07DD485427, double 0xBCC4000000000000, double 0x3FF5BA11FBA87AF4, double 0x3D30080000000000, double 0x3FF5C9268A59460B, double 0xBD26C80000000000, double 0x3FF5D84590998E3F, double 0x3D469A0000000000, double 0x3FF5E76F15AD20E1, double 0xBD1B400000000000, double 0x3FF5F6A320DCEBCA, double 0x3D17700000000000, double 0x3FF605E1B976DCB8, double 0x3D26F80000000000, double 0x3FF6152AE6CDF715, double 0x3D01000000000000, double 0x3FF6247EB03A5531, double 0xBD15D00000000000, double 0x3FF633DD1D1929B5, double 0xBD12D00000000000, double 0x3FF6434634CCC313, double 0xBCEA800000000000, double 0x3FF652B9FEBC8EFA, double 0xBD28600000000000, double 0x3FF6623882553397, double 0x3D71FE0000000000, double 0x3FF671C1C708328E, double 0xBD37200000000000, double 0x3FF68155D44CA97E, double 0x3CE6800000000000, double 0x3FF690F4B19E9471, double 0xBD29780000000000], align 8
@98 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@99 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@100 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@101 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@102 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@103 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@104 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@105 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@106 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@107 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@108 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@109 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@110 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@111 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@112 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@113 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@114 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.memcpy_len_mismatch__anon_3866 = internal unnamed_addr constant [41 x i8] c"@memcpy arguments have non-equal lengths\00", align 1
@115 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.memcpy_alias__anon_3867 = internal unnamed_addr constant [24 x i8] c"@memcpy arguments alias\00", align 1
@compiler_rt.atomics.spinlocks = internal unnamed_addr global %compiler_rt.atomics.SpinlockTable { [64 x %compiler_rt.atomics.SpinlockTable.Spinlock] [%compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }, %compiler_rt.atomics.SpinlockTable.Spinlock { i64 0, [56 x i8] undef }] }, align 64
@116 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@117 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@118 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@119 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@compiler_rt.memset.__memset__anon_4001 = internal unnamed_addr constant [16 x i8] c"buffer overflow\00", align 1
@120 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@debug.stderr_mutex = internal unnamed_addr global %Thread.Mutex { %Thread.Mutex.DebugImpl { %"atomic.Atomic.Atomic(u64)" zeroinitializer, %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))" zeroinitializer, [4 x i8] undef } }, align 8
@121 = private unnamed_addr constant [2 x i32] zeroinitializer, align 4
@122 = private unnamed_addr constant [2 x i64] zeroinitializer, align 8
@123 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@124 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@125 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@126 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@127 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@128 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@129 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@130 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@131 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@132 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@133 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@134 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@135 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@136 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@137 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@138 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@139 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@140 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@141 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@142 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@143 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@144 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@145 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@146 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@147 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@148 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@149 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@150 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@151 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@152 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@153 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@154 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@155 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@156 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@157 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@158 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@159 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@160 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@161 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@162 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@163 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@164 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@165 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@166 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@167 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@168 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@169 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@170 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@171 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@Thread.Mutex.DebugImpl.lock__anon_6456 = internal unnamed_addr constant [18 x i8] c"Deadlock detected\00", align 1
@172 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@main.boolToStrZig__anon_3416 = internal unnamed_addr constant [35 x i8] c"this has been called from zig {s}\0A\00", align 1
@main.boolToStrZig__anon_3417 = internal unnamed_addr constant [5 x i8] c"true\00", align 1
@173 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@debug.panic_stage = internal thread_local unnamed_addr global i64 0, align 8
@debug.panicking = internal unnamed_addr global %"atomic.Atomic.Atomic(u8)" zeroinitializer, align 1
@debug.panic_mutex = internal unnamed_addr global %Thread.Mutex { %Thread.Mutex.DebugImpl { %"atomic.Atomic.Atomic(u64)" zeroinitializer, %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))" zeroinitializer, [4 x i8] undef } }, align 8
@174 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@175 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@176 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@177 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@178 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@179 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@180 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@181 = private unnamed_addr constant [4 x i32] [i32 3, i32 4, i32 4, i32 6], align 4
@182 = private unnamed_addr constant [690 x i32] [i32 10680707, i32 7228996, i32 1387004, i32 2578385, i32 16069853, i32 12639074, i32 9804092, i32 4427841, i32 16666979, i32 11263675, i32 12935607, i32 2387514, i32 4345298, i32 14681673, i32 3074569, i32 13734428, i32 16653803, i32 1880361, i32 10960616, i32 8533493, i32 3062596, i32 8710556, i32 7349940, i32 6258241, i32 3772886, i32 3769171, i32 3798172, i32 8675211, i32 12450088, i32 3874808, i32 9961438, i32 366607, i32 15675153, i32 9132554, i32 7151469, i32 3571407, i32 2607881, i32 12013382, i32 4155038, i32 6285869, i32 7677882, i32 13102053, i32 15825725, i32 473591, i32 9065106, i32 15363067, i32 6271263, i32 9264392, i32 5636912, i32 4652155, i32 7056368, i32 13614112, i32 10155062, i32 1944035, i32 9527646, i32 15080200, i32 6658437, i32 6231200, i32 6832269, i32 16767104, i32 5075751, i32 3212806, i32 1398474, i32 7579849, i32 6349435, i32 12618859, i32 4703257, i32 12806093, i32 14477321, i32 2786137, i32 12875403, i32 9837734, i32 14528324, i32 13719321, i32 343717, i32 16713477, i32 4161075, i32 15217346, i32 14569368, i32 3308987, i32 12795174, i32 15690526, i32 6224031, i32 3809077, i32 13300351, i32 1935345, i32 2199676, i32 8135786, i32 16412373, i32 7810352, i32 4406037, i32 12981429, i32 10295747, i32 12764333, i32 4279596, i32 6094860, i32 4619654, i32 2978275, i32 10143387, i32 25139, i32 8180404, i32 9938868, i32 13980983, i32 16137943, i32 1577123, i32 16545357, i32 2792804, i32 11261808, i32 16284771, i32 5746810, i32 15144215, i32 5654976, i32 14276155, i32 3703975, i32 13312804, i32 7834326, i32 2315354, i32 12132096, i32 1772273, i32 14667289, i32 16724383, i32 6954598, i32 6379417, i32 4717484, i32 14188414, i32 12018978, i32 9037874, i32 6340582, i32 13485295, i32 603756, i32 13909853, i32 14147094, i32 14564184, i32 9608158, i32 2630354, i32 15238696, i32 5069026, i32 3328710, i32 1499912, i32 13336032, i32 5292055, i32 10952179, i32 6021144, i32 3412782, i32 6427267, i32 84099, i32 6000373, i32 8368301, i32 15919390, i32 4409928, i32 13854480, i32 14212522, i32 4349870, i32 13525354, i32 10758154, i32 11835859, i32 15902214, i32 8353628, i32 8635043, i32 8928353, i32 7893898, i32 5934255, i32 12441455, i32 6530605, i32 13352948, i32 15696269, i32 6799654, i32 4573781, i32 3594698, i32 13805608, i32 9265602, i32 7850258, i32 1320452, i32 10176018, i32 12868036, i32 4507080, i32 9548365, i32 15931136, i32 11355092, i32 15026473, i32 1103357, i32 16563712, i32 13407262, i32 15650416, i32 16072211, i32 8450540, i32 12838835, i32 2685127, i32 9700755, i32 4092353, i32 11733294, i32 15942923, i32 10228360, i32 8069291, i32 10466606, i32 12751431, i32 3093115, i32 7165196, i32 9480050, i32 2090859, i32 9882417, i32 4855417, i32 14842177, i32 9035764, i32 9934056, i32 8709858, i32 9908633, i32 7073160, i32 3563359, i32 982459, i32 11835976, i32 7119975, i32 4354673, i32 3300749, i32 12064159, i32 648636, i32 2437517, i32 3765495, i32 1836336, i32 68621, i32 6817867, i32 5828140, i32 9480775, i32 190324, i32 2414269, i32 10911223, i32 7489646, i32 15668895, i32 10917006, i32 16159156, i32 5329873, i32 15862479, i32 3381280, i32 8276981, i32 6841266, i32 6242013, i32 220480, i32 8358277, i32 2708053, i32 12608567, i32 1103981, i32 3295282, i32 7687259, i32 13922638, i32 7230533, i32 12650763, i32 6944042, i32 13985300, i32 10290983, i32 5243997, i32 14367668, i32 12941034, i32 1571207, i32 8219465, i32 12199709, i32 2714006, i32 11324614, i32 5510317, i32 7004816, i32 9034120, i32 5272108, i32 12493828, i32 9701239, i32 7352563, i32 2620416, i32 11039210, i32 4833894, i32 4055140, i32 8641943, i32 9912227, i32 16618563, i32 9209357, i32 14565681, i32 10303890, i32 9203933, i32 15185687, i32 3923720, i32 2832149, i32 10518620, i32 9666650, i32 9572624, i32 14215183, i32 11501676, i32 4980699, i32 1019960, i32 7739481, i32 1418594, i32 12307297, i32 12159431, i32 12402704, i32 324306, i32 2585929, i32 16168683, i32 12264155, i32 11146250, i32 3090057, i32 7766884, i32 3357449, i32 1741838, i32 11156049, i32 12755741, i32 11464111, i32 1189468, i32 5096045, i32 10254893, i32 9918144, i32 8601347, i32 16183305, i32 9191467, i32 10039661, i32 504889, i32 1384460, i32 6013912, i32 12882677, i32 4959686, i32 10865230, i32 13449127, i32 3582438, i32 9736875, i32 6832861, i32 14574361, i32 15699062, i32 5409640, i32 3660796, i32 11248046, i32 3216863, i32 10595840, i32 14351116, i32 6704484, i32 11994605, i32 3171625, i32 12539479, i32 3866439, i32 12188010, i32 15974005, i32 14652200, i32 3178667, i32 16157798, i32 1428228, i32 402170, i32 1959129, i32 10793789, i32 9378647, i32 642358, i32 15286862, i32 10796563, i32 11871027, i32 1747696, i32 11035983, i32 10863058, i32 999179, i32 13465691, i32 7797027, i32 297851, i32 7477129, i32 5482182, i32 14839407, i32 60399, i32 5786267, i32 12049092, i32 12215978, i32 13619062, i32 1901265, i32 3010993, i32 12687756, i32 7843267, i32 14305414, i32 10509815, i32 16023750, i32 3141804, i32 10153181, i32 12344383, i32 7200464, i32 2082704, i32 11983658, i32 3810723, i32 10137344, i32 9655213, i32 284598, i32 11808041, i32 8290379, i32 10946522, i32 961142, i32 10574203, i32 2757142, i32 2996188, i32 16639482, i32 16702345, i32 16629385, i32 7108324, i32 16558342, i32 7372862, i32 1404549, i32 16746493, i32 474664, i32 3368801, i32 8788010, i32 15383885, i32 11528115, i32 7237007, i32 3762069, i32 6012721, i32 4773764, i32 1498928, i32 4402631, i32 3498277, i32 13529289, i32 12110640, i32 16608447, i32 10616996, i32 14969861, i32 10542426, i32 4681505, i32 13767266, i32 8674489, i32 4809072, i32 14702187, i32 86681, i32 3626320, i32 12047646, i32 12906803, i32 6254099, i32 14954589, i32 11087493, i32 12825117, i32 3551905, i32 10794760, i32 13939178, i32 2225942, i32 14969231, i32 7864103, i32 8389388, i32 2965645, i32 10538319, i32 10069280, i32 13869747, i32 679215, i32 4389300, i32 13359633, i32 13680253, i32 12704667, i32 12392363, i32 8495818, i32 6056456, i32 1529134, i32 5570599, i32 15733887, i32 8783841, i32 6556436, i32 9257366, i32 14597767, i32 2817498, i32 11937131, i32 3443067, i32 16708357, i32 10403769, i32 5204584, i32 11020874, i32 5948495, i32 12384301, i32 9984727, i32 9816052, i32 9260301, i32 10893856, i32 6248356, i32 11616020, i32 9779328, i32 73932, i32 8838513, i32 11984585, i32 16081087, i32 1140045, i32 7014145, i32 11317388, i32 13680818, i32 4740433, i32 981790, i32 12808853, i32 3868323, i32 3489984, i32 8117254, i32 13387232, i32 16394574, i32 13159126, i32 4322280, i32 14574716, i32 14181531, i32 3260121, i32 12818340, i32 13916279, i32 12968809, i32 1301232, i32 3947194, i32 4593734, i32 6255957, i32 16104914, i32 13013614, i32 6106796, i32 15549454, i32 4341276, i32 8897633, i32 15334697, i32 15980263, i32 13270050, i32 3510639, i32 12967944, i32 9295871, i32 14838382, i32 13041072, i32 12650643, i32 7626108, i32 11709803, i32 10317517, i32 8090174, i32 6951366, i32 11128823, i32 14644009, i32 12241333, i32 5308599, i32 897762, i32 2407028, i32 6323685, i32 9099380, i32 2888973, i32 792705, i32 9725566, i32 1452289, i32 7764639, i32 12516861, i32 15680854, i32 3571417, i32 1300972, i32 12171915, i32 16553924, i32 2598961, i32 12807921, i32 3589524, i32 5679320, i32 11905204, i32 969935, i32 2984210, i32 3430255, i32 9000492, i32 14929561, i32 12132566, i32 11165291, i32 10234430, i32 13393681, i32 4852733, i32 16512225, i32 7158670, i32 2918114, i32 8705257, i32 11121916, i32 13758191, i32 13186350, i32 6371631, i32 4464952, i32 13162779, i32 720001, i32 6966011, i32 14162991, i32 8696915, i32 9214286, i32 13378132, i32 14439722, i32 14075584, i32 9836811, i32 12087322, i32 6591849, i32 6314534, i32 15618623, i32 987519, i32 1160692, i32 16108540, i32 2997300, i32 15645748, i32 13393384, i32 6315741, i32 10194535, i32 15676306, i32 12064713, i32 10180705, i32 12343265, i32 13009745, i32 1064664, i32 4747741, i32 14490669, i32 10557615, i32 4598817, i32 14152537, i32 9992921, i32 12604574, i32 16418383, i32 16516694, i32 11434469, i32 3547785, i32 2272568, i32 14455655, i32 11200597, i32 3679874, i32 10217418, i32 10751313, i32 11613081, i32 972713, i32 4719977, i32 15774309, i32 10979455, i32 9915528, i32 3592697, i32 11768353, i32 4883067, i32 2215832, i32 14458688, i32 5588956, i32 3831009, i32 4385639, i32 14654974, i32 6280286, i32 10774395, i32 8039610, i32 10679893, i32 2328619, i32 5618241, i32 552537, i32 8792609, i32 8603449, i32 15131529, i32 13934309, i32 4258633, i32 15292159, i32 13242140, i32 9066949, i32 2882196, i32 12960211, i32 13616399, i32 11426523, i32 8832327, i32 6439813, i32 3900961, i32 9730348, i32 8872208, i32 8080426, i32 1715328, i32 1228611, i32 9447048, i32 8993912, i32 14992552, i32 8117221, i32 12729028, i32 15397926, i32 9070583, i32 12554765, i32 2859877, i32 11637565, i32 752829, i32 14438820, i32 6544679, i32 14541161, i32 1676442, i32 9775528, i32 2674280, i32 11857161, i32 2137924, i32 13277262, i32 6521456, i32 2325630, i32 3324175, i32 9368999, i32 15160852, i32 586017, i32 2792885, i32 5078639, i32 5314981, i32 11270581, i32 14081922, i32 6413718, i32 144918, i32 10435268, i32 10592899, i32 7204210, i32 8031545, i32 11122818, i32 6042219, i32 5973830, i32 15545344, i32 7798994, i32 5633276, i32 5069057, i32 8417760], align 4
@183 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.unreach__anon_6716 = internal unnamed_addr constant [25 x i8] c"reached unreachable code\00", align 1
@184 = private unnamed_addr constant [8 x double] [double 0x3FF921FB40000000, double 0x3E74442D00000000, double 0x3CF8469880000000, double 0x3B78CC5160000000, double 0x39F01B8380000000, double 0x387A252040000000, double 0x36E3822280000000, double 0x3569F31D00000000], align 8
@185 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@186 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@debug.panicExtra__anon_6122__anon_6717 = internal unnamed_addr constant [16 x i8] c"(msg truncated)\00", align 1
@187 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panic_messages.corrupt_switch__anon_6720 = internal unnamed_addr constant [24 x i8] c"switch on corrupt value\00", align 1
@188 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@189 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@190 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@191 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@_mh_execute_header = weak_odr dso_local global %macho.mach_header_64 undef, align 4
@192 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 0, i3 1, [1 x i8] undef }, align 2
@193 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 0, i3 2, [1 x i8] undef }, align 2
@194 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 0, i3 3, [1 x i8] undef }, align 2
@195 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 0, i3 -4, [1 x i8] undef }, align 2
@196 = private unnamed_addr constant { i16, i3, [1 x i8] } { i16 18, i3 undef, [1 x i8] undef }, align 2
@197 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 19, [6 x i8] undef }, align 8
@198 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@199 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@200 = private unnamed_addr constant %c.darwin.Sigaction zeroinitializer, align 8
@debug.panicImpl__anon_6697 = internal unnamed_addr constant [18 x i8] c"thread {} panic: \00", align 1
@201 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@builtin.panic_messages.noreturn_returned__anon_6907 = internal unnamed_addr constant [29 x i8] c"'noreturn' function returned\00", align 1
@202 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@203 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@debug.panicImpl__anon_6699 = internal unnamed_addr constant [5 x i8] c"{s}\0A\00", align 1
@debug.panicImpl__anon_6701 = internal unnamed_addr constant [36 x i8] c"Panicked during a panic. Aborting.\0A\00", align 1
@204 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panicOutOfBounds__anon_6121 = internal unnamed_addr constant [40 x i8] c"index out of bounds: index {d}, len {d}\00", align 1
@205 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@builtin.panicStartGreaterThanEnd__anon_6126 = internal unnamed_addr constant [45 x i8] c"start index {d} is larger than end index {d}\00", align 1
@206 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@207 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@208 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@fmt.formatType__anon_6919__anon_7131 = internal unnamed_addr constant [8 x i8] c"{ ... }\00", align 1
@debug.dumpStackTrace__anon_6923 = internal unnamed_addr constant [49 x i8] c"Unable to dump stack trace: debug info stripped\0A\00", align 1
@209 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@210 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@211 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@212 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@213 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 20, [2 x i8] undef }, align 4
@214 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@215 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 21, [2 x i8] undef }, align 4
@216 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 20, [2 x i8] undef }, align 4
@217 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@218 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 21, [2 x i8] undef }, align 4
@219 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 22, [2 x i8] undef }, align 4
@220 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 20, [2 x i8] undef }, align 4
@221 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@222 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 21, [2 x i8] undef }, align 4
@223 = private unnamed_addr constant { i21, i16, [2 x i8] } { i21 undef, i16 23, [2 x i8] undef }, align 4
@224 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@fmt.digits2__anon_7165 = internal unnamed_addr constant [201 x i8] c"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899\00", align 1
@225 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@226 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@__zig_err_name_table = private unnamed_addr constant ptr @273, align 8
@227 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 0, i16 0, [6 x i8] undef }, align 8
@228 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@229 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 8, [6 x i8] undef }, align 8
@230 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 15, [6 x i8] undef }, align 8
@231 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 13, [6 x i8] undef }, align 8
@232 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 3, [6 x i8] undef }, align 8
@233 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 4, [6 x i8] undef }, align 8
@234 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 5, [6 x i8] undef }, align 8
@235 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 6, [6 x i8] undef }, align 8
@236 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 9, [6 x i8] undef }, align 8
@237 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 10, [6 x i8] undef }, align 8
@238 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 16, [6 x i8] undef }, align 8
@239 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 7, [6 x i8] undef }, align 8
@240 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@241 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 0, i16 0, [6 x i8] undef }, align 8
@242 = private unnamed_addr constant { i64, i16, [6 x i8] } { i64 undef, i16 6, [6 x i8] undef }, align 8
@243 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@244 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@builtin.panicUnwrapError__anon_7167 = internal unnamed_addr constant [29 x i8] c"attempt to unwrap error: {s}\00", align 1
@245 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@os.unexpectedErrno__anon_7171 = internal unnamed_addr constant [23 x i8] c"unexpected errno: {d}\0A\00", align 1
@246 = private unnamed_addr constant %fmt.FormatOptions { { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, i2 -2, i8 32, [6 x i8] undef }, align 8
@247 = private unnamed_addr constant { i64, i8, [7 x i8] } { i64 undef, i8 0, [7 x i8] undef }, align 8
@248 = private unnamed_addr constant [9 x i8] c"Overflow\00", align 1
@249 = private unnamed_addr constant [15 x i8] c"DivisionByZero\00", align 1
@250 = private unnamed_addr constant [10 x i8] c"DiskQuota\00", align 1
@251 = private unnamed_addr constant [11 x i8] c"FileTooBig\00", align 1
@252 = private unnamed_addr constant [12 x i8] c"InputOutput\00", align 1
@253 = private unnamed_addr constant [12 x i8] c"NoSpaceLeft\00", align 1
@254 = private unnamed_addr constant [11 x i8] c"DeviceBusy\00", align 1
@255 = private unnamed_addr constant [16 x i8] c"InvalidArgument\00", align 1
@256 = private unnamed_addr constant [13 x i8] c"AccessDenied\00", align 1
@257 = private unnamed_addr constant [11 x i8] c"BrokenPipe\00", align 1
@258 = private unnamed_addr constant [16 x i8] c"SystemResources\00", align 1
@259 = private unnamed_addr constant [17 x i8] c"OperationAborted\00", align 1
@260 = private unnamed_addr constant [18 x i8] c"NotOpenForWriting\00", align 1
@261 = private unnamed_addr constant [14 x i8] c"LockViolation\00", align 1
@262 = private unnamed_addr constant [11 x i8] c"WouldBlock\00", align 1
@263 = private unnamed_addr constant [22 x i8] c"ConnectionResetByPeer\00", align 1
@264 = private unnamed_addr constant [11 x i8] c"Unexpected\00", align 1
@265 = private unnamed_addr constant [21 x i8] c"Utf8InvalidStartByte\00", align 1
@266 = private unnamed_addr constant [15 x i8] c"TruncatedInput\00", align 1
@267 = private unnamed_addr constant [25 x i8] c"Utf8ExpectedContinuation\00", align 1
@268 = private unnamed_addr constant [21 x i8] c"Utf8OverlongEncoding\00", align 1
@269 = private unnamed_addr constant [25 x i8] c"Utf8EncodesSurrogateHalf\00", align 1
@270 = private unnamed_addr constant [22 x i8] c"Utf8CodepointTooLarge\00", align 1
@271 = private unnamed_addr constant [22 x i8] c"OperationNotSupported\00", align 1
@272 = private unnamed_addr constant [8 x i8] c"Timeout\00", align 1
@273 = private unnamed_addr constant [26 x { ptr, i64 }] [{ ptr, i64 } undef, { ptr, i64 } { ptr @248, i64 8 }, { ptr, i64 } { ptr @249, i64 14 }, { ptr, i64 } { ptr @250, i64 9 }, { ptr, i64 } { ptr @251, i64 10 }, { ptr, i64 } { ptr @252, i64 11 }, { ptr, i64 } { ptr @253, i64 11 }, { ptr, i64 } { ptr @254, i64 10 }, { ptr, i64 } { ptr @255, i64 15 }, { ptr, i64 } { ptr @256, i64 12 }, { ptr, i64 } { ptr @257, i64 10 }, { ptr, i64 } { ptr @258, i64 15 }, { ptr, i64 } { ptr @259, i64 16 }, { ptr, i64 } { ptr @260, i64 17 }, { ptr, i64 } { ptr @261, i64 13 }, { ptr, i64 } { ptr @262, i64 10 }, { ptr, i64 } { ptr @263, i64 21 }, { ptr, i64 } { ptr @264, i64 10 }, { ptr, i64 } { ptr @265, i64 20 }, { ptr, i64 } { ptr @266, i64 14 }, { ptr, i64 } { ptr @267, i64 24 }, { ptr, i64 } { ptr @268, i64 20 }, { ptr, i64 } { ptr @269, i64 24 }, { ptr, i64 } { ptr @270, i64 21 }, { ptr, i64 } { ptr @271, i64 21 }, { ptr, i64 } { ptr @272, i64 7 }], align 8
@number_printf_val = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@number64_printf_val = private unnamed_addr constant [6 x i8] c"%llu\0A\00", align 1
@str_printf_val = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@true_str = private unnamed_addr constant [6 x i8] c"true\0A\00", align 1
@false_str = private unnamed_addr constant [7 x i8] c"false\0A\00", align 1

@cyclang_stdlib.boolToStrExport = alias void (), ptr @boolToStrZig

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @boolToStrZig() #0 {
  call fastcc void @debug.print__anon_3418()
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @debug.print__anon_3418() unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %1 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %1, ptr %StackGuardSlot)
  %2 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %fs.file.File, align 4
  %5 = alloca %fs.file.File, align 4
  call fastcc void @Thread.Mutex.lock(ptr nonnull align 8 @debug.stderr_mutex)
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %5)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %5, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %3, ptr nonnull readonly align 4 %4)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %3, i64 4, i1 false)
  %6 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_5814"(ptr nonnull readonly align 4 %2)
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  call fastcc void @Thread.Mutex.unlock(ptr nonnull align 8 @debug.stderr_mutex)
  ret void

9:                                                ; preds = %0
  br label %8

10:                                               ; preds = %0
  call fastcc void @Thread.Mutex.unlock(ptr nonnull align 8 @debug.stderr_mutex)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stackguard() #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackprotector(ptr, ptr) #1

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @Thread.Mutex.lock(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %8, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %Thread.Mutex, ptr %9, i32 0, i32 0
  %11 = call fastcc i64 @Thread.getCurrentId()
  store ptr %10, ptr %7, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %12, i32 0, i32 0
  store ptr %13, ptr %5, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %14, i32 0, i32 0
  %16 = load atomic i64, ptr %15 unordered, align 8
  store i64 %16, ptr %6, align 8
  %17 = load i64, ptr %6, align 8
  %18 = icmp eq i64 %17, %11
  br i1 %18, label %28, label %30

19:                                               ; preds = %32
  store ptr %10, ptr %4, align 8
  %20 = load ptr, ptr %4, align 8
  %21 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %20, i32 0, i32 1
  call fastcc void @Thread.Mutex.DarwinImpl.lock(ptr nonnull align 4 %21)
  store ptr %10, ptr %3, align 8
  %22 = load ptr, ptr %3, align 8
  %23 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %22, i32 0, i32 0
  store ptr %23, ptr %2, align 8
  %24 = load ptr, ptr %2, align 8
  %25 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %24, i32 0, i32 0
  store atomic i64 %11, ptr %25 unordered, align 8
  ret void

26:                                               ; preds = %30, %28
  %27 = phi i1 [ %29, %28 ], [ false, %30 ]
  br i1 %27, label %31, label %32

28:                                               ; preds = %1
  %29 = icmp ne i64 %11, 0
  br label %26

30:                                               ; preds = %1
  br label %26

31:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @Thread.Mutex.DebugImpl.lock__anon_6456, i64 17, ptr align 8 null, ptr nonnull readonly align 8 @172)
  unreachable

32:                                               ; preds = %26
  br label %19
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @io.getStdErr(ptr noalias nonnull sret(%fs.file.File) %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %fs.file.File, ptr %0, i32 0, i32 0
  %3 = call fastcc i32 @io.getStdErrHandle()
  store i32 %3, ptr %2, align 4
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @fs.file.File.writer(ptr noalias nonnull sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %0, ptr nonnull readonly align 4 %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", ptr %0, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %1, i64 4, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_5814"(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %2 = call fastcc i16 @fmt.format__anon_6600(ptr nonnull readonly align 4 %0)
  ret i16 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @Thread.Mutex.unlock(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %8, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %Thread.Mutex, ptr %9, i32 0, i32 0
  store ptr %10, ptr %7, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %11, i32 0, i32 0
  store ptr %12, ptr %5, align 8
  %13 = load ptr, ptr %5, align 8
  %14 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %13, i32 0, i32 0
  %15 = load atomic i64, ptr %14 unordered, align 8
  store i64 %15, ptr %6, align 8
  %16 = load i64, ptr %6, align 8
  %17 = call fastcc i64 @Thread.getCurrentId()
  %18 = icmp eq i64 %16, %17
  call fastcc void @debug.assert(i1 %18)
  store ptr %10, ptr %4, align 8
  %19 = load ptr, ptr %4, align 8
  %20 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %19, i32 0, i32 0
  store ptr %20, ptr %3, align 8
  %21 = load ptr, ptr %3, align 8
  %22 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %21, i32 0, i32 0
  store atomic i64 0, ptr %22 unordered, align 8
  store ptr %10, ptr %2, align 8
  %23 = load ptr, ptr %2, align 8
  %24 = getelementptr inbounds %Thread.Mutex.DebugImpl, ptr %23, i32 0, i32 1
  call fastcc void @Thread.Mutex.DarwinImpl.unlock(ptr nonnull align 4 %24)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @Thread.getCurrentId() unnamed_addr #0 {
  %1 = call fastcc i64 @Thread.PosixThreadImpl.getCurrentId()
  ret i64 %1
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @debug.assert(i1 %0) unnamed_addr #0 {
  %2 = xor i1 %0, true
  br i1 %2, label %4, label %5

3:                                                ; preds = %5
  ret void

4:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @199)
  unreachable

5:                                                ; preds = %1
  br label %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @Thread.Mutex.DarwinImpl.unlock(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", ptr %3, i32 0, i32 0
  call void @os_unfair_lock_unlock(ptr nonnull align 4 %4)
  ret void
}

; Function Attrs: nounwind uwtable
declare void @os_unfair_lock_unlock(ptr nonnull align 4) #3

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @builtin.default_panic(ptr nonnull readonly align 1 %0, i64 %1, ptr align 8 %2, ptr nonnull readonly align 8 %3) unnamed_addr #4 {
  %5 = alloca { i64, i8, [7 x i8] }, align 8
  %6 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %7 = insertvalue { ptr, i64 } %6, i64 %1, 1
  %8 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 1
  %9 = load i8, ptr %8, align 1
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %17, label %20

11:                                               ; preds = %20, %17
  %12 = phi i64 [ %19, %17 ], [ %22, %20 ]
  %13 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %5, i32 0, i32 0
  store i64 %12, ptr %13, align 8
  %14 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %5, i32 0, i32 1
  store i8 1, ptr %14, align 1
  %15 = extractvalue { ptr, i64 } %7, 0
  %16 = extractvalue { ptr, i64 } %7, 1
  call fastcc void @debug.panicImpl(ptr readonly align 8 %2, ptr nonnull readonly align 8 %5, ptr nonnull readonly align 1 %15, i64 %16)
  unreachable

17:                                               ; preds = %4
  %18 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 0
  %19 = load i64, ptr %18, align 8
  br label %11

20:                                               ; preds = %4
  %21 = call fastcc ptr @llvm.returnaddress(i32 0)
  %22 = ptrtoint ptr %21 to i64
  br label %11
}

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @debug.panicImpl(ptr readonly align 8 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #4 {
  %5 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %6 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %7 = alloca %fs.file.File, align 4
  %8 = alloca %fs.file.File, align 4
  %9 = alloca { { ptr, i64 } }, align 8
  %10 = alloca { i64 }, align 8
  %11 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %12 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %13 = alloca %fs.file.File, align 4
  %14 = alloca %fs.file.File, align 4
  %15 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %16 = insertvalue { ptr, i64 } %15, i64 %3, 1
  call fastcc void @debug.resetSegfaultHandler()
  %17 = load i64, ptr @debug.panic_stage, align 8
  switch i64 %17, label %19 [
    i64 0, label %20
    i64 1, label %40
  ]

18:                                               ; preds = %43, %37, %19
  call fastcc void @os.abort()
  unreachable

19:                                               ; preds = %4
  br label %18

20:                                               ; preds = %4
  store i64 1, ptr @debug.panic_stage, align 8
  %21 = load i8, ptr @debug.panicking, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %20
  %loaded = phi i8 [ %21, %20 ], [ %newloaded, %atomicrmw.start ]
  %new = add i8 %loaded, 1
  %22 = cmpxchg ptr @debug.panicking, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %22, 1
  %newloaded = extractvalue { i8, i1 } %22, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  call fastcc void @Thread.Mutex.lock(ptr nonnull align 8 @debug.panic_mutex)
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %14)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %13, ptr align 4 %14, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %12, ptr nonnull readonly align 4 %13)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %11, ptr align 4 %12, i64 4, i1 false)
  %23 = call fastcc i64 @Thread.getCurrentId()
  %24 = getelementptr inbounds { i64 }, ptr %10, i32 0, i32 0
  store i64 %23, ptr %24, align 8
  %25 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6698"(ptr nonnull readonly align 4 %11, ptr nonnull readonly align 8 %10)
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %31, label %32

27:                                               ; preds = %31
  %28 = getelementptr inbounds { { ptr, i64 } }, ptr %9, i32 0, i32 0
  store { ptr, i64 } %16, ptr %28, align 8
  %29 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6700"(ptr nonnull readonly align 4 %11, ptr nonnull readonly align 8 %9)
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %35, label %36

31:                                               ; preds = %atomicrmw.end
  br label %27

32:                                               ; preds = %atomicrmw.end
  call fastcc void @os.abort()
  unreachable

33:                                               ; preds = %35
  %34 = icmp ne ptr %0, null
  br i1 %34, label %38, label %39

35:                                               ; preds = %27
  br label %33

36:                                               ; preds = %27
  call fastcc void @os.abort()
  unreachable

37:                                               ; preds = %39, %38
  call fastcc void @debug.dumpCurrentStackTrace(ptr nonnull readonly align 8 %1)
  call fastcc void @Thread.Mutex.unlock(ptr nonnull align 8 @debug.panic_mutex)
  call fastcc void @debug.waitForOtherThreadToFinishPanicking()
  br label %18

38:                                               ; preds = %33
  call fastcc void @debug.dumpStackTrace(ptr nonnull readonly align 8 %0)
  br label %37

39:                                               ; preds = %33
  br label %37

40:                                               ; preds = %4
  store i64 2, ptr @debug.panic_stage, align 8
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %8)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %7, ptr align 4 %8, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %6, ptr nonnull readonly align 4 %7)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %6, i64 4, i1 false)
  %41 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6702"(ptr nonnull readonly align 4 %5)
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %44, label %45

43:                                               ; preds = %44
  br label %18

44:                                               ; preds = %40
  br label %43

45:                                               ; preds = %40
  call fastcc void @os.abort()
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare ptr @llvm.returnaddress(i32 immarg) #5

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @debug.resetSegfaultHandler() unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %1 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %1, ptr %StackGuardSlot)
  %2 = alloca %c.darwin.Sigaction, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 @200, i64 16, i1 false)
  %3 = call fastcc i16 @debug.updateSegfaultHandler(ptr readonly align 8 %2)
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %6, label %7

5:                                                ; preds = %7, %6
  ret void

6:                                                ; preds = %0
  br label %5

7:                                                ; preds = %0
  br label %5
}

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @os.abort() unnamed_addr #4 {
  call void @abort()
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.noreturn_returned__anon_6907, i64 28, ptr align 8 null, ptr nonnull readonly align 8 @202)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6698"(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %3 = call fastcc i16 @fmt.format__anon_6871(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1)
  ret i16 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6700"(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %3 = call fastcc i16 @fmt.format__anon_6908(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1)
  ret i16 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @debug.dumpCurrentStackTrace(ptr nonnull readonly align 8 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %5 = alloca %fs.file.File, align 4
  %6 = alloca %fs.file.File, align 4
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %6)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %6, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %4, ptr nonnull readonly align 4 %5)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %4, i64 4, i1 false)
  %7 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6924"(ptr nonnull readonly align 4 %3)
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %10, label %11

9:                                                ; preds = %10
  ret void

10:                                               ; preds = %1
  br label %9

11:                                               ; preds = %1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @debug.waitForOtherThreadToFinishPanicking() unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %1 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %1, ptr %StackGuardSlot)
  %2 = alloca %fs.file.File, align 4
  %3 = alloca %fs.file.File, align 4
  %4 = load i8, ptr @debug.panicking, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %0
  %loaded = phi i8 [ %4, %0 ], [ %newloaded, %atomicrmw.start ]
  %new = sub i8 %loaded, 1
  %5 = cmpxchg ptr @debug.panicking, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  %6 = icmp ne i8 %newloaded, 1
  br i1 %6, label %8, label %9

7:                                                ; preds = %9
  ret void

8:                                                ; preds = %atomicrmw.end
  call fastcc void @"atomic.Atomic.Atomic(u32).init"(ptr sret(%fs.file.File) %2, i32 0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %2, i64 4, i1 false)
  br label %10

9:                                                ; preds = %atomicrmw.end
  br label %7

10:                                               ; preds = %10, %8
  call fastcc void @Thread.Futex.wait(ptr nonnull readonly align 4 %3, i32 0)
  br label %10
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @debug.dumpStackTrace(ptr nonnull readonly align 8 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %5 = alloca %fs.file.File, align 4
  %6 = alloca %fs.file.File, align 4
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %6)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %6, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %4, ptr nonnull readonly align 4 %5)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %4, i64 4, i1 false)
  %7 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6924"(ptr nonnull readonly align 4 %3)
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %10, label %11

9:                                                ; preds = %10
  ret void

10:                                               ; preds = %1
  br label %9

11:                                               ; preds = %1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6702"(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %2 = call fastcc i16 @fmt.format__anon_6992(ptr nonnull readonly align 4 %0)
  ret i16 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_6992(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %0, i64 4, i1 false)
  %4 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %3, ptr nonnull readonly align 1 @debug.panicImpl__anon_6701, i64 35)
  %5 = icmp ne i16 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  ret i16 %4

7:                                                ; preds = %1
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %8 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %9 = alloca i64, align 8
  %10 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %11 = insertvalue { ptr, i64 } %10, i64 %2, 1
  store i64 0, ptr %9, align 8
  br label %13

12:                                               ; preds = %26
  ret i16 0

13:                                               ; preds = %17, %3
  %14 = load i64, ptr %9, align 8
  %15 = extractvalue { ptr, i64 } %11, 1
  %16 = icmp ne i64 %14, %15
  br i1 %16, label %18, label %26

17:                                               ; preds = %56
  br label %13

18:                                               ; preds = %13
  %19 = load i64, ptr %9, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %8, ptr align 4 %0, i64 4, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %7, ptr align 4 %8, i64 4, i1 false)
  store { ptr, i64 } %11, ptr %6, align 8
  %20 = load i64, ptr %9, align 8
  %21 = load { ptr, i64 }, ptr %6, align 8
  %22 = extractvalue { ptr, i64 } %21, 0
  %23 = getelementptr inbounds i8, ptr %22, i64 %20
  %24 = extractvalue { ptr, i64 } %21, 1
  %25 = icmp ule i64 %20, %24
  br i1 %25, label %31, label %32

26:                                               ; preds = %13
  br label %12

27:                                               ; preds = %31
  %28 = sub nuw i64 %24, %20
  %29 = extractvalue { ptr, i64 } %21, 1
  %30 = icmp ule i64 %24, %29
  br i1 %30, label %35, label %36

31:                                               ; preds = %18
  br label %27

32:                                               ; preds = %18
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %20, i64 %24)
  unreachable

33:                                               ; preds = %35
  %34 = icmp ule i64 %20, %24
  br i1 %34, label %45, label %46

35:                                               ; preds = %27
  br label %33

36:                                               ; preds = %27
  call fastcc void @builtin.panicOutOfBounds(i64 %24, i64 %29)
  unreachable

37:                                               ; preds = %45
  %38 = insertvalue { ptr, i64 } poison, ptr %23, 0
  %39 = insertvalue { ptr, i64 } %38, i64 %28, 1
  %40 = extractvalue { ptr, i64 } %39, 0
  %41 = extractvalue { ptr, i64 } %39, 1
  call fastcc void @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).write"(ptr sret({ i64, i16, [6 x i8] }) %5, ptr nonnull readonly align 4 %7, ptr nonnull readonly align 1 %40, i64 %41)
  %42 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %43 = load i16, ptr %42, align 2
  %44 = icmp ne i16 %43, 0
  br i1 %44, label %47, label %50

45:                                               ; preds = %33
  br label %37

46:                                               ; preds = %33
  call fastcc void @builtin.panicOutOfBounds(i64 %20, i64 %24)
  unreachable

47:                                               ; preds = %37
  %48 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %49 = load i16, ptr %48, align 2
  ret i16 %49

50:                                               ; preds = %37
  %51 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  %52 = load i64, ptr %51, align 8
  %53 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %19, i64 %52)
  %54 = extractvalue { i64, i1 } %53, 1
  br i1 %54, label %55, label %56

55:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

56:                                               ; preds = %50
  %57 = extractvalue { i64, i1 } %53, 0
  store i64 %57, ptr %9, align 8
  br label %17
}

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @builtin.panicStartGreaterThanEnd(i64 %0, i64 %1) unnamed_addr #4 {
  %3 = alloca { i64, i8, [7 x i8] }, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = call fastcc ptr @llvm.returnaddress(i32 0)
  %6 = ptrtoint ptr %5 to i64
  %7 = getelementptr inbounds { i64, i64 }, ptr %4, i32 0, i32 0
  store i64 %0, ptr %7, align 8
  %8 = getelementptr inbounds { i64, i64 }, ptr %4, i32 0, i32 1
  store i64 %1, ptr %8, align 8
  %9 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 0
  store i64 %6, ptr %9, align 8
  %10 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 1
  store i8 1, ptr %10, align 1
  call fastcc void @debug.panicExtra__anon_6127(ptr align 8 null, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4)
  unreachable
}

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @builtin.panicOutOfBounds(i64 %0, i64 %1) unnamed_addr #4 {
  %3 = alloca { i64, i8, [7 x i8] }, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = call fastcc ptr @llvm.returnaddress(i32 0)
  %6 = ptrtoint ptr %5 to i64
  %7 = getelementptr inbounds { i64, i64 }, ptr %4, i32 0, i32 0
  store i64 %0, ptr %7, align 8
  %8 = getelementptr inbounds { i64, i64 }, ptr %4, i32 0, i32 1
  store i64 %1, ptr %8, align 8
  %9 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 0
  store i64 %6, ptr %9, align 8
  %10 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 1
  store i8 1, ptr %10, align 1
  call fastcc void @debug.panicExtra__anon_6122(ptr align 8 null, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).write"(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull readonly align 4 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { i64, i16, [6 x i8] }, align 8
  %7 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %8 = insertvalue { ptr, i64 } %7, i64 %3, 1
  %9 = getelementptr inbounds %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", ptr %1, i32 0, i32 0
  %10 = extractvalue { ptr, i64 } %8, 0
  %11 = extractvalue { ptr, i64 } %8, 1
  call fastcc void @fs.file.File.write(ptr sret({ i64, i16, [6 x i8] }) %6, ptr nonnull readonly align 4 %9, ptr nonnull readonly align 1 %10, i64 %11)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @fs.file.File.write(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull readonly align 4 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { i64, i16, [6 x i8] }, align 8
  %7 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %8 = insertvalue { ptr, i64 } %7, i64 %3, 1
  %9 = getelementptr inbounds %fs.file.File, ptr %1, i32 0, i32 0
  %10 = load i32, ptr %9, align 4
  %11 = extractvalue { ptr, i64 } %8, 0
  %12 = extractvalue { ptr, i64 } %8, 1
  call fastcc void @os.write(ptr sret({ i64, i16, [6 x i8] }) %6, i32 %10, ptr nonnull readonly align 1 %11, i64 %12)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @os.write(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, i32 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { i64, i16, [6 x i8] }, align 8
  %7 = alloca { i64, i16, [6 x i8] }, align 8
  %8 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %9 = insertvalue { ptr, i64 } %8, i64 %3, 1
  %10 = extractvalue { ptr, i64 } %9, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %16, label %17

12:                                               ; preds = %17
  %13 = extractvalue { ptr, i64 } %9, 1
  %14 = call i64 @llvm.umin.i64(i64 2147483647, i64 %13)
  %15 = trunc i64 %14 to i31
  br label %18

16:                                               ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @227, i64 16, i1 false)
  ret void

17:                                               ; preds = %4
  br label %12

18:                                               ; preds = %23, %12
  %19 = extractvalue { ptr, i64 } %9, 0
  %20 = zext i31 %15 to i64
  %21 = call i64 @write(i32 %1, ptr nonnull readonly align 1 %19, i64 %20)
  %22 = call fastcc i16 @c.getErrno__anon_7169(i64 %21)
  switch i16 %22, label %24 [
    i16 0, label %28
    i16 4, label %35
    i16 22, label %36
    i16 14, label %37
    i16 35, label %38
    i16 9, label %39
    i16 39, label %40
    i16 69, label %41
    i16 27, label %42
    i16 5, label %43
    i16 28, label %44
    i16 1, label %45
    i16 32, label %46
    i16 54, label %47
    i16 16, label %48
  ]

23:                                               ; preds = %35
  br label %18

24:                                               ; preds = %18
  %25 = call fastcc i16 @os.unexpectedErrno(i16 %22)
  %26 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 %25, ptr %26, align 2
  %27 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void

28:                                               ; preds = %18
  %29 = icmp sge i64 %21, 0
  br i1 %29, label %33, label %34

30:                                               ; preds = %33
  %31 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %7, i32 0, i32 1
  store i16 0, ptr %31, align 2
  %32 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %7, i32 0, i32 0
  store i64 %21, ptr %32, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false)
  ret void

33:                                               ; preds = %28
  br label %30

34:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @228)
  unreachable

35:                                               ; preds = %18
  br label %23

36:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @229, i64 16, i1 false)
  ret void

37:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @228)
  unreachable

38:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @230, i64 16, i1 false)
  ret void

39:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @231, i64 16, i1 false)
  ret void

40:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @228)
  unreachable

41:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @232, i64 16, i1 false)
  ret void

42:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @233, i64 16, i1 false)
  ret void

43:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @234, i64 16, i1 false)
  ret void

44:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @235, i64 16, i1 false)
  ret void

45:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @236, i64 16, i1 false)
  ret void

46:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @237, i64 16, i1 false)
  ret void

47:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @238, i64 16, i1 false)
  ret void

48:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @239, i64 16, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #6

; Function Attrs: nounwind uwtable
declare i64 @write(i32, ptr nonnull readonly align 1, i64) #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @c.getErrno__anon_7169(i64 %0) unnamed_addr #0 {
  %2 = icmp eq i64 %0, -1
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = call ptr @__error()
  %5 = load i32, ptr %4, align 4
  %6 = trunc i32 %5 to i16
  ret i16 %6

7:                                                ; preds = %1
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @os.unexpectedErrno(i16 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca { i16 }, align 2
  %4 = getelementptr inbounds { i16 }, ptr %3, i32 0, i32 0
  store i16 %0, ptr %4, align 2
  call fastcc void @debug.print__anon_7172(ptr nonnull readonly align 2 %3)
  call fastcc void @debug.dumpCurrentStackTrace(ptr nonnull readonly align 8 @244)
  ret i16 17
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @debug.print__anon_7172(ptr nonnull readonly align 2 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %5 = alloca %fs.file.File, align 4
  %6 = alloca %fs.file.File, align 4
  call fastcc void @Thread.Mutex.lock(ptr nonnull align 8 @debug.stderr_mutex)
  call fastcc void @io.getStdErr(ptr sret(%fs.file.File) %6)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %6, i64 4, i1 false)
  call fastcc void @fs.file.File.writer(ptr sret(%"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))") %4, ptr nonnull readonly align 4 %5)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %4, i64 4, i1 false)
  %7 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_7186"(ptr nonnull readonly align 4 %3, ptr nonnull readonly align 2 %0)
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %10, label %11

9:                                                ; preds = %10
  call fastcc void @Thread.Mutex.unlock(ptr nonnull align 8 @debug.stderr_mutex)
  ret void

10:                                               ; preds = %1
  br label %9

11:                                               ; preds = %1
  call fastcc void @Thread.Mutex.unlock(ptr nonnull align 8 @debug.stderr_mutex)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_7186"(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 2 %1) unnamed_addr #0 {
  %3 = call fastcc i16 @fmt.format__anon_7190(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 2 %1)
  ret i16 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_7190(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 2 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %5 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %0, i64 4, i1 false)
  %6 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %5, ptr nonnull readonly align 1 @os.unexpectedErrno__anon_7171, i64 18)
  %7 = icmp ne i16 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  ret i16 %6

9:                                                ; preds = %2
  %10 = getelementptr inbounds { i16 }, ptr %1, i32 0, i32 0
  %11 = load i16, ptr %10, align 2
  %12 = call fastcc i16 @fmt.formatType__anon_7202(i16 %11, ptr nonnull readonly align 8 @246, ptr nonnull readonly align 4 %0, i64 3)
  %13 = icmp ne i16 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  ret i16 %12

15:                                               ; preds = %9
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %0, i64 4, i1 false)
  %16 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %4, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @os.unexpectedErrno__anon_7171, i64 21), i64 1)
  %17 = icmp ne i16 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  ret i16 %16

19:                                               ; preds = %15
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatType__anon_7202(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2, i64 %3) unnamed_addr #0 {
  %5 = call fastcc i16 @fmt.formatValue__anon_7207(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %5
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatValue__anon_7207(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatIntValue__anon_7208(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatIntValue__anon_7208(i16 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatInt__anon_7211(i16 %0, i8 10, i1 false, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatInt__anon_7211(i16 %0, i8 %1, i1 %2, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 4 %4) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %6 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %6, ptr %StackGuardSlot)
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca [2 x i8], align 1
  %9 = alloca [2 x i8], align 1
  %10 = alloca i64, align 8
  %11 = alloca i16, align 2
  %12 = alloca [17 x i8], align 1
  %13 = icmp uge i8 %1, 2
  call fastcc void @debug.assert(i1 %13)
  %14 = call fastcc i16 @math.absCast__anon_7212(i16 %0)
  call void @llvm.memset.p0.i64(ptr align 1 %12, i8 -86, i64 17, i1 false)
  store i16 %14, ptr %11, align 2
  store i64 17, ptr %10, align 8
  %15 = icmp eq i8 %1, 10
  br i1 %15, label %20, label %21

16:                                               ; preds = %81, %44
  %17 = load i64, ptr %10, align 8
  %18 = getelementptr inbounds i8, ptr %12, i64 %17
  %19 = icmp ule i64 %17, 17
  br i1 %19, label %123, label %124

20:                                               ; preds = %5
  br label %25

21:                                               ; preds = %5
  br label %82

22:                                               ; preds = %33
  %23 = load i16, ptr %11, align 2
  %24 = icmp ult i16 %23, 10
  br i1 %24, label %45, label %49

25:                                               ; preds = %28, %20
  %26 = load i16, ptr %11, align 2
  %27 = icmp uge i16 %26, 100
  br i1 %27, label %29, label %33

28:                                               ; preds = %35
  br label %25

29:                                               ; preds = %25
  %30 = load i64, ptr %10, align 8
  %31 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %30, i64 2)
  %32 = extractvalue { i64, i1 } %31, 1
  br i1 %32, label %34, label %35

33:                                               ; preds = %25
  br label %22

34:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %29
  %36 = extractvalue { i64, i1 } %31, 0
  store i64 %36, ptr %10, align 8
  %37 = load i64, ptr %10, align 8
  %38 = getelementptr inbounds i8, ptr %12, i64 %37
  %39 = load i16, ptr %11, align 2
  %40 = urem i16 %39, 100
  %41 = zext i16 %40 to i64
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %9, i64 %41)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %38, ptr align 1 %9, i64 2, i1 false)
  %42 = load i16, ptr %11, align 2
  %43 = udiv i16 %42, 100
  store i16 %43, ptr %11, align 2
  br label %28

44:                                               ; preds = %75, %72
  br label %16

45:                                               ; preds = %22
  %46 = load i64, ptr %10, align 8
  %47 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %46, i64 1)
  %48 = extractvalue { i64, i1 } %47, 1
  br i1 %48, label %53, label %54

49:                                               ; preds = %22
  %50 = load i64, ptr %10, align 8
  %51 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %50, i64 2)
  %52 = extractvalue { i64, i1 } %51, 1
  br i1 %52, label %74, label %75

53:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %45
  %55 = extractvalue { i64, i1 } %47, 0
  store i64 %55, ptr %10, align 8
  %56 = load i64, ptr %10, align 8
  %57 = icmp ult i64 %56, 17
  br i1 %57, label %63, label %64

58:                                               ; preds = %63
  %59 = getelementptr inbounds [17 x i8], ptr %12, i64 0, i64 %56
  %60 = load i16, ptr %11, align 2
  %61 = sub i16 255, %60
  %62 = icmp ule i16 %61, 255
  br i1 %62, label %69, label %70

63:                                               ; preds = %54
  br label %58

64:                                               ; preds = %54
  call fastcc void @builtin.panicOutOfBounds(i64 %56, i64 17)
  unreachable

65:                                               ; preds = %69
  %66 = trunc i16 %60 to i8
  %67 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 48, i8 %66)
  %68 = extractvalue { i8, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %58
  br label %65

70:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @247)
  unreachable

71:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %65
  %73 = extractvalue { i8, i1 } %67, 0
  store i8 %73, ptr %59, align 1
  br label %44

74:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %49
  %76 = extractvalue { i64, i1 } %51, 0
  store i64 %76, ptr %10, align 8
  %77 = load i64, ptr %10, align 8
  %78 = getelementptr inbounds i8, ptr %12, i64 %77
  %79 = load i16, ptr %11, align 2
  %80 = zext i16 %79 to i64
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %8, i64 %80)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %78, ptr align 1 %8, i64 2, i1 false)
  br label %44

81:                                               ; preds = %119
  br label %16

82:                                               ; preds = %118, %21
  %83 = load i16, ptr %11, align 2
  %84 = zext i8 %1 to i16
  %85 = icmp ne i16 %84, 0
  br i1 %85, label %91, label %92

86:                                               ; preds = %91
  %87 = urem i16 %83, %84
  %88 = load i64, ptr %10, align 8
  %89 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %88, i64 1)
  %90 = extractvalue { i64, i1 } %89, 1
  br i1 %90, label %93, label %94

91:                                               ; preds = %82
  br label %86

92:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @247)
  unreachable

93:                                               ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %86
  %95 = extractvalue { i64, i1 } %89, 0
  store i64 %95, ptr %10, align 8
  %96 = load i64, ptr %10, align 8
  %97 = icmp ult i64 %96, 17
  br i1 %97, label %102, label %103

98:                                               ; preds = %102
  %99 = getelementptr inbounds [17 x i8], ptr %12, i64 0, i64 %96
  %100 = sub i16 255, %87
  %101 = icmp ule i16 %100, 255
  br i1 %101, label %110, label %111

102:                                              ; preds = %94
  br label %98

103:                                              ; preds = %94
  call fastcc void @builtin.panicOutOfBounds(i64 %96, i64 17)
  unreachable

104:                                              ; preds = %110
  %105 = trunc i16 %87 to i8
  %106 = call fastcc i8 @fmt.digitToChar(i8 %105, i1 %2)
  store i8 %106, ptr %99, align 1
  %107 = load i16, ptr %11, align 2
  %108 = zext i8 %1 to i16
  %109 = icmp ne i16 %108, 0
  br i1 %109, label %116, label %117

110:                                              ; preds = %98
  br label %104

111:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @247)
  unreachable

112:                                              ; preds = %116
  %113 = udiv i16 %107, %108
  store i16 %113, ptr %11, align 2
  %114 = load i16, ptr %11, align 2
  %115 = icmp eq i16 %114, 0
  br i1 %115, label %119, label %120

116:                                              ; preds = %104
  br label %112

117:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @247)
  unreachable

118:                                              ; preds = %120
  br label %82

119:                                              ; preds = %112
  br label %81

120:                                              ; preds = %112
  br label %118

121:                                              ; preds = %123
  %122 = sub nuw i64 17, %17
  br i1 true, label %127, label %128

123:                                              ; preds = %16
  br label %121

124:                                              ; preds = %16
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %17, i64 17)
  unreachable

125:                                              ; preds = %127
  %126 = icmp ule i64 %17, 17
  br i1 %126, label %136, label %137

127:                                              ; preds = %121
  br label %125

128:                                              ; preds = %121
  call fastcc void @builtin.panicOutOfBounds(i64 17, i64 17)
  unreachable

129:                                              ; preds = %136
  %130 = insertvalue { ptr, i64 } poison, ptr %18, 0
  %131 = insertvalue { ptr, i64 } %130, i64 %122, 1
  store { ptr, i64 } %131, ptr %7, align 8
  %132 = load { ptr, i64 }, ptr %7, align 8
  %133 = extractvalue { ptr, i64 } %132, 0
  %134 = extractvalue { ptr, i64 } %132, 1
  %135 = call fastcc i16 @fmt.formatBuf__anon_6743(ptr nonnull readonly align 1 %133, i64 %134, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 4 %4)
  ret i16 %135

136:                                              ; preds = %125
  br label %129

137:                                              ; preds = %125
  call fastcc void @builtin.panicOutOfBounds(i64 %17, i64 17)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @math.absCast__anon_7212(i16 %0) unnamed_addr #0 {
  ret i16 %0
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @fmt.digits2(ptr noalias nonnull sret([2 x i8]) %0, i64 %1) unnamed_addr #0 {
  %3 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1, i64 2)
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

6:                                                ; preds = %2
  %7 = extractvalue { i64, i1 } %3, 0
  %8 = getelementptr inbounds i8, ptr @fmt.digits2__anon_7165, i64 %7
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %0, ptr align 1 %8, i64 2, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i8, i1 } @llvm.uadd.with.overflow.i8(i8, i8) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i8 @fmt.digitToChar(i8 %0, i1 %1) unnamed_addr #0 {
  %3 = alloca i8, align 1
  switch i8 %0, label %6 [
  ]

4:                                                ; preds = %35, %18
  %5 = load i8, ptr %3, align 1
  ret i8 %5

6:                                                ; preds = %2
  %7 = icmp uge i8 %0, 0
  %8 = icmp ule i8 %0, 9
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %13

10:                                               ; preds = %6
  %11 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %0, i8 48)
  %12 = extractvalue { i8, i1 } %11, 1
  br i1 %12, label %17, label %18

13:                                               ; preds = %6
  %14 = icmp uge i8 %0, 10
  %15 = icmp ule i8 %0, 35
  %16 = and i1 %14, %15
  br i1 %16, label %20, label %22

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i8, i1 } %11, 0
  store i8 %19, ptr %3, align 1
  br label %4

20:                                               ; preds = %13
  %21 = icmp eq i1 %1, true
  br i1 %21, label %27, label %28

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @225)
  unreachable

23:                                               ; preds = %28, %27
  %24 = phi i8 [ 65, %27 ], [ 97, %28 ]
  %25 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %24, i8 10)
  %26 = extractvalue { i8, i1 } %25, 1
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  br label %23

28:                                               ; preds = %20
  br label %23

29:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

30:                                               ; preds = %23
  %31 = extractvalue { i8, i1 } %25, 0
  %32 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %0, i8 %31)
  %33 = extractvalue { i8, i1 } %32, 1
  br i1 %33, label %34, label %35

34:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %30
  %36 = extractvalue { i8, i1 } %32, 0
  store i8 %36, ptr %3, align 1
  br label %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatBuf__anon_6743(ptr nonnull readonly align 1 %0, i64 %1, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 4 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %7 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %8 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %9 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %10 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %11 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %12 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %13 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %14 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %15 = alloca { i64, i16, [6 x i8] }, align 8
  %16 = alloca { i64, i8, [7 x i8] }, align 8
  %17 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %18 = insertvalue { ptr, i64 } %17, i64 %1, 1
  %19 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %16, ptr align 8 %19, i64 16, i1 false)
  %20 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %16, i32 0, i32 1
  %21 = load i8, ptr %20, align 1
  %22 = icmp ne i8 %21, 0
  br i1 %22, label %24, label %32

23:                                               ; preds = %118, %63
  ret i16 0

24:                                               ; preds = %4
  %25 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %16, i32 0, i32 0
  %26 = load i64, ptr %25, align 8
  %27 = extractvalue { ptr, i64 } %18, 0
  %28 = extractvalue { ptr, i64 } %18, 1
  call fastcc void @unicode.utf8CountCodepoints(ptr sret({ i64, i16, [6 x i8] }) %15, ptr nonnull readonly align 1 %27, i64 %28)
  %29 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %15, i32 0, i32 1
  %30 = load i16, ptr %29, align 2
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %40, label %43

32:                                               ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %3, i64 4, i1 false)
  %33 = extractvalue { ptr, i64 } %18, 0
  %34 = extractvalue { ptr, i64 } %18, 1
  %35 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %6, ptr nonnull readonly align 1 %33, i64 %34)
  %36 = icmp ne i16 %35, 0
  br i1 %36, label %117, label %118

37:                                               ; preds = %43, %40
  %38 = phi i64 [ %42, %40 ], [ %44, %43 ]
  %39 = icmp ult i64 %38, %26
  br i1 %39, label %48, label %51

40:                                               ; preds = %24
  %41 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %15, i32 0, i32 0
  %42 = load i64, ptr %41, align 8
  br label %37

43:                                               ; preds = %24
  %44 = extractvalue { ptr, i64 } %18, 1
  br label %37

45:                                               ; preds = %53, %51
  %46 = phi i64 [ %54, %53 ], [ 0, %51 ]
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %58, label %62

48:                                               ; preds = %37
  %49 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %26, i64 %38)
  %50 = extractvalue { i64, i1 } %49, 1
  br i1 %50, label %52, label %53

51:                                               ; preds = %37
  br label %45

52:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

53:                                               ; preds = %48
  %54 = extractvalue { i64, i1 } %49, 0
  br label %45

55:                                               ; preds = %62
  %56 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 2
  %57 = load i2, ptr %56, align 1
  switch i2 %57, label %64 [
    i2 0, label %65
    i2 1, label %78
    i2 -2, label %104
  ]

58:                                               ; preds = %45
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %14, ptr align 4 %3, i64 4, i1 false)
  %59 = extractvalue { ptr, i64 } %18, 0
  %60 = extractvalue { ptr, i64 } %18, 1
  %61 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %14, ptr nonnull readonly align 1 %59, i64 %60)
  ret i16 %61

62:                                               ; preds = %45
  br label %55

63:                                               ; preds = %116, %103, %77
  br label %23

64:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6720, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @198)
  unreachable

65:                                               ; preds = %55
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %13, ptr align 4 %3, i64 4, i1 false)
  %66 = extractvalue { ptr, i64 } %18, 0
  %67 = extractvalue { ptr, i64 } %18, 1
  %68 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %13, ptr nonnull readonly align 1 %66, i64 %67)
  %69 = icmp ne i16 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %65
  ret i16 %68

71:                                               ; preds = %65
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %12, ptr align 4 %3, i64 4, i1 false)
  %72 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %73 = load i8, ptr %72, align 1
  %74 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %12, i8 %73, i64 %46)
  %75 = icmp ne i16 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %71
  ret i16 %74

77:                                               ; preds = %71
  br label %63

78:                                               ; preds = %55
  %79 = udiv i64 %46, 2
  %80 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %46, i64 1)
  %81 = extractvalue { i64, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %78
  %84 = extractvalue { i64, i1 } %80, 0
  %85 = udiv i64 %84, 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %11, ptr align 4 %3, i64 4, i1 false)
  %86 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %87 = load i8, ptr %86, align 1
  %88 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %11, i8 %87, i64 %79)
  %89 = icmp ne i16 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %83
  ret i16 %88

91:                                               ; preds = %83
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %10, ptr align 4 %3, i64 4, i1 false)
  %92 = extractvalue { ptr, i64 } %18, 0
  %93 = extractvalue { ptr, i64 } %18, 1
  %94 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %10, ptr nonnull readonly align 1 %92, i64 %93)
  %95 = icmp ne i16 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %91
  ret i16 %94

97:                                               ; preds = %91
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %9, ptr align 4 %3, i64 4, i1 false)
  %98 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %99 = load i8, ptr %98, align 1
  %100 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %9, i8 %99, i64 %85)
  %101 = icmp ne i16 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %97
  ret i16 %100

103:                                              ; preds = %97
  br label %63

104:                                              ; preds = %55
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %8, ptr align 4 %3, i64 4, i1 false)
  %105 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %106 = load i8, ptr %105, align 1
  %107 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %8, i8 %106, i64 %46)
  %108 = icmp ne i16 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %104
  ret i16 %107

110:                                              ; preds = %104
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %7, ptr align 4 %3, i64 4, i1 false)
  %111 = extractvalue { ptr, i64 } %18, 0
  %112 = extractvalue { ptr, i64 } %18, 1
  %113 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %7, ptr nonnull readonly align 1 %111, i64 %112)
  %114 = icmp ne i16 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %110
  ret i16 %113

116:                                              ; preds = %110
  br label %63

117:                                              ; preds = %32
  ret i16 %35

118:                                              ; preds = %32
  br label %23
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @unicode.utf8CountCodepoints(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = alloca { i64, i16, [6 x i8] }, align 8
  %7 = alloca { i21, i16, [2 x i8] }, align 4
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca { i64, i16, [6 x i8] }, align 8
  %10 = alloca { i16, i3, [1 x i8] }, align 2
  %11 = alloca { ptr, i64 }, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %15 = insertvalue { ptr, i64 } %14, i64 %2, 1
  store i64 0, ptr %13, align 8
  store i64 0, ptr %12, align 8
  br label %20

16:                                               ; preds = %26
  %17 = load i64, ptr %13, align 8
  %18 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  store i16 0, ptr %18, align 2
  %19 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  store i64 %17, ptr %19, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void

20:                                               ; preds = %24, %3
  %21 = load i64, ptr %12, align 8
  %22 = extractvalue { ptr, i64 } %15, 1
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %25, label %26

24:                                               ; preds = %71
  br label %20

25:                                               ; preds = %20
  br label %31

26:                                               ; preds = %20
  br label %16

27:                                               ; preds = %60, %49
  %28 = load i64, ptr %12, align 8
  %29 = extractvalue { ptr, i64 } %15, 1
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %72, label %76

31:                                               ; preds = %35, %25
  %32 = load i64, ptr %12, align 8
  %33 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %32, i64 8)
  %34 = extractvalue { i64, i1 } %33, 1
  br i1 %34, label %36, label %37

35:                                               ; preds = %69
  br label %31

36:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

37:                                               ; preds = %31
  %38 = extractvalue { i64, i1 } %33, 0
  %39 = extractvalue { ptr, i64 } %15, 1
  %40 = icmp ule i64 %38, %39
  br i1 %40, label %41, label %49

41:                                               ; preds = %37
  store { ptr, i64 } %15, ptr %11, align 8
  %42 = load i64, ptr %12, align 8
  %43 = load { ptr, i64 }, ptr %11, align 8
  %44 = extractvalue { ptr, i64 } %43, 0
  %45 = getelementptr inbounds i8, ptr %44, i64 %42
  %46 = add nuw i64 %42, 8
  %47 = extractvalue { ptr, i64 } %43, 1
  %48 = icmp ule i64 %46, %47
  br i1 %48, label %54, label %55

49:                                               ; preds = %37
  br label %27

50:                                               ; preds = %54
  %51 = call fastcc i64 @mem.readIntNative__anon_6817(ptr nonnull readonly align 1 %45)
  %52 = and i64 %51, -9187201950435737472
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %60, label %61

54:                                               ; preds = %41
  br label %50

55:                                               ; preds = %41
  call fastcc void @builtin.panicOutOfBounds(i64 %46, i64 %47)
  unreachable

56:                                               ; preds = %61
  %57 = load i64, ptr %13, align 8
  %58 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %57, i64 8)
  %59 = extractvalue { i64, i1 } %58, 1
  br i1 %59, label %62, label %63

60:                                               ; preds = %50
  br label %27

61:                                               ; preds = %50
  br label %56

62:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %56
  %64 = extractvalue { i64, i1 } %58, 0
  store i64 %64, ptr %13, align 8
  %65 = load i64, ptr %12, align 8
  %66 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %65, i64 8)
  %67 = extractvalue { i64, i1 } %66, 1
  br i1 %67, label %68, label %69

68:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %63
  %70 = extractvalue { i64, i1 } %66, 0
  store i64 %70, ptr %12, align 8
  br label %35

71:                                               ; preds = %149, %76
  br label %24

72:                                               ; preds = %27
  %73 = load i64, ptr %12, align 8
  %74 = extractvalue { ptr, i64 } %15, 1
  %75 = icmp ult i64 %73, %74
  br i1 %75, label %84, label %85

76:                                               ; preds = %27
  br label %71

77:                                               ; preds = %84
  %78 = extractvalue { ptr, i64 } %15, 0
  %79 = getelementptr inbounds i8, ptr %78, i64 %73
  %80 = load i8, ptr %79, align 1
  call fastcc void @unicode.utf8ByteSequenceLength(ptr sret({ i16, i3, [1 x i8] }) %10, i8 %80)
  %81 = getelementptr inbounds { i16, i3, [1 x i8] }, ptr %10, i32 0, i32 0
  %82 = load i16, ptr %81, align 2
  %83 = icmp ne i16 %82, 0
  br i1 %83, label %86, label %91

84:                                               ; preds = %72
  br label %77

85:                                               ; preds = %72
  call fastcc void @builtin.panicOutOfBounds(i64 %73, i64 %74)
  unreachable

86:                                               ; preds = %77
  %87 = getelementptr inbounds { i16, i3, [1 x i8] }, ptr %10, i32 0, i32 0
  %88 = load i16, ptr %87, align 2
  %89 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %9, i32 0, i32 1
  store i16 %88, ptr %89, align 2
  %90 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %9, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %9, i64 16, i1 false)
  ret void

91:                                               ; preds = %77
  %92 = getelementptr inbounds { i16, i3, [1 x i8] }, ptr %10, i32 0, i32 1
  %93 = load i3, ptr %92, align 1
  %94 = load i64, ptr %12, align 8
  %95 = zext i3 %93 to i64
  %96 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %94, i64 %95)
  %97 = extractvalue { i64, i1 } %96, 1
  br i1 %97, label %99, label %100

98:                                               ; preds = %105
  switch i3 %93, label %111 [
    i3 1, label %121
  ]

99:                                               ; preds = %91
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %91
  %101 = extractvalue { i64, i1 } %96, 0
  %102 = extractvalue { ptr, i64 } %15, 1
  %103 = icmp ugt i64 %101, %102
  br i1 %103, label %104, label %105

104:                                              ; preds = %100
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @197, i64 16, i1 false)
  ret void

105:                                              ; preds = %100
  br label %98

106:                                              ; preds = %141, %121
  %107 = load i64, ptr %12, align 8
  %108 = zext i3 %93 to i64
  %109 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %107, i64 %108)
  %110 = extractvalue { i64, i1 } %109, 1
  br i1 %110, label %142, label %143

111:                                              ; preds = %98
  store { ptr, i64 } %15, ptr %8, align 8
  %112 = load i64, ptr %12, align 8
  %113 = load { ptr, i64 }, ptr %8, align 8
  %114 = extractvalue { ptr, i64 } %113, 0
  %115 = getelementptr inbounds i8, ptr %114, i64 %112
  %116 = zext i3 %93 to i64
  %117 = add nuw i64 %112, %116
  %118 = zext i3 %93 to i64
  %119 = extractvalue { ptr, i64 } %113, 1
  %120 = icmp ule i64 %117, %119
  br i1 %120, label %124, label %125

121:                                              ; preds = %98
  br label %106

122:                                              ; preds = %124
  %123 = icmp ule i64 %112, %117
  br i1 %123, label %134, label %135

124:                                              ; preds = %111
  br label %122

125:                                              ; preds = %111
  call fastcc void @builtin.panicOutOfBounds(i64 %117, i64 %119)
  unreachable

126:                                              ; preds = %134
  %127 = insertvalue { ptr, i64 } poison, ptr %115, 0
  %128 = insertvalue { ptr, i64 } %127, i64 %118, 1
  %129 = extractvalue { ptr, i64 } %128, 0
  %130 = extractvalue { ptr, i64 } %128, 1
  call fastcc void @unicode.utf8Decode(ptr sret({ i21, i16, [2 x i8] }) %7, ptr nonnull readonly align 1 %129, i64 %130)
  %131 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %7, i32 0, i32 1
  %132 = load i16, ptr %131, align 2
  %133 = icmp ne i16 %132, 0
  br i1 %133, label %136, label %141

134:                                              ; preds = %122
  br label %126

135:                                              ; preds = %122
  call fastcc void @builtin.panicOutOfBounds(i64 %112, i64 %117)
  unreachable

136:                                              ; preds = %126
  %137 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %7, i32 0, i32 1
  %138 = load i16, ptr %137, align 2
  %139 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 %138, ptr %139, align 2
  %140 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void

141:                                              ; preds = %126
  br label %106

142:                                              ; preds = %106
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

143:                                              ; preds = %106
  %144 = extractvalue { i64, i1 } %109, 0
  store i64 %144, ptr %12, align 8
  %145 = load i64, ptr %13, align 8
  %146 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %145, i64 1)
  %147 = extractvalue { i64, i1 } %146, 1
  br i1 %147, label %148, label %149

148:                                              ; preds = %143
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

149:                                              ; preds = %143
  %150 = extractvalue { i64, i1 } %146, 0
  store i64 %150, ptr %13, align 8
  br label %71
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 4 %0, i8 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %7 = alloca i64, align 8
  %8 = alloca [256 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %8, i8 -86, i64 256, i1 false)
  %9 = getelementptr inbounds i8, ptr %8, i64 0
  call void @llvm.memset.p0.i64(ptr align 1 %9, i8 %1, i64 256, i1 false)
  store i64 %2, ptr %7, align 8
  br label %11

10:                                               ; preds = %22
  ret i16 0

11:                                               ; preds = %14, %3
  %12 = load i64, ptr %7, align 8
  %13 = icmp ugt i64 %12, 0
  br i1 %13, label %15, label %22

14:                                               ; preds = %48
  br label %11

15:                                               ; preds = %11
  %16 = load i64, ptr %7, align 8
  %17 = call i64 @llvm.umin.i64(i64 256, i64 %16)
  %18 = trunc i64 %17 to i9
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %0, i64 4, i1 false)
  %19 = getelementptr inbounds i8, ptr %8, i64 0
  %20 = zext i9 %18 to i64
  %21 = icmp ule i64 0, %20
  br i1 %21, label %25, label %26

22:                                               ; preds = %11
  br label %10

23:                                               ; preds = %25
  %24 = icmp ule i64 %20, 256
  br i1 %24, label %29, label %30

25:                                               ; preds = %15
  br label %23

26:                                               ; preds = %15
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %20)
  unreachable

27:                                               ; preds = %29
  %28 = icmp ule i64 0, %20
  br i1 %28, label %39, label %40

29:                                               ; preds = %23
  br label %27

30:                                               ; preds = %23
  call fastcc void @builtin.panicOutOfBounds(i64 %20, i64 256)
  unreachable

31:                                               ; preds = %39
  %32 = insertvalue { ptr, i64 } poison, ptr %19, 0
  %33 = insertvalue { ptr, i64 } %32, i64 %20, 1
  store { ptr, i64 } %33, ptr %5, align 8
  %34 = load { ptr, i64 }, ptr %5, align 8
  %35 = extractvalue { ptr, i64 } %34, 0
  %36 = extractvalue { ptr, i64 } %34, 1
  %37 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %6, ptr nonnull readonly align 1 %35, i64 %36)
  %38 = icmp ne i16 %37, 0
  br i1 %38, label %41, label %42

39:                                               ; preds = %27
  br label %31

40:                                               ; preds = %27
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %20)
  unreachable

41:                                               ; preds = %31
  ret i16 %37

42:                                               ; preds = %31
  %43 = load i64, ptr %7, align 8
  %44 = zext i9 %18 to i64
  %45 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %43, i64 %44)
  %46 = extractvalue { i64, i1 } %45, 1
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i64, i1 } %45, 0
  store i64 %49, ptr %7, align 8
  br label %14
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @mem.readIntNative__anon_6817(ptr nonnull readonly align 1 %0) unnamed_addr #0 {
  %2 = load i64, ptr %0, align 1
  ret i64 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @unicode.utf8ByteSequenceLength(ptr noalias nonnull sret({ i16, i3, [1 x i8] }) %0, i8 %1) unnamed_addr #0 {
  switch i8 %1, label %4 [
  ]

3:                                                ; preds = %24, %23, %18, %13, %8
  ret void

4:                                                ; preds = %2
  %5 = icmp uge i8 %1, 0
  %6 = icmp ule i8 %1, 127
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @192, i64 4, i1 false)
  br label %3

9:                                                ; preds = %4
  %10 = icmp uge i8 %1, -64
  %11 = icmp ule i8 %1, -33
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @193, i64 4, i1 false)
  br label %3

14:                                               ; preds = %9
  %15 = icmp uge i8 %1, -32
  %16 = icmp ule i8 %1, -17
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @194, i64 4, i1 false)
  br label %3

19:                                               ; preds = %14
  %20 = icmp uge i8 %1, -16
  %21 = icmp ule i8 %1, -9
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %19
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @195, i64 4, i1 false)
  br label %3

24:                                               ; preds = %19
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 @196, i64 4, i1 false)
  br label %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @unicode.utf8Decode(ptr noalias nonnull sret({ i21, i16, [2 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { i21, i16, [2 x i8] }, align 4
  %6 = alloca { i21, i16, [2 x i8] }, align 4
  %7 = alloca { i21, i16, [2 x i8] }, align 4
  %8 = alloca { i21, i16, [2 x i8] }, align 4
  %9 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %10 = insertvalue { ptr, i64 } %9, i64 %2, 1
  %11 = extractvalue { ptr, i64 } %10, 1
  switch i64 %11, label %13 [
    i64 1, label %14
    i64 2, label %26
    i64 3, label %29
    i64 4, label %32
  ]

12:                                               ; preds = %32, %29, %26, %17
  ret void

13:                                               ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @207)
  unreachable

14:                                               ; preds = %3
  %15 = extractvalue { ptr, i64 } %10, 1
  %16 = icmp ult i64 0, %15
  br i1 %16, label %24, label %25

17:                                               ; preds = %24
  %18 = extractvalue { ptr, i64 } %10, 0
  %19 = getelementptr inbounds i8, ptr %18, i64 0
  %20 = load i8, ptr %19, align 1
  %21 = zext i8 %20 to i21
  %22 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %8, i32 0, i32 1
  store i16 0, ptr %22, align 2
  %23 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %8, i32 0, i32 0
  store i21 %21, ptr %23, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %8, i64 8, i1 false)
  br label %12

24:                                               ; preds = %14
  br label %17

25:                                               ; preds = %14
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %15)
  unreachable

26:                                               ; preds = %3
  %27 = extractvalue { ptr, i64 } %10, 0
  %28 = extractvalue { ptr, i64 } %10, 1
  call fastcc void @unicode.utf8Decode2(ptr sret({ i21, i16, [2 x i8] }) %7, ptr nonnull readonly align 1 %27, i64 %28)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %7, i64 8, i1 false)
  br label %12

29:                                               ; preds = %3
  %30 = extractvalue { ptr, i64 } %10, 0
  %31 = extractvalue { ptr, i64 } %10, 1
  call fastcc void @unicode.utf8Decode3(ptr sret({ i21, i16, [2 x i8] }) %6, ptr nonnull readonly align 1 %30, i64 %31)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %6, i64 8, i1 false)
  br label %12

32:                                               ; preds = %3
  %33 = extractvalue { ptr, i64 } %10, 0
  %34 = extractvalue { ptr, i64 } %10, 1
  call fastcc void @unicode.utf8Decode4(ptr sret({ i21, i16, [2 x i8] }) %5, ptr nonnull readonly align 1 %33, i64 %34)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %5, i64 8, i1 false)
  br label %12
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @unicode.utf8Decode2(ptr noalias nonnull sret({ i21, i16, [2 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { i21, i16, [2 x i8] }, align 4
  %6 = alloca i21, align 4
  %7 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %8 = insertvalue { ptr, i64 } %7, i64 %2, 1
  %9 = extractvalue { ptr, i64 } %8, 1
  %10 = icmp eq i64 %9, 2
  call fastcc void @debug.assert(i1 %10)
  %11 = extractvalue { ptr, i64 } %8, 1
  %12 = icmp ult i64 0, %11
  br i1 %12, label %21, label %22

13:                                               ; preds = %21
  %14 = extractvalue { ptr, i64 } %8, 0
  %15 = getelementptr inbounds i8, ptr %14, i64 0
  %16 = load i8, ptr %15, align 1
  %17 = and i8 %16, -32
  %18 = icmp eq i8 %17, -64
  call fastcc void @debug.assert(i1 %18)
  %19 = extractvalue { ptr, i64 } %8, 1
  %20 = icmp ult i64 0, %19
  br i1 %20, label %31, label %32

21:                                               ; preds = %3
  br label %13

22:                                               ; preds = %3
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %11)
  unreachable

23:                                               ; preds = %31
  %24 = extractvalue { ptr, i64 } %8, 0
  %25 = getelementptr inbounds i8, ptr %24, i64 0
  %26 = load i8, ptr %25, align 1
  %27 = and i8 %26, 31
  %28 = zext i8 %27 to i21
  store i21 %28, ptr %6, align 4
  %29 = extractvalue { ptr, i64 } %8, 1
  %30 = icmp ult i64 1, %29
  br i1 %30, label %41, label %42

31:                                               ; preds = %13
  br label %23

32:                                               ; preds = %13
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %19)
  unreachable

33:                                               ; preds = %44
  %34 = load i21, ptr %6, align 4
  br i1 true, label %50, label %51

35:                                               ; preds = %41
  %36 = extractvalue { ptr, i64 } %8, 0
  %37 = getelementptr inbounds i8, ptr %36, i64 1
  %38 = load i8, ptr %37, align 1
  %39 = and i8 %38, -64
  %40 = icmp ne i8 %39, -128
  br i1 %40, label %43, label %44

41:                                               ; preds = %23
  br label %35

42:                                               ; preds = %23
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %29)
  unreachable

43:                                               ; preds = %35
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @213, i64 8, i1 false)
  ret void

44:                                               ; preds = %35
  br label %33

45:                                               ; preds = %50
  %46 = shl i21 %34, 6
  store i21 %46, ptr %6, align 4
  %47 = load i21, ptr %6, align 4
  %48 = extractvalue { ptr, i64 } %8, 1
  %49 = icmp ult i64 1, %48
  br i1 %49, label %61, label %62

50:                                               ; preds = %33
  br label %45

51:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @214)
  unreachable

52:                                               ; preds = %61
  %53 = extractvalue { ptr, i64 } %8, 0
  %54 = getelementptr inbounds i8, ptr %53, i64 1
  %55 = load i8, ptr %54, align 1
  %56 = and i8 %55, 63
  %57 = zext i8 %56 to i21
  %58 = or i21 %47, %57
  store i21 %58, ptr %6, align 4
  %59 = load i21, ptr %6, align 4
  %60 = icmp ult i21 %59, 128
  br i1 %60, label %67, label %68

61:                                               ; preds = %45
  br label %52

62:                                               ; preds = %45
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %48)
  unreachable

63:                                               ; preds = %68
  %64 = load i21, ptr %6, align 4
  %65 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %5, i32 0, i32 1
  store i16 0, ptr %65, align 2
  %66 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %5, i32 0, i32 0
  store i21 %64, ptr %66, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %5, i64 8, i1 false)
  ret void

67:                                               ; preds = %52
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @215, i64 8, i1 false)
  ret void

68:                                               ; preds = %52
  br label %63
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @unicode.utf8Decode3(ptr noalias nonnull sret({ i21, i16, [2 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { i21, i16, [2 x i8] }, align 4
  %6 = alloca i21, align 4
  %7 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %8 = insertvalue { ptr, i64 } %7, i64 %2, 1
  %9 = extractvalue { ptr, i64 } %8, 1
  %10 = icmp eq i64 %9, 3
  call fastcc void @debug.assert(i1 %10)
  %11 = extractvalue { ptr, i64 } %8, 1
  %12 = icmp ult i64 0, %11
  br i1 %12, label %21, label %22

13:                                               ; preds = %21
  %14 = extractvalue { ptr, i64 } %8, 0
  %15 = getelementptr inbounds i8, ptr %14, i64 0
  %16 = load i8, ptr %15, align 1
  %17 = and i8 %16, -16
  %18 = icmp eq i8 %17, -32
  call fastcc void @debug.assert(i1 %18)
  %19 = extractvalue { ptr, i64 } %8, 1
  %20 = icmp ult i64 0, %19
  br i1 %20, label %31, label %32

21:                                               ; preds = %3
  br label %13

22:                                               ; preds = %3
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %11)
  unreachable

23:                                               ; preds = %31
  %24 = extractvalue { ptr, i64 } %8, 0
  %25 = getelementptr inbounds i8, ptr %24, i64 0
  %26 = load i8, ptr %25, align 1
  %27 = and i8 %26, 15
  %28 = zext i8 %27 to i21
  store i21 %28, ptr %6, align 4
  %29 = extractvalue { ptr, i64 } %8, 1
  %30 = icmp ult i64 1, %29
  br i1 %30, label %41, label %42

31:                                               ; preds = %13
  br label %23

32:                                               ; preds = %13
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %19)
  unreachable

33:                                               ; preds = %44
  %34 = load i21, ptr %6, align 4
  br i1 true, label %50, label %51

35:                                               ; preds = %41
  %36 = extractvalue { ptr, i64 } %8, 0
  %37 = getelementptr inbounds i8, ptr %36, i64 1
  %38 = load i8, ptr %37, align 1
  %39 = and i8 %38, -64
  %40 = icmp ne i8 %39, -128
  br i1 %40, label %43, label %44

41:                                               ; preds = %23
  br label %35

42:                                               ; preds = %23
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %29)
  unreachable

43:                                               ; preds = %35
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @216, i64 8, i1 false)
  ret void

44:                                               ; preds = %35
  br label %33

45:                                               ; preds = %50
  %46 = shl i21 %34, 6
  store i21 %46, ptr %6, align 4
  %47 = load i21, ptr %6, align 4
  %48 = extractvalue { ptr, i64 } %8, 1
  %49 = icmp ult i64 1, %48
  br i1 %49, label %61, label %62

50:                                               ; preds = %33
  br label %45

51:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @217)
  unreachable

52:                                               ; preds = %61
  %53 = extractvalue { ptr, i64 } %8, 0
  %54 = getelementptr inbounds i8, ptr %53, i64 1
  %55 = load i8, ptr %54, align 1
  %56 = and i8 %55, 63
  %57 = zext i8 %56 to i21
  %58 = or i21 %47, %57
  store i21 %58, ptr %6, align 4
  %59 = extractvalue { ptr, i64 } %8, 1
  %60 = icmp ult i64 2, %59
  br i1 %60, label %71, label %72

61:                                               ; preds = %45
  br label %52

62:                                               ; preds = %45
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %48)
  unreachable

63:                                               ; preds = %74
  %64 = load i21, ptr %6, align 4
  br i1 true, label %80, label %81

65:                                               ; preds = %71
  %66 = extractvalue { ptr, i64 } %8, 0
  %67 = getelementptr inbounds i8, ptr %66, i64 2
  %68 = load i8, ptr %67, align 1
  %69 = and i8 %68, -64
  %70 = icmp ne i8 %69, -128
  br i1 %70, label %73, label %74

71:                                               ; preds = %52
  br label %65

72:                                               ; preds = %52
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %59)
  unreachable

73:                                               ; preds = %65
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @216, i64 8, i1 false)
  ret void

74:                                               ; preds = %65
  br label %63

75:                                               ; preds = %80
  %76 = shl i21 %64, 6
  store i21 %76, ptr %6, align 4
  %77 = load i21, ptr %6, align 4
  %78 = extractvalue { ptr, i64 } %8, 1
  %79 = icmp ult i64 2, %78
  br i1 %79, label %91, label %92

80:                                               ; preds = %63
  br label %75

81:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @217)
  unreachable

82:                                               ; preds = %91
  %83 = extractvalue { ptr, i64 } %8, 0
  %84 = getelementptr inbounds i8, ptr %83, i64 2
  %85 = load i8, ptr %84, align 1
  %86 = and i8 %85, 63
  %87 = zext i8 %86 to i21
  %88 = or i21 %77, %87
  store i21 %88, ptr %6, align 4
  %89 = load i21, ptr %6, align 4
  %90 = icmp ult i21 %89, 2048
  br i1 %90, label %96, label %97

91:                                               ; preds = %75
  br label %82

92:                                               ; preds = %75
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %78)
  unreachable

93:                                               ; preds = %97
  %94 = load i21, ptr %6, align 4
  %95 = icmp ule i21 55296, %94
  br i1 %95, label %104, label %107

96:                                               ; preds = %82
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @218, i64 8, i1 false)
  ret void

97:                                               ; preds = %82
  br label %93

98:                                               ; preds = %109
  %99 = load i21, ptr %6, align 4
  %100 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %5, i32 0, i32 1
  store i16 0, ptr %100, align 2
  %101 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %5, i32 0, i32 0
  store i21 %99, ptr %101, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %5, i64 8, i1 false)
  ret void

102:                                              ; preds = %107, %104
  %103 = phi i1 [ %106, %104 ], [ false, %107 ]
  br i1 %103, label %108, label %109

104:                                              ; preds = %93
  %105 = load i21, ptr %6, align 4
  %106 = icmp ule i21 %105, 57343
  br label %102

107:                                              ; preds = %93
  br label %102

108:                                              ; preds = %102
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @219, i64 8, i1 false)
  ret void

109:                                              ; preds = %102
  br label %98
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @unicode.utf8Decode4(ptr noalias nonnull sret({ i21, i16, [2 x i8] }) %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { i21, i16, [2 x i8] }, align 4
  %6 = alloca i21, align 4
  %7 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %8 = insertvalue { ptr, i64 } %7, i64 %2, 1
  %9 = extractvalue { ptr, i64 } %8, 1
  %10 = icmp eq i64 %9, 4
  call fastcc void @debug.assert(i1 %10)
  %11 = extractvalue { ptr, i64 } %8, 1
  %12 = icmp ult i64 0, %11
  br i1 %12, label %21, label %22

13:                                               ; preds = %21
  %14 = extractvalue { ptr, i64 } %8, 0
  %15 = getelementptr inbounds i8, ptr %14, i64 0
  %16 = load i8, ptr %15, align 1
  %17 = and i8 %16, -8
  %18 = icmp eq i8 %17, -16
  call fastcc void @debug.assert(i1 %18)
  %19 = extractvalue { ptr, i64 } %8, 1
  %20 = icmp ult i64 0, %19
  br i1 %20, label %31, label %32

21:                                               ; preds = %3
  br label %13

22:                                               ; preds = %3
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %11)
  unreachable

23:                                               ; preds = %31
  %24 = extractvalue { ptr, i64 } %8, 0
  %25 = getelementptr inbounds i8, ptr %24, i64 0
  %26 = load i8, ptr %25, align 1
  %27 = and i8 %26, 7
  %28 = zext i8 %27 to i21
  store i21 %28, ptr %6, align 4
  %29 = extractvalue { ptr, i64 } %8, 1
  %30 = icmp ult i64 1, %29
  br i1 %30, label %41, label %42

31:                                               ; preds = %13
  br label %23

32:                                               ; preds = %13
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %19)
  unreachable

33:                                               ; preds = %44
  %34 = load i21, ptr %6, align 4
  br i1 true, label %50, label %51

35:                                               ; preds = %41
  %36 = extractvalue { ptr, i64 } %8, 0
  %37 = getelementptr inbounds i8, ptr %36, i64 1
  %38 = load i8, ptr %37, align 1
  %39 = and i8 %38, -64
  %40 = icmp ne i8 %39, -128
  br i1 %40, label %43, label %44

41:                                               ; preds = %23
  br label %35

42:                                               ; preds = %23
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %29)
  unreachable

43:                                               ; preds = %35
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @220, i64 8, i1 false)
  ret void

44:                                               ; preds = %35
  br label %33

45:                                               ; preds = %50
  %46 = shl i21 %34, 6
  store i21 %46, ptr %6, align 4
  %47 = load i21, ptr %6, align 4
  %48 = extractvalue { ptr, i64 } %8, 1
  %49 = icmp ult i64 1, %48
  br i1 %49, label %61, label %62

50:                                               ; preds = %33
  br label %45

51:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @221)
  unreachable

52:                                               ; preds = %61
  %53 = extractvalue { ptr, i64 } %8, 0
  %54 = getelementptr inbounds i8, ptr %53, i64 1
  %55 = load i8, ptr %54, align 1
  %56 = and i8 %55, 63
  %57 = zext i8 %56 to i21
  %58 = or i21 %47, %57
  store i21 %58, ptr %6, align 4
  %59 = extractvalue { ptr, i64 } %8, 1
  %60 = icmp ult i64 2, %59
  br i1 %60, label %71, label %72

61:                                               ; preds = %45
  br label %52

62:                                               ; preds = %45
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %48)
  unreachable

63:                                               ; preds = %74
  %64 = load i21, ptr %6, align 4
  br i1 true, label %80, label %81

65:                                               ; preds = %71
  %66 = extractvalue { ptr, i64 } %8, 0
  %67 = getelementptr inbounds i8, ptr %66, i64 2
  %68 = load i8, ptr %67, align 1
  %69 = and i8 %68, -64
  %70 = icmp ne i8 %69, -128
  br i1 %70, label %73, label %74

71:                                               ; preds = %52
  br label %65

72:                                               ; preds = %52
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %59)
  unreachable

73:                                               ; preds = %65
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @220, i64 8, i1 false)
  ret void

74:                                               ; preds = %65
  br label %63

75:                                               ; preds = %80
  %76 = shl i21 %64, 6
  store i21 %76, ptr %6, align 4
  %77 = load i21, ptr %6, align 4
  %78 = extractvalue { ptr, i64 } %8, 1
  %79 = icmp ult i64 2, %78
  br i1 %79, label %91, label %92

80:                                               ; preds = %63
  br label %75

81:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @221)
  unreachable

82:                                               ; preds = %91
  %83 = extractvalue { ptr, i64 } %8, 0
  %84 = getelementptr inbounds i8, ptr %83, i64 2
  %85 = load i8, ptr %84, align 1
  %86 = and i8 %85, 63
  %87 = zext i8 %86 to i21
  %88 = or i21 %77, %87
  store i21 %88, ptr %6, align 4
  %89 = extractvalue { ptr, i64 } %8, 1
  %90 = icmp ult i64 3, %89
  br i1 %90, label %101, label %102

91:                                               ; preds = %75
  br label %82

92:                                               ; preds = %75
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %78)
  unreachable

93:                                               ; preds = %104
  %94 = load i21, ptr %6, align 4
  br i1 true, label %110, label %111

95:                                               ; preds = %101
  %96 = extractvalue { ptr, i64 } %8, 0
  %97 = getelementptr inbounds i8, ptr %96, i64 3
  %98 = load i8, ptr %97, align 1
  %99 = and i8 %98, -64
  %100 = icmp ne i8 %99, -128
  br i1 %100, label %103, label %104

101:                                              ; preds = %82
  br label %95

102:                                              ; preds = %82
  call fastcc void @builtin.panicOutOfBounds(i64 3, i64 %89)
  unreachable

103:                                              ; preds = %95
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @220, i64 8, i1 false)
  ret void

104:                                              ; preds = %95
  br label %93

105:                                              ; preds = %110
  %106 = shl i21 %94, 6
  store i21 %106, ptr %6, align 4
  %107 = load i21, ptr %6, align 4
  %108 = extractvalue { ptr, i64 } %8, 1
  %109 = icmp ult i64 3, %108
  br i1 %109, label %121, label %122

110:                                              ; preds = %93
  br label %105

111:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @221)
  unreachable

112:                                              ; preds = %121
  %113 = extractvalue { ptr, i64 } %8, 0
  %114 = getelementptr inbounds i8, ptr %113, i64 3
  %115 = load i8, ptr %114, align 1
  %116 = and i8 %115, 63
  %117 = zext i8 %116 to i21
  %118 = or i21 %107, %117
  store i21 %118, ptr %6, align 4
  %119 = load i21, ptr %6, align 4
  %120 = icmp ult i21 %119, 65536
  br i1 %120, label %126, label %127

121:                                              ; preds = %105
  br label %112

122:                                              ; preds = %105
  call fastcc void @builtin.panicOutOfBounds(i64 3, i64 %108)
  unreachable

123:                                              ; preds = %127
  %124 = load i21, ptr %6, align 4
  %125 = icmp ugt i21 %124, -983041
  br i1 %125, label %132, label %133

126:                                              ; preds = %112
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @222, i64 8, i1 false)
  ret void

127:                                              ; preds = %112
  br label %123

128:                                              ; preds = %133
  %129 = load i21, ptr %6, align 4
  %130 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %5, i32 0, i32 1
  store i16 0, ptr %130, align 2
  %131 = getelementptr inbounds { i21, i16, [2 x i8] }, ptr %5, i32 0, i32 0
  store i21 %129, ptr %131, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %5, i64 8, i1 false)
  ret void

132:                                              ; preds = %123
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 @223, i64 8, i1 false)
  ret void

133:                                              ; preds = %123
  br label %128
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i8, i1 } @llvm.usub.with.overflow.i8(i8, i8) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind uwtable
declare ptr @__error() #3

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @debug.panicExtra__anon_6122(ptr align 8 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #4 {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca [4111 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %6, i8 -86, i64 4111, i1 false)
  %7 = getelementptr inbounds i8, ptr %6, i64 0
  %8 = getelementptr inbounds [4096 x i8], ptr %7, i64 0, i64 0
  %9 = insertvalue { ptr, i64 } poison, ptr %8, 0
  %10 = insertvalue { ptr, i64 } %9, i64 4096, 1
  %11 = extractvalue { ptr, i64 } %10, 0
  %12 = extractvalue { ptr, i64 } %10, 1
  call fastcc void @fmt.bufPrint__anon_6719(ptr sret({ { ptr, i64 }, i16, [6 x i8] }) %5, ptr nonnull align 1 %11, i64 %12, ptr nonnull readonly align 8 %2)
  %13 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %14 = load i16, ptr %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %21, label %24

16:                                               ; preds = %27, %21
  %17 = phi { ptr, i64 } [ %23, %21 ], [ %31, %27 ]
  store { ptr, i64 } %17, ptr %4, align 8
  %18 = load { ptr, i64 }, ptr %4, align 8
  %19 = extractvalue { ptr, i64 } %18, 0
  %20 = extractvalue { ptr, i64 } %18, 1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 %19, i64 %20, ptr align 8 %0, ptr nonnull readonly align 8 %1)
  unreachable

21:                                               ; preds = %3
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  %23 = load { ptr, i64 }, ptr %22, align 8
  br label %16

24:                                               ; preds = %3
  %25 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %26 = load i16, ptr %25, align 2
  switch i16 %26, label %32 [
    i16 6, label %33
  ]

27:                                               ; preds = %39
  %28 = phi ptr [ %6, %39 ]
  %29 = getelementptr inbounds [4111 x i8], ptr %28, i64 0, i64 0
  %30 = insertvalue { ptr, i64 } poison, ptr %29, 0
  %31 = insertvalue { ptr, i64 } %30, i64 4111, 1
  br label %16

32:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6720, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @187)
  unreachable

33:                                               ; preds = %24
  %34 = getelementptr inbounds i8, ptr %6, i64 4096
  %35 = getelementptr inbounds i8, ptr %34, i64 15
  %36 = icmp uge ptr %34, getelementptr inbounds (i8, ptr @debug.panicExtra__anon_6122__anon_6717, i64 15)
  %37 = icmp uge ptr @debug.panicExtra__anon_6122__anon_6717, %35
  %38 = or i1 %36, %37
  br i1 %38, label %40, label %41

39:                                               ; preds = %40
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %34, ptr align 1 @debug.panicExtra__anon_6122__anon_6717, i64 15, i1 false)
  br label %27

40:                                               ; preds = %33
  br label %39

41:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @187)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @fmt.bufPrint__anon_6719(ptr noalias nonnull sret({ { ptr, i64 }, i16, [6 x i8] }) %0, ptr nonnull align 1 %1, i64 %2, ptr nonnull readonly align 8 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %7 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %8 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %9 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %10 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %11 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %12 = insertvalue { ptr, i64 } %11, i64 %2, 1
  %13 = extractvalue { ptr, i64 } %12, 0
  %14 = extractvalue { ptr, i64 } %12, 1
  call fastcc void @io.fixed_buffer_stream.fixedBufferStream__anon_7042(ptr sret(%"io.fixed_buffer_stream.FixedBufferStream([]u8)") %9, ptr nonnull align 1 %13, i64 %14)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %9, i64 24, i1 false)
  call fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).writer"(ptr sret(%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))") %8, ptr nonnull align 8 %10)
  %15 = call fastcc i16 @fmt.format__anon_7058(ptr nonnull readonly align 8 %8, ptr nonnull readonly align 8 %3)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %4
  %18 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %7, i32 0, i32 1
  store i16 %15, ptr %18, align 2
  %19 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %7, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 24, i1 false)
  ret void

20:                                               ; preds = %4
  %21 = call fastcc { ptr, i64 } @"io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten"(ptr nonnull readonly align 8 %10)
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 0, ptr %22, align 2
  %23 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  store { ptr, i64 } %21, ptr %23, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @io.fixed_buffer_stream.fixedBufferStream__anon_7042(ptr noalias nonnull sret(%"io.fixed_buffer_stream.FixedBufferStream([]u8)") %0, ptr nonnull align 1 %1, i64 %2) unnamed_addr #0 {
  %4 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %5 = insertvalue { ptr, i64 } %4, i64 %2, 1
  %6 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %0, i32 0, i32 0
  store { ptr, i64 } %5, ptr %6, align 8
  %7 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %0, i32 0, i32 1
  store i64 0, ptr %7, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).writer"(ptr noalias nonnull sret(%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))") %0, ptr nonnull align 8 %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", ptr %0, i32 0, i32 0
  store ptr %1, ptr %3, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_7058(ptr nonnull readonly align 8 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %5 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %0, i64 8, i1 false)
  %6 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %5, ptr nonnull readonly align 1 @builtin.panicOutOfBounds__anon_6121, i64 27)
  %7 = icmp ne i16 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  ret i16 %6

9:                                                ; preds = %2
  %10 = getelementptr inbounds { i64, i64 }, ptr %1, i32 0, i32 0
  %11 = load i64, ptr %10, align 8
  %12 = call fastcc i16 @fmt.formatType__anon_7092(i64 %11, ptr nonnull readonly align 8 @205, ptr nonnull readonly align 8 %0, i64 3)
  %13 = icmp ne i16 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  ret i16 %12

15:                                               ; preds = %9
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %0, i64 8, i1 false)
  %16 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %4, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @builtin.panicOutOfBounds__anon_6121, i64 30), i64 6)
  %17 = icmp ne i16 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  ret i16 %16

19:                                               ; preds = %15
  %20 = getelementptr inbounds { i64, i64 }, ptr %1, i32 0, i32 1
  %21 = load i64, ptr %20, align 8
  %22 = call fastcc i16 @fmt.formatType__anon_7092(i64 %21, ptr nonnull readonly align 8 @205, ptr nonnull readonly align 8 %0, i64 3)
  %23 = icmp ne i16 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  ret i16 %22

25:                                               ; preds = %19
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc { ptr, i64 } @"io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten"(ptr nonnull readonly align 8 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %0, i64 24, i1 false)
  %4 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %3, i32 0, i32 0
  %5 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %0, i32 0, i32 1
  %6 = load i64, ptr %5, align 8
  %7 = load { ptr, i64 }, ptr %4, align 8
  %8 = extractvalue { ptr, i64 } %7, 0
  %9 = getelementptr inbounds i8, ptr %8, i64 0
  %10 = icmp ule i64 0, %6
  br i1 %10, label %14, label %15

11:                                               ; preds = %14
  %12 = extractvalue { ptr, i64 } %7, 1
  %13 = icmp ule i64 %6, %12
  br i1 %13, label %18, label %19

14:                                               ; preds = %1
  br label %11

15:                                               ; preds = %1
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %6)
  unreachable

16:                                               ; preds = %18
  %17 = icmp ule i64 0, %6
  br i1 %17, label %23, label %24

18:                                               ; preds = %11
  br label %16

19:                                               ; preds = %11
  call fastcc void @builtin.panicOutOfBounds(i64 %6, i64 %12)
  unreachable

20:                                               ; preds = %23
  %21 = insertvalue { ptr, i64 } poison, ptr %9, 0
  %22 = insertvalue { ptr, i64 } %21, i64 %6, 1
  ret { ptr, i64 } %22

23:                                               ; preds = %16
  br label %20

24:                                               ; preds = %16
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %6)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %0, ptr nonnull readonly align 1 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { i64, i16, [6 x i8] }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %8 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %9 = alloca i64, align 8
  %10 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %11 = insertvalue { ptr, i64 } %10, i64 %2, 1
  store i64 0, ptr %9, align 8
  br label %13

12:                                               ; preds = %26
  ret i16 0

13:                                               ; preds = %17, %3
  %14 = load i64, ptr %9, align 8
  %15 = extractvalue { ptr, i64 } %11, 1
  %16 = icmp ne i64 %14, %15
  br i1 %16, label %18, label %26

17:                                               ; preds = %56
  br label %13

18:                                               ; preds = %13
  %19 = load i64, ptr %9, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %0, i64 8, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %8, i64 8, i1 false)
  store { ptr, i64 } %11, ptr %6, align 8
  %20 = load i64, ptr %9, align 8
  %21 = load { ptr, i64 }, ptr %6, align 8
  %22 = extractvalue { ptr, i64 } %21, 0
  %23 = getelementptr inbounds i8, ptr %22, i64 %20
  %24 = extractvalue { ptr, i64 } %21, 1
  %25 = icmp ule i64 %20, %24
  br i1 %25, label %31, label %32

26:                                               ; preds = %13
  br label %12

27:                                               ; preds = %31
  %28 = sub nuw i64 %24, %20
  %29 = extractvalue { ptr, i64 } %21, 1
  %30 = icmp ule i64 %24, %29
  br i1 %30, label %35, label %36

31:                                               ; preds = %18
  br label %27

32:                                               ; preds = %18
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %20, i64 %24)
  unreachable

33:                                               ; preds = %35
  %34 = icmp ule i64 %20, %24
  br i1 %34, label %45, label %46

35:                                               ; preds = %27
  br label %33

36:                                               ; preds = %27
  call fastcc void @builtin.panicOutOfBounds(i64 %24, i64 %29)
  unreachable

37:                                               ; preds = %45
  %38 = insertvalue { ptr, i64 } poison, ptr %23, 0
  %39 = insertvalue { ptr, i64 } %38, i64 %28, 1
  %40 = extractvalue { ptr, i64 } %39, 0
  %41 = extractvalue { ptr, i64 } %39, 1
  call fastcc void @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).write"(ptr sret({ i64, i16, [6 x i8] }) %5, ptr nonnull readonly align 8 %7, ptr nonnull readonly align 1 %40, i64 %41)
  %42 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %43 = load i16, ptr %42, align 2
  %44 = icmp ne i16 %43, 0
  br i1 %44, label %47, label %50

45:                                               ; preds = %33
  br label %37

46:                                               ; preds = %33
  call fastcc void @builtin.panicOutOfBounds(i64 %20, i64 %24)
  unreachable

47:                                               ; preds = %37
  %48 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %49 = load i16, ptr %48, align 2
  ret i16 %49

50:                                               ; preds = %37
  %51 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  %52 = load i64, ptr %51, align 8
  %53 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %19, i64 %52)
  %54 = extractvalue { i64, i1 } %53, 1
  br i1 %54, label %55, label %56

55:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

56:                                               ; preds = %50
  %57 = extractvalue { i64, i1 } %53, 0
  store i64 %57, ptr %9, align 8
  br label %17
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatType__anon_7092(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2, i64 %3) unnamed_addr #0 {
  %5 = call fastcc i16 @fmt.formatValue__anon_7146(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2)
  ret i16 %5
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatValue__anon_7146(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatIntValue__anon_7147(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2)
  ret i16 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatIntValue__anon_7147(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatInt__anon_7152(i64 %0, i8 10, i1 false, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2)
  ret i16 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatInt__anon_7152(i64 %0, i8 %1, i1 %2, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %6 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %6, ptr %StackGuardSlot)
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca [2 x i8], align 1
  %9 = alloca [2 x i8], align 1
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca [65 x i8], align 1
  %13 = icmp uge i8 %1, 2
  call fastcc void @debug.assert(i1 %13)
  %14 = call fastcc i64 @math.absCast__anon_7153(i64 %0)
  call void @llvm.memset.p0.i64(ptr align 1 %12, i8 -86, i64 65, i1 false)
  store i64 %14, ptr %11, align 8
  store i64 65, ptr %10, align 8
  %15 = icmp eq i8 %1, 10
  br i1 %15, label %20, label %21

16:                                               ; preds = %79, %43
  %17 = load i64, ptr %10, align 8
  %18 = getelementptr inbounds i8, ptr %12, i64 %17
  %19 = icmp ule i64 %17, 65
  br i1 %19, label %121, label %122

20:                                               ; preds = %5
  br label %25

21:                                               ; preds = %5
  br label %80

22:                                               ; preds = %33
  %23 = load i64, ptr %11, align 8
  %24 = icmp ult i64 %23, 10
  br i1 %24, label %44, label %48

25:                                               ; preds = %28, %20
  %26 = load i64, ptr %11, align 8
  %27 = icmp uge i64 %26, 100
  br i1 %27, label %29, label %33

28:                                               ; preds = %35
  br label %25

29:                                               ; preds = %25
  %30 = load i64, ptr %10, align 8
  %31 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %30, i64 2)
  %32 = extractvalue { i64, i1 } %31, 1
  br i1 %32, label %34, label %35

33:                                               ; preds = %25
  br label %22

34:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %29
  %36 = extractvalue { i64, i1 } %31, 0
  store i64 %36, ptr %10, align 8
  %37 = load i64, ptr %10, align 8
  %38 = getelementptr inbounds i8, ptr %12, i64 %37
  %39 = load i64, ptr %11, align 8
  %40 = urem i64 %39, 100
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %9, i64 %40)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %38, ptr align 1 %9, i64 2, i1 false)
  %41 = load i64, ptr %11, align 8
  %42 = udiv i64 %41, 100
  store i64 %42, ptr %11, align 8
  br label %28

43:                                               ; preds = %74, %71
  br label %16

44:                                               ; preds = %22
  %45 = load i64, ptr %10, align 8
  %46 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %45, i64 1)
  %47 = extractvalue { i64, i1 } %46, 1
  br i1 %47, label %52, label %53

48:                                               ; preds = %22
  %49 = load i64, ptr %10, align 8
  %50 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %49, i64 2)
  %51 = extractvalue { i64, i1 } %50, 1
  br i1 %51, label %73, label %74

52:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

53:                                               ; preds = %44
  %54 = extractvalue { i64, i1 } %46, 0
  store i64 %54, ptr %10, align 8
  %55 = load i64, ptr %10, align 8
  %56 = icmp ult i64 %55, 65
  br i1 %56, label %62, label %63

57:                                               ; preds = %62
  %58 = getelementptr inbounds [65 x i8], ptr %12, i64 0, i64 %55
  %59 = load i64, ptr %11, align 8
  %60 = sub i64 255, %59
  %61 = icmp ule i64 %60, 255
  br i1 %61, label %68, label %69

62:                                               ; preds = %53
  br label %57

63:                                               ; preds = %53
  call fastcc void @builtin.panicOutOfBounds(i64 %55, i64 65)
  unreachable

64:                                               ; preds = %68
  %65 = trunc i64 %59 to i8
  %66 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 48, i8 %65)
  %67 = extractvalue { i8, i1 } %66, 1
  br i1 %67, label %70, label %71

68:                                               ; preds = %57
  br label %64

69:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @212)
  unreachable

70:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %64
  %72 = extractvalue { i8, i1 } %66, 0
  store i8 %72, ptr %58, align 1
  br label %43

73:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %48
  %75 = extractvalue { i64, i1 } %50, 0
  store i64 %75, ptr %10, align 8
  %76 = load i64, ptr %10, align 8
  %77 = getelementptr inbounds i8, ptr %12, i64 %76
  %78 = load i64, ptr %11, align 8
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %8, i64 %78)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %77, ptr align 1 %8, i64 2, i1 false)
  br label %43

79:                                               ; preds = %117
  br label %16

80:                                               ; preds = %116, %21
  %81 = load i64, ptr %11, align 8
  %82 = zext i8 %1 to i64
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %89, label %90

84:                                               ; preds = %89
  %85 = urem i64 %81, %82
  %86 = load i64, ptr %10, align 8
  %87 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %86, i64 1)
  %88 = extractvalue { i64, i1 } %87, 1
  br i1 %88, label %91, label %92

89:                                               ; preds = %80
  br label %84

90:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @212)
  unreachable

91:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

92:                                               ; preds = %84
  %93 = extractvalue { i64, i1 } %87, 0
  store i64 %93, ptr %10, align 8
  %94 = load i64, ptr %10, align 8
  %95 = icmp ult i64 %94, 65
  br i1 %95, label %100, label %101

96:                                               ; preds = %100
  %97 = getelementptr inbounds [65 x i8], ptr %12, i64 0, i64 %94
  %98 = sub i64 255, %85
  %99 = icmp ule i64 %98, 255
  br i1 %99, label %108, label %109

100:                                              ; preds = %92
  br label %96

101:                                              ; preds = %92
  call fastcc void @builtin.panicOutOfBounds(i64 %94, i64 65)
  unreachable

102:                                              ; preds = %108
  %103 = trunc i64 %85 to i8
  %104 = call fastcc i8 @fmt.digitToChar(i8 %103, i1 %2)
  store i8 %104, ptr %97, align 1
  %105 = load i64, ptr %11, align 8
  %106 = zext i8 %1 to i64
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %114, label %115

108:                                              ; preds = %96
  br label %102

109:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @212)
  unreachable

110:                                              ; preds = %114
  %111 = udiv i64 %105, %106
  store i64 %111, ptr %11, align 8
  %112 = load i64, ptr %11, align 8
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %117, label %118

114:                                              ; preds = %102
  br label %110

115:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @212)
  unreachable

116:                                              ; preds = %118
  br label %80

117:                                              ; preds = %110
  br label %79

118:                                              ; preds = %110
  br label %116

119:                                              ; preds = %121
  %120 = sub nuw i64 65, %17
  br i1 true, label %125, label %126

121:                                              ; preds = %16
  br label %119

122:                                              ; preds = %16
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %17, i64 65)
  unreachable

123:                                              ; preds = %125
  %124 = icmp ule i64 %17, 65
  br i1 %124, label %134, label %135

125:                                              ; preds = %119
  br label %123

126:                                              ; preds = %119
  call fastcc void @builtin.panicOutOfBounds(i64 65, i64 65)
  unreachable

127:                                              ; preds = %134
  %128 = insertvalue { ptr, i64 } poison, ptr %18, 0
  %129 = insertvalue { ptr, i64 } %128, i64 %120, 1
  store { ptr, i64 } %129, ptr %7, align 8
  %130 = load { ptr, i64 }, ptr %7, align 8
  %131 = extractvalue { ptr, i64 } %130, 0
  %132 = extractvalue { ptr, i64 } %130, 1
  %133 = call fastcc i16 @fmt.formatBuf__anon_7154(ptr nonnull readonly align 1 %131, i64 %132, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4)
  ret i16 %133

134:                                              ; preds = %123
  br label %127

135:                                              ; preds = %123
  call fastcc void @builtin.panicOutOfBounds(i64 %17, i64 65)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @math.absCast__anon_7153(i64 %0) unnamed_addr #0 {
  ret i64 %0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatBuf__anon_7154(ptr nonnull readonly align 1 %0, i64 %1, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 8 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %7 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %8 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %9 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %10 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %11 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %12 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %13 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %14 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %15 = alloca { i64, i16, [6 x i8] }, align 8
  %16 = alloca { i64, i8, [7 x i8] }, align 8
  %17 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %18 = insertvalue { ptr, i64 } %17, i64 %1, 1
  %19 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %16, ptr align 8 %19, i64 16, i1 false)
  %20 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %16, i32 0, i32 1
  %21 = load i8, ptr %20, align 1
  %22 = icmp ne i8 %21, 0
  br i1 %22, label %24, label %32

23:                                               ; preds = %118, %63
  ret i16 0

24:                                               ; preds = %4
  %25 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %16, i32 0, i32 0
  %26 = load i64, ptr %25, align 8
  %27 = extractvalue { ptr, i64 } %18, 0
  %28 = extractvalue { ptr, i64 } %18, 1
  call fastcc void @unicode.utf8CountCodepoints(ptr sret({ i64, i16, [6 x i8] }) %15, ptr nonnull readonly align 1 %27, i64 %28)
  %29 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %15, i32 0, i32 1
  %30 = load i16, ptr %29, align 2
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %40, label %43

32:                                               ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %3, i64 8, i1 false)
  %33 = extractvalue { ptr, i64 } %18, 0
  %34 = extractvalue { ptr, i64 } %18, 1
  %35 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %6, ptr nonnull readonly align 1 %33, i64 %34)
  %36 = icmp ne i16 %35, 0
  br i1 %36, label %117, label %118

37:                                               ; preds = %43, %40
  %38 = phi i64 [ %42, %40 ], [ %44, %43 ]
  %39 = icmp ult i64 %38, %26
  br i1 %39, label %48, label %51

40:                                               ; preds = %24
  %41 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %15, i32 0, i32 0
  %42 = load i64, ptr %41, align 8
  br label %37

43:                                               ; preds = %24
  %44 = extractvalue { ptr, i64 } %18, 1
  br label %37

45:                                               ; preds = %53, %51
  %46 = phi i64 [ %54, %53 ], [ 0, %51 ]
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %58, label %62

48:                                               ; preds = %37
  %49 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %26, i64 %38)
  %50 = extractvalue { i64, i1 } %49, 1
  br i1 %50, label %52, label %53

51:                                               ; preds = %37
  br label %45

52:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

53:                                               ; preds = %48
  %54 = extractvalue { i64, i1 } %49, 0
  br label %45

55:                                               ; preds = %62
  %56 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 2
  %57 = load i2, ptr %56, align 1
  switch i2 %57, label %64 [
    i2 0, label %65
    i2 1, label %78
    i2 -2, label %104
  ]

58:                                               ; preds = %45
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr align 8 %3, i64 8, i1 false)
  %59 = extractvalue { ptr, i64 } %18, 0
  %60 = extractvalue { ptr, i64 } %18, 1
  %61 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %14, ptr nonnull readonly align 1 %59, i64 %60)
  ret i16 %61

62:                                               ; preds = %45
  br label %55

63:                                               ; preds = %116, %103, %77
  br label %23

64:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6720, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @211)
  unreachable

65:                                               ; preds = %55
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %13, ptr align 8 %3, i64 8, i1 false)
  %66 = extractvalue { ptr, i64 } %18, 0
  %67 = extractvalue { ptr, i64 } %18, 1
  %68 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %13, ptr nonnull readonly align 1 %66, i64 %67)
  %69 = icmp ne i16 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %65
  ret i16 %68

71:                                               ; preds = %65
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %3, i64 8, i1 false)
  %72 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %73 = load i8, ptr %72, align 1
  %74 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %12, i8 %73, i64 %46)
  %75 = icmp ne i16 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %71
  ret i16 %74

77:                                               ; preds = %71
  br label %63

78:                                               ; preds = %55
  %79 = udiv i64 %46, 2
  %80 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %46, i64 1)
  %81 = extractvalue { i64, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %78
  %84 = extractvalue { i64, i1 } %80, 0
  %85 = udiv i64 %84, 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %3, i64 8, i1 false)
  %86 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %87 = load i8, ptr %86, align 1
  %88 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %11, i8 %87, i64 %79)
  %89 = icmp ne i16 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %83
  ret i16 %88

91:                                               ; preds = %83
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %3, i64 8, i1 false)
  %92 = extractvalue { ptr, i64 } %18, 0
  %93 = extractvalue { ptr, i64 } %18, 1
  %94 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %10, ptr nonnull readonly align 1 %92, i64 %93)
  %95 = icmp ne i16 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %91
  ret i16 %94

97:                                               ; preds = %91
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %3, i64 8, i1 false)
  %98 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %99 = load i8, ptr %98, align 1
  %100 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %9, i8 %99, i64 %85)
  %101 = icmp ne i16 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %97
  ret i16 %100

103:                                              ; preds = %97
  br label %63

104:                                              ; preds = %55
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %3, i64 8, i1 false)
  %105 = getelementptr inbounds %fmt.FormatOptions, ptr %2, i32 0, i32 3
  %106 = load i8, ptr %105, align 1
  %107 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %8, i8 %106, i64 %46)
  %108 = icmp ne i16 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %104
  ret i16 %107

110:                                              ; preds = %104
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %3, i64 8, i1 false)
  %111 = extractvalue { ptr, i64 } %18, 0
  %112 = extractvalue { ptr, i64 } %18, 1
  %113 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %7, ptr nonnull readonly align 1 %111, i64 %112)
  %114 = icmp ne i16 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %110
  ret i16 %113

116:                                              ; preds = %110
  br label %63

117:                                              ; preds = %32
  ret i16 %35

118:                                              ; preds = %32
  br label %23
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes"(ptr nonnull readonly align 8 %0, i8 %1, i64 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %7 = alloca i64, align 8
  %8 = alloca [256 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %8, i8 -86, i64 256, i1 false)
  %9 = getelementptr inbounds i8, ptr %8, i64 0
  call void @llvm.memset.p0.i64(ptr align 1 %9, i8 %1, i64 256, i1 false)
  store i64 %2, ptr %7, align 8
  br label %11

10:                                               ; preds = %22
  ret i16 0

11:                                               ; preds = %14, %3
  %12 = load i64, ptr %7, align 8
  %13 = icmp ugt i64 %12, 0
  br i1 %13, label %15, label %22

14:                                               ; preds = %48
  br label %11

15:                                               ; preds = %11
  %16 = load i64, ptr %7, align 8
  %17 = call i64 @llvm.umin.i64(i64 256, i64 %16)
  %18 = trunc i64 %17 to i9
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %0, i64 8, i1 false)
  %19 = getelementptr inbounds i8, ptr %8, i64 0
  %20 = zext i9 %18 to i64
  %21 = icmp ule i64 0, %20
  br i1 %21, label %25, label %26

22:                                               ; preds = %11
  br label %10

23:                                               ; preds = %25
  %24 = icmp ule i64 %20, 256
  br i1 %24, label %29, label %30

25:                                               ; preds = %15
  br label %23

26:                                               ; preds = %15
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %20)
  unreachable

27:                                               ; preds = %29
  %28 = icmp ule i64 0, %20
  br i1 %28, label %39, label %40

29:                                               ; preds = %23
  br label %27

30:                                               ; preds = %23
  call fastcc void @builtin.panicOutOfBounds(i64 %20, i64 256)
  unreachable

31:                                               ; preds = %39
  %32 = insertvalue { ptr, i64 } poison, ptr %19, 0
  %33 = insertvalue { ptr, i64 } %32, i64 %20, 1
  store { ptr, i64 } %33, ptr %5, align 8
  %34 = load { ptr, i64 }, ptr %5, align 8
  %35 = extractvalue { ptr, i64 } %34, 0
  %36 = extractvalue { ptr, i64 } %34, 1
  %37 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %6, ptr nonnull readonly align 1 %35, i64 %36)
  %38 = icmp ne i16 %37, 0
  br i1 %38, label %41, label %42

39:                                               ; preds = %27
  br label %31

40:                                               ; preds = %27
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %20)
  unreachable

41:                                               ; preds = %31
  ret i16 %37

42:                                               ; preds = %31
  %43 = load i64, ptr %7, align 8
  %44 = zext i9 %18 to i64
  %45 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %43, i64 %44)
  %46 = extractvalue { i64, i1 } %45, 1
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i64, i1 } %45, 0
  store i64 %49, ptr %7, align 8
  br label %14
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).write"(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { i64, i16, [6 x i8] }, align 8
  %7 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %8 = insertvalue { ptr, i64 } %7, i64 %3, 1
  %9 = getelementptr inbounds %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", ptr %1, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = extractvalue { ptr, i64 } %8, 0
  %12 = extractvalue { ptr, i64 } %8, 1
  call fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).write"(ptr sret({ i64, i16, [6 x i8] }) %6, ptr nonnull align 8 %10, ptr nonnull readonly align 1 %11, i64 %12)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).write"(ptr noalias nonnull sret({ i64, i16, [6 x i8] }) %0, ptr nonnull align 8 %1, ptr nonnull readonly align 1 %2, i64 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { i64, i16, [6 x i8] }, align 8
  %7 = alloca ptr, align 8
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca ptr, align 8
  %10 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %11 = insertvalue { ptr, i64 } %10, i64 %3, 1
  %12 = extractvalue { ptr, i64 } %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %21, label %22

14:                                               ; preds = %22
  %15 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 1
  %16 = load i64, ptr %15, align 8
  %17 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 0
  %18 = load { ptr, i64 }, ptr %17, align 8
  %19 = extractvalue { ptr, i64 } %18, 1
  %20 = icmp uge i64 %16, %19
  br i1 %20, label %29, label %30

21:                                               ; preds = %4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @241, i64 16, i1 false)
  ret void

22:                                               ; preds = %4
  br label %14

23:                                               ; preds = %30
  %24 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 1
  %25 = load i64, ptr %24, align 8
  %26 = extractvalue { ptr, i64 } %11, 1
  %27 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %25, i64 %26)
  %28 = extractvalue { i64, i1 } %27, 1
  br i1 %28, label %43, label %44

29:                                               ; preds = %14
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @242, i64 16, i1 false)
  ret void

30:                                               ; preds = %14
  br label %23

31:                                               ; preds = %61, %50
  %32 = phi i64 [ %51, %50 ], [ %62, %61 ]
  store ptr %1, ptr %9, align 8
  %33 = load ptr, ptr %9, align 8
  %34 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %33, i32 0, i32 0
  %35 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 1
  %36 = load i64, ptr %35, align 8
  %37 = load { ptr, i64 }, ptr %34, align 8
  %38 = extractvalue { ptr, i64 } %37, 0
  %39 = getelementptr inbounds i8, ptr %38, i64 %36
  %40 = add nuw i64 %36, %32
  %41 = extractvalue { ptr, i64 } %37, 1
  %42 = icmp ule i64 %40, %41
  br i1 %42, label %65, label %66

43:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %23
  %45 = extractvalue { i64, i1 } %27, 0
  %46 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 0
  %47 = load { ptr, i64 }, ptr %46, align 8
  %48 = extractvalue { ptr, i64 } %47, 1
  %49 = icmp ule i64 %45, %48
  br i1 %49, label %50, label %52

50:                                               ; preds = %44
  %51 = extractvalue { ptr, i64 } %11, 1
  br label %31

52:                                               ; preds = %44
  %53 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 0
  %54 = load { ptr, i64 }, ptr %53, align 8
  %55 = extractvalue { ptr, i64 } %54, 1
  %56 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %1, i32 0, i32 1
  %57 = load i64, ptr %56, align 8
  %58 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %55, i64 %57)
  %59 = extractvalue { i64, i1 } %58, 1
  br i1 %59, label %60, label %61

60:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %52
  %62 = extractvalue { i64, i1 } %58, 0
  br label %31

63:                                               ; preds = %65
  %64 = icmp ule i64 %36, %40
  br i1 %64, label %74, label %75

65:                                               ; preds = %31
  br label %63

66:                                               ; preds = %31
  call fastcc void @builtin.panicOutOfBounds(i64 %40, i64 %41)
  unreachable

67:                                               ; preds = %74
  %68 = insertvalue { ptr, i64 } poison, ptr %39, 0
  %69 = insertvalue { ptr, i64 } %68, i64 %32, 1
  store { ptr, i64 } %11, ptr %8, align 8
  %70 = load { ptr, i64 }, ptr %8, align 8
  %71 = extractvalue { ptr, i64 } %70, 0
  %72 = getelementptr inbounds i8, ptr %71, i64 0
  %73 = icmp ule i64 0, %32
  br i1 %73, label %79, label %80

74:                                               ; preds = %63
  br label %67

75:                                               ; preds = %63
  call fastcc void @builtin.panicOutOfBounds(i64 %36, i64 %40)
  unreachable

76:                                               ; preds = %79
  %77 = extractvalue { ptr, i64 } %70, 1
  %78 = icmp ule i64 %32, %77
  br i1 %78, label %83, label %84

79:                                               ; preds = %67
  br label %76

80:                                               ; preds = %67
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %32)
  unreachable

81:                                               ; preds = %83
  %82 = icmp ule i64 0, %32
  br i1 %82, label %91, label %92

83:                                               ; preds = %76
  br label %81

84:                                               ; preds = %76
  call fastcc void @builtin.panicOutOfBounds(i64 %32, i64 %77)
  unreachable

85:                                               ; preds = %91
  %86 = insertvalue { ptr, i64 } poison, ptr %72, 0
  %87 = insertvalue { ptr, i64 } %86, i64 %32, 1
  %88 = extractvalue { ptr, i64 } %69, 1
  %89 = extractvalue { ptr, i64 } %87, 1
  %90 = icmp eq i64 %88, %89
  br i1 %90, label %101, label %102

91:                                               ; preds = %81
  br label %85

92:                                               ; preds = %81
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %32)
  unreachable

93:                                               ; preds = %101
  %94 = extractvalue { ptr, i64 } %87, 0
  %95 = extractvalue { ptr, i64 } %69, 0
  %96 = getelementptr inbounds i8, ptr %94, i64 %88
  %97 = getelementptr inbounds i8, ptr %95, i64 %88
  %98 = icmp uge ptr %95, %96
  %99 = icmp uge ptr %94, %97
  %100 = or i1 %98, %99
  br i1 %100, label %111, label %112

101:                                              ; preds = %85
  br label %93

102:                                              ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_len_mismatch__anon_3866, i64 40, ptr align 8 null, ptr nonnull readonly align 8 @243)
  unreachable

103:                                              ; preds = %111
  %104 = extractvalue { ptr, i64 } %69, 1
  %105 = extractvalue { ptr, i64 } %69, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %105, ptr align 1 %94, i64 %104, i1 false)
  store ptr %1, ptr %7, align 8
  %106 = load ptr, ptr %7, align 8
  %107 = getelementptr inbounds %"io.fixed_buffer_stream.FixedBufferStream([]u8)", ptr %106, i32 0, i32 1
  %108 = load i64, ptr %107, align 8
  %109 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %108, i64 %32)
  %110 = extractvalue { i64, i1 } %109, 1
  br i1 %110, label %113, label %114

111:                                              ; preds = %93
  br label %103

112:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @243)
  unreachable

113:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

114:                                              ; preds = %103
  %115 = extractvalue { i64, i1 } %109, 0
  store i64 %115, ptr %107, align 8
  %116 = icmp eq i64 %32, 0
  br i1 %116, label %120, label %121

117:                                              ; preds = %121
  %118 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 0, ptr %118, align 2
  %119 = getelementptr inbounds { i64, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  store i64 %32, ptr %119, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void

120:                                              ; preds = %114
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 @242, i64 16, i1 false)
  ret void

121:                                              ; preds = %114
  br label %117
}

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @debug.panicExtra__anon_6127(ptr align 8 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #4 {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca [4111 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %6, i8 -86, i64 4111, i1 false)
  %7 = getelementptr inbounds i8, ptr %6, i64 0
  %8 = getelementptr inbounds [4096 x i8], ptr %7, i64 0, i64 0
  %9 = insertvalue { ptr, i64 } poison, ptr %8, 0
  %10 = insertvalue { ptr, i64 } %9, i64 4096, 1
  %11 = extractvalue { ptr, i64 } %10, 0
  %12 = extractvalue { ptr, i64 } %10, 1
  call fastcc void @fmt.bufPrint__anon_6725(ptr sret({ { ptr, i64 }, i16, [6 x i8] }) %5, ptr nonnull align 1 %11, i64 %12, ptr nonnull readonly align 8 %2)
  %13 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %14 = load i16, ptr %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %21, label %24

16:                                               ; preds = %27, %21
  %17 = phi { ptr, i64 } [ %23, %21 ], [ %31, %27 ]
  store { ptr, i64 } %17, ptr %4, align 8
  %18 = load { ptr, i64 }, ptr %4, align 8
  %19 = extractvalue { ptr, i64 } %18, 0
  %20 = extractvalue { ptr, i64 } %18, 1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 %19, i64 %20, ptr align 8 %0, ptr nonnull readonly align 8 %1)
  unreachable

21:                                               ; preds = %3
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  %23 = load { ptr, i64 }, ptr %22, align 8
  br label %16

24:                                               ; preds = %3
  %25 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %26 = load i16, ptr %25, align 2
  switch i16 %26, label %32 [
    i16 6, label %33
  ]

27:                                               ; preds = %39
  %28 = phi ptr [ %6, %39 ]
  %29 = getelementptr inbounds [4111 x i8], ptr %28, i64 0, i64 0
  %30 = insertvalue { ptr, i64 } poison, ptr %29, 0
  %31 = insertvalue { ptr, i64 } %30, i64 4111, 1
  br label %16

32:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6720, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @190)
  unreachable

33:                                               ; preds = %24
  %34 = getelementptr inbounds i8, ptr %6, i64 4096
  %35 = getelementptr inbounds i8, ptr %34, i64 15
  %36 = icmp uge ptr %34, getelementptr inbounds (i8, ptr @debug.panicExtra__anon_6122__anon_6717, i64 15)
  %37 = icmp uge ptr @debug.panicExtra__anon_6122__anon_6717, %35
  %38 = or i1 %36, %37
  br i1 %38, label %40, label %41

39:                                               ; preds = %40
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %34, ptr align 1 @debug.panicExtra__anon_6122__anon_6717, i64 15, i1 false)
  br label %27

40:                                               ; preds = %33
  br label %39

41:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @190)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @fmt.bufPrint__anon_6725(ptr noalias nonnull sret({ { ptr, i64 }, i16, [6 x i8] }) %0, ptr nonnull align 1 %1, i64 %2, ptr nonnull readonly align 8 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %7 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %8 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %9 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %10 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %11 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %12 = insertvalue { ptr, i64 } %11, i64 %2, 1
  %13 = extractvalue { ptr, i64 } %12, 0
  %14 = extractvalue { ptr, i64 } %12, 1
  call fastcc void @io.fixed_buffer_stream.fixedBufferStream__anon_7042(ptr sret(%"io.fixed_buffer_stream.FixedBufferStream([]u8)") %9, ptr nonnull align 1 %13, i64 %14)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %9, i64 24, i1 false)
  call fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).writer"(ptr sret(%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))") %8, ptr nonnull align 8 %10)
  %15 = call fastcc i16 @fmt.format__anon_7102(ptr nonnull readonly align 8 %8, ptr nonnull readonly align 8 %3)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %4
  %18 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %7, i32 0, i32 1
  store i16 %15, ptr %18, align 2
  %19 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %7, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 24, i1 false)
  ret void

20:                                               ; preds = %4
  %21 = call fastcc { ptr, i64 } @"io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten"(ptr nonnull readonly align 8 %10)
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 0, ptr %22, align 2
  %23 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  store { ptr, i64 } %21, ptr %23, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_7102(ptr nonnull readonly align 8 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %5 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %0, i64 8, i1 false)
  %6 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %5, ptr nonnull readonly align 1 @builtin.panicStartGreaterThanEnd__anon_6126, i64 12)
  %7 = icmp ne i16 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  ret i16 %6

9:                                                ; preds = %2
  %10 = getelementptr inbounds { i64, i64 }, ptr %1, i32 0, i32 0
  %11 = load i64, ptr %10, align 8
  %12 = call fastcc i16 @fmt.formatType__anon_7092(i64 %11, ptr nonnull readonly align 8 @206, ptr nonnull readonly align 8 %0, i64 3)
  %13 = icmp ne i16 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  ret i16 %12

15:                                               ; preds = %9
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %0, i64 8, i1 false)
  %16 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %4, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @builtin.panicStartGreaterThanEnd__anon_6126, i64 15), i64 26)
  %17 = icmp ne i16 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  ret i16 %16

19:                                               ; preds = %15
  %20 = getelementptr inbounds { i64, i64 }, ptr %1, i32 0, i32 1
  %21 = load i64, ptr %20, align 8
  %22 = call fastcc i16 @fmt.formatType__anon_7092(i64 %21, ptr nonnull readonly align 8 @206, ptr nonnull readonly align 8 %0, i64 3)
  %23 = icmp ne i16 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  ret i16 %22

25:                                               ; preds = %19
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).print__anon_6924"(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %2 = call fastcc i16 @fmt.format__anon_7132(ptr nonnull readonly align 4 %0)
  ret i16 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_7132(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %0, i64 4, i1 false)
  %4 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %3, ptr nonnull readonly align 1 @debug.dumpStackTrace__anon_6923, i64 48)
  %5 = icmp ne i16 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  ret i16 %4

7:                                                ; preds = %1
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @"atomic.Atomic.Atomic(u32).init"(ptr noalias nonnull sret(%fs.file.File) %0, i32 %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %fs.file.File, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: cold nounwind sspstrong uwtable
define internal fastcc void @Thread.Futex.wait(ptr nonnull readonly align 4 %0, i32 %1) unnamed_addr #8 {
  %3 = call fastcc i16 @Thread.Futex.DarwinImpl.wait(ptr nonnull readonly align 4 %0, i32 %1, ptr nonnull readonly align 8 @209)
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %6, label %7

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %2
  br label %5

7:                                                ; preds = %2
  switch i16 %3, label %8 [
    i16 25, label %9
  ]

8:                                                ; preds = %7
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6720, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @210)
  unreachable

9:                                                ; preds = %7
  call fastcc void @builtin.panicUnwrapError(ptr align 8 null, i16 %3)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @Thread.Futex.DarwinImpl.wait(ptr nonnull readonly align 4 %0, i32 %1, ptr nonnull readonly align 8 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  %5 = alloca i64, align 8
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %2, i32 0, i32 1
  %7 = load i8, ptr %6, align 1
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %14, label %18

9:                                                ; preds = %18, %14
  store i1 false, ptr %4, align 1
  %10 = load i64, ptr %5, align 8
  %11 = zext i32 %1 to i64
  %12 = call i32 @__ulock_wait2(i32 16777217, ptr readonly align 1 %0, i64 %11, i64 %10, i64 0)
  %13 = icmp sge i32 %12, 0
  br i1 %13, label %22, label %23

14:                                               ; preds = %3
  %15 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %2, i32 0, i32 0
  %16 = load i64, ptr %15, align 8
  %17 = icmp ne i64 %16, 0
  call fastcc void @debug.assert(i1 %17)
  store i64 %16, ptr %5, align 8
  br label %9

18:                                               ; preds = %3
  br label %9

19:                                               ; preds = %23
  %20 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %12)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %24, label %25

22:                                               ; preds = %9
  ret i16 0

23:                                               ; preds = %9
  br label %19

24:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

25:                                               ; preds = %19
  %26 = extractvalue { i32, i1 } %20, 0
  %27 = trunc i32 %26 to i16
  switch i16 %27, label %29 [
    i16 4, label %30
    i16 14, label %31
    i16 60, label %32
  ]

28:                                               ; preds = %38, %31, %30
  ret i16 0

29:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @226)
  unreachable

30:                                               ; preds = %25
  br label %28

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %25
  %33 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %2, i32 0, i32 1
  %34 = load i8, ptr %33, align 1
  %35 = icmp ne i8 %34, 0
  call fastcc void @debug.assert(i1 %35)
  %36 = load i1, ptr %4, align 1
  %37 = xor i1 %36, true
  br i1 %37, label %39, label %40

38:                                               ; preds = %40
  br label %28

39:                                               ; preds = %32
  ret i16 25

40:                                               ; preds = %32
  br label %38
}

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @builtin.panicUnwrapError(ptr align 8 %0, i16 %1) unnamed_addr #4 {
  %3 = alloca { i64, i8, [7 x i8] }, align 8
  %4 = alloca { { ptr, i64 } }, align 8
  %5 = call fastcc ptr @llvm.returnaddress(i32 0)
  %6 = ptrtoint ptr %5 to i64
  %7 = load ptr, ptr @__zig_err_name_table, align 8
  %8 = getelementptr inbounds { ptr, i64 }, ptr %7, i16 %1
  %9 = load { ptr, i64 }, ptr %8, align 8
  %10 = getelementptr inbounds { { ptr, i64 } }, ptr %4, i32 0, i32 0
  store { ptr, i64 } %9, ptr %10, align 8
  %11 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 0
  store i64 %6, ptr %11, align 8
  %12 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %3, i32 0, i32 1
  store i8 1, ptr %12, align 1
  call fastcc void @debug.panicExtra__anon_7168(ptr align 8 %0, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 8 %4)
  unreachable
}

; Function Attrs: cold noreturn nounwind sspstrong uwtable
define internal fastcc void @debug.panicExtra__anon_7168(ptr align 8 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 8 %2) unnamed_addr #4 {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %6 = alloca [4111 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %6, i8 -86, i64 4111, i1 false)
  %7 = getelementptr inbounds i8, ptr %6, i64 0
  %8 = getelementptr inbounds [4096 x i8], ptr %7, i64 0, i64 0
  %9 = insertvalue { ptr, i64 } poison, ptr %8, 0
  %10 = insertvalue { ptr, i64 } %9, i64 4096, 1
  %11 = extractvalue { ptr, i64 } %10, 0
  %12 = extractvalue { ptr, i64 } %10, 1
  call fastcc void @fmt.bufPrint__anon_7170(ptr sret({ { ptr, i64 }, i16, [6 x i8] }) %5, ptr nonnull align 1 %11, i64 %12, ptr nonnull readonly align 8 %2)
  %13 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %14 = load i16, ptr %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %21, label %24

16:                                               ; preds = %27, %21
  %17 = phi { ptr, i64 } [ %23, %21 ], [ %31, %27 ]
  store { ptr, i64 } %17, ptr %4, align 8
  %18 = load { ptr, i64 }, ptr %4, align 8
  %19 = extractvalue { ptr, i64 } %18, 0
  %20 = extractvalue { ptr, i64 } %18, 1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 %19, i64 %20, ptr align 8 %0, ptr nonnull readonly align 8 %1)
  unreachable

21:                                               ; preds = %3
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 0
  %23 = load { ptr, i64 }, ptr %22, align 8
  br label %16

24:                                               ; preds = %3
  %25 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %5, i32 0, i32 1
  %26 = load i16, ptr %25, align 2
  switch i16 %26, label %32 [
    i16 6, label %33
  ]

27:                                               ; preds = %39
  %28 = phi ptr [ %6, %39 ]
  %29 = getelementptr inbounds [4111 x i8], ptr %28, i64 0, i64 0
  %30 = insertvalue { ptr, i64 } poison, ptr %29, 0
  %31 = insertvalue { ptr, i64 } %30, i64 4111, 1
  br label %16

32:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6720, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @240)
  unreachable

33:                                               ; preds = %24
  %34 = getelementptr inbounds i8, ptr %6, i64 4096
  %35 = getelementptr inbounds i8, ptr %34, i64 15
  %36 = icmp uge ptr %34, getelementptr inbounds (i8, ptr @debug.panicExtra__anon_6122__anon_6717, i64 15)
  %37 = icmp uge ptr @debug.panicExtra__anon_6122__anon_6717, %35
  %38 = or i1 %36, %37
  br i1 %38, label %40, label %41

39:                                               ; preds = %40
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %34, ptr align 1 @debug.panicExtra__anon_6122__anon_6717, i64 15, i1 false)
  br label %27

40:                                               ; preds = %33
  br label %39

41:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @240)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @fmt.bufPrint__anon_7170(ptr noalias nonnull sret({ { ptr, i64 }, i16, [6 x i8] }) %0, ptr nonnull align 1 %1, i64 %2, ptr nonnull readonly align 8 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %7 = alloca { { ptr, i64 }, i16, [6 x i8] }, align 8
  %8 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %9 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %10 = alloca %"io.fixed_buffer_stream.FixedBufferStream([]u8)", align 8
  %11 = insertvalue { ptr, i64 } poison, ptr %1, 0
  %12 = insertvalue { ptr, i64 } %11, i64 %2, 1
  %13 = extractvalue { ptr, i64 } %12, 0
  %14 = extractvalue { ptr, i64 } %12, 1
  call fastcc void @io.fixed_buffer_stream.fixedBufferStream__anon_7042(ptr sret(%"io.fixed_buffer_stream.FixedBufferStream([]u8)") %9, ptr nonnull align 1 %13, i64 %14)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %9, i64 24, i1 false)
  call fastcc void @"io.fixed_buffer_stream.FixedBufferStream([]u8).writer"(ptr sret(%"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))") %8, ptr nonnull align 8 %10)
  %15 = call fastcc i16 @fmt.format__anon_7173(ptr nonnull readonly align 8 %8, ptr nonnull readonly align 8 %3)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %4
  %18 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %7, i32 0, i32 1
  store i16 %15, ptr %18, align 2
  %19 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %7, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 24, i1 false)
  ret void

20:                                               ; preds = %4
  %21 = call fastcc { ptr, i64 } @"io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten"(ptr nonnull readonly align 8 %10)
  %22 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 1
  store i16 0, ptr %22, align 2
  %23 = getelementptr inbounds { { ptr, i64 }, i16, [6 x i8] }, ptr %6, i32 0, i32 0
  store { ptr, i64 } %21, ptr %23, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_7173(ptr nonnull readonly align 8 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %0, i64 8, i1 false)
  %5 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %4, ptr nonnull readonly align 1 @builtin.panicUnwrapError__anon_7167, i64 25)
  %6 = icmp ne i16 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  ret i16 %5

8:                                                ; preds = %2
  %9 = getelementptr inbounds { { ptr, i64 } }, ptr %1, i32 0, i32 0
  %10 = load { ptr, i64 }, ptr %9, align 8
  %11 = extractvalue { ptr, i64 } %10, 0
  %12 = extractvalue { ptr, i64 } %10, 1
  %13 = call fastcc i16 @fmt.formatType__anon_7185(ptr nonnull readonly align 1 %11, i64 %12, ptr nonnull readonly align 8 @245, ptr nonnull readonly align 8 %0, i64 3)
  %14 = icmp ne i16 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %8
  ret i16 %13

16:                                               ; preds = %8
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatType__anon_7185(ptr nonnull readonly align 1 %0, i64 %1, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 8 %3, i64 %4) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %6 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %6, ptr %StackGuardSlot)
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca %"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write'))", align 8
  %9 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %10 = insertvalue { ptr, i64 } %9, i64 %1, 1
  %11 = icmp eq i64 %4, 0
  br i1 %11, label %17, label %19

12:                                               ; preds = %19
  store { ptr, i64 } %10, ptr %7, align 8
  %13 = load { ptr, i64 }, ptr %7, align 8
  %14 = extractvalue { ptr, i64 } %13, 0
  %15 = extractvalue { ptr, i64 } %13, 1
  %16 = call fastcc i16 @fmt.formatBuf__anon_7154(ptr nonnull readonly align 1 %14, i64 %15, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 8 %3)
  ret i16 %16

17:                                               ; preds = %5
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %3, i64 8, i1 false)
  %18 = call fastcc i16 @"io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll"(ptr nonnull readonly align 8 %8, ptr nonnull readonly align 1 @fmt.formatType__anon_6919__anon_7131, i64 7)
  ret i16 %18

19:                                               ; preds = %5
  br label %12
}

; Function Attrs: nounwind uwtable
declare i32 @__ulock_wait2(i32, ptr readonly align 1, i64, i64, i64) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_6908(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %5 = getelementptr inbounds { { ptr, i64 } }, ptr %1, i32 0, i32 0
  %6 = load { ptr, i64 }, ptr %5, align 8
  %7 = extractvalue { ptr, i64 } %6, 0
  %8 = extractvalue { ptr, i64 } %6, 1
  %9 = call fastcc i16 @fmt.formatType__anon_6919(ptr nonnull readonly align 1 %7, i64 %8, ptr nonnull readonly align 8 @203, ptr nonnull readonly align 4 %0, i64 3)
  %10 = icmp ne i16 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  ret i16 %9

12:                                               ; preds = %2
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %0, i64 4, i1 false)
  %13 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %4, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @debug.panicImpl__anon_6699, i64 3), i64 1)
  %14 = icmp ne i16 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  ret i16 %13

16:                                               ; preds = %12
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatType__anon_6919(ptr nonnull readonly align 1 %0, i64 %1, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 4 %3, i64 %4) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %6 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %6, ptr %StackGuardSlot)
  %7 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %8 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %9 = insertvalue { ptr, i64 } %8, i64 %1, 1
  %10 = icmp eq i64 %4, 0
  br i1 %10, label %15, label %17

11:                                               ; preds = %17
  %12 = extractvalue { ptr, i64 } %9, 0
  %13 = extractvalue { ptr, i64 } %9, 1
  %14 = call fastcc i16 @fmt.formatBuf__anon_6743(ptr nonnull readonly align 1 %12, i64 %13, ptr nonnull readonly align 8 %2, ptr nonnull readonly align 4 %3)
  ret i16 %14

15:                                               ; preds = %5
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %7, ptr align 4 %3, i64 4, i1 false)
  %16 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %7, ptr nonnull readonly align 1 @fmt.formatType__anon_6919__anon_7131, i64 7)
  ret i16 %16

17:                                               ; preds = %5
  br label %11
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_6871(ptr nonnull readonly align 4 %0, ptr nonnull readonly align 8 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %5 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %0, i64 4, i1 false)
  %6 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %5, ptr nonnull readonly align 1 @debug.panicImpl__anon_6697, i64 7)
  %7 = icmp ne i16 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  ret i16 %6

9:                                                ; preds = %2
  %10 = getelementptr inbounds { i64 }, ptr %1, i32 0, i32 0
  %11 = load i64, ptr %10, align 8
  %12 = call fastcc i16 @fmt.formatType__anon_6903(i64 %11, ptr nonnull readonly align 8 @201, ptr nonnull readonly align 4 %0, i64 3)
  %13 = icmp ne i16 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  ret i16 %12

15:                                               ; preds = %9
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %0, i64 4, i1 false)
  %16 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %4, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @debug.panicImpl__anon_6697, i64 9), i64 8)
  %17 = icmp ne i16 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  ret i16 %16

19:                                               ; preds = %15
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatType__anon_6903(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2, i64 %3) unnamed_addr #0 {
  %5 = call fastcc i16 @fmt.formatValue__anon_7124(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %5
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatValue__anon_7124(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatIntValue__anon_7125(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatIntValue__anon_7125(i64 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2) unnamed_addr #0 {
  %4 = call fastcc i16 @fmt.formatInt__anon_7129(i64 %0, i8 10, i1 false, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatInt__anon_7129(i64 %0, i8 %1, i1 %2, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 4 %4) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %6 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %6, ptr %StackGuardSlot)
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca [2 x i8], align 1
  %9 = alloca [2 x i8], align 1
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca [65 x i8], align 1
  %13 = icmp uge i8 %1, 2
  call fastcc void @debug.assert(i1 %13)
  %14 = call fastcc i64 @math.absCast__anon_5830(i64 %0)
  call void @llvm.memset.p0.i64(ptr align 1 %12, i8 -86, i64 65, i1 false)
  store i64 %14, ptr %11, align 8
  store i64 65, ptr %10, align 8
  %15 = icmp eq i8 %1, 10
  br i1 %15, label %20, label %21

16:                                               ; preds = %79, %43
  %17 = load i64, ptr %10, align 8
  %18 = getelementptr inbounds i8, ptr %12, i64 %17
  %19 = icmp ule i64 %17, 65
  br i1 %19, label %121, label %122

20:                                               ; preds = %5
  br label %25

21:                                               ; preds = %5
  br label %80

22:                                               ; preds = %33
  %23 = load i64, ptr %11, align 8
  %24 = icmp ult i64 %23, 10
  br i1 %24, label %44, label %48

25:                                               ; preds = %28, %20
  %26 = load i64, ptr %11, align 8
  %27 = icmp uge i64 %26, 100
  br i1 %27, label %29, label %33

28:                                               ; preds = %35
  br label %25

29:                                               ; preds = %25
  %30 = load i64, ptr %10, align 8
  %31 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %30, i64 2)
  %32 = extractvalue { i64, i1 } %31, 1
  br i1 %32, label %34, label %35

33:                                               ; preds = %25
  br label %22

34:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %29
  %36 = extractvalue { i64, i1 } %31, 0
  store i64 %36, ptr %10, align 8
  %37 = load i64, ptr %10, align 8
  %38 = getelementptr inbounds i8, ptr %12, i64 %37
  %39 = load i64, ptr %11, align 8
  %40 = urem i64 %39, 100
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %9, i64 %40)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %38, ptr align 1 %9, i64 2, i1 false)
  %41 = load i64, ptr %11, align 8
  %42 = udiv i64 %41, 100
  store i64 %42, ptr %11, align 8
  br label %28

43:                                               ; preds = %74, %71
  br label %16

44:                                               ; preds = %22
  %45 = load i64, ptr %10, align 8
  %46 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %45, i64 1)
  %47 = extractvalue { i64, i1 } %46, 1
  br i1 %47, label %52, label %53

48:                                               ; preds = %22
  %49 = load i64, ptr %10, align 8
  %50 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %49, i64 2)
  %51 = extractvalue { i64, i1 } %50, 1
  br i1 %51, label %73, label %74

52:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

53:                                               ; preds = %44
  %54 = extractvalue { i64, i1 } %46, 0
  store i64 %54, ptr %10, align 8
  %55 = load i64, ptr %10, align 8
  %56 = icmp ult i64 %55, 65
  br i1 %56, label %62, label %63

57:                                               ; preds = %62
  %58 = getelementptr inbounds [65 x i8], ptr %12, i64 0, i64 %55
  %59 = load i64, ptr %11, align 8
  %60 = sub i64 255, %59
  %61 = icmp ule i64 %60, 255
  br i1 %61, label %68, label %69

62:                                               ; preds = %53
  br label %57

63:                                               ; preds = %53
  call fastcc void @builtin.panicOutOfBounds(i64 %55, i64 65)
  unreachable

64:                                               ; preds = %68
  %65 = trunc i64 %59 to i8
  %66 = call fastcc { i8, i1 } @llvm.uadd.with.overflow.i8(i8 48, i8 %65)
  %67 = extractvalue { i8, i1 } %66, 1
  br i1 %67, label %70, label %71

68:                                               ; preds = %57
  br label %64

69:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @208)
  unreachable

70:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %64
  %72 = extractvalue { i8, i1 } %66, 0
  store i8 %72, ptr %58, align 1
  br label %43

73:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %48
  %75 = extractvalue { i64, i1 } %50, 0
  store i64 %75, ptr %10, align 8
  %76 = load i64, ptr %10, align 8
  %77 = getelementptr inbounds i8, ptr %12, i64 %76
  %78 = load i64, ptr %11, align 8
  call fastcc void @fmt.digits2(ptr sret([2 x i8]) %8, i64 %78)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %77, ptr align 1 %8, i64 2, i1 false)
  br label %43

79:                                               ; preds = %117
  br label %16

80:                                               ; preds = %116, %21
  %81 = load i64, ptr %11, align 8
  %82 = zext i8 %1 to i64
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %89, label %90

84:                                               ; preds = %89
  %85 = urem i64 %81, %82
  %86 = load i64, ptr %10, align 8
  %87 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %86, i64 1)
  %88 = extractvalue { i64, i1 } %87, 1
  br i1 %88, label %91, label %92

89:                                               ; preds = %80
  br label %84

90:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @208)
  unreachable

91:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

92:                                               ; preds = %84
  %93 = extractvalue { i64, i1 } %87, 0
  store i64 %93, ptr %10, align 8
  %94 = load i64, ptr %10, align 8
  %95 = icmp ult i64 %94, 65
  br i1 %95, label %100, label %101

96:                                               ; preds = %100
  %97 = getelementptr inbounds [65 x i8], ptr %12, i64 0, i64 %94
  %98 = sub i64 255, %85
  %99 = icmp ule i64 %98, 255
  br i1 %99, label %108, label %109

100:                                              ; preds = %92
  br label %96

101:                                              ; preds = %92
  call fastcc void @builtin.panicOutOfBounds(i64 %94, i64 65)
  unreachable

102:                                              ; preds = %108
  %103 = trunc i64 %85 to i8
  %104 = call fastcc i8 @fmt.digitToChar(i8 %103, i1 %2)
  store i8 %104, ptr %97, align 1
  %105 = load i64, ptr %11, align 8
  %106 = zext i8 %1 to i64
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %114, label %115

108:                                              ; preds = %96
  br label %102

109:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @208)
  unreachable

110:                                              ; preds = %114
  %111 = udiv i64 %105, %106
  store i64 %111, ptr %11, align 8
  %112 = load i64, ptr %11, align 8
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %117, label %118

114:                                              ; preds = %102
  br label %110

115:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @208)
  unreachable

116:                                              ; preds = %118
  br label %80

117:                                              ; preds = %110
  br label %79

118:                                              ; preds = %110
  br label %116

119:                                              ; preds = %121
  %120 = sub nuw i64 65, %17
  br i1 true, label %125, label %126

121:                                              ; preds = %16
  br label %119

122:                                              ; preds = %16
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 %17, i64 65)
  unreachable

123:                                              ; preds = %125
  %124 = icmp ule i64 %17, 65
  br i1 %124, label %134, label %135

125:                                              ; preds = %119
  br label %123

126:                                              ; preds = %119
  call fastcc void @builtin.panicOutOfBounds(i64 65, i64 65)
  unreachable

127:                                              ; preds = %134
  %128 = insertvalue { ptr, i64 } poison, ptr %18, 0
  %129 = insertvalue { ptr, i64 } %128, i64 %120, 1
  store { ptr, i64 } %129, ptr %7, align 8
  %130 = load { ptr, i64 }, ptr %7, align 8
  %131 = extractvalue { ptr, i64 } %130, 0
  %132 = extractvalue { ptr, i64 } %130, 1
  %133 = call fastcc i16 @fmt.formatBuf__anon_6743(ptr nonnull readonly align 1 %131, i64 %132, ptr nonnull readonly align 8 %3, ptr nonnull readonly align 4 %4)
  ret i16 %133

134:                                              ; preds = %123
  br label %127

135:                                              ; preds = %123
  call fastcc void @builtin.panicOutOfBounds(i64 %17, i64 65)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @math.absCast__anon_5830(i64 %0) unnamed_addr #0 {
  ret i64 %0
}

; Function Attrs: noreturn nounwind uwtable
declare void @abort() #9

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @debug.updateSegfaultHandler(ptr readonly align 8 %0) unnamed_addr #0 {
  %2 = call fastcc i16 @os.sigaction(i6 11, ptr noalias readonly align 8 %0, ptr noalias align 8 null)
  %3 = icmp ne i16 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  ret i16 %2

5:                                                ; preds = %1
  %6 = call fastcc i16 @os.sigaction(i6 4, ptr noalias readonly align 8 %0, ptr noalias align 8 null)
  %7 = icmp ne i16 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  ret i16 %6

9:                                                ; preds = %5
  %10 = call fastcc i16 @os.sigaction(i6 10, ptr noalias readonly align 8 %0, ptr noalias align 8 null)
  %11 = icmp ne i16 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  ret i16 %10

13:                                               ; preds = %9
  %14 = call fastcc i16 @os.sigaction(i6 8, ptr noalias readonly align 8 %0, ptr noalias align 8 null)
  %15 = icmp ne i16 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  ret i16 %14

17:                                               ; preds = %13
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @os.sigaction(i6 %0, ptr noalias readonly align 8 %1, ptr noalias align 8 %2) unnamed_addr #0 {
  %4 = zext i6 %0 to i32
  %5 = call i32 @sigaction(i32 %4, ptr noalias readonly align 8 %1, ptr noalias align 8 %2)
  %6 = call fastcc i16 @c.getErrno__anon_7156(i32 %5)
  switch i16 %6, label %7 [
    i16 0, label %8
    i16 22, label %9
    i16 78, label %9
  ]

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @224)
  unreachable

8:                                                ; preds = %3
  ret i16 0

9:                                                ; preds = %3, %3
  ret i16 24
}

; Function Attrs: nounwind uwtable
declare i32 @sigaction(i32, ptr noalias readonly align 8, ptr noalias align 8) #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @c.getErrno__anon_7156(i32 %0) unnamed_addr #0 {
  %2 = icmp eq i32 %0, -1
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = call ptr @__error()
  %5 = load i32, ptr %4, align 4
  %6 = trunc i32 %5 to i16
  ret i16 %6

7:                                                ; preds = %1
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @Thread.PosixThreadImpl.getCurrentId() unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %1 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %1, ptr %StackGuardSlot)
  %2 = alloca i64, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %2, i8 -86, i64 8, i1 false)
  %3 = call i32 @pthread_threadid_np(ptr align 1 null, ptr nonnull align 8 %2)
  %4 = icmp eq i32 %3, 0
  call fastcc void @debug.assert(i1 %4)
  %5 = load i64, ptr %2, align 8
  ret i64 %5
}

; Function Attrs: nounwind uwtable
declare i32 @pthread_threadid_np(ptr align 1, ptr nonnull align 8) #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.format__anon_6600(ptr nonnull readonly align 4 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  %4 = alloca %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %0, i64 4, i1 false)
  %5 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %4, ptr nonnull readonly align 1 @main.boolToStrZig__anon_3416, i64 30)
  %6 = icmp ne i16 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  ret i16 %5

8:                                                ; preds = %1
  %9 = call fastcc i16 @fmt.formatType__anon_6651(ptr nonnull readonly align 1 @main.boolToStrZig__anon_3417, ptr nonnull readonly align 8 @173, ptr nonnull readonly align 4 %0, i64 3)
  %10 = icmp ne i16 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  ret i16 %9

12:                                               ; preds = %8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %0, i64 4, i1 false)
  %13 = call fastcc i16 @"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write')).writeAll"(ptr nonnull readonly align 4 %3, ptr nonnull readonly align 1 getelementptr inbounds (i8, ptr @main.boolToStrZig__anon_3416, i64 33), i64 1)
  %14 = icmp ne i16 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  ret i16 %13

16:                                               ; preds = %12
  ret i16 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i16 @fmt.formatType__anon_6651(ptr nonnull readonly align 1 %0, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2, i64 %3) unnamed_addr #0 {
  %5 = getelementptr inbounds [5 x i8], ptr %0, i64 0, i64 0
  %6 = insertvalue { ptr, i64 } poison, ptr %5, 0
  %7 = insertvalue { ptr, i64 } %6, i64 4, 1
  %8 = extractvalue { ptr, i64 } %7, 0
  %9 = extractvalue { ptr, i64 } %7, 1
  %10 = call fastcc i16 @fmt.formatBuf__anon_6743(ptr nonnull readonly align 1 %8, i64 %9, ptr nonnull readonly align 8 %1, ptr nonnull readonly align 4 %2)
  ret i16 %10
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @io.getStdErrHandle() unnamed_addr #0 {
  ret i32 2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @Thread.Mutex.DarwinImpl.lock(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %"io.writer.Writer(fs.file.File,error{DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,DeviceBusy,InvalidArgument,AccessDenied,BrokenPipe,SystemResources,OperationAborted,NotOpenForWriting,LockViolation,WouldBlock,ConnectionResetByPeer,Unexpected},(function 'write'))", ptr %3, i32 0, i32 0
  call void @os_unfair_lock_lock(ptr nonnull align 4 %4)
  ret void
}

; Function Attrs: nounwind uwtable
declare void @os_unfair_lock_lock(ptr nonnull align 4) #3

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__clzsi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, ptr %4, align 4
  store i32 %0, ptr %4, align 4
  store i32 32, ptr %3, align 4
  store i32 0, ptr %2, align 4
  %5 = load i32, ptr %4, align 4
  %6 = lshr i32 %5, 16
  store i32 %6, ptr %2, align 4
  %7 = load i32, ptr %2, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %14, label %18

9:                                                ; preds = %20, %18
  %10 = load i32, ptr %4, align 4
  %11 = lshr i32 %10, 8
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %28, label %32

14:                                               ; preds = %1
  %15 = load i32, ptr %3, align 4
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 16)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %19, label %20

18:                                               ; preds = %1
  br label %9

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i32, i1 } %16, 0
  store i32 %21, ptr %3, align 4
  %22 = load i32, ptr %2, align 4
  store i32 %22, ptr %4, align 4
  br label %9

23:                                               ; preds = %34, %32
  %24 = load i32, ptr %4, align 4
  %25 = lshr i32 %24, 4
  store i32 %25, ptr %2, align 4
  %26 = load i32, ptr %2, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %42, label %46

28:                                               ; preds = %9
  %29 = load i32, ptr %3, align 4
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %29, i32 8)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %33, label %34

32:                                               ; preds = %9
  br label %23

33:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

34:                                               ; preds = %28
  %35 = extractvalue { i32, i1 } %30, 0
  store i32 %35, ptr %3, align 4
  %36 = load i32, ptr %2, align 4
  store i32 %36, ptr %4, align 4
  br label %23

37:                                               ; preds = %48, %46
  %38 = load i32, ptr %4, align 4
  %39 = lshr i32 %38, 2
  store i32 %39, ptr %2, align 4
  %40 = load i32, ptr %2, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %56, label %60

42:                                               ; preds = %23
  %43 = load i32, ptr %3, align 4
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %43, i32 4)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %23
  br label %37

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i32, i1 } %44, 0
  store i32 %49, ptr %3, align 4
  %50 = load i32, ptr %2, align 4
  store i32 %50, ptr %4, align 4
  br label %37

51:                                               ; preds = %62, %60
  %52 = load i32, ptr %4, align 4
  %53 = lshr i32 %52, 1
  store i32 %53, ptr %2, align 4
  %54 = load i32, ptr %2, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %69, label %73

56:                                               ; preds = %37
  %57 = load i32, ptr %3, align 4
  %58 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %57, i32 2)
  %59 = extractvalue { i32, i1 } %58, 1
  br i1 %59, label %61, label %62

60:                                               ; preds = %37
  br label %51

61:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %56
  %63 = extractvalue { i32, i1 } %58, 0
  store i32 %63, ptr %3, align 4
  %64 = load i32, ptr %2, align 4
  store i32 %64, ptr %4, align 4
  br label %51

65:                                               ; preds = %75, %73
  %66 = load i32, ptr %4, align 4
  store i32 %66, ptr %2, align 4
  %67 = load i32, ptr %2, align 4
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %83, label %86

69:                                               ; preds = %51
  %70 = load i32, ptr %3, align 4
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %70, i32 1)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %74, label %75

73:                                               ; preds = %51
  br label %65

74:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %69
  %76 = extractvalue { i32, i1 } %71, 0
  store i32 %76, ptr %3, align 4
  %77 = load i32, ptr %2, align 4
  store i32 %77, ptr %4, align 4
  br label %65

78:                                               ; preds = %86, %83
  %79 = load i32, ptr %3, align 4
  %80 = load i32, ptr %4, align 4
  %81 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %79, i32 %80)
  %82 = extractvalue { i32, i1 } %81, 1
  br i1 %82, label %87, label %88

83:                                               ; preds = %65
  %84 = load i32, ptr %3, align 4
  store i32 %84, ptr %3, align 4
  %85 = load i32, ptr %2, align 4
  store i32 %85, ptr %4, align 4
  br label %78

86:                                               ; preds = %65
  br label %78

87:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %78
  %89 = extractvalue { i32, i1 } %81, 0
  ret i32 %89
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__clzdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, ptr %4, align 8
  store i64 %0, ptr %4, align 8
  store i64 64, ptr %3, align 8
  store i64 0, ptr %2, align 8
  %5 = load i64, ptr %4, align 8
  %6 = lshr i64 %5, 32
  store i64 %6, ptr %2, align 8
  %7 = load i64, ptr %2, align 8
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %14, label %18

9:                                                ; preds = %20, %18
  %10 = load i64, ptr %4, align 8
  %11 = lshr i64 %10, 16
  store i64 %11, ptr %2, align 8
  %12 = load i64, ptr %2, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %28, label %32

14:                                               ; preds = %1
  %15 = load i64, ptr %3, align 8
  %16 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %15, i64 32)
  %17 = extractvalue { i64, i1 } %16, 1
  br i1 %17, label %19, label %20

18:                                               ; preds = %1
  br label %9

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i64, i1 } %16, 0
  store i64 %21, ptr %3, align 8
  %22 = load i64, ptr %2, align 8
  store i64 %22, ptr %4, align 8
  br label %9

23:                                               ; preds = %34, %32
  %24 = load i64, ptr %4, align 8
  %25 = lshr i64 %24, 8
  store i64 %25, ptr %2, align 8
  %26 = load i64, ptr %2, align 8
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %42, label %46

28:                                               ; preds = %9
  %29 = load i64, ptr %3, align 8
  %30 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %29, i64 16)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %33, label %34

32:                                               ; preds = %9
  br label %23

33:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

34:                                               ; preds = %28
  %35 = extractvalue { i64, i1 } %30, 0
  store i64 %35, ptr %3, align 8
  %36 = load i64, ptr %2, align 8
  store i64 %36, ptr %4, align 8
  br label %23

37:                                               ; preds = %48, %46
  %38 = load i64, ptr %4, align 8
  %39 = lshr i64 %38, 4
  store i64 %39, ptr %2, align 8
  %40 = load i64, ptr %2, align 8
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %56, label %60

42:                                               ; preds = %23
  %43 = load i64, ptr %3, align 8
  %44 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %43, i64 8)
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %23
  br label %37

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i64, i1 } %44, 0
  store i64 %49, ptr %3, align 8
  %50 = load i64, ptr %2, align 8
  store i64 %50, ptr %4, align 8
  br label %37

51:                                               ; preds = %62, %60
  %52 = load i64, ptr %4, align 8
  %53 = lshr i64 %52, 2
  store i64 %53, ptr %2, align 8
  %54 = load i64, ptr %2, align 8
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %70, label %74

56:                                               ; preds = %37
  %57 = load i64, ptr %3, align 8
  %58 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  br i1 %59, label %61, label %62

60:                                               ; preds = %37
  br label %51

61:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %56
  %63 = extractvalue { i64, i1 } %58, 0
  store i64 %63, ptr %3, align 8
  %64 = load i64, ptr %2, align 8
  store i64 %64, ptr %4, align 8
  br label %51

65:                                               ; preds = %76, %74
  %66 = load i64, ptr %4, align 8
  %67 = lshr i64 %66, 1
  store i64 %67, ptr %2, align 8
  %68 = load i64, ptr %2, align 8
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %83, label %87

70:                                               ; preds = %51
  %71 = load i64, ptr %3, align 8
  %72 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %71, i64 2)
  %73 = extractvalue { i64, i1 } %72, 1
  br i1 %73, label %75, label %76

74:                                               ; preds = %51
  br label %65

75:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %70
  %77 = extractvalue { i64, i1 } %72, 0
  store i64 %77, ptr %3, align 8
  %78 = load i64, ptr %2, align 8
  store i64 %78, ptr %4, align 8
  br label %65

79:                                               ; preds = %89, %87
  %80 = load i64, ptr %4, align 8
  store i64 %80, ptr %2, align 8
  %81 = load i64, ptr %2, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %97, label %100

83:                                               ; preds = %65
  %84 = load i64, ptr %3, align 8
  %85 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %84, i64 1)
  %86 = extractvalue { i64, i1 } %85, 1
  br i1 %86, label %88, label %89

87:                                               ; preds = %65
  br label %79

88:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

89:                                               ; preds = %83
  %90 = extractvalue { i64, i1 } %85, 0
  store i64 %90, ptr %3, align 8
  %91 = load i64, ptr %2, align 8
  store i64 %91, ptr %4, align 8
  br label %79

92:                                               ; preds = %100, %97
  %93 = load i64, ptr %3, align 8
  %94 = load i64, ptr %4, align 8
  %95 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %93, i64 %94)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %101, label %102

97:                                               ; preds = %79
  %98 = load i64, ptr %3, align 8
  store i64 %98, ptr %3, align 8
  %99 = load i64, ptr %2, align 8
  store i64 %99, ptr %4, align 8
  br label %92

100:                                              ; preds = %79
  br label %92

101:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %92
  %103 = extractvalue { i64, i1 } %95, 0
  %104 = sub i64 2147483647, %103
  %105 = icmp ule i64 %104, 4294967295
  br i1 %105, label %108, label %109

106:                                              ; preds = %108
  %107 = trunc i64 %103 to i32
  ret i32 %107

108:                                              ; preds = %102
  br label %106

109:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @1)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__clzti2(i128 %0) #0 {
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  store i128 %0, ptr %4, align 16
  store i128 %0, ptr %4, align 16
  store i128 128, ptr %3, align 16
  store i128 0, ptr %2, align 16
  %5 = load i128, ptr %4, align 16
  %6 = lshr i128 %5, 64
  store i128 %6, ptr %2, align 16
  %7 = load i128, ptr %2, align 16
  %8 = icmp ne i128 %7, 0
  br i1 %8, label %14, label %18

9:                                                ; preds = %20, %18
  %10 = load i128, ptr %4, align 16
  %11 = lshr i128 %10, 32
  store i128 %11, ptr %2, align 16
  %12 = load i128, ptr %2, align 16
  %13 = icmp ne i128 %12, 0
  br i1 %13, label %28, label %32

14:                                               ; preds = %1
  %15 = load i128, ptr %3, align 16
  %16 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %15, i128 64)
  %17 = extractvalue { i128, i1 } %16, 1
  br i1 %17, label %19, label %20

18:                                               ; preds = %1
  br label %9

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i128, i1 } %16, 0
  store i128 %21, ptr %3, align 16
  %22 = load i128, ptr %2, align 16
  store i128 %22, ptr %4, align 16
  br label %9

23:                                               ; preds = %34, %32
  %24 = load i128, ptr %4, align 16
  %25 = lshr i128 %24, 16
  store i128 %25, ptr %2, align 16
  %26 = load i128, ptr %2, align 16
  %27 = icmp ne i128 %26, 0
  br i1 %27, label %42, label %46

28:                                               ; preds = %9
  %29 = load i128, ptr %3, align 16
  %30 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %29, i128 32)
  %31 = extractvalue { i128, i1 } %30, 1
  br i1 %31, label %33, label %34

32:                                               ; preds = %9
  br label %23

33:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

34:                                               ; preds = %28
  %35 = extractvalue { i128, i1 } %30, 0
  store i128 %35, ptr %3, align 16
  %36 = load i128, ptr %2, align 16
  store i128 %36, ptr %4, align 16
  br label %23

37:                                               ; preds = %48, %46
  %38 = load i128, ptr %4, align 16
  %39 = lshr i128 %38, 8
  store i128 %39, ptr %2, align 16
  %40 = load i128, ptr %2, align 16
  %41 = icmp ne i128 %40, 0
  br i1 %41, label %56, label %60

42:                                               ; preds = %23
  %43 = load i128, ptr %3, align 16
  %44 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %43, i128 16)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %23
  br label %37

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i128, i1 } %44, 0
  store i128 %49, ptr %3, align 16
  %50 = load i128, ptr %2, align 16
  store i128 %50, ptr %4, align 16
  br label %37

51:                                               ; preds = %62, %60
  %52 = load i128, ptr %4, align 16
  %53 = lshr i128 %52, 4
  store i128 %53, ptr %2, align 16
  %54 = load i128, ptr %2, align 16
  %55 = icmp ne i128 %54, 0
  br i1 %55, label %70, label %74

56:                                               ; preds = %37
  %57 = load i128, ptr %3, align 16
  %58 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %57, i128 8)
  %59 = extractvalue { i128, i1 } %58, 1
  br i1 %59, label %61, label %62

60:                                               ; preds = %37
  br label %51

61:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %56
  %63 = extractvalue { i128, i1 } %58, 0
  store i128 %63, ptr %3, align 16
  %64 = load i128, ptr %2, align 16
  store i128 %64, ptr %4, align 16
  br label %51

65:                                               ; preds = %76, %74
  %66 = load i128, ptr %4, align 16
  %67 = lshr i128 %66, 2
  store i128 %67, ptr %2, align 16
  %68 = load i128, ptr %2, align 16
  %69 = icmp ne i128 %68, 0
  br i1 %69, label %84, label %88

70:                                               ; preds = %51
  %71 = load i128, ptr %3, align 16
  %72 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %71, i128 4)
  %73 = extractvalue { i128, i1 } %72, 1
  br i1 %73, label %75, label %76

74:                                               ; preds = %51
  br label %65

75:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %70
  %77 = extractvalue { i128, i1 } %72, 0
  store i128 %77, ptr %3, align 16
  %78 = load i128, ptr %2, align 16
  store i128 %78, ptr %4, align 16
  br label %65

79:                                               ; preds = %90, %88
  %80 = load i128, ptr %4, align 16
  %81 = lshr i128 %80, 1
  store i128 %81, ptr %2, align 16
  %82 = load i128, ptr %2, align 16
  %83 = icmp ne i128 %82, 0
  br i1 %83, label %97, label %101

84:                                               ; preds = %65
  %85 = load i128, ptr %3, align 16
  %86 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %85, i128 2)
  %87 = extractvalue { i128, i1 } %86, 1
  br i1 %87, label %89, label %90

88:                                               ; preds = %65
  br label %79

89:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %84
  %91 = extractvalue { i128, i1 } %86, 0
  store i128 %91, ptr %3, align 16
  %92 = load i128, ptr %2, align 16
  store i128 %92, ptr %4, align 16
  br label %79

93:                                               ; preds = %103, %101
  %94 = load i128, ptr %4, align 16
  store i128 %94, ptr %2, align 16
  %95 = load i128, ptr %2, align 16
  %96 = icmp ne i128 %95, 0
  br i1 %96, label %111, label %114

97:                                               ; preds = %79
  %98 = load i128, ptr %3, align 16
  %99 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %98, i128 1)
  %100 = extractvalue { i128, i1 } %99, 1
  br i1 %100, label %102, label %103

101:                                              ; preds = %79
  br label %93

102:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %97
  %104 = extractvalue { i128, i1 } %99, 0
  store i128 %104, ptr %3, align 16
  %105 = load i128, ptr %2, align 16
  store i128 %105, ptr %4, align 16
  br label %93

106:                                              ; preds = %114, %111
  %107 = load i128, ptr %3, align 16
  %108 = load i128, ptr %4, align 16
  %109 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %107, i128 %108)
  %110 = extractvalue { i128, i1 } %109, 1
  br i1 %110, label %115, label %116

111:                                              ; preds = %93
  %112 = load i128, ptr %3, align 16
  store i128 %112, ptr %3, align 16
  %113 = load i128, ptr %2, align 16
  store i128 %113, ptr %4, align 16
  br label %106

114:                                              ; preds = %93
  br label %106

115:                                              ; preds = %106
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %106
  %117 = extractvalue { i128, i1 } %109, 0
  %118 = sub i128 2147483647, %117
  %119 = icmp ule i128 %118, 4294967295
  br i1 %119, label %122, label %123

120:                                              ; preds = %122
  %121 = trunc i128 %117 to i32
  ret i32 %121

122:                                              ; preds = %116
  br label %120

123:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @2)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.ssub.with.overflow.i128(i128, i128) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ctzsi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, ptr %4, align 4
  store i32 %0, ptr %4, align 4
  store i32 1, ptr %3, align 4
  store i32 -1, ptr %2, align 4
  %5 = load i32, ptr %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %103, %16
  %8 = phi i32 [ 32, %16 ], [ %104, %103 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i32, ptr %2, align 4
  %11 = lshr i32 %10, 16
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = and i32 %12, %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %31, %29
  %19 = load i32, ptr %2, align 4
  %20 = lshr i32 %19, 8
  store i32 %20, ptr %2, align 4
  %21 = load i32, ptr %4, align 4
  %22 = load i32, ptr %2, align 4
  %23 = and i32 %21, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i32, ptr %3, align 4
  %27 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %26, i32 16)
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i32, i1 } %27, 0
  store i32 %32, ptr %3, align 4
  %33 = load i32, ptr %4, align 4
  %34 = lshr i32 %33, 16
  store i32 %34, ptr %4, align 4
  br label %18

35:                                               ; preds = %48, %46
  %36 = load i32, ptr %2, align 4
  %37 = lshr i32 %36, 4
  store i32 %37, ptr %2, align 4
  %38 = load i32, ptr %4, align 4
  %39 = load i32, ptr %2, align 4
  %40 = and i32 %38, %39
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i32, ptr %3, align 4
  %44 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %43, i32 8)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i32, i1 } %44, 0
  store i32 %49, ptr %3, align 4
  %50 = load i32, ptr %4, align 4
  %51 = lshr i32 %50, 8
  store i32 %51, ptr %4, align 4
  br label %35

52:                                               ; preds = %65, %63
  %53 = load i32, ptr %2, align 4
  %54 = lshr i32 %53, 2
  store i32 %54, ptr %2, align 4
  %55 = load i32, ptr %4, align 4
  %56 = load i32, ptr %2, align 4
  %57 = and i32 %55, %56
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i32, ptr %3, align 4
  %61 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %60, i32 4)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i32, i1 } %61, 0
  store i32 %66, ptr %3, align 4
  %67 = load i32, ptr %4, align 4
  %68 = lshr i32 %67, 4
  store i32 %68, ptr %4, align 4
  br label %52

69:                                               ; preds = %82, %80
  %70 = load i32, ptr %2, align 4
  %71 = lshr i32 %70, 1
  store i32 %71, ptr %2, align 4
  %72 = load i32, ptr %4, align 4
  %73 = load i32, ptr %2, align 4
  %74 = and i32 %72, %73
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %92, label %96

76:                                               ; preds = %52
  %77 = load i32, ptr %3, align 4
  %78 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %77, i32 2)
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i32, i1 } %78, 0
  store i32 %83, ptr %3, align 4
  %84 = load i32, ptr %4, align 4
  %85 = lshr i32 %84, 2
  store i32 %85, ptr %4, align 4
  br label %69

86:                                               ; preds = %98, %96
  %87 = load i32, ptr %3, align 4
  %88 = load i32, ptr %4, align 4
  %89 = and i32 %88, 1
  %90 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %87, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %102, label %103

92:                                               ; preds = %69
  %93 = load i32, ptr %3, align 4
  %94 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %93, i32 1)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %97, label %98

96:                                               ; preds = %69
  br label %86

97:                                               ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %92
  %99 = extractvalue { i32, i1 } %94, 0
  store i32 %99, ptr %3, align 4
  %100 = load i32, ptr %4, align 4
  %101 = lshr i32 %100, 1
  store i32 %101, ptr %4, align 4
  br label %86

102:                                              ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %86
  %104 = extractvalue { i32, i1 } %90, 0
  br label %7
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ctzdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, ptr %4, align 8
  store i64 %0, ptr %4, align 8
  store i64 1, ptr %3, align 8
  store i64 -1, ptr %2, align 8
  %5 = load i64, ptr %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %124, %16
  %8 = phi i32 [ 64, %16 ], [ %125, %124 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i64, ptr %2, align 8
  %11 = lshr i64 %10, 32
  store i64 %11, ptr %2, align 8
  %12 = load i64, ptr %4, align 8
  %13 = load i64, ptr %2, align 8
  %14 = and i64 %12, %13
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %31, %29
  %19 = load i64, ptr %2, align 8
  %20 = lshr i64 %19, 16
  store i64 %20, ptr %2, align 8
  %21 = load i64, ptr %4, align 8
  %22 = load i64, ptr %2, align 8
  %23 = and i64 %21, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i64, ptr %3, align 8
  %27 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %26, i64 32)
  %28 = extractvalue { i64, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i64, i1 } %27, 0
  store i64 %32, ptr %3, align 8
  %33 = load i64, ptr %4, align 8
  %34 = lshr i64 %33, 32
  store i64 %34, ptr %4, align 8
  br label %18

35:                                               ; preds = %48, %46
  %36 = load i64, ptr %2, align 8
  %37 = lshr i64 %36, 8
  store i64 %37, ptr %2, align 8
  %38 = load i64, ptr %4, align 8
  %39 = load i64, ptr %2, align 8
  %40 = and i64 %38, %39
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i64, ptr %3, align 8
  %44 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %43, i64 16)
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i64, i1 } %44, 0
  store i64 %49, ptr %3, align 8
  %50 = load i64, ptr %4, align 8
  %51 = lshr i64 %50, 16
  store i64 %51, ptr %4, align 8
  br label %35

52:                                               ; preds = %65, %63
  %53 = load i64, ptr %2, align 8
  %54 = lshr i64 %53, 4
  store i64 %54, ptr %2, align 8
  %55 = load i64, ptr %4, align 8
  %56 = load i64, ptr %2, align 8
  %57 = and i64 %55, %56
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i64, ptr %3, align 8
  %61 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %60, i64 8)
  %62 = extractvalue { i64, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i64, i1 } %61, 0
  store i64 %66, ptr %3, align 8
  %67 = load i64, ptr %4, align 8
  %68 = lshr i64 %67, 8
  store i64 %68, ptr %4, align 8
  br label %52

69:                                               ; preds = %82, %80
  %70 = load i64, ptr %2, align 8
  %71 = lshr i64 %70, 2
  store i64 %71, ptr %2, align 8
  %72 = load i64, ptr %4, align 8
  %73 = load i64, ptr %2, align 8
  %74 = and i64 %72, %73
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %93, label %97

76:                                               ; preds = %52
  %77 = load i64, ptr %3, align 8
  %78 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %77, i64 4)
  %79 = extractvalue { i64, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i64, i1 } %78, 0
  store i64 %83, ptr %3, align 8
  %84 = load i64, ptr %4, align 8
  %85 = lshr i64 %84, 4
  store i64 %85, ptr %4, align 8
  br label %69

86:                                               ; preds = %99, %97
  %87 = load i64, ptr %2, align 8
  %88 = lshr i64 %87, 1
  store i64 %88, ptr %2, align 8
  %89 = load i64, ptr %4, align 8
  %90 = load i64, ptr %2, align 8
  %91 = and i64 %89, %90
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %109, label %113

93:                                               ; preds = %69
  %94 = load i64, ptr %3, align 8
  %95 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %94, i64 2)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %69
  br label %86

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i64, i1 } %95, 0
  store i64 %100, ptr %3, align 8
  %101 = load i64, ptr %4, align 8
  %102 = lshr i64 %101, 2
  store i64 %102, ptr %4, align 8
  br label %86

103:                                              ; preds = %115, %113
  %104 = load i64, ptr %3, align 8
  %105 = load i64, ptr %4, align 8
  %106 = and i64 %105, 1
  %107 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %104, i64 %106)
  %108 = extractvalue { i64, i1 } %107, 1
  br i1 %108, label %119, label %120

109:                                              ; preds = %86
  %110 = load i64, ptr %3, align 8
  %111 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %110, i64 1)
  %112 = extractvalue { i64, i1 } %111, 1
  br i1 %112, label %114, label %115

113:                                              ; preds = %86
  br label %103

114:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

115:                                              ; preds = %109
  %116 = extractvalue { i64, i1 } %111, 0
  store i64 %116, ptr %3, align 8
  %117 = load i64, ptr %4, align 8
  %118 = lshr i64 %117, 1
  store i64 %118, ptr %4, align 8
  br label %103

119:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

120:                                              ; preds = %103
  %121 = extractvalue { i64, i1 } %107, 0
  %122 = sub i64 2147483647, %121
  %123 = icmp ule i64 %122, 4294967295
  br i1 %123, label %126, label %127

124:                                              ; preds = %126
  %125 = trunc i64 %121 to i32
  br label %7

126:                                              ; preds = %120
  br label %124

127:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @3)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ctzti2(i128 %0) #0 {
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  store i128 %0, ptr %4, align 16
  store i128 %0, ptr %4, align 16
  store i128 1, ptr %3, align 16
  store i128 -1, ptr %2, align 16
  %5 = load i128, ptr %4, align 16
  %6 = icmp eq i128 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %141, %16
  %8 = phi i32 [ 128, %16 ], [ %142, %141 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i128, ptr %2, align 16
  %11 = lshr i128 %10, 64
  store i128 %11, ptr %2, align 16
  %12 = load i128, ptr %4, align 16
  %13 = load i128, ptr %2, align 16
  %14 = and i128 %12, %13
  %15 = icmp eq i128 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %31, %29
  %19 = load i128, ptr %2, align 16
  %20 = lshr i128 %19, 32
  store i128 %20, ptr %2, align 16
  %21 = load i128, ptr %4, align 16
  %22 = load i128, ptr %2, align 16
  %23 = and i128 %21, %22
  %24 = icmp eq i128 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i128, ptr %3, align 16
  %27 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %26, i128 64)
  %28 = extractvalue { i128, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i128, i1 } %27, 0
  store i128 %32, ptr %3, align 16
  %33 = load i128, ptr %4, align 16
  %34 = lshr i128 %33, 64
  store i128 %34, ptr %4, align 16
  br label %18

35:                                               ; preds = %48, %46
  %36 = load i128, ptr %2, align 16
  %37 = lshr i128 %36, 16
  store i128 %37, ptr %2, align 16
  %38 = load i128, ptr %4, align 16
  %39 = load i128, ptr %2, align 16
  %40 = and i128 %38, %39
  %41 = icmp eq i128 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i128, ptr %3, align 16
  %44 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %43, i128 32)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i128, i1 } %44, 0
  store i128 %49, ptr %3, align 16
  %50 = load i128, ptr %4, align 16
  %51 = lshr i128 %50, 32
  store i128 %51, ptr %4, align 16
  br label %35

52:                                               ; preds = %65, %63
  %53 = load i128, ptr %2, align 16
  %54 = lshr i128 %53, 8
  store i128 %54, ptr %2, align 16
  %55 = load i128, ptr %4, align 16
  %56 = load i128, ptr %2, align 16
  %57 = and i128 %55, %56
  %58 = icmp eq i128 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i128, ptr %3, align 16
  %61 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %60, i128 16)
  %62 = extractvalue { i128, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i128, i1 } %61, 0
  store i128 %66, ptr %3, align 16
  %67 = load i128, ptr %4, align 16
  %68 = lshr i128 %67, 16
  store i128 %68, ptr %4, align 16
  br label %52

69:                                               ; preds = %82, %80
  %70 = load i128, ptr %2, align 16
  %71 = lshr i128 %70, 4
  store i128 %71, ptr %2, align 16
  %72 = load i128, ptr %4, align 16
  %73 = load i128, ptr %2, align 16
  %74 = and i128 %72, %73
  %75 = icmp eq i128 %74, 0
  br i1 %75, label %93, label %97

76:                                               ; preds = %52
  %77 = load i128, ptr %3, align 16
  %78 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %77, i128 8)
  %79 = extractvalue { i128, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i128, i1 } %78, 0
  store i128 %83, ptr %3, align 16
  %84 = load i128, ptr %4, align 16
  %85 = lshr i128 %84, 8
  store i128 %85, ptr %4, align 16
  br label %69

86:                                               ; preds = %99, %97
  %87 = load i128, ptr %2, align 16
  %88 = lshr i128 %87, 2
  store i128 %88, ptr %2, align 16
  %89 = load i128, ptr %4, align 16
  %90 = load i128, ptr %2, align 16
  %91 = and i128 %89, %90
  %92 = icmp eq i128 %91, 0
  br i1 %92, label %110, label %114

93:                                               ; preds = %69
  %94 = load i128, ptr %3, align 16
  %95 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %94, i128 4)
  %96 = extractvalue { i128, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %69
  br label %86

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i128, i1 } %95, 0
  store i128 %100, ptr %3, align 16
  %101 = load i128, ptr %4, align 16
  %102 = lshr i128 %101, 4
  store i128 %102, ptr %4, align 16
  br label %86

103:                                              ; preds = %116, %114
  %104 = load i128, ptr %2, align 16
  %105 = lshr i128 %104, 1
  store i128 %105, ptr %2, align 16
  %106 = load i128, ptr %4, align 16
  %107 = load i128, ptr %2, align 16
  %108 = and i128 %106, %107
  %109 = icmp eq i128 %108, 0
  br i1 %109, label %126, label %130

110:                                              ; preds = %86
  %111 = load i128, ptr %3, align 16
  %112 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %111, i128 2)
  %113 = extractvalue { i128, i1 } %112, 1
  br i1 %113, label %115, label %116

114:                                              ; preds = %86
  br label %103

115:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %110
  %117 = extractvalue { i128, i1 } %112, 0
  store i128 %117, ptr %3, align 16
  %118 = load i128, ptr %4, align 16
  %119 = lshr i128 %118, 2
  store i128 %119, ptr %4, align 16
  br label %103

120:                                              ; preds = %132, %130
  %121 = load i128, ptr %3, align 16
  %122 = load i128, ptr %4, align 16
  %123 = and i128 %122, 1
  %124 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %121, i128 %123)
  %125 = extractvalue { i128, i1 } %124, 1
  br i1 %125, label %136, label %137

126:                                              ; preds = %103
  %127 = load i128, ptr %3, align 16
  %128 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %127, i128 1)
  %129 = extractvalue { i128, i1 } %128, 1
  br i1 %129, label %131, label %132

130:                                              ; preds = %103
  br label %120

131:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %126
  %133 = extractvalue { i128, i1 } %128, 0
  store i128 %133, ptr %3, align 16
  %134 = load i128, ptr %4, align 16
  %135 = lshr i128 %134, 1
  store i128 %135, ptr %4, align 16
  br label %120

136:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %120
  %138 = extractvalue { i128, i1 } %124, 0
  %139 = sub i128 2147483647, %138
  %140 = icmp ule i128 %139, 4294967295
  br i1 %140, label %143, label %144

141:                                              ; preds = %143
  %142 = trunc i128 %138 to i32
  br label %7

143:                                              ; preds = %137
  br label %141

144:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @4)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.sadd.with.overflow.i128(i128, i128) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ffssi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, ptr %4, align 4
  store i32 %0, ptr %4, align 4
  store i32 1, ptr %3, align 4
  store i32 -1, ptr %2, align 4
  %5 = load i32, ptr %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %108, %16
  %8 = phi i32 [ 0, %16 ], [ %109, %108 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i32, ptr %2, align 4
  %11 = lshr i32 %10, 16
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = and i32 %12, %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %31, %29
  %19 = load i32, ptr %2, align 4
  %20 = lshr i32 %19, 8
  store i32 %20, ptr %2, align 4
  %21 = load i32, ptr %4, align 4
  %22 = load i32, ptr %2, align 4
  %23 = and i32 %21, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i32, ptr %3, align 4
  %27 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %26, i32 16)
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i32, i1 } %27, 0
  store i32 %32, ptr %3, align 4
  %33 = load i32, ptr %4, align 4
  %34 = lshr i32 %33, 16
  store i32 %34, ptr %4, align 4
  br label %18

35:                                               ; preds = %48, %46
  %36 = load i32, ptr %2, align 4
  %37 = lshr i32 %36, 4
  store i32 %37, ptr %2, align 4
  %38 = load i32, ptr %4, align 4
  %39 = load i32, ptr %2, align 4
  %40 = and i32 %38, %39
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i32, ptr %3, align 4
  %44 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %43, i32 8)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i32, i1 } %44, 0
  store i32 %49, ptr %3, align 4
  %50 = load i32, ptr %4, align 4
  %51 = lshr i32 %50, 8
  store i32 %51, ptr %4, align 4
  br label %35

52:                                               ; preds = %65, %63
  %53 = load i32, ptr %2, align 4
  %54 = lshr i32 %53, 2
  store i32 %54, ptr %2, align 4
  %55 = load i32, ptr %4, align 4
  %56 = load i32, ptr %2, align 4
  %57 = and i32 %55, %56
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i32, ptr %3, align 4
  %61 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %60, i32 4)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i32, i1 } %61, 0
  store i32 %66, ptr %3, align 4
  %67 = load i32, ptr %4, align 4
  %68 = lshr i32 %67, 4
  store i32 %68, ptr %4, align 4
  br label %52

69:                                               ; preds = %82, %80
  %70 = load i32, ptr %2, align 4
  %71 = lshr i32 %70, 1
  store i32 %71, ptr %2, align 4
  %72 = load i32, ptr %4, align 4
  %73 = load i32, ptr %2, align 4
  %74 = and i32 %72, %73
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %92, label %96

76:                                               ; preds = %52
  %77 = load i32, ptr %3, align 4
  %78 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %77, i32 2)
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i32, i1 } %78, 0
  store i32 %83, ptr %3, align 4
  %84 = load i32, ptr %4, align 4
  %85 = lshr i32 %84, 2
  store i32 %85, ptr %4, align 4
  br label %69

86:                                               ; preds = %98, %96
  %87 = load i32, ptr %3, align 4
  %88 = load i32, ptr %4, align 4
  %89 = and i32 %88, 1
  %90 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %87, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %102, label %103

92:                                               ; preds = %69
  %93 = load i32, ptr %3, align 4
  %94 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %93, i32 1)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %97, label %98

96:                                               ; preds = %69
  br label %86

97:                                               ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %92
  %99 = extractvalue { i32, i1 } %94, 0
  store i32 %99, ptr %3, align 4
  %100 = load i32, ptr %4, align 4
  %101 = lshr i32 %100, 1
  store i32 %101, ptr %4, align 4
  br label %86

102:                                              ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %86
  %104 = extractvalue { i32, i1 } %90, 0
  %105 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %104, i32 1)
  %106 = extractvalue { i32, i1 } %105, 1
  br i1 %106, label %107, label %108

107:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

108:                                              ; preds = %103
  %109 = extractvalue { i32, i1 } %105, 0
  br label %7
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ffsdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, ptr %4, align 8
  store i64 %0, ptr %4, align 8
  store i64 1, ptr %3, align 8
  store i64 -1, ptr %2, align 8
  %5 = load i64, ptr %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %131, %16
  %8 = phi i32 [ 0, %16 ], [ %132, %131 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i64, ptr %2, align 8
  %11 = lshr i64 %10, 32
  store i64 %11, ptr %2, align 8
  %12 = load i64, ptr %4, align 8
  %13 = load i64, ptr %2, align 8
  %14 = and i64 %12, %13
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %31, %29
  %19 = load i64, ptr %2, align 8
  %20 = lshr i64 %19, 16
  store i64 %20, ptr %2, align 8
  %21 = load i64, ptr %4, align 8
  %22 = load i64, ptr %2, align 8
  %23 = and i64 %21, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i64, ptr %3, align 8
  %27 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %26, i64 32)
  %28 = extractvalue { i64, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i64, i1 } %27, 0
  store i64 %32, ptr %3, align 8
  %33 = load i64, ptr %4, align 8
  %34 = lshr i64 %33, 32
  store i64 %34, ptr %4, align 8
  br label %18

35:                                               ; preds = %48, %46
  %36 = load i64, ptr %2, align 8
  %37 = lshr i64 %36, 8
  store i64 %37, ptr %2, align 8
  %38 = load i64, ptr %4, align 8
  %39 = load i64, ptr %2, align 8
  %40 = and i64 %38, %39
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i64, ptr %3, align 8
  %44 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %43, i64 16)
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i64, i1 } %44, 0
  store i64 %49, ptr %3, align 8
  %50 = load i64, ptr %4, align 8
  %51 = lshr i64 %50, 16
  store i64 %51, ptr %4, align 8
  br label %35

52:                                               ; preds = %65, %63
  %53 = load i64, ptr %2, align 8
  %54 = lshr i64 %53, 4
  store i64 %54, ptr %2, align 8
  %55 = load i64, ptr %4, align 8
  %56 = load i64, ptr %2, align 8
  %57 = and i64 %55, %56
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i64, ptr %3, align 8
  %61 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %60, i64 8)
  %62 = extractvalue { i64, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i64, i1 } %61, 0
  store i64 %66, ptr %3, align 8
  %67 = load i64, ptr %4, align 8
  %68 = lshr i64 %67, 8
  store i64 %68, ptr %4, align 8
  br label %52

69:                                               ; preds = %82, %80
  %70 = load i64, ptr %2, align 8
  %71 = lshr i64 %70, 2
  store i64 %71, ptr %2, align 8
  %72 = load i64, ptr %4, align 8
  %73 = load i64, ptr %2, align 8
  %74 = and i64 %72, %73
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %93, label %97

76:                                               ; preds = %52
  %77 = load i64, ptr %3, align 8
  %78 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %77, i64 4)
  %79 = extractvalue { i64, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i64, i1 } %78, 0
  store i64 %83, ptr %3, align 8
  %84 = load i64, ptr %4, align 8
  %85 = lshr i64 %84, 4
  store i64 %85, ptr %4, align 8
  br label %69

86:                                               ; preds = %99, %97
  %87 = load i64, ptr %2, align 8
  %88 = lshr i64 %87, 1
  store i64 %88, ptr %2, align 8
  %89 = load i64, ptr %4, align 8
  %90 = load i64, ptr %2, align 8
  %91 = and i64 %89, %90
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %109, label %113

93:                                               ; preds = %69
  %94 = load i64, ptr %3, align 8
  %95 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %94, i64 2)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %69
  br label %86

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i64, i1 } %95, 0
  store i64 %100, ptr %3, align 8
  %101 = load i64, ptr %4, align 8
  %102 = lshr i64 %101, 2
  store i64 %102, ptr %4, align 8
  br label %86

103:                                              ; preds = %115, %113
  %104 = load i64, ptr %3, align 8
  %105 = load i64, ptr %4, align 8
  %106 = and i64 %105, 1
  %107 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %104, i64 %106)
  %108 = extractvalue { i64, i1 } %107, 1
  br i1 %108, label %119, label %120

109:                                              ; preds = %86
  %110 = load i64, ptr %3, align 8
  %111 = call fastcc { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %110, i64 1)
  %112 = extractvalue { i64, i1 } %111, 1
  br i1 %112, label %114, label %115

113:                                              ; preds = %86
  br label %103

114:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

115:                                              ; preds = %109
  %116 = extractvalue { i64, i1 } %111, 0
  store i64 %116, ptr %3, align 8
  %117 = load i64, ptr %4, align 8
  %118 = lshr i64 %117, 1
  store i64 %118, ptr %4, align 8
  br label %103

119:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

120:                                              ; preds = %103
  %121 = extractvalue { i64, i1 } %107, 0
  %122 = sub i64 2147483647, %121
  %123 = icmp ule i64 %122, 4294967295
  br i1 %123, label %128, label %129

124:                                              ; preds = %128
  %125 = trunc i64 %121 to i32
  %126 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %125, i32 1)
  %127 = extractvalue { i32, i1 } %126, 1
  br i1 %127, label %130, label %131

128:                                              ; preds = %120
  br label %124

129:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @5)
  unreachable

130:                                              ; preds = %124
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

131:                                              ; preds = %124
  %132 = extractvalue { i32, i1 } %126, 0
  br label %7
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ffsti2(i128 %0) #0 {
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  store i128 %0, ptr %4, align 16
  store i128 %0, ptr %4, align 16
  store i128 1, ptr %3, align 16
  store i128 -1, ptr %2, align 16
  %5 = load i128, ptr %4, align 16
  %6 = icmp eq i128 %5, 0
  br i1 %6, label %16, label %17

7:                                                ; preds = %148, %16
  %8 = phi i32 [ 0, %16 ], [ %149, %148 ]
  ret i32 %8

9:                                                ; preds = %17
  %10 = load i128, ptr %2, align 16
  %11 = lshr i128 %10, 64
  store i128 %11, ptr %2, align 16
  %12 = load i128, ptr %4, align 16
  %13 = load i128, ptr %2, align 16
  %14 = and i128 %12, %13
  %15 = icmp eq i128 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %1
  br label %7

17:                                               ; preds = %1
  br label %9

18:                                               ; preds = %31, %29
  %19 = load i128, ptr %2, align 16
  %20 = lshr i128 %19, 32
  store i128 %20, ptr %2, align 16
  %21 = load i128, ptr %4, align 16
  %22 = load i128, ptr %2, align 16
  %23 = and i128 %21, %22
  %24 = icmp eq i128 %23, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i128, ptr %3, align 16
  %27 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %26, i128 64)
  %28 = extractvalue { i128, i1 } %27, 1
  br i1 %28, label %30, label %31

29:                                               ; preds = %9
  br label %18

30:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %25
  %32 = extractvalue { i128, i1 } %27, 0
  store i128 %32, ptr %3, align 16
  %33 = load i128, ptr %4, align 16
  %34 = lshr i128 %33, 64
  store i128 %34, ptr %4, align 16
  br label %18

35:                                               ; preds = %48, %46
  %36 = load i128, ptr %2, align 16
  %37 = lshr i128 %36, 16
  store i128 %37, ptr %2, align 16
  %38 = load i128, ptr %4, align 16
  %39 = load i128, ptr %2, align 16
  %40 = and i128 %38, %39
  %41 = icmp eq i128 %40, 0
  br i1 %41, label %59, label %63

42:                                               ; preds = %18
  %43 = load i128, ptr %3, align 16
  %44 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %43, i128 32)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %47, label %48

46:                                               ; preds = %18
  br label %35

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i128, i1 } %44, 0
  store i128 %49, ptr %3, align 16
  %50 = load i128, ptr %4, align 16
  %51 = lshr i128 %50, 32
  store i128 %51, ptr %4, align 16
  br label %35

52:                                               ; preds = %65, %63
  %53 = load i128, ptr %2, align 16
  %54 = lshr i128 %53, 8
  store i128 %54, ptr %2, align 16
  %55 = load i128, ptr %4, align 16
  %56 = load i128, ptr %2, align 16
  %57 = and i128 %55, %56
  %58 = icmp eq i128 %57, 0
  br i1 %58, label %76, label %80

59:                                               ; preds = %35
  %60 = load i128, ptr %3, align 16
  %61 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %60, i128 16)
  %62 = extractvalue { i128, i1 } %61, 1
  br i1 %62, label %64, label %65

63:                                               ; preds = %35
  br label %52

64:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %59
  %66 = extractvalue { i128, i1 } %61, 0
  store i128 %66, ptr %3, align 16
  %67 = load i128, ptr %4, align 16
  %68 = lshr i128 %67, 16
  store i128 %68, ptr %4, align 16
  br label %52

69:                                               ; preds = %82, %80
  %70 = load i128, ptr %2, align 16
  %71 = lshr i128 %70, 4
  store i128 %71, ptr %2, align 16
  %72 = load i128, ptr %4, align 16
  %73 = load i128, ptr %2, align 16
  %74 = and i128 %72, %73
  %75 = icmp eq i128 %74, 0
  br i1 %75, label %93, label %97

76:                                               ; preds = %52
  %77 = load i128, ptr %3, align 16
  %78 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %77, i128 8)
  %79 = extractvalue { i128, i1 } %78, 1
  br i1 %79, label %81, label %82

80:                                               ; preds = %52
  br label %69

81:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %76
  %83 = extractvalue { i128, i1 } %78, 0
  store i128 %83, ptr %3, align 16
  %84 = load i128, ptr %4, align 16
  %85 = lshr i128 %84, 8
  store i128 %85, ptr %4, align 16
  br label %69

86:                                               ; preds = %99, %97
  %87 = load i128, ptr %2, align 16
  %88 = lshr i128 %87, 2
  store i128 %88, ptr %2, align 16
  %89 = load i128, ptr %4, align 16
  %90 = load i128, ptr %2, align 16
  %91 = and i128 %89, %90
  %92 = icmp eq i128 %91, 0
  br i1 %92, label %110, label %114

93:                                               ; preds = %69
  %94 = load i128, ptr %3, align 16
  %95 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %94, i128 4)
  %96 = extractvalue { i128, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %69
  br label %86

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i128, i1 } %95, 0
  store i128 %100, ptr %3, align 16
  %101 = load i128, ptr %4, align 16
  %102 = lshr i128 %101, 4
  store i128 %102, ptr %4, align 16
  br label %86

103:                                              ; preds = %116, %114
  %104 = load i128, ptr %2, align 16
  %105 = lshr i128 %104, 1
  store i128 %105, ptr %2, align 16
  %106 = load i128, ptr %4, align 16
  %107 = load i128, ptr %2, align 16
  %108 = and i128 %106, %107
  %109 = icmp eq i128 %108, 0
  br i1 %109, label %126, label %130

110:                                              ; preds = %86
  %111 = load i128, ptr %3, align 16
  %112 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %111, i128 2)
  %113 = extractvalue { i128, i1 } %112, 1
  br i1 %113, label %115, label %116

114:                                              ; preds = %86
  br label %103

115:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %110
  %117 = extractvalue { i128, i1 } %112, 0
  store i128 %117, ptr %3, align 16
  %118 = load i128, ptr %4, align 16
  %119 = lshr i128 %118, 2
  store i128 %119, ptr %4, align 16
  br label %103

120:                                              ; preds = %132, %130
  %121 = load i128, ptr %3, align 16
  %122 = load i128, ptr %4, align 16
  %123 = and i128 %122, 1
  %124 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 %121, i128 %123)
  %125 = extractvalue { i128, i1 } %124, 1
  br i1 %125, label %136, label %137

126:                                              ; preds = %103
  %127 = load i128, ptr %3, align 16
  %128 = call fastcc { i128, i1 } @llvm.sadd.with.overflow.i128(i128 %127, i128 1)
  %129 = extractvalue { i128, i1 } %128, 1
  br i1 %129, label %131, label %132

130:                                              ; preds = %103
  br label %120

131:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %126
  %133 = extractvalue { i128, i1 } %128, 0
  store i128 %133, ptr %3, align 16
  %134 = load i128, ptr %4, align 16
  %135 = lshr i128 %134, 1
  store i128 %135, ptr %4, align 16
  br label %120

136:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %120
  %138 = extractvalue { i128, i1 } %124, 0
  %139 = sub i128 2147483647, %138
  %140 = icmp ule i128 %139, 4294967295
  br i1 %140, label %145, label %146

141:                                              ; preds = %145
  %142 = trunc i128 %138 to i32
  %143 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %142, i32 1)
  %144 = extractvalue { i32, i1 } %143, 1
  br i1 %144, label %147, label %148

145:                                              ; preds = %137
  br label %141

146:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @6)
  unreachable

147:                                              ; preds = %141
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

148:                                              ; preds = %141
  %149 = extractvalue { i32, i1 } %143, 0
  br label %7
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__paritysi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = load i32, ptr %2, align 4
  %5 = lshr i32 %4, 16
  %6 = xor i32 %3, %5
  store i32 %6, ptr %2, align 4
  %7 = load i32, ptr %2, align 4
  %8 = load i32, ptr %2, align 4
  %9 = lshr i32 %8, 8
  %10 = xor i32 %7, %9
  store i32 %10, ptr %2, align 4
  %11 = load i32, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = lshr i32 %12, 4
  %14 = xor i32 %11, %13
  store i32 %14, ptr %2, align 4
  %15 = load i32, ptr %2, align 4
  %16 = and i32 %15, 15
  store i32 %16, ptr %2, align 4
  %17 = load i32, ptr %2, align 4
  %18 = sub i32 15, %17
  %19 = icmp ule i32 %18, 15
  br i1 %19, label %26, label %27

20:                                               ; preds = %26
  %21 = trunc i32 %17 to i4
  %22 = zext i4 %21 to i16
  %23 = lshr i16 27030, %22
  %24 = and i16 %23, 1
  %25 = zext i16 %24 to i32
  ret i32 %25

26:                                               ; preds = %1
  br label %20

27:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @7)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__paritydi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, ptr %2, align 8
  store i64 %0, ptr %2, align 8
  %3 = load i64, ptr %2, align 8
  %4 = load i64, ptr %2, align 8
  %5 = lshr i64 %4, 32
  %6 = xor i64 %3, %5
  store i64 %6, ptr %2, align 8
  %7 = load i64, ptr %2, align 8
  %8 = load i64, ptr %2, align 8
  %9 = lshr i64 %8, 16
  %10 = xor i64 %7, %9
  store i64 %10, ptr %2, align 8
  %11 = load i64, ptr %2, align 8
  %12 = load i64, ptr %2, align 8
  %13 = lshr i64 %12, 8
  %14 = xor i64 %11, %13
  store i64 %14, ptr %2, align 8
  %15 = load i64, ptr %2, align 8
  %16 = load i64, ptr %2, align 8
  %17 = lshr i64 %16, 4
  %18 = xor i64 %15, %17
  store i64 %18, ptr %2, align 8
  %19 = load i64, ptr %2, align 8
  %20 = and i64 %19, 15
  store i64 %20, ptr %2, align 8
  %21 = load i64, ptr %2, align 8
  %22 = sub i64 15, %21
  %23 = icmp ule i64 %22, 15
  br i1 %23, label %30, label %31

24:                                               ; preds = %30
  %25 = trunc i64 %21 to i4
  %26 = zext i4 %25 to i16
  %27 = lshr i16 27030, %26
  %28 = and i16 %27, 1
  %29 = zext i16 %28 to i32
  ret i32 %29

30:                                               ; preds = %1
  br label %24

31:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @8)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__parityti2(i128 %0) #0 {
  %2 = alloca i128, align 16
  store i128 %0, ptr %2, align 16
  store i128 %0, ptr %2, align 16
  %3 = load i128, ptr %2, align 16
  %4 = load i128, ptr %2, align 16
  %5 = lshr i128 %4, 64
  %6 = xor i128 %3, %5
  store i128 %6, ptr %2, align 16
  %7 = load i128, ptr %2, align 16
  %8 = load i128, ptr %2, align 16
  %9 = lshr i128 %8, 32
  %10 = xor i128 %7, %9
  store i128 %10, ptr %2, align 16
  %11 = load i128, ptr %2, align 16
  %12 = load i128, ptr %2, align 16
  %13 = lshr i128 %12, 16
  %14 = xor i128 %11, %13
  store i128 %14, ptr %2, align 16
  %15 = load i128, ptr %2, align 16
  %16 = load i128, ptr %2, align 16
  %17 = lshr i128 %16, 8
  %18 = xor i128 %15, %17
  store i128 %18, ptr %2, align 16
  %19 = load i128, ptr %2, align 16
  %20 = load i128, ptr %2, align 16
  %21 = lshr i128 %20, 4
  %22 = xor i128 %19, %21
  store i128 %22, ptr %2, align 16
  %23 = load i128, ptr %2, align 16
  %24 = and i128 %23, 15
  store i128 %24, ptr %2, align 16
  %25 = load i128, ptr %2, align 16
  %26 = sub i128 15, %25
  %27 = icmp ule i128 %26, 15
  br i1 %27, label %34, label %35

28:                                               ; preds = %34
  %29 = trunc i128 %25 to i4
  %30 = zext i4 %29 to i16
  %31 = lshr i16 27030, %30
  %32 = and i16 %31, 1
  %33 = zext i16 %32 to i32
  ret i32 %33

34:                                               ; preds = %1
  br label %28

35:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @9)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__popcountsi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = load i32, ptr %2, align 4
  %5 = lshr i32 %4, 1
  %6 = and i32 %5, 1431655765
  %7 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %3, i32 %6)
  %8 = extractvalue { i32, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %1
  %11 = extractvalue { i32, i1 } %7, 0
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = lshr i32 %12, 2
  %14 = and i32 %13, 858993459
  %15 = load i32, ptr %2, align 4
  %16 = and i32 %15, 858993459
  %17 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %14, i32 %16)
  %18 = extractvalue { i32, i1 } %17, 1
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %10
  %21 = extractvalue { i32, i1 } %17, 0
  store i32 %21, ptr %2, align 4
  %22 = load i32, ptr %2, align 4
  %23 = load i32, ptr %2, align 4
  %24 = lshr i32 %23, 4
  %25 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %22, i32 %24)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %20
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %20
  %29 = extractvalue { i32, i1 } %25, 0
  store i32 %29, ptr %2, align 4
  %30 = load i32, ptr %2, align 4
  %31 = and i32 %30, 252645135
  store i32 %31, ptr %2, align 4
  %32 = load i32, ptr %2, align 4
  %33 = mul i32 %32, 16843009
  store i32 %33, ptr %2, align 4
  %34 = load i32, ptr %2, align 4
  %35 = lshr i32 %34, 24
  store i32 %35, ptr %2, align 4
  %36 = load i32, ptr %2, align 4
  %37 = sub i32 2147483647, %36
  %38 = icmp ule i32 %37, 2147483647
  br i1 %38, label %40, label %41

39:                                               ; preds = %40
  ret i32 %36

40:                                               ; preds = %28
  br label %39

41:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @10)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.usub.with.overflow.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__popcountdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, ptr %2, align 8
  %3 = load i64, ptr %2, align 8
  %4 = load i64, ptr %2, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %5, 6148914691236517205
  %7 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %3, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %1
  %11 = extractvalue { i64, i1 } %7, 0
  store i64 %11, ptr %2, align 8
  %12 = load i64, ptr %2, align 8
  %13 = lshr i64 %12, 2
  %14 = and i64 %13, 3689348814741910323
  %15 = load i64, ptr %2, align 8
  %16 = and i64 %15, 3689348814741910323
  %17 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %14, i64 %16)
  %18 = extractvalue { i64, i1 } %17, 1
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %10
  %21 = extractvalue { i64, i1 } %17, 0
  store i64 %21, ptr %2, align 8
  %22 = load i64, ptr %2, align 8
  %23 = load i64, ptr %2, align 8
  %24 = lshr i64 %23, 4
  %25 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %22, i64 %24)
  %26 = extractvalue { i64, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %20
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %20
  %29 = extractvalue { i64, i1 } %25, 0
  store i64 %29, ptr %2, align 8
  %30 = load i64, ptr %2, align 8
  %31 = and i64 %30, 1085102592571150095
  store i64 %31, ptr %2, align 8
  %32 = load i64, ptr %2, align 8
  %33 = mul i64 %32, 72340172838076673
  store i64 %33, ptr %2, align 8
  %34 = load i64, ptr %2, align 8
  %35 = lshr i64 %34, 56
  store i64 %35, ptr %2, align 8
  %36 = load i64, ptr %2, align 8
  %37 = sub i64 2147483647, %36
  %38 = icmp ule i64 %37, 2147483647
  br i1 %38, label %41, label %42

39:                                               ; preds = %41
  %40 = trunc i64 %36 to i32
  ret i32 %40

41:                                               ; preds = %28
  br label %39

42:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @11)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__popcountti2(i128 %0) #0 {
  %2 = alloca i128, align 16
  store i128 %0, ptr %2, align 16
  %3 = load i128, ptr %2, align 16
  %4 = load i128, ptr %2, align 16
  %5 = lshr i128 %4, 1
  %6 = and i128 %5, 113427455640312821154458202477256070485
  %7 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 %3, i128 %6)
  %8 = extractvalue { i128, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %1
  %11 = extractvalue { i128, i1 } %7, 0
  store i128 %11, ptr %2, align 16
  %12 = load i128, ptr %2, align 16
  %13 = lshr i128 %12, 2
  %14 = and i128 %13, 68056473384187692692674921486353642291
  %15 = load i128, ptr %2, align 16
  %16 = and i128 %15, 68056473384187692692674921486353642291
  %17 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %14, i128 %16)
  %18 = extractvalue { i128, i1 } %17, 1
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %10
  %21 = extractvalue { i128, i1 } %17, 0
  store i128 %21, ptr %2, align 16
  %22 = load i128, ptr %2, align 16
  %23 = load i128, ptr %2, align 16
  %24 = lshr i128 %23, 4
  %25 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %22, i128 %24)
  %26 = extractvalue { i128, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %20
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %20
  %29 = extractvalue { i128, i1 } %25, 0
  store i128 %29, ptr %2, align 16
  %30 = load i128, ptr %2, align 16
  %31 = and i128 %30, 20016609818878733144904388672456953615
  store i128 %31, ptr %2, align 16
  %32 = load i128, ptr %2, align 16
  %33 = mul i128 %32, 1334440654591915542993625911497130241
  store i128 %33, ptr %2, align 16
  %34 = load i128, ptr %2, align 16
  %35 = lshr i128 %34, 120
  store i128 %35, ptr %2, align 16
  %36 = load i128, ptr %2, align 16
  %37 = sub i128 2147483647, %36
  %38 = icmp ule i128 %37, 2147483647
  br i1 %38, label %41, label %42

39:                                               ; preds = %41
  %40 = trunc i128 %36 to i32
  ret i32 %40

41:                                               ; preds = %28
  br label %39

42:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @12)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.usub.with.overflow.i128(i128, i128) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.uadd.with.overflow.i128(i128, i128) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__bswapsi2(i32 %0) #0 {
  %2 = and i32 %0, -16777216
  %3 = lshr i32 %2, 24
  %4 = and i32 %0, 16711680
  %5 = lshr i32 %4, 8
  %6 = or i32 %3, %5
  %7 = and i32 %0, 65280
  %8 = shl i32 %7, 8
  %9 = or i32 %6, %8
  %10 = and i32 %0, 255
  %11 = shl i32 %10, 24
  %12 = or i32 %9, %11
  ret i32 %12
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__bswapdi2(i64 %0) #0 {
  %2 = and i64 %0, -72057594037927936
  %3 = lshr i64 %2, 56
  %4 = and i64 %0, 71776119061217280
  %5 = lshr i64 %4, 40
  %6 = or i64 %3, %5
  %7 = and i64 %0, 280375465082880
  %8 = lshr i64 %7, 24
  %9 = or i64 %6, %8
  %10 = and i64 %0, 1095216660480
  %11 = lshr i64 %10, 8
  %12 = or i64 %9, %11
  %13 = and i64 %0, 4278190080
  %14 = shl i64 %13, 8
  %15 = or i64 %12, %14
  %16 = and i64 %0, 16711680
  %17 = shl i64 %16, 24
  %18 = or i64 %15, %17
  %19 = and i64 %0, 65280
  %20 = shl i64 %19, 40
  %21 = or i64 %18, %20
  %22 = and i64 %0, 255
  %23 = shl i64 %22, 56
  %24 = or i64 %21, %23
  ret i64 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__bswapti2(i128 %0) #0 {
  %2 = and i128 %0, -1329227995784915872903807060280344576
  %3 = lshr i128 %2, 120
  %4 = and i128 %0, 1324035698926381045275276563951124480
  %5 = lshr i128 %4, 104
  %6 = or i128 %3, %5
  %7 = and i128 %0, 5172014448931175958106549077934080
  %8 = lshr i128 %7, 88
  %9 = or i128 %6, %8
  %10 = and i128 %0, 20203181441137406086353707335680
  %11 = lshr i128 %10, 72
  %12 = or i128 %9, %11
  %13 = and i128 %0, 78918677504442992524819169280
  %14 = lshr i128 %13, 56
  %15 = or i128 %12, %14
  %16 = and i128 %0, 308276084001730439550074880
  %17 = lshr i128 %16, 40
  %18 = or i128 %15, %17
  %19 = and i128 %0, 1204203453131759529492480
  %20 = lshr i128 %19, 24
  %21 = or i128 %18, %20
  %22 = and i128 %0, 4703919738795935662080
  %23 = lshr i128 %22, 8
  %24 = or i128 %21, %23
  %25 = and i128 %0, 18374686479671623680
  %26 = shl i128 %25, 8
  %27 = or i128 %24, %26
  %28 = and i128 %0, 71776119061217280
  %29 = shl i128 %28, 24
  %30 = or i128 %27, %29
  %31 = and i128 %0, 280375465082880
  %32 = shl i128 %31, 40
  %33 = or i128 %30, %32
  %34 = and i128 %0, 1095216660480
  %35 = shl i128 %34, 56
  %36 = or i128 %33, %35
  %37 = and i128 %0, 4278190080
  %38 = shl i128 %37, 72
  %39 = or i128 %36, %38
  %40 = and i128 %0, 16711680
  %41 = shl i128 %40, 88
  %42 = or i128 %39, %41
  %43 = and i128 %0, 65280
  %44 = shl i128 %43, 104
  %45 = or i128 %42, %44
  %46 = and i128 %0, 255
  %47 = shl i128 %46, 120
  %48 = or i128 %45, %47
  ret i128 %48
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__cmpsi2(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp sgt i32 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp slt i32 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__cmpdi2(i64 %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp sgt i64 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp slt i64 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__cmpti2(i128 %0, i128 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp sgt i128 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp slt i128 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ucmpsi2(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp ugt i32 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp ult i32 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ucmpdi2(i64 %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp ugt i64 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp ult i64 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ucmpti2(i128 %0, i128 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %5 = icmp ugt i128 %0, %1
  br i1 %5, label %8, label %9

6:                                                ; preds = %9, %8
  %7 = icmp ult i128 %0, %1
  br i1 %7, label %15, label %16

8:                                                ; preds = %2
  store i32 1, ptr %4, align 4
  br label %6

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %16, %15
  %11 = load i32, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %6
  store i32 1, ptr %3, align 4
  br label %10

16:                                               ; preds = %6
  br label %10

17:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %10
  %19 = extractvalue { i32, i1 } %13, 0
  %20 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 1)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %18
  %24 = extractvalue { i32, i1 } %20, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ashlsi3(i32 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %fs.file.File, align 4
  %5 = alloca %fs.file.File, align 4
  %6 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  store i32 %0, ptr %6, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %7 = icmp sge i32 %1, 16
  br i1 %7, label %13, label %23

8:                                                ; preds = %37, %10
  %9 = phi i32 [ %0, %37 ], [ %12, %10 ]
  ret i32 %9

10:                                               ; preds = %36, %30
  %11 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %12 = load i32, ptr %11, align 4
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %14, i32 0, i32 0
  store i16 0, ptr %15, align 2
  %16 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %16, i32 0, i32 1
  %18 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %18, i32 0, i32 0
  %20 = load i16, ptr %19, align 2
  %21 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 16)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %37, label %38

25:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %13
  %27 = extractvalue { i32, i1 } %21, 0
  %28 = sub i32 15, %27
  %29 = icmp ule i32 %28, 15
  br i1 %29, label %34, label %35

30:                                               ; preds = %34
  %31 = trunc i32 %27 to i4
  %32 = zext i4 %31 to i16
  %33 = shl i16 %20, %32
  store i16 %33, ptr %17, align 2
  br label %10

34:                                               ; preds = %26
  br label %30

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @13)
  unreachable

36:                                               ; preds = %78
  br label %10

37:                                               ; preds = %23
  br label %8

38:                                               ; preds = %23
  %39 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %40 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %39, i32 0, i32 0
  %41 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %42 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %41, i32 0, i32 0
  %43 = load i16, ptr %42, align 2
  %44 = sub i32 15, %1
  %45 = icmp ule i32 %44, 15
  br i1 %45, label %57, label %58

46:                                               ; preds = %57
  %47 = trunc i32 %1 to i4
  %48 = zext i4 %47 to i16
  %49 = shl i16 %43, %48
  store i16 %49, ptr %40, align 2
  %50 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %50, i32 0, i32 1
  %52 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %52, i32 0, i32 1
  %54 = load i16, ptr %53, align 2
  %55 = sub i32 15, %1
  %56 = icmp ule i32 %55, 15
  br i1 %56, label %71, label %72

57:                                               ; preds = %38
  br label %46

58:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @13)
  unreachable

59:                                               ; preds = %71
  %60 = trunc i32 %1 to i4
  %61 = zext i4 %60 to i16
  %62 = shl i16 %54, %61
  store i16 %62, ptr %51, align 2
  %63 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %64 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %63, i32 0, i32 1
  %65 = load i16, ptr %64, align 2
  %66 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %67 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %66, i32 0, i32 0
  %68 = load i16, ptr %67, align 2
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16, i32 %1)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %46
  br label %59

72:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @13)
  unreachable

73:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %59
  %75 = extractvalue { i32, i1 } %69, 0
  %76 = sub i32 15, %75
  %77 = icmp ule i32 %76, 15
  br i1 %77, label %83, label %84

78:                                               ; preds = %83
  %79 = trunc i32 %75 to i4
  %80 = zext i4 %79 to i16
  %81 = lshr i16 %68, %80
  %82 = or i16 %65, %81
  store i16 %82, ptr %64, align 2
  br label %36

83:                                               ; preds = %74
  br label %78

84:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @13)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ashrsi3(i32 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %fs.file.File, align 4
  %5 = alloca %fs.file.File, align 4
  %6 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  store i32 %0, ptr %6, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %7 = icmp sge i32 %1, 16
  br i1 %7, label %13, label %27

8:                                                ; preds = %41, %10
  %9 = phi i32 [ %0, %41 ], [ %12, %10 ]
  ret i32 %9

10:                                               ; preds = %40, %34
  %11 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %12 = load i32, ptr %11, align 4
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %14, i32 0, i32 1
  %16 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %16, i32 0, i32 1
  %18 = load i16, ptr %17, align 2
  %19 = ashr i16 %18, 15
  store i16 %19, ptr %15, align 2
  %20 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %21 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %20, i32 0, i32 0
  %22 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %22, i32 0, i32 1
  %24 = load i16, ptr %23, align 2
  %25 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 16)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %29, label %30

27:                                               ; preds = %2
  %28 = icmp eq i32 %1, 0
  br i1 %28, label %41, label %42

29:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

30:                                               ; preds = %13
  %31 = extractvalue { i32, i1 } %25, 0
  %32 = sub i32 15, %31
  %33 = icmp ule i32 %32, 15
  br i1 %33, label %38, label %39

34:                                               ; preds = %38
  %35 = trunc i32 %31 to i4
  %36 = zext i4 %35 to i16
  %37 = ashr i16 %24, %36
  store i16 %37, ptr %21, align 2
  br label %10

38:                                               ; preds = %30
  br label %34

39:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @14)
  unreachable

40:                                               ; preds = %82
  br label %10

41:                                               ; preds = %27
  br label %8

42:                                               ; preds = %27
  %43 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %44 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %43, i32 0, i32 1
  %45 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %46 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %45, i32 0, i32 1
  %47 = load i16, ptr %46, align 2
  %48 = sub i32 15, %1
  %49 = icmp ule i32 %48, 15
  br i1 %49, label %61, label %62

50:                                               ; preds = %61
  %51 = trunc i32 %1 to i4
  %52 = zext i4 %51 to i16
  %53 = ashr i16 %47, %52
  store i16 %53, ptr %44, align 2
  %54 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %55 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %54, i32 0, i32 0
  %56 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %57 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %56, i32 0, i32 1
  %58 = load i16, ptr %57, align 2
  %59 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16, i32 %1)
  %60 = extractvalue { i32, i1 } %59, 1
  br i1 %60, label %63, label %64

61:                                               ; preds = %42
  br label %50

62:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @14)
  unreachable

63:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

64:                                               ; preds = %50
  %65 = extractvalue { i32, i1 } %59, 0
  %66 = sub i32 15, %65
  %67 = icmp ule i32 %66, 15
  br i1 %67, label %80, label %81

68:                                               ; preds = %80
  %69 = trunc i32 %65 to i4
  %70 = zext i4 %69 to i16
  %71 = shl i16 %58, %70
  store i16 %71, ptr %55, align 2
  %72 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %73 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %72, i32 0, i32 0
  %74 = load i16, ptr %73, align 2
  %75 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %76 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %75, i32 0, i32 0
  %77 = load i16, ptr %76, align 2
  %78 = sub i32 15, %1
  %79 = icmp ule i32 %78, 15
  br i1 %79, label %87, label %88

80:                                               ; preds = %64
  br label %68

81:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @14)
  unreachable

82:                                               ; preds = %87
  %83 = trunc i32 %1 to i4
  %84 = zext i4 %83 to i16
  %85 = lshr i16 %77, %84
  %86 = or i16 %74, %85
  store i16 %86, ptr %73, align 2
  br label %40

87:                                               ; preds = %68
  br label %82

88:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @14)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__lshrsi3(i32 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %fs.file.File, align 4
  %5 = alloca %fs.file.File, align 4
  %6 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  store i32 %0, ptr %6, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %7 = icmp sge i32 %1, 16
  br i1 %7, label %13, label %23

8:                                                ; preds = %37, %10
  %9 = phi i32 [ %0, %37 ], [ %12, %10 ]
  ret i32 %9

10:                                               ; preds = %36, %30
  %11 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %12 = load i32, ptr %11, align 4
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %14, i32 0, i32 1
  store i16 0, ptr %15, align 2
  %16 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %16, i32 0, i32 0
  %18 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %18, i32 0, i32 1
  %20 = load i16, ptr %19, align 2
  %21 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 16)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %37, label %38

25:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %13
  %27 = extractvalue { i32, i1 } %21, 0
  %28 = sub i32 15, %27
  %29 = icmp ule i32 %28, 15
  br i1 %29, label %34, label %35

30:                                               ; preds = %34
  %31 = trunc i32 %27 to i4
  %32 = zext i4 %31 to i16
  %33 = lshr i16 %20, %32
  store i16 %33, ptr %17, align 2
  br label %10

34:                                               ; preds = %26
  br label %30

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @15)
  unreachable

36:                                               ; preds = %78
  br label %10

37:                                               ; preds = %23
  br label %8

38:                                               ; preds = %23
  %39 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %40 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %39, i32 0, i32 1
  %41 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %42 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %41, i32 0, i32 1
  %43 = load i16, ptr %42, align 2
  %44 = sub i32 15, %1
  %45 = icmp ule i32 %44, 15
  br i1 %45, label %57, label %58

46:                                               ; preds = %57
  %47 = trunc i32 %1 to i4
  %48 = zext i4 %47 to i16
  %49 = lshr i16 %43, %48
  store i16 %49, ptr %40, align 2
  %50 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %50, i32 0, i32 0
  %52 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %52, i32 0, i32 1
  %54 = load i16, ptr %53, align 2
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16, i32 %1)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %59, label %60

57:                                               ; preds = %38
  br label %46

58:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @15)
  unreachable

59:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %46
  %61 = extractvalue { i32, i1 } %55, 0
  %62 = sub i32 15, %61
  %63 = icmp ule i32 %62, 15
  br i1 %63, label %76, label %77

64:                                               ; preds = %76
  %65 = trunc i32 %61 to i4
  %66 = zext i4 %65 to i16
  %67 = shl i16 %54, %66
  store i16 %67, ptr %51, align 2
  %68 = getelementptr inbounds %fs.file.File, ptr %4, i32 0, i32 0
  %69 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %68, i32 0, i32 0
  %70 = load i16, ptr %69, align 2
  %71 = getelementptr inbounds %fs.file.File, ptr %5, i32 0, i32 0
  %72 = getelementptr inbounds %"compiler_rt.common.HalveInt(i32,false).HalveInt(i32,false)__struct_3472", ptr %71, i32 0, i32 0
  %73 = load i16, ptr %72, align 2
  %74 = sub i32 15, %1
  %75 = icmp ule i32 %74, 15
  br i1 %75, label %83, label %84

76:                                               ; preds = %60
  br label %64

77:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @15)
  unreachable

78:                                               ; preds = %83
  %79 = trunc i32 %1 to i4
  %80 = zext i4 %79 to i16
  %81 = lshr i16 %73, %80
  %82 = or i16 %70, %81
  store i16 %82, ptr %69, align 2
  br label %36

83:                                               ; preds = %64
  br label %78

84:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @15)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__ashlti3(i128 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  store i128 %0, ptr %6, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %7 = icmp sge i32 %1, 64
  br i1 %7, label %13, label %23

8:                                                ; preds = %37, %10
  %9 = phi i128 [ %0, %37 ], [ %12, %10 ]
  ret i128 %9

10:                                               ; preds = %36, %30
  %11 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %12 = load i128, ptr %11, align 16
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %14, i32 0, i32 0
  store i64 0, ptr %15, align 8
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %16, i32 0, i32 1
  %18 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %18, i32 0, i32 0
  %20 = load i64, ptr %19, align 8
  %21 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 64)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %37, label %38

25:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %13
  %27 = extractvalue { i32, i1 } %21, 0
  %28 = sub i32 63, %27
  %29 = icmp ule i32 %28, 63
  br i1 %29, label %34, label %35

30:                                               ; preds = %34
  %31 = trunc i32 %27 to i6
  %32 = zext i6 %31 to i64
  %33 = shl i64 %20, %32
  store i64 %33, ptr %17, align 8
  br label %10

34:                                               ; preds = %26
  br label %30

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @16)
  unreachable

36:                                               ; preds = %78
  br label %10

37:                                               ; preds = %23
  br label %8

38:                                               ; preds = %23
  %39 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %40 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %39, i32 0, i32 0
  %41 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %42 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %41, i32 0, i32 0
  %43 = load i64, ptr %42, align 8
  %44 = sub i32 63, %1
  %45 = icmp ule i32 %44, 63
  br i1 %45, label %57, label %58

46:                                               ; preds = %57
  %47 = trunc i32 %1 to i6
  %48 = zext i6 %47 to i64
  %49 = shl i64 %43, %48
  store i64 %49, ptr %40, align 8
  %50 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %50, i32 0, i32 1
  %52 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %52, i32 0, i32 1
  %54 = load i64, ptr %53, align 8
  %55 = sub i32 63, %1
  %56 = icmp ule i32 %55, 63
  br i1 %56, label %71, label %72

57:                                               ; preds = %38
  br label %46

58:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @16)
  unreachable

59:                                               ; preds = %71
  %60 = trunc i32 %1 to i6
  %61 = zext i6 %60 to i64
  %62 = shl i64 %54, %61
  store i64 %62, ptr %51, align 8
  %63 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %64 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %63, i32 0, i32 1
  %65 = load i64, ptr %64, align 8
  %66 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %67 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %66, i32 0, i32 0
  %68 = load i64, ptr %67, align 8
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 64, i32 %1)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %46
  br label %59

72:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @16)
  unreachable

73:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %59
  %75 = extractvalue { i32, i1 } %69, 0
  %76 = sub i32 63, %75
  %77 = icmp ule i32 %76, 63
  br i1 %77, label %83, label %84

78:                                               ; preds = %83
  %79 = trunc i32 %75 to i6
  %80 = zext i6 %79 to i64
  %81 = lshr i64 %68, %80
  %82 = or i64 %65, %81
  store i64 %82, ptr %64, align 8
  br label %36

83:                                               ; preds = %74
  br label %78

84:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @16)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__ashrti3(i128 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  store i128 %0, ptr %6, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %7 = icmp sge i32 %1, 64
  br i1 %7, label %13, label %27

8:                                                ; preds = %41, %10
  %9 = phi i128 [ %0, %41 ], [ %12, %10 ]
  ret i128 %9

10:                                               ; preds = %40, %34
  %11 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %12 = load i128, ptr %11, align 16
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %14, i32 0, i32 1
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %16, i32 0, i32 1
  %18 = load i64, ptr %17, align 8
  %19 = ashr i64 %18, 63
  store i64 %19, ptr %15, align 8
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %21 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %20, i32 0, i32 0
  %22 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %22, i32 0, i32 1
  %24 = load i64, ptr %23, align 8
  %25 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 64)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %29, label %30

27:                                               ; preds = %2
  %28 = icmp eq i32 %1, 0
  br i1 %28, label %41, label %42

29:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

30:                                               ; preds = %13
  %31 = extractvalue { i32, i1 } %25, 0
  %32 = sub i32 63, %31
  %33 = icmp ule i32 %32, 63
  br i1 %33, label %38, label %39

34:                                               ; preds = %38
  %35 = trunc i32 %31 to i6
  %36 = zext i6 %35 to i64
  %37 = ashr i64 %24, %36
  store i64 %37, ptr %21, align 8
  br label %10

38:                                               ; preds = %30
  br label %34

39:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @17)
  unreachable

40:                                               ; preds = %82
  br label %10

41:                                               ; preds = %27
  br label %8

42:                                               ; preds = %27
  %43 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %44 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %43, i32 0, i32 1
  %45 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %46 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %45, i32 0, i32 1
  %47 = load i64, ptr %46, align 8
  %48 = sub i32 63, %1
  %49 = icmp ule i32 %48, 63
  br i1 %49, label %61, label %62

50:                                               ; preds = %61
  %51 = trunc i32 %1 to i6
  %52 = zext i6 %51 to i64
  %53 = ashr i64 %47, %52
  store i64 %53, ptr %44, align 8
  %54 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %55 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %54, i32 0, i32 0
  %56 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %57 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %56, i32 0, i32 1
  %58 = load i64, ptr %57, align 8
  %59 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 64, i32 %1)
  %60 = extractvalue { i32, i1 } %59, 1
  br i1 %60, label %63, label %64

61:                                               ; preds = %42
  br label %50

62:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @17)
  unreachable

63:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

64:                                               ; preds = %50
  %65 = extractvalue { i32, i1 } %59, 0
  %66 = sub i32 63, %65
  %67 = icmp ule i32 %66, 63
  br i1 %67, label %80, label %81

68:                                               ; preds = %80
  %69 = trunc i32 %65 to i6
  %70 = zext i6 %69 to i64
  %71 = shl i64 %58, %70
  store i64 %71, ptr %55, align 8
  %72 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %73 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %72, i32 0, i32 0
  %74 = load i64, ptr %73, align 8
  %75 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %76 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %75, i32 0, i32 0
  %77 = load i64, ptr %76, align 8
  %78 = sub i32 63, %1
  %79 = icmp ule i32 %78, 63
  br i1 %79, label %87, label %88

80:                                               ; preds = %64
  br label %68

81:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @17)
  unreachable

82:                                               ; preds = %87
  %83 = trunc i32 %1 to i6
  %84 = zext i6 %83 to i64
  %85 = lshr i64 %77, %84
  %86 = or i64 %74, %85
  store i64 %86, ptr %73, align 8
  br label %40

87:                                               ; preds = %68
  br label %82

88:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @17)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__lshrti3(i128 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  store i128 %0, ptr %6, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %7 = icmp sge i32 %1, 64
  br i1 %7, label %13, label %23

8:                                                ; preds = %37, %10
  %9 = phi i128 [ %0, %37 ], [ %12, %10 ]
  ret i128 %9

10:                                               ; preds = %36, %30
  %11 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %12 = load i128, ptr %11, align 16
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %14, i32 0, i32 1
  store i64 0, ptr %15, align 8
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %16, i32 0, i32 0
  %18 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %18, i32 0, i32 1
  %20 = load i64, ptr %19, align 8
  %21 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 64)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %37, label %38

25:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %13
  %27 = extractvalue { i32, i1 } %21, 0
  %28 = sub i32 63, %27
  %29 = icmp ule i32 %28, 63
  br i1 %29, label %34, label %35

30:                                               ; preds = %34
  %31 = trunc i32 %27 to i6
  %32 = zext i6 %31 to i64
  %33 = lshr i64 %20, %32
  store i64 %33, ptr %17, align 8
  br label %10

34:                                               ; preds = %26
  br label %30

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @18)
  unreachable

36:                                               ; preds = %78
  br label %10

37:                                               ; preds = %23
  br label %8

38:                                               ; preds = %23
  %39 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %40 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %39, i32 0, i32 1
  %41 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %42 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %41, i32 0, i32 1
  %43 = load i64, ptr %42, align 8
  %44 = sub i32 63, %1
  %45 = icmp ule i32 %44, 63
  br i1 %45, label %57, label %58

46:                                               ; preds = %57
  %47 = trunc i32 %1 to i6
  %48 = zext i6 %47 to i64
  %49 = lshr i64 %43, %48
  store i64 %49, ptr %40, align 8
  %50 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %50, i32 0, i32 0
  %52 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %52, i32 0, i32 1
  %54 = load i64, ptr %53, align 8
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 64, i32 %1)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %59, label %60

57:                                               ; preds = %38
  br label %46

58:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @18)
  unreachable

59:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %46
  %61 = extractvalue { i32, i1 } %55, 0
  %62 = sub i32 63, %61
  %63 = icmp ule i32 %62, 63
  br i1 %63, label %76, label %77

64:                                               ; preds = %76
  %65 = trunc i32 %61 to i6
  %66 = zext i6 %65 to i64
  %67 = shl i64 %54, %66
  store i64 %67, ptr %51, align 8
  %68 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %69 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %68, i32 0, i32 0
  %70 = load i64, ptr %69, align 8
  %71 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %72 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %71, i32 0, i32 0
  %73 = load i64, ptr %72, align 8
  %74 = sub i32 63, %1
  %75 = icmp ule i32 %74, 63
  br i1 %75, label %83, label %84

76:                                               ; preds = %60
  br label %64

77:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @18)
  unreachable

78:                                               ; preds = %83
  %79 = trunc i32 %1 to i6
  %80 = zext i6 %79 to i64
  %81 = lshr i64 %73, %80
  %82 = or i64 %70, %81
  store i64 %82, ptr %69, align 8
  br label %36

83:                                               ; preds = %64
  br label %78

84:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @18)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__ashldi3(i64 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %5 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %6 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  store i64 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %7 = icmp sge i32 %1, 32
  br i1 %7, label %13, label %23

8:                                                ; preds = %37, %10
  %9 = phi i64 [ %0, %37 ], [ %12, %10 ]
  ret i64 %9

10:                                               ; preds = %36, %30
  %11 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %12 = load i64, ptr %11, align 8
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %14, i32 0, i32 0
  store i32 0, ptr %15, align 4
  %16 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %16, i32 0, i32 1
  %18 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %18, i32 0, i32 0
  %20 = load i32, ptr %19, align 4
  %21 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 32)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %37, label %38

25:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %13
  %27 = extractvalue { i32, i1 } %21, 0
  %28 = sub i32 31, %27
  %29 = icmp ule i32 %28, 31
  br i1 %29, label %34, label %35

30:                                               ; preds = %34
  %31 = trunc i32 %27 to i5
  %32 = zext i5 %31 to i32
  %33 = shl i32 %20, %32
  store i32 %33, ptr %17, align 4
  br label %10

34:                                               ; preds = %26
  br label %30

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @19)
  unreachable

36:                                               ; preds = %78
  br label %10

37:                                               ; preds = %23
  br label %8

38:                                               ; preds = %23
  %39 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %40 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %39, i32 0, i32 0
  %41 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %42 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %41, i32 0, i32 0
  %43 = load i32, ptr %42, align 4
  %44 = sub i32 31, %1
  %45 = icmp ule i32 %44, 31
  br i1 %45, label %57, label %58

46:                                               ; preds = %57
  %47 = trunc i32 %1 to i5
  %48 = zext i5 %47 to i32
  %49 = shl i32 %43, %48
  store i32 %49, ptr %40, align 4
  %50 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %50, i32 0, i32 1
  %52 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %52, i32 0, i32 1
  %54 = load i32, ptr %53, align 4
  %55 = sub i32 31, %1
  %56 = icmp ule i32 %55, 31
  br i1 %56, label %71, label %72

57:                                               ; preds = %38
  br label %46

58:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @19)
  unreachable

59:                                               ; preds = %71
  %60 = trunc i32 %1 to i5
  %61 = zext i5 %60 to i32
  %62 = shl i32 %54, %61
  store i32 %62, ptr %51, align 4
  %63 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %64 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %63, i32 0, i32 1
  %65 = load i32, ptr %64, align 4
  %66 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %67 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %66, i32 0, i32 0
  %68 = load i32, ptr %67, align 4
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32, i32 %1)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %46
  br label %59

72:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @19)
  unreachable

73:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %59
  %75 = extractvalue { i32, i1 } %69, 0
  %76 = sub i32 31, %75
  %77 = icmp ule i32 %76, 31
  br i1 %77, label %83, label %84

78:                                               ; preds = %83
  %79 = trunc i32 %75 to i5
  %80 = zext i5 %79 to i32
  %81 = lshr i32 %68, %80
  %82 = or i32 %65, %81
  store i32 %82, ptr %64, align 4
  br label %36

83:                                               ; preds = %74
  br label %78

84:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @19)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__ashrdi3(i64 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %5 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %6 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  store i64 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %7 = icmp sge i32 %1, 32
  br i1 %7, label %13, label %27

8:                                                ; preds = %41, %10
  %9 = phi i64 [ %0, %41 ], [ %12, %10 ]
  ret i64 %9

10:                                               ; preds = %40, %34
  %11 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %12 = load i64, ptr %11, align 8
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %14, i32 0, i32 1
  %16 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %16, i32 0, i32 1
  %18 = load i32, ptr %17, align 4
  %19 = ashr i32 %18, 31
  store i32 %19, ptr %15, align 4
  %20 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %21 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %20, i32 0, i32 0
  %22 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %22, i32 0, i32 1
  %24 = load i32, ptr %23, align 4
  %25 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 32)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %29, label %30

27:                                               ; preds = %2
  %28 = icmp eq i32 %1, 0
  br i1 %28, label %41, label %42

29:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

30:                                               ; preds = %13
  %31 = extractvalue { i32, i1 } %25, 0
  %32 = sub i32 31, %31
  %33 = icmp ule i32 %32, 31
  br i1 %33, label %38, label %39

34:                                               ; preds = %38
  %35 = trunc i32 %31 to i5
  %36 = zext i5 %35 to i32
  %37 = ashr i32 %24, %36
  store i32 %37, ptr %21, align 4
  br label %10

38:                                               ; preds = %30
  br label %34

39:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @20)
  unreachable

40:                                               ; preds = %82
  br label %10

41:                                               ; preds = %27
  br label %8

42:                                               ; preds = %27
  %43 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %44 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %43, i32 0, i32 1
  %45 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %46 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %45, i32 0, i32 1
  %47 = load i32, ptr %46, align 4
  %48 = sub i32 31, %1
  %49 = icmp ule i32 %48, 31
  br i1 %49, label %61, label %62

50:                                               ; preds = %61
  %51 = trunc i32 %1 to i5
  %52 = zext i5 %51 to i32
  %53 = ashr i32 %47, %52
  store i32 %53, ptr %44, align 4
  %54 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %55 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %54, i32 0, i32 0
  %56 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %57 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %56, i32 0, i32 1
  %58 = load i32, ptr %57, align 4
  %59 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32, i32 %1)
  %60 = extractvalue { i32, i1 } %59, 1
  br i1 %60, label %63, label %64

61:                                               ; preds = %42
  br label %50

62:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @20)
  unreachable

63:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

64:                                               ; preds = %50
  %65 = extractvalue { i32, i1 } %59, 0
  %66 = sub i32 31, %65
  %67 = icmp ule i32 %66, 31
  br i1 %67, label %80, label %81

68:                                               ; preds = %80
  %69 = trunc i32 %65 to i5
  %70 = zext i5 %69 to i32
  %71 = shl i32 %58, %70
  store i32 %71, ptr %55, align 4
  %72 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %73 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %72, i32 0, i32 0
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %76 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %75, i32 0, i32 0
  %77 = load i32, ptr %76, align 4
  %78 = sub i32 31, %1
  %79 = icmp ule i32 %78, 31
  br i1 %79, label %87, label %88

80:                                               ; preds = %64
  br label %68

81:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @20)
  unreachable

82:                                               ; preds = %87
  %83 = trunc i32 %1 to i5
  %84 = zext i5 %83 to i32
  %85 = lshr i32 %77, %84
  %86 = or i32 %74, %85
  store i32 %86, ptr %73, align 4
  br label %40

87:                                               ; preds = %68
  br label %82

88:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @20)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__lshrdi3(i64 %0, i32 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %5 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %6 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  store i64 %0, ptr %6, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %7 = icmp sge i32 %1, 32
  br i1 %7, label %13, label %23

8:                                                ; preds = %37, %10
  %9 = phi i64 [ %0, %37 ], [ %12, %10 ]
  ret i64 %9

10:                                               ; preds = %36, %30
  %11 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %12 = load i64, ptr %11, align 8
  br label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %14, i32 0, i32 1
  store i32 0, ptr %15, align 4
  %16 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %16, i32 0, i32 0
  %18 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %18, i32 0, i32 1
  %20 = load i32, ptr %19, align 4
  %21 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 32)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %37, label %38

25:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %13
  %27 = extractvalue { i32, i1 } %21, 0
  %28 = sub i32 31, %27
  %29 = icmp ule i32 %28, 31
  br i1 %29, label %34, label %35

30:                                               ; preds = %34
  %31 = trunc i32 %27 to i5
  %32 = zext i5 %31 to i32
  %33 = lshr i32 %20, %32
  store i32 %33, ptr %17, align 4
  br label %10

34:                                               ; preds = %26
  br label %30

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @21)
  unreachable

36:                                               ; preds = %78
  br label %10

37:                                               ; preds = %23
  br label %8

38:                                               ; preds = %23
  %39 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %40 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %39, i32 0, i32 1
  %41 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %42 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %41, i32 0, i32 1
  %43 = load i32, ptr %42, align 4
  %44 = sub i32 31, %1
  %45 = icmp ule i32 %44, 31
  br i1 %45, label %57, label %58

46:                                               ; preds = %57
  %47 = trunc i32 %1 to i5
  %48 = zext i5 %47 to i32
  %49 = lshr i32 %43, %48
  store i32 %49, ptr %40, align 4
  %50 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %51 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %50, i32 0, i32 0
  %52 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %52, i32 0, i32 1
  %54 = load i32, ptr %53, align 4
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32, i32 %1)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %59, label %60

57:                                               ; preds = %38
  br label %46

58:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @21)
  unreachable

59:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %46
  %61 = extractvalue { i32, i1 } %55, 0
  %62 = sub i32 31, %61
  %63 = icmp ule i32 %62, 31
  br i1 %63, label %76, label %77

64:                                               ; preds = %76
  %65 = trunc i32 %61 to i5
  %66 = zext i5 %65 to i32
  %67 = shl i32 %54, %66
  store i32 %67, ptr %51, align 4
  %68 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %69 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %68, i32 0, i32 0
  %70 = load i32, ptr %69, align 4
  %71 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %72 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %71, i32 0, i32 0
  %73 = load i32, ptr %72, align 4
  %74 = sub i32 31, %1
  %75 = icmp ule i32 %74, 31
  br i1 %75, label %83, label %84

76:                                               ; preds = %60
  br label %64

77:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @21)
  unreachable

78:                                               ; preds = %83
  %79 = trunc i32 %1 to i5
  %80 = zext i5 %79 to i32
  %81 = lshr i32 %73, %80
  %82 = or i32 %70, %81
  store i32 %82, ptr %69, align 4
  br label %36

83:                                               ; preds = %64
  br label %78

84:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @21)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__negsi2(i32 %0) #0 {
  %2 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %0)
  %3 = extractvalue { i32, i1 } %2, 1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

5:                                                ; preds = %1
  %6 = extractvalue { i32, i1 } %2, 0
  ret i32 %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__negdi2(i64 %0) #0 {
  %2 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %0)
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

5:                                                ; preds = %1
  %6 = extractvalue { i64, i1 } %2, 0
  ret i64 %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__negti2(i128 %0) #0 {
  %2 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 0, i128 %0)
  %3 = extractvalue { i128, i1 } %2, 1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

5:                                                ; preds = %1
  %6 = extractvalue { i128, i1 } %2, 0
  ret i128 %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__divmodti4(i128 %0, i128 %1, ptr nonnull align 16 %2) #0 {
  %4 = call i128 @__divti3(i128 %0, i128 %1)
  %5 = call fastcc { i128, i1 } @llvm.smul.with.overflow.i128(i128 %4, i128 %1)
  %6 = extractvalue { i128, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %3
  %9 = extractvalue { i128, i1 } %5, 0
  %10 = sub i128 %0, %9
  store i128 %10, ptr %2, align 16
  ret i128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__divti3(i128 %0, i128 %1) #0 {
  %3 = ashr i128 %0, 127
  %4 = ashr i128 %1, 127
  %5 = xor i128 %0, %3
  %6 = sub i128 %5, %3
  %7 = xor i128 %1, %4
  %8 = sub i128 %7, %4
  %9 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3537(i128 %6, i128 %8, ptr align 16 null)
  %10 = xor i128 %3, %4
  %11 = xor i128 %9, %10
  %12 = sub i128 %11, %10
  ret i128 %12
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i128, i1 } @llvm.smul.with.overflow.i128(i128, i128) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.udivmod.udivmod__anon_3537(i128 %0, i128 %1, ptr align 16 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca i64, align 8
  %6 = alloca i128, align 16
  %7 = alloca i128, align 16
  %8 = alloca i7, align 1
  %9 = alloca [2 x i64], align 8
  %10 = alloca [2 x i64], align 8
  %11 = alloca [2 x i64], align 16
  %12 = alloca [2 x i64], align 8
  %13 = alloca [2 x i64], align 16
  %14 = alloca [2 x i64], align 8
  %15 = icmp ugt i128 %1, %0
  br i1 %15, label %20, label %22

16:                                               ; preds = %22
  store i128 %0, ptr %13, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr align 8 %13, i64 16, i1 false)
  store i128 %1, ptr %11, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %11, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 undef, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 undef, i64 16, i1 false)
  %17 = getelementptr inbounds [2 x i64], ptr %12, i64 0, i64 1
  %18 = load i64, ptr %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %44, label %51

20:                                               ; preds = %3
  %21 = icmp ne ptr %2, null
  br i1 %21, label %24, label %25

22:                                               ; preds = %3
  br label %16

23:                                               ; preds = %25, %24
  ret i128 0

24:                                               ; preds = %20
  store i128 %0, ptr %2, align 16
  br label %23

25:                                               ; preds = %20
  br label %23

26:                                               ; preds = %51
  %27 = getelementptr inbounds [2 x i64], ptr %12, i64 0, i64 1
  %28 = load i64, ptr %27, align 8
  %29 = call i64 @llvm.ctlz.i64(i64 %28, i1 false)
  %30 = trunc i64 %29 to i7
  %31 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 1
  %32 = load i64, ptr %31, align 8
  %33 = call i64 @llvm.ctlz.i64(i64 %32, i1 false)
  %34 = trunc i64 %33 to i7
  %35 = sub nuw i7 %30, %34
  store i7 %35, ptr %8, align 1
  %36 = load i128, ptr %14, align 8
  store i128 %36, ptr %7, align 16
  %37 = load i128, ptr %12, align 8
  %38 = load i7, ptr %8, align 1
  %39 = zext i7 %38 to i128
  %40 = shl i128 %37, %39
  store i128 %40, ptr %6, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 @122, i64 16, i1 false)
  store i64 0, ptr %5, align 8
  %41 = load i7, ptr %8, align 1
  %42 = add nuw i7 %41, 1
  %43 = zext i7 %42 to i64
  br label %91

44:                                               ; preds = %16
  %45 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 1
  store i64 0, ptr %45, align 8
  %46 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 1
  %47 = load i64, ptr %46, align 8
  %48 = getelementptr inbounds [2 x i64], ptr %12, i64 0, i64 0
  %49 = load i64, ptr %48, align 8
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %54, label %65

51:                                               ; preds = %16
  br label %26

52:                                               ; preds = %65, %54
  %53 = icmp ne ptr %2, null
  br i1 %53, label %86, label %88

54:                                               ; preds = %44
  %55 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 1
  store i64 0, ptr %55, align 8
  %56 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 0
  %57 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 1
  %58 = load i64, ptr %57, align 8
  %59 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 0
  %60 = load i64, ptr %59, align 8
  %61 = getelementptr inbounds [2 x i64], ptr %12, i64 0, i64 0
  %62 = load i64, ptr %61, align 8
  %63 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 0
  %64 = call fastcc i64 @compiler_rt.udivmod.divwide__anon_5826(i64 %58, i64 %60, i64 %62, ptr nonnull align 8 %63)
  store i64 %64, ptr %56, align 8
  br label %52

65:                                               ; preds = %44
  %66 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 1
  %67 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 1
  %68 = load i64, ptr %67, align 8
  %69 = getelementptr inbounds [2 x i64], ptr %12, i64 0, i64 0
  %70 = load i64, ptr %69, align 8
  %71 = udiv i64 %68, %70
  store i64 %71, ptr %66, align 8
  %72 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 0
  %73 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 1
  %74 = load i64, ptr %73, align 8
  %75 = getelementptr inbounds [2 x i64], ptr %12, i64 0, i64 0
  %76 = load i64, ptr %75, align 8
  %77 = urem i64 %74, %76
  %78 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 0
  %79 = load i64, ptr %78, align 8
  %80 = getelementptr inbounds [2 x i64], ptr %12, i64 0, i64 0
  %81 = load i64, ptr %80, align 8
  %82 = getelementptr inbounds [2 x i64], ptr %9, i64 0, i64 0
  %83 = call fastcc i64 @compiler_rt.udivmod.divwide__anon_5826(i64 %77, i64 %79, i64 %81, ptr nonnull align 8 %82)
  store i64 %83, ptr %72, align 8
  br label %52

84:                                               ; preds = %88, %86
  %85 = load i128, ptr %10, align 8
  ret i128 %85

86:                                               ; preds = %52
  %87 = load i128, ptr %9, align 8
  store i128 %87, ptr %2, align 16
  br label %84

88:                                               ; preds = %52
  br label %84

89:                                               ; preds = %116
  %90 = icmp ne ptr %2, null
  br i1 %90, label %119, label %121

91:                                               ; preds = %94, %26
  %92 = load i64, ptr %5, align 8
  %93 = icmp ult i64 %92, %43
  br i1 %93, label %96, label %116

94:                                               ; preds = %96
  %95 = add nuw i64 %92, 1
  store i64 %95, ptr %5, align 8
  br label %91

96:                                               ; preds = %91
  %97 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 0
  %98 = load i64, ptr %97, align 8
  %99 = shl i64 %98, 1
  store i64 %99, ptr %97, align 8
  %100 = load i128, ptr %6, align 16
  %101 = load i128, ptr %7, align 16
  %102 = sub i128 %100, %101
  %103 = sub i128 %102, 1
  %104 = ashr i128 %103, 127
  %105 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 0
  %106 = load i64, ptr %105, align 8
  %107 = and i128 %104, 1
  %108 = trunc i128 %107 to i64
  %109 = or i64 %106, %108
  store i64 %109, ptr %105, align 8
  %110 = load i128, ptr %7, align 16
  %111 = load i128, ptr %6, align 16
  %112 = and i128 %111, %104
  %113 = sub nuw i128 %110, %112
  store i128 %113, ptr %7, align 16
  %114 = load i128, ptr %6, align 16
  %115 = lshr i128 %114, 1
  store i128 %115, ptr %6, align 16
  br label %94

116:                                              ; preds = %91
  br label %89

117:                                              ; preds = %121, %119
  %118 = load i128, ptr %10, align 8
  ret i128 %118

119:                                              ; preds = %89
  %120 = load i128, ptr %7, align 16
  store i128 %120, ptr %2, align 16
  br label %117

121:                                              ; preds = %89
  br label %117
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.udivmod.divwide__anon_5826(i64 %0, i64 %1, i64 %2, ptr nonnull align 8 %3) unnamed_addr #0 {
  %5 = call fastcc i64 @compiler_rt.udivmod.divwide_generic__anon_6704(i64 %0, i64 %1, i64 %2, ptr nonnull align 8 %3)
  ret i64 %5
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.udivmod.divwide_generic__anon_6704(i64 %0, i64 %1, i64 %2, ptr nonnull align 8 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64 %2, ptr %12, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 undef, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 undef, i64 8, i1 false)
  %13 = load i64, ptr %12, align 8
  %14 = call i64 @llvm.ctlz.i64(i64 %13, i1 false)
  %15 = trunc i64 %14 to i7
  %16 = trunc i7 %15 to i6
  %17 = icmp ugt i6 %16, 0
  br i1 %17, label %33, label %47

18:                                               ; preds = %47, %33
  %19 = load i64, ptr %12, align 8
  %20 = lshr i64 %19, 32
  %21 = load i64, ptr %12, align 8
  %22 = and i64 %21, 4294967295
  %23 = load i64, ptr %10, align 8
  %24 = lshr i64 %23, 32
  %25 = load i64, ptr %10, align 8
  %26 = and i64 %25, 4294967295
  %27 = load i64, ptr %11, align 8
  %28 = udiv i64 %27, %20
  store i64 %28, ptr %9, align 8
  %29 = load i64, ptr %11, align 8
  %30 = load i64, ptr %9, align 8
  %31 = mul i64 %30, %20
  %32 = sub i64 %29, %31
  store i64 %32, ptr %8, align 8
  br label %62

33:                                               ; preds = %4
  %34 = load i64, ptr %12, align 8
  %35 = zext i6 %16 to i64
  %36 = shl i64 %34, %35
  store i64 %36, ptr %12, align 8
  %37 = zext i6 %16 to i64
  %38 = shl i64 %0, %37
  %39 = zext i6 %16 to i64
  %40 = sub nuw i64 64, %39
  %41 = trunc i64 %40 to i6
  %42 = zext i6 %41 to i64
  %43 = lshr i64 %1, %42
  %44 = or i64 %38, %43
  store i64 %44, ptr %11, align 8
  %45 = zext i6 %16 to i64
  %46 = shl i64 %1, %45
  store i64 %46, ptr %10, align 8
  br label %18

47:                                               ; preds = %4
  store i64 %0, ptr %11, align 8
  store i64 %1, ptr %10, align 8
  br label %18

48:                                               ; preds = %85, %83
  %49 = load i64, ptr %11, align 8
  %50 = mul i64 %49, 4294967296
  %51 = add i64 %50, %24
  %52 = load i64, ptr %9, align 8
  %53 = load i64, ptr %12, align 8
  %54 = mul i64 %52, %53
  %55 = sub i64 %51, %54
  store i64 %55, ptr %7, align 8
  %56 = load i64, ptr %7, align 8
  %57 = udiv i64 %56, %20
  store i64 %57, ptr %6, align 8
  %58 = load i64, ptr %7, align 8
  %59 = load i64, ptr %6, align 8
  %60 = mul i64 %59, %20
  %61 = sub i64 %58, %60
  store i64 %61, ptr %8, align 8
  br label %101

62:                                               ; preds = %65, %18
  %63 = load i64, ptr %9, align 8
  %64 = icmp uge i64 %63, 4294967296
  br i1 %64, label %68, label %69

65:                                               ; preds = %84
  br label %62

66:                                               ; preds = %69, %68
  %67 = phi i1 [ true, %68 ], [ %75, %69 ]
  br i1 %67, label %76, label %83

68:                                               ; preds = %62
  br label %66

69:                                               ; preds = %62
  %70 = load i64, ptr %9, align 8
  %71 = mul nuw i64 %70, %22
  %72 = load i64, ptr %8, align 8
  %73 = mul nuw i64 4294967296, %72
  %74 = add nuw i64 %73, %24
  %75 = icmp ugt i64 %71, %74
  br label %66

76:                                               ; preds = %66
  %77 = load i64, ptr %9, align 8
  %78 = sub nuw i64 %77, 1
  store i64 %78, ptr %9, align 8
  %79 = load i64, ptr %8, align 8
  %80 = add nuw i64 %79, %20
  store i64 %80, ptr %8, align 8
  %81 = load i64, ptr %8, align 8
  %82 = icmp uge i64 %81, 4294967296
  br i1 %82, label %85, label %86

83:                                               ; preds = %66
  br label %48

84:                                               ; preds = %86
  br label %65

85:                                               ; preds = %76
  br label %48

86:                                               ; preds = %76
  br label %84

87:                                               ; preds = %124, %122
  %88 = load i64, ptr %7, align 8
  %89 = mul i64 %88, 4294967296
  %90 = add i64 %89, %26
  %91 = load i64, ptr %6, align 8
  %92 = load i64, ptr %12, align 8
  %93 = mul i64 %91, %92
  %94 = sub i64 %90, %93
  %95 = zext i6 %16 to i64
  %96 = lshr i64 %94, %95
  store i64 %96, ptr %3, align 8
  %97 = load i64, ptr %9, align 8
  %98 = mul i64 %97, 4294967296
  %99 = load i64, ptr %6, align 8
  %100 = add i64 %98, %99
  ret i64 %100

101:                                              ; preds = %104, %48
  %102 = load i64, ptr %6, align 8
  %103 = icmp uge i64 %102, 4294967296
  br i1 %103, label %107, label %108

104:                                              ; preds = %123
  br label %101

105:                                              ; preds = %108, %107
  %106 = phi i1 [ true, %107 ], [ %114, %108 ]
  br i1 %106, label %115, label %122

107:                                              ; preds = %101
  br label %105

108:                                              ; preds = %101
  %109 = load i64, ptr %6, align 8
  %110 = mul nuw i64 %109, %22
  %111 = load i64, ptr %8, align 8
  %112 = mul nuw i64 4294967296, %111
  %113 = add nuw i64 %112, %26
  %114 = icmp ugt i64 %110, %113
  br label %105

115:                                              ; preds = %105
  %116 = load i64, ptr %6, align 8
  %117 = sub nuw i64 %116, 1
  store i64 %117, ptr %6, align 8
  %118 = load i64, ptr %8, align 8
  %119 = add nuw i64 %118, %20
  store i64 %119, ptr %8, align 8
  %120 = load i64, ptr %8, align 8
  %121 = icmp uge i64 %120, 4294967296
  br i1 %121, label %124, label %125

122:                                              ; preds = %105
  br label %87

123:                                              ; preds = %125
  br label %104

124:                                              ; preds = %115
  br label %87

125:                                              ; preds = %115
  br label %123
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__udivmoddi4(i64 %0, i64 %1, ptr align 8 %2) #0 {
  %4 = call fastcc i64 @compiler_rt.udivmod.udivmod__anon_3530(i64 %0, i64 %1, ptr align 8 %2)
  ret i64 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.udivmod.udivmod__anon_3530(i64 %0, i64 %1, ptr align 8 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i6, align 1
  %9 = alloca [2 x i32], align 4
  %10 = alloca [2 x i32], align 4
  %11 = alloca [2 x i32], align 8
  %12 = alloca [2 x i32], align 4
  %13 = alloca [2 x i32], align 8
  %14 = alloca [2 x i32], align 4
  %15 = icmp ugt i64 %1, %0
  br i1 %15, label %20, label %22

16:                                               ; preds = %22
  store i64 %0, ptr %13, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %14, ptr align 4 %13, i64 8, i1 false)
  store i64 %1, ptr %11, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %12, ptr align 4 %11, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %10, i8 undef, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %9, i8 undef, i64 8, i1 false)
  %17 = getelementptr inbounds [2 x i32], ptr %12, i64 0, i64 1
  %18 = load i32, ptr %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %44, label %51

20:                                               ; preds = %3
  %21 = icmp ne ptr %2, null
  br i1 %21, label %24, label %25

22:                                               ; preds = %3
  br label %16

23:                                               ; preds = %25, %24
  ret i64 0

24:                                               ; preds = %20
  store i64 %0, ptr %2, align 8
  br label %23

25:                                               ; preds = %20
  br label %23

26:                                               ; preds = %51
  %27 = getelementptr inbounds [2 x i32], ptr %12, i64 0, i64 1
  %28 = load i32, ptr %27, align 4
  %29 = call i32 @llvm.ctlz.i32(i32 %28, i1 false)
  %30 = trunc i32 %29 to i6
  %31 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 1
  %32 = load i32, ptr %31, align 4
  %33 = call i32 @llvm.ctlz.i32(i32 %32, i1 false)
  %34 = trunc i32 %33 to i6
  %35 = sub nuw i6 %30, %34
  store i6 %35, ptr %8, align 1
  %36 = load i64, ptr %14, align 4
  store i64 %36, ptr %7, align 8
  %37 = load i64, ptr %12, align 4
  %38 = load i6, ptr %8, align 1
  %39 = zext i6 %38 to i64
  %40 = shl i64 %37, %39
  store i64 %40, ptr %6, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %10, ptr align 4 @121, i64 8, i1 false)
  store i64 0, ptr %5, align 8
  %41 = load i6, ptr %8, align 1
  %42 = add nuw i6 %41, 1
  %43 = zext i6 %42 to i64
  br label %91

44:                                               ; preds = %16
  %45 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 1
  store i32 0, ptr %45, align 4
  %46 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 1
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr inbounds [2 x i32], ptr %12, i64 0, i64 0
  %49 = load i32, ptr %48, align 4
  %50 = icmp ult i32 %47, %49
  br i1 %50, label %54, label %65

51:                                               ; preds = %16
  br label %26

52:                                               ; preds = %65, %54
  %53 = icmp ne ptr %2, null
  br i1 %53, label %86, label %88

54:                                               ; preds = %44
  %55 = getelementptr inbounds [2 x i32], ptr %10, i64 0, i64 1
  store i32 0, ptr %55, align 4
  %56 = getelementptr inbounds [2 x i32], ptr %10, i64 0, i64 0
  %57 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 1
  %58 = load i32, ptr %57, align 4
  %59 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 0
  %60 = load i32, ptr %59, align 4
  %61 = getelementptr inbounds [2 x i32], ptr %12, i64 0, i64 0
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 0
  %64 = call fastcc i32 @compiler_rt.udivmod.divwide__anon_5820(i32 %58, i32 %60, i32 %62, ptr nonnull align 4 %63)
  store i32 %64, ptr %56, align 4
  br label %52

65:                                               ; preds = %44
  %66 = getelementptr inbounds [2 x i32], ptr %10, i64 0, i64 1
  %67 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 1
  %68 = load i32, ptr %67, align 4
  %69 = getelementptr inbounds [2 x i32], ptr %12, i64 0, i64 0
  %70 = load i32, ptr %69, align 4
  %71 = udiv i32 %68, %70
  store i32 %71, ptr %66, align 4
  %72 = getelementptr inbounds [2 x i32], ptr %10, i64 0, i64 0
  %73 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 1
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr inbounds [2 x i32], ptr %12, i64 0, i64 0
  %76 = load i32, ptr %75, align 4
  %77 = urem i32 %74, %76
  %78 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 0
  %79 = load i32, ptr %78, align 4
  %80 = getelementptr inbounds [2 x i32], ptr %12, i64 0, i64 0
  %81 = load i32, ptr %80, align 4
  %82 = getelementptr inbounds [2 x i32], ptr %9, i64 0, i64 0
  %83 = call fastcc i32 @compiler_rt.udivmod.divwide__anon_5820(i32 %77, i32 %79, i32 %81, ptr nonnull align 4 %82)
  store i32 %83, ptr %72, align 4
  br label %52

84:                                               ; preds = %88, %86
  %85 = load i64, ptr %10, align 4
  ret i64 %85

86:                                               ; preds = %52
  %87 = load i64, ptr %9, align 4
  store i64 %87, ptr %2, align 8
  br label %84

88:                                               ; preds = %52
  br label %84

89:                                               ; preds = %116
  %90 = icmp ne ptr %2, null
  br i1 %90, label %119, label %121

91:                                               ; preds = %94, %26
  %92 = load i64, ptr %5, align 8
  %93 = icmp ult i64 %92, %43
  br i1 %93, label %96, label %116

94:                                               ; preds = %96
  %95 = add nuw i64 %92, 1
  store i64 %95, ptr %5, align 8
  br label %91

96:                                               ; preds = %91
  %97 = getelementptr inbounds [2 x i32], ptr %10, i64 0, i64 0
  %98 = load i32, ptr %97, align 4
  %99 = shl i32 %98, 1
  store i32 %99, ptr %97, align 4
  %100 = load i64, ptr %6, align 8
  %101 = load i64, ptr %7, align 8
  %102 = sub i64 %100, %101
  %103 = sub i64 %102, 1
  %104 = ashr i64 %103, 63
  %105 = getelementptr inbounds [2 x i32], ptr %10, i64 0, i64 0
  %106 = load i32, ptr %105, align 4
  %107 = and i64 %104, 1
  %108 = trunc i64 %107 to i32
  %109 = or i32 %106, %108
  store i32 %109, ptr %105, align 4
  %110 = load i64, ptr %7, align 8
  %111 = load i64, ptr %6, align 8
  %112 = and i64 %111, %104
  %113 = sub nuw i64 %110, %112
  store i64 %113, ptr %7, align 8
  %114 = load i64, ptr %6, align 8
  %115 = lshr i64 %114, 1
  store i64 %115, ptr %6, align 8
  br label %94

116:                                              ; preds = %91
  br label %89

117:                                              ; preds = %121, %119
  %118 = load i64, ptr %10, align 4
  ret i64 %118

119:                                              ; preds = %89
  %120 = load i64, ptr %7, align 8
  store i64 %120, ptr %2, align 8
  br label %117

121:                                              ; preds = %89
  br label %117
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.udivmod.divwide__anon_5820(i32 %0, i32 %1, i32 %2, ptr nonnull align 4 %3) unnamed_addr #0 {
  %5 = call fastcc i32 @compiler_rt.udivmod.divwide_generic__anon_6703(i32 %0, i32 %1, i32 %2, ptr nonnull align 4 %3)
  ret i32 %5
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.udivmod.divwide_generic__anon_6703(i32 %0, i32 %1, i32 %2, ptr nonnull align 4 %3) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 %2, ptr %12, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %11, i8 undef, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %10, i8 undef, i64 4, i1 false)
  %13 = load i32, ptr %12, align 4
  %14 = call i32 @llvm.ctlz.i32(i32 %13, i1 false)
  %15 = trunc i32 %14 to i6
  %16 = trunc i6 %15 to i5
  %17 = icmp ugt i5 %16, 0
  br i1 %17, label %33, label %47

18:                                               ; preds = %47, %33
  %19 = load i32, ptr %12, align 4
  %20 = lshr i32 %19, 16
  %21 = load i32, ptr %12, align 4
  %22 = and i32 %21, 65535
  %23 = load i32, ptr %10, align 4
  %24 = lshr i32 %23, 16
  %25 = load i32, ptr %10, align 4
  %26 = and i32 %25, 65535
  %27 = load i32, ptr %11, align 4
  %28 = udiv i32 %27, %20
  store i32 %28, ptr %9, align 4
  %29 = load i32, ptr %11, align 4
  %30 = load i32, ptr %9, align 4
  %31 = mul i32 %30, %20
  %32 = sub i32 %29, %31
  store i32 %32, ptr %8, align 4
  br label %62

33:                                               ; preds = %4
  %34 = load i32, ptr %12, align 4
  %35 = zext i5 %16 to i32
  %36 = shl i32 %34, %35
  store i32 %36, ptr %12, align 4
  %37 = zext i5 %16 to i32
  %38 = shl i32 %0, %37
  %39 = zext i5 %16 to i32
  %40 = sub nuw i32 32, %39
  %41 = trunc i32 %40 to i5
  %42 = zext i5 %41 to i32
  %43 = lshr i32 %1, %42
  %44 = or i32 %38, %43
  store i32 %44, ptr %11, align 4
  %45 = zext i5 %16 to i32
  %46 = shl i32 %1, %45
  store i32 %46, ptr %10, align 4
  br label %18

47:                                               ; preds = %4
  store i32 %0, ptr %11, align 4
  store i32 %1, ptr %10, align 4
  br label %18

48:                                               ; preds = %85, %83
  %49 = load i32, ptr %11, align 4
  %50 = mul i32 %49, 65536
  %51 = add i32 %50, %24
  %52 = load i32, ptr %9, align 4
  %53 = load i32, ptr %12, align 4
  %54 = mul i32 %52, %53
  %55 = sub i32 %51, %54
  store i32 %55, ptr %7, align 4
  %56 = load i32, ptr %7, align 4
  %57 = udiv i32 %56, %20
  store i32 %57, ptr %6, align 4
  %58 = load i32, ptr %7, align 4
  %59 = load i32, ptr %6, align 4
  %60 = mul i32 %59, %20
  %61 = sub i32 %58, %60
  store i32 %61, ptr %8, align 4
  br label %101

62:                                               ; preds = %65, %18
  %63 = load i32, ptr %9, align 4
  %64 = icmp uge i32 %63, 65536
  br i1 %64, label %68, label %69

65:                                               ; preds = %84
  br label %62

66:                                               ; preds = %69, %68
  %67 = phi i1 [ true, %68 ], [ %75, %69 ]
  br i1 %67, label %76, label %83

68:                                               ; preds = %62
  br label %66

69:                                               ; preds = %62
  %70 = load i32, ptr %9, align 4
  %71 = mul nuw i32 %70, %22
  %72 = load i32, ptr %8, align 4
  %73 = mul nuw i32 65536, %72
  %74 = add nuw i32 %73, %24
  %75 = icmp ugt i32 %71, %74
  br label %66

76:                                               ; preds = %66
  %77 = load i32, ptr %9, align 4
  %78 = sub nuw i32 %77, 1
  store i32 %78, ptr %9, align 4
  %79 = load i32, ptr %8, align 4
  %80 = add nuw i32 %79, %20
  store i32 %80, ptr %8, align 4
  %81 = load i32, ptr %8, align 4
  %82 = icmp uge i32 %81, 65536
  br i1 %82, label %85, label %86

83:                                               ; preds = %66
  br label %48

84:                                               ; preds = %86
  br label %65

85:                                               ; preds = %76
  br label %48

86:                                               ; preds = %76
  br label %84

87:                                               ; preds = %124, %122
  %88 = load i32, ptr %7, align 4
  %89 = mul i32 %88, 65536
  %90 = add i32 %89, %26
  %91 = load i32, ptr %6, align 4
  %92 = load i32, ptr %12, align 4
  %93 = mul i32 %91, %92
  %94 = sub i32 %90, %93
  %95 = zext i5 %16 to i32
  %96 = lshr i32 %94, %95
  store i32 %96, ptr %3, align 4
  %97 = load i32, ptr %9, align 4
  %98 = mul i32 %97, 65536
  %99 = load i32, ptr %6, align 4
  %100 = add i32 %98, %99
  ret i32 %100

101:                                              ; preds = %104, %48
  %102 = load i32, ptr %6, align 4
  %103 = icmp uge i32 %102, 65536
  br i1 %103, label %107, label %108

104:                                              ; preds = %123
  br label %101

105:                                              ; preds = %108, %107
  %106 = phi i1 [ true, %107 ], [ %114, %108 ]
  br i1 %106, label %115, label %122

107:                                              ; preds = %101
  br label %105

108:                                              ; preds = %101
  %109 = load i32, ptr %6, align 4
  %110 = mul nuw i32 %109, %22
  %111 = load i32, ptr %8, align 4
  %112 = mul nuw i32 65536, %111
  %113 = add nuw i32 %112, %26
  %114 = icmp ugt i32 %110, %113
  br label %105

115:                                              ; preds = %105
  %116 = load i32, ptr %6, align 4
  %117 = sub nuw i32 %116, 1
  store i32 %117, ptr %6, align 4
  %118 = load i32, ptr %8, align 4
  %119 = add nuw i32 %118, %20
  store i32 %119, ptr %8, align 4
  %120 = load i32, ptr %8, align 4
  %121 = icmp uge i32 %120, 65536
  br i1 %121, label %124, label %125

122:                                              ; preds = %105
  br label %87

123:                                              ; preds = %125
  br label %104

124:                                              ; preds = %115
  br label %87

125:                                              ; preds = %115
  br label %123
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__divmoddi4(i64 %0, i64 %1, ptr nonnull align 8 %2) #0 {
  %4 = call i64 @__divdi3(i64 %0, i64 %1)
  %5 = call fastcc { i64, i1 } @llvm.smul.with.overflow.i64(i64 %4, i64 %1)
  %6 = extractvalue { i64, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %3
  %9 = extractvalue { i64, i1 } %5, 0
  %10 = sub i64 %0, %9
  store i64 %10, ptr %2, align 8
  ret i64 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__divdi3(i64 %0, i64 %1) #0 {
  %3 = xor i64 %0, %1
  %4 = ashr i64 %3, 63
  %5 = ashr i64 %0, 63
  %6 = xor i64 %0, %5
  %7 = ashr i64 %0, 63
  %8 = sub i64 %6, %7
  %9 = ashr i64 %1, 63
  %10 = xor i64 %1, %9
  %11 = ashr i64 %1, 63
  %12 = sub i64 %10, %11
  %13 = call i64 @__udivmoddi4(i64 %8, i64 %12, ptr align 8 null)
  %14 = xor i64 %13, %4
  %15 = sub i64 %14, %4
  ret i64 %15
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__divsi3(i32 %0, i32 %1) #0 {
  %3 = xor i32 %0, %1
  %4 = ashr i32 %3, 31
  %5 = ashr i32 %0, 31
  %6 = xor i32 %0, %5
  %7 = ashr i32 %0, 31
  %8 = sub i32 %6, %7
  %9 = ashr i32 %1, 31
  %10 = xor i32 %1, %9
  %11 = ashr i32 %1, 31
  %12 = sub i32 %10, %11
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %18, label %19

14:                                               ; preds = %18
  %15 = udiv i32 %8, %12
  %16 = xor i32 %15, %4
  %17 = sub i32 %16, %4
  ret i32 %17

18:                                               ; preds = %2
  br label %14

19:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @22)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__udivsi3(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %12, label %13

8:                                                ; preds = %67, %39, %33, %23, %12
  %9 = phi i32 [ 0, %12 ], [ 0, %23 ], [ 0, %33 ], [ %0, %39 ], [ %72, %67 ]
  ret i32 %9

10:                                               ; preds = %13
  %11 = icmp eq i32 %0, 0
  br i1 %11, label %23, label %24

12:                                               ; preds = %2
  br label %8

13:                                               ; preds = %2
  br label %10

14:                                               ; preds = %24
  %15 = call i32 @llvm.ctlz.i32(i32 %1, i1 false)
  %16 = trunc i32 %15 to i6
  %17 = zext i6 %16 to i32
  %18 = call i32 @llvm.ctlz.i32(i32 %0, i1 false)
  %19 = trunc i32 %18 to i6
  %20 = zext i6 %19 to i32
  %21 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %17, i32 %20)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %14

25:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %14
  %27 = extractvalue { i32, i1 } %21, 0
  store i32 %27, ptr %6, align 4
  %28 = load i32, ptr %6, align 4
  %29 = icmp ugt i32 %28, 31
  br i1 %29, label %33, label %34

30:                                               ; preds = %34
  %31 = load i32, ptr %6, align 4
  %32 = icmp eq i32 %31, 31
  br i1 %32, label %39, label %40

33:                                               ; preds = %26
  br label %8

34:                                               ; preds = %26
  br label %30

35:                                               ; preds = %40
  %36 = load i32, ptr %6, align 4
  %37 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %36, i32 1)
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %41, label %42

39:                                               ; preds = %30
  br label %8

40:                                               ; preds = %30
  br label %35

41:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

42:                                               ; preds = %35
  %43 = extractvalue { i32, i1 } %37, 0
  store i32 %43, ptr %6, align 4
  %44 = load i32, ptr %6, align 4
  %45 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 32, i32 %44)
  %46 = extractvalue { i32, i1 } %45, 1
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i32, i1 } %45, 0
  %50 = sub i32 31, %49
  %51 = icmp ule i32 %50, 31
  br i1 %51, label %59, label %60

52:                                               ; preds = %59
  %53 = trunc i32 %49 to i5
  %54 = zext i5 %53 to i32
  %55 = shl i32 %0, %54
  store i32 %55, ptr %5, align 4
  %56 = load i32, ptr %6, align 4
  %57 = sub i32 31, %56
  %58 = icmp ule i32 %57, 31
  br i1 %58, label %65, label %66

59:                                               ; preds = %48
  br label %52

60:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @23)
  unreachable

61:                                               ; preds = %65
  %62 = trunc i32 %56 to i5
  %63 = zext i5 %62 to i32
  %64 = lshr i32 %0, %63
  store i32 %64, ptr %4, align 4
  store i32 0, ptr %3, align 4
  br label %73

65:                                               ; preds = %52
  br label %61

66:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @23)
  unreachable

67:                                               ; preds = %93
  %68 = load i32, ptr %5, align 4
  %69 = shl i32 %68, 1
  %70 = load i32, ptr %3, align 4
  %71 = or i32 %69, %70
  store i32 %71, ptr %5, align 4
  %72 = load i32, ptr %5, align 4
  br label %8

73:                                               ; preds = %76, %61
  %74 = load i32, ptr %6, align 4
  %75 = icmp ugt i32 %74, 0
  br i1 %75, label %77, label %93

76:                                               ; preds = %108
  br label %73

77:                                               ; preds = %73
  %78 = load i32, ptr %4, align 4
  %79 = shl i32 %78, 1
  %80 = load i32, ptr %5, align 4
  %81 = lshr i32 %80, 31
  %82 = or i32 %79, %81
  store i32 %82, ptr %4, align 4
  %83 = load i32, ptr %5, align 4
  %84 = shl i32 %83, 1
  %85 = load i32, ptr %3, align 4
  %86 = or i32 %84, %85
  store i32 %86, ptr %5, align 4
  %87 = load i32, ptr %4, align 4
  %88 = sub i32 %1, %87
  %89 = sub i32 %88, 1
  %90 = ashr i32 %89, 31
  %91 = and i32 %90, 1
  %92 = icmp sge i32 %91, 0
  br i1 %92, label %99, label %100

93:                                               ; preds = %73
  br label %67

94:                                               ; preds = %99
  store i32 %91, ptr %3, align 4
  %95 = load i32, ptr %4, align 4
  %96 = and i32 %1, %90
  %97 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %95, i32 %96)
  %98 = extractvalue { i32, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %77
  br label %94

100:                                              ; preds = %77
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @23)
  unreachable

101:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %94
  %103 = extractvalue { i32, i1 } %97, 0
  store i32 %103, ptr %4, align 4
  %104 = load i32, ptr %6, align 4
  %105 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %104, i32 1)
  %106 = extractvalue { i32, i1 } %105, 1
  br i1 %106, label %107, label %108

107:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

108:                                              ; preds = %102
  %109 = extractvalue { i32, i1 } %105, 0
  store i32 %109, ptr %6, align 4
  br label %76
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__udivdi3(i64 %0, i64 %1) #0 {
  %3 = call i64 @__udivmoddi4(i64 %0, i64 %1, ptr align 8 null)
  ret i64 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__modsi3(i32 %0, i32 %1) #0 {
  %3 = call i32 @__divsi3(i32 %0, i32 %1)
  %4 = call fastcc { i32, i1 } @llvm.smul.with.overflow.i32(i32 %3, i32 %1)
  %5 = extractvalue { i32, i1 } %4, 1
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

7:                                                ; preds = %2
  %8 = extractvalue { i32, i1 } %4, 0
  %9 = sub i32 %0, %8
  ret i32 %9
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__moddi3(i64 %0, i64 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = ashr i64 %0, 63
  %6 = xor i64 %0, %5
  %7 = ashr i64 %0, 63
  %8 = sub i64 %6, %7
  %9 = ashr i64 %1, 63
  %10 = xor i64 %1, %9
  %11 = ashr i64 %1, 63
  %12 = sub i64 %10, %11
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %13 = call i64 @__udivmoddi4(i64 %8, i64 %12, ptr align 8 %4)
  %14 = load i64, ptr %4, align 8
  %15 = ashr i64 %0, 63
  %16 = xor i64 %14, %15
  %17 = ashr i64 %0, 63
  %18 = sub i64 %16, %17
  ret i64 %18
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__umodsi3(i32 %0, i32 %1) #0 {
  %3 = call i32 @__udivsi3(i32 %0, i32 %1)
  %4 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 %3, i32 %1)
  %5 = extractvalue { i32, i1 } %4, 1
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

7:                                                ; preds = %2
  %8 = extractvalue { i32, i1 } %4, 0
  %9 = sub i32 %0, %8
  ret i32 %9
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__umoddi3(i64 %0, i64 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %5 = call i64 @__udivmoddi4(i64 %0, i64 %1, ptr align 8 %4)
  %6 = load i64, ptr %4, align 8
  ret i64 %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__divmodsi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = call i32 @__divsi3(i32 %0, i32 %1)
  %5 = call fastcc { i32, i1 } @llvm.smul.with.overflow.i32(i32 %4, i32 %1)
  %6 = extractvalue { i32, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %3
  %9 = extractvalue { i32, i1 } %5, 0
  %10 = sub i32 %0, %9
  store i32 %10, ptr %2, align 4
  ret i32 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__udivmodsi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = call i32 @__udivsi3(i32 %0, i32 %1)
  %5 = call fastcc { i32, i1 } @llvm.smul.with.overflow.i32(i32 %4, i32 %1)
  %6 = extractvalue { i32, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %3
  %9 = extractvalue { i32, i1 } %5, 0
  %10 = sub i32 %0, %9
  store i32 %10, ptr %2, align 4
  ret i32 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__mulsi3(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, ptr %5, align 4
  store i32 %1, ptr %4, align 4
  store i32 0, ptr %3, align 4
  br label %8

6:                                                ; preds = %16
  %7 = load i32, ptr %3, align 4
  ret i32 %7

8:                                                ; preds = %11, %2
  %9 = load i32, ptr %5, align 4
  %10 = icmp ugt i32 %9, 0
  br i1 %10, label %12, label %16

11:                                               ; preds = %17
  br label %8

12:                                               ; preds = %8
  %13 = load i32, ptr %5, align 4
  %14 = and i32 %13, 1
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %22, label %26

16:                                               ; preds = %8
  br label %6

17:                                               ; preds = %26, %22
  %18 = load i32, ptr %5, align 4
  %19 = lshr i32 %18, 1
  store i32 %19, ptr %5, align 4
  %20 = load i32, ptr %4, align 4
  %21 = shl i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %11

22:                                               ; preds = %12
  %23 = load i32, ptr %3, align 4
  %24 = load i32, ptr %4, align 4
  %25 = add i32 %23, %24
  store i32 %25, ptr %3, align 4
  br label %17

26:                                               ; preds = %12
  br label %17
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__muldi3(i64 %0, i64 %1) #0 {
  %3 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %4 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %5 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  %6 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  store i64 %0, ptr %6, align 8
  %7 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  store i64 %1, ptr %7, align 8
  %8 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %3, i32 0, i32 0
  %9 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %10 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %9, i32 0, i32 0
  %11 = load i32, ptr %10, align 4
  %12 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %13 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %12, i32 0, i32 0
  %14 = load i32, ptr %13, align 4
  %15 = call fastcc i64 @compiler_rt.mulXi3.muldXi__anon_3534(i32 %11, i32 %14)
  store i64 %15, ptr %8, align 8
  %16 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %3, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %16, i32 0, i32 1
  %18 = load i32, ptr %17, align 4
  %19 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %19, i32 0, i32 1
  %21 = load i32, ptr %20, align 4
  %22 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %22, i32 0, i32 0
  %24 = load i32, ptr %23, align 4
  %25 = mul i32 %21, %24
  %26 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %26, i32 0, i32 0
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %4, i32 0, i32 0
  %30 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %29, i32 0, i32 1
  %31 = load i32, ptr %30, align 4
  %32 = mul i32 %28, %31
  %33 = add i32 %25, %32
  %34 = add i32 %18, %33
  store i32 %34, ptr %17, align 4
  %35 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %3, i32 0, i32 0
  %36 = load i64, ptr %35, align 8
  ret i64 %36
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.mulXi3.muldXi__anon_3534(i32 %0, i32 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i32, align 4
  %5 = alloca %"atomic.Atomic.Atomic(u64)", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 8, i1 false)
  %6 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %7 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %6, i32 0, i32 0
  %8 = and i32 %0, 65535
  %9 = and i32 %1, 65535
  %10 = mul i32 %8, %9
  store i32 %10, ptr %7, align 4
  %11 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %12 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %11, i32 0, i32 0
  %13 = load i32, ptr %12, align 4
  %14 = lshr i32 %13, 16
  store i32 %14, ptr %4, align 4
  %15 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %15, i32 0, i32 0
  %17 = load i32, ptr %16, align 4
  %18 = and i32 %17, 65535
  store i32 %18, ptr %16, align 4
  %19 = load i32, ptr %4, align 4
  %20 = lshr i32 %0, 16
  %21 = and i32 %1, 65535
  %22 = mul i32 %20, %21
  %23 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %19, i32 %22)
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %2
  %27 = extractvalue { i32, i1 } %23, 0
  store i32 %27, ptr %4, align 4
  %28 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %29 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %28, i32 0, i32 0
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %4, align 4
  %32 = and i32 %31, 65535
  %33 = shl i32 %32, 16
  %34 = add i32 %30, %33
  store i32 %34, ptr %29, align 4
  %35 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %36 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %35, i32 0, i32 1
  %37 = load i32, ptr %4, align 4
  %38 = lshr i32 %37, 16
  store i32 %38, ptr %36, align 4
  %39 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %40 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %39, i32 0, i32 0
  %41 = load i32, ptr %40, align 4
  %42 = lshr i32 %41, 16
  store i32 %42, ptr %4, align 4
  %43 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %44 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %43, i32 0, i32 0
  %45 = load i32, ptr %44, align 4
  %46 = and i32 %45, 65535
  store i32 %46, ptr %44, align 4
  %47 = load i32, ptr %4, align 4
  %48 = lshr i32 %1, 16
  %49 = and i32 %0, 65535
  %50 = mul i32 %48, %49
  %51 = add i32 %47, %50
  store i32 %51, ptr %4, align 4
  %52 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %52, i32 0, i32 0
  %54 = load i32, ptr %53, align 4
  %55 = load i32, ptr %4, align 4
  %56 = and i32 %55, 65535
  %57 = shl i32 %56, 16
  %58 = add i32 %54, %57
  store i32 %58, ptr %53, align 4
  %59 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %60 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %59, i32 0, i32 1
  %61 = load i32, ptr %60, align 4
  %62 = load i32, ptr %4, align 4
  %63 = lshr i32 %62, 16
  %64 = add i32 %61, %63
  store i32 %64, ptr %60, align 4
  %65 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %66 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %65, i32 0, i32 1
  %67 = load i32, ptr %66, align 4
  %68 = lshr i32 %0, 16
  %69 = lshr i32 %1, 16
  %70 = mul i32 %68, %69
  %71 = add i32 %67, %70
  store i32 %71, ptr %66, align 4
  %72 = getelementptr inbounds %"atomic.Atomic.Atomic(u64)", ptr %5, i32 0, i32 0
  %73 = load i64, ptr %72, align 8
  ret i64 %73
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__multi3(i128 %0, i128 %1) #0 {
  %3 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %4 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  store i128 %0, ptr %6, align 16
  %7 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  store i128 %1, ptr %7, align 16
  %8 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %3, i32 0, i32 0
  %9 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %10 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %9, i32 0, i32 0
  %11 = load i64, ptr %10, align 8
  %12 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %13 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %12, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = call fastcc i128 @compiler_rt.mulXi3.muldXi__anon_3536(i64 %11, i64 %14)
  store i128 %15, ptr %8, align 16
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %3, i32 0, i32 0
  %17 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %16, i32 0, i32 1
  %18 = load i64, ptr %17, align 8
  %19 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %20 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %19, i32 0, i32 1
  %21 = load i64, ptr %20, align 8
  %22 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %23 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %22, i32 0, i32 0
  %24 = load i64, ptr %23, align 8
  %25 = mul i64 %21, %24
  %26 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %27 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %26, i32 0, i32 0
  %28 = load i64, ptr %27, align 8
  %29 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %4, i32 0, i32 0
  %30 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %29, i32 0, i32 1
  %31 = load i64, ptr %30, align 8
  %32 = mul i64 %28, %31
  %33 = add i64 %25, %32
  %34 = add i64 %18, %33
  store i64 %34, ptr %17, align 8
  %35 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %3, i32 0, i32 0
  %36 = load i128, ptr %35, align 16
  ret i128 %36
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.mulXi3.muldXi__anon_3536(i64 %0, i64 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = alloca %"compiler_rt.common.HalveInt(i128,false)", align 16
  call void @llvm.memset.p0.i64(ptr align 16 %5, i8 -86, i64 16, i1 false)
  %6 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %7 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %6, i32 0, i32 0
  %8 = and i64 %0, 4294967295
  %9 = and i64 %1, 4294967295
  %10 = mul i64 %8, %9
  store i64 %10, ptr %7, align 8
  %11 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %12 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %11, i32 0, i32 0
  %13 = load i64, ptr %12, align 8
  %14 = lshr i64 %13, 32
  store i64 %14, ptr %4, align 8
  %15 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %16 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %15, i32 0, i32 0
  %17 = load i64, ptr %16, align 8
  %18 = and i64 %17, 4294967295
  store i64 %18, ptr %16, align 8
  %19 = load i64, ptr %4, align 8
  %20 = lshr i64 %0, 32
  %21 = and i64 %1, 4294967295
  %22 = mul i64 %20, %21
  %23 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %19, i64 %22)
  %24 = extractvalue { i64, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %2
  %27 = extractvalue { i64, i1 } %23, 0
  store i64 %27, ptr %4, align 8
  %28 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %29 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %28, i32 0, i32 0
  %30 = load i64, ptr %29, align 8
  %31 = load i64, ptr %4, align 8
  %32 = and i64 %31, 4294967295
  %33 = shl i64 %32, 32
  %34 = add i64 %30, %33
  store i64 %34, ptr %29, align 8
  %35 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %36 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %35, i32 0, i32 1
  %37 = load i64, ptr %4, align 8
  %38 = lshr i64 %37, 32
  store i64 %38, ptr %36, align 8
  %39 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %40 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %39, i32 0, i32 0
  %41 = load i64, ptr %40, align 8
  %42 = lshr i64 %41, 32
  store i64 %42, ptr %4, align 8
  %43 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %44 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %43, i32 0, i32 0
  %45 = load i64, ptr %44, align 8
  %46 = and i64 %45, 4294967295
  store i64 %46, ptr %44, align 8
  %47 = load i64, ptr %4, align 8
  %48 = lshr i64 %1, 32
  %49 = and i64 %0, 4294967295
  %50 = mul i64 %48, %49
  %51 = add i64 %47, %50
  store i64 %51, ptr %4, align 8
  %52 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %53 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %52, i32 0, i32 0
  %54 = load i64, ptr %53, align 8
  %55 = load i64, ptr %4, align 8
  %56 = and i64 %55, 4294967295
  %57 = shl i64 %56, 32
  %58 = add i64 %54, %57
  store i64 %58, ptr %53, align 8
  %59 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %60 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %59, i32 0, i32 1
  %61 = load i64, ptr %60, align 8
  %62 = load i64, ptr %4, align 8
  %63 = lshr i64 %62, 32
  %64 = add i64 %61, %63
  store i64 %64, ptr %60, align 8
  %65 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %66 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false).HalveInt(i128,false)__struct_3490", ptr %65, i32 0, i32 1
  %67 = load i64, ptr %66, align 8
  %68 = lshr i64 %0, 32
  %69 = lshr i64 %1, 32
  %70 = mul i64 %68, %69
  %71 = add i64 %67, %70
  store i64 %71, ptr %66, align 8
  %72 = getelementptr inbounds %"compiler_rt.common.HalveInt(i128,false)", ptr %5, i32 0, i32 0
  %73 = load i128, ptr %72, align 16
  ret i128 %73
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__udivti3(i128 %0, i128 %1) #0 {
  %3 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3537(i128 %0, i128 %1, ptr align 16 null)
  ret i128 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__modti3(i128 %0, i128 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i128, align 16
  %5 = ashr i128 %0, 127
  %6 = ashr i128 %1, 127
  %7 = xor i128 %0, %5
  %8 = sub i128 %7, %5
  %9 = xor i128 %1, %6
  %10 = sub i128 %9, %6
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %11 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3537(i128 %8, i128 %10, ptr align 16 %4)
  %12 = load i128, ptr %4, align 16
  %13 = xor i128 %12, %5
  %14 = sub i128 %13, %5
  ret i128 %14
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__umodti3(i128 %0, i128 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i128, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %5 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3537(i128 %0, i128 %1, ptr align 16 %4)
  %6 = load i128, ptr %4, align 16
  ret i128 %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__absvsi2(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = ashr i32 %0, 31
  %4 = load i32, ptr %2, align 4
  %5 = add i32 %4, %3
  store i32 %5, ptr %2, align 4
  %6 = load i32, ptr %2, align 4
  %7 = xor i32 %6, %3
  store i32 %7, ptr %2, align 4
  %8 = load i32, ptr %2, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %12, label %13

10:                                               ; preds = %13
  %11 = load i32, ptr %2, align 4
  ret i32 %11

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.absv.absv__anon_3538, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @24)
  unreachable

13:                                               ; preds = %1
  br label %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__absvdi2(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, ptr %2, align 8
  %3 = ashr i64 %0, 63
  %4 = load i64, ptr %2, align 8
  %5 = add i64 %4, %3
  store i64 %5, ptr %2, align 8
  %6 = load i64, ptr %2, align 8
  %7 = xor i64 %6, %3
  store i64 %7, ptr %2, align 8
  %8 = load i64, ptr %2, align 8
  %9 = icmp slt i64 %8, 0
  br i1 %9, label %12, label %13

10:                                               ; preds = %13
  %11 = load i64, ptr %2, align 8
  ret i64 %11

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.absv.absv__anon_3538, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @25)
  unreachable

13:                                               ; preds = %1
  br label %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__absvti2(i128 %0) #0 {
  %2 = alloca i128, align 16
  store i128 %0, ptr %2, align 16
  %3 = ashr i128 %0, 127
  %4 = load i128, ptr %2, align 16
  %5 = add i128 %4, %3
  store i128 %5, ptr %2, align 16
  %6 = load i128, ptr %2, align 16
  %7 = xor i128 %6, %3
  store i128 %7, ptr %2, align 16
  %8 = load i128, ptr %2, align 16
  %9 = icmp slt i128 %8, 0
  br i1 %9, label %12, label %13

10:                                               ; preds = %13
  %11 = load i128, ptr %2, align 16
  ret i128 %11

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.absv.absv__anon_3538, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @26)
  unreachable

13:                                               ; preds = %1
  br label %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__negvsi2(i32 %0) #0 {
  %2 = icmp eq i32 %0, -2147483648
  br i1 %2, label %6, label %7

3:                                                ; preds = %7
  %4 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %0)
  %5 = extractvalue { i32, i1 } %4, 1
  br i1 %5, label %8, label %9

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.negv.negvXi__anon_3539, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @27)
  unreachable

7:                                                ; preds = %1
  br label %3

8:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

9:                                                ; preds = %3
  %10 = extractvalue { i32, i1 } %4, 0
  ret i32 %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__negvdi2(i64 %0) #0 {
  %2 = icmp eq i64 %0, -9223372036854775808
  br i1 %2, label %6, label %7

3:                                                ; preds = %7
  %4 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %0)
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %8, label %9

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.negv.negvXi__anon_3539, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @28)
  unreachable

7:                                                ; preds = %1
  br label %3

8:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

9:                                                ; preds = %3
  %10 = extractvalue { i64, i1 } %4, 0
  ret i64 %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__negvti2(i128 %0) #0 {
  %2 = icmp eq i128 %0, -170141183460469231731687303715884105728
  br i1 %2, label %6, label %7

3:                                                ; preds = %7
  %4 = call fastcc { i128, i1 } @llvm.ssub.with.overflow.i128(i128 0, i128 %0)
  %5 = extractvalue { i128, i1 } %4, 1
  br i1 %5, label %8, label %9

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.negv.negvXi__anon_3539, i64 26, ptr align 8 null, ptr nonnull readonly align 8 @29)
  unreachable

7:                                                ; preds = %1
  br label %3

8:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

9:                                                ; preds = %3
  %10 = extractvalue { i128, i1 } %4, 0
  ret i128 %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__addosi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i32, align 4
  store i32 0, ptr %2, align 4
  %5 = add i32 %0, %1
  store i32 %5, ptr %4, align 4
  %6 = load i32, ptr %4, align 4
  %7 = xor i32 %6, %0
  %8 = load i32, ptr %4, align 4
  %9 = xor i32 %8, %1
  %10 = and i32 %7, %9
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %14, label %15

12:                                               ; preds = %15, %14
  %13 = load i32, ptr %4, align 4
  ret i32 %13

14:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %12

15:                                               ; preds = %3
  br label %12
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__addodi4(i64 %0, i64 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i64, align 8
  store i32 0, ptr %2, align 4
  %5 = add i64 %0, %1
  store i64 %5, ptr %4, align 8
  %6 = load i64, ptr %4, align 8
  %7 = xor i64 %6, %0
  %8 = load i64, ptr %4, align 8
  %9 = xor i64 %8, %1
  %10 = and i64 %7, %9
  %11 = icmp slt i64 %10, 0
  br i1 %11, label %14, label %15

12:                                               ; preds = %15, %14
  %13 = load i64, ptr %4, align 8
  ret i64 %13

14:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %12

15:                                               ; preds = %3
  br label %12
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__addoti4(i128 %0, i128 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i128, align 16
  store i32 0, ptr %2, align 4
  %5 = add i128 %0, %1
  store i128 %5, ptr %4, align 16
  %6 = load i128, ptr %4, align 16
  %7 = xor i128 %6, %0
  %8 = load i128, ptr %4, align 16
  %9 = xor i128 %8, %1
  %10 = and i128 %7, %9
  %11 = icmp slt i128 %10, 0
  br i1 %11, label %14, label %15

12:                                               ; preds = %15, %14
  %13 = load i128, ptr %4, align 16
  ret i128 %13

14:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %12

15:                                               ; preds = %3
  br label %12
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__subosi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i32, align 4
  store i32 0, ptr %2, align 4
  %5 = sub i32 %0, %1
  store i32 %5, ptr %4, align 4
  %6 = xor i32 %0, %1
  %7 = load i32, ptr %4, align 4
  %8 = xor i32 %7, %0
  %9 = and i32 %6, %8
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %13, label %14

11:                                               ; preds = %14, %13
  %12 = load i32, ptr %4, align 4
  ret i32 %12

13:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %11

14:                                               ; preds = %3
  br label %11
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__subodi4(i64 %0, i64 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i64, align 8
  store i32 0, ptr %2, align 4
  %5 = sub i64 %0, %1
  store i64 %5, ptr %4, align 8
  %6 = xor i64 %0, %1
  %7 = load i64, ptr %4, align 8
  %8 = xor i64 %7, %0
  %9 = and i64 %6, %8
  %10 = icmp slt i64 %9, 0
  br i1 %10, label %13, label %14

11:                                               ; preds = %14, %13
  %12 = load i64, ptr %4, align 8
  ret i64 %12

13:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %11

14:                                               ; preds = %3
  br label %11
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__suboti4(i128 %0, i128 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i128, align 16
  store i32 0, ptr %2, align 4
  %5 = sub i128 %0, %1
  store i128 %5, ptr %4, align 16
  %6 = xor i128 %0, %1
  %7 = load i128, ptr %4, align 16
  %8 = xor i128 %7, %0
  %9 = and i128 %6, %8
  %10 = icmp slt i128 %9, 0
  br i1 %10, label %13, label %14

11:                                               ; preds = %14, %13
  %12 = load i128, ptr %4, align 16
  ret i128 %12

13:                                               ; preds = %3
  store i32 1, ptr %2, align 4
  br label %11

14:                                               ; preds = %3
  br label %11
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__mulosi4(i32 %0, i32 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i64, align 8
  store i32 0, ptr %2, align 4
  %5 = sext i32 %0 to i64
  %6 = sext i32 %1 to i64
  %7 = call fastcc { i64, i1 } @llvm.smul.with.overflow.i64(i64 %5, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %3
  %11 = extractvalue { i64, i1 } %7, 0
  store i64 %11, ptr %4, align 8
  %12 = load i64, ptr %4, align 8
  %13 = icmp slt i64 %12, -2147483648
  br i1 %13, label %19, label %20

14:                                               ; preds = %24, %23
  %15 = load i64, ptr %4, align 8
  %16 = trunc i64 %15 to i32
  ret i32 %16

17:                                               ; preds = %20, %19
  %18 = phi i1 [ true, %19 ], [ %22, %20 ]
  br i1 %18, label %23, label %24

19:                                               ; preds = %10
  br label %17

20:                                               ; preds = %10
  %21 = load i64, ptr %4, align 8
  %22 = icmp slt i64 2147483647, %21
  br label %17

23:                                               ; preds = %17
  store i32 1, ptr %2, align 4
  br label %14

24:                                               ; preds = %17
  br label %14
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__mulodi4(i64 %0, i64 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i64, align 8
  store i32 0, ptr %2, align 4
  %5 = mul i64 %0, %1
  store i64 %5, ptr %4, align 8
  %6 = icmp slt i64 %0, 0
  br i1 %6, label %11, label %13

7:                                                ; preds = %37, %36
  %8 = load i64, ptr %4, align 8
  ret i64 %8

9:                                                ; preds = %13, %11
  %10 = phi i1 [ %12, %11 ], [ false, %13 ]
  br i1 %10, label %16, label %17

11:                                               ; preds = %3
  %12 = icmp eq i64 %1, -9223372036854775808
  br label %9

13:                                               ; preds = %3
  br label %9

14:                                               ; preds = %19, %16
  %15 = phi i1 [ true, %16 ], [ %20, %19 ]
  br i1 %15, label %36, label %37

16:                                               ; preds = %9
  br label %14

17:                                               ; preds = %9
  %18 = icmp ne i64 %0, 0
  br i1 %18, label %21, label %26

19:                                               ; preds = %31, %26
  %20 = phi i1 [ %33, %31 ], [ false, %26 ]
  br label %14

21:                                               ; preds = %17
  %22 = load i64, ptr %4, align 8
  %23 = icmp ne i64 %22, -9223372036854775808
  %24 = icmp ne i64 %0, -1
  %25 = or i1 %23, %24
  br i1 %25, label %29, label %30

26:                                               ; preds = %17
  br label %19

27:                                               ; preds = %29
  %28 = icmp ne i64 %0, 0
  br i1 %28, label %34, label %35

29:                                               ; preds = %21
  br label %27

30:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @30)
  unreachable

31:                                               ; preds = %34
  %32 = sdiv i64 %22, %0
  %33 = icmp ne i64 %32, %1
  br label %19

34:                                               ; preds = %27
  br label %31

35:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @30)
  unreachable

36:                                               ; preds = %14
  store i32 1, ptr %2, align 4
  br label %7

37:                                               ; preds = %14
  br label %7
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__muloti4(i128 %0, i128 %1, ptr nonnull align 4 %2) #0 {
  %4 = alloca i128, align 16
  store i32 0, ptr %2, align 4
  %5 = mul i128 %0, %1
  store i128 %5, ptr %4, align 16
  %6 = icmp slt i128 %0, 0
  br i1 %6, label %11, label %13

7:                                                ; preds = %37, %36
  %8 = load i128, ptr %4, align 16
  ret i128 %8

9:                                                ; preds = %13, %11
  %10 = phi i1 [ %12, %11 ], [ false, %13 ]
  br i1 %10, label %16, label %17

11:                                               ; preds = %3
  %12 = icmp eq i128 %1, -170141183460469231731687303715884105728
  br label %9

13:                                               ; preds = %3
  br label %9

14:                                               ; preds = %19, %16
  %15 = phi i1 [ true, %16 ], [ %20, %19 ]
  br i1 %15, label %36, label %37

16:                                               ; preds = %9
  br label %14

17:                                               ; preds = %9
  %18 = icmp ne i128 %0, 0
  br i1 %18, label %21, label %26

19:                                               ; preds = %31, %26
  %20 = phi i1 [ %33, %31 ], [ false, %26 ]
  br label %14

21:                                               ; preds = %17
  %22 = load i128, ptr %4, align 16
  %23 = icmp ne i128 %22, -170141183460469231731687303715884105728
  %24 = icmp ne i128 %0, -1
  %25 = or i1 %23, %24
  br i1 %25, label %29, label %30

26:                                               ; preds = %17
  br label %19

27:                                               ; preds = %29
  %28 = icmp ne i128 %0, 0
  br i1 %28, label %34, label %35

29:                                               ; preds = %21
  br label %27

30:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @31)
  unreachable

31:                                               ; preds = %34
  %32 = sdiv i128 %22, %0
  %33 = icmp ne i128 %32, %1
  br label %19

34:                                               ; preds = %27
  br label %31

35:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @31)
  unreachable

36:                                               ; preds = %14
  store i32 1, ptr %2, align 4
  br label %7

37:                                               ; preds = %14
  br label %7
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__extendhfsf2(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast half %0 to i16
  %6 = and i16 %5, 32767
  %7 = and i16 %5, -32768
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %8 = sub i16 %6, 1024
  %9 = icmp ult i16 %8, 30720
  br i1 %9, label %17, label %23

10:                                               ; preds = %28, %26
  %11 = load i32, ptr %4, align 4
  %12 = zext i16 %7 to i32
  %13 = shl i32 %12, 16
  %14 = or i32 %11, %13
  store i32 %14, ptr %3, align 4
  %15 = load i32, ptr %3, align 4
  %16 = bitcast i32 %15 to float
  ret float %16

17:                                               ; preds = %1
  %18 = zext i16 %6 to i32
  %19 = shl i32 %18, 13
  store i32 %19, ptr %4, align 4
  %20 = load i32, ptr %4, align 4
  %21 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %20, i32 939524096)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %1
  %24 = icmp uge i16 %6, 31744
  br i1 %24, label %29, label %40

25:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %17
  %27 = extractvalue { i32, i1 } %21, 0
  store i32 %27, ptr %4, align 4
  br label %10

28:                                               ; preds = %42, %29
  br label %10

29:                                               ; preds = %23
  store i32 2139095040, ptr %4, align 4
  %30 = load i32, ptr %4, align 4
  %31 = and i16 %6, 512
  %32 = zext i16 %31 to i32
  %33 = shl i32 %32, 13
  %34 = or i32 %30, %33
  store i32 %34, ptr %4, align 4
  %35 = load i32, ptr %4, align 4
  %36 = and i16 %6, 511
  %37 = zext i16 %36 to i32
  %38 = shl i32 %37, 13
  %39 = or i32 %35, %38
  store i32 %39, ptr %4, align 4
  br label %28

40:                                               ; preds = %23
  %41 = icmp ne i16 %6, 0
  br i1 %41, label %43, label %48

42:                                               ; preds = %77, %48
  br label %28

43:                                               ; preds = %40
  %44 = call i16 @llvm.ctlz.i16(i16 %6, i1 false)
  %45 = trunc i16 %44 to i5
  %46 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %45, i5 5)
  %47 = extractvalue { i5, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %40
  store i32 0, ptr %4, align 4
  br label %42

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i5, i1 } %46, 0
  %52 = zext i5 %51 to i32
  %53 = zext i16 %6 to i32
  %54 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 13, i32 %52)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = sub i32 31, %58
  %60 = icmp ule i32 %59, 31
  br i1 %60, label %69, label %70

61:                                               ; preds = %69
  %62 = trunc i32 %58 to i5
  %63 = zext i5 %62 to i32
  %64 = shl i32 %53, %63
  store i32 %64, ptr %4, align 4
  %65 = load i32, ptr %4, align 4
  %66 = xor i32 %65, 8388608
  store i32 %66, ptr %4, align 4
  %67 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 112, i32 %52)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %57
  br label %61

70:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @32)
  unreachable

71:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %61
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %73, i32 1)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %72
  %78 = extractvalue { i32, i1 } %74, 0
  %79 = load i32, ptr %4, align 4
  %80 = shl i32 %78, 23
  %81 = or i32 %79, %80
  store i32 %81, ptr %4, align 4
  br label %42
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.ctlz.i16(i16, i1 immarg) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i5, i1 } @llvm.usub.with.overflow.i5(i5, i5) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__extendhfdf2(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast half %0 to i16
  %6 = and i16 %5, 32767
  %7 = and i16 %5, -32768
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %8 = sub i16 %6, 1024
  %9 = icmp ult i16 %8, 30720
  br i1 %9, label %17, label %23

10:                                               ; preds = %28, %26
  %11 = load i64, ptr %4, align 8
  %12 = zext i16 %7 to i64
  %13 = shl i64 %12, 48
  %14 = or i64 %11, %13
  store i64 %14, ptr %3, align 8
  %15 = load i64, ptr %3, align 8
  %16 = bitcast i64 %15 to double
  ret double %16

17:                                               ; preds = %1
  %18 = zext i16 %6 to i64
  %19 = shl i64 %18, 42
  store i64 %19, ptr %4, align 8
  %20 = load i64, ptr %4, align 8
  %21 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %20, i64 4539628424389459968)
  %22 = extractvalue { i64, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %1
  %24 = icmp uge i16 %6, 31744
  br i1 %24, label %29, label %40

25:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %17
  %27 = extractvalue { i64, i1 } %21, 0
  store i64 %27, ptr %4, align 8
  br label %10

28:                                               ; preds = %42, %29
  br label %10

29:                                               ; preds = %23
  store i64 9218868437227405312, ptr %4, align 8
  %30 = load i64, ptr %4, align 8
  %31 = and i16 %6, 512
  %32 = zext i16 %31 to i64
  %33 = shl i64 %32, 42
  %34 = or i64 %30, %33
  store i64 %34, ptr %4, align 8
  %35 = load i64, ptr %4, align 8
  %36 = and i16 %6, 511
  %37 = zext i16 %36 to i64
  %38 = shl i64 %37, 42
  %39 = or i64 %35, %38
  store i64 %39, ptr %4, align 8
  br label %28

40:                                               ; preds = %23
  %41 = icmp ne i16 %6, 0
  br i1 %41, label %43, label %48

42:                                               ; preds = %77, %48
  br label %28

43:                                               ; preds = %40
  %44 = call i16 @llvm.ctlz.i16(i16 %6, i1 false)
  %45 = trunc i16 %44 to i5
  %46 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %45, i5 5)
  %47 = extractvalue { i5, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %40
  store i64 0, ptr %4, align 8
  br label %42

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i5, i1 } %46, 0
  %52 = zext i5 %51 to i32
  %53 = zext i16 %6 to i64
  %54 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 42, i32 %52)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = sub i32 63, %58
  %60 = icmp ule i32 %59, 63
  br i1 %60, label %69, label %70

61:                                               ; preds = %69
  %62 = trunc i32 %58 to i6
  %63 = zext i6 %62 to i64
  %64 = shl i64 %53, %63
  store i64 %64, ptr %4, align 8
  %65 = load i64, ptr %4, align 8
  %66 = xor i64 %65, 4503599627370496
  store i64 %66, ptr %4, align 8
  %67 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 1008, i32 %52)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %57
  br label %61

70:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @33)
  unreachable

71:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %61
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %73, i32 1)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %72
  %78 = extractvalue { i32, i1 } %74, 0
  %79 = load i64, ptr %4, align 8
  %80 = zext i32 %78 to i64
  %81 = shl i64 %80, 52
  %82 = or i64 %79, %81
  store i64 %82, ptr %4, align 8
  br label %42
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__extendhftf2(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = bitcast half %0 to i16
  %6 = and i16 %5, 32767
  %7 = and i16 %5, -32768
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %8 = sub i16 %6, 1024
  %9 = icmp ult i16 %8, 30720
  br i1 %9, label %17, label %23

10:                                               ; preds = %28, %26
  %11 = load i128, ptr %4, align 16
  %12 = zext i16 %7 to i128
  %13 = shl i128 %12, 112
  %14 = or i128 %11, %13
  store i128 %14, ptr %3, align 16
  %15 = load i128, ptr %3, align 16
  %16 = bitcast i128 %15 to fp128
  ret fp128 %16

17:                                               ; preds = %1
  %18 = zext i16 %6 to i128
  %19 = shl i128 %18, 102
  store i128 %19, ptr %4, align 16
  %20 = load i128, ptr %4, align 16
  %21 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %20, i128 84987514980498058623787163916674531328)
  %22 = extractvalue { i128, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %1
  %24 = icmp uge i16 %6, 31744
  br i1 %24, label %29, label %40

25:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %17
  %27 = extractvalue { i128, i1 } %21, 0
  store i128 %27, ptr %4, align 16
  br label %10

28:                                               ; preds = %42, %29
  br label %10

29:                                               ; preds = %23
  store i128 170135991163610696904058773219554885632, ptr %4, align 16
  %30 = load i128, ptr %4, align 16
  %31 = and i16 %6, 512
  %32 = zext i16 %31 to i128
  %33 = shl i128 %32, 102
  %34 = or i128 %30, %33
  store i128 %34, ptr %4, align 16
  %35 = load i128, ptr %4, align 16
  %36 = and i16 %6, 511
  %37 = zext i16 %36 to i128
  %38 = shl i128 %37, 102
  %39 = or i128 %35, %38
  store i128 %39, ptr %4, align 16
  br label %28

40:                                               ; preds = %23
  %41 = icmp ne i16 %6, 0
  br i1 %41, label %43, label %48

42:                                               ; preds = %77, %48
  br label %28

43:                                               ; preds = %40
  %44 = call i16 @llvm.ctlz.i16(i16 %6, i1 false)
  %45 = trunc i16 %44 to i5
  %46 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %45, i5 5)
  %47 = extractvalue { i5, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %40
  store i128 0, ptr %4, align 16
  br label %42

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i5, i1 } %46, 0
  %52 = zext i5 %51 to i32
  %53 = zext i16 %6 to i128
  %54 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 102, i32 %52)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = sub i32 127, %58
  %60 = icmp ule i32 %59, 127
  br i1 %60, label %69, label %70

61:                                               ; preds = %69
  %62 = trunc i32 %58 to i7
  %63 = zext i7 %62 to i128
  %64 = shl i128 %53, %63
  store i128 %64, ptr %4, align 16
  %65 = load i128, ptr %4, align 16
  %66 = xor i128 %65, 5192296858534827628530496329220096
  store i128 %66, ptr %4, align 16
  %67 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16368, i32 %52)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %57
  br label %61

70:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @34)
  unreachable

71:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %61
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %73, i32 1)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %72
  %78 = extractvalue { i32, i1 } %74, 0
  %79 = load i128, ptr %4, align 16
  %80 = zext i32 %78 to i128
  %81 = shl i128 %80, 112
  %82 = or i128 %79, %81
  store i128 %82, ptr %4, align 16
  br label %42
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__extendhfxf2(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %math.F80, align 8
  %4 = bitcast half %0 to i16
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %5 = and i16 %4, 32767
  %6 = and i16 %4, -32768
  %7 = icmp ne i16 %6, 0
  br i1 %7, label %12, label %13

8:                                                ; preds = %13, %12
  %9 = phi i16 [ -32768, %12 ], [ 0, %13 ]
  %10 = sub i16 %5, 1024
  %11 = icmp ult i16 %10, 30720
  br i1 %11, label %19, label %26

12:                                               ; preds = %1
  br label %8

13:                                               ; preds = %1
  br label %8

14:                                               ; preds = %37, %29
  %15 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %16 = load i16, ptr %15, align 2
  %17 = or i16 %16, %9
  store i16 %17, ptr %15, align 2
  %18 = call fastcc i80 @math.make_f80(ptr nonnull readonly align 8 %3)
  ret i80 %18

19:                                               ; preds = %8
  %20 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %21 = lshr i16 %5, 10
  store i16 %21, ptr %20, align 2
  %22 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %23 = load i16, ptr %22, align 2
  %24 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %23, i16 16368)
  %25 = extractvalue { i16, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %8
  %27 = icmp uge i16 %5, 31744
  br i1 %27, label %38, label %53

28:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %19
  %30 = extractvalue { i16, i1 } %24, 0
  store i16 %30, ptr %22, align 2
  %31 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %32 = zext i16 %5 to i64
  %33 = shl i64 %32, 53
  store i64 %33, ptr %31, align 8
  %34 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %35 = load i64, ptr %34, align 8
  %36 = or i64 %35, -9223372036854775808
  store i64 %36, ptr %34, align 8
  br label %14

37:                                               ; preds = %55, %38
  br label %14

38:                                               ; preds = %26
  %39 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 32767, ptr %39, align 2
  %40 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 -9223372036854775808, ptr %40, align 8
  %41 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %42 = load i64, ptr %41, align 8
  %43 = and i16 %5, 512
  %44 = zext i16 %43 to i64
  %45 = shl i64 %44, 53
  %46 = or i64 %42, %45
  store i64 %46, ptr %41, align 8
  %47 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %48 = load i64, ptr %47, align 8
  %49 = and i16 %5, 511
  %50 = zext i16 %49 to i64
  %51 = shl i64 %50, 53
  %52 = or i64 %48, %51
  store i64 %52, ptr %47, align 8
  br label %37

53:                                               ; preds = %26
  %54 = icmp ne i16 %5, 0
  br i1 %54, label %56, label %61

55:                                               ; preds = %113, %61
  br label %37

56:                                               ; preds = %53
  %57 = call i16 @llvm.ctlz.i16(i16 %5, i1 false)
  %58 = trunc i16 %57 to i5
  %59 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %58, i5 5)
  %60 = extractvalue { i5, i1 } %59, 1
  br i1 %60, label %64, label %65

61:                                               ; preds = %53
  %62 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 0, ptr %62, align 2
  %63 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 0, ptr %63, align 8
  br label %55

64:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %56
  %66 = extractvalue { i5, i1 } %59, 0
  %67 = zext i5 %66 to i16
  %68 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %69 = zext i16 %5 to i64
  %70 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 53, i16 %67)
  %71 = extractvalue { i16, i1 } %70, 1
  br i1 %71, label %72, label %73

72:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %65
  %74 = extractvalue { i16, i1 } %70, 0
  %75 = sub i16 63, %74
  %76 = icmp ule i16 %75, 63
  br i1 %76, label %87, label %88

77:                                               ; preds = %87
  %78 = trunc i16 %74 to i6
  %79 = zext i6 %78 to i64
  %80 = shl i64 %69, %79
  store i64 %80, ptr %68, align 8
  %81 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %82 = load i64, ptr %81, align 8
  %83 = or i64 %82, -9223372036854775808
  store i64 %83, ptr %81, align 8
  %84 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %85 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 10, i16 %67)
  %86 = extractvalue { i16, i1 } %85, 1
  br i1 %86, label %89, label %90

87:                                               ; preds = %73
  br label %77

88:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @35)
  unreachable

89:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %77
  %91 = extractvalue { i16, i1 } %85, 0
  %92 = sub i16 15, %91
  %93 = icmp ule i16 %92, 15
  br i1 %93, label %105, label %106

94:                                               ; preds = %105
  %95 = trunc i16 %91 to i4
  %96 = zext i4 %95 to i16
  %97 = lshr i16 %5, %96
  store i16 %97, ptr %84, align 2
  %98 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %99 = load i16, ptr %98, align 2
  %100 = xor i16 %99, 1
  store i16 %100, ptr %98, align 2
  %101 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %102 = load i16, ptr %101, align 2
  %103 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 16368, i16 %67)
  %104 = extractvalue { i16, i1 } %103, 1
  br i1 %104, label %107, label %108

105:                                              ; preds = %90
  br label %94

106:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @35)
  unreachable

107:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

108:                                              ; preds = %94
  %109 = extractvalue { i16, i1 } %103, 0
  %110 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %109, i16 1)
  %111 = extractvalue { i16, i1 } %110, 1
  br i1 %111, label %112, label %113

112:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %108
  %114 = extractvalue { i16, i1 } %110, 0
  %115 = or i16 %102, %114
  store i16 %115, ptr %101, align 2
  br label %55
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @math.make_f80(ptr nonnull readonly align 8 %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %math.F80, ptr %0, i32 0, i32 1
  %3 = load i16, ptr %2, align 2
  %4 = zext i16 %3 to i80
  br i1 true, label %11, label %12

5:                                                ; preds = %11
  %6 = shl i80 %4, 64
  %7 = getelementptr inbounds %math.F80, ptr %0, i32 0, i32 0
  %8 = load i64, ptr %7, align 8
  %9 = zext i64 %8 to i80
  %10 = or i80 %6, %9
  ret i80 %10

11:                                               ; preds = %1
  br label %5

12:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @123)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i16, i1 } @llvm.uadd.with.overflow.i16(i16, i16) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i16, i1 } @llvm.usub.with.overflow.i16(i16, i16) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__extendsfdf2(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast float %0 to i32
  %6 = and i32 %5, 2147483647
  %7 = and i32 %5, -2147483648
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %8 = sub i32 %6, 8388608
  %9 = icmp ult i32 %8, 2130706432
  br i1 %9, label %17, label %23

10:                                               ; preds = %28, %26
  %11 = load i64, ptr %4, align 8
  %12 = zext i32 %7 to i64
  %13 = shl i64 %12, 32
  %14 = or i64 %11, %13
  store i64 %14, ptr %3, align 8
  %15 = load i64, ptr %3, align 8
  %16 = bitcast i64 %15 to double
  ret double %16

17:                                               ; preds = %1
  %18 = zext i32 %6 to i64
  %19 = shl i64 %18, 29
  store i64 %19, ptr %4, align 8
  %20 = load i64, ptr %4, align 8
  %21 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %20, i64 4035225266123964416)
  %22 = extractvalue { i64, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %1
  %24 = icmp uge i32 %6, 2139095040
  br i1 %24, label %29, label %40

25:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %17
  %27 = extractvalue { i64, i1 } %21, 0
  store i64 %27, ptr %4, align 8
  br label %10

28:                                               ; preds = %42, %29
  br label %10

29:                                               ; preds = %23
  store i64 9218868437227405312, ptr %4, align 8
  %30 = load i64, ptr %4, align 8
  %31 = and i32 %6, 4194304
  %32 = zext i32 %31 to i64
  %33 = shl i64 %32, 29
  %34 = or i64 %30, %33
  store i64 %34, ptr %4, align 8
  %35 = load i64, ptr %4, align 8
  %36 = and i32 %6, 4194303
  %37 = zext i32 %36 to i64
  %38 = shl i64 %37, 29
  %39 = or i64 %35, %38
  store i64 %39, ptr %4, align 8
  br label %28

40:                                               ; preds = %23
  %41 = icmp ne i32 %6, 0
  br i1 %41, label %43, label %48

42:                                               ; preds = %77, %48
  br label %28

43:                                               ; preds = %40
  %44 = call i32 @llvm.ctlz.i32(i32 %6, i1 false)
  %45 = trunc i32 %44 to i6
  %46 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %45, i6 8)
  %47 = extractvalue { i6, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %40
  store i64 0, ptr %4, align 8
  br label %42

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i6, i1 } %46, 0
  %52 = zext i6 %51 to i32
  %53 = zext i32 %6 to i64
  %54 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 29, i32 %52)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = sub i32 63, %58
  %60 = icmp ule i32 %59, 63
  br i1 %60, label %69, label %70

61:                                               ; preds = %69
  %62 = trunc i32 %58 to i6
  %63 = zext i6 %62 to i64
  %64 = shl i64 %53, %63
  store i64 %64, ptr %4, align 8
  %65 = load i64, ptr %4, align 8
  %66 = xor i64 %65, 4503599627370496
  store i64 %66, ptr %4, align 8
  %67 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 896, i32 %52)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %57
  br label %61

70:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @36)
  unreachable

71:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %61
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %73, i32 1)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %72
  %78 = extractvalue { i32, i1 } %74, 0
  %79 = load i64, ptr %4, align 8
  %80 = zext i32 %78 to i64
  %81 = shl i64 %80, 52
  %82 = or i64 %79, %81
  store i64 %82, ptr %4, align 8
  br label %42
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i6, i1 } @llvm.usub.with.overflow.i6(i6, i6) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__extendsftf2(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = bitcast float %0 to i32
  %6 = and i32 %5, 2147483647
  %7 = and i32 %5, -2147483648
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %8 = sub i32 %6, 8388608
  %9 = icmp ult i32 %8, 2130706432
  br i1 %9, label %17, label %23

10:                                               ; preds = %28, %26
  %11 = load i128, ptr %4, align 16
  %12 = zext i32 %7 to i128
  %13 = shl i128 %12, 96
  %14 = or i128 %11, %13
  store i128 %14, ptr %3, align 16
  %15 = load i128, ptr %3, align 16
  %16 = bitcast i128 %15 to fp128
  ret fp128 %16

17:                                               ; preds = %1
  %18 = zext i32 %6 to i128
  %19 = shl i128 %18, 89
  store i128 %19, ptr %4, align 16
  %20 = load i128, ptr %4, align 16
  %21 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %20, i128 84405977732342157929391748327801880576)
  %22 = extractvalue { i128, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %1
  %24 = icmp uge i32 %6, 2139095040
  br i1 %24, label %29, label %40

25:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %17
  %27 = extractvalue { i128, i1 } %21, 0
  store i128 %27, ptr %4, align 16
  br label %10

28:                                               ; preds = %42, %29
  br label %10

29:                                               ; preds = %23
  store i128 170135991163610696904058773219554885632, ptr %4, align 16
  %30 = load i128, ptr %4, align 16
  %31 = and i32 %6, 4194304
  %32 = zext i32 %31 to i128
  %33 = shl i128 %32, 89
  %34 = or i128 %30, %33
  store i128 %34, ptr %4, align 16
  %35 = load i128, ptr %4, align 16
  %36 = and i32 %6, 4194303
  %37 = zext i32 %36 to i128
  %38 = shl i128 %37, 89
  %39 = or i128 %35, %38
  store i128 %39, ptr %4, align 16
  br label %28

40:                                               ; preds = %23
  %41 = icmp ne i32 %6, 0
  br i1 %41, label %43, label %48

42:                                               ; preds = %77, %48
  br label %28

43:                                               ; preds = %40
  %44 = call i32 @llvm.ctlz.i32(i32 %6, i1 false)
  %45 = trunc i32 %44 to i6
  %46 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %45, i6 8)
  %47 = extractvalue { i6, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %40
  store i128 0, ptr %4, align 16
  br label %42

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i6, i1 } %46, 0
  %52 = zext i6 %51 to i32
  %53 = zext i32 %6 to i128
  %54 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 89, i32 %52)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = sub i32 127, %58
  %60 = icmp ule i32 %59, 127
  br i1 %60, label %69, label %70

61:                                               ; preds = %69
  %62 = trunc i32 %58 to i7
  %63 = zext i7 %62 to i128
  %64 = shl i128 %53, %63
  store i128 %64, ptr %4, align 16
  %65 = load i128, ptr %4, align 16
  %66 = xor i128 %65, 5192296858534827628530496329220096
  store i128 %66, ptr %4, align 16
  %67 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16256, i32 %52)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %57
  br label %61

70:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @37)
  unreachable

71:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %61
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %73, i32 1)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %72
  %78 = extractvalue { i32, i1 } %74, 0
  %79 = load i128, ptr %4, align 16
  %80 = zext i32 %78 to i128
  %81 = shl i128 %80, 112
  %82 = or i128 %79, %81
  store i128 %82, ptr %4, align 16
  br label %42
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__extendsfxf2(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %math.F80, align 8
  %4 = bitcast float %0 to i32
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %5 = and i32 %4, 2147483647
  %6 = and i32 %4, -2147483648
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %12, label %13

8:                                                ; preds = %13, %12
  %9 = phi i16 [ -32768, %12 ], [ 0, %13 ]
  %10 = sub i32 %5, 8388608
  %11 = icmp ult i32 %10, 2130706432
  br i1 %11, label %19, label %24

12:                                               ; preds = %1
  br label %8

13:                                               ; preds = %1
  br label %8

14:                                               ; preds = %43, %35
  %15 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %16 = load i16, ptr %15, align 2
  %17 = or i16 %16, %9
  store i16 %17, ptr %15, align 2
  %18 = call fastcc i80 @math.make_f80(ptr nonnull readonly align 8 %3)
  ret i80 %18

19:                                               ; preds = %8
  %20 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %21 = lshr i32 %5, 23
  %22 = sub i32 65535, %21
  %23 = icmp ule i32 %22, 65535
  br i1 %23, label %32, label %33

24:                                               ; preds = %8
  %25 = icmp uge i32 %5, 2139095040
  br i1 %25, label %44, label %59

26:                                               ; preds = %32
  %27 = trunc i32 %21 to i16
  store i16 %27, ptr %20, align 2
  %28 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %29 = load i16, ptr %28, align 2
  %30 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %29, i16 16256)
  %31 = extractvalue { i16, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %19
  br label %26

33:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @38)
  unreachable

34:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %26
  %36 = extractvalue { i16, i1 } %30, 0
  store i16 %36, ptr %28, align 2
  %37 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %38 = zext i32 %5 to i64
  %39 = shl i64 %38, 40
  store i64 %39, ptr %37, align 8
  %40 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %41 = load i64, ptr %40, align 8
  %42 = or i64 %41, -9223372036854775808
  store i64 %42, ptr %40, align 8
  br label %14

43:                                               ; preds = %61, %44
  br label %14

44:                                               ; preds = %24
  %45 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 32767, ptr %45, align 2
  %46 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 -9223372036854775808, ptr %46, align 8
  %47 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %48 = load i64, ptr %47, align 8
  %49 = and i32 %5, 4194304
  %50 = zext i32 %49 to i64
  %51 = shl i64 %50, 40
  %52 = or i64 %48, %51
  store i64 %52, ptr %47, align 8
  %53 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %54 = load i64, ptr %53, align 8
  %55 = and i32 %5, 4194303
  %56 = zext i32 %55 to i64
  %57 = shl i64 %56, 40
  %58 = or i64 %54, %57
  store i64 %58, ptr %53, align 8
  br label %43

59:                                               ; preds = %24
  %60 = icmp ne i32 %5, 0
  br i1 %60, label %62, label %67

61:                                               ; preds = %120, %67
  br label %43

62:                                               ; preds = %59
  %63 = call i32 @llvm.ctlz.i32(i32 %5, i1 false)
  %64 = trunc i32 %63 to i6
  %65 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %64, i6 8)
  %66 = extractvalue { i6, i1 } %65, 1
  br i1 %66, label %70, label %71

67:                                               ; preds = %59
  %68 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 0, ptr %68, align 2
  %69 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 0, ptr %69, align 8
  br label %61

70:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %62
  %72 = extractvalue { i6, i1 } %65, 0
  %73 = zext i6 %72 to i16
  %74 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %75 = zext i32 %5 to i64
  %76 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 40, i16 %73)
  %77 = extractvalue { i16, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %71
  %80 = extractvalue { i16, i1 } %76, 0
  %81 = sub i16 63, %80
  %82 = icmp ule i16 %81, 63
  br i1 %82, label %93, label %94

83:                                               ; preds = %93
  %84 = trunc i16 %80 to i6
  %85 = zext i6 %84 to i64
  %86 = shl i64 %75, %85
  store i64 %86, ptr %74, align 8
  %87 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %88 = load i64, ptr %87, align 8
  %89 = or i64 %88, -9223372036854775808
  store i64 %89, ptr %87, align 8
  %90 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %91 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 23, i16 %73)
  %92 = extractvalue { i16, i1 } %91, 1
  br i1 %92, label %95, label %96

93:                                               ; preds = %79
  br label %83

94:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @38)
  unreachable

95:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

96:                                               ; preds = %83
  %97 = extractvalue { i16, i1 } %91, 0
  %98 = sub i16 31, %97
  %99 = icmp ule i16 %98, 31
  br i1 %99, label %112, label %113

100:                                              ; preds = %112
  %101 = trunc i16 %97 to i5
  %102 = zext i5 %101 to i32
  %103 = lshr i32 %5, %102
  %104 = trunc i32 %103 to i16
  store i16 %104, ptr %90, align 2
  %105 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %106 = load i16, ptr %105, align 2
  %107 = xor i16 %106, 1
  store i16 %107, ptr %105, align 2
  %108 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %109 = load i16, ptr %108, align 2
  %110 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 16256, i16 %73)
  %111 = extractvalue { i16, i1 } %110, 1
  br i1 %111, label %114, label %115

112:                                              ; preds = %96
  br label %100

113:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @38)
  unreachable

114:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

115:                                              ; preds = %100
  %116 = extractvalue { i16, i1 } %110, 0
  %117 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %116, i16 1)
  %118 = extractvalue { i16, i1 } %117, 1
  br i1 %118, label %119, label %120

119:                                              ; preds = %115
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

120:                                              ; preds = %115
  %121 = extractvalue { i16, i1 } %117, 0
  %122 = or i16 %109, %121
  store i16 %122, ptr %108, align 2
  br label %61
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__extenddftf2(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = bitcast double %0 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = and i64 %5, -9223372036854775808
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %8 = sub i64 %6, 4503599627370496
  %9 = icmp ult i64 %8, 9214364837600034816
  br i1 %9, label %17, label %23

10:                                               ; preds = %28, %26
  %11 = load i128, ptr %4, align 16
  %12 = zext i64 %7 to i128
  %13 = shl i128 %12, 64
  %14 = or i128 %11, %13
  store i128 %14, ptr %3, align 16
  %15 = load i128, ptr %3, align 16
  %16 = bitcast i128 %15 to fp128
  ret fp128 %16

17:                                               ; preds = %1
  %18 = zext i64 %6 to i128
  %19 = shl i128 %18, 60
  store i128 %19, ptr %4, align 16
  %20 = load i128, ptr %4, align 16
  %21 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %20, i128 79753679747094952374228423616820674560)
  %22 = extractvalue { i128, i1 } %21, 1
  br i1 %22, label %25, label %26

23:                                               ; preds = %1
  %24 = icmp uge i64 %6, 9218868437227405312
  br i1 %24, label %29, label %40

25:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %17
  %27 = extractvalue { i128, i1 } %21, 0
  store i128 %27, ptr %4, align 16
  br label %10

28:                                               ; preds = %42, %29
  br label %10

29:                                               ; preds = %23
  store i128 170135991163610696904058773219554885632, ptr %4, align 16
  %30 = load i128, ptr %4, align 16
  %31 = and i64 %6, 2251799813685248
  %32 = zext i64 %31 to i128
  %33 = shl i128 %32, 60
  %34 = or i128 %30, %33
  store i128 %34, ptr %4, align 16
  %35 = load i128, ptr %4, align 16
  %36 = and i64 %6, 2251799813685247
  %37 = zext i64 %36 to i128
  %38 = shl i128 %37, 60
  %39 = or i128 %35, %38
  store i128 %39, ptr %4, align 16
  br label %28

40:                                               ; preds = %23
  %41 = icmp ne i64 %6, 0
  br i1 %41, label %43, label %48

42:                                               ; preds = %77, %48
  br label %28

43:                                               ; preds = %40
  %44 = call i64 @llvm.ctlz.i64(i64 %6, i1 false)
  %45 = trunc i64 %44 to i7
  %46 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %45, i7 11)
  %47 = extractvalue { i7, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %40
  store i128 0, ptr %4, align 16
  br label %42

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i7, i1 } %46, 0
  %52 = zext i7 %51 to i32
  %53 = zext i64 %6 to i128
  %54 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 60, i32 %52)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = sub i32 127, %58
  %60 = icmp ule i32 %59, 127
  br i1 %60, label %69, label %70

61:                                               ; preds = %69
  %62 = trunc i32 %58 to i7
  %63 = zext i7 %62 to i128
  %64 = shl i128 %53, %63
  store i128 %64, ptr %4, align 16
  %65 = load i128, ptr %4, align 16
  %66 = xor i128 %65, 5192296858534827628530496329220096
  store i128 %66, ptr %4, align 16
  %67 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 15360, i32 %52)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %57
  br label %61

70:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @39)
  unreachable

71:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %61
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %73, i32 1)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %72
  %78 = extractvalue { i32, i1 } %74, 0
  %79 = load i128, ptr %4, align 16
  %80 = zext i32 %78 to i128
  %81 = shl i128 %80, 112
  %82 = or i128 %79, %81
  store i128 %82, ptr %4, align 16
  br label %42
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i7, i1 } @llvm.usub.with.overflow.i7(i7, i7) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__extenddfxf2(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca %math.F80, align 8
  %4 = bitcast double %0 to i64
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %5 = and i64 %4, 9223372036854775807
  %6 = and i64 %4, -9223372036854775808
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %12, label %13

8:                                                ; preds = %13, %12
  %9 = phi i16 [ -32768, %12 ], [ 0, %13 ]
  %10 = sub i64 %5, 4503599627370496
  %11 = icmp ult i64 %10, 9214364837600034816
  br i1 %11, label %19, label %24

12:                                               ; preds = %1
  br label %8

13:                                               ; preds = %1
  br label %8

14:                                               ; preds = %42, %35
  %15 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %16 = load i16, ptr %15, align 2
  %17 = or i16 %16, %9
  store i16 %17, ptr %15, align 2
  %18 = call fastcc i80 @math.make_f80(ptr nonnull readonly align 8 %3)
  ret i80 %18

19:                                               ; preds = %8
  %20 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %21 = lshr i64 %5, 52
  %22 = sub i64 65535, %21
  %23 = icmp ule i64 %22, 65535
  br i1 %23, label %32, label %33

24:                                               ; preds = %8
  %25 = icmp uge i64 %5, 9218868437227405312
  br i1 %25, label %43, label %56

26:                                               ; preds = %32
  %27 = trunc i64 %21 to i16
  store i16 %27, ptr %20, align 2
  %28 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %29 = load i16, ptr %28, align 2
  %30 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %29, i16 15360)
  %31 = extractvalue { i16, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %19
  br label %26

33:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @40)
  unreachable

34:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %26
  %36 = extractvalue { i16, i1 } %30, 0
  store i16 %36, ptr %28, align 2
  %37 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %38 = shl i64 %5, 11
  store i64 %38, ptr %37, align 8
  %39 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %40 = load i64, ptr %39, align 8
  %41 = or i64 %40, -9223372036854775808
  store i64 %41, ptr %39, align 8
  br label %14

42:                                               ; preds = %58, %43
  br label %14

43:                                               ; preds = %24
  %44 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 32767, ptr %44, align 2
  %45 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 -9223372036854775808, ptr %45, align 8
  %46 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %47 = load i64, ptr %46, align 8
  %48 = and i64 %5, 2251799813685248
  %49 = shl i64 %48, 11
  %50 = or i64 %47, %49
  store i64 %50, ptr %46, align 8
  %51 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %52 = load i64, ptr %51, align 8
  %53 = and i64 %5, 2251799813685247
  %54 = shl i64 %53, 11
  %55 = or i64 %52, %54
  store i64 %55, ptr %51, align 8
  br label %42

56:                                               ; preds = %24
  %57 = icmp ne i64 %5, 0
  br i1 %57, label %59, label %64

58:                                               ; preds = %116, %64
  br label %42

59:                                               ; preds = %56
  %60 = call i64 @llvm.ctlz.i64(i64 %5, i1 false)
  %61 = trunc i64 %60 to i7
  %62 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %61, i7 11)
  %63 = extractvalue { i7, i1 } %62, 1
  br i1 %63, label %67, label %68

64:                                               ; preds = %56
  %65 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  store i16 0, ptr %65, align 2
  %66 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  store i64 0, ptr %66, align 8
  br label %58

67:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %59
  %69 = extractvalue { i7, i1 } %62, 0
  %70 = zext i7 %69 to i16
  %71 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %72 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 11, i16 %70)
  %73 = extractvalue { i16, i1 } %72, 1
  br i1 %73, label %74, label %75

74:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %68
  %76 = extractvalue { i16, i1 } %72, 0
  %77 = sub i16 63, %76
  %78 = icmp ule i16 %77, 63
  br i1 %78, label %89, label %90

79:                                               ; preds = %89
  %80 = trunc i16 %76 to i6
  %81 = zext i6 %80 to i64
  %82 = shl i64 %5, %81
  store i64 %82, ptr %71, align 8
  %83 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 0
  %84 = load i64, ptr %83, align 8
  %85 = or i64 %84, -9223372036854775808
  store i64 %85, ptr %83, align 8
  %86 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %87 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 52, i16 %70)
  %88 = extractvalue { i16, i1 } %87, 1
  br i1 %88, label %91, label %92

89:                                               ; preds = %75
  br label %79

90:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @40)
  unreachable

91:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

92:                                               ; preds = %79
  %93 = extractvalue { i16, i1 } %87, 0
  %94 = sub i16 63, %93
  %95 = icmp ule i16 %94, 63
  br i1 %95, label %108, label %109

96:                                               ; preds = %108
  %97 = trunc i16 %93 to i6
  %98 = zext i6 %97 to i64
  %99 = lshr i64 %5, %98
  %100 = trunc i64 %99 to i16
  store i16 %100, ptr %86, align 2
  %101 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %102 = load i16, ptr %101, align 2
  %103 = xor i16 %102, 1
  store i16 %103, ptr %101, align 2
  %104 = getelementptr inbounds %math.F80, ptr %3, i32 0, i32 1
  %105 = load i16, ptr %104, align 2
  %106 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 15360, i16 %70)
  %107 = extractvalue { i16, i1 } %106, 1
  br i1 %107, label %110, label %111

108:                                              ; preds = %92
  br label %96

109:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @40)
  unreachable

110:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

111:                                              ; preds = %96
  %112 = extractvalue { i16, i1 } %106, 0
  %113 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %112, i16 1)
  %114 = extractvalue { i16, i1 } %113, 1
  br i1 %114, label %115, label %116

115:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %111
  %117 = extractvalue { i16, i1 } %113, 0
  %118 = or i16 %105, %117
  store i16 %118, ptr %104, align 2
  br label %58
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__extendxftf2(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = alloca %math.F80, align 8
  %6 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, i80 %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %8 = load i16, ptr %7, align 2
  %9 = and i16 %8, -32768
  %10 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %11 = load i16, ptr %10, align 2
  %12 = and i16 %11, 32767
  store i16 %12, ptr %10, align 2
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 -86, i64 16, i1 false)
  %13 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %14 = load i16, ptr %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %25, label %29

16:                                               ; preds = %35, %30
  %17 = load i128, ptr %4, align 16
  %18 = zext i16 %9 to i128
  %19 = shl i128 %18, 112
  %20 = or i128 %17, %19
  store i128 %20, ptr %3, align 16
  %21 = load i128, ptr %3, align 16
  %22 = bitcast i128 %21 to fp128
  ret fp128 %22

23:                                               ; preds = %29, %25
  %24 = phi i1 [ %28, %25 ], [ false, %29 ]
  br i1 %24, label %30, label %31

25:                                               ; preds = %1
  %26 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %27 = load i64, ptr %26, align 8
  %28 = icmp eq i64 %27, 0
  br label %23

29:                                               ; preds = %1
  br label %23

30:                                               ; preds = %23
  store i128 0, ptr %4, align 16
  br label %16

31:                                               ; preds = %23
  %32 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %33 = load i16, ptr %32, align 2
  %34 = icmp eq i16 %33, 32767
  br i1 %34, label %36, label %47

35:                                               ; preds = %52, %36
  br label %16

36:                                               ; preds = %31
  %37 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %38 = load i64, ptr %37, align 8
  %39 = zext i64 %38 to i128
  %40 = shl i128 %39, 49
  store i128 %40, ptr %4, align 16
  %41 = load i128, ptr %4, align 16
  %42 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %43 = load i16, ptr %42, align 2
  %44 = zext i16 %43 to i128
  %45 = shl i128 %44, 112
  %46 = or i128 %41, %45
  store i128 %46, ptr %4, align 16
  br label %35

47:                                               ; preds = %31
  %48 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %49 = load i64, ptr %48, align 8
  %50 = and i64 %49, -9223372036854775808
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %53, label %65

52:                                               ; preds = %98, %53
  br label %35

53:                                               ; preds = %47
  %54 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %55 = load i64, ptr %54, align 8
  %56 = and i64 %55, 9223372036854775807
  %57 = zext i64 %56 to i128
  %58 = shl i128 %57, 49
  store i128 %58, ptr %4, align 16
  %59 = load i128, ptr %4, align 16
  %60 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %61 = load i16, ptr %60, align 2
  %62 = zext i16 %61 to i128
  %63 = shl i128 %62, 112
  %64 = or i128 %59, %63
  store i128 %64, ptr %4, align 16
  br label %52

65:                                               ; preds = %47
  %66 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %67 = load i64, ptr %66, align 8
  %68 = call i64 @llvm.ctlz.i64(i64 %67, i1 false)
  %69 = trunc i64 %68 to i7
  %70 = zext i7 %69 to i32
  %71 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %72 = load i64, ptr %71, align 8
  %73 = zext i64 %72 to i128
  %74 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 49, i32 %70)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %65
  %78 = extractvalue { i32, i1 } %74, 0
  %79 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %78, i32 1)
  %80 = extractvalue { i32, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %77
  %83 = extractvalue { i32, i1 } %79, 0
  %84 = sub i32 127, %83
  %85 = icmp ule i32 %84, 127
  br i1 %85, label %95, label %96

86:                                               ; preds = %95
  %87 = trunc i32 %83 to i7
  %88 = zext i7 %87 to i128
  %89 = shl i128 %73, %88
  store i128 %89, ptr %4, align 16
  %90 = load i128, ptr %4, align 16
  %91 = xor i128 %90, 5192296858534827628530496329220096
  store i128 %91, ptr %4, align 16
  %92 = load i128, ptr %4, align 16
  %93 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %70, i32 1)
  %94 = extractvalue { i32, i1 } %93, 1
  br i1 %94, label %97, label %98

95:                                               ; preds = %82
  br label %86

96:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @41)
  unreachable

97:                                               ; preds = %86
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %86
  %99 = extractvalue { i32, i1 } %93, 0
  %100 = zext i32 %99 to i128
  %101 = shl i128 %100, 112
  %102 = or i128 %92, %101
  store i128 %102, ptr %4, align 16
  br label %52
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.break_f80(ptr noalias nonnull sret(%math.F80) %0, i80 %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %math.F80, ptr %0, i32 0, i32 0
  %4 = trunc i80 %1 to i64
  store i64 %4, ptr %3, align 8
  %5 = getelementptr inbounds %math.F80, ptr %0, i32 0, i32 1
  %6 = lshr i80 %1, 64
  br i1 true, label %9, label %10

7:                                                ; preds = %9
  %8 = trunc i80 %6 to i16
  store i16 %8, ptr %5, align 2
  ret void

9:                                                ; preds = %2
  br label %7

10:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @124)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__truncsfhf2(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = bitcast float %0 to i32
  %6 = and i32 %5, 2147483647
  %7 = and i32 %5, -2147483648
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 -86, i64 2, i1 false)
  %8 = sub i32 %6, 947912704
  %9 = sub i32 %6, 1199570944
  %10 = icmp ult i32 %8, %9
  br i1 %10, label %18, label %25

11:                                               ; preds = %48, %27
  %12 = load i16, ptr %4, align 2
  %13 = lshr i32 %7, 16
  %14 = trunc i32 %13 to i16
  %15 = or i16 %12, %14
  store i16 %15, ptr %3, align 2
  %16 = load i16, ptr %3, align 2
  %17 = bitcast i16 %16 to half
  ret half %17

18:                                               ; preds = %1
  %19 = lshr i32 %6, 13
  %20 = trunc i32 %19 to i16
  store i16 %20, ptr %4, align 2
  %21 = load i16, ptr %4, align 2
  %22 = sub i16 %21, -16384
  store i16 %22, ptr %4, align 2
  %23 = and i32 %6, 8191
  %24 = icmp ugt i32 %23, 4096
  br i1 %24, label %28, label %32

25:                                               ; preds = %1
  %26 = icmp ugt i32 %6, 2139095040
  br i1 %26, label %49, label %58

27:                                               ; preds = %37, %35
  br label %11

28:                                               ; preds = %18
  %29 = load i16, ptr %4, align 2
  %30 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %29, i16 1)
  %31 = extractvalue { i16, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %18
  %33 = icmp eq i32 %23, 4096
  br i1 %33, label %38, label %44

34:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %28
  %36 = extractvalue { i16, i1 } %30, 0
  store i16 %36, ptr %4, align 2
  br label %27

37:                                               ; preds = %46, %44
  br label %27

38:                                               ; preds = %32
  %39 = load i16, ptr %4, align 2
  %40 = load i16, ptr %4, align 2
  %41 = and i16 %40, 1
  %42 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %39, i16 %41)
  %43 = extractvalue { i16, i1 } %42, 1
  br i1 %43, label %45, label %46

44:                                               ; preds = %32
  br label %37

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i16, i1 } %42, 0
  store i16 %47, ptr %4, align 2
  br label %37

48:                                               ; preds = %65, %60
  br label %11

49:                                               ; preds = %25
  store i16 31744, ptr %4, align 2
  %50 = load i16, ptr %4, align 2
  %51 = or i16 %50, 512
  store i16 %51, ptr %4, align 2
  %52 = load i16, ptr %4, align 2
  %53 = and i32 %6, 4194303
  %54 = lshr i32 %53, 13
  %55 = and i32 %54, 511
  %56 = sub i32 65535, %55
  %57 = icmp ule i32 %56, 65535
  br i1 %57, label %63, label %64

58:                                               ; preds = %25
  %59 = icmp uge i32 %6, 1199570944
  br i1 %59, label %66, label %67

60:                                               ; preds = %63
  %61 = trunc i32 %55 to i16
  %62 = or i16 %52, %61
  store i16 %62, ptr %4, align 2
  br label %48

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @42)
  unreachable

65:                                               ; preds = %82, %66
  br label %48

66:                                               ; preds = %58
  store i16 31744, ptr %4, align 2
  br label %65

67:                                               ; preds = %58
  %68 = lshr i32 %6, 23
  %69 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 112, i32 %68)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %71, label %72

71:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %67
  %73 = extractvalue { i32, i1 } %69, 0
  %74 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %73, i32 1)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %72
  %78 = extractvalue { i32, i1 } %74, 0
  %79 = and i32 %5, 8388607
  %80 = or i32 %79, 8388608
  %81 = icmp ugt i32 %78, 23
  br i1 %81, label %83, label %84

82:                                               ; preds = %118, %83
  br label %65

83:                                               ; preds = %77
  store i16 0, ptr %4, align 2
  br label %82

84:                                               ; preds = %77
  %85 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 32, i32 %78)
  %86 = extractvalue { i32, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %84
  %89 = extractvalue { i32, i1 } %85, 0
  %90 = sub i32 31, %89
  %91 = icmp ule i32 %90, 31
  br i1 %91, label %100, label %101

92:                                               ; preds = %100
  %93 = trunc i32 %89 to i5
  %94 = zext i5 %93 to i32
  %95 = shl i32 %80, %94
  %96 = icmp ne i32 %95, 0
  %97 = zext i1 %96 to i32
  %98 = sub i32 31, %78
  %99 = icmp ule i32 %98, 31
  br i1 %99, label %110, label %111

100:                                              ; preds = %88
  br label %92

101:                                              ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @42)
  unreachable

102:                                              ; preds = %110
  %103 = trunc i32 %78 to i5
  %104 = zext i5 %103 to i32
  %105 = lshr i32 %80, %104
  %106 = or i32 %105, %97
  %107 = lshr i32 %106, 13
  %108 = sub i32 65535, %107
  %109 = icmp ule i32 %108, 65535
  br i1 %109, label %116, label %117

110:                                              ; preds = %92
  br label %102

111:                                              ; preds = %92
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @42)
  unreachable

112:                                              ; preds = %116
  %113 = trunc i32 %107 to i16
  store i16 %113, ptr %4, align 2
  %114 = and i32 %106, 8191
  %115 = icmp ugt i32 %114, 4096
  br i1 %115, label %119, label %123

116:                                              ; preds = %102
  br label %112

117:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @42)
  unreachable

118:                                              ; preds = %128, %126
  br label %82

119:                                              ; preds = %112
  %120 = load i16, ptr %4, align 2
  %121 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %120, i16 1)
  %122 = extractvalue { i16, i1 } %121, 1
  br i1 %122, label %125, label %126

123:                                              ; preds = %112
  %124 = icmp eq i32 %114, 4096
  br i1 %124, label %129, label %135

125:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

126:                                              ; preds = %119
  %127 = extractvalue { i16, i1 } %121, 0
  store i16 %127, ptr %4, align 2
  br label %118

128:                                              ; preds = %137, %135
  br label %118

129:                                              ; preds = %123
  %130 = load i16, ptr %4, align 2
  %131 = load i16, ptr %4, align 2
  %132 = and i16 %131, 1
  %133 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %130, i16 %132)
  %134 = extractvalue { i16, i1 } %133, 1
  br i1 %134, label %136, label %137

135:                                              ; preds = %123
  br label %128

136:                                              ; preds = %129
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %129
  %138 = extractvalue { i16, i1 } %133, 0
  store i16 %138, ptr %4, align 2
  br label %128
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__truncdfhf2(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = bitcast double %0 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = and i64 %5, -9223372036854775808
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 -86, i64 2, i1 false)
  %8 = sub i64 %6, 4544132024016830464
  %9 = sub i64 %6, 4679240012837945344
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %18, label %25

11:                                               ; preds = %48, %27
  %12 = load i16, ptr %4, align 2
  %13 = lshr i64 %7, 48
  %14 = trunc i64 %13 to i16
  %15 = or i16 %12, %14
  store i16 %15, ptr %3, align 2
  %16 = load i16, ptr %3, align 2
  %17 = bitcast i16 %16 to half
  ret half %17

18:                                               ; preds = %1
  %19 = lshr i64 %6, 42
  %20 = trunc i64 %19 to i16
  store i16 %20, ptr %4, align 2
  %21 = load i16, ptr %4, align 2
  %22 = sub i16 %21, -16384
  store i16 %22, ptr %4, align 2
  %23 = and i64 %6, 4398046511103
  %24 = icmp ugt i64 %23, 2199023255552
  br i1 %24, label %28, label %32

25:                                               ; preds = %1
  %26 = icmp ugt i64 %6, 9218868437227405312
  br i1 %26, label %49, label %58

27:                                               ; preds = %37, %35
  br label %11

28:                                               ; preds = %18
  %29 = load i16, ptr %4, align 2
  %30 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %29, i16 1)
  %31 = extractvalue { i16, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %18
  %33 = icmp eq i64 %23, 2199023255552
  br i1 %33, label %38, label %44

34:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %28
  %36 = extractvalue { i16, i1 } %30, 0
  store i16 %36, ptr %4, align 2
  br label %27

37:                                               ; preds = %46, %44
  br label %27

38:                                               ; preds = %32
  %39 = load i16, ptr %4, align 2
  %40 = load i16, ptr %4, align 2
  %41 = and i16 %40, 1
  %42 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %39, i16 %41)
  %43 = extractvalue { i16, i1 } %42, 1
  br i1 %43, label %45, label %46

44:                                               ; preds = %32
  br label %37

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i16, i1 } %42, 0
  store i16 %47, ptr %4, align 2
  br label %37

48:                                               ; preds = %65, %60
  br label %11

49:                                               ; preds = %25
  store i16 31744, ptr %4, align 2
  %50 = load i16, ptr %4, align 2
  %51 = or i16 %50, 512
  store i16 %51, ptr %4, align 2
  %52 = load i16, ptr %4, align 2
  %53 = and i64 %6, 2251799813685247
  %54 = lshr i64 %53, 42
  %55 = and i64 %54, 511
  %56 = sub i64 65535, %55
  %57 = icmp ule i64 %56, 65535
  br i1 %57, label %63, label %64

58:                                               ; preds = %25
  %59 = icmp uge i64 %6, 4679240012837945344
  br i1 %59, label %66, label %67

60:                                               ; preds = %63
  %61 = trunc i64 %55 to i16
  %62 = or i16 %52, %61
  store i16 %62, ptr %4, align 2
  br label %48

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

65:                                               ; preds = %88, %66
  br label %48

66:                                               ; preds = %58
  store i16 31744, ptr %4, align 2
  br label %65

67:                                               ; preds = %58
  %68 = lshr i64 %6, 52
  %69 = sub i64 4294967295, %68
  %70 = icmp ule i64 %69, 4294967295
  br i1 %70, label %75, label %76

71:                                               ; preds = %75
  %72 = trunc i64 %68 to i32
  %73 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 1008, i32 %72)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %67
  br label %71

76:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

77:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %71
  %79 = extractvalue { i32, i1 } %73, 0
  %80 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %79, i32 1)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %78
  %84 = extractvalue { i32, i1 } %80, 0
  %85 = and i64 %5, 4503599627370495
  %86 = or i64 %85, 4503599627370496
  %87 = icmp ugt i32 %84, 52
  br i1 %87, label %89, label %90

88:                                               ; preds = %124, %89
  br label %65

89:                                               ; preds = %83
  store i16 0, ptr %4, align 2
  br label %88

90:                                               ; preds = %83
  %91 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 64, i32 %84)
  %92 = extractvalue { i32, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %90
  %95 = extractvalue { i32, i1 } %91, 0
  %96 = sub i32 63, %95
  %97 = icmp ule i32 %96, 63
  br i1 %97, label %106, label %107

98:                                               ; preds = %106
  %99 = trunc i32 %95 to i6
  %100 = zext i6 %99 to i64
  %101 = shl i64 %86, %100
  %102 = icmp ne i64 %101, 0
  %103 = zext i1 %102 to i64
  %104 = sub i32 63, %84
  %105 = icmp ule i32 %104, 63
  br i1 %105, label %116, label %117

106:                                              ; preds = %94
  br label %98

107:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

108:                                              ; preds = %116
  %109 = trunc i32 %84 to i6
  %110 = zext i6 %109 to i64
  %111 = lshr i64 %86, %110
  %112 = or i64 %111, %103
  %113 = lshr i64 %112, 42
  %114 = sub i64 65535, %113
  %115 = icmp ule i64 %114, 65535
  br i1 %115, label %122, label %123

116:                                              ; preds = %98
  br label %108

117:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

118:                                              ; preds = %122
  %119 = trunc i64 %113 to i16
  store i16 %119, ptr %4, align 2
  %120 = and i64 %112, 4398046511103
  %121 = icmp ugt i64 %120, 2199023255552
  br i1 %121, label %125, label %129

122:                                              ; preds = %108
  br label %118

123:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @43)
  unreachable

124:                                              ; preds = %134, %132
  br label %88

125:                                              ; preds = %118
  %126 = load i16, ptr %4, align 2
  %127 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %126, i16 1)
  %128 = extractvalue { i16, i1 } %127, 1
  br i1 %128, label %131, label %132

129:                                              ; preds = %118
  %130 = icmp eq i64 %120, 2199023255552
  br i1 %130, label %135, label %141

131:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %125
  %133 = extractvalue { i16, i1 } %127, 0
  store i16 %133, ptr %4, align 2
  br label %124

134:                                              ; preds = %143, %141
  br label %124

135:                                              ; preds = %129
  %136 = load i16, ptr %4, align 2
  %137 = load i16, ptr %4, align 2
  %138 = and i16 %137, 1
  %139 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %136, i16 %138)
  %140 = extractvalue { i16, i1 } %139, 1
  br i1 %140, label %142, label %143

141:                                              ; preds = %129
  br label %134

142:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

143:                                              ; preds = %135
  %144 = extractvalue { i16, i1 } %139, 0
  store i16 %144, ptr %4, align 2
  br label %134
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__truncdfsf2(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast double %0 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = and i64 %5, -9223372036854775808
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %8 = sub i64 %6, 4039728865751334912
  %9 = sub i64 %6, 5183643171103440896
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %18, label %25

11:                                               ; preds = %48, %27
  %12 = load i32, ptr %4, align 4
  %13 = lshr i64 %7, 32
  %14 = trunc i64 %13 to i32
  %15 = or i32 %12, %14
  store i32 %15, ptr %3, align 4
  %16 = load i32, ptr %3, align 4
  %17 = bitcast i32 %16 to float
  ret float %17

18:                                               ; preds = %1
  %19 = lshr i64 %6, 29
  %20 = trunc i64 %19 to i32
  store i32 %20, ptr %4, align 4
  %21 = load i32, ptr %4, align 4
  %22 = sub i32 %21, -1073741824
  store i32 %22, ptr %4, align 4
  %23 = and i64 %6, 536870911
  %24 = icmp ugt i64 %23, 268435456
  br i1 %24, label %28, label %32

25:                                               ; preds = %1
  %26 = icmp ugt i64 %6, 9218868437227405312
  br i1 %26, label %49, label %58

27:                                               ; preds = %37, %35
  br label %11

28:                                               ; preds = %18
  %29 = load i32, ptr %4, align 4
  %30 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %29, i32 1)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %18
  %33 = icmp eq i64 %23, 268435456
  br i1 %33, label %38, label %44

34:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %28
  %36 = extractvalue { i32, i1 } %30, 0
  store i32 %36, ptr %4, align 4
  br label %27

37:                                               ; preds = %46, %44
  br label %27

38:                                               ; preds = %32
  %39 = load i32, ptr %4, align 4
  %40 = load i32, ptr %4, align 4
  %41 = and i32 %40, 1
  %42 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %39, i32 %41)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %45, label %46

44:                                               ; preds = %32
  br label %37

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i32, i1 } %42, 0
  store i32 %47, ptr %4, align 4
  br label %37

48:                                               ; preds = %65, %60
  br label %11

49:                                               ; preds = %25
  store i32 2139095040, ptr %4, align 4
  %50 = load i32, ptr %4, align 4
  %51 = or i32 %50, 4194304
  store i32 %51, ptr %4, align 4
  %52 = load i32, ptr %4, align 4
  %53 = and i64 %6, 2251799813685247
  %54 = lshr i64 %53, 29
  %55 = and i64 %54, 4194303
  %56 = sub i64 4294967295, %55
  %57 = icmp ule i64 %56, 4294967295
  br i1 %57, label %63, label %64

58:                                               ; preds = %25
  %59 = icmp uge i64 %6, 5183643171103440896
  br i1 %59, label %66, label %67

60:                                               ; preds = %63
  %61 = trunc i64 %55 to i32
  %62 = or i32 %52, %61
  store i32 %62, ptr %4, align 4
  br label %48

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

65:                                               ; preds = %88, %66
  br label %48

66:                                               ; preds = %58
  store i32 2139095040, ptr %4, align 4
  br label %65

67:                                               ; preds = %58
  %68 = lshr i64 %6, 52
  %69 = sub i64 4294967295, %68
  %70 = icmp ule i64 %69, 4294967295
  br i1 %70, label %75, label %76

71:                                               ; preds = %75
  %72 = trunc i64 %68 to i32
  %73 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 896, i32 %72)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %67
  br label %71

76:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

77:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %71
  %79 = extractvalue { i32, i1 } %73, 0
  %80 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %79, i32 1)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %78
  %84 = extractvalue { i32, i1 } %80, 0
  %85 = and i64 %5, 4503599627370495
  %86 = or i64 %85, 4503599627370496
  %87 = icmp ugt i32 %84, 52
  br i1 %87, label %89, label %90

88:                                               ; preds = %124, %89
  br label %65

89:                                               ; preds = %83
  store i32 0, ptr %4, align 4
  br label %88

90:                                               ; preds = %83
  %91 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 64, i32 %84)
  %92 = extractvalue { i32, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %90
  %95 = extractvalue { i32, i1 } %91, 0
  %96 = sub i32 63, %95
  %97 = icmp ule i32 %96, 63
  br i1 %97, label %106, label %107

98:                                               ; preds = %106
  %99 = trunc i32 %95 to i6
  %100 = zext i6 %99 to i64
  %101 = shl i64 %86, %100
  %102 = icmp ne i64 %101, 0
  %103 = zext i1 %102 to i64
  %104 = sub i32 63, %84
  %105 = icmp ule i32 %104, 63
  br i1 %105, label %116, label %117

106:                                              ; preds = %94
  br label %98

107:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

108:                                              ; preds = %116
  %109 = trunc i32 %84 to i6
  %110 = zext i6 %109 to i64
  %111 = lshr i64 %86, %110
  %112 = or i64 %111, %103
  %113 = lshr i64 %112, 29
  %114 = sub i64 4294967295, %113
  %115 = icmp ule i64 %114, 4294967295
  br i1 %115, label %122, label %123

116:                                              ; preds = %98
  br label %108

117:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

118:                                              ; preds = %122
  %119 = trunc i64 %113 to i32
  store i32 %119, ptr %4, align 4
  %120 = and i64 %112, 536870911
  %121 = icmp ugt i64 %120, 268435456
  br i1 %121, label %125, label %129

122:                                              ; preds = %108
  br label %118

123:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @44)
  unreachable

124:                                              ; preds = %134, %132
  br label %88

125:                                              ; preds = %118
  %126 = load i32, ptr %4, align 4
  %127 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %126, i32 1)
  %128 = extractvalue { i32, i1 } %127, 1
  br i1 %128, label %131, label %132

129:                                              ; preds = %118
  %130 = icmp eq i64 %120, 268435456
  br i1 %130, label %135, label %141

131:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %125
  %133 = extractvalue { i32, i1 } %127, 0
  store i32 %133, ptr %4, align 4
  br label %124

134:                                              ; preds = %143, %141
  br label %124

135:                                              ; preds = %129
  %136 = load i32, ptr %4, align 4
  %137 = load i32, ptr %4, align 4
  %138 = and i32 %137, 1
  %139 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %136, i32 %138)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %142, label %143

141:                                              ; preds = %129
  br label %134

142:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

143:                                              ; preds = %135
  %144 = extractvalue { i32, i1 } %139, 0
  store i32 %144, ptr %4, align 4
  br label %134
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__truncxfhf2(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca %math.F80, align 8
  %6 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, i80 %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %8 = load i16, ptr %7, align 2
  %9 = and i16 %8, -32768
  %10 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %11 = load i16, ptr %10, align 2
  %12 = and i16 %11, 32767
  store i16 %12, ptr %10, align 2
  %13 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = and i64 %14, 9223372036854775807
  store i64 %15, ptr %13, align 8
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 -86, i64 2, i1 false)
  %16 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %17 = load i16, ptr %16, align 2
  %18 = sub i16 %17, 16369
  %19 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %20 = load i16, ptr %19, align 2
  %21 = sub i16 %20, 16399
  %22 = icmp ult i16 %18, %21
  br i1 %22, label %28, label %44

23:                                               ; preds = %69, %48
  %24 = load i16, ptr %4, align 2
  %25 = or i16 %24, %9
  store i16 %25, ptr %3, align 2
  %26 = load i16, ptr %3, align 2
  %27 = bitcast i16 %26 to half
  ret half %27

28:                                               ; preds = %1
  %29 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %30 = load i16, ptr %29, align 2
  %31 = shl i16 %30, 10
  store i16 %31, ptr %4, align 2
  %32 = load i16, ptr %4, align 2
  %33 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %34 = load i64, ptr %33, align 8
  %35 = lshr i64 %34, 53
  %36 = trunc i64 %35 to i16
  %37 = or i16 %32, %36
  store i16 %37, ptr %4, align 2
  %38 = load i16, ptr %4, align 2
  %39 = sub i16 %38, -16384
  store i16 %39, ptr %4, align 2
  %40 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %41 = load i64, ptr %40, align 8
  %42 = and i64 %41, 9007199254740991
  %43 = icmp ugt i64 %42, 4503599627370496
  br i1 %43, label %49, label %53

44:                                               ; preds = %1
  %45 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %46 = load i16, ptr %45, align 2
  %47 = icmp eq i16 %46, 32767
  br i1 %47, label %72, label %76

48:                                               ; preds = %58, %56
  br label %23

49:                                               ; preds = %28
  %50 = load i16, ptr %4, align 2
  %51 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %50, i16 1)
  %52 = extractvalue { i16, i1 } %51, 1
  br i1 %52, label %55, label %56

53:                                               ; preds = %28
  %54 = icmp eq i64 %42, 4503599627370496
  br i1 %54, label %59, label %65

55:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

56:                                               ; preds = %49
  %57 = extractvalue { i16, i1 } %51, 0
  store i16 %57, ptr %4, align 2
  br label %48

58:                                               ; preds = %67, %65
  br label %48

59:                                               ; preds = %53
  %60 = load i16, ptr %4, align 2
  %61 = load i16, ptr %4, align 2
  %62 = and i16 %61, 1
  %63 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %60, i16 %62)
  %64 = extractvalue { i16, i1 } %63, 1
  br i1 %64, label %66, label %67

65:                                               ; preds = %53
  br label %58

66:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %59
  %68 = extractvalue { i16, i1 } %63, 0
  store i16 %68, ptr %4, align 2
  br label %58

69:                                               ; preds = %96, %91
  br label %23

70:                                               ; preds = %76, %72
  %71 = phi i1 [ %75, %72 ], [ false, %76 ]
  br i1 %71, label %77, label %87

72:                                               ; preds = %44
  %73 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %74 = load i64, ptr %73, align 8
  %75 = icmp ne i64 %74, 0
  br label %70

76:                                               ; preds = %44
  br label %70

77:                                               ; preds = %70
  store i16 31744, ptr %4, align 2
  %78 = load i16, ptr %4, align 2
  %79 = or i16 %78, 512
  store i16 %79, ptr %4, align 2
  %80 = load i16, ptr %4, align 2
  %81 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %82 = load i64, ptr %81, align 8
  %83 = lshr i64 %82, 53
  %84 = and i64 %83, 511
  %85 = sub i64 65535, %84
  %86 = icmp ule i64 %85, 65535
  br i1 %86, label %94, label %95

87:                                               ; preds = %70
  %88 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %89 = load i16, ptr %88, align 2
  %90 = icmp uge i16 %89, 16399
  br i1 %90, label %97, label %98

91:                                               ; preds = %94
  %92 = trunc i64 %84 to i16
  %93 = or i16 %80, %92
  store i16 %93, ptr %4, align 2
  br label %69

94:                                               ; preds = %77
  br label %91

95:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @45)
  unreachable

96:                                               ; preds = %107, %97
  br label %69

97:                                               ; preds = %87
  store i16 31744, ptr %4, align 2
  br label %96

98:                                               ; preds = %87
  %99 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %100 = load i16, ptr %99, align 2
  %101 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 16368, i16 %100)
  %102 = extractvalue { i16, i1 } %101, 1
  br i1 %102, label %103, label %104

103:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %98
  %105 = extractvalue { i16, i1 } %101, 0
  %106 = icmp ugt i16 %105, 63
  br i1 %106, label %108, label %109

107:                                              ; preds = %142, %108
  br label %96

108:                                              ; preds = %104
  store i16 0, ptr %4, align 2
  br label %107

109:                                              ; preds = %104
  %110 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %111 = load i64, ptr %110, align 8
  %112 = sub i16 63, %105
  %113 = icmp ule i16 %112, 63
  br i1 %113, label %123, label %124

114:                                              ; preds = %123
  %115 = trunc i16 %105 to i6
  %116 = zext i6 %115 to i64
  %117 = shl i64 %111, %116
  %118 = icmp ne i64 %117, 0
  %119 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %120 = load i64, ptr %119, align 8
  %121 = sub i16 63, %105
  %122 = icmp ule i16 %121, 63
  br i1 %122, label %134, label %135

123:                                              ; preds = %109
  br label %114

124:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @45)
  unreachable

125:                                              ; preds = %134
  %126 = trunc i16 %105 to i6
  %127 = zext i6 %126 to i64
  %128 = lshr i64 %120, %127
  %129 = zext i1 %118 to i64
  %130 = or i64 %128, %129
  %131 = lshr i64 %130, 53
  %132 = sub i64 65535, %131
  %133 = icmp ule i64 %132, 65535
  br i1 %133, label %140, label %141

134:                                              ; preds = %114
  br label %125

135:                                              ; preds = %114
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @45)
  unreachable

136:                                              ; preds = %140
  %137 = trunc i64 %131 to i16
  store i16 %137, ptr %4, align 2
  %138 = and i64 %130, 9007199254740991
  %139 = icmp ugt i64 %138, 4503599627370496
  br i1 %139, label %143, label %147

140:                                              ; preds = %125
  br label %136

141:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @45)
  unreachable

142:                                              ; preds = %152, %150
  br label %107

143:                                              ; preds = %136
  %144 = load i16, ptr %4, align 2
  %145 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %144, i16 1)
  %146 = extractvalue { i16, i1 } %145, 1
  br i1 %146, label %149, label %150

147:                                              ; preds = %136
  %148 = icmp eq i64 %138, 4503599627370496
  br i1 %148, label %153, label %159

149:                                              ; preds = %143
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

150:                                              ; preds = %143
  %151 = extractvalue { i16, i1 } %145, 0
  store i16 %151, ptr %4, align 2
  br label %142

152:                                              ; preds = %161, %159
  br label %142

153:                                              ; preds = %147
  %154 = load i16, ptr %4, align 2
  %155 = load i16, ptr %4, align 2
  %156 = and i16 %155, 1
  %157 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %154, i16 %156)
  %158 = extractvalue { i16, i1 } %157, 1
  br i1 %158, label %160, label %161

159:                                              ; preds = %147
  br label %152

160:                                              ; preds = %153
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

161:                                              ; preds = %153
  %162 = extractvalue { i16, i1 } %157, 0
  store i16 %162, ptr %4, align 2
  br label %152
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__truncxfsf2(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %math.F80, align 8
  %6 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, i80 %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %8 = load i16, ptr %7, align 2
  %9 = and i16 %8, -32768
  %10 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %11 = load i16, ptr %10, align 2
  %12 = and i16 %11, 32767
  store i16 %12, ptr %10, align 2
  %13 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = and i64 %14, 9223372036854775807
  store i64 %15, ptr %13, align 8
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %16 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %17 = load i16, ptr %16, align 2
  %18 = sub i16 %17, 16257
  %19 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %20 = load i16, ptr %19, align 2
  %21 = sub i16 %20, 16511
  %22 = icmp ult i16 %18, %21
  br i1 %22, label %30, label %47

23:                                               ; preds = %72, %51
  %24 = load i32, ptr %4, align 4
  %25 = zext i16 %9 to i32
  %26 = shl i32 %25, 16
  %27 = or i32 %24, %26
  store i32 %27, ptr %3, align 4
  %28 = load i32, ptr %3, align 4
  %29 = bitcast i32 %28 to float
  ret float %29

30:                                               ; preds = %1
  %31 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %32 = load i16, ptr %31, align 2
  %33 = zext i16 %32 to i32
  %34 = shl i32 %33, 23
  store i32 %34, ptr %4, align 4
  %35 = load i32, ptr %4, align 4
  %36 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %37 = load i64, ptr %36, align 8
  %38 = lshr i64 %37, 40
  %39 = trunc i64 %38 to i32
  %40 = or i32 %35, %39
  store i32 %40, ptr %4, align 4
  %41 = load i32, ptr %4, align 4
  %42 = sub i32 %41, -1073741824
  store i32 %42, ptr %4, align 4
  %43 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %44 = load i64, ptr %43, align 8
  %45 = and i64 %44, 1099511627775
  %46 = icmp ugt i64 %45, 549755813888
  br i1 %46, label %52, label %56

47:                                               ; preds = %1
  %48 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %49 = load i16, ptr %48, align 2
  %50 = icmp eq i16 %49, 32767
  br i1 %50, label %75, label %79

51:                                               ; preds = %61, %59
  br label %23

52:                                               ; preds = %30
  %53 = load i32, ptr %4, align 4
  %54 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %53, i32 1)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %58, label %59

56:                                               ; preds = %30
  %57 = icmp eq i64 %45, 549755813888
  br i1 %57, label %62, label %68

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i32, i1 } %54, 0
  store i32 %60, ptr %4, align 4
  br label %51

61:                                               ; preds = %70, %68
  br label %51

62:                                               ; preds = %56
  %63 = load i32, ptr %4, align 4
  %64 = load i32, ptr %4, align 4
  %65 = and i32 %64, 1
  %66 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %63, i32 %65)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %69, label %70

68:                                               ; preds = %56
  br label %61

69:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %62
  %71 = extractvalue { i32, i1 } %66, 0
  store i32 %71, ptr %4, align 4
  br label %61

72:                                               ; preds = %99, %94
  br label %23

73:                                               ; preds = %79, %75
  %74 = phi i1 [ %78, %75 ], [ false, %79 ]
  br i1 %74, label %80, label %90

75:                                               ; preds = %47
  %76 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %77 = load i64, ptr %76, align 8
  %78 = icmp ne i64 %77, 0
  br label %73

79:                                               ; preds = %47
  br label %73

80:                                               ; preds = %73
  store i32 2139095040, ptr %4, align 4
  %81 = load i32, ptr %4, align 4
  %82 = or i32 %81, 4194304
  store i32 %82, ptr %4, align 4
  %83 = load i32, ptr %4, align 4
  %84 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %85 = load i64, ptr %84, align 8
  %86 = lshr i64 %85, 40
  %87 = and i64 %86, 4194303
  %88 = sub i64 4294967295, %87
  %89 = icmp ule i64 %88, 4294967295
  br i1 %89, label %97, label %98

90:                                               ; preds = %73
  %91 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %92 = load i16, ptr %91, align 2
  %93 = icmp uge i16 %92, 16511
  br i1 %93, label %100, label %101

94:                                               ; preds = %97
  %95 = trunc i64 %87 to i32
  %96 = or i32 %83, %95
  store i32 %96, ptr %4, align 4
  br label %72

97:                                               ; preds = %80
  br label %94

98:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @46)
  unreachable

99:                                               ; preds = %110, %100
  br label %72

100:                                              ; preds = %90
  store i32 2139095040, ptr %4, align 4
  br label %99

101:                                              ; preds = %90
  %102 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %103 = load i16, ptr %102, align 2
  %104 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 16256, i16 %103)
  %105 = extractvalue { i16, i1 } %104, 1
  br i1 %105, label %106, label %107

106:                                              ; preds = %101
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %101
  %108 = extractvalue { i16, i1 } %104, 0
  %109 = icmp ugt i16 %108, 63
  br i1 %109, label %111, label %112

110:                                              ; preds = %145, %111
  br label %99

111:                                              ; preds = %107
  store i32 0, ptr %4, align 4
  br label %110

112:                                              ; preds = %107
  %113 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %114 = load i64, ptr %113, align 8
  %115 = sub i16 63, %108
  %116 = icmp ule i16 %115, 63
  br i1 %116, label %126, label %127

117:                                              ; preds = %126
  %118 = trunc i16 %108 to i6
  %119 = zext i6 %118 to i64
  %120 = shl i64 %114, %119
  %121 = icmp ne i64 %120, 0
  %122 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %123 = load i64, ptr %122, align 8
  %124 = sub i16 63, %108
  %125 = icmp ule i16 %124, 63
  br i1 %125, label %137, label %138

126:                                              ; preds = %112
  br label %117

127:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @46)
  unreachable

128:                                              ; preds = %137
  %129 = trunc i16 %108 to i6
  %130 = zext i6 %129 to i64
  %131 = lshr i64 %123, %130
  %132 = zext i1 %121 to i64
  %133 = or i64 %131, %132
  %134 = lshr i64 %133, 40
  %135 = sub i64 4294967295, %134
  %136 = icmp ule i64 %135, 4294967295
  br i1 %136, label %143, label %144

137:                                              ; preds = %117
  br label %128

138:                                              ; preds = %117
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @46)
  unreachable

139:                                              ; preds = %143
  %140 = trunc i64 %134 to i32
  store i32 %140, ptr %4, align 4
  %141 = and i64 %133, 1099511627775
  %142 = icmp ugt i64 %141, 549755813888
  br i1 %142, label %146, label %150

143:                                              ; preds = %128
  br label %139

144:                                              ; preds = %128
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @46)
  unreachable

145:                                              ; preds = %155, %153
  br label %110

146:                                              ; preds = %139
  %147 = load i32, ptr %4, align 4
  %148 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %147, i32 1)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %152, label %153

150:                                              ; preds = %139
  %151 = icmp eq i64 %141, 549755813888
  br i1 %151, label %156, label %162

152:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

153:                                              ; preds = %146
  %154 = extractvalue { i32, i1 } %148, 0
  store i32 %154, ptr %4, align 4
  br label %145

155:                                              ; preds = %164, %162
  br label %145

156:                                              ; preds = %150
  %157 = load i32, ptr %4, align 4
  %158 = load i32, ptr %4, align 4
  %159 = and i32 %158, 1
  %160 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %157, i32 %159)
  %161 = extractvalue { i32, i1 } %160, 1
  br i1 %161, label %163, label %164

162:                                              ; preds = %150
  br label %155

163:                                              ; preds = %156
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

164:                                              ; preds = %156
  %165 = extractvalue { i32, i1 } %160, 0
  store i32 %165, ptr %4, align 4
  br label %155
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__truncxfdf2(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %math.F80, align 8
  %6 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, i80 %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %8 = load i16, ptr %7, align 2
  %9 = and i16 %8, -32768
  %10 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %11 = load i16, ptr %10, align 2
  %12 = and i16 %11, 32767
  store i16 %12, ptr %10, align 2
  %13 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = and i64 %14, 9223372036854775807
  store i64 %15, ptr %13, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %16 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %17 = load i16, ptr %16, align 2
  %18 = sub i16 %17, 15361
  %19 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %20 = load i16, ptr %19, align 2
  %21 = sub i16 %20, 17407
  %22 = icmp ult i16 %18, %21
  br i1 %22, label %30, label %46

23:                                               ; preds = %71, %50
  %24 = load i64, ptr %4, align 8
  %25 = zext i16 %9 to i64
  %26 = shl i64 %25, 48
  %27 = or i64 %24, %26
  store i64 %27, ptr %3, align 8
  %28 = load i64, ptr %3, align 8
  %29 = bitcast i64 %28 to double
  ret double %29

30:                                               ; preds = %1
  %31 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %32 = load i16, ptr %31, align 2
  %33 = zext i16 %32 to i64
  %34 = shl i64 %33, 52
  store i64 %34, ptr %4, align 8
  %35 = load i64, ptr %4, align 8
  %36 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %37 = load i64, ptr %36, align 8
  %38 = lshr i64 %37, 11
  %39 = or i64 %35, %38
  store i64 %39, ptr %4, align 8
  %40 = load i64, ptr %4, align 8
  %41 = sub i64 %40, -4611686018427387904
  store i64 %41, ptr %4, align 8
  %42 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %43 = load i64, ptr %42, align 8
  %44 = and i64 %43, 2047
  %45 = icmp ugt i64 %44, 1024
  br i1 %45, label %51, label %55

46:                                               ; preds = %1
  %47 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %48 = load i16, ptr %47, align 2
  %49 = icmp eq i16 %48, 32767
  br i1 %49, label %74, label %78

50:                                               ; preds = %60, %58
  br label %23

51:                                               ; preds = %30
  %52 = load i64, ptr %4, align 8
  %53 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %52, i64 1)
  %54 = extractvalue { i64, i1 } %53, 1
  br i1 %54, label %57, label %58

55:                                               ; preds = %30
  %56 = icmp eq i64 %44, 1024
  br i1 %56, label %61, label %67

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i64, i1 } %53, 0
  store i64 %59, ptr %4, align 8
  br label %50

60:                                               ; preds = %69, %67
  br label %50

61:                                               ; preds = %55
  %62 = load i64, ptr %4, align 8
  %63 = load i64, ptr %4, align 8
  %64 = and i64 %63, 1
  %65 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %62, i64 %64)
  %66 = extractvalue { i64, i1 } %65, 1
  br i1 %66, label %68, label %69

67:                                               ; preds = %55
  br label %60

68:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %61
  %70 = extractvalue { i64, i1 } %65, 0
  store i64 %70, ptr %4, align 8
  br label %60

71:                                               ; preds = %92, %79
  br label %23

72:                                               ; preds = %78, %74
  %73 = phi i1 [ %77, %74 ], [ false, %78 ]
  br i1 %73, label %79, label %88

74:                                               ; preds = %46
  %75 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %76 = load i64, ptr %75, align 8
  %77 = icmp ne i64 %76, 0
  br label %72

78:                                               ; preds = %46
  br label %72

79:                                               ; preds = %72
  store i64 9218868437227405312, ptr %4, align 8
  %80 = load i64, ptr %4, align 8
  %81 = or i64 %80, 2251799813685248
  store i64 %81, ptr %4, align 8
  %82 = load i64, ptr %4, align 8
  %83 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %84 = load i64, ptr %83, align 8
  %85 = lshr i64 %84, 11
  %86 = and i64 %85, 2251799813685247
  %87 = or i64 %82, %86
  store i64 %87, ptr %4, align 8
  br label %71

88:                                               ; preds = %72
  %89 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %90 = load i16, ptr %89, align 2
  %91 = icmp uge i16 %90, 17407
  br i1 %91, label %93, label %94

92:                                               ; preds = %103, %93
  br label %71

93:                                               ; preds = %88
  store i64 9218868437227405312, ptr %4, align 8
  br label %92

94:                                               ; preds = %88
  %95 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 1
  %96 = load i16, ptr %95, align 2
  %97 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 15360, i16 %96)
  %98 = extractvalue { i16, i1 } %97, 1
  br i1 %98, label %99, label %100

99:                                               ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %94
  %101 = extractvalue { i16, i1 } %97, 0
  %102 = icmp ugt i16 %101, 63
  br i1 %102, label %104, label %105

103:                                              ; preds = %132, %104
  br label %92

104:                                              ; preds = %100
  store i64 0, ptr %4, align 8
  br label %103

105:                                              ; preds = %100
  %106 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %107 = load i64, ptr %106, align 8
  %108 = sub i16 63, %101
  %109 = icmp ule i16 %108, 63
  br i1 %109, label %119, label %120

110:                                              ; preds = %119
  %111 = trunc i16 %101 to i6
  %112 = zext i6 %111 to i64
  %113 = shl i64 %107, %112
  %114 = icmp ne i64 %113, 0
  %115 = getelementptr inbounds %math.F80, ptr %6, i32 0, i32 0
  %116 = load i64, ptr %115, align 8
  %117 = sub i16 63, %101
  %118 = icmp ule i16 %117, 63
  br i1 %118, label %130, label %131

119:                                              ; preds = %105
  br label %110

120:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @47)
  unreachable

121:                                              ; preds = %130
  %122 = trunc i16 %101 to i6
  %123 = zext i6 %122 to i64
  %124 = lshr i64 %116, %123
  %125 = zext i1 %114 to i64
  %126 = or i64 %124, %125
  %127 = lshr i64 %126, 11
  store i64 %127, ptr %4, align 8
  %128 = and i64 %126, 2047
  %129 = icmp ugt i64 %128, 1024
  br i1 %129, label %133, label %137

130:                                              ; preds = %110
  br label %121

131:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @47)
  unreachable

132:                                              ; preds = %142, %140
  br label %103

133:                                              ; preds = %121
  %134 = load i64, ptr %4, align 8
  %135 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %134, i64 1)
  %136 = extractvalue { i64, i1 } %135, 1
  br i1 %136, label %139, label %140

137:                                              ; preds = %121
  %138 = icmp eq i64 %128, 1024
  br i1 %138, label %143, label %149

139:                                              ; preds = %133
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

140:                                              ; preds = %133
  %141 = extractvalue { i64, i1 } %135, 0
  store i64 %141, ptr %4, align 8
  br label %132

142:                                              ; preds = %151, %149
  br label %132

143:                                              ; preds = %137
  %144 = load i64, ptr %4, align 8
  %145 = load i64, ptr %4, align 8
  %146 = and i64 %145, 1
  %147 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %144, i64 %146)
  %148 = extractvalue { i64, i1 } %147, 1
  br i1 %148, label %150, label %151

149:                                              ; preds = %137
  br label %142

150:                                              ; preds = %143
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

151:                                              ; preds = %143
  %152 = extractvalue { i64, i1 } %147, 0
  store i64 %152, ptr %4, align 8
  br label %142
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__trunctfhf2(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = bitcast fp128 %0 to i128
  %6 = and i128 %5, 170141183460469231731687303715884105727
  %7 = and i128 %5, -170141183460469231731687303715884105728
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 -86, i64 2, i1 false)
  %8 = sub i128 %6, 84992707277356593451415694413003751424
  %9 = sub i128 %6, 85148476183112638280271609302880354304
  %10 = icmp ult i128 %8, %9
  br i1 %10, label %18, label %25

11:                                               ; preds = %48, %27
  %12 = load i16, ptr %4, align 2
  %13 = lshr i128 %7, 112
  %14 = trunc i128 %13 to i16
  %15 = or i16 %12, %14
  store i16 %15, ptr %3, align 2
  %16 = load i16, ptr %3, align 2
  %17 = bitcast i16 %16 to half
  ret half %17

18:                                               ; preds = %1
  %19 = lshr i128 %6, 102
  %20 = trunc i128 %19 to i16
  store i16 %20, ptr %4, align 2
  %21 = load i16, ptr %4, align 2
  %22 = sub i16 %21, -16384
  store i16 %22, ptr %4, align 2
  %23 = and i128 %6, 5070602400912917605986812821503
  %24 = icmp ugt i128 %23, 2535301200456458802993406410752
  br i1 %24, label %28, label %32

25:                                               ; preds = %1
  %26 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br i1 %26, label %49, label %58

27:                                               ; preds = %37, %35
  br label %11

28:                                               ; preds = %18
  %29 = load i16, ptr %4, align 2
  %30 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %29, i16 1)
  %31 = extractvalue { i16, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %18
  %33 = icmp eq i128 %23, 2535301200456458802993406410752
  br i1 %33, label %38, label %44

34:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %28
  %36 = extractvalue { i16, i1 } %30, 0
  store i16 %36, ptr %4, align 2
  br label %27

37:                                               ; preds = %46, %44
  br label %27

38:                                               ; preds = %32
  %39 = load i16, ptr %4, align 2
  %40 = load i16, ptr %4, align 2
  %41 = and i16 %40, 1
  %42 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %39, i16 %41)
  %43 = extractvalue { i16, i1 } %42, 1
  br i1 %43, label %45, label %46

44:                                               ; preds = %32
  br label %37

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i16, i1 } %42, 0
  store i16 %47, ptr %4, align 2
  br label %37

48:                                               ; preds = %65, %60
  br label %11

49:                                               ; preds = %25
  store i16 31744, ptr %4, align 2
  %50 = load i16, ptr %4, align 2
  %51 = or i16 %50, 512
  store i16 %51, ptr %4, align 2
  %52 = load i16, ptr %4, align 2
  %53 = and i128 %6, 2596148429267413814265248164610047
  %54 = lshr i128 %53, 102
  %55 = and i128 %54, 511
  %56 = sub i128 65535, %55
  %57 = icmp ule i128 %56, 65535
  br i1 %57, label %63, label %64

58:                                               ; preds = %25
  %59 = icmp uge i128 %6, 85148476183112638280271609302880354304
  br i1 %59, label %66, label %67

60:                                               ; preds = %63
  %61 = trunc i128 %55 to i16
  %62 = or i16 %52, %61
  store i16 %62, ptr %4, align 2
  br label %48

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

65:                                               ; preds = %88, %66
  br label %48

66:                                               ; preds = %58
  store i16 31744, ptr %4, align 2
  br label %65

67:                                               ; preds = %58
  %68 = lshr i128 %6, 112
  %69 = sub i128 4294967295, %68
  %70 = icmp ule i128 %69, 4294967295
  br i1 %70, label %75, label %76

71:                                               ; preds = %75
  %72 = trunc i128 %68 to i32
  %73 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16368, i32 %72)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %67
  br label %71

76:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

77:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %71
  %79 = extractvalue { i32, i1 } %73, 0
  %80 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %79, i32 1)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %78
  %84 = extractvalue { i32, i1 } %80, 0
  %85 = and i128 %5, 5192296858534827628530496329220095
  %86 = or i128 %85, 5192296858534827628530496329220096
  %87 = icmp ugt i32 %84, 112
  br i1 %87, label %89, label %90

88:                                               ; preds = %124, %89
  br label %65

89:                                               ; preds = %83
  store i16 0, ptr %4, align 2
  br label %88

90:                                               ; preds = %83
  %91 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 128, i32 %84)
  %92 = extractvalue { i32, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %90
  %95 = extractvalue { i32, i1 } %91, 0
  %96 = sub i32 127, %95
  %97 = icmp ule i32 %96, 127
  br i1 %97, label %106, label %107

98:                                               ; preds = %106
  %99 = trunc i32 %95 to i7
  %100 = zext i7 %99 to i128
  %101 = shl i128 %86, %100
  %102 = icmp ne i128 %101, 0
  %103 = zext i1 %102 to i128
  %104 = sub i32 127, %84
  %105 = icmp ule i32 %104, 127
  br i1 %105, label %116, label %117

106:                                              ; preds = %94
  br label %98

107:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

108:                                              ; preds = %116
  %109 = trunc i32 %84 to i7
  %110 = zext i7 %109 to i128
  %111 = lshr i128 %86, %110
  %112 = or i128 %111, %103
  %113 = lshr i128 %112, 102
  %114 = sub i128 65535, %113
  %115 = icmp ule i128 %114, 65535
  br i1 %115, label %122, label %123

116:                                              ; preds = %98
  br label %108

117:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

118:                                              ; preds = %122
  %119 = trunc i128 %113 to i16
  store i16 %119, ptr %4, align 2
  %120 = and i128 %112, 5070602400912917605986812821503
  %121 = icmp ugt i128 %120, 2535301200456458802993406410752
  br i1 %121, label %125, label %129

122:                                              ; preds = %108
  br label %118

123:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @48)
  unreachable

124:                                              ; preds = %134, %132
  br label %88

125:                                              ; preds = %118
  %126 = load i16, ptr %4, align 2
  %127 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %126, i16 1)
  %128 = extractvalue { i16, i1 } %127, 1
  br i1 %128, label %131, label %132

129:                                              ; preds = %118
  %130 = icmp eq i128 %120, 2535301200456458802993406410752
  br i1 %130, label %135, label %141

131:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %125
  %133 = extractvalue { i16, i1 } %127, 0
  store i16 %133, ptr %4, align 2
  br label %124

134:                                              ; preds = %143, %141
  br label %124

135:                                              ; preds = %129
  %136 = load i16, ptr %4, align 2
  %137 = load i16, ptr %4, align 2
  %138 = and i16 %137, 1
  %139 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %136, i16 %138)
  %140 = extractvalue { i16, i1 } %139, 1
  br i1 %140, label %142, label %143

141:                                              ; preds = %129
  br label %134

142:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

143:                                              ; preds = %135
  %144 = extractvalue { i16, i1 } %139, 0
  store i16 %144, ptr %4, align 2
  br label %134
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__trunctfsf2(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast fp128 %0 to i128
  %6 = and i128 %5, 170141183460469231731687303715884105727
  %7 = and i128 %5, -170141183460469231731687303715884105728
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %8 = sub i128 %6, 84411170029200692757020278824131100672
  %9 = sub i128 %6, 85730013431268538974667024891753005056
  %10 = icmp ult i128 %8, %9
  br i1 %10, label %18, label %25

11:                                               ; preds = %48, %27
  %12 = load i32, ptr %4, align 4
  %13 = lshr i128 %7, 96
  %14 = trunc i128 %13 to i32
  %15 = or i32 %12, %14
  store i32 %15, ptr %3, align 4
  %16 = load i32, ptr %3, align 4
  %17 = bitcast i32 %16 to float
  ret float %17

18:                                               ; preds = %1
  %19 = lshr i128 %6, 89
  %20 = trunc i128 %19 to i32
  store i32 %20, ptr %4, align 4
  %21 = load i32, ptr %4, align 4
  %22 = sub i32 %21, -1073741824
  store i32 %22, ptr %4, align 4
  %23 = and i128 %6, 618970019642690137449562111
  %24 = icmp ugt i128 %23, 309485009821345068724781056
  br i1 %24, label %28, label %32

25:                                               ; preds = %1
  %26 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br i1 %26, label %49, label %58

27:                                               ; preds = %37, %35
  br label %11

28:                                               ; preds = %18
  %29 = load i32, ptr %4, align 4
  %30 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %29, i32 1)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %18
  %33 = icmp eq i128 %23, 309485009821345068724781056
  br i1 %33, label %38, label %44

34:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %28
  %36 = extractvalue { i32, i1 } %30, 0
  store i32 %36, ptr %4, align 4
  br label %27

37:                                               ; preds = %46, %44
  br label %27

38:                                               ; preds = %32
  %39 = load i32, ptr %4, align 4
  %40 = load i32, ptr %4, align 4
  %41 = and i32 %40, 1
  %42 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %39, i32 %41)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %45, label %46

44:                                               ; preds = %32
  br label %37

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i32, i1 } %42, 0
  store i32 %47, ptr %4, align 4
  br label %37

48:                                               ; preds = %65, %60
  br label %11

49:                                               ; preds = %25
  store i32 2139095040, ptr %4, align 4
  %50 = load i32, ptr %4, align 4
  %51 = or i32 %50, 4194304
  store i32 %51, ptr %4, align 4
  %52 = load i32, ptr %4, align 4
  %53 = and i128 %6, 2596148429267413814265248164610047
  %54 = lshr i128 %53, 89
  %55 = and i128 %54, 4194303
  %56 = sub i128 4294967295, %55
  %57 = icmp ule i128 %56, 4294967295
  br i1 %57, label %63, label %64

58:                                               ; preds = %25
  %59 = icmp uge i128 %6, 85730013431268538974667024891753005056
  br i1 %59, label %66, label %67

60:                                               ; preds = %63
  %61 = trunc i128 %55 to i32
  %62 = or i32 %52, %61
  store i32 %62, ptr %4, align 4
  br label %48

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

65:                                               ; preds = %88, %66
  br label %48

66:                                               ; preds = %58
  store i32 2139095040, ptr %4, align 4
  br label %65

67:                                               ; preds = %58
  %68 = lshr i128 %6, 112
  %69 = sub i128 4294967295, %68
  %70 = icmp ule i128 %69, 4294967295
  br i1 %70, label %75, label %76

71:                                               ; preds = %75
  %72 = trunc i128 %68 to i32
  %73 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16256, i32 %72)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %67
  br label %71

76:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

77:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %71
  %79 = extractvalue { i32, i1 } %73, 0
  %80 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %79, i32 1)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %78
  %84 = extractvalue { i32, i1 } %80, 0
  %85 = and i128 %5, 5192296858534827628530496329220095
  %86 = or i128 %85, 5192296858534827628530496329220096
  %87 = icmp ugt i32 %84, 112
  br i1 %87, label %89, label %90

88:                                               ; preds = %124, %89
  br label %65

89:                                               ; preds = %83
  store i32 0, ptr %4, align 4
  br label %88

90:                                               ; preds = %83
  %91 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 128, i32 %84)
  %92 = extractvalue { i32, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %90
  %95 = extractvalue { i32, i1 } %91, 0
  %96 = sub i32 127, %95
  %97 = icmp ule i32 %96, 127
  br i1 %97, label %106, label %107

98:                                               ; preds = %106
  %99 = trunc i32 %95 to i7
  %100 = zext i7 %99 to i128
  %101 = shl i128 %86, %100
  %102 = icmp ne i128 %101, 0
  %103 = zext i1 %102 to i128
  %104 = sub i32 127, %84
  %105 = icmp ule i32 %104, 127
  br i1 %105, label %116, label %117

106:                                              ; preds = %94
  br label %98

107:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

108:                                              ; preds = %116
  %109 = trunc i32 %84 to i7
  %110 = zext i7 %109 to i128
  %111 = lshr i128 %86, %110
  %112 = or i128 %111, %103
  %113 = lshr i128 %112, 89
  %114 = sub i128 4294967295, %113
  %115 = icmp ule i128 %114, 4294967295
  br i1 %115, label %122, label %123

116:                                              ; preds = %98
  br label %108

117:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

118:                                              ; preds = %122
  %119 = trunc i128 %113 to i32
  store i32 %119, ptr %4, align 4
  %120 = and i128 %112, 618970019642690137449562111
  %121 = icmp ugt i128 %120, 309485009821345068724781056
  br i1 %121, label %125, label %129

122:                                              ; preds = %108
  br label %118

123:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @49)
  unreachable

124:                                              ; preds = %134, %132
  br label %88

125:                                              ; preds = %118
  %126 = load i32, ptr %4, align 4
  %127 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %126, i32 1)
  %128 = extractvalue { i32, i1 } %127, 1
  br i1 %128, label %131, label %132

129:                                              ; preds = %118
  %130 = icmp eq i128 %120, 309485009821345068724781056
  br i1 %130, label %135, label %141

131:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %125
  %133 = extractvalue { i32, i1 } %127, 0
  store i32 %133, ptr %4, align 4
  br label %124

134:                                              ; preds = %143, %141
  br label %124

135:                                              ; preds = %129
  %136 = load i32, ptr %4, align 4
  %137 = load i32, ptr %4, align 4
  %138 = and i32 %137, 1
  %139 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %136, i32 %138)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %142, label %143

141:                                              ; preds = %129
  br label %134

142:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

143:                                              ; preds = %135
  %144 = extractvalue { i32, i1 } %139, 0
  store i32 %144, ptr %4, align 4
  br label %134
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__trunctfdf2(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast fp128 %0 to i128
  %6 = and i128 %5, 170141183460469231731687303715884105727
  %7 = and i128 %5, -170141183460469231731687303715884105728
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %8 = sub i128 %6, 79758872043953487201856954113149894656
  %9 = sub i128 %6, 90382311416515744529830349602734211072
  %10 = icmp ult i128 %8, %9
  br i1 %10, label %18, label %25

11:                                               ; preds = %48, %27
  %12 = load i64, ptr %4, align 8
  %13 = lshr i128 %7, 64
  %14 = trunc i128 %13 to i64
  %15 = or i64 %12, %14
  store i64 %15, ptr %3, align 8
  %16 = load i64, ptr %3, align 8
  %17 = bitcast i64 %16 to double
  ret double %17

18:                                               ; preds = %1
  %19 = lshr i128 %6, 60
  %20 = trunc i128 %19 to i64
  store i64 %20, ptr %4, align 8
  %21 = load i64, ptr %4, align 8
  %22 = sub i64 %21, -4611686018427387904
  store i64 %22, ptr %4, align 8
  %23 = and i128 %6, 1152921504606846975
  %24 = icmp ugt i128 %23, 576460752303423488
  br i1 %24, label %28, label %32

25:                                               ; preds = %1
  %26 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br i1 %26, label %49, label %58

27:                                               ; preds = %37, %35
  br label %11

28:                                               ; preds = %18
  %29 = load i64, ptr %4, align 8
  %30 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %29, i64 1)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %18
  %33 = icmp eq i128 %23, 576460752303423488
  br i1 %33, label %38, label %44

34:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %28
  %36 = extractvalue { i64, i1 } %30, 0
  store i64 %36, ptr %4, align 8
  br label %27

37:                                               ; preds = %46, %44
  br label %27

38:                                               ; preds = %32
  %39 = load i64, ptr %4, align 8
  %40 = load i64, ptr %4, align 8
  %41 = and i64 %40, 1
  %42 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %39, i64 %41)
  %43 = extractvalue { i64, i1 } %42, 1
  br i1 %43, label %45, label %46

44:                                               ; preds = %32
  br label %37

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i64, i1 } %42, 0
  store i64 %47, ptr %4, align 8
  br label %37

48:                                               ; preds = %65, %60
  br label %11

49:                                               ; preds = %25
  store i64 9218868437227405312, ptr %4, align 8
  %50 = load i64, ptr %4, align 8
  %51 = or i64 %50, 2251799813685248
  store i64 %51, ptr %4, align 8
  %52 = load i64, ptr %4, align 8
  %53 = and i128 %6, 2596148429267413814265248164610047
  %54 = lshr i128 %53, 60
  %55 = and i128 %54, 2251799813685247
  %56 = sub i128 18446744073709551615, %55
  %57 = icmp ule i128 %56, 18446744073709551615
  br i1 %57, label %63, label %64

58:                                               ; preds = %25
  %59 = icmp uge i128 %6, 90382311416515744529830349602734211072
  br i1 %59, label %66, label %67

60:                                               ; preds = %63
  %61 = trunc i128 %55 to i64
  %62 = or i64 %52, %61
  store i64 %62, ptr %4, align 8
  br label %48

63:                                               ; preds = %49
  br label %60

64:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

65:                                               ; preds = %88, %66
  br label %48

66:                                               ; preds = %58
  store i64 9218868437227405312, ptr %4, align 8
  br label %65

67:                                               ; preds = %58
  %68 = lshr i128 %6, 112
  %69 = sub i128 4294967295, %68
  %70 = icmp ule i128 %69, 4294967295
  br i1 %70, label %75, label %76

71:                                               ; preds = %75
  %72 = trunc i128 %68 to i32
  %73 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 15360, i32 %72)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %67
  br label %71

76:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

77:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %71
  %79 = extractvalue { i32, i1 } %73, 0
  %80 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %79, i32 1)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %78
  %84 = extractvalue { i32, i1 } %80, 0
  %85 = and i128 %5, 5192296858534827628530496329220095
  %86 = or i128 %85, 5192296858534827628530496329220096
  %87 = icmp ugt i32 %84, 112
  br i1 %87, label %89, label %90

88:                                               ; preds = %124, %89
  br label %65

89:                                               ; preds = %83
  store i64 0, ptr %4, align 8
  br label %88

90:                                               ; preds = %83
  %91 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 128, i32 %84)
  %92 = extractvalue { i32, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %90
  %95 = extractvalue { i32, i1 } %91, 0
  %96 = sub i32 127, %95
  %97 = icmp ule i32 %96, 127
  br i1 %97, label %106, label %107

98:                                               ; preds = %106
  %99 = trunc i32 %95 to i7
  %100 = zext i7 %99 to i128
  %101 = shl i128 %86, %100
  %102 = icmp ne i128 %101, 0
  %103 = zext i1 %102 to i128
  %104 = sub i32 127, %84
  %105 = icmp ule i32 %104, 127
  br i1 %105, label %116, label %117

106:                                              ; preds = %94
  br label %98

107:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

108:                                              ; preds = %116
  %109 = trunc i32 %84 to i7
  %110 = zext i7 %109 to i128
  %111 = lshr i128 %86, %110
  %112 = or i128 %111, %103
  %113 = lshr i128 %112, 60
  %114 = sub i128 18446744073709551615, %113
  %115 = icmp ule i128 %114, 18446744073709551615
  br i1 %115, label %122, label %123

116:                                              ; preds = %98
  br label %108

117:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

118:                                              ; preds = %122
  %119 = trunc i128 %113 to i64
  store i64 %119, ptr %4, align 8
  %120 = and i128 %112, 1152921504606846975
  %121 = icmp ugt i128 %120, 576460752303423488
  br i1 %121, label %125, label %129

122:                                              ; preds = %108
  br label %118

123:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @50)
  unreachable

124:                                              ; preds = %134, %132
  br label %88

125:                                              ; preds = %118
  %126 = load i64, ptr %4, align 8
  %127 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %126, i64 1)
  %128 = extractvalue { i64, i1 } %127, 1
  br i1 %128, label %131, label %132

129:                                              ; preds = %118
  %130 = icmp eq i128 %120, 576460752303423488
  br i1 %130, label %135, label %141

131:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

132:                                              ; preds = %125
  %133 = extractvalue { i64, i1 } %127, 0
  store i64 %133, ptr %4, align 8
  br label %124

134:                                              ; preds = %143, %141
  br label %124

135:                                              ; preds = %129
  %136 = load i64, ptr %4, align 8
  %137 = load i64, ptr %4, align 8
  %138 = and i64 %137, 1
  %139 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %136, i64 %138)
  %140 = extractvalue { i64, i1 } %139, 1
  br i1 %140, label %142, label %143

141:                                              ; preds = %129
  br label %134

142:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

143:                                              ; preds = %135
  %144 = extractvalue { i64, i1 } %139, 0
  store i64 %144, ptr %4, align 8
  br label %134
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__trunctfxf2(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca { i64, i1, [7 x i8] }, align 8
  %4 = alloca { i64, i1, [7 x i8] }, align 8
  %5 = alloca %math.F80, align 8
  %6 = bitcast fp128 %0 to i128
  %7 = and i128 %6, 170141183460469231731687303715884105727
  %8 = and i128 %6, -170141183460469231731687303715884105728
  %9 = icmp ne i128 %8, 0
  br i1 %9, label %13, label %14

10:                                               ; preds = %14, %13
  %11 = phi i16 [ -32768, %13 ], [ 0, %14 ]
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 16, i1 false)
  %12 = icmp ugt i128 %7, 170135991163610696904058773219554885632
  br i1 %12, label %20, label %28

13:                                               ; preds = %1
  br label %10

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %105, %20
  %16 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %17 = load i16, ptr %16, align 2
  %18 = or i16 %17, %11
  store i16 %18, ptr %16, align 2
  %19 = call fastcc i80 @math.make_f80(ptr nonnull readonly align 8 %5)
  ret i80 %19

20:                                               ; preds = %10
  %21 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  store i16 32767, ptr %21, align 2
  %22 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  store i64 -9223372036854775808, ptr %22, align 8
  %23 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %24 = load i64, ptr %23, align 8
  %25 = lshr i128 %7, 49
  %26 = trunc i128 %25 to i64
  %27 = or i64 %24, %26
  store i64 %27, ptr %23, align 8
  br label %15

28:                                               ; preds = %10
  %29 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %30 = lshr i128 %7, 49
  %31 = trunc i128 %30 to i64
  %32 = or i64 %31, -9223372036854775808
  store i64 %32, ptr %29, align 8
  %33 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %34 = lshr i128 %7, 112
  %35 = trunc i128 %34 to i16
  store i16 %35, ptr %33, align 2
  %36 = and i128 %7, 562949953421311
  %37 = icmp ugt i128 %36, 281474976710656
  br i1 %37, label %42, label %60

38:                                               ; preds = %72, %63
  %39 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %40 = load i16, ptr %39, align 2
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %106, label %110

42:                                               ; preds = %28
  %43 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %44 = load i64, ptr %43, align 8
  %45 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %44, i64 1)
  %46 = extractvalue { i64, i1 } %45, 0
  %47 = extractvalue { i64, i1 } %45, 1
  %48 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %4, i32 0, i32 0
  store i64 %46, ptr %48, align 8
  %49 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %4, i32 0, i32 1
  store i1 %47, ptr %49, align 1
  %50 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %51 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %4, i32 0, i32 0
  %52 = load i64, ptr %51, align 8
  store i64 %52, ptr %50, align 8
  %53 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %54 = load i16, ptr %53, align 2
  %55 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %4, i32 0, i32 1
  %56 = load i1, ptr %55, align 1
  %57 = zext i1 %56 to i16
  %58 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %54, i16 %57)
  %59 = extractvalue { i16, i1 } %58, 1
  br i1 %59, label %62, label %63

60:                                               ; preds = %28
  %61 = icmp eq i128 %36, 281474976710656
  br i1 %61, label %73, label %94

62:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %42
  %64 = extractvalue { i16, i1 } %58, 0
  store i16 %64, ptr %53, align 2
  %65 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %66 = load i64, ptr %65, align 8
  %67 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %4, i32 0, i32 1
  %68 = load i1, ptr %67, align 1
  %69 = zext i1 %68 to i64
  %70 = shl i64 %69, 63
  %71 = or i64 %66, %70
  store i64 %71, ptr %65, align 8
  br label %38

72:                                               ; preds = %96, %94
  br label %38

73:                                               ; preds = %60
  %74 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %75 = load i64, ptr %74, align 8
  %76 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %77 = load i64, ptr %76, align 8
  %78 = and i64 %77, 1
  %79 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %75, i64 %78)
  %80 = extractvalue { i64, i1 } %79, 0
  %81 = extractvalue { i64, i1 } %79, 1
  %82 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 0
  store i64 %80, ptr %82, align 8
  %83 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 1
  store i1 %81, ptr %83, align 1
  %84 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %85 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 0
  %86 = load i64, ptr %85, align 8
  store i64 %86, ptr %84, align 8
  %87 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %88 = load i16, ptr %87, align 2
  %89 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 1
  %90 = load i1, ptr %89, align 1
  %91 = zext i1 %90 to i16
  %92 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %88, i16 %91)
  %93 = extractvalue { i16, i1 } %92, 1
  br i1 %93, label %95, label %96

94:                                               ; preds = %60
  br label %72

95:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

96:                                               ; preds = %73
  %97 = extractvalue { i16, i1 } %92, 0
  store i16 %97, ptr %87, align 2
  %98 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %99 = load i64, ptr %98, align 8
  %100 = getelementptr inbounds { i64, i1, [7 x i8] }, ptr %3, i32 0, i32 1
  %101 = load i1, ptr %100, align 1
  %102 = zext i1 %101 to i64
  %103 = shl i64 %102, 63
  %104 = or i64 %99, %103
  store i64 %104, ptr %98, align 8
  br label %72

105:                                              ; preds = %110, %106
  br label %15

106:                                              ; preds = %38
  %107 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %108 = load i64, ptr %107, align 8
  %109 = and i64 %108, 9223372036854775807
  store i64 %109, ptr %107, align 8
  br label %105

110:                                              ; preds = %38
  br label %105
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixhfsi(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast half %0 to i16
  %6 = lshr i16 %5, 15
  %7 = icmp ne i16 %6, 0
  %8 = shl i16 %5, 1
  %9 = lshr i16 %8, 11
  %10 = zext i16 %9 to i32
  %11 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %10, i32 15)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %70, %68, %33, %23
  %14 = phi i32 [ 0, %23 ], [ %34, %33 ], [ %73, %70 ], [ %69, %68 ]
  ret i32 %14

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %1
  %17 = extractvalue { i32, i1 } %11, 0
  %18 = and i16 %5, 1023
  %19 = or i16 %18, 1024
  %20 = icmp slt i32 %17, 0
  br i1 %20, label %23, label %24

21:                                               ; preds = %24
  %22 = icmp sge i32 %17, 0
  br i1 %22, label %29, label %30

23:                                               ; preds = %16
  br label %13

24:                                               ; preds = %16
  br label %21

25:                                               ; preds = %32
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %26 = icmp slt i32 %17, 10
  br i1 %26, label %38, label %41

27:                                               ; preds = %29
  %28 = icmp uge i32 %17, 16
  br i1 %28, label %31, label %32

29:                                               ; preds = %21
  br label %27

30:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @51)
  unreachable

31:                                               ; preds = %27
  br i1 %7, label %35, label %36

32:                                               ; preds = %27
  br label %25

33:                                               ; preds = %36, %35
  %34 = load i32, ptr %4, align 4
  br label %13

35:                                               ; preds = %31
  store i32 -2147483648, ptr %4, align 4
  br label %33

36:                                               ; preds = %31
  store i32 2147483647, ptr %4, align 4
  br label %33

37:                                               ; preds = %62, %50
  br i1 %7, label %70, label %74

38:                                               ; preds = %25
  %39 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %17)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %45, label %46

41:                                               ; preds = %25
  %42 = zext i16 %19 to i32
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %17, i32 10)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %57, label %58

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i32, i1 } %39, 0
  %48 = sub i32 15, %47
  %49 = icmp ule i32 %48, 15
  br i1 %49, label %55, label %56

50:                                               ; preds = %55
  %51 = trunc i32 %47 to i4
  %52 = zext i4 %51 to i16
  %53 = lshr i16 %19, %52
  %54 = zext i16 %53 to i32
  store i32 %54, ptr %3, align 4
  br label %37

55:                                               ; preds = %46
  br label %50

56:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @51)
  unreachable

57:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %41
  %59 = extractvalue { i32, i1 } %43, 0
  %60 = sub i32 31, %59
  %61 = icmp ule i32 %60, 31
  br i1 %61, label %66, label %67

62:                                               ; preds = %66
  %63 = trunc i32 %59 to i5
  %64 = zext i5 %63 to i32
  %65 = shl i32 %42, %64
  store i32 %65, ptr %3, align 4
  br label %37

66:                                               ; preds = %58
  br label %62

67:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @51)
  unreachable

68:                                               ; preds = %74
  %69 = load i32, ptr %3, align 4
  br label %13

70:                                               ; preds = %37
  %71 = load i32, ptr %3, align 4
  %72 = xor i32 %71, -1
  %73 = add i32 %72, 1
  br label %13

74:                                               ; preds = %37
  br label %68
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixhfdi(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast half %0 to i16
  %6 = lshr i16 %5, 15
  %7 = icmp ne i16 %6, 0
  %8 = shl i16 %5, 1
  %9 = lshr i16 %8, 11
  %10 = zext i16 %9 to i32
  %11 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %10, i32 15)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %70, %68, %33, %23
  %14 = phi i64 [ 0, %23 ], [ %34, %33 ], [ %73, %70 ], [ %69, %68 ]
  ret i64 %14

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %1
  %17 = extractvalue { i32, i1 } %11, 0
  %18 = and i16 %5, 1023
  %19 = or i16 %18, 1024
  %20 = icmp slt i32 %17, 0
  br i1 %20, label %23, label %24

21:                                               ; preds = %24
  %22 = icmp sge i32 %17, 0
  br i1 %22, label %29, label %30

23:                                               ; preds = %16
  br label %13

24:                                               ; preds = %16
  br label %21

25:                                               ; preds = %32
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %26 = icmp slt i32 %17, 10
  br i1 %26, label %38, label %41

27:                                               ; preds = %29
  %28 = icmp uge i32 %17, 16
  br i1 %28, label %31, label %32

29:                                               ; preds = %21
  br label %27

30:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @52)
  unreachable

31:                                               ; preds = %27
  br i1 %7, label %35, label %36

32:                                               ; preds = %27
  br label %25

33:                                               ; preds = %36, %35
  %34 = load i64, ptr %4, align 8
  br label %13

35:                                               ; preds = %31
  store i64 -9223372036854775808, ptr %4, align 8
  br label %33

36:                                               ; preds = %31
  store i64 9223372036854775807, ptr %4, align 8
  br label %33

37:                                               ; preds = %62, %50
  br i1 %7, label %70, label %74

38:                                               ; preds = %25
  %39 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %17)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %45, label %46

41:                                               ; preds = %25
  %42 = zext i16 %19 to i64
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %17, i32 10)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %57, label %58

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i32, i1 } %39, 0
  %48 = sub i32 15, %47
  %49 = icmp ule i32 %48, 15
  br i1 %49, label %55, label %56

50:                                               ; preds = %55
  %51 = trunc i32 %47 to i4
  %52 = zext i4 %51 to i16
  %53 = lshr i16 %19, %52
  %54 = zext i16 %53 to i64
  store i64 %54, ptr %3, align 8
  br label %37

55:                                               ; preds = %46
  br label %50

56:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @52)
  unreachable

57:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %41
  %59 = extractvalue { i32, i1 } %43, 0
  %60 = sub i32 63, %59
  %61 = icmp ule i32 %60, 63
  br i1 %61, label %66, label %67

62:                                               ; preds = %66
  %63 = trunc i32 %59 to i6
  %64 = zext i6 %63 to i64
  %65 = shl i64 %42, %64
  store i64 %65, ptr %3, align 8
  br label %37

66:                                               ; preds = %58
  br label %62

67:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @52)
  unreachable

68:                                               ; preds = %74
  %69 = load i64, ptr %3, align 8
  br label %13

70:                                               ; preds = %37
  %71 = load i64, ptr %3, align 8
  %72 = xor i64 %71, -1
  %73 = add i64 %72, 1
  br label %13

74:                                               ; preds = %37
  br label %68
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixhfti(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = bitcast half %0 to i16
  %6 = lshr i16 %5, 15
  %7 = icmp ne i16 %6, 0
  %8 = shl i16 %5, 1
  %9 = lshr i16 %8, 11
  %10 = zext i16 %9 to i32
  %11 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %10, i32 15)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %70, %68, %33, %23
  %14 = phi i128 [ 0, %23 ], [ %34, %33 ], [ %73, %70 ], [ %69, %68 ]
  ret i128 %14

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %1
  %17 = extractvalue { i32, i1 } %11, 0
  %18 = and i16 %5, 1023
  %19 = or i16 %18, 1024
  %20 = icmp slt i32 %17, 0
  br i1 %20, label %23, label %24

21:                                               ; preds = %24
  %22 = icmp sge i32 %17, 0
  br i1 %22, label %29, label %30

23:                                               ; preds = %16
  br label %13

24:                                               ; preds = %16
  br label %21

25:                                               ; preds = %32
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %26 = icmp slt i32 %17, 10
  br i1 %26, label %38, label %41

27:                                               ; preds = %29
  %28 = icmp uge i32 %17, 16
  br i1 %28, label %31, label %32

29:                                               ; preds = %21
  br label %27

30:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @53)
  unreachable

31:                                               ; preds = %27
  br i1 %7, label %35, label %36

32:                                               ; preds = %27
  br label %25

33:                                               ; preds = %36, %35
  %34 = load i128, ptr %4, align 16
  br label %13

35:                                               ; preds = %31
  store i128 -170141183460469231731687303715884105728, ptr %4, align 16
  br label %33

36:                                               ; preds = %31
  store i128 170141183460469231731687303715884105727, ptr %4, align 16
  br label %33

37:                                               ; preds = %62, %50
  br i1 %7, label %70, label %74

38:                                               ; preds = %25
  %39 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %17)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %45, label %46

41:                                               ; preds = %25
  %42 = zext i16 %19 to i128
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %17, i32 10)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %57, label %58

45:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %38
  %47 = extractvalue { i32, i1 } %39, 0
  %48 = sub i32 15, %47
  %49 = icmp ule i32 %48, 15
  br i1 %49, label %55, label %56

50:                                               ; preds = %55
  %51 = trunc i32 %47 to i4
  %52 = zext i4 %51 to i16
  %53 = lshr i16 %19, %52
  %54 = zext i16 %53 to i128
  store i128 %54, ptr %3, align 16
  br label %37

55:                                               ; preds = %46
  br label %50

56:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @53)
  unreachable

57:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %41
  %59 = extractvalue { i32, i1 } %43, 0
  %60 = sub i32 127, %59
  %61 = icmp ule i32 %60, 127
  br i1 %61, label %66, label %67

62:                                               ; preds = %66
  %63 = trunc i32 %59 to i7
  %64 = zext i7 %63 to i128
  %65 = shl i128 %42, %64
  store i128 %65, ptr %3, align 16
  br label %37

66:                                               ; preds = %58
  br label %62

67:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @53)
  unreachable

68:                                               ; preds = %74
  %69 = load i128, ptr %3, align 16
  br label %13

70:                                               ; preds = %37
  %71 = load i128, ptr %3, align 16
  %72 = xor i128 %71, -1
  %73 = add i128 %72, 1
  br label %13

74:                                               ; preds = %37
  br label %68
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixsfsi(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast float %0 to i32
  %6 = lshr i32 %5, 31
  %7 = icmp ne i32 %6, 0
  %8 = shl i32 %5, 1
  %9 = lshr i32 %8, 24
  %10 = sub i32 2147483647, %9
  %11 = icmp ule i32 %10, 2147483647
  br i1 %11, label %17, label %18

12:                                               ; preds = %82, %80, %37, %27
  %13 = phi i32 [ 0, %27 ], [ %38, %37 ], [ %85, %82 ], [ %81, %80 ]
  ret i32 %13

14:                                               ; preds = %17
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 127)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %14

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i32 %5, 8388607
  %23 = or i32 %22, 8388608
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %27, label %28

25:                                               ; preds = %28
  %26 = icmp sge i32 %21, 0
  br i1 %26, label %33, label %34

27:                                               ; preds = %20
  br label %12

28:                                               ; preds = %20
  br label %25

29:                                               ; preds = %36
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %30 = icmp slt i32 %21, 23
  br i1 %30, label %42, label %45

31:                                               ; preds = %33
  %32 = icmp uge i32 %21, 31
  br i1 %32, label %35, label %36

33:                                               ; preds = %25
  br label %31

34:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

35:                                               ; preds = %31
  br i1 %7, label %39, label %40

36:                                               ; preds = %31
  br label %29

37:                                               ; preds = %40, %39
  %38 = load i32, ptr %4, align 4
  br label %12

39:                                               ; preds = %35
  store i32 -2147483648, ptr %4, align 4
  br label %37

40:                                               ; preds = %35
  store i32 2147483647, ptr %4, align 4
  br label %37

41:                                               ; preds = %74, %61
  br i1 %7, label %82, label %86

42:                                               ; preds = %29
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %48, label %49

45:                                               ; preds = %29
  %46 = sub i32 2147483647, %23
  %47 = icmp ule i32 %46, 2147483647
  br i1 %47, label %67, label %68

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i32, i1 } %43, 0
  %51 = sub i32 31, %50
  %52 = icmp ule i32 %51, 31
  br i1 %52, label %59, label %60

53:                                               ; preds = %59
  %54 = trunc i32 %50 to i5
  %55 = zext i5 %54 to i32
  %56 = lshr i32 %23, %55
  %57 = sub i32 2147483647, %56
  %58 = icmp ule i32 %57, 2147483647
  br i1 %58, label %62, label %63

59:                                               ; preds = %49
  br label %53

60:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

61:                                               ; preds = %62
  store i32 %56, ptr %3, align 4
  br label %41

62:                                               ; preds = %53
  br label %61

63:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

64:                                               ; preds = %67
  %65 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 23)
  %66 = extractvalue { i32, i1 } %65, 1
  br i1 %66, label %69, label %70

67:                                               ; preds = %45
  br label %64

68:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

69:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %64
  %71 = extractvalue { i32, i1 } %65, 0
  %72 = sub i32 31, %71
  %73 = icmp ule i32 %72, 31
  br i1 %73, label %78, label %79

74:                                               ; preds = %78
  %75 = trunc i32 %71 to i5
  %76 = zext i5 %75 to i32
  %77 = shl i32 %23, %76
  store i32 %77, ptr %3, align 4
  br label %41

78:                                               ; preds = %70
  br label %74

79:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @54)
  unreachable

80:                                               ; preds = %86
  %81 = load i32, ptr %3, align 4
  br label %12

82:                                               ; preds = %41
  %83 = load i32, ptr %3, align 4
  %84 = xor i32 %83, -1
  %85 = add i32 %84, 1
  br label %12

86:                                               ; preds = %41
  br label %80
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixsfdi(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast float %0 to i32
  %6 = lshr i32 %5, 31
  %7 = icmp ne i32 %6, 0
  %8 = shl i32 %5, 1
  %9 = lshr i32 %8, 24
  %10 = sub i32 2147483647, %9
  %11 = icmp ule i32 %10, 2147483647
  br i1 %11, label %17, label %18

12:                                               ; preds = %74, %72, %37, %27
  %13 = phi i64 [ 0, %27 ], [ %38, %37 ], [ %77, %74 ], [ %73, %72 ]
  ret i64 %13

14:                                               ; preds = %17
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 127)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %14

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @55)
  unreachable

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i32 %5, 8388607
  %23 = or i32 %22, 8388608
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %27, label %28

25:                                               ; preds = %28
  %26 = icmp sge i32 %21, 0
  br i1 %26, label %33, label %34

27:                                               ; preds = %20
  br label %12

28:                                               ; preds = %20
  br label %25

29:                                               ; preds = %36
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %30 = icmp slt i32 %21, 23
  br i1 %30, label %42, label %45

31:                                               ; preds = %33
  %32 = icmp uge i32 %21, 63
  br i1 %32, label %35, label %36

33:                                               ; preds = %25
  br label %31

34:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @55)
  unreachable

35:                                               ; preds = %31
  br i1 %7, label %39, label %40

36:                                               ; preds = %31
  br label %29

37:                                               ; preds = %40, %39
  %38 = load i64, ptr %4, align 8
  br label %12

39:                                               ; preds = %35
  store i64 -9223372036854775808, ptr %4, align 8
  br label %37

40:                                               ; preds = %35
  store i64 9223372036854775807, ptr %4, align 8
  br label %37

41:                                               ; preds = %66, %54
  br i1 %7, label %74, label %78

42:                                               ; preds = %29
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %49, label %50

45:                                               ; preds = %29
  %46 = zext i32 %23 to i64
  %47 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 23)
  %48 = extractvalue { i32, i1 } %47, 1
  br i1 %48, label %61, label %62

49:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %42
  %51 = extractvalue { i32, i1 } %43, 0
  %52 = sub i32 31, %51
  %53 = icmp ule i32 %52, 31
  br i1 %53, label %59, label %60

54:                                               ; preds = %59
  %55 = trunc i32 %51 to i5
  %56 = zext i5 %55 to i32
  %57 = lshr i32 %23, %56
  %58 = zext i32 %57 to i64
  store i64 %58, ptr %3, align 8
  br label %41

59:                                               ; preds = %50
  br label %54

60:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @55)
  unreachable

61:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %45
  %63 = extractvalue { i32, i1 } %47, 0
  %64 = sub i32 63, %63
  %65 = icmp ule i32 %64, 63
  br i1 %65, label %70, label %71

66:                                               ; preds = %70
  %67 = trunc i32 %63 to i6
  %68 = zext i6 %67 to i64
  %69 = shl i64 %46, %68
  store i64 %69, ptr %3, align 8
  br label %41

70:                                               ; preds = %62
  br label %66

71:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @55)
  unreachable

72:                                               ; preds = %78
  %73 = load i64, ptr %3, align 8
  br label %12

74:                                               ; preds = %41
  %75 = load i64, ptr %3, align 8
  %76 = xor i64 %75, -1
  %77 = add i64 %76, 1
  br label %12

78:                                               ; preds = %41
  br label %72
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixsfti(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = bitcast float %0 to i32
  %6 = lshr i32 %5, 31
  %7 = icmp ne i32 %6, 0
  %8 = shl i32 %5, 1
  %9 = lshr i32 %8, 24
  %10 = sub i32 2147483647, %9
  %11 = icmp ule i32 %10, 2147483647
  br i1 %11, label %17, label %18

12:                                               ; preds = %74, %72, %37, %27
  %13 = phi i128 [ 0, %27 ], [ %38, %37 ], [ %77, %74 ], [ %73, %72 ]
  ret i128 %13

14:                                               ; preds = %17
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 127)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %14

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @56)
  unreachable

19:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %14
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i32 %5, 8388607
  %23 = or i32 %22, 8388608
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %27, label %28

25:                                               ; preds = %28
  %26 = icmp sge i32 %21, 0
  br i1 %26, label %33, label %34

27:                                               ; preds = %20
  br label %12

28:                                               ; preds = %20
  br label %25

29:                                               ; preds = %36
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %30 = icmp slt i32 %21, 23
  br i1 %30, label %42, label %45

31:                                               ; preds = %33
  %32 = icmp uge i32 %21, 127
  br i1 %32, label %35, label %36

33:                                               ; preds = %25
  br label %31

34:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @56)
  unreachable

35:                                               ; preds = %31
  br i1 %7, label %39, label %40

36:                                               ; preds = %31
  br label %29

37:                                               ; preds = %40, %39
  %38 = load i128, ptr %4, align 16
  br label %12

39:                                               ; preds = %35
  store i128 -170141183460469231731687303715884105728, ptr %4, align 16
  br label %37

40:                                               ; preds = %35
  store i128 170141183460469231731687303715884105727, ptr %4, align 16
  br label %37

41:                                               ; preds = %66, %54
  br i1 %7, label %74, label %78

42:                                               ; preds = %29
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %49, label %50

45:                                               ; preds = %29
  %46 = zext i32 %23 to i128
  %47 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 23)
  %48 = extractvalue { i32, i1 } %47, 1
  br i1 %48, label %61, label %62

49:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %42
  %51 = extractvalue { i32, i1 } %43, 0
  %52 = sub i32 31, %51
  %53 = icmp ule i32 %52, 31
  br i1 %53, label %59, label %60

54:                                               ; preds = %59
  %55 = trunc i32 %51 to i5
  %56 = zext i5 %55 to i32
  %57 = lshr i32 %23, %56
  %58 = zext i32 %57 to i128
  store i128 %58, ptr %3, align 16
  br label %41

59:                                               ; preds = %50
  br label %54

60:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @56)
  unreachable

61:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %45
  %63 = extractvalue { i32, i1 } %47, 0
  %64 = sub i32 127, %63
  %65 = icmp ule i32 %64, 127
  br i1 %65, label %70, label %71

66:                                               ; preds = %70
  %67 = trunc i32 %63 to i7
  %68 = zext i7 %67 to i128
  %69 = shl i128 %46, %68
  store i128 %69, ptr %3, align 16
  br label %41

70:                                               ; preds = %62
  br label %66

71:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @56)
  unreachable

72:                                               ; preds = %78
  %73 = load i128, ptr %3, align 16
  br label %12

74:                                               ; preds = %41
  %75 = load i128, ptr %3, align 16
  %76 = xor i128 %75, -1
  %77 = add i128 %76, 1
  br label %12

78:                                               ; preds = %41
  br label %72
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixdfsi(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 63
  %7 = icmp ne i64 %6, 0
  %8 = shl i64 %5, 1
  %9 = lshr i64 %8, 53
  %10 = sub i64 2147483647, %9
  %11 = icmp ule i64 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %85, %83, %38, %28
  %13 = phi i32 [ 0, %28 ], [ %39, %38 ], [ %88, %85 ], [ %84, %83 ]
  ret i32 %13

14:                                               ; preds = %18
  %15 = trunc i64 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 1023)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i64 %5, 4503599627370495
  %24 = or i64 %23, 4503599627370496
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %34, label %35

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %37
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %31 = icmp slt i32 %22, 52
  br i1 %31, label %43, label %46

32:                                               ; preds = %34
  %33 = icmp uge i32 %22, 31
  br i1 %33, label %36, label %37

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

36:                                               ; preds = %32
  br i1 %7, label %40, label %41

37:                                               ; preds = %32
  br label %30

38:                                               ; preds = %41, %40
  %39 = load i32, ptr %4, align 4
  br label %12

40:                                               ; preds = %36
  store i32 -2147483648, ptr %4, align 4
  br label %38

41:                                               ; preds = %36
  store i32 2147483647, ptr %4, align 4
  br label %38

42:                                               ; preds = %77, %62
  br i1 %7, label %85, label %89

43:                                               ; preds = %30
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %22)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %49, label %50

46:                                               ; preds = %30
  %47 = sub i64 2147483647, %24
  %48 = icmp ule i64 %47, 2147483647
  br i1 %48, label %70, label %71

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i32, i1 } %44, 0
  %52 = sub i32 63, %51
  %53 = icmp ule i32 %52, 63
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i32 %51 to i6
  %56 = zext i6 %55 to i64
  %57 = lshr i64 %24, %56
  %58 = sub i64 2147483647, %57
  %59 = icmp ule i64 %58, 2147483647
  br i1 %59, label %64, label %65

60:                                               ; preds = %50
  br label %54

61:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

62:                                               ; preds = %64
  %63 = trunc i64 %57 to i32
  store i32 %63, ptr %3, align 4
  br label %42

64:                                               ; preds = %54
  br label %62

65:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

66:                                               ; preds = %70
  %67 = trunc i64 %24 to i32
  %68 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 52)
  %69 = extractvalue { i32, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %46
  br label %66

71:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

72:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %66
  %74 = extractvalue { i32, i1 } %68, 0
  %75 = sub i32 31, %74
  %76 = icmp ule i32 %75, 31
  br i1 %76, label %81, label %82

77:                                               ; preds = %81
  %78 = trunc i32 %74 to i5
  %79 = zext i5 %78 to i32
  %80 = shl i32 %67, %79
  store i32 %80, ptr %3, align 4
  br label %42

81:                                               ; preds = %73
  br label %77

82:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @57)
  unreachable

83:                                               ; preds = %89
  %84 = load i32, ptr %3, align 4
  br label %12

85:                                               ; preds = %42
  %86 = load i32, ptr %3, align 4
  %87 = xor i32 %86, -1
  %88 = add i32 %87, 1
  br label %12

89:                                               ; preds = %42
  br label %83
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixdfdi(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 63
  %7 = icmp ne i64 %6, 0
  %8 = shl i64 %5, 1
  %9 = lshr i64 %8, 53
  %10 = sub i64 2147483647, %9
  %11 = icmp ule i64 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %83, %81, %38, %28
  %13 = phi i64 [ 0, %28 ], [ %39, %38 ], [ %86, %83 ], [ %82, %81 ]
  ret i64 %13

14:                                               ; preds = %18
  %15 = trunc i64 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 1023)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i64 %5, 4503599627370495
  %24 = or i64 %23, 4503599627370496
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %34, label %35

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %37
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %31 = icmp slt i32 %22, 52
  br i1 %31, label %43, label %46

32:                                               ; preds = %34
  %33 = icmp uge i32 %22, 63
  br i1 %33, label %36, label %37

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

36:                                               ; preds = %32
  br i1 %7, label %40, label %41

37:                                               ; preds = %32
  br label %30

38:                                               ; preds = %41, %40
  %39 = load i64, ptr %4, align 8
  br label %12

40:                                               ; preds = %36
  store i64 -9223372036854775808, ptr %4, align 8
  br label %38

41:                                               ; preds = %36
  store i64 9223372036854775807, ptr %4, align 8
  br label %38

42:                                               ; preds = %75, %62
  br i1 %7, label %83, label %87

43:                                               ; preds = %30
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %22)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %49, label %50

46:                                               ; preds = %30
  %47 = sub i64 9223372036854775807, %24
  %48 = icmp ule i64 %47, 9223372036854775807
  br i1 %48, label %68, label %69

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i32, i1 } %44, 0
  %52 = sub i32 63, %51
  %53 = icmp ule i32 %52, 63
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i32 %51 to i6
  %56 = zext i6 %55 to i64
  %57 = lshr i64 %24, %56
  %58 = sub i64 9223372036854775807, %57
  %59 = icmp ule i64 %58, 9223372036854775807
  br i1 %59, label %63, label %64

60:                                               ; preds = %50
  br label %54

61:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

62:                                               ; preds = %63
  store i64 %57, ptr %3, align 8
  br label %42

63:                                               ; preds = %54
  br label %62

64:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

65:                                               ; preds = %68
  %66 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 52)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %70, label %71

68:                                               ; preds = %46
  br label %65

69:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

70:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %65
  %72 = extractvalue { i32, i1 } %66, 0
  %73 = sub i32 63, %72
  %74 = icmp ule i32 %73, 63
  br i1 %74, label %79, label %80

75:                                               ; preds = %79
  %76 = trunc i32 %72 to i6
  %77 = zext i6 %76 to i64
  %78 = shl i64 %24, %77
  store i64 %78, ptr %3, align 8
  br label %42

79:                                               ; preds = %71
  br label %75

80:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @58)
  unreachable

81:                                               ; preds = %87
  %82 = load i64, ptr %3, align 8
  br label %12

83:                                               ; preds = %42
  %84 = load i64, ptr %3, align 8
  %85 = xor i64 %84, -1
  %86 = add i64 %85, 1
  br label %12

87:                                               ; preds = %42
  br label %81
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixdfti(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 63
  %7 = icmp ne i64 %6, 0
  %8 = shl i64 %5, 1
  %9 = lshr i64 %8, 53
  %10 = sub i64 2147483647, %9
  %11 = icmp ule i64 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %75, %73, %38, %28
  %13 = phi i128 [ 0, %28 ], [ %39, %38 ], [ %78, %75 ], [ %74, %73 ]
  ret i128 %13

14:                                               ; preds = %18
  %15 = trunc i64 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 1023)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @59)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i64 %5, 4503599627370495
  %24 = or i64 %23, 4503599627370496
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %34, label %35

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %37
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %31 = icmp slt i32 %22, 52
  br i1 %31, label %43, label %46

32:                                               ; preds = %34
  %33 = icmp uge i32 %22, 127
  br i1 %33, label %36, label %37

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @59)
  unreachable

36:                                               ; preds = %32
  br i1 %7, label %40, label %41

37:                                               ; preds = %32
  br label %30

38:                                               ; preds = %41, %40
  %39 = load i128, ptr %4, align 16
  br label %12

40:                                               ; preds = %36
  store i128 -170141183460469231731687303715884105728, ptr %4, align 16
  br label %38

41:                                               ; preds = %36
  store i128 170141183460469231731687303715884105727, ptr %4, align 16
  br label %38

42:                                               ; preds = %67, %55
  br i1 %7, label %75, label %79

43:                                               ; preds = %30
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %22)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %50, label %51

46:                                               ; preds = %30
  %47 = zext i64 %24 to i128
  %48 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 52)
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %62, label %63

50:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

51:                                               ; preds = %43
  %52 = extractvalue { i32, i1 } %44, 0
  %53 = sub i32 63, %52
  %54 = icmp ule i32 %53, 63
  br i1 %54, label %60, label %61

55:                                               ; preds = %60
  %56 = trunc i32 %52 to i6
  %57 = zext i6 %56 to i64
  %58 = lshr i64 %24, %57
  %59 = zext i64 %58 to i128
  store i128 %59, ptr %3, align 16
  br label %42

60:                                               ; preds = %51
  br label %55

61:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @59)
  unreachable

62:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %46
  %64 = extractvalue { i32, i1 } %48, 0
  %65 = sub i32 127, %64
  %66 = icmp ule i32 %65, 127
  br i1 %66, label %71, label %72

67:                                               ; preds = %71
  %68 = trunc i32 %64 to i7
  %69 = zext i7 %68 to i128
  %70 = shl i128 %47, %69
  store i128 %70, ptr %3, align 16
  br label %42

71:                                               ; preds = %63
  br label %67

72:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @59)
  unreachable

73:                                               ; preds = %79
  %74 = load i128, ptr %3, align 16
  br label %12

75:                                               ; preds = %42
  %76 = load i128, ptr %3, align 16
  %77 = xor i128 %76, -1
  %78 = add i128 %77, 1
  br label %12

79:                                               ; preds = %42
  br label %73
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixtfsi(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast fp128 %0 to i128
  %6 = lshr i128 %5, 127
  %7 = icmp ne i128 %6, 0
  %8 = shl i128 %5, 1
  %9 = lshr i128 %8, 113
  %10 = sub i128 2147483647, %9
  %11 = icmp ule i128 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %85, %83, %38, %28
  %13 = phi i32 [ 0, %28 ], [ %39, %38 ], [ %88, %85 ], [ %84, %83 ]
  ret i32 %13

14:                                               ; preds = %18
  %15 = trunc i128 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 16383)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i128 %5, 5192296858534827628530496329220095
  %24 = or i128 %23, 5192296858534827628530496329220096
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %34, label %35

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %37
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %31 = icmp slt i32 %22, 112
  br i1 %31, label %43, label %46

32:                                               ; preds = %34
  %33 = icmp uge i32 %22, 31
  br i1 %33, label %36, label %37

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

36:                                               ; preds = %32
  br i1 %7, label %40, label %41

37:                                               ; preds = %32
  br label %30

38:                                               ; preds = %41, %40
  %39 = load i32, ptr %4, align 4
  br label %12

40:                                               ; preds = %36
  store i32 -2147483648, ptr %4, align 4
  br label %38

41:                                               ; preds = %36
  store i32 2147483647, ptr %4, align 4
  br label %38

42:                                               ; preds = %77, %62
  br i1 %7, label %85, label %89

43:                                               ; preds = %30
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %22)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %49, label %50

46:                                               ; preds = %30
  %47 = sub i128 2147483647, %24
  %48 = icmp ule i128 %47, 2147483647
  br i1 %48, label %70, label %71

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i32, i1 } %44, 0
  %52 = sub i32 127, %51
  %53 = icmp ule i32 %52, 127
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i32 %51 to i7
  %56 = zext i7 %55 to i128
  %57 = lshr i128 %24, %56
  %58 = sub i128 2147483647, %57
  %59 = icmp ule i128 %58, 2147483647
  br i1 %59, label %64, label %65

60:                                               ; preds = %50
  br label %54

61:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

62:                                               ; preds = %64
  %63 = trunc i128 %57 to i32
  store i32 %63, ptr %3, align 4
  br label %42

64:                                               ; preds = %54
  br label %62

65:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

66:                                               ; preds = %70
  %67 = trunc i128 %24 to i32
  %68 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 112)
  %69 = extractvalue { i32, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %46
  br label %66

71:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

72:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %66
  %74 = extractvalue { i32, i1 } %68, 0
  %75 = sub i32 31, %74
  %76 = icmp ule i32 %75, 31
  br i1 %76, label %81, label %82

77:                                               ; preds = %81
  %78 = trunc i32 %74 to i5
  %79 = zext i5 %78 to i32
  %80 = shl i32 %67, %79
  store i32 %80, ptr %3, align 4
  br label %42

81:                                               ; preds = %73
  br label %77

82:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @60)
  unreachable

83:                                               ; preds = %89
  %84 = load i32, ptr %3, align 4
  br label %12

85:                                               ; preds = %42
  %86 = load i32, ptr %3, align 4
  %87 = xor i32 %86, -1
  %88 = add i32 %87, 1
  br label %12

89:                                               ; preds = %42
  br label %83
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixtfdi(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast fp128 %0 to i128
  %6 = lshr i128 %5, 127
  %7 = icmp ne i128 %6, 0
  %8 = shl i128 %5, 1
  %9 = lshr i128 %8, 113
  %10 = sub i128 2147483647, %9
  %11 = icmp ule i128 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %85, %83, %38, %28
  %13 = phi i64 [ 0, %28 ], [ %39, %38 ], [ %88, %85 ], [ %84, %83 ]
  ret i64 %13

14:                                               ; preds = %18
  %15 = trunc i128 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 16383)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i128 %5, 5192296858534827628530496329220095
  %24 = or i128 %23, 5192296858534827628530496329220096
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %34, label %35

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %37
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %31 = icmp slt i32 %22, 112
  br i1 %31, label %43, label %46

32:                                               ; preds = %34
  %33 = icmp uge i32 %22, 63
  br i1 %33, label %36, label %37

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

36:                                               ; preds = %32
  br i1 %7, label %40, label %41

37:                                               ; preds = %32
  br label %30

38:                                               ; preds = %41, %40
  %39 = load i64, ptr %4, align 8
  br label %12

40:                                               ; preds = %36
  store i64 -9223372036854775808, ptr %4, align 8
  br label %38

41:                                               ; preds = %36
  store i64 9223372036854775807, ptr %4, align 8
  br label %38

42:                                               ; preds = %77, %62
  br i1 %7, label %85, label %89

43:                                               ; preds = %30
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %22)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %49, label %50

46:                                               ; preds = %30
  %47 = sub i128 9223372036854775807, %24
  %48 = icmp ule i128 %47, 9223372036854775807
  br i1 %48, label %70, label %71

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i32, i1 } %44, 0
  %52 = sub i32 127, %51
  %53 = icmp ule i32 %52, 127
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i32 %51 to i7
  %56 = zext i7 %55 to i128
  %57 = lshr i128 %24, %56
  %58 = sub i128 9223372036854775807, %57
  %59 = icmp ule i128 %58, 9223372036854775807
  br i1 %59, label %64, label %65

60:                                               ; preds = %50
  br label %54

61:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

62:                                               ; preds = %64
  %63 = trunc i128 %57 to i64
  store i64 %63, ptr %3, align 8
  br label %42

64:                                               ; preds = %54
  br label %62

65:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

66:                                               ; preds = %70
  %67 = trunc i128 %24 to i64
  %68 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 112)
  %69 = extractvalue { i32, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %46
  br label %66

71:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

72:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %66
  %74 = extractvalue { i32, i1 } %68, 0
  %75 = sub i32 63, %74
  %76 = icmp ule i32 %75, 63
  br i1 %76, label %81, label %82

77:                                               ; preds = %81
  %78 = trunc i32 %74 to i6
  %79 = zext i6 %78 to i64
  %80 = shl i64 %67, %79
  store i64 %80, ptr %3, align 8
  br label %42

81:                                               ; preds = %73
  br label %77

82:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @61)
  unreachable

83:                                               ; preds = %89
  %84 = load i64, ptr %3, align 8
  br label %12

85:                                               ; preds = %42
  %86 = load i64, ptr %3, align 8
  %87 = xor i64 %86, -1
  %88 = add i64 %87, 1
  br label %12

89:                                               ; preds = %42
  br label %83
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixtfti(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = bitcast fp128 %0 to i128
  %6 = lshr i128 %5, 127
  %7 = icmp ne i128 %6, 0
  %8 = shl i128 %5, 1
  %9 = lshr i128 %8, 113
  %10 = sub i128 2147483647, %9
  %11 = icmp ule i128 %10, 2147483647
  br i1 %11, label %18, label %19

12:                                               ; preds = %83, %81, %38, %28
  %13 = phi i128 [ 0, %28 ], [ %39, %38 ], [ %86, %83 ], [ %82, %81 ]
  ret i128 %13

14:                                               ; preds = %18
  %15 = trunc i128 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 16383)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %1
  br label %14

19:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

20:                                               ; preds = %14
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %14
  %22 = extractvalue { i32, i1 } %16, 0
  %23 = and i128 %5, 5192296858534827628530496329220095
  %24 = or i128 %23, 5192296858534827628530496329220096
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %28, label %29

26:                                               ; preds = %29
  %27 = icmp sge i32 %22, 0
  br i1 %27, label %34, label %35

28:                                               ; preds = %21
  br label %12

29:                                               ; preds = %21
  br label %26

30:                                               ; preds = %37
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %31 = icmp slt i32 %22, 112
  br i1 %31, label %43, label %46

32:                                               ; preds = %34
  %33 = icmp uge i32 %22, 127
  br i1 %33, label %36, label %37

34:                                               ; preds = %26
  br label %32

35:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

36:                                               ; preds = %32
  br i1 %7, label %40, label %41

37:                                               ; preds = %32
  br label %30

38:                                               ; preds = %41, %40
  %39 = load i128, ptr %4, align 16
  br label %12

40:                                               ; preds = %36
  store i128 -170141183460469231731687303715884105728, ptr %4, align 16
  br label %38

41:                                               ; preds = %36
  store i128 170141183460469231731687303715884105727, ptr %4, align 16
  br label %38

42:                                               ; preds = %75, %62
  br i1 %7, label %83, label %87

43:                                               ; preds = %30
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %22)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %49, label %50

46:                                               ; preds = %30
  %47 = sub i128 170141183460469231731687303715884105727, %24
  %48 = icmp ule i128 %47, 170141183460469231731687303715884105727
  br i1 %48, label %68, label %69

49:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %43
  %51 = extractvalue { i32, i1 } %44, 0
  %52 = sub i32 127, %51
  %53 = icmp ule i32 %52, 127
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i32 %51 to i7
  %56 = zext i7 %55 to i128
  %57 = lshr i128 %24, %56
  %58 = sub i128 170141183460469231731687303715884105727, %57
  %59 = icmp ule i128 %58, 170141183460469231731687303715884105727
  br i1 %59, label %63, label %64

60:                                               ; preds = %50
  br label %54

61:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

62:                                               ; preds = %63
  store i128 %57, ptr %3, align 16
  br label %42

63:                                               ; preds = %54
  br label %62

64:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

65:                                               ; preds = %68
  %66 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 112)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %70, label %71

68:                                               ; preds = %46
  br label %65

69:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

70:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %65
  %72 = extractvalue { i32, i1 } %66, 0
  %73 = sub i32 127, %72
  %74 = icmp ule i32 %73, 127
  br i1 %74, label %79, label %80

75:                                               ; preds = %79
  %76 = trunc i32 %72 to i7
  %77 = zext i7 %76 to i128
  %78 = shl i128 %24, %77
  store i128 %78, ptr %3, align 16
  br label %42

79:                                               ; preds = %71
  br label %75

80:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @62)
  unreachable

81:                                               ; preds = %87
  %82 = load i128, ptr %3, align 16
  br label %12

83:                                               ; preds = %42
  %84 = load i128, ptr %3, align 16
  %85 = xor i128 %84, -1
  %86 = add i128 %85, 1
  br label %12

87:                                               ; preds = %42
  br label %81
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixxfsi(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = lshr i80 %0, 79
  br i1 true, label %10, label %11

6:                                                ; preds = %97, %95, %46, %36
  %7 = phi i32 [ 0, %36 ], [ %47, %46 ], [ %100, %97 ], [ %96, %95 ]
  ret i32 %7

8:                                                ; preds = %10
  %9 = icmp ne i80 %5, 0
  br i1 true, label %15, label %16

10:                                               ; preds = %1
  br label %8

11:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

12:                                               ; preds = %15
  %13 = shl i80 %0, 1
  %14 = lshr i80 %13, 65
  br i1 true, label %20, label %21

15:                                               ; preds = %8
  br label %12

16:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

17:                                               ; preds = %20
  %18 = sub i80 2147483647, %14
  %19 = icmp ule i80 %18, 2147483647
  br i1 %19, label %26, label %27

20:                                               ; preds = %12
  br label %17

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

22:                                               ; preds = %26
  %23 = trunc i80 %14 to i32
  %24 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 16383)
  %25 = extractvalue { i32, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %17
  br label %22

27:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

28:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %22
  %30 = extractvalue { i32, i1 } %24, 0
  %31 = and i80 %0, 18446744073709551615
  %32 = or i80 %31, 0
  %33 = icmp slt i32 %30, 0
  br i1 %33, label %36, label %37

34:                                               ; preds = %37
  %35 = icmp sge i32 %30, 0
  br i1 %35, label %42, label %43

36:                                               ; preds = %29
  br label %6

37:                                               ; preds = %29
  br label %34

38:                                               ; preds = %45
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %39 = icmp slt i32 %30, 63
  br i1 %39, label %51, label %54

40:                                               ; preds = %42
  %41 = icmp uge i32 %30, 31
  br i1 %41, label %44, label %45

42:                                               ; preds = %34
  br label %40

43:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

44:                                               ; preds = %40
  br i1 %9, label %48, label %49

45:                                               ; preds = %40
  br label %38

46:                                               ; preds = %49, %48
  %47 = load i32, ptr %4, align 4
  br label %6

48:                                               ; preds = %44
  store i32 -2147483648, ptr %4, align 4
  br label %46

49:                                               ; preds = %44
  store i32 2147483647, ptr %4, align 4
  br label %46

50:                                               ; preds = %89, %74
  br i1 %9, label %97, label %101

51:                                               ; preds = %38
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %30)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %57, label %58

54:                                               ; preds = %38
  %55 = sub i80 2147483647, %32
  %56 = icmp ule i80 %55, 2147483647
  br i1 %56, label %82, label %83

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i32, i1 } %52, 0
  %60 = sub i32 127, %59
  %61 = icmp ule i32 %60, 127
  br i1 %61, label %67, label %68

62:                                               ; preds = %67
  %63 = trunc i32 %59 to i7
  %64 = zext i7 %63 to i80
  %65 = lshr i80 %32, %64
  %66 = icmp ult i7 %63, -48
  br i1 %66, label %72, label %73

67:                                               ; preds = %58
  br label %62

68:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

69:                                               ; preds = %72
  %70 = sub i80 2147483647, %65
  %71 = icmp ule i80 %70, 2147483647
  br i1 %71, label %76, label %77

72:                                               ; preds = %62
  br label %69

73:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

74:                                               ; preds = %76
  %75 = trunc i80 %65 to i32
  store i32 %75, ptr %3, align 4
  br label %50

76:                                               ; preds = %69
  br label %74

77:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

78:                                               ; preds = %82
  %79 = trunc i80 %32 to i32
  %80 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 63)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %84, label %85

82:                                               ; preds = %54
  br label %78

83:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

84:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %78
  %86 = extractvalue { i32, i1 } %80, 0
  %87 = sub i32 31, %86
  %88 = icmp ule i32 %87, 31
  br i1 %88, label %93, label %94

89:                                               ; preds = %93
  %90 = trunc i32 %86 to i5
  %91 = zext i5 %90 to i32
  %92 = shl i32 %79, %91
  store i32 %92, ptr %3, align 4
  br label %50

93:                                               ; preds = %85
  br label %89

94:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @63)
  unreachable

95:                                               ; preds = %101
  %96 = load i32, ptr %3, align 4
  br label %6

97:                                               ; preds = %50
  %98 = load i32, ptr %3, align 4
  %99 = xor i32 %98, -1
  %100 = add i32 %99, 1
  br label %6

101:                                              ; preds = %50
  br label %95
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixxfdi(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = lshr i80 %0, 79
  br i1 true, label %10, label %11

6:                                                ; preds = %97, %95, %46, %36
  %7 = phi i64 [ 0, %36 ], [ %47, %46 ], [ %100, %97 ], [ %96, %95 ]
  ret i64 %7

8:                                                ; preds = %10
  %9 = icmp ne i80 %5, 0
  br i1 true, label %15, label %16

10:                                               ; preds = %1
  br label %8

11:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

12:                                               ; preds = %15
  %13 = shl i80 %0, 1
  %14 = lshr i80 %13, 65
  br i1 true, label %20, label %21

15:                                               ; preds = %8
  br label %12

16:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

17:                                               ; preds = %20
  %18 = sub i80 2147483647, %14
  %19 = icmp ule i80 %18, 2147483647
  br i1 %19, label %26, label %27

20:                                               ; preds = %12
  br label %17

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

22:                                               ; preds = %26
  %23 = trunc i80 %14 to i32
  %24 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 16383)
  %25 = extractvalue { i32, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %17
  br label %22

27:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

28:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %22
  %30 = extractvalue { i32, i1 } %24, 0
  %31 = and i80 %0, 18446744073709551615
  %32 = or i80 %31, 0
  %33 = icmp slt i32 %30, 0
  br i1 %33, label %36, label %37

34:                                               ; preds = %37
  %35 = icmp sge i32 %30, 0
  br i1 %35, label %42, label %43

36:                                               ; preds = %29
  br label %6

37:                                               ; preds = %29
  br label %34

38:                                               ; preds = %45
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %39 = icmp slt i32 %30, 63
  br i1 %39, label %51, label %54

40:                                               ; preds = %42
  %41 = icmp uge i32 %30, 63
  br i1 %41, label %44, label %45

42:                                               ; preds = %34
  br label %40

43:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

44:                                               ; preds = %40
  br i1 %9, label %48, label %49

45:                                               ; preds = %40
  br label %38

46:                                               ; preds = %49, %48
  %47 = load i64, ptr %4, align 8
  br label %6

48:                                               ; preds = %44
  store i64 -9223372036854775808, ptr %4, align 8
  br label %46

49:                                               ; preds = %44
  store i64 9223372036854775807, ptr %4, align 8
  br label %46

50:                                               ; preds = %89, %74
  br i1 %9, label %97, label %101

51:                                               ; preds = %38
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %30)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %57, label %58

54:                                               ; preds = %38
  %55 = sub i80 9223372036854775807, %32
  %56 = icmp ule i80 %55, 9223372036854775807
  br i1 %56, label %82, label %83

57:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %51
  %59 = extractvalue { i32, i1 } %52, 0
  %60 = sub i32 127, %59
  %61 = icmp ule i32 %60, 127
  br i1 %61, label %67, label %68

62:                                               ; preds = %67
  %63 = trunc i32 %59 to i7
  %64 = zext i7 %63 to i80
  %65 = lshr i80 %32, %64
  %66 = icmp ult i7 %63, -48
  br i1 %66, label %72, label %73

67:                                               ; preds = %58
  br label %62

68:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

69:                                               ; preds = %72
  %70 = sub i80 9223372036854775807, %65
  %71 = icmp ule i80 %70, 9223372036854775807
  br i1 %71, label %76, label %77

72:                                               ; preds = %62
  br label %69

73:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

74:                                               ; preds = %76
  %75 = trunc i80 %65 to i64
  store i64 %75, ptr %3, align 8
  br label %50

76:                                               ; preds = %69
  br label %74

77:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

78:                                               ; preds = %82
  %79 = trunc i80 %32 to i64
  %80 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 63)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %84, label %85

82:                                               ; preds = %54
  br label %78

83:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

84:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %78
  %86 = extractvalue { i32, i1 } %80, 0
  %87 = sub i32 63, %86
  %88 = icmp ule i32 %87, 63
  br i1 %88, label %93, label %94

89:                                               ; preds = %93
  %90 = trunc i32 %86 to i6
  %91 = zext i6 %90 to i64
  %92 = shl i64 %79, %91
  store i64 %92, ptr %3, align 8
  br label %50

93:                                               ; preds = %85
  br label %89

94:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @64)
  unreachable

95:                                               ; preds = %101
  %96 = load i64, ptr %3, align 8
  br label %6

97:                                               ; preds = %50
  %98 = load i64, ptr %3, align 8
  %99 = xor i64 %98, -1
  %100 = add i64 %99, 1
  br label %6

101:                                              ; preds = %50
  br label %95
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixxfti(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = lshr i80 %0, 79
  br i1 true, label %10, label %11

6:                                                ; preds = %87, %85, %46, %36
  %7 = phi i128 [ 0, %36 ], [ %47, %46 ], [ %90, %87 ], [ %86, %85 ]
  ret i128 %7

8:                                                ; preds = %10
  %9 = icmp ne i80 %5, 0
  br i1 true, label %15, label %16

10:                                               ; preds = %1
  br label %8

11:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

12:                                               ; preds = %15
  %13 = shl i80 %0, 1
  %14 = lshr i80 %13, 65
  br i1 true, label %20, label %21

15:                                               ; preds = %8
  br label %12

16:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

17:                                               ; preds = %20
  %18 = sub i80 2147483647, %14
  %19 = icmp ule i80 %18, 2147483647
  br i1 %19, label %26, label %27

20:                                               ; preds = %12
  br label %17

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

22:                                               ; preds = %26
  %23 = trunc i80 %14 to i32
  %24 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 16383)
  %25 = extractvalue { i32, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %17
  br label %22

27:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

28:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %22
  %30 = extractvalue { i32, i1 } %24, 0
  %31 = and i80 %0, 18446744073709551615
  %32 = or i80 %31, 0
  %33 = icmp slt i32 %30, 0
  br i1 %33, label %36, label %37

34:                                               ; preds = %37
  %35 = icmp sge i32 %30, 0
  br i1 %35, label %42, label %43

36:                                               ; preds = %29
  br label %6

37:                                               ; preds = %29
  br label %34

38:                                               ; preds = %45
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %39 = icmp slt i32 %30, 63
  br i1 %39, label %51, label %54

40:                                               ; preds = %42
  %41 = icmp uge i32 %30, 127
  br i1 %41, label %44, label %45

42:                                               ; preds = %34
  br label %40

43:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

44:                                               ; preds = %40
  br i1 %9, label %48, label %49

45:                                               ; preds = %40
  br label %38

46:                                               ; preds = %49, %48
  %47 = load i128, ptr %4, align 16
  br label %6

48:                                               ; preds = %44
  store i128 -170141183460469231731687303715884105728, ptr %4, align 16
  br label %46

49:                                               ; preds = %44
  store i128 170141183460469231731687303715884105727, ptr %4, align 16
  br label %46

50:                                               ; preds = %79, %70
  br i1 %9, label %87, label %91

51:                                               ; preds = %38
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %30)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %58, label %59

54:                                               ; preds = %38
  %55 = zext i80 %32 to i128
  %56 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 63)
  %57 = extractvalue { i32, i1 } %56, 1
  br i1 %57, label %74, label %75

58:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %51
  %60 = extractvalue { i32, i1 } %52, 0
  %61 = sub i32 127, %60
  %62 = icmp ule i32 %61, 127
  br i1 %62, label %68, label %69

63:                                               ; preds = %68
  %64 = trunc i32 %60 to i7
  %65 = zext i7 %64 to i80
  %66 = lshr i80 %32, %65
  %67 = icmp ult i7 %64, -48
  br i1 %67, label %72, label %73

68:                                               ; preds = %59
  br label %63

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

70:                                               ; preds = %72
  %71 = zext i80 %66 to i128
  store i128 %71, ptr %3, align 16
  br label %50

72:                                               ; preds = %63
  br label %70

73:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

74:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %54
  %76 = extractvalue { i32, i1 } %56, 0
  %77 = sub i32 127, %76
  %78 = icmp ule i32 %77, 127
  br i1 %78, label %83, label %84

79:                                               ; preds = %83
  %80 = trunc i32 %76 to i7
  %81 = zext i7 %80 to i128
  %82 = shl i128 %55, %81
  store i128 %82, ptr %3, align 16
  br label %50

83:                                               ; preds = %75
  br label %79

84:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @65)
  unreachable

85:                                               ; preds = %91
  %86 = load i128, ptr %3, align 16
  br label %6

87:                                               ; preds = %50
  %88 = load i128, ptr %3, align 16
  %89 = xor i128 %88, -1
  %90 = add i128 %89, 1
  br label %6

91:                                               ; preds = %50
  br label %85
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixunshfsi(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = bitcast half %0 to i16
  %5 = lshr i16 %4, 15
  %6 = icmp ne i16 %5, 0
  %7 = shl i16 %4, 1
  %8 = lshr i16 %7, 11
  %9 = zext i16 %8 to i32
  %10 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 15)
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %14, label %15

12:                                               ; preds = %35, %33, %25, %21
  %13 = phi i32 [ 0, %21 ], [ 0, %25 ], [ -1, %33 ], [ %36, %35 ]
  ret i32 %13

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

15:                                               ; preds = %1
  %16 = extractvalue { i32, i1 } %10, 0
  %17 = and i16 %4, 1023
  %18 = or i16 %17, 1024
  %19 = icmp slt i32 %16, 0
  br i1 %19, label %21, label %22

20:                                               ; preds = %22
  br i1 %6, label %25, label %26

21:                                               ; preds = %15
  br label %12

22:                                               ; preds = %15
  br label %20

23:                                               ; preds = %26
  %24 = icmp sge i32 %16, 0
  br i1 %24, label %31, label %32

25:                                               ; preds = %20
  br label %12

26:                                               ; preds = %20
  br label %23

27:                                               ; preds = %34
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %28 = icmp slt i32 %16, 10
  br i1 %28, label %37, label %40

29:                                               ; preds = %31
  %30 = icmp uge i32 %16, 16
  br i1 %30, label %33, label %34

31:                                               ; preds = %23
  br label %29

32:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @66)
  unreachable

33:                                               ; preds = %29
  br label %12

34:                                               ; preds = %29
  br label %27

35:                                               ; preds = %61, %49
  %36 = load i32, ptr %3, align 4
  br label %12

37:                                               ; preds = %27
  %38 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %16)
  %39 = extractvalue { i32, i1 } %38, 1
  br i1 %39, label %44, label %45

40:                                               ; preds = %27
  %41 = zext i16 %18 to i32
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 10)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %56, label %57

44:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %37
  %46 = extractvalue { i32, i1 } %38, 0
  %47 = sub i32 15, %46
  %48 = icmp ule i32 %47, 15
  br i1 %48, label %54, label %55

49:                                               ; preds = %54
  %50 = trunc i32 %46 to i4
  %51 = zext i4 %50 to i16
  %52 = lshr i16 %18, %51
  %53 = zext i16 %52 to i32
  store i32 %53, ptr %3, align 4
  br label %35

54:                                               ; preds = %45
  br label %49

55:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @66)
  unreachable

56:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %40
  %58 = extractvalue { i32, i1 } %42, 0
  %59 = sub i32 31, %58
  %60 = icmp ule i32 %59, 31
  br i1 %60, label %65, label %66

61:                                               ; preds = %65
  %62 = trunc i32 %58 to i5
  %63 = zext i5 %62 to i32
  %64 = shl i32 %41, %63
  store i32 %64, ptr %3, align 4
  br label %35

65:                                               ; preds = %57
  br label %61

66:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @66)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixunshfdi(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = bitcast half %0 to i16
  %5 = lshr i16 %4, 15
  %6 = icmp ne i16 %5, 0
  %7 = shl i16 %4, 1
  %8 = lshr i16 %7, 11
  %9 = zext i16 %8 to i32
  %10 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 15)
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %14, label %15

12:                                               ; preds = %35, %33, %25, %21
  %13 = phi i64 [ 0, %21 ], [ 0, %25 ], [ -1, %33 ], [ %36, %35 ]
  ret i64 %13

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

15:                                               ; preds = %1
  %16 = extractvalue { i32, i1 } %10, 0
  %17 = and i16 %4, 1023
  %18 = or i16 %17, 1024
  %19 = icmp slt i32 %16, 0
  br i1 %19, label %21, label %22

20:                                               ; preds = %22
  br i1 %6, label %25, label %26

21:                                               ; preds = %15
  br label %12

22:                                               ; preds = %15
  br label %20

23:                                               ; preds = %26
  %24 = icmp sge i32 %16, 0
  br i1 %24, label %31, label %32

25:                                               ; preds = %20
  br label %12

26:                                               ; preds = %20
  br label %23

27:                                               ; preds = %34
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %28 = icmp slt i32 %16, 10
  br i1 %28, label %37, label %40

29:                                               ; preds = %31
  %30 = icmp uge i32 %16, 16
  br i1 %30, label %33, label %34

31:                                               ; preds = %23
  br label %29

32:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @67)
  unreachable

33:                                               ; preds = %29
  br label %12

34:                                               ; preds = %29
  br label %27

35:                                               ; preds = %61, %49
  %36 = load i64, ptr %3, align 8
  br label %12

37:                                               ; preds = %27
  %38 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %16)
  %39 = extractvalue { i32, i1 } %38, 1
  br i1 %39, label %44, label %45

40:                                               ; preds = %27
  %41 = zext i16 %18 to i64
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 10)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %56, label %57

44:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %37
  %46 = extractvalue { i32, i1 } %38, 0
  %47 = sub i32 15, %46
  %48 = icmp ule i32 %47, 15
  br i1 %48, label %54, label %55

49:                                               ; preds = %54
  %50 = trunc i32 %46 to i4
  %51 = zext i4 %50 to i16
  %52 = lshr i16 %18, %51
  %53 = zext i16 %52 to i64
  store i64 %53, ptr %3, align 8
  br label %35

54:                                               ; preds = %45
  br label %49

55:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @67)
  unreachable

56:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %40
  %58 = extractvalue { i32, i1 } %42, 0
  %59 = sub i32 63, %58
  %60 = icmp ule i32 %59, 63
  br i1 %60, label %65, label %66

61:                                               ; preds = %65
  %62 = trunc i32 %58 to i6
  %63 = zext i6 %62 to i64
  %64 = shl i64 %41, %63
  store i64 %64, ptr %3, align 8
  br label %35

65:                                               ; preds = %57
  br label %61

66:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @67)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixunshfti(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = bitcast half %0 to i16
  %5 = lshr i16 %4, 15
  %6 = icmp ne i16 %5, 0
  %7 = shl i16 %4, 1
  %8 = lshr i16 %7, 11
  %9 = zext i16 %8 to i32
  %10 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 15)
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %14, label %15

12:                                               ; preds = %35, %33, %25, %21
  %13 = phi i128 [ 0, %21 ], [ 0, %25 ], [ -1, %33 ], [ %36, %35 ]
  ret i128 %13

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

15:                                               ; preds = %1
  %16 = extractvalue { i32, i1 } %10, 0
  %17 = and i16 %4, 1023
  %18 = or i16 %17, 1024
  %19 = icmp slt i32 %16, 0
  br i1 %19, label %21, label %22

20:                                               ; preds = %22
  br i1 %6, label %25, label %26

21:                                               ; preds = %15
  br label %12

22:                                               ; preds = %15
  br label %20

23:                                               ; preds = %26
  %24 = icmp sge i32 %16, 0
  br i1 %24, label %31, label %32

25:                                               ; preds = %20
  br label %12

26:                                               ; preds = %20
  br label %23

27:                                               ; preds = %34
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %28 = icmp slt i32 %16, 10
  br i1 %28, label %37, label %40

29:                                               ; preds = %31
  %30 = icmp uge i32 %16, 16
  br i1 %30, label %33, label %34

31:                                               ; preds = %23
  br label %29

32:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @68)
  unreachable

33:                                               ; preds = %29
  br label %12

34:                                               ; preds = %29
  br label %27

35:                                               ; preds = %61, %49
  %36 = load i128, ptr %3, align 16
  br label %12

37:                                               ; preds = %27
  %38 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 10, i32 %16)
  %39 = extractvalue { i32, i1 } %38, 1
  br i1 %39, label %44, label %45

40:                                               ; preds = %27
  %41 = zext i16 %18 to i128
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 10)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %56, label %57

44:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %37
  %46 = extractvalue { i32, i1 } %38, 0
  %47 = sub i32 15, %46
  %48 = icmp ule i32 %47, 15
  br i1 %48, label %54, label %55

49:                                               ; preds = %54
  %50 = trunc i32 %46 to i4
  %51 = zext i4 %50 to i16
  %52 = lshr i16 %18, %51
  %53 = zext i16 %52 to i128
  store i128 %53, ptr %3, align 16
  br label %35

54:                                               ; preds = %45
  br label %49

55:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @68)
  unreachable

56:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %40
  %58 = extractvalue { i32, i1 } %42, 0
  %59 = sub i32 127, %58
  %60 = icmp ule i32 %59, 127
  br i1 %60, label %65, label %66

61:                                               ; preds = %65
  %62 = trunc i32 %58 to i7
  %63 = zext i7 %62 to i128
  %64 = shl i128 %41, %63
  store i128 %64, ptr %3, align 16
  br label %35

65:                                               ; preds = %57
  br label %61

66:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @68)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixunssfsi(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = bitcast float %0 to i32
  %5 = lshr i32 %4, 31
  %6 = icmp ne i32 %5, 0
  %7 = shl i32 %4, 1
  %8 = lshr i32 %7, 24
  %9 = sub i32 2147483647, %8
  %10 = icmp ule i32 %9, 2147483647
  br i1 %10, label %16, label %17

11:                                               ; preds = %39, %37, %29, %25
  %12 = phi i32 [ 0, %25 ], [ 0, %29 ], [ -1, %37 ], [ %40, %39 ]
  ret i32 %12

13:                                               ; preds = %16
  %14 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 127)
  %15 = extractvalue { i32, i1 } %14, 1
  br i1 %15, label %18, label %19

16:                                               ; preds = %1
  br label %13

17:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @69)
  unreachable

18:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

19:                                               ; preds = %13
  %20 = extractvalue { i32, i1 } %14, 0
  %21 = and i32 %4, 8388607
  %22 = or i32 %21, 8388608
  %23 = icmp slt i32 %20, 0
  br i1 %23, label %25, label %26

24:                                               ; preds = %26
  br i1 %6, label %29, label %30

25:                                               ; preds = %19
  br label %11

26:                                               ; preds = %19
  br label %24

27:                                               ; preds = %30
  %28 = icmp sge i32 %20, 0
  br i1 %28, label %35, label %36

29:                                               ; preds = %24
  br label %11

30:                                               ; preds = %24
  br label %27

31:                                               ; preds = %38
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %32 = icmp slt i32 %20, 23
  br i1 %32, label %41, label %44

33:                                               ; preds = %35
  %34 = icmp uge i32 %20, 32
  br i1 %34, label %37, label %38

35:                                               ; preds = %27
  br label %33

36:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @69)
  unreachable

37:                                               ; preds = %33
  br label %11

38:                                               ; preds = %33
  br label %31

39:                                               ; preds = %63, %52
  %40 = load i32, ptr %3, align 4
  br label %11

41:                                               ; preds = %31
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %20)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %47, label %48

44:                                               ; preds = %31
  %45 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 23)
  %46 = extractvalue { i32, i1 } %45, 1
  br i1 %46, label %58, label %59

47:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %41
  %49 = extractvalue { i32, i1 } %42, 0
  %50 = sub i32 31, %49
  %51 = icmp ule i32 %50, 31
  br i1 %51, label %56, label %57

52:                                               ; preds = %56
  %53 = trunc i32 %49 to i5
  %54 = zext i5 %53 to i32
  %55 = lshr i32 %22, %54
  store i32 %55, ptr %3, align 4
  br label %39

56:                                               ; preds = %48
  br label %52

57:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @69)
  unreachable

58:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %44
  %60 = extractvalue { i32, i1 } %45, 0
  %61 = sub i32 31, %60
  %62 = icmp ule i32 %61, 31
  br i1 %62, label %67, label %68

63:                                               ; preds = %67
  %64 = trunc i32 %60 to i5
  %65 = zext i5 %64 to i32
  %66 = shl i32 %22, %65
  store i32 %66, ptr %3, align 4
  br label %39

67:                                               ; preds = %59
  br label %63

68:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @69)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixunssfdi(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = bitcast float %0 to i32
  %5 = lshr i32 %4, 31
  %6 = icmp ne i32 %5, 0
  %7 = shl i32 %4, 1
  %8 = lshr i32 %7, 24
  %9 = sub i32 2147483647, %8
  %10 = icmp ule i32 %9, 2147483647
  br i1 %10, label %16, label %17

11:                                               ; preds = %39, %37, %29, %25
  %12 = phi i64 [ 0, %25 ], [ 0, %29 ], [ -1, %37 ], [ %40, %39 ]
  ret i64 %12

13:                                               ; preds = %16
  %14 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 127)
  %15 = extractvalue { i32, i1 } %14, 1
  br i1 %15, label %18, label %19

16:                                               ; preds = %1
  br label %13

17:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @70)
  unreachable

18:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

19:                                               ; preds = %13
  %20 = extractvalue { i32, i1 } %14, 0
  %21 = and i32 %4, 8388607
  %22 = or i32 %21, 8388608
  %23 = icmp slt i32 %20, 0
  br i1 %23, label %25, label %26

24:                                               ; preds = %26
  br i1 %6, label %29, label %30

25:                                               ; preds = %19
  br label %11

26:                                               ; preds = %19
  br label %24

27:                                               ; preds = %30
  %28 = icmp sge i32 %20, 0
  br i1 %28, label %35, label %36

29:                                               ; preds = %24
  br label %11

30:                                               ; preds = %24
  br label %27

31:                                               ; preds = %38
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %32 = icmp slt i32 %20, 23
  br i1 %32, label %41, label %44

33:                                               ; preds = %35
  %34 = icmp uge i32 %20, 64
  br i1 %34, label %37, label %38

35:                                               ; preds = %27
  br label %33

36:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @70)
  unreachable

37:                                               ; preds = %33
  br label %11

38:                                               ; preds = %33
  br label %31

39:                                               ; preds = %65, %53
  %40 = load i64, ptr %3, align 8
  br label %11

41:                                               ; preds = %31
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %20)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %48, label %49

44:                                               ; preds = %31
  %45 = zext i32 %22 to i64
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 23)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %60, label %61

48:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %41
  %50 = extractvalue { i32, i1 } %42, 0
  %51 = sub i32 31, %50
  %52 = icmp ule i32 %51, 31
  br i1 %52, label %58, label %59

53:                                               ; preds = %58
  %54 = trunc i32 %50 to i5
  %55 = zext i5 %54 to i32
  %56 = lshr i32 %22, %55
  %57 = zext i32 %56 to i64
  store i64 %57, ptr %3, align 8
  br label %39

58:                                               ; preds = %49
  br label %53

59:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @70)
  unreachable

60:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %44
  %62 = extractvalue { i32, i1 } %46, 0
  %63 = sub i32 63, %62
  %64 = icmp ule i32 %63, 63
  br i1 %64, label %69, label %70

65:                                               ; preds = %69
  %66 = trunc i32 %62 to i6
  %67 = zext i6 %66 to i64
  %68 = shl i64 %45, %67
  store i64 %68, ptr %3, align 8
  br label %39

69:                                               ; preds = %61
  br label %65

70:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @70)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixunssfti(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = bitcast float %0 to i32
  %5 = lshr i32 %4, 31
  %6 = icmp ne i32 %5, 0
  %7 = shl i32 %4, 1
  %8 = lshr i32 %7, 24
  %9 = sub i32 2147483647, %8
  %10 = icmp ule i32 %9, 2147483647
  br i1 %10, label %16, label %17

11:                                               ; preds = %39, %37, %29, %25
  %12 = phi i128 [ 0, %25 ], [ 0, %29 ], [ -1, %37 ], [ %40, %39 ]
  ret i128 %12

13:                                               ; preds = %16
  %14 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 127)
  %15 = extractvalue { i32, i1 } %14, 1
  br i1 %15, label %18, label %19

16:                                               ; preds = %1
  br label %13

17:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @71)
  unreachable

18:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

19:                                               ; preds = %13
  %20 = extractvalue { i32, i1 } %14, 0
  %21 = and i32 %4, 8388607
  %22 = or i32 %21, 8388608
  %23 = icmp slt i32 %20, 0
  br i1 %23, label %25, label %26

24:                                               ; preds = %26
  br i1 %6, label %29, label %30

25:                                               ; preds = %19
  br label %11

26:                                               ; preds = %19
  br label %24

27:                                               ; preds = %30
  %28 = icmp sge i32 %20, 0
  br i1 %28, label %35, label %36

29:                                               ; preds = %24
  br label %11

30:                                               ; preds = %24
  br label %27

31:                                               ; preds = %38
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %32 = icmp slt i32 %20, 23
  br i1 %32, label %41, label %44

33:                                               ; preds = %35
  %34 = icmp uge i32 %20, 128
  br i1 %34, label %37, label %38

35:                                               ; preds = %27
  br label %33

36:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @71)
  unreachable

37:                                               ; preds = %33
  br label %11

38:                                               ; preds = %33
  br label %31

39:                                               ; preds = %65, %53
  %40 = load i128, ptr %3, align 16
  br label %11

41:                                               ; preds = %31
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %20)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %48, label %49

44:                                               ; preds = %31
  %45 = zext i32 %22 to i128
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 23)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %60, label %61

48:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %41
  %50 = extractvalue { i32, i1 } %42, 0
  %51 = sub i32 31, %50
  %52 = icmp ule i32 %51, 31
  br i1 %52, label %58, label %59

53:                                               ; preds = %58
  %54 = trunc i32 %50 to i5
  %55 = zext i5 %54 to i32
  %56 = lshr i32 %22, %55
  %57 = zext i32 %56 to i128
  store i128 %57, ptr %3, align 16
  br label %39

58:                                               ; preds = %49
  br label %53

59:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @71)
  unreachable

60:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %44
  %62 = extractvalue { i32, i1 } %46, 0
  %63 = sub i32 127, %62
  %64 = icmp ule i32 %63, 127
  br i1 %64, label %69, label %70

65:                                               ; preds = %69
  %66 = trunc i32 %62 to i7
  %67 = zext i7 %66 to i128
  %68 = shl i128 %45, %67
  store i128 %68, ptr %3, align 16
  br label %39

69:                                               ; preds = %61
  br label %65

70:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @71)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixunsdfsi(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 63
  %6 = icmp ne i64 %5, 0
  %7 = shl i64 %4, 1
  %8 = lshr i64 %7, 53
  %9 = sub i64 2147483647, %8
  %10 = icmp ule i64 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %40, %38, %30, %26
  %12 = phi i32 [ 0, %26 ], [ 0, %30 ], [ -1, %38 ], [ %41, %40 ]
  ret i32 %12

13:                                               ; preds = %17
  %14 = trunc i64 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 1023)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i64 %4, 4503599627370495
  %23 = or i64 %22, 4503599627370496
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %36, label %37

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %39
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %33 = icmp slt i32 %21, 52
  br i1 %33, label %42, label %45

34:                                               ; preds = %36
  %35 = icmp uge i32 %21, 32
  br i1 %35, label %38, label %39

36:                                               ; preds = %28
  br label %34

37:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

38:                                               ; preds = %34
  br label %11

39:                                               ; preds = %34
  br label %32

40:                                               ; preds = %76, %61
  %41 = load i32, ptr %3, align 4
  br label %11

42:                                               ; preds = %32
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %48, label %49

45:                                               ; preds = %32
  %46 = sub i64 4294967295, %23
  %47 = icmp ule i64 %46, 4294967295
  br i1 %47, label %69, label %70

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i32, i1 } %43, 0
  %51 = sub i32 63, %50
  %52 = icmp ule i32 %51, 63
  br i1 %52, label %59, label %60

53:                                               ; preds = %59
  %54 = trunc i32 %50 to i6
  %55 = zext i6 %54 to i64
  %56 = lshr i64 %23, %55
  %57 = sub i64 4294967295, %56
  %58 = icmp ule i64 %57, 4294967295
  br i1 %58, label %63, label %64

59:                                               ; preds = %49
  br label %53

60:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

61:                                               ; preds = %63
  %62 = trunc i64 %56 to i32
  store i32 %62, ptr %3, align 4
  br label %40

63:                                               ; preds = %53
  br label %61

64:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

65:                                               ; preds = %69
  %66 = trunc i64 %23 to i32
  %67 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 52)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %45
  br label %65

70:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable

71:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %65
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = sub i32 31, %73
  %75 = icmp ule i32 %74, 31
  br i1 %75, label %80, label %81

76:                                               ; preds = %80
  %77 = trunc i32 %73 to i5
  %78 = zext i5 %77 to i32
  %79 = shl i32 %66, %78
  store i32 %79, ptr %3, align 4
  br label %40

80:                                               ; preds = %72
  br label %76

81:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @72)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixunsdfdi(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 63
  %6 = icmp ne i64 %5, 0
  %7 = shl i64 %4, 1
  %8 = lshr i64 %7, 53
  %9 = sub i64 2147483647, %8
  %10 = icmp ule i64 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %40, %38, %30, %26
  %12 = phi i64 [ 0, %26 ], [ 0, %30 ], [ -1, %38 ], [ %41, %40 ]
  ret i64 %12

13:                                               ; preds = %17
  %14 = trunc i64 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 1023)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @73)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i64 %4, 4503599627370495
  %23 = or i64 %22, 4503599627370496
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %36, label %37

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %39
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %33 = icmp slt i32 %21, 52
  br i1 %33, label %42, label %45

34:                                               ; preds = %36
  %35 = icmp uge i32 %21, 64
  br i1 %35, label %38, label %39

36:                                               ; preds = %28
  br label %34

37:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @73)
  unreachable

38:                                               ; preds = %34
  br label %11

39:                                               ; preds = %34
  br label %32

40:                                               ; preds = %64, %53
  %41 = load i64, ptr %3, align 8
  br label %11

42:                                               ; preds = %32
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %48, label %49

45:                                               ; preds = %32
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 52)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %59, label %60

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i32, i1 } %43, 0
  %51 = sub i32 63, %50
  %52 = icmp ule i32 %51, 63
  br i1 %52, label %57, label %58

53:                                               ; preds = %57
  %54 = trunc i32 %50 to i6
  %55 = zext i6 %54 to i64
  %56 = lshr i64 %23, %55
  store i64 %56, ptr %3, align 8
  br label %40

57:                                               ; preds = %49
  br label %53

58:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @73)
  unreachable

59:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %45
  %61 = extractvalue { i32, i1 } %46, 0
  %62 = sub i32 63, %61
  %63 = icmp ule i32 %62, 63
  br i1 %63, label %68, label %69

64:                                               ; preds = %68
  %65 = trunc i32 %61 to i6
  %66 = zext i6 %65 to i64
  %67 = shl i64 %23, %66
  store i64 %67, ptr %3, align 8
  br label %40

68:                                               ; preds = %60
  br label %64

69:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @73)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixunsdfti(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 63
  %6 = icmp ne i64 %5, 0
  %7 = shl i64 %4, 1
  %8 = lshr i64 %7, 53
  %9 = sub i64 2147483647, %8
  %10 = icmp ule i64 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %40, %38, %30, %26
  %12 = phi i128 [ 0, %26 ], [ 0, %30 ], [ -1, %38 ], [ %41, %40 ]
  ret i128 %12

13:                                               ; preds = %17
  %14 = trunc i64 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 1023)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @74)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i64 %4, 4503599627370495
  %23 = or i64 %22, 4503599627370496
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %36, label %37

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %39
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %33 = icmp slt i32 %21, 52
  br i1 %33, label %42, label %45

34:                                               ; preds = %36
  %35 = icmp uge i32 %21, 128
  br i1 %35, label %38, label %39

36:                                               ; preds = %28
  br label %34

37:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @74)
  unreachable

38:                                               ; preds = %34
  br label %11

39:                                               ; preds = %34
  br label %32

40:                                               ; preds = %66, %54
  %41 = load i128, ptr %3, align 16
  br label %11

42:                                               ; preds = %32
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 52, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %49, label %50

45:                                               ; preds = %32
  %46 = zext i64 %23 to i128
  %47 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 52)
  %48 = extractvalue { i32, i1 } %47, 1
  br i1 %48, label %61, label %62

49:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %42
  %51 = extractvalue { i32, i1 } %43, 0
  %52 = sub i32 63, %51
  %53 = icmp ule i32 %52, 63
  br i1 %53, label %59, label %60

54:                                               ; preds = %59
  %55 = trunc i32 %51 to i6
  %56 = zext i6 %55 to i64
  %57 = lshr i64 %23, %56
  %58 = zext i64 %57 to i128
  store i128 %58, ptr %3, align 16
  br label %40

59:                                               ; preds = %50
  br label %54

60:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @74)
  unreachable

61:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

62:                                               ; preds = %45
  %63 = extractvalue { i32, i1 } %47, 0
  %64 = sub i32 127, %63
  %65 = icmp ule i32 %64, 127
  br i1 %65, label %70, label %71

66:                                               ; preds = %70
  %67 = trunc i32 %63 to i7
  %68 = zext i7 %67 to i128
  %69 = shl i128 %46, %68
  store i128 %69, ptr %3, align 16
  br label %40

70:                                               ; preds = %62
  br label %66

71:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @74)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixunstfsi(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 127
  %6 = icmp ne i128 %5, 0
  %7 = shl i128 %4, 1
  %8 = lshr i128 %7, 113
  %9 = sub i128 2147483647, %8
  %10 = icmp ule i128 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %40, %38, %30, %26
  %12 = phi i32 [ 0, %26 ], [ 0, %30 ], [ -1, %38 ], [ %41, %40 ]
  ret i32 %12

13:                                               ; preds = %17
  %14 = trunc i128 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 16383)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i128 %4, 5192296858534827628530496329220095
  %23 = or i128 %22, 5192296858534827628530496329220096
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %36, label %37

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %39
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %33 = icmp slt i32 %21, 112
  br i1 %33, label %42, label %45

34:                                               ; preds = %36
  %35 = icmp uge i32 %21, 32
  br i1 %35, label %38, label %39

36:                                               ; preds = %28
  br label %34

37:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

38:                                               ; preds = %34
  br label %11

39:                                               ; preds = %34
  br label %32

40:                                               ; preds = %76, %61
  %41 = load i32, ptr %3, align 4
  br label %11

42:                                               ; preds = %32
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %48, label %49

45:                                               ; preds = %32
  %46 = sub i128 4294967295, %23
  %47 = icmp ule i128 %46, 4294967295
  br i1 %47, label %69, label %70

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i32, i1 } %43, 0
  %51 = sub i32 127, %50
  %52 = icmp ule i32 %51, 127
  br i1 %52, label %59, label %60

53:                                               ; preds = %59
  %54 = trunc i32 %50 to i7
  %55 = zext i7 %54 to i128
  %56 = lshr i128 %23, %55
  %57 = sub i128 4294967295, %56
  %58 = icmp ule i128 %57, 4294967295
  br i1 %58, label %63, label %64

59:                                               ; preds = %49
  br label %53

60:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

61:                                               ; preds = %63
  %62 = trunc i128 %56 to i32
  store i32 %62, ptr %3, align 4
  br label %40

63:                                               ; preds = %53
  br label %61

64:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

65:                                               ; preds = %69
  %66 = trunc i128 %23 to i32
  %67 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 112)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %45
  br label %65

70:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable

71:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %65
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = sub i32 31, %73
  %75 = icmp ule i32 %74, 31
  br i1 %75, label %80, label %81

76:                                               ; preds = %80
  %77 = trunc i32 %73 to i5
  %78 = zext i5 %77 to i32
  %79 = shl i32 %66, %78
  store i32 %79, ptr %3, align 4
  br label %40

80:                                               ; preds = %72
  br label %76

81:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @75)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixunstfdi(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 127
  %6 = icmp ne i128 %5, 0
  %7 = shl i128 %4, 1
  %8 = lshr i128 %7, 113
  %9 = sub i128 2147483647, %8
  %10 = icmp ule i128 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %40, %38, %30, %26
  %12 = phi i64 [ 0, %26 ], [ 0, %30 ], [ -1, %38 ], [ %41, %40 ]
  ret i64 %12

13:                                               ; preds = %17
  %14 = trunc i128 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 16383)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i128 %4, 5192296858534827628530496329220095
  %23 = or i128 %22, 5192296858534827628530496329220096
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %36, label %37

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %39
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %33 = icmp slt i32 %21, 112
  br i1 %33, label %42, label %45

34:                                               ; preds = %36
  %35 = icmp uge i32 %21, 64
  br i1 %35, label %38, label %39

36:                                               ; preds = %28
  br label %34

37:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

38:                                               ; preds = %34
  br label %11

39:                                               ; preds = %34
  br label %32

40:                                               ; preds = %76, %61
  %41 = load i64, ptr %3, align 8
  br label %11

42:                                               ; preds = %32
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %48, label %49

45:                                               ; preds = %32
  %46 = sub i128 18446744073709551615, %23
  %47 = icmp ule i128 %46, 18446744073709551615
  br i1 %47, label %69, label %70

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i32, i1 } %43, 0
  %51 = sub i32 127, %50
  %52 = icmp ule i32 %51, 127
  br i1 %52, label %59, label %60

53:                                               ; preds = %59
  %54 = trunc i32 %50 to i7
  %55 = zext i7 %54 to i128
  %56 = lshr i128 %23, %55
  %57 = sub i128 18446744073709551615, %56
  %58 = icmp ule i128 %57, 18446744073709551615
  br i1 %58, label %63, label %64

59:                                               ; preds = %49
  br label %53

60:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

61:                                               ; preds = %63
  %62 = trunc i128 %56 to i64
  store i64 %62, ptr %3, align 8
  br label %40

63:                                               ; preds = %53
  br label %61

64:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

65:                                               ; preds = %69
  %66 = trunc i128 %23 to i64
  %67 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 112)
  %68 = extractvalue { i32, i1 } %67, 1
  br i1 %68, label %71, label %72

69:                                               ; preds = %45
  br label %65

70:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable

71:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %65
  %73 = extractvalue { i32, i1 } %67, 0
  %74 = sub i32 63, %73
  %75 = icmp ule i32 %74, 63
  br i1 %75, label %80, label %81

76:                                               ; preds = %80
  %77 = trunc i32 %73 to i6
  %78 = zext i6 %77 to i64
  %79 = shl i64 %66, %78
  store i64 %79, ptr %3, align 8
  br label %40

80:                                               ; preds = %72
  br label %76

81:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @76)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixunstfti(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 127
  %6 = icmp ne i128 %5, 0
  %7 = shl i128 %4, 1
  %8 = lshr i128 %7, 113
  %9 = sub i128 2147483647, %8
  %10 = icmp ule i128 %9, 2147483647
  br i1 %10, label %17, label %18

11:                                               ; preds = %40, %38, %30, %26
  %12 = phi i128 [ 0, %26 ], [ 0, %30 ], [ -1, %38 ], [ %41, %40 ]
  ret i128 %12

13:                                               ; preds = %17
  %14 = trunc i128 %8 to i32
  %15 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 16383)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %19, label %20

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @77)
  unreachable

19:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

20:                                               ; preds = %13
  %21 = extractvalue { i32, i1 } %15, 0
  %22 = and i128 %4, 5192296858534827628530496329220095
  %23 = or i128 %22, 5192296858534827628530496329220096
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %26, label %27

25:                                               ; preds = %27
  br i1 %6, label %30, label %31

26:                                               ; preds = %20
  br label %11

27:                                               ; preds = %20
  br label %25

28:                                               ; preds = %31
  %29 = icmp sge i32 %21, 0
  br i1 %29, label %36, label %37

30:                                               ; preds = %25
  br label %11

31:                                               ; preds = %25
  br label %28

32:                                               ; preds = %39
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %33 = icmp slt i32 %21, 112
  br i1 %33, label %42, label %45

34:                                               ; preds = %36
  %35 = icmp uge i32 %21, 128
  br i1 %35, label %38, label %39

36:                                               ; preds = %28
  br label %34

37:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @77)
  unreachable

38:                                               ; preds = %34
  br label %11

39:                                               ; preds = %34
  br label %32

40:                                               ; preds = %64, %53
  %41 = load i128, ptr %3, align 16
  br label %11

42:                                               ; preds = %32
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 112, i32 %21)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %48, label %49

45:                                               ; preds = %32
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 112)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %59, label %60

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i32, i1 } %43, 0
  %51 = sub i32 127, %50
  %52 = icmp ule i32 %51, 127
  br i1 %52, label %57, label %58

53:                                               ; preds = %57
  %54 = trunc i32 %50 to i7
  %55 = zext i7 %54 to i128
  %56 = lshr i128 %23, %55
  store i128 %56, ptr %3, align 16
  br label %40

57:                                               ; preds = %49
  br label %53

58:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @77)
  unreachable

59:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %45
  %61 = extractvalue { i32, i1 } %46, 0
  %62 = sub i32 127, %61
  %63 = icmp ule i32 %62, 127
  br i1 %63, label %68, label %69

64:                                               ; preds = %68
  %65 = trunc i32 %61 to i7
  %66 = zext i7 %65 to i128
  %67 = shl i128 %23, %66
  store i128 %67, ptr %3, align 16
  br label %40

68:                                               ; preds = %60
  br label %64

69:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @77)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__fixunsxfsi(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = lshr i80 %0, 79
  br i1 true, label %9, label %10

5:                                                ; preds = %48, %46, %38, %34
  %6 = phi i32 [ 0, %34 ], [ 0, %38 ], [ -1, %46 ], [ %49, %48 ]
  ret i32 %6

7:                                                ; preds = %9
  %8 = icmp ne i80 %4, 0
  br i1 true, label %14, label %15

9:                                                ; preds = %1
  br label %7

10:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

11:                                               ; preds = %14
  %12 = shl i80 %0, 1
  %13 = lshr i80 %12, 65
  br i1 true, label %19, label %20

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

16:                                               ; preds = %19
  %17 = sub i80 2147483647, %13
  %18 = icmp ule i80 %17, 2147483647
  br i1 %18, label %25, label %26

19:                                               ; preds = %11
  br label %16

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

21:                                               ; preds = %25
  %22 = trunc i80 %13 to i32
  %23 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 16383)
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %27, label %28

25:                                               ; preds = %16
  br label %21

26:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

27:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %21
  %29 = extractvalue { i32, i1 } %23, 0
  %30 = and i80 %0, 18446744073709551615
  %31 = or i80 %30, 0
  %32 = icmp slt i32 %29, 0
  br i1 %32, label %34, label %35

33:                                               ; preds = %35
  br i1 %8, label %38, label %39

34:                                               ; preds = %28
  br label %5

35:                                               ; preds = %28
  br label %33

36:                                               ; preds = %39
  %37 = icmp sge i32 %29, 0
  br i1 %37, label %44, label %45

38:                                               ; preds = %33
  br label %5

39:                                               ; preds = %33
  br label %36

40:                                               ; preds = %47
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %41 = icmp slt i32 %29, 63
  br i1 %41, label %50, label %53

42:                                               ; preds = %44
  %43 = icmp uge i32 %29, 32
  br i1 %43, label %46, label %47

44:                                               ; preds = %36
  br label %42

45:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

46:                                               ; preds = %42
  br label %5

47:                                               ; preds = %42
  br label %40

48:                                               ; preds = %88, %73
  %49 = load i32, ptr %3, align 4
  br label %5

50:                                               ; preds = %40
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %29)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %56, label %57

53:                                               ; preds = %40
  %54 = sub i80 4294967295, %31
  %55 = icmp ule i80 %54, 4294967295
  br i1 %55, label %81, label %82

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %51, 0
  %59 = sub i32 127, %58
  %60 = icmp ule i32 %59, 127
  br i1 %60, label %66, label %67

61:                                               ; preds = %66
  %62 = trunc i32 %58 to i7
  %63 = zext i7 %62 to i80
  %64 = lshr i80 %31, %63
  %65 = icmp ult i7 %62, -48
  br i1 %65, label %71, label %72

66:                                               ; preds = %57
  br label %61

67:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

68:                                               ; preds = %71
  %69 = sub i80 4294967295, %64
  %70 = icmp ule i80 %69, 4294967295
  br i1 %70, label %75, label %76

71:                                               ; preds = %61
  br label %68

72:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

73:                                               ; preds = %75
  %74 = trunc i80 %64 to i32
  store i32 %74, ptr %3, align 4
  br label %48

75:                                               ; preds = %68
  br label %73

76:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

77:                                               ; preds = %81
  %78 = trunc i80 %31 to i32
  %79 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %29, i32 63)
  %80 = extractvalue { i32, i1 } %79, 1
  br i1 %80, label %83, label %84

81:                                               ; preds = %53
  br label %77

82:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable

83:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %77
  %85 = extractvalue { i32, i1 } %79, 0
  %86 = sub i32 31, %85
  %87 = icmp ule i32 %86, 31
  br i1 %87, label %92, label %93

88:                                               ; preds = %92
  %89 = trunc i32 %85 to i5
  %90 = zext i5 %89 to i32
  %91 = shl i32 %78, %90
  store i32 %91, ptr %3, align 4
  br label %48

92:                                               ; preds = %84
  br label %88

93:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @78)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__fixunsxfdi(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = lshr i80 %0, 79
  br i1 true, label %9, label %10

5:                                                ; preds = %48, %46, %38, %34
  %6 = phi i64 [ 0, %34 ], [ 0, %38 ], [ -1, %46 ], [ %49, %48 ]
  ret i64 %6

7:                                                ; preds = %9
  %8 = icmp ne i80 %4, 0
  br i1 true, label %14, label %15

9:                                                ; preds = %1
  br label %7

10:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

11:                                               ; preds = %14
  %12 = shl i80 %0, 1
  %13 = lshr i80 %12, 65
  br i1 true, label %19, label %20

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

16:                                               ; preds = %19
  %17 = sub i80 2147483647, %13
  %18 = icmp ule i80 %17, 2147483647
  br i1 %18, label %25, label %26

19:                                               ; preds = %11
  br label %16

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

21:                                               ; preds = %25
  %22 = trunc i80 %13 to i32
  %23 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 16383)
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %27, label %28

25:                                               ; preds = %16
  br label %21

26:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

27:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %21
  %29 = extractvalue { i32, i1 } %23, 0
  %30 = and i80 %0, 18446744073709551615
  %31 = or i80 %30, 0
  %32 = icmp slt i32 %29, 0
  br i1 %32, label %34, label %35

33:                                               ; preds = %35
  br i1 %8, label %38, label %39

34:                                               ; preds = %28
  br label %5

35:                                               ; preds = %28
  br label %33

36:                                               ; preds = %39
  %37 = icmp sge i32 %29, 0
  br i1 %37, label %44, label %45

38:                                               ; preds = %33
  br label %5

39:                                               ; preds = %33
  br label %36

40:                                               ; preds = %47
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %41 = icmp slt i32 %29, 63
  br i1 %41, label %50, label %53

42:                                               ; preds = %44
  %43 = icmp uge i32 %29, 64
  br i1 %43, label %46, label %47

44:                                               ; preds = %36
  br label %42

45:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

46:                                               ; preds = %42
  br label %5

47:                                               ; preds = %42
  br label %40

48:                                               ; preds = %88, %73
  %49 = load i64, ptr %3, align 8
  br label %5

50:                                               ; preds = %40
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %29)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %56, label %57

53:                                               ; preds = %40
  %54 = sub i80 18446744073709551615, %31
  %55 = icmp ule i80 %54, 18446744073709551615
  br i1 %55, label %81, label %82

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %51, 0
  %59 = sub i32 127, %58
  %60 = icmp ule i32 %59, 127
  br i1 %60, label %66, label %67

61:                                               ; preds = %66
  %62 = trunc i32 %58 to i7
  %63 = zext i7 %62 to i80
  %64 = lshr i80 %31, %63
  %65 = icmp ult i7 %62, -48
  br i1 %65, label %71, label %72

66:                                               ; preds = %57
  br label %61

67:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

68:                                               ; preds = %71
  %69 = sub i80 18446744073709551615, %64
  %70 = icmp ule i80 %69, 18446744073709551615
  br i1 %70, label %75, label %76

71:                                               ; preds = %61
  br label %68

72:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

73:                                               ; preds = %75
  %74 = trunc i80 %64 to i64
  store i64 %74, ptr %3, align 8
  br label %48

75:                                               ; preds = %68
  br label %73

76:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

77:                                               ; preds = %81
  %78 = trunc i80 %31 to i64
  %79 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %29, i32 63)
  %80 = extractvalue { i32, i1 } %79, 1
  br i1 %80, label %83, label %84

81:                                               ; preds = %53
  br label %77

82:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable

83:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %77
  %85 = extractvalue { i32, i1 } %79, 0
  %86 = sub i32 63, %85
  %87 = icmp ule i32 %86, 63
  br i1 %87, label %92, label %93

88:                                               ; preds = %92
  %89 = trunc i32 %85 to i6
  %90 = zext i6 %89 to i64
  %91 = shl i64 %78, %90
  store i64 %91, ptr %3, align 8
  br label %48

92:                                               ; preds = %84
  br label %88

93:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @79)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__fixunsxfti(i80 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = lshr i80 %0, 79
  br i1 true, label %9, label %10

5:                                                ; preds = %48, %46, %38, %34
  %6 = phi i128 [ 0, %34 ], [ 0, %38 ], [ -1, %46 ], [ %49, %48 ]
  ret i128 %6

7:                                                ; preds = %9
  %8 = icmp ne i80 %4, 0
  br i1 true, label %14, label %15

9:                                                ; preds = %1
  br label %7

10:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

11:                                               ; preds = %14
  %12 = shl i80 %0, 1
  %13 = lshr i80 %12, 65
  br i1 true, label %19, label %20

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

16:                                               ; preds = %19
  %17 = sub i80 2147483647, %13
  %18 = icmp ule i80 %17, 2147483647
  br i1 %18, label %25, label %26

19:                                               ; preds = %11
  br label %16

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

21:                                               ; preds = %25
  %22 = trunc i80 %13 to i32
  %23 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 16383)
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %27, label %28

25:                                               ; preds = %16
  br label %21

26:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

27:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %21
  %29 = extractvalue { i32, i1 } %23, 0
  %30 = and i80 %0, 18446744073709551615
  %31 = or i80 %30, 0
  %32 = icmp slt i32 %29, 0
  br i1 %32, label %34, label %35

33:                                               ; preds = %35
  br i1 %8, label %38, label %39

34:                                               ; preds = %28
  br label %5

35:                                               ; preds = %28
  br label %33

36:                                               ; preds = %39
  %37 = icmp sge i32 %29, 0
  br i1 %37, label %44, label %45

38:                                               ; preds = %33
  br label %5

39:                                               ; preds = %33
  br label %36

40:                                               ; preds = %47
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %41 = icmp slt i32 %29, 63
  br i1 %41, label %50, label %53

42:                                               ; preds = %44
  %43 = icmp uge i32 %29, 128
  br i1 %43, label %46, label %47

44:                                               ; preds = %36
  br label %42

45:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

46:                                               ; preds = %42
  br label %5

47:                                               ; preds = %42
  br label %40

48:                                               ; preds = %78, %69
  %49 = load i128, ptr %3, align 16
  br label %5

50:                                               ; preds = %40
  %51 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 63, i32 %29)
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %57, label %58

53:                                               ; preds = %40
  %54 = zext i80 %31 to i128
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %29, i32 63)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %73, label %74

57:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %50
  %59 = extractvalue { i32, i1 } %51, 0
  %60 = sub i32 127, %59
  %61 = icmp ule i32 %60, 127
  br i1 %61, label %67, label %68

62:                                               ; preds = %67
  %63 = trunc i32 %59 to i7
  %64 = zext i7 %63 to i80
  %65 = lshr i80 %31, %64
  %66 = icmp ult i7 %63, -48
  br i1 %66, label %71, label %72

67:                                               ; preds = %58
  br label %62

68:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

69:                                               ; preds = %71
  %70 = zext i80 %65 to i128
  store i128 %70, ptr %3, align 16
  br label %48

71:                                               ; preds = %62
  br label %69

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable

73:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %53
  %75 = extractvalue { i32, i1 } %55, 0
  %76 = sub i32 127, %75
  %77 = icmp ule i32 %76, 127
  br i1 %77, label %82, label %83

78:                                               ; preds = %82
  %79 = trunc i32 %75 to i7
  %80 = zext i7 %79 to i128
  %81 = shl i128 %54, %80
  store i128 %81, ptr %3, align 16
  br label %48

82:                                               ; preds = %74
  br label %78

83:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @80)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__floatsihf(i32 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3580(i32 %0)
  ret half %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3580(i32 %0) unnamed_addr #0 {
  %2 = alloca i5, align 1
  %3 = alloca i6, align 1
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i32 @math.absCast__anon_5827(i32 %0)
  store i32 %8, ptr %5, align 4
  %9 = icmp slt i32 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret half 0xH0000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i16 [ -32768, %19 ], [ 0, %20 ]
  store i16 %13, ptr %4, align 2
  %14 = load i32, ptr %5, align 4
  %15 = call i32 @llvm.ctlz.i32(i32 %14, i1 false)
  %16 = trunc i32 %15 to i6
  %17 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %16)
  %18 = extractvalue { i6, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i6, i1 } %17, 0
  %24 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %23, i6 1)
  %25 = extractvalue { i6, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i6, i1 } %24, 0
  store i6 %28, ptr %3, align 1
  %29 = load i6, ptr %3, align 1
  %30 = icmp ule i6 %29, 10
  br i1 %30, label %34, label %38

31:                                               ; preds = %102, %54
  %32 = load i6, ptr %3, align 1
  %33 = icmp ugt i6 %32, 15
  br i1 %33, label %114, label %117

34:                                               ; preds = %27
  %35 = load i6, ptr %3, align 1
  %36 = sub i6 15, %35
  %37 = icmp ule i6 %36, 15
  br i1 %37, label %46, label %47

38:                                               ; preds = %27
  %39 = load i6, ptr %3, align 1
  %40 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %39, i6 10)
  %41 = extractvalue { i6, i1 } %40, 1
  br i1 %41, label %62, label %63

42:                                               ; preds = %46
  %43 = trunc i6 %35 to i4
  %44 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %43)
  %45 = extractvalue { i4, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @125)
  unreachable

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i4, i1 } %44, 0
  %51 = load i32, ptr %5, align 4
  %52 = sub i32 65535, %51
  %53 = icmp ule i32 %52, 65535
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i32 %51 to i16
  %56 = zext i4 %50 to i16
  %57 = shl i16 %55, %56
  store i16 %57, ptr %4, align 2
  %58 = load i16, ptr %4, align 2
  %59 = xor i16 %58, 1024
  store i16 %59, ptr %4, align 2
  br label %31

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @125)
  unreachable

62:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %38
  %64 = extractvalue { i6, i1 } %40, 0
  %65 = sub i6 31, %64
  %66 = icmp ule i6 %65, 31
  br i1 %66, label %75, label %76

67:                                               ; preds = %75
  %68 = trunc i6 %64 to i5
  store i5 %68, ptr %2, align 1
  %69 = load i32, ptr %5, align 4
  %70 = call i32 @llvm.cttz.i32(i32 %69, i1 false)
  %71 = trunc i32 %70 to i6
  %72 = load i5, ptr %2, align 1
  %73 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %72, i5 1)
  %74 = extractvalue { i5, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %63
  br label %67

76:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @125)
  unreachable

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %67
  %79 = extractvalue { i5, i1 } %73, 0
  %80 = zext i5 %79 to i6
  %81 = icmp eq i6 %71, %80
  %82 = load i32, ptr %5, align 4
  %83 = load i5, ptr %2, align 1
  %84 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %83, i5 1)
  %85 = extractvalue { i5, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %78
  %88 = extractvalue { i5, i1 } %84, 0
  %89 = zext i5 %88 to i32
  %90 = lshr i32 %82, %89
  %91 = sub i32 65535, %90
  %92 = icmp ule i32 %91, 65535
  br i1 %92, label %99, label %100

93:                                               ; preds = %99
  %94 = trunc i32 %90 to i16
  %95 = xor i16 %94, 2048
  store i16 %95, ptr %4, align 2
  %96 = load i16, ptr %4, align 2
  %97 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %96, i16 1)
  %98 = extractvalue { i16, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %87
  br label %93

100:                                              ; preds = %87
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @125)
  unreachable

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %93
  %103 = extractvalue { i16, i1 } %97, 0
  %104 = lshr i16 %103, 1
  %105 = zext i1 %81 to i16
  %106 = xor i16 %105, -1
  %107 = and i16 %104, %106
  store i16 %107, ptr %4, align 2
  br label %31

108:                                              ; preds = %117
  %109 = load i16, ptr %4, align 2
  %110 = load i6, ptr %3, align 1
  %111 = zext i6 %110 to i16
  %112 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %111, i16 15)
  %113 = extractvalue { i16, i1 } %112, 1
  br i1 %113, label %118, label %119

114:                                              ; preds = %31
  %115 = or i16 %13, 31744
  %116 = bitcast i16 %115 to half
  ret half %116

117:                                              ; preds = %31
  br label %108

118:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %108
  %120 = extractvalue { i16, i1 } %112, 0
  %121 = shl i16 %120, 10
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %109, i16 %121)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %119
  %126 = extractvalue { i16, i1 } %122, 0
  store i16 %126, ptr %4, align 2
  %127 = load i16, ptr %4, align 2
  %128 = or i16 %13, %127
  %129 = bitcast i16 %128 to half
  ret half %129
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.absCast__anon_5827(i32 %0) unnamed_addr #0 {
  %2 = icmp slt i32 %0, 0
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = add i32 %0, -1
  %5 = xor i32 %4, -1
  ret i32 %5

6:                                                ; preds = %1
  %7 = icmp sge i32 %0, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  ret i32 %0

9:                                                ; preds = %6
  br label %8

10:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @174)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i4, i1 } @llvm.usub.with.overflow.i4(i4, i4) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.cttz.i32(i32, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__floatsisf(i32 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3581(i32 %0)
  ret float %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3581(i32 %0) unnamed_addr #0 {
  %2 = alloca i5, align 1
  %3 = alloca i6, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i32 @math.absCast__anon_5827(i32 %0)
  store i32 %8, ptr %5, align 4
  %9 = icmp slt i32 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret float 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i32 [ -2147483648, %19 ], [ 0, %20 ]
  store i32 %13, ptr %4, align 4
  %14 = load i32, ptr %5, align 4
  %15 = call i32 @llvm.ctlz.i32(i32 %14, i1 false)
  %16 = trunc i32 %15 to i6
  %17 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %16)
  %18 = extractvalue { i6, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i6, i1 } %17, 0
  %24 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %23, i6 1)
  %25 = extractvalue { i6, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i6, i1 } %24, 0
  store i6 %28, ptr %3, align 1
  %29 = load i6, ptr %3, align 1
  %30 = icmp ule i6 %29, 23
  br i1 %30, label %37, label %41

31:                                               ; preds = %93, %52
  %32 = load i32, ptr %4, align 4
  %33 = load i6, ptr %3, align 1
  %34 = zext i6 %33 to i32
  %35 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %34, i32 127)
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %99, label %100

37:                                               ; preds = %27
  %38 = load i6, ptr %3, align 1
  %39 = sub i6 31, %38
  %40 = icmp ule i6 %39, 31
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i6, ptr %3, align 1
  %43 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %42, i6 23)
  %44 = extractvalue { i6, i1 } %43, 1
  br i1 %44, label %59, label %60

45:                                               ; preds = %49
  %46 = trunc i6 %38 to i5
  %47 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %46)
  %48 = extractvalue { i5, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @126)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i5, i1 } %47, 0
  %54 = load i32, ptr %5, align 4
  %55 = zext i5 %53 to i32
  %56 = shl i32 %54, %55
  store i32 %56, ptr %4, align 4
  %57 = load i32, ptr %4, align 4
  %58 = xor i32 %57, 8388608
  store i32 %58, ptr %4, align 4
  br label %31

59:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %41
  %61 = extractvalue { i6, i1 } %43, 0
  %62 = sub i6 31, %61
  %63 = icmp ule i6 %62, 31
  br i1 %63, label %72, label %73

64:                                               ; preds = %72
  %65 = trunc i6 %61 to i5
  store i5 %65, ptr %2, align 1
  %66 = load i32, ptr %5, align 4
  %67 = call i32 @llvm.cttz.i32(i32 %66, i1 false)
  %68 = trunc i32 %67 to i6
  %69 = load i5, ptr %2, align 1
  %70 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %69, i5 1)
  %71 = extractvalue { i5, i1 } %70, 1
  br i1 %71, label %74, label %75

72:                                               ; preds = %60
  br label %64

73:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @126)
  unreachable

74:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %64
  %76 = extractvalue { i5, i1 } %70, 0
  %77 = zext i5 %76 to i6
  %78 = icmp eq i6 %68, %77
  %79 = load i32, ptr %5, align 4
  %80 = load i5, ptr %2, align 1
  %81 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %80, i5 1)
  %82 = extractvalue { i5, i1 } %81, 1
  br i1 %82, label %83, label %84

83:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %75
  %85 = extractvalue { i5, i1 } %81, 0
  %86 = zext i5 %85 to i32
  %87 = lshr i32 %79, %86
  %88 = xor i32 %87, 16777216
  store i32 %88, ptr %4, align 4
  %89 = load i32, ptr %4, align 4
  %90 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %89, i32 1)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %84
  %94 = extractvalue { i32, i1 } %90, 0
  %95 = lshr i32 %94, 1
  %96 = zext i1 %78 to i32
  %97 = xor i32 %96, -1
  %98 = and i32 %95, %97
  store i32 %98, ptr %4, align 4
  br label %31

99:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %31
  %101 = extractvalue { i32, i1 } %35, 0
  %102 = shl i32 %101, 23
  %103 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %32, i32 %102)
  %104 = extractvalue { i32, i1 } %103, 1
  br i1 %104, label %105, label %106

105:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

106:                                              ; preds = %100
  %107 = extractvalue { i32, i1 } %103, 0
  store i32 %107, ptr %4, align 4
  %108 = load i32, ptr %4, align 4
  %109 = or i32 %13, %108
  %110 = bitcast i32 %109 to float
  ret float %110
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__floatsidf(i32 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3582(i32 %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3582(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %9, label %10

6:                                                ; preds = %10
  %7 = call fastcc i32 @math.absCast__anon_5827(i32 %0)
  store i32 %7, ptr %4, align 4
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %18, label %19

9:                                                ; preds = %1
  ret double 0.000000e+00

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %19, %18
  %12 = phi i64 [ -9223372036854775808, %18 ], [ 0, %19 ]
  store i64 %12, ptr %3, align 8
  %13 = load i32, ptr %4, align 4
  %14 = call i32 @llvm.ctlz.i32(i32 %13, i1 false)
  %15 = trunc i32 %14 to i6
  %16 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %15)
  %17 = extractvalue { i6, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %6
  br label %11

19:                                               ; preds = %6
  br label %11

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %11
  %22 = extractvalue { i6, i1 } %16, 0
  %23 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %22, i6 1)
  %24 = extractvalue { i6, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %21
  %27 = extractvalue { i6, i1 } %23, 0
  store i6 %27, ptr %2, align 1
  %28 = load i6, ptr %2, align 1
  %29 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %28)
  %30 = extractvalue { i6, i1 } %29, 1
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

32:                                               ; preds = %26
  %33 = extractvalue { i6, i1 } %29, 0
  %34 = load i32, ptr %4, align 4
  %35 = zext i32 %34 to i64
  %36 = zext i6 %33 to i64
  %37 = shl i64 %35, %36
  store i64 %37, ptr %3, align 8
  %38 = load i64, ptr %3, align 8
  %39 = xor i64 %38, 4503599627370496
  store i64 %39, ptr %3, align 8
  %40 = load i64, ptr %3, align 8
  %41 = load i6, ptr %2, align 1
  %42 = zext i6 %41 to i64
  %43 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %42, i64 1023)
  %44 = extractvalue { i64, i1 } %43, 1
  br i1 %44, label %45, label %46

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %32
  %47 = extractvalue { i64, i1 } %43, 0
  %48 = shl i64 %47, 52
  %49 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %40, i64 %48)
  %50 = extractvalue { i64, i1 } %49, 1
  br i1 %50, label %51, label %52

51:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %46
  %53 = extractvalue { i64, i1 } %49, 0
  store i64 %53, ptr %3, align 8
  %54 = load i64, ptr %3, align 8
  %55 = or i64 %12, %54
  %56 = bitcast i64 %55 to double
  ret double %56
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__floatsitf(i32 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3583(i32 %0)
  ret fp128 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3583(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i128, align 16
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %9, label %10

6:                                                ; preds = %10
  %7 = call fastcc i32 @math.absCast__anon_5827(i32 %0)
  store i32 %7, ptr %4, align 4
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %18, label %19

9:                                                ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %19, %18
  %12 = phi i128 [ -170141183460469231731687303715884105728, %18 ], [ 0, %19 ]
  store i128 %12, ptr %3, align 16
  %13 = load i32, ptr %4, align 4
  %14 = call i32 @llvm.ctlz.i32(i32 %13, i1 false)
  %15 = trunc i32 %14 to i6
  %16 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %15)
  %17 = extractvalue { i6, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %6
  br label %11

19:                                               ; preds = %6
  br label %11

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %11
  %22 = extractvalue { i6, i1 } %16, 0
  %23 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %22, i6 1)
  %24 = extractvalue { i6, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %21
  %27 = extractvalue { i6, i1 } %23, 0
  store i6 %27, ptr %2, align 1
  %28 = load i6, ptr %2, align 1
  %29 = zext i6 %28 to i7
  %30 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %29)
  %31 = extractvalue { i7, i1 } %30, 1
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %26
  %34 = extractvalue { i7, i1 } %30, 0
  %35 = load i32, ptr %4, align 4
  %36 = zext i32 %35 to i128
  %37 = zext i7 %34 to i128
  %38 = shl i128 %36, %37
  store i128 %38, ptr %3, align 16
  %39 = load i128, ptr %3, align 16
  %40 = xor i128 %39, 5192296858534827628530496329220096
  store i128 %40, ptr %3, align 16
  %41 = load i128, ptr %3, align 16
  %42 = load i6, ptr %2, align 1
  %43 = zext i6 %42 to i128
  %44 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %43, i128 16383)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %46, label %47

46:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %33
  %48 = extractvalue { i128, i1 } %44, 0
  %49 = shl i128 %48, 112
  %50 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %41, i128 %49)
  %51 = extractvalue { i128, i1 } %50, 1
  br i1 %51, label %52, label %53

52:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

53:                                               ; preds = %47
  %54 = extractvalue { i128, i1 } %50, 0
  store i128 %54, ptr %3, align 16
  %55 = load i128, ptr %3, align 16
  %56 = or i128 %12, %55
  %57 = bitcast i128 %56 to fp128
  ret fp128 %57
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__floatsixf(i32 %0) #0 {
  %2 = call fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3584(i32 %0)
  ret i80 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3584(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i80, align 16
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %9, label %10

6:                                                ; preds = %10
  %7 = call fastcc i32 @math.absCast__anon_5827(i32 %0)
  store i32 %7, ptr %4, align 4
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %18, label %19

9:                                                ; preds = %1
  ret i80 0

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %19, %18
  %12 = phi i80 [ -604462909807314587353088, %18 ], [ 0, %19 ]
  store i80 %12, ptr %3, align 16
  %13 = load i32, ptr %4, align 4
  %14 = call i32 @llvm.ctlz.i32(i32 %13, i1 false)
  %15 = trunc i32 %14 to i6
  %16 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %15)
  %17 = extractvalue { i6, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %6
  br label %11

19:                                               ; preds = %6
  br label %11

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %11
  %22 = extractvalue { i6, i1 } %16, 0
  %23 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %22, i6 1)
  %24 = extractvalue { i6, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %21
  %27 = extractvalue { i6, i1 } %23, 0
  store i6 %27, ptr %2, align 1
  %28 = load i6, ptr %2, align 1
  %29 = zext i6 %28 to i7
  %30 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %29)
  %31 = extractvalue { i7, i1 } %30, 1
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %26
  %34 = extractvalue { i7, i1 } %30, 0
  %35 = load i32, ptr %4, align 4
  %36 = zext i32 %35 to i80
  %37 = icmp ult i7 %34, -48
  br i1 %37, label %48, label %49

38:                                               ; preds = %48
  %39 = zext i7 %34 to i80
  %40 = shl i80 %36, %39
  store i80 %40, ptr %3, align 16
  %41 = load i80, ptr %3, align 16
  %42 = xor i80 %41, 0
  store i80 %42, ptr %3, align 16
  %43 = load i80, ptr %3, align 16
  %44 = load i6, ptr %2, align 1
  %45 = zext i6 %44 to i80
  %46 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %45, i80 16383)
  %47 = extractvalue { i80, i1 } %46, 1
  br i1 %47, label %50, label %51

48:                                               ; preds = %33
  br label %38

49:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @127)
  unreachable

50:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

51:                                               ; preds = %38
  %52 = extractvalue { i80, i1 } %46, 0
  br i1 true, label %57, label %58

53:                                               ; preds = %57
  %54 = shl i80 %52, 64
  %55 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %43, i80 %54)
  %56 = extractvalue { i80, i1 } %55, 1
  br i1 %56, label %59, label %60

57:                                               ; preds = %51
  br label %53

58:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @127)
  unreachable

59:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %53
  %61 = extractvalue { i80, i1 } %55, 0
  store i80 %61, ptr %3, align 16
  %62 = load i80, ptr %3, align 16
  %63 = or i80 %62, 9223372036854775808
  store i80 %63, ptr %3, align 16
  %64 = load i80, ptr %3, align 16
  %65 = or i80 %12, %64
  ret i80 %65
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i80, i1 } @llvm.uadd.with.overflow.i80(i80, i80) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__floatdihf(i64 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3585(i64 %0)
  ret half %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3585(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i16, align 2
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i64 @math.absCast__anon_5828(i64 %0)
  store i64 %8, ptr %5, align 8
  %9 = icmp slt i64 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret half 0xH0000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i16 [ -32768, %19 ], [ 0, %20 ]
  store i16 %13, ptr %4, align 2
  %14 = load i64, ptr %5, align 8
  %15 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %16 = trunc i64 %15 to i7
  %17 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %16)
  %18 = extractvalue { i7, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i7, i1 } %17, 0
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %23, i7 1)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i7, i1 } %24, 0
  store i7 %28, ptr %3, align 1
  %29 = load i7, ptr %3, align 1
  %30 = icmp ule i7 %29, 10
  br i1 %30, label %34, label %38

31:                                               ; preds = %102, %54
  %32 = load i7, ptr %3, align 1
  %33 = icmp ugt i7 %32, 15
  br i1 %33, label %114, label %117

34:                                               ; preds = %27
  %35 = load i7, ptr %3, align 1
  %36 = sub i7 15, %35
  %37 = icmp ule i7 %36, 15
  br i1 %37, label %46, label %47

38:                                               ; preds = %27
  %39 = load i7, ptr %3, align 1
  %40 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %39, i7 10)
  %41 = extractvalue { i7, i1 } %40, 1
  br i1 %41, label %62, label %63

42:                                               ; preds = %46
  %43 = trunc i7 %35 to i4
  %44 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %43)
  %45 = extractvalue { i4, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @128)
  unreachable

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i4, i1 } %44, 0
  %51 = load i64, ptr %5, align 8
  %52 = sub i64 65535, %51
  %53 = icmp ule i64 %52, 65535
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i64 %51 to i16
  %56 = zext i4 %50 to i16
  %57 = shl i16 %55, %56
  store i16 %57, ptr %4, align 2
  %58 = load i16, ptr %4, align 2
  %59 = xor i16 %58, 1024
  store i16 %59, ptr %4, align 2
  br label %31

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @128)
  unreachable

62:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %38
  %64 = extractvalue { i7, i1 } %40, 0
  %65 = sub i7 63, %64
  %66 = icmp ule i7 %65, 63
  br i1 %66, label %75, label %76

67:                                               ; preds = %75
  %68 = trunc i7 %64 to i6
  store i6 %68, ptr %2, align 1
  %69 = load i64, ptr %5, align 8
  %70 = call i64 @llvm.cttz.i64(i64 %69, i1 false)
  %71 = trunc i64 %70 to i7
  %72 = load i6, ptr %2, align 1
  %73 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %72, i6 1)
  %74 = extractvalue { i6, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %63
  br label %67

76:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @128)
  unreachable

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %67
  %79 = extractvalue { i6, i1 } %73, 0
  %80 = zext i6 %79 to i7
  %81 = icmp eq i7 %71, %80
  %82 = load i64, ptr %5, align 8
  %83 = load i6, ptr %2, align 1
  %84 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %83, i6 1)
  %85 = extractvalue { i6, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %78
  %88 = extractvalue { i6, i1 } %84, 0
  %89 = zext i6 %88 to i64
  %90 = lshr i64 %82, %89
  %91 = sub i64 65535, %90
  %92 = icmp ule i64 %91, 65535
  br i1 %92, label %99, label %100

93:                                               ; preds = %99
  %94 = trunc i64 %90 to i16
  %95 = xor i16 %94, 2048
  store i16 %95, ptr %4, align 2
  %96 = load i16, ptr %4, align 2
  %97 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %96, i16 1)
  %98 = extractvalue { i16, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %87
  br label %93

100:                                              ; preds = %87
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @128)
  unreachable

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %93
  %103 = extractvalue { i16, i1 } %97, 0
  %104 = lshr i16 %103, 1
  %105 = zext i1 %81 to i16
  %106 = xor i16 %105, -1
  %107 = and i16 %104, %106
  store i16 %107, ptr %4, align 2
  br label %31

108:                                              ; preds = %117
  %109 = load i16, ptr %4, align 2
  %110 = load i7, ptr %3, align 1
  %111 = zext i7 %110 to i16
  %112 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %111, i16 15)
  %113 = extractvalue { i16, i1 } %112, 1
  br i1 %113, label %118, label %119

114:                                              ; preds = %31
  %115 = or i16 %13, 31744
  %116 = bitcast i16 %115 to half
  ret half %116

117:                                              ; preds = %31
  br label %108

118:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %108
  %120 = extractvalue { i16, i1 } %112, 0
  %121 = shl i16 %120, 10
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %109, i16 %121)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %119
  %126 = extractvalue { i16, i1 } %122, 0
  store i16 %126, ptr %4, align 2
  %127 = load i16, ptr %4, align 2
  %128 = or i16 %13, %127
  %129 = bitcast i16 %128 to half
  ret half %129
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @math.absCast__anon_5828(i64 %0) unnamed_addr #0 {
  %2 = icmp slt i64 %0, 0
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = add i64 %0, -1
  %5 = xor i64 %4, -1
  ret i64 %5

6:                                                ; preds = %1
  %7 = icmp sge i64 %0, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  ret i64 %0

9:                                                ; preds = %6
  br label %8

10:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @175)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.cttz.i64(i64, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__floatdisf(i64 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3586(i64 %0)
  ret float %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3586(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i64 @math.absCast__anon_5828(i64 %0)
  store i64 %8, ptr %5, align 8
  %9 = icmp slt i64 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret float 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i32 [ -2147483648, %19 ], [ 0, %20 ]
  store i32 %13, ptr %4, align 4
  %14 = load i64, ptr %5, align 8
  %15 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %16 = trunc i64 %15 to i7
  %17 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %16)
  %18 = extractvalue { i7, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i7, i1 } %17, 0
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %23, i7 1)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i7, i1 } %24, 0
  store i7 %28, ptr %3, align 1
  %29 = load i7, ptr %3, align 1
  %30 = icmp ule i7 %29, 23
  br i1 %30, label %37, label %41

31:                                               ; preds = %105, %57
  %32 = load i32, ptr %4, align 4
  %33 = load i7, ptr %3, align 1
  %34 = zext i7 %33 to i32
  %35 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %34, i32 127)
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %111, label %112

37:                                               ; preds = %27
  %38 = load i7, ptr %3, align 1
  %39 = sub i7 31, %38
  %40 = icmp ule i7 %39, 31
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i7, ptr %3, align 1
  %43 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %42, i7 23)
  %44 = extractvalue { i7, i1 } %43, 1
  br i1 %44, label %65, label %66

45:                                               ; preds = %49
  %46 = trunc i7 %38 to i5
  %47 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %46)
  %48 = extractvalue { i5, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @129)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i5, i1 } %47, 0
  %54 = load i64, ptr %5, align 8
  %55 = sub i64 4294967295, %54
  %56 = icmp ule i64 %55, 4294967295
  br i1 %56, label %63, label %64

57:                                               ; preds = %63
  %58 = trunc i64 %54 to i32
  %59 = zext i5 %53 to i32
  %60 = shl i32 %58, %59
  store i32 %60, ptr %4, align 4
  %61 = load i32, ptr %4, align 4
  %62 = xor i32 %61, 8388608
  store i32 %62, ptr %4, align 4
  br label %31

63:                                               ; preds = %52
  br label %57

64:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @129)
  unreachable

65:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %41
  %67 = extractvalue { i7, i1 } %43, 0
  %68 = sub i7 63, %67
  %69 = icmp ule i7 %68, 63
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i7 %67 to i6
  store i6 %71, ptr %2, align 1
  %72 = load i64, ptr %5, align 8
  %73 = call i64 @llvm.cttz.i64(i64 %72, i1 false)
  %74 = trunc i64 %73 to i7
  %75 = load i6, ptr %2, align 1
  %76 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %75, i6 1)
  %77 = extractvalue { i6, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @129)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i6, i1 } %76, 0
  %83 = zext i6 %82 to i7
  %84 = icmp eq i7 %74, %83
  %85 = load i64, ptr %5, align 8
  %86 = load i6, ptr %2, align 1
  %87 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %86, i6 1)
  %88 = extractvalue { i6, i1 } %87, 1
  br i1 %88, label %89, label %90

89:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %81
  %91 = extractvalue { i6, i1 } %87, 0
  %92 = zext i6 %91 to i64
  %93 = lshr i64 %85, %92
  %94 = sub i64 4294967295, %93
  %95 = icmp ule i64 %94, 4294967295
  br i1 %95, label %102, label %103

96:                                               ; preds = %102
  %97 = trunc i64 %93 to i32
  %98 = xor i32 %97, 16777216
  store i32 %98, ptr %4, align 4
  %99 = load i32, ptr %4, align 4
  %100 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %99, i32 1)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %104, label %105

102:                                              ; preds = %90
  br label %96

103:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @129)
  unreachable

104:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %96
  %106 = extractvalue { i32, i1 } %100, 0
  %107 = lshr i32 %106, 1
  %108 = zext i1 %84 to i32
  %109 = xor i32 %108, -1
  %110 = and i32 %107, %109
  store i32 %110, ptr %4, align 4
  br label %31

111:                                              ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %31
  %113 = extractvalue { i32, i1 } %35, 0
  %114 = shl i32 %113, 23
  %115 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %32, i32 %114)
  %116 = extractvalue { i32, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i32, i1 } %115, 0
  store i32 %119, ptr %4, align 4
  %120 = load i32, ptr %4, align 4
  %121 = or i32 %13, %120
  %122 = bitcast i32 %121 to float
  ret float %122
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__floatdidf(i64 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3587(i64 %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3587(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i64 @math.absCast__anon_5828(i64 %0)
  store i64 %8, ptr %5, align 8
  %9 = icmp slt i64 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret double 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i64 [ -9223372036854775808, %19 ], [ 0, %20 ]
  store i64 %13, ptr %4, align 8
  %14 = load i64, ptr %5, align 8
  %15 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %16 = trunc i64 %15 to i7
  %17 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %16)
  %18 = extractvalue { i7, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i7, i1 } %17, 0
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %23, i7 1)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i7, i1 } %24, 0
  store i7 %28, ptr %3, align 1
  %29 = load i7, ptr %3, align 1
  %30 = icmp ule i7 %29, 52
  br i1 %30, label %37, label %41

31:                                               ; preds = %93, %52
  %32 = load i64, ptr %4, align 8
  %33 = load i7, ptr %3, align 1
  %34 = zext i7 %33 to i64
  %35 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %34, i64 1023)
  %36 = extractvalue { i64, i1 } %35, 1
  br i1 %36, label %99, label %100

37:                                               ; preds = %27
  %38 = load i7, ptr %3, align 1
  %39 = sub i7 63, %38
  %40 = icmp ule i7 %39, 63
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i7, ptr %3, align 1
  %43 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %42, i7 52)
  %44 = extractvalue { i7, i1 } %43, 1
  br i1 %44, label %59, label %60

45:                                               ; preds = %49
  %46 = trunc i7 %38 to i6
  %47 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %46)
  %48 = extractvalue { i6, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @130)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i6, i1 } %47, 0
  %54 = load i64, ptr %5, align 8
  %55 = zext i6 %53 to i64
  %56 = shl i64 %54, %55
  store i64 %56, ptr %4, align 8
  %57 = load i64, ptr %4, align 8
  %58 = xor i64 %57, 4503599627370496
  store i64 %58, ptr %4, align 8
  br label %31

59:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %41
  %61 = extractvalue { i7, i1 } %43, 0
  %62 = sub i7 63, %61
  %63 = icmp ule i7 %62, 63
  br i1 %63, label %72, label %73

64:                                               ; preds = %72
  %65 = trunc i7 %61 to i6
  store i6 %65, ptr %2, align 1
  %66 = load i64, ptr %5, align 8
  %67 = call i64 @llvm.cttz.i64(i64 %66, i1 false)
  %68 = trunc i64 %67 to i7
  %69 = load i6, ptr %2, align 1
  %70 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %69, i6 1)
  %71 = extractvalue { i6, i1 } %70, 1
  br i1 %71, label %74, label %75

72:                                               ; preds = %60
  br label %64

73:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @130)
  unreachable

74:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %64
  %76 = extractvalue { i6, i1 } %70, 0
  %77 = zext i6 %76 to i7
  %78 = icmp eq i7 %68, %77
  %79 = load i64, ptr %5, align 8
  %80 = load i6, ptr %2, align 1
  %81 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %80, i6 1)
  %82 = extractvalue { i6, i1 } %81, 1
  br i1 %82, label %83, label %84

83:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %75
  %85 = extractvalue { i6, i1 } %81, 0
  %86 = zext i6 %85 to i64
  %87 = lshr i64 %79, %86
  %88 = xor i64 %87, 9007199254740992
  store i64 %88, ptr %4, align 8
  %89 = load i64, ptr %4, align 8
  %90 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %89, i64 1)
  %91 = extractvalue { i64, i1 } %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %84
  %94 = extractvalue { i64, i1 } %90, 0
  %95 = lshr i64 %94, 1
  %96 = zext i1 %78 to i64
  %97 = xor i64 %96, -1
  %98 = and i64 %95, %97
  store i64 %98, ptr %4, align 8
  br label %31

99:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %31
  %101 = extractvalue { i64, i1 } %35, 0
  %102 = shl i64 %101, 52
  %103 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %32, i64 %102)
  %104 = extractvalue { i64, i1 } %103, 1
  br i1 %104, label %105, label %106

105:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

106:                                              ; preds = %100
  %107 = extractvalue { i64, i1 } %103, 0
  store i64 %107, ptr %4, align 8
  %108 = load i64, ptr %4, align 8
  %109 = or i64 %13, %108
  %110 = bitcast i64 %109 to double
  ret double %110
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__floatditf(i64 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3588(i64 %0)
  ret fp128 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3588(i64 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i128, align 16
  %4 = alloca i64, align 8
  %5 = icmp eq i64 %0, 0
  br i1 %5, label %9, label %10

6:                                                ; preds = %10
  %7 = call fastcc i64 @math.absCast__anon_5828(i64 %0)
  store i64 %7, ptr %4, align 8
  %8 = icmp slt i64 %0, 0
  br i1 %8, label %18, label %19

9:                                                ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

10:                                               ; preds = %1
  br label %6

11:                                               ; preds = %19, %18
  %12 = phi i128 [ -170141183460469231731687303715884105728, %18 ], [ 0, %19 ]
  store i128 %12, ptr %3, align 16
  %13 = load i64, ptr %4, align 8
  %14 = call i64 @llvm.ctlz.i64(i64 %13, i1 false)
  %15 = trunc i64 %14 to i7
  %16 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %15)
  %17 = extractvalue { i7, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %6
  br label %11

19:                                               ; preds = %6
  br label %11

20:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %11
  %22 = extractvalue { i7, i1 } %16, 0
  %23 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %22, i7 1)
  %24 = extractvalue { i7, i1 } %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

26:                                               ; preds = %21
  %27 = extractvalue { i7, i1 } %23, 0
  store i7 %27, ptr %2, align 1
  %28 = load i7, ptr %2, align 1
  %29 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %28)
  %30 = extractvalue { i7, i1 } %29, 1
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

32:                                               ; preds = %26
  %33 = extractvalue { i7, i1 } %29, 0
  %34 = load i64, ptr %4, align 8
  %35 = zext i64 %34 to i128
  %36 = zext i7 %33 to i128
  %37 = shl i128 %35, %36
  store i128 %37, ptr %3, align 16
  %38 = load i128, ptr %3, align 16
  %39 = xor i128 %38, 5192296858534827628530496329220096
  store i128 %39, ptr %3, align 16
  %40 = load i128, ptr %3, align 16
  %41 = load i7, ptr %2, align 1
  %42 = zext i7 %41 to i128
  %43 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %42, i128 16383)
  %44 = extractvalue { i128, i1 } %43, 1
  br i1 %44, label %45, label %46

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %32
  %47 = extractvalue { i128, i1 } %43, 0
  %48 = shl i128 %47, 112
  %49 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %40, i128 %48)
  %50 = extractvalue { i128, i1 } %49, 1
  br i1 %50, label %51, label %52

51:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %46
  %53 = extractvalue { i128, i1 } %49, 0
  store i128 %53, ptr %3, align 16
  %54 = load i128, ptr %3, align 16
  %55 = or i128 %12, %54
  %56 = bitcast i128 %55 to fp128
  ret fp128 %56
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__floatdixf(i64 %0) #0 {
  %2 = call fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3589(i64 %0)
  ret i80 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3589(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i80, align 16
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i64 @math.absCast__anon_5828(i64 %0)
  store i64 %8, ptr %5, align 8
  %9 = icmp slt i64 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret i80 0

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i80 [ -604462909807314587353088, %19 ], [ 0, %20 ]
  store i80 %13, ptr %4, align 16
  %14 = load i64, ptr %5, align 8
  %15 = call i64 @llvm.ctlz.i64(i64 %14, i1 false)
  %16 = trunc i64 %15 to i7
  %17 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %16)
  %18 = extractvalue { i7, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i7, i1 } %17, 0
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %23, i7 1)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i7, i1 } %24, 0
  store i7 %28, ptr %3, align 1
  %29 = load i7, ptr %3, align 1
  %30 = icmp ule i7 %29, 63
  br i1 %30, label %37, label %41

31:                                               ; preds = %96, %51
  %32 = load i80, ptr %4, align 16
  %33 = load i7, ptr %3, align 1
  %34 = zext i7 %33 to i80
  %35 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %34, i80 16383)
  %36 = extractvalue { i80, i1 } %35, 1
  br i1 %36, label %102, label %103

37:                                               ; preds = %27
  %38 = load i7, ptr %3, align 1
  %39 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %38)
  %40 = extractvalue { i7, i1 } %39, 1
  br i1 %40, label %45, label %46

41:                                               ; preds = %27
  %42 = load i7, ptr %3, align 1
  %43 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %42, i7 63)
  %44 = extractvalue { i7, i1 } %43, 1
  br i1 %44, label %58, label %59

45:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %37
  %47 = extractvalue { i7, i1 } %39, 0
  %48 = load i64, ptr %5, align 8
  %49 = zext i64 %48 to i80
  %50 = icmp ult i7 %47, -48
  br i1 %50, label %56, label %57

51:                                               ; preds = %56
  %52 = zext i7 %47 to i80
  %53 = shl i80 %49, %52
  store i80 %53, ptr %4, align 16
  %54 = load i80, ptr %4, align 16
  %55 = xor i80 %54, 0
  store i80 %55, ptr %4, align 16
  br label %31

56:                                               ; preds = %46
  br label %51

57:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @131)
  unreachable

58:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %41
  %60 = extractvalue { i7, i1 } %43, 0
  %61 = sub i7 63, %60
  %62 = icmp ule i7 %61, 63
  br i1 %62, label %71, label %72

63:                                               ; preds = %71
  %64 = trunc i7 %60 to i6
  store i6 %64, ptr %2, align 1
  %65 = load i64, ptr %5, align 8
  %66 = call i64 @llvm.cttz.i64(i64 %65, i1 false)
  %67 = trunc i64 %66 to i7
  %68 = load i6, ptr %2, align 1
  %69 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %68, i6 1)
  %70 = extractvalue { i6, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %59
  br label %63

72:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @131)
  unreachable

73:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %63
  %75 = extractvalue { i6, i1 } %69, 0
  %76 = zext i6 %75 to i7
  %77 = icmp eq i7 %67, %76
  %78 = load i64, ptr %5, align 8
  %79 = load i6, ptr %2, align 1
  %80 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %79, i6 1)
  %81 = extractvalue { i6, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %74
  %84 = extractvalue { i6, i1 } %80, 0
  %85 = zext i6 %84 to i64
  %86 = lshr i64 %78, %85
  %87 = zext i64 %86 to i80
  %88 = xor i80 %87, 0
  store i80 %88, ptr %4, align 16
  %89 = load i80, ptr %4, align 16
  %90 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %89, i80 1)
  %91 = extractvalue { i80, i1 } %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %83
  %94 = extractvalue { i80, i1 } %90, 0
  %95 = lshr i80 %94, 1
  br i1 true, label %100, label %101

96:                                               ; preds = %100
  %97 = zext i1 %77 to i80
  %98 = xor i80 %97, -1
  %99 = and i80 %95, %98
  store i80 %99, ptr %4, align 16
  br label %31

100:                                              ; preds = %93
  br label %96

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @131)
  unreachable

102:                                              ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %31
  %104 = extractvalue { i80, i1 } %35, 0
  br i1 true, label %109, label %110

105:                                              ; preds = %109
  %106 = shl i80 %104, 64
  %107 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %32, i80 %106)
  %108 = extractvalue { i80, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %103
  br label %105

110:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @131)
  unreachable

111:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %105
  %113 = extractvalue { i80, i1 } %107, 0
  store i80 %113, ptr %4, align 16
  %114 = load i80, ptr %4, align 16
  %115 = or i80 %114, 9223372036854775808
  store i80 %115, ptr %4, align 16
  %116 = load i80, ptr %4, align 16
  %117 = or i80 %13, %116
  ret i80 %117
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__floattihf(i128 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3590(i128 %0)
  ret half %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3590(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_5829(i128 %0)
  store i128 %8, ptr %5, align 16
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret half 0xH0000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i16 [ -32768, %19 ], [ 0, %20 ]
  store i16 %13, ptr %4, align 2
  %14 = load i128, ptr %5, align 16
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 10
  br i1 %30, label %34, label %38

31:                                               ; preds = %102, %54
  %32 = load i8, ptr %3, align 1
  %33 = icmp ugt i8 %32, 15
  br i1 %33, label %114, label %117

34:                                               ; preds = %27
  %35 = load i8, ptr %3, align 1
  %36 = sub i8 15, %35
  %37 = icmp ule i8 %36, 15
  br i1 %37, label %46, label %47

38:                                               ; preds = %27
  %39 = load i8, ptr %3, align 1
  %40 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %39, i8 10)
  %41 = extractvalue { i8, i1 } %40, 1
  br i1 %41, label %62, label %63

42:                                               ; preds = %46
  %43 = trunc i8 %35 to i4
  %44 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %43)
  %45 = extractvalue { i4, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @132)
  unreachable

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i4, i1 } %44, 0
  %51 = load i128, ptr %5, align 16
  %52 = sub i128 65535, %51
  %53 = icmp ule i128 %52, 65535
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i128 %51 to i16
  %56 = zext i4 %50 to i16
  %57 = shl i16 %55, %56
  store i16 %57, ptr %4, align 2
  %58 = load i16, ptr %4, align 2
  %59 = xor i16 %58, 1024
  store i16 %59, ptr %4, align 2
  br label %31

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @132)
  unreachable

62:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %38
  %64 = extractvalue { i8, i1 } %40, 0
  %65 = sub i8 127, %64
  %66 = icmp ule i8 %65, 127
  br i1 %66, label %75, label %76

67:                                               ; preds = %75
  %68 = trunc i8 %64 to i7
  store i7 %68, ptr %2, align 1
  %69 = load i128, ptr %5, align 16
  %70 = call i128 @llvm.cttz.i128(i128 %69, i1 false)
  %71 = trunc i128 %70 to i8
  %72 = load i7, ptr %2, align 1
  %73 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %72, i7 1)
  %74 = extractvalue { i7, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %63
  br label %67

76:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @132)
  unreachable

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %67
  %79 = extractvalue { i7, i1 } %73, 0
  %80 = zext i7 %79 to i8
  %81 = icmp eq i8 %71, %80
  %82 = load i128, ptr %5, align 16
  %83 = load i7, ptr %2, align 1
  %84 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %83, i7 1)
  %85 = extractvalue { i7, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %78
  %88 = extractvalue { i7, i1 } %84, 0
  %89 = zext i7 %88 to i128
  %90 = lshr i128 %82, %89
  %91 = sub i128 65535, %90
  %92 = icmp ule i128 %91, 65535
  br i1 %92, label %99, label %100

93:                                               ; preds = %99
  %94 = trunc i128 %90 to i16
  %95 = xor i16 %94, 2048
  store i16 %95, ptr %4, align 2
  %96 = load i16, ptr %4, align 2
  %97 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %96, i16 1)
  %98 = extractvalue { i16, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %87
  br label %93

100:                                              ; preds = %87
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @132)
  unreachable

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %93
  %103 = extractvalue { i16, i1 } %97, 0
  %104 = lshr i16 %103, 1
  %105 = zext i1 %81 to i16
  %106 = xor i16 %105, -1
  %107 = and i16 %104, %106
  store i16 %107, ptr %4, align 2
  br label %31

108:                                              ; preds = %117
  %109 = load i16, ptr %4, align 2
  %110 = load i8, ptr %3, align 1
  %111 = zext i8 %110 to i16
  %112 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %111, i16 15)
  %113 = extractvalue { i16, i1 } %112, 1
  br i1 %113, label %118, label %119

114:                                              ; preds = %31
  %115 = or i16 %13, 31744
  %116 = bitcast i16 %115 to half
  ret half %116

117:                                              ; preds = %31
  br label %108

118:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %108
  %120 = extractvalue { i16, i1 } %112, 0
  %121 = shl i16 %120, 10
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %109, i16 %121)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %119
  %126 = extractvalue { i16, i1 } %122, 0
  store i16 %126, ptr %4, align 2
  %127 = load i16, ptr %4, align 2
  %128 = or i16 %13, %127
  %129 = bitcast i16 %128 to half
  ret half %129
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @math.absCast__anon_5829(i128 %0) unnamed_addr #0 {
  %2 = icmp slt i128 %0, 0
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = add i128 %0, -1
  %5 = xor i128 %4, -1
  ret i128 %5

6:                                                ; preds = %1
  %7 = icmp sge i128 %0, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %9
  ret i128 %0

9:                                                ; preds = %6
  br label %8

10:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @176)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.ctlz.i128(i128, i1 immarg) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.cttz.i128(i128, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__floattisf(i128 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3591(i128 %0)
  ret float %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3591(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_5829(i128 %0)
  store i128 %8, ptr %5, align 16
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret float 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i32 [ -2147483648, %19 ], [ 0, %20 ]
  store i32 %13, ptr %4, align 4
  %14 = load i128, ptr %5, align 16
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 23
  br i1 %30, label %34, label %38

31:                                               ; preds = %102, %54
  %32 = load i8, ptr %3, align 1
  %33 = icmp ugt i8 %32, 127
  br i1 %33, label %114, label %117

34:                                               ; preds = %27
  %35 = load i8, ptr %3, align 1
  %36 = sub i8 31, %35
  %37 = icmp ule i8 %36, 31
  br i1 %37, label %46, label %47

38:                                               ; preds = %27
  %39 = load i8, ptr %3, align 1
  %40 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %39, i8 23)
  %41 = extractvalue { i8, i1 } %40, 1
  br i1 %41, label %62, label %63

42:                                               ; preds = %46
  %43 = trunc i8 %35 to i5
  %44 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %43)
  %45 = extractvalue { i5, i1 } %44, 1
  br i1 %45, label %48, label %49

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @133)
  unreachable

48:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

49:                                               ; preds = %42
  %50 = extractvalue { i5, i1 } %44, 0
  %51 = load i128, ptr %5, align 16
  %52 = sub i128 4294967295, %51
  %53 = icmp ule i128 %52, 4294967295
  br i1 %53, label %60, label %61

54:                                               ; preds = %60
  %55 = trunc i128 %51 to i32
  %56 = zext i5 %50 to i32
  %57 = shl i32 %55, %56
  store i32 %57, ptr %4, align 4
  %58 = load i32, ptr %4, align 4
  %59 = xor i32 %58, 8388608
  store i32 %59, ptr %4, align 4
  br label %31

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %49
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @133)
  unreachable

62:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %38
  %64 = extractvalue { i8, i1 } %40, 0
  %65 = sub i8 127, %64
  %66 = icmp ule i8 %65, 127
  br i1 %66, label %75, label %76

67:                                               ; preds = %75
  %68 = trunc i8 %64 to i7
  store i7 %68, ptr %2, align 1
  %69 = load i128, ptr %5, align 16
  %70 = call i128 @llvm.cttz.i128(i128 %69, i1 false)
  %71 = trunc i128 %70 to i8
  %72 = load i7, ptr %2, align 1
  %73 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %72, i7 1)
  %74 = extractvalue { i7, i1 } %73, 1
  br i1 %74, label %77, label %78

75:                                               ; preds = %63
  br label %67

76:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @133)
  unreachable

77:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %67
  %79 = extractvalue { i7, i1 } %73, 0
  %80 = zext i7 %79 to i8
  %81 = icmp eq i8 %71, %80
  %82 = load i128, ptr %5, align 16
  %83 = load i7, ptr %2, align 1
  %84 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %83, i7 1)
  %85 = extractvalue { i7, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %78
  %88 = extractvalue { i7, i1 } %84, 0
  %89 = zext i7 %88 to i128
  %90 = lshr i128 %82, %89
  %91 = sub i128 4294967295, %90
  %92 = icmp ule i128 %91, 4294967295
  br i1 %92, label %99, label %100

93:                                               ; preds = %99
  %94 = trunc i128 %90 to i32
  %95 = xor i32 %94, 16777216
  store i32 %95, ptr %4, align 4
  %96 = load i32, ptr %4, align 4
  %97 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %96, i32 1)
  %98 = extractvalue { i32, i1 } %97, 1
  br i1 %98, label %101, label %102

99:                                               ; preds = %87
  br label %93

100:                                              ; preds = %87
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @133)
  unreachable

101:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %93
  %103 = extractvalue { i32, i1 } %97, 0
  %104 = lshr i32 %103, 1
  %105 = zext i1 %81 to i32
  %106 = xor i32 %105, -1
  %107 = and i32 %104, %106
  store i32 %107, ptr %4, align 4
  br label %31

108:                                              ; preds = %117
  %109 = load i32, ptr %4, align 4
  %110 = load i8, ptr %3, align 1
  %111 = zext i8 %110 to i32
  %112 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %111, i32 127)
  %113 = extractvalue { i32, i1 } %112, 1
  br i1 %113, label %118, label %119

114:                                              ; preds = %31
  %115 = or i32 %13, 2139095040
  %116 = bitcast i32 %115 to float
  ret float %116

117:                                              ; preds = %31
  br label %108

118:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %108
  %120 = extractvalue { i32, i1 } %112, 0
  %121 = shl i32 %120, 23
  %122 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %109, i32 %121)
  %123 = extractvalue { i32, i1 } %122, 1
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %119
  %126 = extractvalue { i32, i1 } %122, 0
  store i32 %126, ptr %4, align 4
  %127 = load i32, ptr %4, align 4
  %128 = or i32 %13, %127
  %129 = bitcast i32 %128 to float
  ret float %129
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__floattidf(i128 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3592(i128 %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3592(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i64, align 8
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_5829(i128 %0)
  store i128 %8, ptr %5, align 16
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret double 0.000000e+00

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i64 [ -9223372036854775808, %19 ], [ 0, %20 ]
  store i64 %13, ptr %4, align 8
  %14 = load i128, ptr %5, align 16
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 52
  br i1 %30, label %37, label %41

31:                                               ; preds = %105, %57
  %32 = load i64, ptr %4, align 8
  %33 = load i8, ptr %3, align 1
  %34 = zext i8 %33 to i64
  %35 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %34, i64 1023)
  %36 = extractvalue { i64, i1 } %35, 1
  br i1 %36, label %111, label %112

37:                                               ; preds = %27
  %38 = load i8, ptr %3, align 1
  %39 = sub i8 63, %38
  %40 = icmp ule i8 %39, 63
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i8, ptr %3, align 1
  %43 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %42, i8 52)
  %44 = extractvalue { i8, i1 } %43, 1
  br i1 %44, label %65, label %66

45:                                               ; preds = %49
  %46 = trunc i8 %38 to i6
  %47 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %46)
  %48 = extractvalue { i6, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @134)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i6, i1 } %47, 0
  %54 = load i128, ptr %5, align 16
  %55 = sub i128 18446744073709551615, %54
  %56 = icmp ule i128 %55, 18446744073709551615
  br i1 %56, label %63, label %64

57:                                               ; preds = %63
  %58 = trunc i128 %54 to i64
  %59 = zext i6 %53 to i64
  %60 = shl i64 %58, %59
  store i64 %60, ptr %4, align 8
  %61 = load i64, ptr %4, align 8
  %62 = xor i64 %61, 4503599627370496
  store i64 %62, ptr %4, align 8
  br label %31

63:                                               ; preds = %52
  br label %57

64:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @134)
  unreachable

65:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %41
  %67 = extractvalue { i8, i1 } %43, 0
  %68 = sub i8 127, %67
  %69 = icmp ule i8 %68, 127
  br i1 %69, label %78, label %79

70:                                               ; preds = %78
  %71 = trunc i8 %67 to i7
  store i7 %71, ptr %2, align 1
  %72 = load i128, ptr %5, align 16
  %73 = call i128 @llvm.cttz.i128(i128 %72, i1 false)
  %74 = trunc i128 %73 to i8
  %75 = load i7, ptr %2, align 1
  %76 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %75, i7 1)
  %77 = extractvalue { i7, i1 } %76, 1
  br i1 %77, label %80, label %81

78:                                               ; preds = %66
  br label %70

79:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @134)
  unreachable

80:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

81:                                               ; preds = %70
  %82 = extractvalue { i7, i1 } %76, 0
  %83 = zext i7 %82 to i8
  %84 = icmp eq i8 %74, %83
  %85 = load i128, ptr %5, align 16
  %86 = load i7, ptr %2, align 1
  %87 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %86, i7 1)
  %88 = extractvalue { i7, i1 } %87, 1
  br i1 %88, label %89, label %90

89:                                               ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %81
  %91 = extractvalue { i7, i1 } %87, 0
  %92 = zext i7 %91 to i128
  %93 = lshr i128 %85, %92
  %94 = sub i128 18446744073709551615, %93
  %95 = icmp ule i128 %94, 18446744073709551615
  br i1 %95, label %102, label %103

96:                                               ; preds = %102
  %97 = trunc i128 %93 to i64
  %98 = xor i64 %97, 9007199254740992
  store i64 %98, ptr %4, align 8
  %99 = load i64, ptr %4, align 8
  %100 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %99, i64 1)
  %101 = extractvalue { i64, i1 } %100, 1
  br i1 %101, label %104, label %105

102:                                              ; preds = %90
  br label %96

103:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @134)
  unreachable

104:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %96
  %106 = extractvalue { i64, i1 } %100, 0
  %107 = lshr i64 %106, 1
  %108 = zext i1 %84 to i64
  %109 = xor i64 %108, -1
  %110 = and i64 %107, %109
  store i64 %110, ptr %4, align 8
  br label %31

111:                                              ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %31
  %113 = extractvalue { i64, i1 } %35, 0
  %114 = shl i64 %113, 52
  %115 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %32, i64 %114)
  %116 = extractvalue { i64, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i64, i1 } %115, 0
  store i64 %119, ptr %4, align 8
  %120 = load i64, ptr %4, align 8
  %121 = or i64 %13, %120
  %122 = bitcast i64 %121 to double
  ret double %122
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__floattitf(i128 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3593(i128 %0)
  ret fp128 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3593(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i128, align 16
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_5829(i128 %0)
  store i128 %8, ptr %5, align 16
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i128 [ -170141183460469231731687303715884105728, %19 ], [ 0, %20 ]
  store i128 %13, ptr %4, align 16
  %14 = load i128, ptr %5, align 16
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 112
  br i1 %30, label %37, label %41

31:                                               ; preds = %93, %52
  %32 = load i128, ptr %4, align 16
  %33 = load i8, ptr %3, align 1
  %34 = zext i8 %33 to i128
  %35 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %34, i128 16383)
  %36 = extractvalue { i128, i1 } %35, 1
  br i1 %36, label %99, label %100

37:                                               ; preds = %27
  %38 = load i8, ptr %3, align 1
  %39 = sub i8 127, %38
  %40 = icmp ule i8 %39, 127
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i8, ptr %3, align 1
  %43 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %42, i8 112)
  %44 = extractvalue { i8, i1 } %43, 1
  br i1 %44, label %59, label %60

45:                                               ; preds = %49
  %46 = trunc i8 %38 to i7
  %47 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %46)
  %48 = extractvalue { i7, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @135)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i7, i1 } %47, 0
  %54 = load i128, ptr %5, align 16
  %55 = zext i7 %53 to i128
  %56 = shl i128 %54, %55
  store i128 %56, ptr %4, align 16
  %57 = load i128, ptr %4, align 16
  %58 = xor i128 %57, 5192296858534827628530496329220096
  store i128 %58, ptr %4, align 16
  br label %31

59:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

60:                                               ; preds = %41
  %61 = extractvalue { i8, i1 } %43, 0
  %62 = sub i8 127, %61
  %63 = icmp ule i8 %62, 127
  br i1 %63, label %72, label %73

64:                                               ; preds = %72
  %65 = trunc i8 %61 to i7
  store i7 %65, ptr %2, align 1
  %66 = load i128, ptr %5, align 16
  %67 = call i128 @llvm.cttz.i128(i128 %66, i1 false)
  %68 = trunc i128 %67 to i8
  %69 = load i7, ptr %2, align 1
  %70 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %69, i7 1)
  %71 = extractvalue { i7, i1 } %70, 1
  br i1 %71, label %74, label %75

72:                                               ; preds = %60
  br label %64

73:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @135)
  unreachable

74:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %64
  %76 = extractvalue { i7, i1 } %70, 0
  %77 = zext i7 %76 to i8
  %78 = icmp eq i8 %68, %77
  %79 = load i128, ptr %5, align 16
  %80 = load i7, ptr %2, align 1
  %81 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %80, i7 1)
  %82 = extractvalue { i7, i1 } %81, 1
  br i1 %82, label %83, label %84

83:                                               ; preds = %75
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

84:                                               ; preds = %75
  %85 = extractvalue { i7, i1 } %81, 0
  %86 = zext i7 %85 to i128
  %87 = lshr i128 %79, %86
  %88 = xor i128 %87, 10384593717069655257060992658440192
  store i128 %88, ptr %4, align 16
  %89 = load i128, ptr %4, align 16
  %90 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %89, i128 1)
  %91 = extractvalue { i128, i1 } %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %84
  %94 = extractvalue { i128, i1 } %90, 0
  %95 = lshr i128 %94, 1
  %96 = zext i1 %78 to i128
  %97 = xor i128 %96, -1
  %98 = and i128 %95, %97
  store i128 %98, ptr %4, align 16
  br label %31

99:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %31
  %101 = extractvalue { i128, i1 } %35, 0
  %102 = shl i128 %101, 112
  %103 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %32, i128 %102)
  %104 = extractvalue { i128, i1 } %103, 1
  br i1 %104, label %105, label %106

105:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

106:                                              ; preds = %100
  %107 = extractvalue { i128, i1 } %103, 0
  store i128 %107, ptr %4, align 16
  %108 = load i128, ptr %4, align 16
  %109 = or i128 %13, %108
  %110 = bitcast i128 %109 to fp128
  ret fp128 %110
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__floattixf(i128 %0) #0 {
  %2 = call fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3594(i128 %0)
  ret i80 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3594(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i80, align 16
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %10, label %11

7:                                                ; preds = %11
  %8 = call fastcc i128 @math.absCast__anon_5829(i128 %0)
  store i128 %8, ptr %5, align 16
  %9 = icmp slt i128 %0, 0
  br i1 %9, label %19, label %20

10:                                               ; preds = %1
  ret i80 0

11:                                               ; preds = %1
  br label %7

12:                                               ; preds = %20, %19
  %13 = phi i80 [ -604462909807314587353088, %19 ], [ 0, %20 ]
  store i80 %13, ptr %4, align 16
  %14 = load i128, ptr %5, align 16
  %15 = call i128 @llvm.ctlz.i128(i128 %14, i1 false)
  %16 = trunc i128 %15 to i8
  %17 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %16)
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %22

19:                                               ; preds = %7
  br label %12

20:                                               ; preds = %7
  br label %12

21:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %12
  %23 = extractvalue { i8, i1 } %17, 0
  %24 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %23, i8 1)
  %25 = extractvalue { i8, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %22
  %28 = extractvalue { i8, i1 } %24, 0
  store i8 %28, ptr %3, align 1
  %29 = load i8, ptr %3, align 1
  %30 = icmp ule i8 %29, 63
  br i1 %30, label %37, label %41

31:                                               ; preds = %112, %62
  %32 = load i80, ptr %4, align 16
  %33 = load i8, ptr %3, align 1
  %34 = zext i8 %33 to i80
  %35 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %34, i80 16383)
  %36 = extractvalue { i80, i1 } %35, 1
  br i1 %36, label %118, label %119

37:                                               ; preds = %27
  %38 = load i8, ptr %3, align 1
  %39 = sub i8 127, %38
  %40 = icmp ule i8 %39, 127
  br i1 %40, label %49, label %50

41:                                               ; preds = %27
  %42 = load i8, ptr %3, align 1
  %43 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %42, i8 63)
  %44 = extractvalue { i8, i1 } %43, 1
  br i1 %44, label %69, label %70

45:                                               ; preds = %49
  %46 = trunc i8 %38 to i7
  %47 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %46)
  %48 = extractvalue { i7, i1 } %47, 1
  br i1 %48, label %51, label %52

49:                                               ; preds = %37
  br label %45

50:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i7, i1 } %47, 0
  %54 = load i128, ptr %5, align 16
  %55 = sub i128 1208925819614629174706175, %54
  %56 = icmp ule i128 %55, 1208925819614629174706175
  br i1 %56, label %60, label %61

57:                                               ; preds = %60
  %58 = trunc i128 %54 to i80
  %59 = icmp ult i7 %53, -48
  br i1 %59, label %67, label %68

60:                                               ; preds = %52
  br label %57

61:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

62:                                               ; preds = %67
  %63 = zext i7 %53 to i80
  %64 = shl i80 %58, %63
  store i80 %64, ptr %4, align 16
  %65 = load i80, ptr %4, align 16
  %66 = xor i80 %65, 0
  store i80 %66, ptr %4, align 16
  br label %31

67:                                               ; preds = %57
  br label %62

68:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

69:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %41
  %71 = extractvalue { i8, i1 } %43, 0
  %72 = sub i8 127, %71
  %73 = icmp ule i8 %72, 127
  br i1 %73, label %82, label %83

74:                                               ; preds = %82
  %75 = trunc i8 %71 to i7
  store i7 %75, ptr %2, align 1
  %76 = load i128, ptr %5, align 16
  %77 = call i128 @llvm.cttz.i128(i128 %76, i1 false)
  %78 = trunc i128 %77 to i8
  %79 = load i7, ptr %2, align 1
  %80 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %79, i7 1)
  %81 = extractvalue { i7, i1 } %80, 1
  br i1 %81, label %84, label %85

82:                                               ; preds = %70
  br label %74

83:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

84:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %74
  %86 = extractvalue { i7, i1 } %80, 0
  %87 = zext i7 %86 to i8
  %88 = icmp eq i8 %78, %87
  %89 = load i128, ptr %5, align 16
  %90 = load i7, ptr %2, align 1
  %91 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %90, i7 1)
  %92 = extractvalue { i7, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %85
  %95 = extractvalue { i7, i1 } %91, 0
  %96 = zext i7 %95 to i128
  %97 = lshr i128 %89, %96
  %98 = sub i128 1208925819614629174706175, %97
  %99 = icmp ule i128 %98, 1208925819614629174706175
  br i1 %99, label %106, label %107

100:                                              ; preds = %106
  %101 = trunc i128 %97 to i80
  %102 = xor i80 %101, 0
  store i80 %102, ptr %4, align 16
  %103 = load i80, ptr %4, align 16
  %104 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %103, i80 1)
  %105 = extractvalue { i80, i1 } %104, 1
  br i1 %105, label %108, label %109

106:                                              ; preds = %94
  br label %100

107:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

108:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

109:                                              ; preds = %100
  %110 = extractvalue { i80, i1 } %104, 0
  %111 = lshr i80 %110, 1
  br i1 true, label %116, label %117

112:                                              ; preds = %116
  %113 = zext i1 %88 to i80
  %114 = xor i80 %113, -1
  %115 = and i80 %111, %114
  store i80 %115, ptr %4, align 16
  br label %31

116:                                              ; preds = %109
  br label %112

117:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

118:                                              ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

119:                                              ; preds = %31
  %120 = extractvalue { i80, i1 } %35, 0
  br i1 true, label %125, label %126

121:                                              ; preds = %125
  %122 = shl i80 %120, 64
  %123 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %32, i80 %122)
  %124 = extractvalue { i80, i1 } %123, 1
  br i1 %124, label %127, label %128

125:                                              ; preds = %119
  br label %121

126:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @136)
  unreachable

127:                                              ; preds = %121
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

128:                                              ; preds = %121
  %129 = extractvalue { i80, i1 } %123, 0
  store i80 %129, ptr %4, align 16
  %130 = load i80, ptr %4, align 16
  %131 = or i80 %130, 9223372036854775808
  store i80 %131, ptr %4, align 16
  %132 = load i80, ptr %4, align 16
  %133 = or i80 %13, %132
  ret i80 %133
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__floatundihf(i64 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3595(i64 %0)
  ret half %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3595(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i16, align 2
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i64 @math.absCast__anon_5830(i64 %0)
  store i64 %8, ptr %5, align 8
  store i16 0, ptr %4, align 2
  %9 = load i64, ptr %5, align 8
  %10 = call i64 @llvm.ctlz.i64(i64 %9, i1 false)
  %11 = trunc i64 %10 to i7
  %12 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %11)
  %13 = extractvalue { i7, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret half 0xH0000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i7, i1 } %12, 0
  %19 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %18, i7 1)
  %20 = extractvalue { i7, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i7, i1 } %19, 0
  store i7 %23, ptr %3, align 1
  %24 = load i7, ptr %3, align 1
  %25 = icmp ule i7 %24, 10
  br i1 %25, label %29, label %33

26:                                               ; preds = %97, %49
  %27 = load i7, ptr %3, align 1
  %28 = icmp ugt i7 %27, 15
  br i1 %28, label %109, label %110

29:                                               ; preds = %22
  %30 = load i7, ptr %3, align 1
  %31 = sub i7 15, %30
  %32 = icmp ule i7 %31, 15
  br i1 %32, label %41, label %42

33:                                               ; preds = %22
  %34 = load i7, ptr %3, align 1
  %35 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %34, i7 10)
  %36 = extractvalue { i7, i1 } %35, 1
  br i1 %36, label %57, label %58

37:                                               ; preds = %41
  %38 = trunc i7 %30 to i4
  %39 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %38)
  %40 = extractvalue { i4, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %29
  br label %37

42:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @137)
  unreachable

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i4, i1 } %39, 0
  %46 = load i64, ptr %5, align 8
  %47 = sub i64 65535, %46
  %48 = icmp ule i64 %47, 65535
  br i1 %48, label %55, label %56

49:                                               ; preds = %55
  %50 = trunc i64 %46 to i16
  %51 = zext i4 %45 to i16
  %52 = shl i16 %50, %51
  store i16 %52, ptr %4, align 2
  %53 = load i16, ptr %4, align 2
  %54 = xor i16 %53, 1024
  store i16 %54, ptr %4, align 2
  br label %26

55:                                               ; preds = %44
  br label %49

56:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @137)
  unreachable

57:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %33
  %59 = extractvalue { i7, i1 } %35, 0
  %60 = sub i7 63, %59
  %61 = icmp ule i7 %60, 63
  br i1 %61, label %70, label %71

62:                                               ; preds = %70
  %63 = trunc i7 %59 to i6
  store i6 %63, ptr %2, align 1
  %64 = load i64, ptr %5, align 8
  %65 = call i64 @llvm.cttz.i64(i64 %64, i1 false)
  %66 = trunc i64 %65 to i7
  %67 = load i6, ptr %2, align 1
  %68 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %67, i6 1)
  %69 = extractvalue { i6, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %58
  br label %62

71:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @137)
  unreachable

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %62
  %74 = extractvalue { i6, i1 } %68, 0
  %75 = zext i6 %74 to i7
  %76 = icmp eq i7 %66, %75
  %77 = load i64, ptr %5, align 8
  %78 = load i6, ptr %2, align 1
  %79 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %78, i6 1)
  %80 = extractvalue { i6, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %73
  %83 = extractvalue { i6, i1 } %79, 0
  %84 = zext i6 %83 to i64
  %85 = lshr i64 %77, %84
  %86 = sub i64 65535, %85
  %87 = icmp ule i64 %86, 65535
  br i1 %87, label %94, label %95

88:                                               ; preds = %94
  %89 = trunc i64 %85 to i16
  %90 = xor i16 %89, 2048
  store i16 %90, ptr %4, align 2
  %91 = load i16, ptr %4, align 2
  %92 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %91, i16 1)
  %93 = extractvalue { i16, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %82
  br label %88

95:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @137)
  unreachable

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i16, i1 } %92, 0
  %99 = lshr i16 %98, 1
  %100 = zext i1 %76 to i16
  %101 = xor i16 %100, -1
  %102 = and i16 %99, %101
  store i16 %102, ptr %4, align 2
  br label %26

103:                                              ; preds = %110
  %104 = load i16, ptr %4, align 2
  %105 = load i7, ptr %3, align 1
  %106 = zext i7 %105 to i16
  %107 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %106, i16 15)
  %108 = extractvalue { i16, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %26
  ret half 0xH7C00

110:                                              ; preds = %26
  br label %103

111:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %103
  %113 = extractvalue { i16, i1 } %107, 0
  %114 = shl i16 %113, 10
  %115 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %104, i16 %114)
  %116 = extractvalue { i16, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i16, i1 } %115, 0
  store i16 %119, ptr %4, align 2
  %120 = load i16, ptr %4, align 2
  %121 = or i16 0, %120
  %122 = bitcast i16 %121 to half
  ret half %122
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__floatundisf(i64 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3596(i64 %0)
  ret float %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3596(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i64 @math.absCast__anon_5830(i64 %0)
  store i64 %8, ptr %5, align 8
  store i32 0, ptr %4, align 4
  %9 = load i64, ptr %5, align 8
  %10 = call i64 @llvm.ctlz.i64(i64 %9, i1 false)
  %11 = trunc i64 %10 to i7
  %12 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %11)
  %13 = extractvalue { i7, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret float 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i7, i1 } %12, 0
  %19 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %18, i7 1)
  %20 = extractvalue { i7, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i7, i1 } %19, 0
  store i7 %23, ptr %3, align 1
  %24 = load i7, ptr %3, align 1
  %25 = icmp ule i7 %24, 23
  br i1 %25, label %32, label %36

26:                                               ; preds = %100, %52
  %27 = load i32, ptr %4, align 4
  %28 = load i7, ptr %3, align 1
  %29 = zext i7 %28 to i32
  %30 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %29, i32 127)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %106, label %107

32:                                               ; preds = %22
  %33 = load i7, ptr %3, align 1
  %34 = sub i7 31, %33
  %35 = icmp ule i7 %34, 31
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i7, ptr %3, align 1
  %38 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %37, i7 23)
  %39 = extractvalue { i7, i1 } %38, 1
  br i1 %39, label %60, label %61

40:                                               ; preds = %44
  %41 = trunc i7 %33 to i5
  %42 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %41)
  %43 = extractvalue { i5, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @138)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i5, i1 } %42, 0
  %49 = load i64, ptr %5, align 8
  %50 = sub i64 4294967295, %49
  %51 = icmp ule i64 %50, 4294967295
  br i1 %51, label %58, label %59

52:                                               ; preds = %58
  %53 = trunc i64 %49 to i32
  %54 = zext i5 %48 to i32
  %55 = shl i32 %53, %54
  store i32 %55, ptr %4, align 4
  %56 = load i32, ptr %4, align 4
  %57 = xor i32 %56, 8388608
  store i32 %57, ptr %4, align 4
  br label %26

58:                                               ; preds = %47
  br label %52

59:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @138)
  unreachable

60:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %36
  %62 = extractvalue { i7, i1 } %38, 0
  %63 = sub i7 63, %62
  %64 = icmp ule i7 %63, 63
  br i1 %64, label %73, label %74

65:                                               ; preds = %73
  %66 = trunc i7 %62 to i6
  store i6 %66, ptr %2, align 1
  %67 = load i64, ptr %5, align 8
  %68 = call i64 @llvm.cttz.i64(i64 %67, i1 false)
  %69 = trunc i64 %68 to i7
  %70 = load i6, ptr %2, align 1
  %71 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %70, i6 1)
  %72 = extractvalue { i6, i1 } %71, 1
  br i1 %72, label %75, label %76

73:                                               ; preds = %61
  br label %65

74:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @138)
  unreachable

75:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %65
  %77 = extractvalue { i6, i1 } %71, 0
  %78 = zext i6 %77 to i7
  %79 = icmp eq i7 %69, %78
  %80 = load i64, ptr %5, align 8
  %81 = load i6, ptr %2, align 1
  %82 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %81, i6 1)
  %83 = extractvalue { i6, i1 } %82, 1
  br i1 %83, label %84, label %85

84:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %76
  %86 = extractvalue { i6, i1 } %82, 0
  %87 = zext i6 %86 to i64
  %88 = lshr i64 %80, %87
  %89 = sub i64 4294967295, %88
  %90 = icmp ule i64 %89, 4294967295
  br i1 %90, label %97, label %98

91:                                               ; preds = %97
  %92 = trunc i64 %88 to i32
  %93 = xor i32 %92, 16777216
  store i32 %93, ptr %4, align 4
  %94 = load i32, ptr %4, align 4
  %95 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %94, i32 1)
  %96 = extractvalue { i32, i1 } %95, 1
  br i1 %96, label %99, label %100

97:                                               ; preds = %85
  br label %91

98:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @138)
  unreachable

99:                                               ; preds = %91
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %91
  %101 = extractvalue { i32, i1 } %95, 0
  %102 = lshr i32 %101, 1
  %103 = zext i1 %79 to i32
  %104 = xor i32 %103, -1
  %105 = and i32 %102, %104
  store i32 %105, ptr %4, align 4
  br label %26

106:                                              ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %26
  %108 = extractvalue { i32, i1 } %30, 0
  %109 = shl i32 %108, 23
  %110 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %27, i32 %109)
  %111 = extractvalue { i32, i1 } %110, 1
  br i1 %111, label %112, label %113

112:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %107
  %114 = extractvalue { i32, i1 } %110, 0
  store i32 %114, ptr %4, align 4
  %115 = load i32, ptr %4, align 4
  %116 = or i32 0, %115
  %117 = bitcast i32 %116 to float
  ret float %117
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__floatundidf(i64 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3597(i64 %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3597(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i64 @math.absCast__anon_5830(i64 %0)
  store i64 %8, ptr %5, align 8
  store i64 0, ptr %4, align 8
  %9 = load i64, ptr %5, align 8
  %10 = call i64 @llvm.ctlz.i64(i64 %9, i1 false)
  %11 = trunc i64 %10 to i7
  %12 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %11)
  %13 = extractvalue { i7, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret double 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i7, i1 } %12, 0
  %19 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %18, i7 1)
  %20 = extractvalue { i7, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i7, i1 } %19, 0
  store i7 %23, ptr %3, align 1
  %24 = load i7, ptr %3, align 1
  %25 = icmp ule i7 %24, 52
  br i1 %25, label %32, label %36

26:                                               ; preds = %88, %47
  %27 = load i64, ptr %4, align 8
  %28 = load i7, ptr %3, align 1
  %29 = zext i7 %28 to i64
  %30 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %29, i64 1023)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %94, label %95

32:                                               ; preds = %22
  %33 = load i7, ptr %3, align 1
  %34 = sub i7 63, %33
  %35 = icmp ule i7 %34, 63
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i7, ptr %3, align 1
  %38 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %37, i7 52)
  %39 = extractvalue { i7, i1 } %38, 1
  br i1 %39, label %54, label %55

40:                                               ; preds = %44
  %41 = trunc i7 %33 to i6
  %42 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %41)
  %43 = extractvalue { i6, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @139)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i6, i1 } %42, 0
  %49 = load i64, ptr %5, align 8
  %50 = zext i6 %48 to i64
  %51 = shl i64 %49, %50
  store i64 %51, ptr %4, align 8
  %52 = load i64, ptr %4, align 8
  %53 = xor i64 %52, 4503599627370496
  store i64 %53, ptr %4, align 8
  br label %26

54:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %36
  %56 = extractvalue { i7, i1 } %38, 0
  %57 = sub i7 63, %56
  %58 = icmp ule i7 %57, 63
  br i1 %58, label %67, label %68

59:                                               ; preds = %67
  %60 = trunc i7 %56 to i6
  store i6 %60, ptr %2, align 1
  %61 = load i64, ptr %5, align 8
  %62 = call i64 @llvm.cttz.i64(i64 %61, i1 false)
  %63 = trunc i64 %62 to i7
  %64 = load i6, ptr %2, align 1
  %65 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %64, i6 1)
  %66 = extractvalue { i6, i1 } %65, 1
  br i1 %66, label %69, label %70

67:                                               ; preds = %55
  br label %59

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @139)
  unreachable

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %59
  %71 = extractvalue { i6, i1 } %65, 0
  %72 = zext i6 %71 to i7
  %73 = icmp eq i7 %63, %72
  %74 = load i64, ptr %5, align 8
  %75 = load i6, ptr %2, align 1
  %76 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %75, i6 1)
  %77 = extractvalue { i6, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %70
  %80 = extractvalue { i6, i1 } %76, 0
  %81 = zext i6 %80 to i64
  %82 = lshr i64 %74, %81
  %83 = xor i64 %82, 9007199254740992
  store i64 %83, ptr %4, align 8
  %84 = load i64, ptr %4, align 8
  %85 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %84, i64 1)
  %86 = extractvalue { i64, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %79
  %89 = extractvalue { i64, i1 } %85, 0
  %90 = lshr i64 %89, 1
  %91 = zext i1 %73 to i64
  %92 = xor i64 %91, -1
  %93 = and i64 %90, %92
  store i64 %93, ptr %4, align 8
  br label %26

94:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

95:                                               ; preds = %26
  %96 = extractvalue { i64, i1 } %30, 0
  %97 = shl i64 %96, 52
  %98 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %27, i64 %97)
  %99 = extractvalue { i64, i1 } %98, 1
  br i1 %99, label %100, label %101

100:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %95
  %102 = extractvalue { i64, i1 } %98, 0
  store i64 %102, ptr %4, align 8
  %103 = load i64, ptr %4, align 8
  %104 = or i64 0, %103
  %105 = bitcast i64 %104 to double
  ret double %105
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__floatunditf(i64 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3598(i64 %0)
  ret fp128 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3598(i64 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i128, align 16
  %4 = alloca i64, align 8
  %5 = icmp eq i64 %0, 0
  br i1 %5, label %13, label %14

6:                                                ; preds = %14
  %7 = call fastcc i64 @math.absCast__anon_5830(i64 %0)
  store i64 %7, ptr %4, align 8
  store i128 0, ptr %3, align 16
  %8 = load i64, ptr %4, align 8
  %9 = call i64 @llvm.ctlz.i64(i64 %8, i1 false)
  %10 = trunc i64 %9 to i7
  %11 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %10)
  %12 = extractvalue { i7, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

14:                                               ; preds = %1
  br label %6

15:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %6
  %17 = extractvalue { i7, i1 } %11, 0
  %18 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %17, i7 1)
  %19 = extractvalue { i7, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i7, i1 } %18, 0
  store i7 %22, ptr %2, align 1
  %23 = load i7, ptr %2, align 1
  %24 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %23)
  %25 = extractvalue { i7, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %21
  %28 = extractvalue { i7, i1 } %24, 0
  %29 = load i64, ptr %4, align 8
  %30 = zext i64 %29 to i128
  %31 = zext i7 %28 to i128
  %32 = shl i128 %30, %31
  store i128 %32, ptr %3, align 16
  %33 = load i128, ptr %3, align 16
  %34 = xor i128 %33, 5192296858534827628530496329220096
  store i128 %34, ptr %3, align 16
  %35 = load i128, ptr %3, align 16
  %36 = load i7, ptr %2, align 1
  %37 = zext i7 %36 to i128
  %38 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %37, i128 16383)
  %39 = extractvalue { i128, i1 } %38, 1
  br i1 %39, label %40, label %41

40:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %27
  %42 = extractvalue { i128, i1 } %38, 0
  %43 = shl i128 %42, 112
  %44 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %35, i128 %43)
  %45 = extractvalue { i128, i1 } %44, 1
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %41
  %48 = extractvalue { i128, i1 } %44, 0
  store i128 %48, ptr %3, align 16
  %49 = load i128, ptr %3, align 16
  %50 = or i128 0, %49
  %51 = bitcast i128 %50 to fp128
  ret fp128 %51
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__floatundixf(i64 %0) #0 {
  %2 = call fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3599(i64 %0)
  ret i80 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3599(i64 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i7, align 1
  %4 = alloca i80, align 16
  %5 = alloca i64, align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i64 @math.absCast__anon_5830(i64 %0)
  store i64 %8, ptr %5, align 8
  store i80 0, ptr %4, align 16
  %9 = load i64, ptr %5, align 8
  %10 = call i64 @llvm.ctlz.i64(i64 %9, i1 false)
  %11 = trunc i64 %10 to i7
  %12 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -64, i7 %11)
  %13 = extractvalue { i7, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret i80 0

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i7, i1 } %12, 0
  %19 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %18, i7 1)
  %20 = extractvalue { i7, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i7, i1 } %19, 0
  store i7 %23, ptr %3, align 1
  %24 = load i7, ptr %3, align 1
  %25 = icmp ule i7 %24, 63
  br i1 %25, label %32, label %36

26:                                               ; preds = %91, %46
  %27 = load i80, ptr %4, align 16
  %28 = load i7, ptr %3, align 1
  %29 = zext i7 %28 to i80
  %30 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %29, i80 16383)
  %31 = extractvalue { i80, i1 } %30, 1
  br i1 %31, label %97, label %98

32:                                               ; preds = %22
  %33 = load i7, ptr %3, align 1
  %34 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %33)
  %35 = extractvalue { i7, i1 } %34, 1
  br i1 %35, label %40, label %41

36:                                               ; preds = %22
  %37 = load i7, ptr %3, align 1
  %38 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %37, i7 63)
  %39 = extractvalue { i7, i1 } %38, 1
  br i1 %39, label %53, label %54

40:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %32
  %42 = extractvalue { i7, i1 } %34, 0
  %43 = load i64, ptr %5, align 8
  %44 = zext i64 %43 to i80
  %45 = icmp ult i7 %42, -48
  br i1 %45, label %51, label %52

46:                                               ; preds = %51
  %47 = zext i7 %42 to i80
  %48 = shl i80 %44, %47
  store i80 %48, ptr %4, align 16
  %49 = load i80, ptr %4, align 16
  %50 = xor i80 %49, 0
  store i80 %50, ptr %4, align 16
  br label %26

51:                                               ; preds = %41
  br label %46

52:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @140)
  unreachable

53:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %36
  %55 = extractvalue { i7, i1 } %38, 0
  %56 = sub i7 63, %55
  %57 = icmp ule i7 %56, 63
  br i1 %57, label %66, label %67

58:                                               ; preds = %66
  %59 = trunc i7 %55 to i6
  store i6 %59, ptr %2, align 1
  %60 = load i64, ptr %5, align 8
  %61 = call i64 @llvm.cttz.i64(i64 %60, i1 false)
  %62 = trunc i64 %61 to i7
  %63 = load i6, ptr %2, align 1
  %64 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %63, i6 1)
  %65 = extractvalue { i6, i1 } %64, 1
  br i1 %65, label %68, label %69

66:                                               ; preds = %54
  br label %58

67:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @140)
  unreachable

68:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %58
  %70 = extractvalue { i6, i1 } %64, 0
  %71 = zext i6 %70 to i7
  %72 = icmp eq i7 %62, %71
  %73 = load i64, ptr %5, align 8
  %74 = load i6, ptr %2, align 1
  %75 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %74, i6 1)
  %76 = extractvalue { i6, i1 } %75, 1
  br i1 %76, label %77, label %78

77:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

78:                                               ; preds = %69
  %79 = extractvalue { i6, i1 } %75, 0
  %80 = zext i6 %79 to i64
  %81 = lshr i64 %73, %80
  %82 = zext i64 %81 to i80
  %83 = xor i80 %82, 0
  store i80 %83, ptr %4, align 16
  %84 = load i80, ptr %4, align 16
  %85 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %84, i80 1)
  %86 = extractvalue { i80, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %78
  %89 = extractvalue { i80, i1 } %85, 0
  %90 = lshr i80 %89, 1
  br i1 true, label %95, label %96

91:                                               ; preds = %95
  %92 = zext i1 %72 to i80
  %93 = xor i80 %92, -1
  %94 = and i80 %90, %93
  store i80 %94, ptr %4, align 16
  br label %26

95:                                               ; preds = %88
  br label %91

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @140)
  unreachable

97:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %26
  %99 = extractvalue { i80, i1 } %30, 0
  br i1 true, label %104, label %105

100:                                              ; preds = %104
  %101 = shl i80 %99, 64
  %102 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %27, i80 %101)
  %103 = extractvalue { i80, i1 } %102, 1
  br i1 %103, label %106, label %107

104:                                              ; preds = %98
  br label %100

105:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @140)
  unreachable

106:                                              ; preds = %100
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %100
  %108 = extractvalue { i80, i1 } %102, 0
  store i80 %108, ptr %4, align 16
  %109 = load i80, ptr %4, align 16
  %110 = or i80 %109, 9223372036854775808
  store i80 %110, ptr %4, align 16
  %111 = load i80, ptr %4, align 16
  %112 = or i80 0, %111
  ret i80 %112
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__floatunsihf(i32 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3600(i32 %0)
  ret half %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3600(i32 %0) unnamed_addr #0 {
  %2 = alloca i5, align 1
  %3 = alloca i6, align 1
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i32 @math.absCast__anon_5831(i32 %0)
  store i32 %8, ptr %5, align 4
  store i16 0, ptr %4, align 2
  %9 = load i32, ptr %5, align 4
  %10 = call i32 @llvm.ctlz.i32(i32 %9, i1 false)
  %11 = trunc i32 %10 to i6
  %12 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %11)
  %13 = extractvalue { i6, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret half 0xH0000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i6, i1 } %12, 0
  %19 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %18, i6 1)
  %20 = extractvalue { i6, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i6, i1 } %19, 0
  store i6 %23, ptr %3, align 1
  %24 = load i6, ptr %3, align 1
  %25 = icmp ule i6 %24, 10
  br i1 %25, label %29, label %33

26:                                               ; preds = %97, %49
  %27 = load i6, ptr %3, align 1
  %28 = icmp ugt i6 %27, 15
  br i1 %28, label %109, label %110

29:                                               ; preds = %22
  %30 = load i6, ptr %3, align 1
  %31 = sub i6 15, %30
  %32 = icmp ule i6 %31, 15
  br i1 %32, label %41, label %42

33:                                               ; preds = %22
  %34 = load i6, ptr %3, align 1
  %35 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %34, i6 10)
  %36 = extractvalue { i6, i1 } %35, 1
  br i1 %36, label %57, label %58

37:                                               ; preds = %41
  %38 = trunc i6 %30 to i4
  %39 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %38)
  %40 = extractvalue { i4, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %29
  br label %37

42:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @141)
  unreachable

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i4, i1 } %39, 0
  %46 = load i32, ptr %5, align 4
  %47 = sub i32 65535, %46
  %48 = icmp ule i32 %47, 65535
  br i1 %48, label %55, label %56

49:                                               ; preds = %55
  %50 = trunc i32 %46 to i16
  %51 = zext i4 %45 to i16
  %52 = shl i16 %50, %51
  store i16 %52, ptr %4, align 2
  %53 = load i16, ptr %4, align 2
  %54 = xor i16 %53, 1024
  store i16 %54, ptr %4, align 2
  br label %26

55:                                               ; preds = %44
  br label %49

56:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @141)
  unreachable

57:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %33
  %59 = extractvalue { i6, i1 } %35, 0
  %60 = sub i6 31, %59
  %61 = icmp ule i6 %60, 31
  br i1 %61, label %70, label %71

62:                                               ; preds = %70
  %63 = trunc i6 %59 to i5
  store i5 %63, ptr %2, align 1
  %64 = load i32, ptr %5, align 4
  %65 = call i32 @llvm.cttz.i32(i32 %64, i1 false)
  %66 = trunc i32 %65 to i6
  %67 = load i5, ptr %2, align 1
  %68 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %67, i5 1)
  %69 = extractvalue { i5, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %58
  br label %62

71:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @141)
  unreachable

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %62
  %74 = extractvalue { i5, i1 } %68, 0
  %75 = zext i5 %74 to i6
  %76 = icmp eq i6 %66, %75
  %77 = load i32, ptr %5, align 4
  %78 = load i5, ptr %2, align 1
  %79 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %78, i5 1)
  %80 = extractvalue { i5, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %73
  %83 = extractvalue { i5, i1 } %79, 0
  %84 = zext i5 %83 to i32
  %85 = lshr i32 %77, %84
  %86 = sub i32 65535, %85
  %87 = icmp ule i32 %86, 65535
  br i1 %87, label %94, label %95

88:                                               ; preds = %94
  %89 = trunc i32 %85 to i16
  %90 = xor i16 %89, 2048
  store i16 %90, ptr %4, align 2
  %91 = load i16, ptr %4, align 2
  %92 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %91, i16 1)
  %93 = extractvalue { i16, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %82
  br label %88

95:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @141)
  unreachable

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i16, i1 } %92, 0
  %99 = lshr i16 %98, 1
  %100 = zext i1 %76 to i16
  %101 = xor i16 %100, -1
  %102 = and i16 %99, %101
  store i16 %102, ptr %4, align 2
  br label %26

103:                                              ; preds = %110
  %104 = load i16, ptr %4, align 2
  %105 = load i6, ptr %3, align 1
  %106 = zext i6 %105 to i16
  %107 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %106, i16 15)
  %108 = extractvalue { i16, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %26
  ret half 0xH7C00

110:                                              ; preds = %26
  br label %103

111:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %103
  %113 = extractvalue { i16, i1 } %107, 0
  %114 = shl i16 %113, 10
  %115 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %104, i16 %114)
  %116 = extractvalue { i16, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i16, i1 } %115, 0
  store i16 %119, ptr %4, align 2
  %120 = load i16, ptr %4, align 2
  %121 = or i16 0, %120
  %122 = bitcast i16 %121 to half
  ret half %122
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.absCast__anon_5831(i32 %0) unnamed_addr #0 {
  ret i32 %0
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__floatunsisf(i32 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3601(i32 %0)
  ret float %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3601(i32 %0) unnamed_addr #0 {
  %2 = alloca i5, align 1
  %3 = alloca i6, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i32 @math.absCast__anon_5831(i32 %0)
  store i32 %8, ptr %5, align 4
  store i32 0, ptr %4, align 4
  %9 = load i32, ptr %5, align 4
  %10 = call i32 @llvm.ctlz.i32(i32 %9, i1 false)
  %11 = trunc i32 %10 to i6
  %12 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %11)
  %13 = extractvalue { i6, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret float 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i6, i1 } %12, 0
  %19 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %18, i6 1)
  %20 = extractvalue { i6, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i6, i1 } %19, 0
  store i6 %23, ptr %3, align 1
  %24 = load i6, ptr %3, align 1
  %25 = icmp ule i6 %24, 23
  br i1 %25, label %32, label %36

26:                                               ; preds = %88, %47
  %27 = load i32, ptr %4, align 4
  %28 = load i6, ptr %3, align 1
  %29 = zext i6 %28 to i32
  %30 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %29, i32 127)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %94, label %95

32:                                               ; preds = %22
  %33 = load i6, ptr %3, align 1
  %34 = sub i6 31, %33
  %35 = icmp ule i6 %34, 31
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i6, ptr %3, align 1
  %38 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %37, i6 23)
  %39 = extractvalue { i6, i1 } %38, 1
  br i1 %39, label %54, label %55

40:                                               ; preds = %44
  %41 = trunc i6 %33 to i5
  %42 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %41)
  %43 = extractvalue { i5, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @142)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i5, i1 } %42, 0
  %49 = load i32, ptr %5, align 4
  %50 = zext i5 %48 to i32
  %51 = shl i32 %49, %50
  store i32 %51, ptr %4, align 4
  %52 = load i32, ptr %4, align 4
  %53 = xor i32 %52, 8388608
  store i32 %53, ptr %4, align 4
  br label %26

54:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %36
  %56 = extractvalue { i6, i1 } %38, 0
  %57 = sub i6 31, %56
  %58 = icmp ule i6 %57, 31
  br i1 %58, label %67, label %68

59:                                               ; preds = %67
  %60 = trunc i6 %56 to i5
  store i5 %60, ptr %2, align 1
  %61 = load i32, ptr %5, align 4
  %62 = call i32 @llvm.cttz.i32(i32 %61, i1 false)
  %63 = trunc i32 %62 to i6
  %64 = load i5, ptr %2, align 1
  %65 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %64, i5 1)
  %66 = extractvalue { i5, i1 } %65, 1
  br i1 %66, label %69, label %70

67:                                               ; preds = %55
  br label %59

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @142)
  unreachable

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %59
  %71 = extractvalue { i5, i1 } %65, 0
  %72 = zext i5 %71 to i6
  %73 = icmp eq i6 %63, %72
  %74 = load i32, ptr %5, align 4
  %75 = load i5, ptr %2, align 1
  %76 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %75, i5 1)
  %77 = extractvalue { i5, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %70
  %80 = extractvalue { i5, i1 } %76, 0
  %81 = zext i5 %80 to i32
  %82 = lshr i32 %74, %81
  %83 = xor i32 %82, 16777216
  store i32 %83, ptr %4, align 4
  %84 = load i32, ptr %4, align 4
  %85 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %84, i32 1)
  %86 = extractvalue { i32, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %79
  %89 = extractvalue { i32, i1 } %85, 0
  %90 = lshr i32 %89, 1
  %91 = zext i1 %73 to i32
  %92 = xor i32 %91, -1
  %93 = and i32 %90, %92
  store i32 %93, ptr %4, align 4
  br label %26

94:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

95:                                               ; preds = %26
  %96 = extractvalue { i32, i1 } %30, 0
  %97 = shl i32 %96, 23
  %98 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %27, i32 %97)
  %99 = extractvalue { i32, i1 } %98, 1
  br i1 %99, label %100, label %101

100:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %95
  %102 = extractvalue { i32, i1 } %98, 0
  store i32 %102, ptr %4, align 4
  %103 = load i32, ptr %4, align 4
  %104 = or i32 0, %103
  %105 = bitcast i32 %104 to float
  ret float %105
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__floatunsidf(i32 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3602(i32 %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3602(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %13, label %14

6:                                                ; preds = %14
  %7 = call fastcc i32 @math.absCast__anon_5831(i32 %0)
  store i32 %7, ptr %4, align 4
  store i64 0, ptr %3, align 8
  %8 = load i32, ptr %4, align 4
  %9 = call i32 @llvm.ctlz.i32(i32 %8, i1 false)
  %10 = trunc i32 %9 to i6
  %11 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %10)
  %12 = extractvalue { i6, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  ret double 0.000000e+00

14:                                               ; preds = %1
  br label %6

15:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %6
  %17 = extractvalue { i6, i1 } %11, 0
  %18 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %17, i6 1)
  %19 = extractvalue { i6, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i6, i1 } %18, 0
  store i6 %22, ptr %2, align 1
  %23 = load i6, ptr %2, align 1
  %24 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %23)
  %25 = extractvalue { i6, i1 } %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

27:                                               ; preds = %21
  %28 = extractvalue { i6, i1 } %24, 0
  %29 = load i32, ptr %4, align 4
  %30 = zext i32 %29 to i64
  %31 = zext i6 %28 to i64
  %32 = shl i64 %30, %31
  store i64 %32, ptr %3, align 8
  %33 = load i64, ptr %3, align 8
  %34 = xor i64 %33, 4503599627370496
  store i64 %34, ptr %3, align 8
  %35 = load i64, ptr %3, align 8
  %36 = load i6, ptr %2, align 1
  %37 = zext i6 %36 to i64
  %38 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %37, i64 1023)
  %39 = extractvalue { i64, i1 } %38, 1
  br i1 %39, label %40, label %41

40:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %27
  %42 = extractvalue { i64, i1 } %38, 0
  %43 = shl i64 %42, 52
  %44 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %35, i64 %43)
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %41
  %48 = extractvalue { i64, i1 } %44, 0
  store i64 %48, ptr %3, align 8
  %49 = load i64, ptr %3, align 8
  %50 = or i64 0, %49
  %51 = bitcast i64 %50 to double
  ret double %51
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__floatunsitf(i32 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3603(i32 %0)
  ret fp128 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3603(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i128, align 16
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %13, label %14

6:                                                ; preds = %14
  %7 = call fastcc i32 @math.absCast__anon_5831(i32 %0)
  store i32 %7, ptr %4, align 4
  store i128 0, ptr %3, align 16
  %8 = load i32, ptr %4, align 4
  %9 = call i32 @llvm.ctlz.i32(i32 %8, i1 false)
  %10 = trunc i32 %9 to i6
  %11 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %10)
  %12 = extractvalue { i6, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

14:                                               ; preds = %1
  br label %6

15:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %6
  %17 = extractvalue { i6, i1 } %11, 0
  %18 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %17, i6 1)
  %19 = extractvalue { i6, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i6, i1 } %18, 0
  store i6 %22, ptr %2, align 1
  %23 = load i6, ptr %2, align 1
  %24 = zext i6 %23 to i7
  %25 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %24)
  %26 = extractvalue { i7, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %21
  %29 = extractvalue { i7, i1 } %25, 0
  %30 = load i32, ptr %4, align 4
  %31 = zext i32 %30 to i128
  %32 = zext i7 %29 to i128
  %33 = shl i128 %31, %32
  store i128 %33, ptr %3, align 16
  %34 = load i128, ptr %3, align 16
  %35 = xor i128 %34, 5192296858534827628530496329220096
  store i128 %35, ptr %3, align 16
  %36 = load i128, ptr %3, align 16
  %37 = load i6, ptr %2, align 1
  %38 = zext i6 %37 to i128
  %39 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %38, i128 16383)
  %40 = extractvalue { i128, i1 } %39, 1
  br i1 %40, label %41, label %42

41:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

42:                                               ; preds = %28
  %43 = extractvalue { i128, i1 } %39, 0
  %44 = shl i128 %43, 112
  %45 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %36, i128 %44)
  %46 = extractvalue { i128, i1 } %45, 1
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %42
  %49 = extractvalue { i128, i1 } %45, 0
  store i128 %49, ptr %3, align 16
  %50 = load i128, ptr %3, align 16
  %51 = or i128 0, %50
  %52 = bitcast i128 %51 to fp128
  ret fp128 %52
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__floatunsixf(i32 %0) #0 {
  %2 = call fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3604(i32 %0)
  ret i80 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3604(i32 %0) unnamed_addr #0 {
  %2 = alloca i6, align 1
  %3 = alloca i80, align 16
  %4 = alloca i32, align 4
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %13, label %14

6:                                                ; preds = %14
  %7 = call fastcc i32 @math.absCast__anon_5831(i32 %0)
  store i32 %7, ptr %4, align 4
  store i80 0, ptr %3, align 16
  %8 = load i32, ptr %4, align 4
  %9 = call i32 @llvm.ctlz.i32(i32 %8, i1 false)
  %10 = trunc i32 %9 to i6
  %11 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %10)
  %12 = extractvalue { i6, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  ret i80 0

14:                                               ; preds = %1
  br label %6

15:                                               ; preds = %6
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %6
  %17 = extractvalue { i6, i1 } %11, 0
  %18 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %17, i6 1)
  %19 = extractvalue { i6, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i6, i1 } %18, 0
  store i6 %22, ptr %2, align 1
  %23 = load i6, ptr %2, align 1
  %24 = zext i6 %23 to i7
  %25 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %24)
  %26 = extractvalue { i7, i1 } %25, 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %21
  %29 = extractvalue { i7, i1 } %25, 0
  %30 = load i32, ptr %4, align 4
  %31 = zext i32 %30 to i80
  %32 = icmp ult i7 %29, -48
  br i1 %32, label %43, label %44

33:                                               ; preds = %43
  %34 = zext i7 %29 to i80
  %35 = shl i80 %31, %34
  store i80 %35, ptr %3, align 16
  %36 = load i80, ptr %3, align 16
  %37 = xor i80 %36, 0
  store i80 %37, ptr %3, align 16
  %38 = load i80, ptr %3, align 16
  %39 = load i6, ptr %2, align 1
  %40 = zext i6 %39 to i80
  %41 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %40, i80 16383)
  %42 = extractvalue { i80, i1 } %41, 1
  br i1 %42, label %45, label %46

43:                                               ; preds = %28
  br label %33

44:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @143)
  unreachable

45:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %33
  %47 = extractvalue { i80, i1 } %41, 0
  br i1 true, label %52, label %53

48:                                               ; preds = %52
  %49 = shl i80 %47, 64
  %50 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %38, i80 %49)
  %51 = extractvalue { i80, i1 } %50, 1
  br i1 %51, label %54, label %55

52:                                               ; preds = %46
  br label %48

53:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @143)
  unreachable

54:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %48
  %56 = extractvalue { i80, i1 } %50, 0
  store i80 %56, ptr %3, align 16
  %57 = load i80, ptr %3, align 16
  %58 = or i80 %57, 9223372036854775808
  store i80 %58, ptr %3, align 16
  %59 = load i80, ptr %3, align 16
  %60 = or i80 0, %59
  ret i80 %60
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__floatuntihf(i128 %0) #0 {
  %2 = call fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3605(i128 %0)
  ret half %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc half @compiler_rt.float_from_int.floatFromInt__anon_3605(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_5832(i128 %0)
  store i128 %8, ptr %5, align 16
  store i16 0, ptr %4, align 2
  %9 = load i128, ptr %5, align 16
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret half 0xH0000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 10
  br i1 %25, label %29, label %33

26:                                               ; preds = %97, %49
  %27 = load i8, ptr %3, align 1
  %28 = icmp ugt i8 %27, 15
  br i1 %28, label %109, label %110

29:                                               ; preds = %22
  %30 = load i8, ptr %3, align 1
  %31 = sub i8 15, %30
  %32 = icmp ule i8 %31, 15
  br i1 %32, label %41, label %42

33:                                               ; preds = %22
  %34 = load i8, ptr %3, align 1
  %35 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %34, i8 10)
  %36 = extractvalue { i8, i1 } %35, 1
  br i1 %36, label %57, label %58

37:                                               ; preds = %41
  %38 = trunc i8 %30 to i4
  %39 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 -6, i4 %38)
  %40 = extractvalue { i4, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %29
  br label %37

42:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @144)
  unreachable

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i4, i1 } %39, 0
  %46 = load i128, ptr %5, align 16
  %47 = sub i128 65535, %46
  %48 = icmp ule i128 %47, 65535
  br i1 %48, label %55, label %56

49:                                               ; preds = %55
  %50 = trunc i128 %46 to i16
  %51 = zext i4 %45 to i16
  %52 = shl i16 %50, %51
  store i16 %52, ptr %4, align 2
  %53 = load i16, ptr %4, align 2
  %54 = xor i16 %53, 1024
  store i16 %54, ptr %4, align 2
  br label %26

55:                                               ; preds = %44
  br label %49

56:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @144)
  unreachable

57:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %33
  %59 = extractvalue { i8, i1 } %35, 0
  %60 = sub i8 127, %59
  %61 = icmp ule i8 %60, 127
  br i1 %61, label %70, label %71

62:                                               ; preds = %70
  %63 = trunc i8 %59 to i7
  store i7 %63, ptr %2, align 1
  %64 = load i128, ptr %5, align 16
  %65 = call i128 @llvm.cttz.i128(i128 %64, i1 false)
  %66 = trunc i128 %65 to i8
  %67 = load i7, ptr %2, align 1
  %68 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %67, i7 1)
  %69 = extractvalue { i7, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %58
  br label %62

71:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @144)
  unreachable

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %62
  %74 = extractvalue { i7, i1 } %68, 0
  %75 = zext i7 %74 to i8
  %76 = icmp eq i8 %66, %75
  %77 = load i128, ptr %5, align 16
  %78 = load i7, ptr %2, align 1
  %79 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %78, i7 1)
  %80 = extractvalue { i7, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %73
  %83 = extractvalue { i7, i1 } %79, 0
  %84 = zext i7 %83 to i128
  %85 = lshr i128 %77, %84
  %86 = sub i128 65535, %85
  %87 = icmp ule i128 %86, 65535
  br i1 %87, label %94, label %95

88:                                               ; preds = %94
  %89 = trunc i128 %85 to i16
  %90 = xor i16 %89, 2048
  store i16 %90, ptr %4, align 2
  %91 = load i16, ptr %4, align 2
  %92 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %91, i16 1)
  %93 = extractvalue { i16, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %82
  br label %88

95:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @144)
  unreachable

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i16, i1 } %92, 0
  %99 = lshr i16 %98, 1
  %100 = zext i1 %76 to i16
  %101 = xor i16 %100, -1
  %102 = and i16 %99, %101
  store i16 %102, ptr %4, align 2
  br label %26

103:                                              ; preds = %110
  %104 = load i16, ptr %4, align 2
  %105 = load i8, ptr %3, align 1
  %106 = zext i8 %105 to i16
  %107 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %106, i16 15)
  %108 = extractvalue { i16, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %26
  ret half 0xH7C00

110:                                              ; preds = %26
  br label %103

111:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %103
  %113 = extractvalue { i16, i1 } %107, 0
  %114 = shl i16 %113, 10
  %115 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %104, i16 %114)
  %116 = extractvalue { i16, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i16, i1 } %115, 0
  store i16 %119, ptr %4, align 2
  %120 = load i16, ptr %4, align 2
  %121 = or i16 0, %120
  %122 = bitcast i16 %121 to half
  ret half %122
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @math.absCast__anon_5832(i128 %0) unnamed_addr #0 {
  ret i128 %0
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__floatuntisf(i128 %0) #0 {
  %2 = call fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3606(i128 %0)
  ret float %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.float_from_int.floatFromInt__anon_3606(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_5832(i128 %0)
  store i128 %8, ptr %5, align 16
  store i32 0, ptr %4, align 4
  %9 = load i128, ptr %5, align 16
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret float 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 23
  br i1 %25, label %29, label %33

26:                                               ; preds = %97, %49
  %27 = load i8, ptr %3, align 1
  %28 = icmp ugt i8 %27, 127
  br i1 %28, label %109, label %110

29:                                               ; preds = %22
  %30 = load i8, ptr %3, align 1
  %31 = sub i8 31, %30
  %32 = icmp ule i8 %31, 31
  br i1 %32, label %41, label %42

33:                                               ; preds = %22
  %34 = load i8, ptr %3, align 1
  %35 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %34, i8 23)
  %36 = extractvalue { i8, i1 } %35, 1
  br i1 %36, label %57, label %58

37:                                               ; preds = %41
  %38 = trunc i8 %30 to i5
  %39 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 -9, i5 %38)
  %40 = extractvalue { i5, i1 } %39, 1
  br i1 %40, label %43, label %44

41:                                               ; preds = %29
  br label %37

42:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @145)
  unreachable

43:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %37
  %45 = extractvalue { i5, i1 } %39, 0
  %46 = load i128, ptr %5, align 16
  %47 = sub i128 4294967295, %46
  %48 = icmp ule i128 %47, 4294967295
  br i1 %48, label %55, label %56

49:                                               ; preds = %55
  %50 = trunc i128 %46 to i32
  %51 = zext i5 %45 to i32
  %52 = shl i32 %50, %51
  store i32 %52, ptr %4, align 4
  %53 = load i32, ptr %4, align 4
  %54 = xor i32 %53, 8388608
  store i32 %54, ptr %4, align 4
  br label %26

55:                                               ; preds = %44
  br label %49

56:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @145)
  unreachable

57:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %33
  %59 = extractvalue { i8, i1 } %35, 0
  %60 = sub i8 127, %59
  %61 = icmp ule i8 %60, 127
  br i1 %61, label %70, label %71

62:                                               ; preds = %70
  %63 = trunc i8 %59 to i7
  store i7 %63, ptr %2, align 1
  %64 = load i128, ptr %5, align 16
  %65 = call i128 @llvm.cttz.i128(i128 %64, i1 false)
  %66 = trunc i128 %65 to i8
  %67 = load i7, ptr %2, align 1
  %68 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %67, i7 1)
  %69 = extractvalue { i7, i1 } %68, 1
  br i1 %69, label %72, label %73

70:                                               ; preds = %58
  br label %62

71:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @145)
  unreachable

72:                                               ; preds = %62
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %62
  %74 = extractvalue { i7, i1 } %68, 0
  %75 = zext i7 %74 to i8
  %76 = icmp eq i8 %66, %75
  %77 = load i128, ptr %5, align 16
  %78 = load i7, ptr %2, align 1
  %79 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %78, i7 1)
  %80 = extractvalue { i7, i1 } %79, 1
  br i1 %80, label %81, label %82

81:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

82:                                               ; preds = %73
  %83 = extractvalue { i7, i1 } %79, 0
  %84 = zext i7 %83 to i128
  %85 = lshr i128 %77, %84
  %86 = sub i128 4294967295, %85
  %87 = icmp ule i128 %86, 4294967295
  br i1 %87, label %94, label %95

88:                                               ; preds = %94
  %89 = trunc i128 %85 to i32
  %90 = xor i32 %89, 16777216
  store i32 %90, ptr %4, align 4
  %91 = load i32, ptr %4, align 4
  %92 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %91, i32 1)
  %93 = extractvalue { i32, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %82
  br label %88

95:                                               ; preds = %82
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @145)
  unreachable

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i32, i1 } %92, 0
  %99 = lshr i32 %98, 1
  %100 = zext i1 %76 to i32
  %101 = xor i32 %100, -1
  %102 = and i32 %99, %101
  store i32 %102, ptr %4, align 4
  br label %26

103:                                              ; preds = %110
  %104 = load i32, ptr %4, align 4
  %105 = load i8, ptr %3, align 1
  %106 = zext i8 %105 to i32
  %107 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %106, i32 127)
  %108 = extractvalue { i32, i1 } %107, 1
  br i1 %108, label %111, label %112

109:                                              ; preds = %26
  ret float 0x7FF0000000000000

110:                                              ; preds = %26
  br label %103

111:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %103
  %113 = extractvalue { i32, i1 } %107, 0
  %114 = shl i32 %113, 23
  %115 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %104, i32 %114)
  %116 = extractvalue { i32, i1 } %115, 1
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

118:                                              ; preds = %112
  %119 = extractvalue { i32, i1 } %115, 0
  store i32 %119, ptr %4, align 4
  %120 = load i32, ptr %4, align 4
  %121 = or i32 0, %120
  %122 = bitcast i32 %121 to float
  ret float %122
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__floatuntidf(i128 %0) #0 {
  %2 = call fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3607(i128 %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.float_from_int.floatFromInt__anon_3607(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i64, align 8
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_5832(i128 %0)
  store i128 %8, ptr %5, align 16
  store i64 0, ptr %4, align 8
  %9 = load i128, ptr %5, align 16
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret double 0.000000e+00

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 52
  br i1 %25, label %32, label %36

26:                                               ; preds = %100, %52
  %27 = load i64, ptr %4, align 8
  %28 = load i8, ptr %3, align 1
  %29 = zext i8 %28 to i64
  %30 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %29, i64 1023)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %106, label %107

32:                                               ; preds = %22
  %33 = load i8, ptr %3, align 1
  %34 = sub i8 63, %33
  %35 = icmp ule i8 %34, 63
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i8, ptr %3, align 1
  %38 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %37, i8 52)
  %39 = extractvalue { i8, i1 } %38, 1
  br i1 %39, label %60, label %61

40:                                               ; preds = %44
  %41 = trunc i8 %33 to i6
  %42 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -12, i6 %41)
  %43 = extractvalue { i6, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @146)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i6, i1 } %42, 0
  %49 = load i128, ptr %5, align 16
  %50 = sub i128 18446744073709551615, %49
  %51 = icmp ule i128 %50, 18446744073709551615
  br i1 %51, label %58, label %59

52:                                               ; preds = %58
  %53 = trunc i128 %49 to i64
  %54 = zext i6 %48 to i64
  %55 = shl i64 %53, %54
  store i64 %55, ptr %4, align 8
  %56 = load i64, ptr %4, align 8
  %57 = xor i64 %56, 4503599627370496
  store i64 %57, ptr %4, align 8
  br label %26

58:                                               ; preds = %47
  br label %52

59:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @146)
  unreachable

60:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %36
  %62 = extractvalue { i8, i1 } %38, 0
  %63 = sub i8 127, %62
  %64 = icmp ule i8 %63, 127
  br i1 %64, label %73, label %74

65:                                               ; preds = %73
  %66 = trunc i8 %62 to i7
  store i7 %66, ptr %2, align 1
  %67 = load i128, ptr %5, align 16
  %68 = call i128 @llvm.cttz.i128(i128 %67, i1 false)
  %69 = trunc i128 %68 to i8
  %70 = load i7, ptr %2, align 1
  %71 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %70, i7 1)
  %72 = extractvalue { i7, i1 } %71, 1
  br i1 %72, label %75, label %76

73:                                               ; preds = %61
  br label %65

74:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @146)
  unreachable

75:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %65
  %77 = extractvalue { i7, i1 } %71, 0
  %78 = zext i7 %77 to i8
  %79 = icmp eq i8 %69, %78
  %80 = load i128, ptr %5, align 16
  %81 = load i7, ptr %2, align 1
  %82 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %81, i7 1)
  %83 = extractvalue { i7, i1 } %82, 1
  br i1 %83, label %84, label %85

84:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %76
  %86 = extractvalue { i7, i1 } %82, 0
  %87 = zext i7 %86 to i128
  %88 = lshr i128 %80, %87
  %89 = sub i128 18446744073709551615, %88
  %90 = icmp ule i128 %89, 18446744073709551615
  br i1 %90, label %97, label %98

91:                                               ; preds = %97
  %92 = trunc i128 %88 to i64
  %93 = xor i64 %92, 9007199254740992
  store i64 %93, ptr %4, align 8
  %94 = load i64, ptr %4, align 8
  %95 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %94, i64 1)
  %96 = extractvalue { i64, i1 } %95, 1
  br i1 %96, label %99, label %100

97:                                               ; preds = %85
  br label %91

98:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @146)
  unreachable

99:                                               ; preds = %91
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %91
  %101 = extractvalue { i64, i1 } %95, 0
  %102 = lshr i64 %101, 1
  %103 = zext i1 %79 to i64
  %104 = xor i64 %103, -1
  %105 = and i64 %102, %104
  store i64 %105, ptr %4, align 8
  br label %26

106:                                              ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %26
  %108 = extractvalue { i64, i1 } %30, 0
  %109 = shl i64 %108, 52
  %110 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %27, i64 %109)
  %111 = extractvalue { i64, i1 } %110, 1
  br i1 %111, label %112, label %113

112:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %107
  %114 = extractvalue { i64, i1 } %110, 0
  store i64 %114, ptr %4, align 8
  %115 = load i64, ptr %4, align 8
  %116 = or i64 0, %115
  %117 = bitcast i64 %116 to double
  ret double %117
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__floatuntitf(i128 %0) #0 {
  %2 = call fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3608(i128 %0)
  ret fp128 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @compiler_rt.float_from_int.floatFromInt__anon_3608(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i128, align 16
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_5832(i128 %0)
  store i128 %8, ptr %5, align 16
  store i128 0, ptr %4, align 16
  %9 = load i128, ptr %5, align 16
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret fp128 0xL00000000000000000000000000000000

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 112
  br i1 %25, label %32, label %36

26:                                               ; preds = %88, %47
  %27 = load i128, ptr %4, align 16
  %28 = load i8, ptr %3, align 1
  %29 = zext i8 %28 to i128
  %30 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %29, i128 16383)
  %31 = extractvalue { i128, i1 } %30, 1
  br i1 %31, label %94, label %95

32:                                               ; preds = %22
  %33 = load i8, ptr %3, align 1
  %34 = sub i8 127, %33
  %35 = icmp ule i8 %34, 127
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i8, ptr %3, align 1
  %38 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %37, i8 112)
  %39 = extractvalue { i8, i1 } %38, 1
  br i1 %39, label %54, label %55

40:                                               ; preds = %44
  %41 = trunc i8 %33 to i7
  %42 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 -16, i7 %41)
  %43 = extractvalue { i7, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @147)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i7, i1 } %42, 0
  %49 = load i128, ptr %5, align 16
  %50 = zext i7 %48 to i128
  %51 = shl i128 %49, %50
  store i128 %51, ptr %4, align 16
  %52 = load i128, ptr %4, align 16
  %53 = xor i128 %52, 5192296858534827628530496329220096
  store i128 %53, ptr %4, align 16
  br label %26

54:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %36
  %56 = extractvalue { i8, i1 } %38, 0
  %57 = sub i8 127, %56
  %58 = icmp ule i8 %57, 127
  br i1 %58, label %67, label %68

59:                                               ; preds = %67
  %60 = trunc i8 %56 to i7
  store i7 %60, ptr %2, align 1
  %61 = load i128, ptr %5, align 16
  %62 = call i128 @llvm.cttz.i128(i128 %61, i1 false)
  %63 = trunc i128 %62 to i8
  %64 = load i7, ptr %2, align 1
  %65 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %64, i7 1)
  %66 = extractvalue { i7, i1 } %65, 1
  br i1 %66, label %69, label %70

67:                                               ; preds = %55
  br label %59

68:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @147)
  unreachable

69:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %59
  %71 = extractvalue { i7, i1 } %65, 0
  %72 = zext i7 %71 to i8
  %73 = icmp eq i8 %63, %72
  %74 = load i128, ptr %5, align 16
  %75 = load i7, ptr %2, align 1
  %76 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %75, i7 1)
  %77 = extractvalue { i7, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %70
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %70
  %80 = extractvalue { i7, i1 } %76, 0
  %81 = zext i7 %80 to i128
  %82 = lshr i128 %74, %81
  %83 = xor i128 %82, 10384593717069655257060992658440192
  store i128 %83, ptr %4, align 16
  %84 = load i128, ptr %4, align 16
  %85 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %84, i128 1)
  %86 = extractvalue { i128, i1 } %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

88:                                               ; preds = %79
  %89 = extractvalue { i128, i1 } %85, 0
  %90 = lshr i128 %89, 1
  %91 = zext i1 %73 to i128
  %92 = xor i128 %91, -1
  %93 = and i128 %90, %92
  store i128 %93, ptr %4, align 16
  br label %26

94:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

95:                                               ; preds = %26
  %96 = extractvalue { i128, i1 } %30, 0
  %97 = shl i128 %96, 112
  %98 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %27, i128 %97)
  %99 = extractvalue { i128, i1 } %98, 1
  br i1 %99, label %100, label %101

100:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %95
  %102 = extractvalue { i128, i1 } %98, 0
  store i128 %102, ptr %4, align 16
  %103 = load i128, ptr %4, align 16
  %104 = or i128 0, %103
  %105 = bitcast i128 %104 to fp128
  ret fp128 %105
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__floatuntixf(i128 %0) #0 {
  %2 = call fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3609(i128 %0)
  ret i80 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @compiler_rt.float_from_int.floatFromInt__anon_3609(i128 %0) unnamed_addr #0 {
  %2 = alloca i7, align 1
  %3 = alloca i8, align 1
  %4 = alloca i80, align 16
  %5 = alloca i128, align 16
  %6 = icmp eq i128 %0, 0
  br i1 %6, label %14, label %15

7:                                                ; preds = %15
  %8 = call fastcc i128 @math.absCast__anon_5832(i128 %0)
  store i128 %8, ptr %5, align 16
  store i80 0, ptr %4, align 16
  %9 = load i128, ptr %5, align 16
  %10 = call i128 @llvm.ctlz.i128(i128 %9, i1 false)
  %11 = trunc i128 %10 to i8
  %12 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 -128, i8 %11)
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  ret i80 0

15:                                               ; preds = %1
  br label %7

16:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i8, i1 } %12, 0
  %19 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %18, i8 1)
  %20 = extractvalue { i8, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i8, i1 } %19, 0
  store i8 %23, ptr %3, align 1
  %24 = load i8, ptr %3, align 1
  %25 = icmp ule i8 %24, 63
  br i1 %25, label %32, label %36

26:                                               ; preds = %107, %57
  %27 = load i80, ptr %4, align 16
  %28 = load i8, ptr %3, align 1
  %29 = zext i8 %28 to i80
  %30 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %29, i80 16383)
  %31 = extractvalue { i80, i1 } %30, 1
  br i1 %31, label %113, label %114

32:                                               ; preds = %22
  %33 = load i8, ptr %3, align 1
  %34 = sub i8 127, %33
  %35 = icmp ule i8 %34, 127
  br i1 %35, label %44, label %45

36:                                               ; preds = %22
  %37 = load i8, ptr %3, align 1
  %38 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %37, i8 63)
  %39 = extractvalue { i8, i1 } %38, 1
  br i1 %39, label %64, label %65

40:                                               ; preds = %44
  %41 = trunc i8 %33 to i7
  %42 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 63, i7 %41)
  %43 = extractvalue { i7, i1 } %42, 1
  br i1 %43, label %46, label %47

44:                                               ; preds = %32
  br label %40

45:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

46:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

47:                                               ; preds = %40
  %48 = extractvalue { i7, i1 } %42, 0
  %49 = load i128, ptr %5, align 16
  %50 = sub i128 1208925819614629174706175, %49
  %51 = icmp ule i128 %50, 1208925819614629174706175
  br i1 %51, label %55, label %56

52:                                               ; preds = %55
  %53 = trunc i128 %49 to i80
  %54 = icmp ult i7 %48, -48
  br i1 %54, label %62, label %63

55:                                               ; preds = %47
  br label %52

56:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

57:                                               ; preds = %62
  %58 = zext i7 %48 to i80
  %59 = shl i80 %53, %58
  store i80 %59, ptr %4, align 16
  %60 = load i80, ptr %4, align 16
  %61 = xor i80 %60, 0
  store i80 %61, ptr %4, align 16
  br label %26

62:                                               ; preds = %52
  br label %57

63:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

64:                                               ; preds = %36
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

65:                                               ; preds = %36
  %66 = extractvalue { i8, i1 } %38, 0
  %67 = sub i8 127, %66
  %68 = icmp ule i8 %67, 127
  br i1 %68, label %77, label %78

69:                                               ; preds = %77
  %70 = trunc i8 %66 to i7
  store i7 %70, ptr %2, align 1
  %71 = load i128, ptr %5, align 16
  %72 = call i128 @llvm.cttz.i128(i128 %71, i1 false)
  %73 = trunc i128 %72 to i8
  %74 = load i7, ptr %2, align 1
  %75 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %74, i7 1)
  %76 = extractvalue { i7, i1 } %75, 1
  br i1 %76, label %79, label %80

77:                                               ; preds = %65
  br label %69

78:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

79:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %69
  %81 = extractvalue { i7, i1 } %75, 0
  %82 = zext i7 %81 to i8
  %83 = icmp eq i8 %73, %82
  %84 = load i128, ptr %5, align 16
  %85 = load i7, ptr %2, align 1
  %86 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %85, i7 1)
  %87 = extractvalue { i7, i1 } %86, 1
  br i1 %87, label %88, label %89

88:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

89:                                               ; preds = %80
  %90 = extractvalue { i7, i1 } %86, 0
  %91 = zext i7 %90 to i128
  %92 = lshr i128 %84, %91
  %93 = sub i128 1208925819614629174706175, %92
  %94 = icmp ule i128 %93, 1208925819614629174706175
  br i1 %94, label %101, label %102

95:                                               ; preds = %101
  %96 = trunc i128 %92 to i80
  %97 = xor i80 %96, 0
  store i80 %97, ptr %4, align 16
  %98 = load i80, ptr %4, align 16
  %99 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %98, i80 1)
  %100 = extractvalue { i80, i1 } %99, 1
  br i1 %100, label %103, label %104

101:                                              ; preds = %89
  br label %95

102:                                              ; preds = %89
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

103:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %95
  %105 = extractvalue { i80, i1 } %99, 0
  %106 = lshr i80 %105, 1
  br i1 true, label %111, label %112

107:                                              ; preds = %111
  %108 = zext i1 %83 to i80
  %109 = xor i80 %108, -1
  %110 = and i80 %106, %109
  store i80 %110, ptr %4, align 16
  br label %26

111:                                              ; preds = %104
  br label %107

112:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

113:                                              ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

114:                                              ; preds = %26
  %115 = extractvalue { i80, i1 } %30, 0
  br i1 true, label %120, label %121

116:                                              ; preds = %120
  %117 = shl i80 %115, 64
  %118 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %27, i80 %117)
  %119 = extractvalue { i80, i1 } %118, 1
  br i1 %119, label %122, label %123

120:                                              ; preds = %114
  br label %116

121:                                              ; preds = %114
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @148)
  unreachable

122:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

123:                                              ; preds = %116
  %124 = extractvalue { i80, i1 } %118, 0
  store i80 %124, ptr %4, align 16
  %125 = load i80, ptr %4, align 16
  %126 = or i80 %125, 9223372036854775808
  store i80 %126, ptr %4, align 16
  %127 = load i80, ptr %4, align 16
  %128 = or i80 0, %127
  ret i80 %128
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__eqhf2(half %0, half %1) #0 {
  %3 = call i32 @__cmphf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__cmphf2(half %0, half %1) #0 {
  %3 = bitcast half %0 to i16
  %4 = bitcast half %1 to i16
  %5 = and i16 %3, 32767
  %6 = and i16 %4, 32767
  %7 = icmp ugt i16 %5, 31744
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ 1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i16 %5, %6
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i16 %6, 31744
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i16 %3, %4
  %22 = icmp sge i16 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i16 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i16 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i16 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i16 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__nehf2(half %0, half %1) #0 {
  %3 = call i32 @__cmphf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__lehf2(half %0, half %1) #0 {
  %3 = call i32 @__cmphf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__lthf2(half %0, half %1) #0 {
  %3 = call i32 @__cmphf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__eqsf2(float %0, float %1) #0 {
  %3 = call i32 @__cmpsf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__cmpsf2(float %0, float %1) #0 {
  %3 = bitcast float %0 to i32
  %4 = bitcast float %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = and i32 %4, 2147483647
  %7 = icmp ugt i32 %5, 2139095040
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ 1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i32 %5, %6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i32 %6, 2139095040
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i32 %3, %4
  %22 = icmp sge i32 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i32 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i32 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i32 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i32 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__nesf2(float %0, float %1) #0 {
  %3 = call i32 @__cmpsf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__lesf2(float %0, float %1) #0 {
  %3 = call i32 @__cmpsf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ltsf2(float %0, float %1) #0 {
  %3 = call i32 @__cmpsf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__eqdf2(double %0, double %1) #0 {
  %3 = call i32 @__cmpdf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__cmpdf2(double %0, double %1) #0 {
  %3 = bitcast double %0 to i64
  %4 = bitcast double %1 to i64
  %5 = and i64 %3, 9223372036854775807
  %6 = and i64 %4, 9223372036854775807
  %7 = icmp ugt i64 %5, 9218868437227405312
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ 1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i64 %5, %6
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i64 %6, 9218868437227405312
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i64 %3, %4
  %22 = icmp sge i64 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i64 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i64 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i64 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i64 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__nedf2(double %0, double %1) #0 {
  %3 = call i32 @__cmpdf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ledf2(double %0, double %1) #0 {
  %3 = call i32 @__cmpdf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ltdf2(double %0, double %1) #0 {
  %3 = call i32 @__cmpdf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__eqtf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__cmptf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__cmptf2(fp128 %0, fp128 %1) #0 {
  %3 = bitcast fp128 %0 to i128
  %4 = bitcast fp128 %1 to i128
  %5 = and i128 %3, 170141183460469231731687303715884105727
  %6 = and i128 %4, 170141183460469231731687303715884105727
  %7 = icmp ugt i128 %5, 170135991163610696904058773219554885632
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ 1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i128 %5, %6
  %12 = icmp eq i128 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i128 %3, %4
  %22 = icmp sge i128 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i128 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i128 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i128 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i128 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__netf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__cmptf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__letf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__cmptf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__lttf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__cmptf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__eqxf2(i80 %0, i80 %1) #0 {
  %3 = call i32 @__cmpxf2(i80 %0, i80 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__cmpxf2(i80 %0, i80 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %math.F80, align 8
  %5 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, i80 %0)
  call fastcc void @math.break_f80(ptr sret(%math.F80) %4, i80 %1)
  %6 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %7 = load i16, ptr %6, align 2
  %8 = and i16 %7, 32767
  %9 = icmp eq i16 %8, 32767
  br i1 %9, label %29, label %34

10:                                               ; preds = %110, %109, %90, %89, %68, %66, %51
  %11 = phi i32 [ 1, %51 ], [ 0, %66 ], [ 0, %68 ], [ -1, %89 ], [ 1, %90 ], [ -1, %109 ], [ 1, %110 ]
  ret i32 %11

12:                                               ; preds = %52
  %13 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %16 = load i64, ptr %15, align 8
  %17 = or i64 %14, %16
  %18 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %19 = load i16, ptr %18, align 2
  %20 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %21 = load i16, ptr %20, align 2
  %22 = or i16 %19, %21
  %23 = and i16 %22, 32767
  %24 = zext i16 %23 to i64
  %25 = or i64 %17, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %66, label %67

27:                                               ; preds = %34, %29
  %28 = phi i1 [ %33, %29 ], [ false, %34 ]
  br i1 %28, label %37, label %38

29:                                               ; preds = %2
  %30 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %31 = load i64, ptr %30, align 8
  %32 = xor i64 %31, -9223372036854775808
  %33 = icmp ne i64 %32, 0
  br label %27

34:                                               ; preds = %2
  br label %27

35:                                               ; preds = %43, %37
  %36 = phi i1 [ true, %37 ], [ %44, %43 ]
  br i1 %36, label %51, label %52

37:                                               ; preds = %27
  br label %35

38:                                               ; preds = %27
  %39 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %40 = load i16, ptr %39, align 2
  %41 = and i16 %40, 32767
  %42 = icmp eq i16 %41, 32767
  br i1 %42, label %45, label %50

43:                                               ; preds = %50, %45
  %44 = phi i1 [ %49, %45 ], [ false, %50 ]
  br label %35

45:                                               ; preds = %38
  %46 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %47 = load i64, ptr %46, align 8
  %48 = xor i64 %47, -9223372036854775808
  %49 = icmp ne i64 %48, 0
  br label %43

50:                                               ; preds = %38
  br label %43

51:                                               ; preds = %35
  br label %10

52:                                               ; preds = %35
  br label %12

53:                                               ; preds = %67
  %54 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %55 = load i16, ptr %54, align 2
  %56 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %57 = load i16, ptr %56, align 2
  %58 = icmp eq i16 %55, %57
  %59 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %60 = load i64, ptr %59, align 8
  %61 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %62 = load i64, ptr %61, align 8
  %63 = icmp eq i64 %60, %62
  %64 = and i1 %58, %63
  %65 = icmp ne i1 %64, false
  br i1 %65, label %68, label %69

66:                                               ; preds = %12
  br label %10

67:                                               ; preds = %12
  br label %53

68:                                               ; preds = %53
  br label %10

69:                                               ; preds = %53
  %70 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %71 = load i16, ptr %70, align 2
  %72 = and i16 %71, -32768
  %73 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %74 = load i16, ptr %73, align 2
  %75 = and i16 %74, -32768
  %76 = icmp ne i16 %72, %75
  br i1 %76, label %77, label %83

77:                                               ; preds = %69
  %78 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %79 = load i16, ptr %78, align 2
  %80 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %81 = load i16, ptr %80, align 2
  %82 = icmp slt i16 %79, %81
  br i1 %82, label %89, label %90

83:                                               ; preds = %69
  %84 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %85 = load i64, ptr %84, align 8
  %86 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %87 = load i16, ptr %86, align 2
  %88 = zext i16 %87 to i80
  br i1 true, label %100, label %101

89:                                               ; preds = %77
  br label %10

90:                                               ; preds = %77
  br label %10

91:                                               ; preds = %100
  %92 = shl i80 %88, 64
  %93 = zext i64 %85 to i80
  %94 = or i80 %93, %92
  %95 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %96 = load i64, ptr %95, align 8
  %97 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %98 = load i16, ptr %97, align 2
  %99 = zext i16 %98 to i80
  br i1 true, label %107, label %108

100:                                              ; preds = %83
  br label %91

101:                                              ; preds = %83
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @81)
  unreachable

102:                                              ; preds = %107
  %103 = shl i80 %99, 64
  %104 = zext i64 %96 to i80
  %105 = or i80 %104, %103
  %106 = icmp ult i80 %94, %105
  br i1 %106, label %109, label %110

107:                                              ; preds = %91
  br label %102

108:                                              ; preds = %91
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @81)
  unreachable

109:                                              ; preds = %102
  br label %10

110:                                              ; preds = %102
  br label %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__nexf2(i80 %0, i80 %1) #0 {
  %3 = call i32 @__cmpxf2(i80 %0, i80 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__lexf2(i80 %0, i80 %1) #0 {
  %3 = call i32 @__cmpxf2(i80 %0, i80 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__ltxf2(i80 %0, i80 %1) #0 {
  %3 = call i32 @__cmpxf2(i80 %0, i80 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__unordhf2(half %0, half %1) #0 {
  %3 = bitcast half %0 to i16
  %4 = and i16 %3, 32767
  %5 = bitcast half %1 to i16
  %6 = and i16 %5, 32767
  %7 = icmp ugt i16 %4, 31744
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i16 %6, 31744
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__unordsf2(float %0, float %1) #0 {
  %3 = bitcast float %0 to i32
  %4 = and i32 %3, 2147483647
  %5 = bitcast float %1 to i32
  %6 = and i32 %5, 2147483647
  %7 = icmp ugt i32 %4, 2139095040
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i32 %6, 2139095040
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__unorddf2(double %0, double %1) #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp ugt i64 %4, 9218868437227405312
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i64 %6, 9218868437227405312
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__unordxf2(i80 %0, i80 %1) #0 {
  %3 = and i80 %0, 604462909807314587353087
  %4 = and i80 %1, 604462909807314587353087
  %5 = icmp ugt i80 %3, 604453686435277732577280
  br i1 %5, label %9, label %10

6:                                                ; preds = %10, %9
  %7 = phi i1 [ true, %9 ], [ %11, %10 ]
  %8 = zext i1 %7 to i32
  ret i32 %8

9:                                                ; preds = %2
  br label %6

10:                                               ; preds = %2
  %11 = icmp ugt i80 %4, 604453686435277732577280
  br label %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__unordtf2(fp128 %0, fp128 %1) #0 {
  %3 = bitcast fp128 %0 to i128
  %4 = and i128 %3, 170141183460469231731687303715884105727
  %5 = bitcast fp128 %1 to i128
  %6 = and i128 %5, 170141183460469231731687303715884105727
  %7 = icmp ugt i128 %4, 170135991163610696904058773219554885632
  br i1 %7, label %11, label %12

8:                                                ; preds = %12, %11
  %9 = phi i1 [ true, %11 ], [ %13, %12 ]
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %2
  br label %8

12:                                               ; preds = %2
  %13 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gehf2(half %0, half %1) #0 {
  %3 = bitcast half %0 to i16
  %4 = bitcast half %1 to i16
  %5 = and i16 %3, 32767
  %6 = and i16 %4, 32767
  %7 = icmp ugt i16 %5, 31744
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ -1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i16 %5, %6
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i16 %6, 31744
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i16 %3, %4
  %22 = icmp sge i16 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i16 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i16 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i16 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i16 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gthf2(half %0, half %1) #0 {
  %3 = call i32 @__gehf2(half %0, half %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gesf2(float %0, float %1) #0 {
  %3 = bitcast float %0 to i32
  %4 = bitcast float %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = and i32 %4, 2147483647
  %7 = icmp ugt i32 %5, 2139095040
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ -1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i32 %5, %6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i32 %6, 2139095040
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i32 %3, %4
  %22 = icmp sge i32 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i32 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i32 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i32 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i32 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gtsf2(float %0, float %1) #0 {
  %3 = call i32 @__gesf2(float %0, float %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gedf2(double %0, double %1) #0 {
  %3 = bitcast double %0 to i64
  %4 = bitcast double %1 to i64
  %5 = and i64 %3, 9223372036854775807
  %6 = and i64 %4, 9223372036854775807
  %7 = icmp ugt i64 %5, 9218868437227405312
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ -1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i64 %5, %6
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i64 %6, 9218868437227405312
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i64 %3, %4
  %22 = icmp sge i64 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i64 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i64 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i64 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i64 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gtdf2(double %0, double %1) #0 {
  %3 = call i32 @__gedf2(double %0, double %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gexf2(i80 %0, i80 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %math.F80, align 8
  %5 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %5, i80 %0)
  call fastcc void @math.break_f80(ptr sret(%math.F80) %4, i80 %1)
  %6 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %7 = load i16, ptr %6, align 2
  %8 = and i16 %7, 32767
  %9 = icmp eq i16 %8, 32767
  br i1 %9, label %29, label %34

10:                                               ; preds = %110, %109, %90, %89, %68, %66, %51
  %11 = phi i32 [ -1, %51 ], [ 0, %66 ], [ 0, %68 ], [ -1, %89 ], [ 1, %90 ], [ -1, %109 ], [ 1, %110 ]
  ret i32 %11

12:                                               ; preds = %52
  %13 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %14 = load i64, ptr %13, align 8
  %15 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %16 = load i64, ptr %15, align 8
  %17 = or i64 %14, %16
  %18 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %19 = load i16, ptr %18, align 2
  %20 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %21 = load i16, ptr %20, align 2
  %22 = or i16 %19, %21
  %23 = and i16 %22, 32767
  %24 = zext i16 %23 to i64
  %25 = or i64 %17, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %66, label %67

27:                                               ; preds = %34, %29
  %28 = phi i1 [ %33, %29 ], [ false, %34 ]
  br i1 %28, label %37, label %38

29:                                               ; preds = %2
  %30 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %31 = load i64, ptr %30, align 8
  %32 = xor i64 %31, -9223372036854775808
  %33 = icmp ne i64 %32, 0
  br label %27

34:                                               ; preds = %2
  br label %27

35:                                               ; preds = %43, %37
  %36 = phi i1 [ true, %37 ], [ %44, %43 ]
  br i1 %36, label %51, label %52

37:                                               ; preds = %27
  br label %35

38:                                               ; preds = %27
  %39 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %40 = load i16, ptr %39, align 2
  %41 = and i16 %40, 32767
  %42 = icmp eq i16 %41, 32767
  br i1 %42, label %45, label %50

43:                                               ; preds = %50, %45
  %44 = phi i1 [ %49, %45 ], [ false, %50 ]
  br label %35

45:                                               ; preds = %38
  %46 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %47 = load i64, ptr %46, align 8
  %48 = xor i64 %47, -9223372036854775808
  %49 = icmp ne i64 %48, 0
  br label %43

50:                                               ; preds = %38
  br label %43

51:                                               ; preds = %35
  br label %10

52:                                               ; preds = %35
  br label %12

53:                                               ; preds = %67
  %54 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %55 = load i16, ptr %54, align 2
  %56 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %57 = load i16, ptr %56, align 2
  %58 = icmp eq i16 %55, %57
  %59 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %60 = load i64, ptr %59, align 8
  %61 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %62 = load i64, ptr %61, align 8
  %63 = icmp eq i64 %60, %62
  %64 = and i1 %58, %63
  %65 = icmp ne i1 %64, false
  br i1 %65, label %68, label %69

66:                                               ; preds = %12
  br label %10

67:                                               ; preds = %12
  br label %53

68:                                               ; preds = %53
  br label %10

69:                                               ; preds = %53
  %70 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %71 = load i16, ptr %70, align 2
  %72 = and i16 %71, -32768
  %73 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %74 = load i16, ptr %73, align 2
  %75 = and i16 %74, -32768
  %76 = icmp ne i16 %72, %75
  br i1 %76, label %77, label %83

77:                                               ; preds = %69
  %78 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %79 = load i16, ptr %78, align 2
  %80 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %81 = load i16, ptr %80, align 2
  %82 = icmp slt i16 %79, %81
  br i1 %82, label %89, label %90

83:                                               ; preds = %69
  %84 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 0
  %85 = load i64, ptr %84, align 8
  %86 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %87 = load i16, ptr %86, align 2
  %88 = zext i16 %87 to i80
  br i1 true, label %100, label %101

89:                                               ; preds = %77
  br label %10

90:                                               ; preds = %77
  br label %10

91:                                               ; preds = %100
  %92 = shl i80 %88, 64
  %93 = zext i64 %85 to i80
  %94 = or i80 %93, %92
  %95 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 0
  %96 = load i64, ptr %95, align 8
  %97 = getelementptr inbounds %math.F80, ptr %4, i32 0, i32 1
  %98 = load i16, ptr %97, align 2
  %99 = zext i16 %98 to i80
  br i1 true, label %107, label %108

100:                                              ; preds = %83
  br label %91

101:                                              ; preds = %83
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @82)
  unreachable

102:                                              ; preds = %107
  %103 = shl i80 %99, 64
  %104 = zext i64 %96 to i80
  %105 = or i80 %104, %103
  %106 = icmp ult i80 %94, %105
  br i1 %106, label %109, label %110

107:                                              ; preds = %91
  br label %102

108:                                              ; preds = %91
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @82)
  unreachable

109:                                              ; preds = %102
  br label %10

110:                                              ; preds = %102
  br label %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gtxf2(i80 %0, i80 %1) #0 {
  %3 = call i32 @__gexf2(i80 %0, i80 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__getf2(fp128 %0, fp128 %1) #0 {
  %3 = bitcast fp128 %0 to i128
  %4 = bitcast fp128 %1 to i128
  %5 = and i128 %3, 170141183460469231731687303715884105727
  %6 = and i128 %4, 170141183460469231731687303715884105727
  %7 = icmp ugt i128 %5, 170135991163610696904058773219554885632
  br i1 %7, label %15, label %16

8:                                                ; preds = %38, %37, %34, %33, %32, %29, %23, %18
  %9 = phi i32 [ -1, %18 ], [ 0, %23 ], [ -1, %29 ], [ 0, %32 ], [ 1, %33 ], [ -1, %34 ], [ 0, %37 ], [ 1, %38 ]
  ret i32 %9

10:                                               ; preds = %19
  %11 = or i128 %5, %6
  %12 = icmp eq i128 %11, 0
  br i1 %12, label %23, label %24

13:                                               ; preds = %16, %15
  %14 = phi i1 [ true, %15 ], [ %17, %16 ]
  br i1 %14, label %18, label %19

15:                                               ; preds = %2
  br label %13

16:                                               ; preds = %2
  %17 = icmp ugt i128 %6, 170135991163610696904058773219554885632
  br label %13

18:                                               ; preds = %13
  br label %8

19:                                               ; preds = %13
  br label %10

20:                                               ; preds = %24
  %21 = and i128 %3, %4
  %22 = icmp sge i128 %21, 0
  br i1 %22, label %25, label %27

23:                                               ; preds = %10
  br label %8

24:                                               ; preds = %10
  br label %20

25:                                               ; preds = %20
  %26 = icmp slt i128 %3, %4
  br i1 %26, label %29, label %30

27:                                               ; preds = %20
  %28 = icmp sgt i128 %3, %4
  br i1 %28, label %34, label %35

29:                                               ; preds = %25
  br label %8

30:                                               ; preds = %25
  %31 = icmp eq i128 %3, %4
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  br label %8

33:                                               ; preds = %30
  br label %8

34:                                               ; preds = %27
  br label %8

35:                                               ; preds = %27
  %36 = icmp eq i128 %3, %4
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  br label %8

38:                                               ; preds = %35
  br label %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__gttf2(fp128 %0, fp128 %1) #0 {
  %3 = call i32 @__getf2(fp128 %0, fp128 %1)
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__addhf3(half %0, half %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  %11 = alloca half, align 2
  store half 0xH7C01, ptr %11, align 2
  %12 = load half, ptr %11, align 2
  %13 = bitcast half %12 to i16
  %14 = or i16 %13, 512
  %15 = bitcast half %0 to i16
  store i16 %15, ptr %10, align 2
  %16 = bitcast half %1 to i16
  store i16 %16, ptr %9, align 2
  %17 = load i16, ptr %10, align 2
  %18 = and i16 %17, 32767
  %19 = load i16, ptr %9, align 2
  %20 = and i16 %19, 32767
  %21 = sub i16 %18, 1
  %22 = icmp uge i16 %21, 31743
  br i1 %22, label %29, label %30

23:                                               ; preds = %290, %262, %237, %185, %77, %75, %70, %63, %60, %58, %45, %38
  %24 = phi half [ %41, %38 ], [ %48, %45 ], [ %59, %58 ], [ %0, %60 ], [ %1, %63 ], [ %74, %70 ], [ %1, %75 ], [ %0, %77 ], [ 0xH0000, %185 ], [ %239, %237 ], [ %268, %262 ], [ %292, %290 ]
  ret half %24

25:                                               ; preds = %76, %35
  %26 = icmp ugt i16 %20, %18
  br i1 %26, label %94, label %97

27:                                               ; preds = %30, %29
  %28 = phi i1 [ true, %29 ], [ %32, %30 ]
  br i1 %28, label %33, label %35

29:                                               ; preds = %2
  br label %27

30:                                               ; preds = %2
  %31 = sub i16 %20, 1
  %32 = icmp uge i16 %31, 31743
  br label %27

33:                                               ; preds = %27
  %34 = icmp ugt i16 %18, 31744
  br i1 %34, label %38, label %42

35:                                               ; preds = %27
  br label %25

36:                                               ; preds = %42
  %37 = icmp ugt i16 %20, 31744
  br i1 %37, label %45, label %49

38:                                               ; preds = %33
  %39 = bitcast half %0 to i16
  %40 = or i16 %39, 512
  %41 = bitcast i16 %40 to half
  br label %23

42:                                               ; preds = %33
  br label %36

43:                                               ; preds = %49
  %44 = icmp eq i16 %18, 31744
  br i1 %44, label %52, label %57

45:                                               ; preds = %36
  %46 = bitcast half %1 to i16
  %47 = or i16 %46, 512
  %48 = bitcast i16 %47 to half
  br label %23

49:                                               ; preds = %36
  br label %43

50:                                               ; preds = %57
  %51 = icmp eq i16 %20, 31744
  br i1 %51, label %63, label %64

52:                                               ; preds = %43
  %53 = bitcast half %0 to i16
  %54 = bitcast half %1 to i16
  %55 = xor i16 %53, %54
  %56 = icmp eq i16 %55, -32768
  br i1 %56, label %58, label %60

57:                                               ; preds = %43
  br label %50

58:                                               ; preds = %52
  %59 = bitcast i16 %14 to half
  br label %23

60:                                               ; preds = %52
  br label %23

61:                                               ; preds = %64
  %62 = icmp eq i16 %18, 0
  br i1 %62, label %67, label %69

63:                                               ; preds = %50
  br label %23

64:                                               ; preds = %50
  br label %61

65:                                               ; preds = %69
  %66 = icmp eq i16 %20, 0
  br i1 %66, label %77, label %78

67:                                               ; preds = %61
  %68 = icmp eq i16 %20, 0
  br i1 %68, label %70, label %75

69:                                               ; preds = %61
  br label %65

70:                                               ; preds = %67
  %71 = bitcast half %0 to i16
  %72 = bitcast half %1 to i16
  %73 = and i16 %71, %72
  %74 = bitcast i16 %73 to half
  br label %23

75:                                               ; preds = %67
  br label %23

76:                                               ; preds = %78
  br label %25

77:                                               ; preds = %65
  br label %23

78:                                               ; preds = %65
  br label %76

79:                                               ; preds = %97, %94
  %80 = load i16, ptr %10, align 2
  %81 = lshr i16 %80, 10
  %82 = and i16 %81, 31
  %83 = zext i16 %82 to i32
  store i32 %83, ptr %8, align 4
  %84 = load i16, ptr %9, align 2
  %85 = lshr i16 %84, 10
  %86 = and i16 %85, 31
  %87 = zext i16 %86 to i32
  store i32 %87, ptr %7, align 4
  %88 = load i16, ptr %10, align 2
  %89 = and i16 %88, 1023
  store i16 %89, ptr %6, align 2
  %90 = load i16, ptr %9, align 2
  %91 = and i16 %90, 1023
  store i16 %91, ptr %5, align 2
  %92 = load i32, ptr %8, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %101, label %103

94:                                               ; preds = %25
  %95 = load i16, ptr %10, align 2
  %96 = load i16, ptr %9, align 2
  store i16 %96, ptr %10, align 2
  store i16 %95, ptr %9, align 2
  br label %79

97:                                               ; preds = %25
  br label %79

98:                                               ; preds = %103, %101
  %99 = load i32, ptr %7, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %122, label %124

101:                                              ; preds = %79
  %102 = call fastcc i32 @compiler_rt.common.normalize__anon_3623(ptr nonnull align 2 %6)
  store i32 %102, ptr %8, align 4
  br label %98

103:                                              ; preds = %79
  br label %98

104:                                              ; preds = %124, %122
  %105 = load i16, ptr %10, align 2
  %106 = and i16 %105, -32768
  %107 = load i16, ptr %10, align 2
  %108 = load i16, ptr %9, align 2
  %109 = xor i16 %107, %108
  %110 = and i16 %109, -32768
  %111 = icmp ne i16 %110, 0
  %112 = load i16, ptr %6, align 2
  %113 = or i16 %112, 1024
  %114 = shl i16 %113, 3
  store i16 %114, ptr %6, align 2
  %115 = load i16, ptr %5, align 2
  %116 = or i16 %115, 1024
  %117 = shl i16 %116, 3
  store i16 %117, ptr %5, align 2
  %118 = load i32, ptr %8, align 4
  %119 = load i32, ptr %7, align 4
  %120 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %118, i32 %119)
  %121 = extractvalue { i32, i1 } %120, 1
  br i1 %121, label %125, label %126

122:                                              ; preds = %98
  %123 = call fastcc i32 @compiler_rt.common.normalize__anon_3623(ptr nonnull align 2 %5)
  store i32 %123, ptr %7, align 4
  br label %104

124:                                              ; preds = %98
  br label %104

125:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

126:                                              ; preds = %104
  %127 = extractvalue { i32, i1 } %120, 0
  %128 = icmp sge i32 %127, 0
  br i1 %128, label %131, label %132

129:                                              ; preds = %131
  %130 = icmp ne i32 %127, 0
  br i1 %130, label %134, label %136

131:                                              ; preds = %126
  br label %129

132:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

133:                                              ; preds = %137, %136
  br i1 %111, label %167, label %172

134:                                              ; preds = %129
  %135 = icmp ult i32 %127, 16
  br i1 %135, label %138, label %142

136:                                              ; preds = %129
  br label %133

137:                                              ; preds = %143, %142
  br label %133

138:                                              ; preds = %134
  %139 = load i16, ptr %5, align 2
  %140 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 16, i32 %127)
  %141 = extractvalue { i32, i1 } %140, 1
  br i1 %141, label %150, label %151

142:                                              ; preds = %134
  store i16 1, ptr %5, align 2
  br label %137

143:                                              ; preds = %163, %162
  %144 = phi i16 [ 1, %162 ], [ 0, %163 ]
  %145 = load i16, ptr %5, align 2
  %146 = trunc i32 %127 to i4
  %147 = zext i4 %146 to i16
  %148 = lshr i16 %145, %147
  %149 = or i16 %148, %144
  store i16 %149, ptr %5, align 2
  br label %137

150:                                              ; preds = %138
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

151:                                              ; preds = %138
  %152 = extractvalue { i32, i1 } %140, 0
  %153 = sub i32 15, %152
  %154 = icmp ule i32 %153, 15
  br i1 %154, label %160, label %161

155:                                              ; preds = %160
  %156 = trunc i32 %152 to i4
  %157 = zext i4 %156 to i16
  %158 = shl i16 %139, %157
  %159 = icmp ne i16 %158, 0
  br i1 %159, label %162, label %163

160:                                              ; preds = %151
  br label %155

161:                                              ; preds = %151
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

162:                                              ; preds = %155
  br label %143

163:                                              ; preds = %155
  br label %143

164:                                              ; preds = %220, %187
  %165 = load i32, ptr %8, align 4
  %166 = icmp sge i32 %165, 31
  br i1 %166, label %237, label %240

167:                                              ; preds = %133
  %168 = load i16, ptr %6, align 2
  %169 = load i16, ptr %5, align 2
  %170 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 %168, i16 %169)
  %171 = extractvalue { i16, i1 } %170, 1
  br i1 %171, label %177, label %178

172:                                              ; preds = %133
  %173 = load i16, ptr %6, align 2
  %174 = load i16, ptr %5, align 2
  %175 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %173, i16 %174)
  %176 = extractvalue { i16, i1 } %175, 1
  br i1 %176, label %214, label %215

177:                                              ; preds = %167
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

178:                                              ; preds = %167
  %179 = extractvalue { i16, i1 } %170, 0
  store i16 %179, ptr %6, align 2
  %180 = load i16, ptr %6, align 2
  %181 = icmp eq i16 %180, 0
  br i1 %181, label %185, label %186

182:                                              ; preds = %186
  %183 = load i16, ptr %6, align 2
  %184 = icmp ult i16 %183, 8192
  br i1 %184, label %188, label %195

185:                                              ; preds = %178
  br label %23

186:                                              ; preds = %178
  br label %182

187:                                              ; preds = %212, %195
  br label %164

188:                                              ; preds = %182
  %189 = load i16, ptr %6, align 2
  %190 = call i16 @llvm.ctlz.i16(i16 %189, i1 false)
  %191 = trunc i16 %190 to i5
  %192 = zext i5 %191 to i32
  %193 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %192, i32 2)
  %194 = extractvalue { i32, i1 } %193, 1
  br i1 %194, label %196, label %197

195:                                              ; preds = %182
  br label %187

196:                                              ; preds = %188
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

197:                                              ; preds = %188
  %198 = extractvalue { i32, i1 } %193, 0
  %199 = load i16, ptr %6, align 2
  %200 = sub i32 15, %198
  %201 = icmp ule i32 %200, 15
  br i1 %201, label %209, label %210

202:                                              ; preds = %209
  %203 = trunc i32 %198 to i4
  %204 = zext i4 %203 to i16
  %205 = shl i16 %199, %204
  store i16 %205, ptr %6, align 2
  %206 = load i32, ptr %8, align 4
  %207 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %206, i32 %198)
  %208 = extractvalue { i32, i1 } %207, 1
  br i1 %208, label %211, label %212

209:                                              ; preds = %197
  br label %202

210:                                              ; preds = %197
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

211:                                              ; preds = %202
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

212:                                              ; preds = %202
  %213 = extractvalue { i32, i1 } %207, 0
  store i32 %213, ptr %8, align 4
  br label %187

214:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

215:                                              ; preds = %172
  %216 = extractvalue { i16, i1 } %175, 0
  store i16 %216, ptr %6, align 2
  %217 = load i16, ptr %6, align 2
  %218 = and i16 %217, 16384
  %219 = icmp ne i16 %218, 0
  br i1 %219, label %221, label %230

220:                                              ; preds = %232, %230
  br label %164

221:                                              ; preds = %215
  %222 = load i16, ptr %6, align 2
  %223 = and i16 %222, 1
  %224 = load i16, ptr %6, align 2
  %225 = lshr i16 %224, 1
  %226 = or i16 %225, %223
  store i16 %226, ptr %6, align 2
  %227 = load i32, ptr %8, align 4
  %228 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %227, i32 1)
  %229 = extractvalue { i32, i1 } %228, 1
  br i1 %229, label %231, label %232

230:                                              ; preds = %215
  br label %220

231:                                              ; preds = %221
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

232:                                              ; preds = %221
  %233 = extractvalue { i32, i1 } %228, 0
  store i32 %233, ptr %8, align 4
  br label %220

234:                                              ; preds = %240
  %235 = load i32, ptr %8, align 4
  %236 = icmp sle i32 %235, 0
  br i1 %236, label %251, label %256

237:                                              ; preds = %164
  %238 = or i16 31744, %106
  %239 = bitcast i16 %238 to half
  br label %23

240:                                              ; preds = %164
  br label %234

241:                                              ; preds = %256
  %242 = load i16, ptr %6, align 2
  %243 = and i16 %242, 7
  %244 = load i16, ptr %6, align 2
  %245 = lshr i16 %244, 3
  %246 = and i16 %245, 1023
  store i16 %246, ptr %4, align 2
  %247 = load i16, ptr %4, align 2
  %248 = load i32, ptr %8, align 4
  %249 = sub i32 65535, %248
  %250 = icmp ule i32 %249, 65535
  br i1 %250, label %278, label %279

251:                                              ; preds = %234
  %252 = load i16, ptr %6, align 2
  %253 = load i32, ptr %8, align 4
  %254 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %253)
  %255 = extractvalue { i32, i1 } %254, 1
  br i1 %255, label %257, label %258

256:                                              ; preds = %234
  br label %241

257:                                              ; preds = %251
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

258:                                              ; preds = %251
  %259 = extractvalue { i32, i1 } %254, 0
  %260 = sub i32 15, %259
  %261 = icmp ule i32 %260, 15
  br i1 %261, label %269, label %270

262:                                              ; preds = %269
  %263 = trunc i32 %259 to i4
  %264 = zext i4 %263 to i16
  %265 = lshr i16 %252, %264
  store i16 %265, ptr %6, align 2
  %266 = load i16, ptr %6, align 2
  %267 = or i16 %106, %266
  %268 = bitcast i16 %267 to half
  br label %23

269:                                              ; preds = %258
  br label %262

270:                                              ; preds = %258
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

271:                                              ; preds = %278
  %272 = trunc i32 %248 to i16
  %273 = shl i16 %272, 10
  %274 = or i16 %247, %273
  store i16 %274, ptr %4, align 2
  %275 = load i16, ptr %4, align 2
  %276 = or i16 %275, %106
  store i16 %276, ptr %4, align 2
  %277 = icmp ugt i16 %243, 4
  br i1 %277, label %282, label %286

278:                                              ; preds = %241
  br label %271

279:                                              ; preds = %241
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @83)
  unreachable

280:                                              ; preds = %288, %286
  %281 = icmp eq i16 %243, 4
  br i1 %281, label %293, label %299

282:                                              ; preds = %271
  %283 = load i16, ptr %4, align 2
  %284 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %283, i16 1)
  %285 = extractvalue { i16, i1 } %284, 1
  br i1 %285, label %287, label %288

286:                                              ; preds = %271
  br label %280

287:                                              ; preds = %282
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

288:                                              ; preds = %282
  %289 = extractvalue { i16, i1 } %284, 0
  store i16 %289, ptr %4, align 2
  br label %280

290:                                              ; preds = %301, %299
  %291 = load i16, ptr %4, align 2
  %292 = bitcast i16 %291 to half
  br label %23

293:                                              ; preds = %280
  %294 = load i16, ptr %4, align 2
  %295 = load i16, ptr %4, align 2
  %296 = and i16 %295, 1
  %297 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %294, i16 %296)
  %298 = extractvalue { i16, i1 } %297, 1
  br i1 %298, label %300, label %301

299:                                              ; preds = %280
  br label %290

300:                                              ; preds = %293
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

301:                                              ; preds = %293
  %302 = extractvalue { i16, i1 } %297, 0
  store i16 %302, ptr %4, align 2
  br label %290
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3623(ptr nonnull align 2 %0) unnamed_addr #0 {
  %2 = load i16, ptr %0, align 2
  %3 = call i16 @llvm.ctlz.i16(i16 %2, i1 false)
  %4 = trunc i16 %3 to i5
  %5 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %4, i5 5)
  %6 = extractvalue { i5, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i5, i1 } %5, 0
  %10 = load i16, ptr %0, align 2
  %11 = sub i5 15, %9
  %12 = icmp ule i5 %11, 15
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i5 %9 to i4
  %15 = zext i4 %14 to i16
  %16 = shl i16 %10, %15
  store i16 %16, ptr %0, align 2
  %17 = zext i5 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @149)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__addsf3(float %0, float %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  store float 0x7FF0000020000000, ptr %11, align 4
  %12 = load float, ptr %11, align 4
  %13 = bitcast float %12 to i32
  %14 = or i32 %13, 4194304
  %15 = bitcast float %0 to i32
  store i32 %15, ptr %10, align 4
  %16 = bitcast float %1 to i32
  store i32 %16, ptr %9, align 4
  %17 = load i32, ptr %10, align 4
  %18 = and i32 %17, 2147483647
  %19 = load i32, ptr %9, align 4
  %20 = and i32 %19, 2147483647
  %21 = sub i32 %18, 1
  %22 = icmp uge i32 %21, 2139095039
  br i1 %22, label %29, label %30

23:                                               ; preds = %296, %269, %245, %193, %77, %75, %70, %63, %60, %58, %45, %38
  %24 = phi float [ %41, %38 ], [ %48, %45 ], [ %59, %58 ], [ %0, %60 ], [ %1, %63 ], [ %74, %70 ], [ %1, %75 ], [ %0, %77 ], [ 0.000000e+00, %193 ], [ %247, %245 ], [ %275, %269 ], [ %298, %296 ]
  ret float %24

25:                                               ; preds = %76, %35
  %26 = icmp ugt i32 %20, %18
  br i1 %26, label %85, label %88

27:                                               ; preds = %30, %29
  %28 = phi i1 [ true, %29 ], [ %32, %30 ]
  br i1 %28, label %33, label %35

29:                                               ; preds = %2
  br label %27

30:                                               ; preds = %2
  %31 = sub i32 %20, 1
  %32 = icmp uge i32 %31, 2139095039
  br label %27

33:                                               ; preds = %27
  %34 = icmp ugt i32 %18, 2139095040
  br i1 %34, label %38, label %42

35:                                               ; preds = %27
  br label %25

36:                                               ; preds = %42
  %37 = icmp ugt i32 %20, 2139095040
  br i1 %37, label %45, label %49

38:                                               ; preds = %33
  %39 = bitcast float %0 to i32
  %40 = or i32 %39, 4194304
  %41 = bitcast i32 %40 to float
  br label %23

42:                                               ; preds = %33
  br label %36

43:                                               ; preds = %49
  %44 = icmp eq i32 %18, 2139095040
  br i1 %44, label %52, label %57

45:                                               ; preds = %36
  %46 = bitcast float %1 to i32
  %47 = or i32 %46, 4194304
  %48 = bitcast i32 %47 to float
  br label %23

49:                                               ; preds = %36
  br label %43

50:                                               ; preds = %57
  %51 = icmp eq i32 %20, 2139095040
  br i1 %51, label %63, label %64

52:                                               ; preds = %43
  %53 = bitcast float %0 to i32
  %54 = bitcast float %1 to i32
  %55 = xor i32 %53, %54
  %56 = icmp eq i32 %55, -2147483648
  br i1 %56, label %58, label %60

57:                                               ; preds = %43
  br label %50

58:                                               ; preds = %52
  %59 = bitcast i32 %14 to float
  br label %23

60:                                               ; preds = %52
  br label %23

61:                                               ; preds = %64
  %62 = icmp eq i32 %18, 0
  br i1 %62, label %67, label %69

63:                                               ; preds = %50
  br label %23

64:                                               ; preds = %50
  br label %61

65:                                               ; preds = %69
  %66 = icmp eq i32 %20, 0
  br i1 %66, label %77, label %78

67:                                               ; preds = %61
  %68 = icmp eq i32 %20, 0
  br i1 %68, label %70, label %75

69:                                               ; preds = %61
  br label %65

70:                                               ; preds = %67
  %71 = bitcast float %0 to i32
  %72 = bitcast float %1 to i32
  %73 = and i32 %71, %72
  %74 = bitcast i32 %73 to float
  br label %23

75:                                               ; preds = %67
  br label %23

76:                                               ; preds = %78
  br label %25

77:                                               ; preds = %65
  br label %23

78:                                               ; preds = %65
  br label %76

79:                                               ; preds = %88, %85
  %80 = load i32, ptr %10, align 4
  %81 = lshr i32 %80, 23
  %82 = and i32 %81, 255
  %83 = sub i32 2147483647, %82
  %84 = icmp ule i32 %83, 2147483647
  br i1 %84, label %95, label %96

85:                                               ; preds = %25
  %86 = load i32, ptr %10, align 4
  %87 = load i32, ptr %9, align 4
  store i32 %87, ptr %10, align 4
  store i32 %86, ptr %9, align 4
  br label %79

88:                                               ; preds = %25
  br label %79

89:                                               ; preds = %95
  store i32 %82, ptr %8, align 4
  %90 = load i32, ptr %9, align 4
  %91 = lshr i32 %90, 23
  %92 = and i32 %91, 255
  %93 = sub i32 2147483647, %92
  %94 = icmp ule i32 %93, 2147483647
  br i1 %94, label %104, label %105

95:                                               ; preds = %79
  br label %89

96:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

97:                                               ; preds = %104
  store i32 %92, ptr %7, align 4
  %98 = load i32, ptr %10, align 4
  %99 = and i32 %98, 8388607
  store i32 %99, ptr %6, align 4
  %100 = load i32, ptr %9, align 4
  %101 = and i32 %100, 8388607
  store i32 %101, ptr %5, align 4
  %102 = load i32, ptr %8, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %109, label %111

104:                                              ; preds = %89
  br label %97

105:                                              ; preds = %89
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

106:                                              ; preds = %111, %109
  %107 = load i32, ptr %7, align 4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %130, label %132

109:                                              ; preds = %97
  %110 = call fastcc i32 @compiler_rt.common.normalize__anon_3624(ptr nonnull align 4 %6)
  store i32 %110, ptr %8, align 4
  br label %106

111:                                              ; preds = %97
  br label %106

112:                                              ; preds = %132, %130
  %113 = load i32, ptr %10, align 4
  %114 = and i32 %113, -2147483648
  %115 = load i32, ptr %10, align 4
  %116 = load i32, ptr %9, align 4
  %117 = xor i32 %115, %116
  %118 = and i32 %117, -2147483648
  %119 = icmp ne i32 %118, 0
  %120 = load i32, ptr %6, align 4
  %121 = or i32 %120, 8388608
  %122 = shl i32 %121, 3
  store i32 %122, ptr %6, align 4
  %123 = load i32, ptr %5, align 4
  %124 = or i32 %123, 8388608
  %125 = shl i32 %124, 3
  store i32 %125, ptr %5, align 4
  %126 = load i32, ptr %8, align 4
  %127 = load i32, ptr %7, align 4
  %128 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %126, i32 %127)
  %129 = extractvalue { i32, i1 } %128, 1
  br i1 %129, label %133, label %134

130:                                              ; preds = %106
  %131 = call fastcc i32 @compiler_rt.common.normalize__anon_3624(ptr nonnull align 4 %5)
  store i32 %131, ptr %7, align 4
  br label %112

132:                                              ; preds = %106
  br label %112

133:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

134:                                              ; preds = %112
  %135 = extractvalue { i32, i1 } %128, 0
  %136 = icmp sge i32 %135, 0
  br i1 %136, label %139, label %140

137:                                              ; preds = %139
  %138 = icmp ne i32 %135, 0
  br i1 %138, label %142, label %144

139:                                              ; preds = %134
  br label %137

140:                                              ; preds = %134
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

141:                                              ; preds = %145, %144
  br i1 %119, label %175, label %180

142:                                              ; preds = %137
  %143 = icmp ult i32 %135, 32
  br i1 %143, label %146, label %150

144:                                              ; preds = %137
  br label %141

145:                                              ; preds = %151, %150
  br label %141

146:                                              ; preds = %142
  %147 = load i32, ptr %5, align 4
  %148 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 32, i32 %135)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %158, label %159

150:                                              ; preds = %142
  store i32 1, ptr %5, align 4
  br label %145

151:                                              ; preds = %171, %170
  %152 = phi i32 [ 1, %170 ], [ 0, %171 ]
  %153 = load i32, ptr %5, align 4
  %154 = trunc i32 %135 to i5
  %155 = zext i5 %154 to i32
  %156 = lshr i32 %153, %155
  %157 = or i32 %156, %152
  store i32 %157, ptr %5, align 4
  br label %145

158:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

159:                                              ; preds = %146
  %160 = extractvalue { i32, i1 } %148, 0
  %161 = sub i32 31, %160
  %162 = icmp ule i32 %161, 31
  br i1 %162, label %168, label %169

163:                                              ; preds = %168
  %164 = trunc i32 %160 to i5
  %165 = zext i5 %164 to i32
  %166 = shl i32 %147, %165
  %167 = icmp ne i32 %166, 0
  br i1 %167, label %170, label %171

168:                                              ; preds = %159
  br label %163

169:                                              ; preds = %159
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

170:                                              ; preds = %163
  br label %151

171:                                              ; preds = %163
  br label %151

172:                                              ; preds = %228, %195
  %173 = load i32, ptr %8, align 4
  %174 = icmp sge i32 %173, 255
  br i1 %174, label %245, label %248

175:                                              ; preds = %141
  %176 = load i32, ptr %6, align 4
  %177 = load i32, ptr %5, align 4
  %178 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %176, i32 %177)
  %179 = extractvalue { i32, i1 } %178, 1
  br i1 %179, label %185, label %186

180:                                              ; preds = %141
  %181 = load i32, ptr %6, align 4
  %182 = load i32, ptr %5, align 4
  %183 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %181, i32 %182)
  %184 = extractvalue { i32, i1 } %183, 1
  br i1 %184, label %222, label %223

185:                                              ; preds = %175
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

186:                                              ; preds = %175
  %187 = extractvalue { i32, i1 } %178, 0
  store i32 %187, ptr %6, align 4
  %188 = load i32, ptr %6, align 4
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %193, label %194

190:                                              ; preds = %194
  %191 = load i32, ptr %6, align 4
  %192 = icmp ult i32 %191, 67108864
  br i1 %192, label %196, label %203

193:                                              ; preds = %186
  br label %23

194:                                              ; preds = %186
  br label %190

195:                                              ; preds = %220, %203
  br label %172

196:                                              ; preds = %190
  %197 = load i32, ptr %6, align 4
  %198 = call i32 @llvm.ctlz.i32(i32 %197, i1 false)
  %199 = trunc i32 %198 to i6
  %200 = zext i6 %199 to i32
  %201 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %200, i32 5)
  %202 = extractvalue { i32, i1 } %201, 1
  br i1 %202, label %204, label %205

203:                                              ; preds = %190
  br label %195

204:                                              ; preds = %196
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

205:                                              ; preds = %196
  %206 = extractvalue { i32, i1 } %201, 0
  %207 = load i32, ptr %6, align 4
  %208 = sub i32 31, %206
  %209 = icmp ule i32 %208, 31
  br i1 %209, label %217, label %218

210:                                              ; preds = %217
  %211 = trunc i32 %206 to i5
  %212 = zext i5 %211 to i32
  %213 = shl i32 %207, %212
  store i32 %213, ptr %6, align 4
  %214 = load i32, ptr %8, align 4
  %215 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %214, i32 %206)
  %216 = extractvalue { i32, i1 } %215, 1
  br i1 %216, label %219, label %220

217:                                              ; preds = %205
  br label %210

218:                                              ; preds = %205
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

219:                                              ; preds = %210
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

220:                                              ; preds = %210
  %221 = extractvalue { i32, i1 } %215, 0
  store i32 %221, ptr %8, align 4
  br label %195

222:                                              ; preds = %180
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

223:                                              ; preds = %180
  %224 = extractvalue { i32, i1 } %183, 0
  store i32 %224, ptr %6, align 4
  %225 = load i32, ptr %6, align 4
  %226 = and i32 %225, 134217728
  %227 = icmp ne i32 %226, 0
  br i1 %227, label %229, label %238

228:                                              ; preds = %240, %238
  br label %172

229:                                              ; preds = %223
  %230 = load i32, ptr %6, align 4
  %231 = and i32 %230, 1
  %232 = load i32, ptr %6, align 4
  %233 = lshr i32 %232, 1
  %234 = or i32 %233, %231
  store i32 %234, ptr %6, align 4
  %235 = load i32, ptr %8, align 4
  %236 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %235, i32 1)
  %237 = extractvalue { i32, i1 } %236, 1
  br i1 %237, label %239, label %240

238:                                              ; preds = %223
  br label %228

239:                                              ; preds = %229
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

240:                                              ; preds = %229
  %241 = extractvalue { i32, i1 } %236, 0
  store i32 %241, ptr %8, align 4
  br label %228

242:                                              ; preds = %248
  %243 = load i32, ptr %8, align 4
  %244 = icmp sle i32 %243, 0
  br i1 %244, label %258, label %263

245:                                              ; preds = %172
  %246 = or i32 2139095040, %114
  %247 = bitcast i32 %246 to float
  br label %23

248:                                              ; preds = %172
  br label %242

249:                                              ; preds = %263
  %250 = load i32, ptr %6, align 4
  %251 = and i32 %250, 7
  %252 = load i32, ptr %6, align 4
  %253 = lshr i32 %252, 3
  %254 = and i32 %253, 8388607
  store i32 %254, ptr %4, align 4
  %255 = load i32, ptr %4, align 4
  %256 = load i32, ptr %8, align 4
  %257 = icmp sge i32 %256, 0
  br i1 %257, label %284, label %285

258:                                              ; preds = %242
  %259 = load i32, ptr %6, align 4
  %260 = load i32, ptr %8, align 4
  %261 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %260)
  %262 = extractvalue { i32, i1 } %261, 1
  br i1 %262, label %264, label %265

263:                                              ; preds = %242
  br label %249

264:                                              ; preds = %258
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

265:                                              ; preds = %258
  %266 = extractvalue { i32, i1 } %261, 0
  %267 = sub i32 31, %266
  %268 = icmp ule i32 %267, 31
  br i1 %268, label %276, label %277

269:                                              ; preds = %276
  %270 = trunc i32 %266 to i5
  %271 = zext i5 %270 to i32
  %272 = lshr i32 %259, %271
  store i32 %272, ptr %6, align 4
  %273 = load i32, ptr %6, align 4
  %274 = or i32 %114, %273
  %275 = bitcast i32 %274 to float
  br label %23

276:                                              ; preds = %265
  br label %269

277:                                              ; preds = %265
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

278:                                              ; preds = %284
  %279 = shl i32 %256, 23
  %280 = or i32 %255, %279
  store i32 %280, ptr %4, align 4
  %281 = load i32, ptr %4, align 4
  %282 = or i32 %281, %114
  store i32 %282, ptr %4, align 4
  %283 = icmp ugt i32 %251, 4
  br i1 %283, label %288, label %292

284:                                              ; preds = %249
  br label %278

285:                                              ; preds = %249
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @84)
  unreachable

286:                                              ; preds = %294, %292
  %287 = icmp eq i32 %251, 4
  br i1 %287, label %299, label %305

288:                                              ; preds = %278
  %289 = load i32, ptr %4, align 4
  %290 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %289, i32 1)
  %291 = extractvalue { i32, i1 } %290, 1
  br i1 %291, label %293, label %294

292:                                              ; preds = %278
  br label %286

293:                                              ; preds = %288
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

294:                                              ; preds = %288
  %295 = extractvalue { i32, i1 } %290, 0
  store i32 %295, ptr %4, align 4
  br label %286

296:                                              ; preds = %307, %305
  %297 = load i32, ptr %4, align 4
  %298 = bitcast i32 %297 to float
  br label %23

299:                                              ; preds = %286
  %300 = load i32, ptr %4, align 4
  %301 = load i32, ptr %4, align 4
  %302 = and i32 %301, 1
  %303 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %300, i32 %302)
  %304 = extractvalue { i32, i1 } %303, 1
  br i1 %304, label %306, label %307

305:                                              ; preds = %286
  br label %296

306:                                              ; preds = %299
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

307:                                              ; preds = %299
  %308 = extractvalue { i32, i1 } %303, 0
  store i32 %308, ptr %4, align 4
  br label %296
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3624(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = load i32, ptr %0, align 4
  %3 = call i32 @llvm.ctlz.i32(i32 %2, i1 false)
  %4 = trunc i32 %3 to i6
  %5 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %4, i6 8)
  %6 = extractvalue { i6, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i6, i1 } %5, 0
  %10 = load i32, ptr %0, align 4
  %11 = sub i6 31, %9
  %12 = icmp ule i6 %11, 31
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i6 %9 to i5
  %15 = zext i5 %14 to i32
  %16 = shl i32 %10, %15
  store i32 %16, ptr %0, align 4
  %17 = zext i6 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @150)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__adddf3(double %0, double %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca double, align 8
  store double 0x7FF0000000000001, ptr %11, align 8
  %12 = load double, ptr %11, align 8
  %13 = bitcast double %12 to i64
  %14 = or i64 %13, 2251799813685248
  %15 = bitcast double %0 to i64
  store i64 %15, ptr %10, align 8
  %16 = bitcast double %1 to i64
  store i64 %16, ptr %9, align 8
  %17 = load i64, ptr %10, align 8
  %18 = and i64 %17, 9223372036854775807
  %19 = load i64, ptr %9, align 8
  %20 = and i64 %19, 9223372036854775807
  %21 = sub i64 %18, 1
  %22 = icmp uge i64 %21, 9218868437227405311
  br i1 %22, label %29, label %30

23:                                               ; preds = %299, %271, %247, %195, %77, %75, %70, %63, %60, %58, %45, %38
  %24 = phi double [ %41, %38 ], [ %48, %45 ], [ %59, %58 ], [ %0, %60 ], [ %1, %63 ], [ %74, %70 ], [ %1, %75 ], [ %0, %77 ], [ 0.000000e+00, %195 ], [ %249, %247 ], [ %277, %271 ], [ %301, %299 ]
  ret double %24

25:                                               ; preds = %76, %35
  %26 = icmp ugt i64 %20, %18
  br i1 %26, label %85, label %88

27:                                               ; preds = %30, %29
  %28 = phi i1 [ true, %29 ], [ %32, %30 ]
  br i1 %28, label %33, label %35

29:                                               ; preds = %2
  br label %27

30:                                               ; preds = %2
  %31 = sub i64 %20, 1
  %32 = icmp uge i64 %31, 9218868437227405311
  br label %27

33:                                               ; preds = %27
  %34 = icmp ugt i64 %18, 9218868437227405312
  br i1 %34, label %38, label %42

35:                                               ; preds = %27
  br label %25

36:                                               ; preds = %42
  %37 = icmp ugt i64 %20, 9218868437227405312
  br i1 %37, label %45, label %49

38:                                               ; preds = %33
  %39 = bitcast double %0 to i64
  %40 = or i64 %39, 2251799813685248
  %41 = bitcast i64 %40 to double
  br label %23

42:                                               ; preds = %33
  br label %36

43:                                               ; preds = %49
  %44 = icmp eq i64 %18, 9218868437227405312
  br i1 %44, label %52, label %57

45:                                               ; preds = %36
  %46 = bitcast double %1 to i64
  %47 = or i64 %46, 2251799813685248
  %48 = bitcast i64 %47 to double
  br label %23

49:                                               ; preds = %36
  br label %43

50:                                               ; preds = %57
  %51 = icmp eq i64 %20, 9218868437227405312
  br i1 %51, label %63, label %64

52:                                               ; preds = %43
  %53 = bitcast double %0 to i64
  %54 = bitcast double %1 to i64
  %55 = xor i64 %53, %54
  %56 = icmp eq i64 %55, -9223372036854775808
  br i1 %56, label %58, label %60

57:                                               ; preds = %43
  br label %50

58:                                               ; preds = %52
  %59 = bitcast i64 %14 to double
  br label %23

60:                                               ; preds = %52
  br label %23

61:                                               ; preds = %64
  %62 = icmp eq i64 %18, 0
  br i1 %62, label %67, label %69

63:                                               ; preds = %50
  br label %23

64:                                               ; preds = %50
  br label %61

65:                                               ; preds = %69
  %66 = icmp eq i64 %20, 0
  br i1 %66, label %77, label %78

67:                                               ; preds = %61
  %68 = icmp eq i64 %20, 0
  br i1 %68, label %70, label %75

69:                                               ; preds = %61
  br label %65

70:                                               ; preds = %67
  %71 = bitcast double %0 to i64
  %72 = bitcast double %1 to i64
  %73 = and i64 %71, %72
  %74 = bitcast i64 %73 to double
  br label %23

75:                                               ; preds = %67
  br label %23

76:                                               ; preds = %78
  br label %25

77:                                               ; preds = %65
  br label %23

78:                                               ; preds = %65
  br label %76

79:                                               ; preds = %88, %85
  %80 = load i64, ptr %10, align 8
  %81 = lshr i64 %80, 52
  %82 = and i64 %81, 2047
  %83 = sub i64 2147483647, %82
  %84 = icmp ule i64 %83, 2147483647
  br i1 %84, label %96, label %97

85:                                               ; preds = %25
  %86 = load i64, ptr %10, align 8
  %87 = load i64, ptr %9, align 8
  store i64 %87, ptr %10, align 8
  store i64 %86, ptr %9, align 8
  br label %79

88:                                               ; preds = %25
  br label %79

89:                                               ; preds = %96
  %90 = trunc i64 %82 to i32
  store i32 %90, ptr %8, align 4
  %91 = load i64, ptr %9, align 8
  %92 = lshr i64 %91, 52
  %93 = and i64 %92, 2047
  %94 = sub i64 2147483647, %93
  %95 = icmp ule i64 %94, 2147483647
  br i1 %95, label %106, label %107

96:                                               ; preds = %79
  br label %89

97:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

98:                                               ; preds = %106
  %99 = trunc i64 %93 to i32
  store i32 %99, ptr %7, align 4
  %100 = load i64, ptr %10, align 8
  %101 = and i64 %100, 4503599627370495
  store i64 %101, ptr %6, align 8
  %102 = load i64, ptr %9, align 8
  %103 = and i64 %102, 4503599627370495
  store i64 %103, ptr %5, align 8
  %104 = load i32, ptr %8, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %111, label %113

106:                                              ; preds = %89
  br label %98

107:                                              ; preds = %89
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

108:                                              ; preds = %113, %111
  %109 = load i32, ptr %7, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %132, label %134

111:                                              ; preds = %98
  %112 = call fastcc i32 @compiler_rt.common.normalize__anon_3625(ptr nonnull align 8 %6)
  store i32 %112, ptr %8, align 4
  br label %108

113:                                              ; preds = %98
  br label %108

114:                                              ; preds = %134, %132
  %115 = load i64, ptr %10, align 8
  %116 = and i64 %115, -9223372036854775808
  %117 = load i64, ptr %10, align 8
  %118 = load i64, ptr %9, align 8
  %119 = xor i64 %117, %118
  %120 = and i64 %119, -9223372036854775808
  %121 = icmp ne i64 %120, 0
  %122 = load i64, ptr %6, align 8
  %123 = or i64 %122, 4503599627370496
  %124 = shl i64 %123, 3
  store i64 %124, ptr %6, align 8
  %125 = load i64, ptr %5, align 8
  %126 = or i64 %125, 4503599627370496
  %127 = shl i64 %126, 3
  store i64 %127, ptr %5, align 8
  %128 = load i32, ptr %8, align 4
  %129 = load i32, ptr %7, align 4
  %130 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %128, i32 %129)
  %131 = extractvalue { i32, i1 } %130, 1
  br i1 %131, label %135, label %136

132:                                              ; preds = %108
  %133 = call fastcc i32 @compiler_rt.common.normalize__anon_3625(ptr nonnull align 8 %5)
  store i32 %133, ptr %7, align 4
  br label %114

134:                                              ; preds = %108
  br label %114

135:                                              ; preds = %114
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

136:                                              ; preds = %114
  %137 = extractvalue { i32, i1 } %130, 0
  %138 = icmp sge i32 %137, 0
  br i1 %138, label %141, label %142

139:                                              ; preds = %141
  %140 = icmp ne i32 %137, 0
  br i1 %140, label %144, label %146

141:                                              ; preds = %136
  br label %139

142:                                              ; preds = %136
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

143:                                              ; preds = %147, %146
  br i1 %121, label %177, label %182

144:                                              ; preds = %139
  %145 = icmp ult i32 %137, 64
  br i1 %145, label %148, label %152

146:                                              ; preds = %139
  br label %143

147:                                              ; preds = %153, %152
  br label %143

148:                                              ; preds = %144
  %149 = load i64, ptr %5, align 8
  %150 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 64, i32 %137)
  %151 = extractvalue { i32, i1 } %150, 1
  br i1 %151, label %160, label %161

152:                                              ; preds = %144
  store i64 1, ptr %5, align 8
  br label %147

153:                                              ; preds = %173, %172
  %154 = phi i64 [ 1, %172 ], [ 0, %173 ]
  %155 = load i64, ptr %5, align 8
  %156 = trunc i32 %137 to i6
  %157 = zext i6 %156 to i64
  %158 = lshr i64 %155, %157
  %159 = or i64 %158, %154
  store i64 %159, ptr %5, align 8
  br label %147

160:                                              ; preds = %148
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

161:                                              ; preds = %148
  %162 = extractvalue { i32, i1 } %150, 0
  %163 = sub i32 63, %162
  %164 = icmp ule i32 %163, 63
  br i1 %164, label %170, label %171

165:                                              ; preds = %170
  %166 = trunc i32 %162 to i6
  %167 = zext i6 %166 to i64
  %168 = shl i64 %149, %167
  %169 = icmp ne i64 %168, 0
  br i1 %169, label %172, label %173

170:                                              ; preds = %161
  br label %165

171:                                              ; preds = %161
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

172:                                              ; preds = %165
  br label %153

173:                                              ; preds = %165
  br label %153

174:                                              ; preds = %230, %197
  %175 = load i32, ptr %8, align 4
  %176 = icmp sge i32 %175, 2047
  br i1 %176, label %247, label %250

177:                                              ; preds = %143
  %178 = load i64, ptr %6, align 8
  %179 = load i64, ptr %5, align 8
  %180 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %178, i64 %179)
  %181 = extractvalue { i64, i1 } %180, 1
  br i1 %181, label %187, label %188

182:                                              ; preds = %143
  %183 = load i64, ptr %6, align 8
  %184 = load i64, ptr %5, align 8
  %185 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %183, i64 %184)
  %186 = extractvalue { i64, i1 } %185, 1
  br i1 %186, label %224, label %225

187:                                              ; preds = %177
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

188:                                              ; preds = %177
  %189 = extractvalue { i64, i1 } %180, 0
  store i64 %189, ptr %6, align 8
  %190 = load i64, ptr %6, align 8
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %195, label %196

192:                                              ; preds = %196
  %193 = load i64, ptr %6, align 8
  %194 = icmp ult i64 %193, 36028797018963968
  br i1 %194, label %198, label %205

195:                                              ; preds = %188
  br label %23

196:                                              ; preds = %188
  br label %192

197:                                              ; preds = %222, %205
  br label %174

198:                                              ; preds = %192
  %199 = load i64, ptr %6, align 8
  %200 = call i64 @llvm.ctlz.i64(i64 %199, i1 false)
  %201 = trunc i64 %200 to i7
  %202 = zext i7 %201 to i32
  %203 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %202, i32 8)
  %204 = extractvalue { i32, i1 } %203, 1
  br i1 %204, label %206, label %207

205:                                              ; preds = %192
  br label %197

206:                                              ; preds = %198
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

207:                                              ; preds = %198
  %208 = extractvalue { i32, i1 } %203, 0
  %209 = load i64, ptr %6, align 8
  %210 = sub i32 63, %208
  %211 = icmp ule i32 %210, 63
  br i1 %211, label %219, label %220

212:                                              ; preds = %219
  %213 = trunc i32 %208 to i6
  %214 = zext i6 %213 to i64
  %215 = shl i64 %209, %214
  store i64 %215, ptr %6, align 8
  %216 = load i32, ptr %8, align 4
  %217 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %216, i32 %208)
  %218 = extractvalue { i32, i1 } %217, 1
  br i1 %218, label %221, label %222

219:                                              ; preds = %207
  br label %212

220:                                              ; preds = %207
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

221:                                              ; preds = %212
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

222:                                              ; preds = %212
  %223 = extractvalue { i32, i1 } %217, 0
  store i32 %223, ptr %8, align 4
  br label %197

224:                                              ; preds = %182
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

225:                                              ; preds = %182
  %226 = extractvalue { i64, i1 } %185, 0
  store i64 %226, ptr %6, align 8
  %227 = load i64, ptr %6, align 8
  %228 = and i64 %227, 72057594037927936
  %229 = icmp ne i64 %228, 0
  br i1 %229, label %231, label %240

230:                                              ; preds = %242, %240
  br label %174

231:                                              ; preds = %225
  %232 = load i64, ptr %6, align 8
  %233 = and i64 %232, 1
  %234 = load i64, ptr %6, align 8
  %235 = lshr i64 %234, 1
  %236 = or i64 %235, %233
  store i64 %236, ptr %6, align 8
  %237 = load i32, ptr %8, align 4
  %238 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %237, i32 1)
  %239 = extractvalue { i32, i1 } %238, 1
  br i1 %239, label %241, label %242

240:                                              ; preds = %225
  br label %230

241:                                              ; preds = %231
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

242:                                              ; preds = %231
  %243 = extractvalue { i32, i1 } %238, 0
  store i32 %243, ptr %8, align 4
  br label %230

244:                                              ; preds = %250
  %245 = load i32, ptr %8, align 4
  %246 = icmp sle i32 %245, 0
  br i1 %246, label %260, label %265

247:                                              ; preds = %174
  %248 = or i64 9218868437227405312, %116
  %249 = bitcast i64 %248 to double
  br label %23

250:                                              ; preds = %174
  br label %244

251:                                              ; preds = %265
  %252 = load i64, ptr %6, align 8
  %253 = and i64 %252, 7
  %254 = load i64, ptr %6, align 8
  %255 = lshr i64 %254, 3
  %256 = and i64 %255, 4503599627370495
  store i64 %256, ptr %4, align 8
  %257 = load i64, ptr %4, align 8
  %258 = load i32, ptr %8, align 4
  %259 = icmp sge i32 %258, 0
  br i1 %259, label %287, label %288

260:                                              ; preds = %244
  %261 = load i64, ptr %6, align 8
  %262 = load i32, ptr %8, align 4
  %263 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %262)
  %264 = extractvalue { i32, i1 } %263, 1
  br i1 %264, label %266, label %267

265:                                              ; preds = %244
  br label %251

266:                                              ; preds = %260
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

267:                                              ; preds = %260
  %268 = extractvalue { i32, i1 } %263, 0
  %269 = sub i32 63, %268
  %270 = icmp ule i32 %269, 63
  br i1 %270, label %278, label %279

271:                                              ; preds = %278
  %272 = trunc i32 %268 to i6
  %273 = zext i6 %272 to i64
  %274 = lshr i64 %261, %273
  store i64 %274, ptr %6, align 8
  %275 = load i64, ptr %6, align 8
  %276 = or i64 %116, %275
  %277 = bitcast i64 %276 to double
  br label %23

278:                                              ; preds = %267
  br label %271

279:                                              ; preds = %267
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

280:                                              ; preds = %287
  %281 = sext i32 %258 to i64
  %282 = shl i64 %281, 52
  %283 = or i64 %257, %282
  store i64 %283, ptr %4, align 8
  %284 = load i64, ptr %4, align 8
  %285 = or i64 %284, %116
  store i64 %285, ptr %4, align 8
  %286 = icmp ugt i64 %253, 4
  br i1 %286, label %291, label %295

287:                                              ; preds = %251
  br label %280

288:                                              ; preds = %251
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @85)
  unreachable

289:                                              ; preds = %297, %295
  %290 = icmp eq i64 %253, 4
  br i1 %290, label %302, label %308

291:                                              ; preds = %280
  %292 = load i64, ptr %4, align 8
  %293 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %292, i64 1)
  %294 = extractvalue { i64, i1 } %293, 1
  br i1 %294, label %296, label %297

295:                                              ; preds = %280
  br label %289

296:                                              ; preds = %291
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

297:                                              ; preds = %291
  %298 = extractvalue { i64, i1 } %293, 0
  store i64 %298, ptr %4, align 8
  br label %289

299:                                              ; preds = %310, %308
  %300 = load i64, ptr %4, align 8
  %301 = bitcast i64 %300 to double
  br label %23

302:                                              ; preds = %289
  %303 = load i64, ptr %4, align 8
  %304 = load i64, ptr %4, align 8
  %305 = and i64 %304, 1
  %306 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %303, i64 %305)
  %307 = extractvalue { i64, i1 } %306, 1
  br i1 %307, label %309, label %310

308:                                              ; preds = %289
  br label %299

309:                                              ; preds = %302
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

310:                                              ; preds = %302
  %311 = extractvalue { i64, i1 } %306, 0
  store i64 %311, ptr %4, align 8
  br label %299
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3625(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i64, ptr %0, align 8
  %3 = call i64 @llvm.ctlz.i64(i64 %2, i1 false)
  %4 = trunc i64 %3 to i7
  %5 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %4, i7 11)
  %6 = extractvalue { i7, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i7, i1 } %5, 0
  %10 = load i64, ptr %0, align 8
  %11 = sub i7 63, %9
  %12 = icmp ule i7 %11, 63
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i7 %9 to i6
  %15 = zext i6 %14 to i64
  %16 = shl i64 %10, %15
  store i64 %16, ptr %0, align 8
  %17 = zext i7 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @151)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__addtf3(fp128 %0, fp128 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i128, align 16
  %5 = alloca i128, align 16
  %6 = alloca i128, align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i128, align 16
  %10 = alloca i128, align 16
  %11 = alloca fp128, align 16
  store fp128 0xL00000000000000017FFF000000000000, ptr %11, align 16
  %12 = load fp128, ptr %11, align 16
  %13 = bitcast fp128 %12 to i128
  %14 = or i128 %13, 2596148429267413814265248164610048
  %15 = bitcast fp128 %0 to i128
  store i128 %15, ptr %10, align 16
  %16 = bitcast fp128 %1 to i128
  store i128 %16, ptr %9, align 16
  %17 = load i128, ptr %10, align 16
  %18 = and i128 %17, 170141183460469231731687303715884105727
  %19 = load i128, ptr %9, align 16
  %20 = and i128 %19, 170141183460469231731687303715884105727
  %21 = sub i128 %18, 1
  %22 = icmp uge i128 %21, 170135991163610696904058773219554885631
  br i1 %22, label %29, label %30

23:                                               ; preds = %299, %271, %247, %195, %77, %75, %70, %63, %60, %58, %45, %38
  %24 = phi fp128 [ %41, %38 ], [ %48, %45 ], [ %59, %58 ], [ %0, %60 ], [ %1, %63 ], [ %74, %70 ], [ %1, %75 ], [ %0, %77 ], [ 0xL00000000000000000000000000000000, %195 ], [ %249, %247 ], [ %277, %271 ], [ %301, %299 ]
  ret fp128 %24

25:                                               ; preds = %76, %35
  %26 = icmp ugt i128 %20, %18
  br i1 %26, label %85, label %88

27:                                               ; preds = %30, %29
  %28 = phi i1 [ true, %29 ], [ %32, %30 ]
  br i1 %28, label %33, label %35

29:                                               ; preds = %2
  br label %27

30:                                               ; preds = %2
  %31 = sub i128 %20, 1
  %32 = icmp uge i128 %31, 170135991163610696904058773219554885631
  br label %27

33:                                               ; preds = %27
  %34 = icmp ugt i128 %18, 170135991163610696904058773219554885632
  br i1 %34, label %38, label %42

35:                                               ; preds = %27
  br label %25

36:                                               ; preds = %42
  %37 = icmp ugt i128 %20, 170135991163610696904058773219554885632
  br i1 %37, label %45, label %49

38:                                               ; preds = %33
  %39 = bitcast fp128 %0 to i128
  %40 = or i128 %39, 2596148429267413814265248164610048
  %41 = bitcast i128 %40 to fp128
  br label %23

42:                                               ; preds = %33
  br label %36

43:                                               ; preds = %49
  %44 = icmp eq i128 %18, 170135991163610696904058773219554885632
  br i1 %44, label %52, label %57

45:                                               ; preds = %36
  %46 = bitcast fp128 %1 to i128
  %47 = or i128 %46, 2596148429267413814265248164610048
  %48 = bitcast i128 %47 to fp128
  br label %23

49:                                               ; preds = %36
  br label %43

50:                                               ; preds = %57
  %51 = icmp eq i128 %20, 170135991163610696904058773219554885632
  br i1 %51, label %63, label %64

52:                                               ; preds = %43
  %53 = bitcast fp128 %0 to i128
  %54 = bitcast fp128 %1 to i128
  %55 = xor i128 %53, %54
  %56 = icmp eq i128 %55, -170141183460469231731687303715884105728
  br i1 %56, label %58, label %60

57:                                               ; preds = %43
  br label %50

58:                                               ; preds = %52
  %59 = bitcast i128 %14 to fp128
  br label %23

60:                                               ; preds = %52
  br label %23

61:                                               ; preds = %64
  %62 = icmp eq i128 %18, 0
  br i1 %62, label %67, label %69

63:                                               ; preds = %50
  br label %23

64:                                               ; preds = %50
  br label %61

65:                                               ; preds = %69
  %66 = icmp eq i128 %20, 0
  br i1 %66, label %77, label %78

67:                                               ; preds = %61
  %68 = icmp eq i128 %20, 0
  br i1 %68, label %70, label %75

69:                                               ; preds = %61
  br label %65

70:                                               ; preds = %67
  %71 = bitcast fp128 %0 to i128
  %72 = bitcast fp128 %1 to i128
  %73 = and i128 %71, %72
  %74 = bitcast i128 %73 to fp128
  br label %23

75:                                               ; preds = %67
  br label %23

76:                                               ; preds = %78
  br label %25

77:                                               ; preds = %65
  br label %23

78:                                               ; preds = %65
  br label %76

79:                                               ; preds = %88, %85
  %80 = load i128, ptr %10, align 16
  %81 = lshr i128 %80, 112
  %82 = and i128 %81, 32767
  %83 = sub i128 2147483647, %82
  %84 = icmp ule i128 %83, 2147483647
  br i1 %84, label %96, label %97

85:                                               ; preds = %25
  %86 = load i128, ptr %10, align 16
  %87 = load i128, ptr %9, align 16
  store i128 %87, ptr %10, align 16
  store i128 %86, ptr %9, align 16
  br label %79

88:                                               ; preds = %25
  br label %79

89:                                               ; preds = %96
  %90 = trunc i128 %82 to i32
  store i32 %90, ptr %8, align 4
  %91 = load i128, ptr %9, align 16
  %92 = lshr i128 %91, 112
  %93 = and i128 %92, 32767
  %94 = sub i128 2147483647, %93
  %95 = icmp ule i128 %94, 2147483647
  br i1 %95, label %106, label %107

96:                                               ; preds = %79
  br label %89

97:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

98:                                               ; preds = %106
  %99 = trunc i128 %93 to i32
  store i32 %99, ptr %7, align 4
  %100 = load i128, ptr %10, align 16
  %101 = and i128 %100, 5192296858534827628530496329220095
  store i128 %101, ptr %6, align 16
  %102 = load i128, ptr %9, align 16
  %103 = and i128 %102, 5192296858534827628530496329220095
  store i128 %103, ptr %5, align 16
  %104 = load i32, ptr %8, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %111, label %113

106:                                              ; preds = %89
  br label %98

107:                                              ; preds = %89
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

108:                                              ; preds = %113, %111
  %109 = load i32, ptr %7, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %132, label %134

111:                                              ; preds = %98
  %112 = call fastcc i32 @compiler_rt.common.normalize__anon_3626(ptr nonnull align 16 %6)
  store i32 %112, ptr %8, align 4
  br label %108

113:                                              ; preds = %98
  br label %108

114:                                              ; preds = %134, %132
  %115 = load i128, ptr %10, align 16
  %116 = and i128 %115, -170141183460469231731687303715884105728
  %117 = load i128, ptr %10, align 16
  %118 = load i128, ptr %9, align 16
  %119 = xor i128 %117, %118
  %120 = and i128 %119, -170141183460469231731687303715884105728
  %121 = icmp ne i128 %120, 0
  %122 = load i128, ptr %6, align 16
  %123 = or i128 %122, 5192296858534827628530496329220096
  %124 = shl i128 %123, 3
  store i128 %124, ptr %6, align 16
  %125 = load i128, ptr %5, align 16
  %126 = or i128 %125, 5192296858534827628530496329220096
  %127 = shl i128 %126, 3
  store i128 %127, ptr %5, align 16
  %128 = load i32, ptr %8, align 4
  %129 = load i32, ptr %7, align 4
  %130 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %128, i32 %129)
  %131 = extractvalue { i32, i1 } %130, 1
  br i1 %131, label %135, label %136

132:                                              ; preds = %108
  %133 = call fastcc i32 @compiler_rt.common.normalize__anon_3626(ptr nonnull align 16 %5)
  store i32 %133, ptr %7, align 4
  br label %114

134:                                              ; preds = %108
  br label %114

135:                                              ; preds = %114
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

136:                                              ; preds = %114
  %137 = extractvalue { i32, i1 } %130, 0
  %138 = icmp sge i32 %137, 0
  br i1 %138, label %141, label %142

139:                                              ; preds = %141
  %140 = icmp ne i32 %137, 0
  br i1 %140, label %144, label %146

141:                                              ; preds = %136
  br label %139

142:                                              ; preds = %136
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

143:                                              ; preds = %147, %146
  br i1 %121, label %177, label %182

144:                                              ; preds = %139
  %145 = icmp ult i32 %137, 128
  br i1 %145, label %148, label %152

146:                                              ; preds = %139
  br label %143

147:                                              ; preds = %153, %152
  br label %143

148:                                              ; preds = %144
  %149 = load i128, ptr %5, align 16
  %150 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 128, i32 %137)
  %151 = extractvalue { i32, i1 } %150, 1
  br i1 %151, label %160, label %161

152:                                              ; preds = %144
  store i128 1, ptr %5, align 16
  br label %147

153:                                              ; preds = %173, %172
  %154 = phi i128 [ 1, %172 ], [ 0, %173 ]
  %155 = load i128, ptr %5, align 16
  %156 = trunc i32 %137 to i7
  %157 = zext i7 %156 to i128
  %158 = lshr i128 %155, %157
  %159 = or i128 %158, %154
  store i128 %159, ptr %5, align 16
  br label %147

160:                                              ; preds = %148
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

161:                                              ; preds = %148
  %162 = extractvalue { i32, i1 } %150, 0
  %163 = sub i32 127, %162
  %164 = icmp ule i32 %163, 127
  br i1 %164, label %170, label %171

165:                                              ; preds = %170
  %166 = trunc i32 %162 to i7
  %167 = zext i7 %166 to i128
  %168 = shl i128 %149, %167
  %169 = icmp ne i128 %168, 0
  br i1 %169, label %172, label %173

170:                                              ; preds = %161
  br label %165

171:                                              ; preds = %161
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

172:                                              ; preds = %165
  br label %153

173:                                              ; preds = %165
  br label %153

174:                                              ; preds = %230, %197
  %175 = load i32, ptr %8, align 4
  %176 = icmp sge i32 %175, 32767
  br i1 %176, label %247, label %250

177:                                              ; preds = %143
  %178 = load i128, ptr %6, align 16
  %179 = load i128, ptr %5, align 16
  %180 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 %178, i128 %179)
  %181 = extractvalue { i128, i1 } %180, 1
  br i1 %181, label %187, label %188

182:                                              ; preds = %143
  %183 = load i128, ptr %6, align 16
  %184 = load i128, ptr %5, align 16
  %185 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %183, i128 %184)
  %186 = extractvalue { i128, i1 } %185, 1
  br i1 %186, label %224, label %225

187:                                              ; preds = %177
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

188:                                              ; preds = %177
  %189 = extractvalue { i128, i1 } %180, 0
  store i128 %189, ptr %6, align 16
  %190 = load i128, ptr %6, align 16
  %191 = icmp eq i128 %190, 0
  br i1 %191, label %195, label %196

192:                                              ; preds = %196
  %193 = load i128, ptr %6, align 16
  %194 = icmp ult i128 %193, 41538374868278621028243970633760768
  br i1 %194, label %198, label %205

195:                                              ; preds = %188
  br label %23

196:                                              ; preds = %188
  br label %192

197:                                              ; preds = %222, %205
  br label %174

198:                                              ; preds = %192
  %199 = load i128, ptr %6, align 16
  %200 = call i128 @llvm.ctlz.i128(i128 %199, i1 false)
  %201 = trunc i128 %200 to i8
  %202 = zext i8 %201 to i32
  %203 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %202, i32 12)
  %204 = extractvalue { i32, i1 } %203, 1
  br i1 %204, label %206, label %207

205:                                              ; preds = %192
  br label %197

206:                                              ; preds = %198
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

207:                                              ; preds = %198
  %208 = extractvalue { i32, i1 } %203, 0
  %209 = load i128, ptr %6, align 16
  %210 = sub i32 127, %208
  %211 = icmp ule i32 %210, 127
  br i1 %211, label %219, label %220

212:                                              ; preds = %219
  %213 = trunc i32 %208 to i7
  %214 = zext i7 %213 to i128
  %215 = shl i128 %209, %214
  store i128 %215, ptr %6, align 16
  %216 = load i32, ptr %8, align 4
  %217 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %216, i32 %208)
  %218 = extractvalue { i32, i1 } %217, 1
  br i1 %218, label %221, label %222

219:                                              ; preds = %207
  br label %212

220:                                              ; preds = %207
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

221:                                              ; preds = %212
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

222:                                              ; preds = %212
  %223 = extractvalue { i32, i1 } %217, 0
  store i32 %223, ptr %8, align 4
  br label %197

224:                                              ; preds = %182
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

225:                                              ; preds = %182
  %226 = extractvalue { i128, i1 } %185, 0
  store i128 %226, ptr %6, align 16
  %227 = load i128, ptr %6, align 16
  %228 = and i128 %227, 83076749736557242056487941267521536
  %229 = icmp ne i128 %228, 0
  br i1 %229, label %231, label %240

230:                                              ; preds = %242, %240
  br label %174

231:                                              ; preds = %225
  %232 = load i128, ptr %6, align 16
  %233 = and i128 %232, 1
  %234 = load i128, ptr %6, align 16
  %235 = lshr i128 %234, 1
  %236 = or i128 %235, %233
  store i128 %236, ptr %6, align 16
  %237 = load i32, ptr %8, align 4
  %238 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %237, i32 1)
  %239 = extractvalue { i32, i1 } %238, 1
  br i1 %239, label %241, label %242

240:                                              ; preds = %225
  br label %230

241:                                              ; preds = %231
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

242:                                              ; preds = %231
  %243 = extractvalue { i32, i1 } %238, 0
  store i32 %243, ptr %8, align 4
  br label %230

244:                                              ; preds = %250
  %245 = load i32, ptr %8, align 4
  %246 = icmp sle i32 %245, 0
  br i1 %246, label %260, label %265

247:                                              ; preds = %174
  %248 = or i128 170135991163610696904058773219554885632, %116
  %249 = bitcast i128 %248 to fp128
  br label %23

250:                                              ; preds = %174
  br label %244

251:                                              ; preds = %265
  %252 = load i128, ptr %6, align 16
  %253 = and i128 %252, 7
  %254 = load i128, ptr %6, align 16
  %255 = lshr i128 %254, 3
  %256 = and i128 %255, 5192296858534827628530496329220095
  store i128 %256, ptr %4, align 16
  %257 = load i128, ptr %4, align 16
  %258 = load i32, ptr %8, align 4
  %259 = icmp sge i32 %258, 0
  br i1 %259, label %287, label %288

260:                                              ; preds = %244
  %261 = load i128, ptr %6, align 16
  %262 = load i32, ptr %8, align 4
  %263 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %262)
  %264 = extractvalue { i32, i1 } %263, 1
  br i1 %264, label %266, label %267

265:                                              ; preds = %244
  br label %251

266:                                              ; preds = %260
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

267:                                              ; preds = %260
  %268 = extractvalue { i32, i1 } %263, 0
  %269 = sub i32 127, %268
  %270 = icmp ule i32 %269, 127
  br i1 %270, label %278, label %279

271:                                              ; preds = %278
  %272 = trunc i32 %268 to i7
  %273 = zext i7 %272 to i128
  %274 = lshr i128 %261, %273
  store i128 %274, ptr %6, align 16
  %275 = load i128, ptr %6, align 16
  %276 = or i128 %116, %275
  %277 = bitcast i128 %276 to fp128
  br label %23

278:                                              ; preds = %267
  br label %271

279:                                              ; preds = %267
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

280:                                              ; preds = %287
  %281 = sext i32 %258 to i128
  %282 = shl i128 %281, 112
  %283 = or i128 %257, %282
  store i128 %283, ptr %4, align 16
  %284 = load i128, ptr %4, align 16
  %285 = or i128 %284, %116
  store i128 %285, ptr %4, align 16
  %286 = icmp ugt i128 %253, 4
  br i1 %286, label %291, label %295

287:                                              ; preds = %251
  br label %280

288:                                              ; preds = %251
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @86)
  unreachable

289:                                              ; preds = %297, %295
  %290 = icmp eq i128 %253, 4
  br i1 %290, label %302, label %308

291:                                              ; preds = %280
  %292 = load i128, ptr %4, align 16
  %293 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %292, i128 1)
  %294 = extractvalue { i128, i1 } %293, 1
  br i1 %294, label %296, label %297

295:                                              ; preds = %280
  br label %289

296:                                              ; preds = %291
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

297:                                              ; preds = %291
  %298 = extractvalue { i128, i1 } %293, 0
  store i128 %298, ptr %4, align 16
  br label %289

299:                                              ; preds = %310, %308
  %300 = load i128, ptr %4, align 16
  %301 = bitcast i128 %300 to fp128
  br label %23

302:                                              ; preds = %289
  %303 = load i128, ptr %4, align 16
  %304 = load i128, ptr %4, align 16
  %305 = and i128 %304, 1
  %306 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %303, i128 %305)
  %307 = extractvalue { i128, i1 } %306, 1
  br i1 %307, label %309, label %310

308:                                              ; preds = %289
  br label %299

309:                                              ; preds = %302
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

310:                                              ; preds = %302
  %311 = extractvalue { i128, i1 } %306, 0
  store i128 %311, ptr %4, align 16
  br label %299
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3626(ptr nonnull align 16 %0) unnamed_addr #0 {
  %2 = load i128, ptr %0, align 16
  %3 = call i128 @llvm.ctlz.i128(i128 %2, i1 false)
  %4 = trunc i128 %3 to i8
  %5 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %4, i8 15)
  %6 = extractvalue { i8, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i8, i1 } %5, 0
  %10 = load i128, ptr %0, align 16
  %11 = sub i8 127, %9
  %12 = icmp ule i8 %11, 127
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i8 %9 to i7
  %15 = zext i7 %14 to i128
  %16 = shl i128 %10, %15
  store i128 %16, ptr %0, align 16
  %17 = zext i8 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @152)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__addxf3(i80 %0, i80 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i80, align 16
  %5 = alloca i80, align 16
  %6 = alloca i80, align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i80, align 16
  %10 = alloca i80, align 16
  %11 = alloca i80, align 16
  store i80 604455992278286946271232, ptr %11, align 16
  %12 = load i80, ptr %11, align 16
  %13 = or i80 %12, 4611686018427387904
  store i80 %0, ptr %10, align 16
  store i80 %1, ptr %9, align 16
  %14 = load i80, ptr %10, align 16
  %15 = and i80 %14, 604462909807314587353087
  %16 = load i80, ptr %9, align 16
  %17 = and i80 %16, 604462909807314587353087
  %18 = sub i80 %15, 1
  %19 = icmp uge i80 %18, 604453686435277732577279
  br i1 %19, label %26, label %27

20:                                               ; preds = %334, %287, %261, %202, %64, %62, %60, %53, %50, %49, %40, %35
  %21 = phi i80 [ %36, %35 ], [ %41, %40 ], [ %13, %49 ], [ %0, %50 ], [ %1, %53 ], [ %61, %60 ], [ %1, %62 ], [ %0, %64 ], [ 0, %202 ], [ %262, %261 ], [ %289, %287 ], [ %335, %334 ]
  ret i80 %21

22:                                               ; preds = %63, %32
  %23 = icmp ugt i80 %17, %15
  br i1 %23, label %69, label %72

24:                                               ; preds = %27, %26
  %25 = phi i1 [ true, %26 ], [ %29, %27 ]
  br i1 %25, label %30, label %32

26:                                               ; preds = %2
  br label %24

27:                                               ; preds = %2
  %28 = sub i80 %17, 1
  %29 = icmp uge i80 %28, 604453686435277732577279
  br label %24

30:                                               ; preds = %24
  %31 = icmp ugt i80 %15, 604453686435277732577280
  br i1 %31, label %35, label %37

32:                                               ; preds = %24
  br label %22

33:                                               ; preds = %37
  %34 = icmp ugt i80 %17, 604453686435277732577280
  br i1 %34, label %40, label %42

35:                                               ; preds = %30
  %36 = or i80 %0, 4611686018427387904
  br label %20

37:                                               ; preds = %30
  br label %33

38:                                               ; preds = %42
  %39 = icmp eq i80 %15, 604453686435277732577280
  br i1 %39, label %45, label %48

40:                                               ; preds = %33
  %41 = or i80 %1, 4611686018427387904
  br label %20

42:                                               ; preds = %33
  br label %38

43:                                               ; preds = %48
  %44 = icmp eq i80 %17, 604453686435277732577280
  br i1 %44, label %53, label %54

45:                                               ; preds = %38
  %46 = xor i80 %0, %1
  %47 = icmp eq i80 %46, -604462909807314587353088
  br i1 %47, label %49, label %50

48:                                               ; preds = %38
  br label %43

49:                                               ; preds = %45
  br label %20

50:                                               ; preds = %45
  br label %20

51:                                               ; preds = %54
  %52 = icmp eq i80 %15, 0
  br i1 %52, label %57, label %59

53:                                               ; preds = %43
  br label %20

54:                                               ; preds = %43
  br label %51

55:                                               ; preds = %59
  %56 = icmp eq i80 %17, 0
  br i1 %56, label %64, label %65

57:                                               ; preds = %51
  %58 = icmp eq i80 %17, 0
  br i1 %58, label %60, label %62

59:                                               ; preds = %51
  br label %55

60:                                               ; preds = %57
  %61 = and i80 %0, %1
  br label %20

62:                                               ; preds = %57
  br label %20

63:                                               ; preds = %65
  br label %22

64:                                               ; preds = %55
  br label %20

65:                                               ; preds = %55
  br label %63

66:                                               ; preds = %72, %69
  %67 = load i80, ptr %10, align 16
  %68 = lshr i80 %67, 64
  br i1 true, label %77, label %78

69:                                               ; preds = %22
  %70 = load i80, ptr %10, align 16
  %71 = load i80, ptr %9, align 16
  store i80 %71, ptr %10, align 16
  store i80 %70, ptr %9, align 16
  br label %66

72:                                               ; preds = %22
  br label %66

73:                                               ; preds = %77
  %74 = and i80 %68, 32767
  %75 = sub i80 2147483647, %74
  %76 = icmp ule i80 %75, 2147483647
  br i1 %76, label %83, label %84

77:                                               ; preds = %66
  br label %73

78:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

79:                                               ; preds = %83
  %80 = trunc i80 %74 to i32
  store i32 %80, ptr %8, align 4
  %81 = load i80, ptr %9, align 16
  %82 = lshr i80 %81, 64
  br i1 true, label %89, label %90

83:                                               ; preds = %73
  br label %79

84:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

85:                                               ; preds = %89
  %86 = and i80 %82, 32767
  %87 = sub i80 2147483647, %86
  %88 = icmp ule i80 %87, 2147483647
  br i1 %88, label %99, label %100

89:                                               ; preds = %79
  br label %85

90:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

91:                                               ; preds = %99
  %92 = trunc i80 %86 to i32
  store i32 %92, ptr %7, align 4
  %93 = load i80, ptr %10, align 16
  %94 = and i80 %93, 18446744073709551615
  store i80 %94, ptr %6, align 16
  %95 = load i80, ptr %9, align 16
  %96 = and i80 %95, 18446744073709551615
  store i80 %96, ptr %5, align 16
  %97 = load i32, ptr %8, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %104, label %106

99:                                               ; preds = %85
  br label %91

100:                                              ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

101:                                              ; preds = %106, %104
  %102 = load i32, ptr %7, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %117, label %119

104:                                              ; preds = %91
  %105 = call fastcc i32 @compiler_rt.common.normalize__anon_3627(ptr nonnull align 16 %6)
  store i32 %105, ptr %8, align 4
  br label %101

106:                                              ; preds = %91
  br label %101

107:                                              ; preds = %119, %117
  %108 = load i80, ptr %10, align 16
  %109 = and i80 %108, -604462909807314587353088
  %110 = load i80, ptr %10, align 16
  %111 = load i80, ptr %9, align 16
  %112 = xor i80 %110, %111
  %113 = and i80 %112, -604462909807314587353088
  %114 = icmp ne i80 %113, 0
  %115 = load i80, ptr %6, align 16
  %116 = or i80 %115, 9223372036854775808
  br i1 true, label %124, label %125

117:                                              ; preds = %101
  %118 = call fastcc i32 @compiler_rt.common.normalize__anon_3627(ptr nonnull align 16 %5)
  store i32 %118, ptr %7, align 4
  br label %107

119:                                              ; preds = %101
  br label %107

120:                                              ; preds = %124
  %121 = shl i80 %116, 3
  store i80 %121, ptr %6, align 16
  %122 = load i80, ptr %5, align 16
  %123 = or i80 %122, 9223372036854775808
  br i1 true, label %132, label %133

124:                                              ; preds = %107
  br label %120

125:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

126:                                              ; preds = %132
  %127 = shl i80 %123, 3
  store i80 %127, ptr %5, align 16
  %128 = load i32, ptr %8, align 4
  %129 = load i32, ptr %7, align 4
  %130 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %128, i32 %129)
  %131 = extractvalue { i32, i1 } %130, 1
  br i1 %131, label %134, label %135

132:                                              ; preds = %120
  br label %126

133:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

134:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

135:                                              ; preds = %126
  %136 = extractvalue { i32, i1 } %130, 0
  %137 = icmp sge i32 %136, 0
  br i1 %137, label %140, label %141

138:                                              ; preds = %140
  %139 = icmp ne i32 %136, 0
  br i1 %139, label %143, label %145

140:                                              ; preds = %135
  br label %138

141:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

142:                                              ; preds = %146, %145
  br i1 %114, label %184, label %189

143:                                              ; preds = %138
  %144 = icmp ult i32 %136, 80
  br i1 %144, label %147, label %151

145:                                              ; preds = %138
  br label %142

146:                                              ; preds = %177, %151
  br label %142

147:                                              ; preds = %143
  %148 = load i80, ptr %5, align 16
  %149 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 80, i32 %136)
  %150 = extractvalue { i32, i1 } %149, 1
  br i1 %150, label %159, label %160

151:                                              ; preds = %143
  store i80 1, ptr %5, align 16
  br label %146

152:                                              ; preds = %176, %175
  %153 = phi i80 [ 1, %175 ], [ 0, %176 ]
  %154 = load i80, ptr %5, align 16
  %155 = trunc i32 %136 to i7
  %156 = zext i7 %155 to i80
  %157 = lshr i80 %154, %156
  %158 = icmp ult i7 %155, -48
  br i1 %158, label %179, label %180

159:                                              ; preds = %147
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

160:                                              ; preds = %147
  %161 = extractvalue { i32, i1 } %149, 0
  %162 = sub i32 127, %161
  %163 = icmp ule i32 %162, 127
  br i1 %163, label %167, label %168

164:                                              ; preds = %167
  %165 = trunc i32 %161 to i7
  %166 = icmp ult i7 %165, -48
  br i1 %166, label %173, label %174

167:                                              ; preds = %160
  br label %164

168:                                              ; preds = %160
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

169:                                              ; preds = %173
  %170 = zext i7 %165 to i80
  %171 = shl i80 %148, %170
  %172 = icmp ne i80 %171, 0
  br i1 %172, label %175, label %176

173:                                              ; preds = %164
  br label %169

174:                                              ; preds = %164
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

175:                                              ; preds = %169
  br label %152

176:                                              ; preds = %169
  br label %152

177:                                              ; preds = %179
  %178 = or i80 %157, %153
  store i80 %178, ptr %5, align 16
  br label %146

179:                                              ; preds = %152
  br label %177

180:                                              ; preds = %152
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

181:                                              ; preds = %241, %204
  %182 = load i32, ptr %8, align 4
  %183 = icmp sge i32 %182, 32767
  br i1 %183, label %261, label %263

184:                                              ; preds = %142
  %185 = load i80, ptr %6, align 16
  %186 = load i80, ptr %5, align 16
  %187 = call fastcc { i80, i1 } @llvm.usub.with.overflow.i80(i80 %185, i80 %186)
  %188 = extractvalue { i80, i1 } %187, 1
  br i1 %188, label %194, label %195

189:                                              ; preds = %142
  %190 = load i80, ptr %6, align 16
  %191 = load i80, ptr %5, align 16
  %192 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %190, i80 %191)
  %193 = extractvalue { i80, i1 } %192, 1
  br i1 %193, label %235, label %236

194:                                              ; preds = %184
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

195:                                              ; preds = %184
  %196 = extractvalue { i80, i1 } %187, 0
  store i80 %196, ptr %6, align 16
  %197 = load i80, ptr %6, align 16
  %198 = icmp eq i80 %197, 0
  br i1 %198, label %202, label %203

199:                                              ; preds = %203
  %200 = load i80, ptr %6, align 16
  %201 = icmp ult i80 %200, 73786976294838206464
  br i1 %201, label %205, label %212

202:                                              ; preds = %195
  br label %20

203:                                              ; preds = %195
  br label %199

204:                                              ; preds = %233, %212
  br label %181

205:                                              ; preds = %199
  %206 = load i80, ptr %6, align 16
  %207 = call i80 @llvm.ctlz.i80(i80 %206, i1 false)
  %208 = trunc i80 %207 to i7
  %209 = zext i7 %208 to i32
  %210 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %209, i32 13)
  %211 = extractvalue { i32, i1 } %210, 1
  br i1 %211, label %213, label %214

212:                                              ; preds = %199
  br label %204

213:                                              ; preds = %205
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

214:                                              ; preds = %205
  %215 = extractvalue { i32, i1 } %210, 0
  %216 = load i80, ptr %6, align 16
  %217 = sub i32 127, %215
  %218 = icmp ule i32 %217, 127
  br i1 %218, label %222, label %223

219:                                              ; preds = %222
  %220 = trunc i32 %215 to i7
  %221 = icmp ult i7 %220, -48
  br i1 %221, label %230, label %231

222:                                              ; preds = %214
  br label %219

223:                                              ; preds = %214
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

224:                                              ; preds = %230
  %225 = zext i7 %220 to i80
  %226 = shl i80 %216, %225
  store i80 %226, ptr %6, align 16
  %227 = load i32, ptr %8, align 4
  %228 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %227, i32 %215)
  %229 = extractvalue { i32, i1 } %228, 1
  br i1 %229, label %232, label %233

230:                                              ; preds = %219
  br label %224

231:                                              ; preds = %219
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

232:                                              ; preds = %224
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

233:                                              ; preds = %224
  %234 = extractvalue { i32, i1 } %228, 0
  store i32 %234, ptr %8, align 4
  br label %204

235:                                              ; preds = %189
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

236:                                              ; preds = %189
  %237 = extractvalue { i80, i1 } %192, 0
  store i80 %237, ptr %6, align 16
  %238 = load i80, ptr %6, align 16
  %239 = and i80 %238, 147573952589676412928
  %240 = icmp ne i80 %239, 0
  br i1 %240, label %242, label %247

241:                                              ; preds = %256, %247
  br label %181

242:                                              ; preds = %236
  %243 = load i80, ptr %6, align 16
  %244 = and i80 %243, 1
  %245 = load i80, ptr %6, align 16
  %246 = lshr i80 %245, 1
  br i1 true, label %253, label %254

247:                                              ; preds = %236
  br label %241

248:                                              ; preds = %253
  %249 = or i80 %246, %244
  store i80 %249, ptr %6, align 16
  %250 = load i32, ptr %8, align 4
  %251 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %250, i32 1)
  %252 = extractvalue { i32, i1 } %251, 1
  br i1 %252, label %255, label %256

253:                                              ; preds = %242
  br label %248

254:                                              ; preds = %242
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

255:                                              ; preds = %248
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

256:                                              ; preds = %248
  %257 = extractvalue { i32, i1 } %251, 0
  store i32 %257, ptr %8, align 4
  br label %241

258:                                              ; preds = %263
  %259 = load i32, ptr %8, align 4
  %260 = icmp sle i32 %259, 0
  br i1 %260, label %269, label %274

261:                                              ; preds = %181
  %262 = or i80 604453686435277732577280, %109
  br label %20

263:                                              ; preds = %181
  br label %258

264:                                              ; preds = %274
  %265 = load i80, ptr %6, align 16
  %266 = and i80 %265, 7
  %267 = load i80, ptr %6, align 16
  %268 = lshr i80 %267, 3
  br i1 true, label %297, label %298

269:                                              ; preds = %258
  %270 = load i80, ptr %6, align 16
  %271 = load i32, ptr %8, align 4
  %272 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 4, i32 %271)
  %273 = extractvalue { i32, i1 } %272, 1
  br i1 %273, label %275, label %276

274:                                              ; preds = %258
  br label %264

275:                                              ; preds = %269
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

276:                                              ; preds = %269
  %277 = extractvalue { i32, i1 } %272, 0
  %278 = sub i32 127, %277
  %279 = icmp ule i32 %278, 127
  br i1 %279, label %285, label %286

280:                                              ; preds = %285
  %281 = trunc i32 %277 to i7
  %282 = zext i7 %281 to i80
  %283 = lshr i80 %270, %282
  %284 = icmp ult i7 %281, -48
  br i1 %284, label %290, label %291

285:                                              ; preds = %276
  br label %280

286:                                              ; preds = %276
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

287:                                              ; preds = %290
  store i80 %283, ptr %6, align 16
  %288 = load i80, ptr %6, align 16
  %289 = or i80 %109, %288
  br label %20

290:                                              ; preds = %280
  br label %287

291:                                              ; preds = %280
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

292:                                              ; preds = %297
  %293 = and i80 %268, 18446744073709551615
  store i80 %293, ptr %4, align 16
  %294 = load i80, ptr %4, align 16
  %295 = load i32, ptr %8, align 4
  %296 = icmp sge i32 %295, 0
  br i1 %296, label %301, label %302

297:                                              ; preds = %264
  br label %292

298:                                              ; preds = %264
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

299:                                              ; preds = %301
  %300 = sext i32 %295 to i80
  br i1 true, label %309, label %310

301:                                              ; preds = %292
  br label %299

302:                                              ; preds = %292
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

303:                                              ; preds = %309
  %304 = shl i80 %300, 64
  %305 = or i80 %294, %304
  store i80 %305, ptr %4, align 16
  %306 = load i80, ptr %4, align 16
  %307 = or i80 %306, %109
  store i80 %307, ptr %4, align 16
  %308 = icmp ugt i80 %266, 4
  br i1 %308, label %313, label %317

309:                                              ; preds = %299
  br label %303

310:                                              ; preds = %299
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

311:                                              ; preds = %319, %317
  %312 = icmp eq i80 %266, 4
  br i1 %312, label %324, label %330

313:                                              ; preds = %303
  %314 = load i80, ptr %4, align 16
  %315 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %314, i80 1)
  %316 = extractvalue { i80, i1 } %315, 1
  br i1 %316, label %318, label %319

317:                                              ; preds = %303
  br label %311

318:                                              ; preds = %313
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

319:                                              ; preds = %313
  %320 = extractvalue { i80, i1 } %315, 0
  store i80 %320, ptr %4, align 16
  br label %311

321:                                              ; preds = %332, %330
  %322 = load i80, ptr %4, align 16
  %323 = lshr i80 %322, 64
  br i1 true, label %338, label %339

324:                                              ; preds = %311
  %325 = load i80, ptr %4, align 16
  %326 = load i80, ptr %4, align 16
  %327 = and i80 %326, 1
  %328 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %325, i80 %327)
  %329 = extractvalue { i80, i1 } %328, 1
  br i1 %329, label %331, label %332

330:                                              ; preds = %311
  br label %321

331:                                              ; preds = %324
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

332:                                              ; preds = %324
  %333 = extractvalue { i80, i1 } %328, 0
  store i80 %333, ptr %4, align 16
  br label %321

334:                                              ; preds = %343, %340
  %335 = load i80, ptr %4, align 16
  br label %20

336:                                              ; preds = %338
  %337 = icmp ne i80 %323, 0
  br i1 %337, label %340, label %343

338:                                              ; preds = %321
  br label %336

339:                                              ; preds = %321
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @87)
  unreachable

340:                                              ; preds = %336
  %341 = load i80, ptr %4, align 16
  %342 = or i80 %341, 9223372036854775808
  store i80 %342, ptr %4, align 16
  br label %334

343:                                              ; preds = %336
  br label %334
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.common.normalize__anon_3627(ptr nonnull align 16 %0) unnamed_addr #0 {
  %2 = load i80, ptr %0, align 16
  %3 = call i80 @llvm.ctlz.i80(i80 %2, i1 false)
  %4 = trunc i80 %3 to i7
  %5 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %4, i7 16)
  %6 = extractvalue { i7, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i7, i1 } %5, 0
  %10 = load i80, ptr %0, align 16
  %11 = icmp ult i7 %9, -48
  br i1 %11, label %18, label %19

12:                                               ; preds = %18
  %13 = zext i7 %9 to i80
  %14 = shl i80 %10, %13
  store i80 %14, ptr %0, align 16
  %15 = zext i7 %9 to i32
  %16 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %15)
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %20, label %21

18:                                               ; preds = %8
  br label %12

19:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @153)
  unreachable

20:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %12
  %22 = extractvalue { i32, i1 } %16, 0
  ret i32 %22
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i80, i1 } @llvm.usub.with.overflow.i80(i80, i80) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i80 @llvm.ctlz.i80(i80, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__subhf3(half %0, half %1) #0 {
  %3 = bitcast half %1 to i16
  %4 = xor i16 %3, -32768
  %5 = bitcast i16 %4 to half
  %6 = fadd half %0, %5
  ret half %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__subsf3(float %0, float %1) #0 {
  %3 = bitcast float %1 to i32
  %4 = xor i32 %3, -2147483648
  %5 = bitcast i32 %4 to float
  %6 = fadd float %0, %5
  ret float %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__subdf3(double %0, double %1) #0 {
  %3 = bitcast double %1 to i64
  %4 = xor i64 %3, -9223372036854775808
  %5 = bitcast i64 %4 to double
  %6 = fadd double %0, %5
  ret double %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__subtf3(fp128 %0, fp128 %1) #0 {
  %3 = bitcast fp128 %1 to i128
  %4 = xor i128 %3, -170141183460469231731687303715884105728
  %5 = bitcast i128 %4 to fp128
  %6 = call fp128 @__addtf3(fp128 %0, fp128 %5)
  ret fp128 %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__subxf3(i80 %0, i80 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %math.F80, align 8
  %5 = alloca %math.F80, align 8
  call fastcc void @math.break_f80(ptr sret(%math.F80) %4, i80 %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %4, i64 16, i1 false)
  %6 = getelementptr inbounds %math.F80, ptr %5, i32 0, i32 1
  %7 = load i16, ptr %6, align 2
  %8 = xor i16 %7, -32768
  store i16 %8, ptr %6, align 2
  %9 = call fastcc i80 @math.make_f80(ptr nonnull readonly align 8 %5)
  %10 = call i80 @__addxf3(i80 %0, i80 %9)
  ret i80 %10
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__mulhf3(half %0, half %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i32, align 4
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  %11 = alloca half, align 2
  store half 0xH7C01, ptr %11, align 2
  %12 = load half, ptr %11, align 2
  %13 = bitcast half %12 to i16
  %14 = or i16 %13, 512
  %15 = bitcast half %0 to i16
  %16 = lshr i16 %15, 10
  %17 = and i16 %16, 31
  %18 = bitcast half %1 to i16
  %19 = lshr i16 %18, 10
  %20 = and i16 %19, 31
  %21 = bitcast half %0 to i16
  %22 = bitcast half %1 to i16
  %23 = xor i16 %21, %22
  %24 = and i16 %23, -32768
  %25 = bitcast half %0 to i16
  %26 = and i16 %25, 1023
  store i16 %26, ptr %10, align 2
  %27 = bitcast half %1 to i16
  %28 = and i16 %27, 1023
  store i16 %28, ptr %9, align 2
  store i32 0, ptr %8, align 4
  %29 = sub i16 %17, 1
  %30 = icmp uge i16 %29, 30
  br i1 %30, label %51, label %52

31:                                               ; preds = %171, %161, %136, %103, %98, %94, %91, %84, %81, %71, %64
  %32 = phi half [ %67, %64 ], [ %74, %71 ], [ %83, %81 ], [ %85, %84 ], [ %93, %91 ], [ %95, %94 ], [ %99, %98 ], [ %104, %103 ], [ %138, %136 ], [ %162, %161 ], [ %175, %171 ]
  ret half %32

33:                                               ; preds = %113, %61
  %34 = load i16, ptr %10, align 2
  %35 = or i16 %34, 1024
  store i16 %35, ptr %10, align 2
  %36 = load i16, ptr %9, align 2
  %37 = or i16 %36, 1024
  store i16 %37, ptr %9, align 2
  call void @llvm.memset.p0.i64(ptr align 2 %7, i8 undef, i64 2, i1 false)
  call void @llvm.memset.p0.i64(ptr align 2 %6, i8 undef, i64 2, i1 false)
  %38 = load i16, ptr %10, align 2
  %39 = load i16, ptr %9, align 2
  %40 = shl i16 %39, 5
  call fastcc void @compiler_rt.common.wideMultiply__anon_3634(i16 %38, i16 %40, ptr nonnull align 2 %7, ptr nonnull align 2 %6)
  %41 = add nuw i16 %17, %20
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %42, 15
  %44 = load i32, ptr %8, align 4
  %45 = add nsw i32 %43, %44
  store i32 %45, ptr %5, align 4
  %46 = load i16, ptr %7, align 2
  %47 = and i16 %46, 1024
  %48 = icmp ne i16 %47, 0
  br i1 %48, label %122, label %125

49:                                               ; preds = %52, %51
  %50 = phi i1 [ true, %51 ], [ %54, %52 ]
  br i1 %50, label %55, label %61

51:                                               ; preds = %2
  br label %49

52:                                               ; preds = %2
  %53 = sub i16 %20, 1
  %54 = icmp uge i16 %53, 30
  br label %49

55:                                               ; preds = %49
  %56 = bitcast half %0 to i16
  %57 = and i16 %56, 32767
  %58 = bitcast half %1 to i16
  %59 = and i16 %58, 32767
  %60 = icmp ugt i16 %57, 31744
  br i1 %60, label %64, label %68

61:                                               ; preds = %49
  br label %33

62:                                               ; preds = %68
  %63 = icmp ugt i16 %59, 31744
  br i1 %63, label %71, label %75

64:                                               ; preds = %55
  %65 = bitcast half %0 to i16
  %66 = or i16 %65, 512
  %67 = bitcast i16 %66 to half
  br label %31

68:                                               ; preds = %55
  br label %62

69:                                               ; preds = %75
  %70 = icmp eq i16 %57, 31744
  br i1 %70, label %78, label %80

71:                                               ; preds = %62
  %72 = bitcast half %1 to i16
  %73 = or i16 %72, 512
  %74 = bitcast i16 %73 to half
  br label %31

75:                                               ; preds = %62
  br label %69

76:                                               ; preds = %80
  %77 = icmp eq i16 %59, 31744
  br i1 %77, label %88, label %90

78:                                               ; preds = %69
  %79 = icmp ne i16 %59, 0
  br i1 %79, label %81, label %84

80:                                               ; preds = %69
  br label %76

81:                                               ; preds = %78
  %82 = or i16 %57, %24
  %83 = bitcast i16 %82 to half
  br label %31

84:                                               ; preds = %78
  %85 = bitcast i16 %14 to half
  br label %31

86:                                               ; preds = %90
  %87 = icmp eq i16 %57, 0
  br i1 %87, label %98, label %100

88:                                               ; preds = %76
  %89 = icmp ne i16 %57, 0
  br i1 %89, label %91, label %94

90:                                               ; preds = %76
  br label %86

91:                                               ; preds = %88
  %92 = or i16 %59, %24
  %93 = bitcast i16 %92 to half
  br label %31

94:                                               ; preds = %88
  %95 = bitcast i16 %14 to half
  br label %31

96:                                               ; preds = %100
  %97 = icmp eq i16 %59, 0
  br i1 %97, label %103, label %105

98:                                               ; preds = %86
  %99 = bitcast i16 %24 to half
  br label %31

100:                                              ; preds = %86
  br label %96

101:                                              ; preds = %105
  %102 = icmp ult i16 %57, 1024
  br i1 %102, label %108, label %112

103:                                              ; preds = %96
  %104 = bitcast i16 %24 to half
  br label %31

105:                                              ; preds = %96
  br label %101

106:                                              ; preds = %112, %108
  %107 = icmp ult i16 %59, 1024
  br i1 %107, label %114, label %118

108:                                              ; preds = %101
  %109 = load i32, ptr %8, align 4
  %110 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3633(ptr nonnull align 2 %10)
  %111 = add nsw i32 %109, %110
  store i32 %111, ptr %8, align 4
  br label %106

112:                                              ; preds = %101
  br label %106

113:                                              ; preds = %118, %114
  br label %33

114:                                              ; preds = %106
  %115 = load i32, ptr %8, align 4
  %116 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3633(ptr nonnull align 2 %9)
  %117 = add nsw i32 %115, %116
  store i32 %117, ptr %8, align 4
  br label %113

118:                                              ; preds = %106
  br label %113

119:                                              ; preds = %125, %122
  %120 = load i32, ptr %5, align 4
  %121 = icmp sge i32 %120, 31
  br i1 %121, label %136, label %139

122:                                              ; preds = %33
  %123 = load i32, ptr %5, align 4
  %124 = add i32 %123, 1
  store i32 %124, ptr %5, align 4
  br label %119

125:                                              ; preds = %33
  %126 = load i16, ptr %7, align 2
  %127 = shl i16 %126, 1
  %128 = load i16, ptr %6, align 2
  %129 = lshr i16 %128, 15
  %130 = or i16 %127, %129
  store i16 %130, ptr %7, align 2
  %131 = load i16, ptr %6, align 2
  %132 = shl i16 %131, 1
  store i16 %132, ptr %6, align 2
  br label %119

133:                                              ; preds = %139
  call void @llvm.memset.p0.i64(ptr align 2 %4, i8 undef, i64 2, i1 false)
  %134 = load i32, ptr %5, align 4
  %135 = icmp sle i32 %134, 0
  br i1 %135, label %143, label %147

136:                                              ; preds = %119
  %137 = or i16 31744, %24
  %138 = bitcast i16 %137 to half
  br label %31

139:                                              ; preds = %119
  br label %133

140:                                              ; preds = %155, %147
  %141 = load i16, ptr %6, align 2
  %142 = icmp ugt i16 %141, -32768
  br i1 %142, label %167, label %170

143:                                              ; preds = %133
  %144 = load i32, ptr %5, align 4
  %145 = sub i32 1, %144
  %146 = icmp uge i32 %145, 16
  br i1 %146, label %161, label %163

147:                                              ; preds = %133
  %148 = load i16, ptr %7, align 2
  %149 = and i16 %148, 1023
  store i16 %149, ptr %4, align 2
  %150 = load i16, ptr %4, align 2
  %151 = load i32, ptr %5, align 4
  %152 = trunc i32 %151 to i16
  %153 = shl i16 %152, 10
  %154 = or i16 %150, %153
  store i16 %154, ptr %4, align 2
  br label %140

155:                                              ; preds = %163
  %156 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3635(ptr nonnull align 2 %7, ptr nonnull align 2 %6, i32 %145)
  %157 = load i16, ptr %6, align 2
  %158 = zext i1 %156 to i16
  %159 = or i16 %157, %158
  store i16 %159, ptr %6, align 2
  %160 = load i16, ptr %7, align 2
  store i16 %160, ptr %4, align 2
  br label %140

161:                                              ; preds = %143
  %162 = bitcast i16 %24 to half
  br label %31

163:                                              ; preds = %143
  br label %155

164:                                              ; preds = %170, %167
  %165 = load i16, ptr %6, align 2
  %166 = icmp eq i16 %165, -32768
  br i1 %166, label %176, label %181

167:                                              ; preds = %140
  %168 = load i16, ptr %4, align 2
  %169 = add i16 %168, 1
  store i16 %169, ptr %4, align 2
  br label %164

170:                                              ; preds = %140
  br label %164

171:                                              ; preds = %181, %176
  %172 = load i16, ptr %4, align 2
  %173 = or i16 %172, %24
  store i16 %173, ptr %4, align 2
  %174 = load i16, ptr %4, align 2
  %175 = bitcast i16 %174 to half
  br label %31

176:                                              ; preds = %164
  %177 = load i16, ptr %4, align 2
  %178 = load i16, ptr %4, align 2
  %179 = and i16 %178, 1
  %180 = add i16 %177, %179
  store i16 %180, ptr %4, align 2
  br label %171

181:                                              ; preds = %164
  br label %171
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.common.wideMultiply__anon_3634(i16 %0, i16 %1, ptr nonnull align 2 %2, ptr nonnull align 2 %3) unnamed_addr #0 {
  %5 = zext i16 %0 to i32
  %6 = zext i16 %1 to i32
  %7 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 %5, i32 %6)
  %8 = extractvalue { i32, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %4
  %11 = extractvalue { i32, i1 } %7, 0
  %12 = lshr i32 %11, 16
  %13 = sub i32 65535, %12
  %14 = icmp ule i32 %13, 65535
  br i1 %14, label %18, label %19

15:                                               ; preds = %18
  %16 = trunc i32 %12 to i16
  store i16 %16, ptr %2, align 2
  %17 = trunc i32 %11 to i16
  store i16 %17, ptr %3, align 2
  ret void

18:                                               ; preds = %10
  br label %15

19:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @155)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3633(ptr nonnull align 2 %0) unnamed_addr #0 {
  %2 = load i16, ptr %0, align 2
  %3 = call i16 @llvm.ctlz.i16(i16 %2, i1 false)
  %4 = trunc i16 %3 to i5
  %5 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %4, i5 5)
  %6 = extractvalue { i5, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i5, i1 } %5, 0
  %10 = load i16, ptr %0, align 2
  %11 = sub i5 15, %9
  %12 = icmp ule i5 %11, 15
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i5 %9 to i4
  %15 = zext i4 %14 to i16
  %16 = shl i16 %10, %15
  store i16 %16, ptr %0, align 2
  %17 = zext i5 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @154)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3635(ptr nonnull align 2 %0, ptr nonnull align 2 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  store i1 false, ptr %4, align 1
  %5 = icmp ult i32 %2, 16
  br i1 %5, label %8, label %29

6:                                                ; preds = %31, %8
  %7 = load i1, ptr %4, align 1
  ret i1 %7

8:                                                ; preds = %3
  %9 = load i16, ptr %1, align 2
  %10 = sub i32 16, %2
  %11 = trunc i32 %10 to i4
  %12 = zext i4 %11 to i16
  %13 = shl i16 %9, %12
  %14 = icmp ne i16 %13, 0
  store i1 %14, ptr %4, align 1
  %15 = load i16, ptr %0, align 2
  %16 = sub i32 16, %2
  %17 = trunc i32 %16 to i4
  %18 = zext i4 %17 to i16
  %19 = shl i16 %15, %18
  %20 = load i16, ptr %1, align 2
  %21 = trunc i32 %2 to i4
  %22 = zext i4 %21 to i16
  %23 = lshr i16 %20, %22
  %24 = or i16 %19, %23
  store i16 %24, ptr %1, align 2
  %25 = load i16, ptr %0, align 2
  %26 = trunc i32 %2 to i4
  %27 = zext i4 %26 to i16
  %28 = lshr i16 %25, %27
  store i16 %28, ptr %0, align 2
  br label %6

29:                                               ; preds = %3
  %30 = icmp ult i32 %2, 32
  br i1 %30, label %32, label %46

31:                                               ; preds = %46, %32
  br label %6

32:                                               ; preds = %29
  %33 = load i16, ptr %0, align 2
  %34 = sub i32 32, %2
  %35 = trunc i32 %34 to i4
  %36 = zext i4 %35 to i16
  %37 = shl i16 %33, %36
  %38 = load i16, ptr %1, align 2
  %39 = or i16 %37, %38
  %40 = icmp ne i16 %39, 0
  store i1 %40, ptr %4, align 1
  %41 = load i16, ptr %0, align 2
  %42 = sub i32 %2, 16
  %43 = trunc i32 %42 to i4
  %44 = zext i4 %43 to i16
  %45 = lshr i16 %41, %44
  store i16 %45, ptr %1, align 2
  store i16 0, ptr %0, align 2
  br label %31

46:                                               ; preds = %29
  %47 = load i16, ptr %0, align 2
  %48 = load i16, ptr %1, align 2
  %49 = or i16 %47, %48
  %50 = icmp ne i16 %49, 0
  store i1 %50, ptr %4, align 1
  store i16 0, ptr %1, align 2
  store i16 0, ptr %0, align 2
  br label %31
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__mulsf3(float %0, float %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  store float 0x7FF0000020000000, ptr %11, align 4
  %12 = load float, ptr %11, align 4
  %13 = bitcast float %12 to i32
  %14 = or i32 %13, 4194304
  %15 = bitcast float %0 to i32
  %16 = lshr i32 %15, 23
  %17 = and i32 %16, 255
  %18 = bitcast float %1 to i32
  %19 = lshr i32 %18, 23
  %20 = and i32 %19, 255
  %21 = bitcast float %0 to i32
  %22 = bitcast float %1 to i32
  %23 = xor i32 %21, %22
  %24 = and i32 %23, -2147483648
  %25 = bitcast float %0 to i32
  %26 = and i32 %25, 8388607
  store i32 %26, ptr %10, align 4
  %27 = bitcast float %1 to i32
  %28 = and i32 %27, 8388607
  store i32 %28, ptr %9, align 4
  store i32 0, ptr %8, align 4
  %29 = sub i32 %17, 1
  %30 = icmp uge i32 %29, 254
  br i1 %30, label %50, label %51

31:                                               ; preds = %169, %159, %135, %102, %97, %93, %90, %83, %80, %70, %63
  %32 = phi float [ %66, %63 ], [ %73, %70 ], [ %82, %80 ], [ %84, %83 ], [ %92, %90 ], [ %94, %93 ], [ %98, %97 ], [ %103, %102 ], [ %137, %135 ], [ %160, %159 ], [ %173, %169 ]
  ret float %32

33:                                               ; preds = %112, %60
  %34 = load i32, ptr %10, align 4
  %35 = or i32 %34, 8388608
  store i32 %35, ptr %10, align 4
  %36 = load i32, ptr %9, align 4
  %37 = or i32 %36, 8388608
  store i32 %37, ptr %9, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %7, i8 undef, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 undef, i64 4, i1 false)
  %38 = load i32, ptr %10, align 4
  %39 = load i32, ptr %9, align 4
  %40 = shl i32 %39, 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3639(i32 %38, i32 %40, ptr nonnull align 4 %7, ptr nonnull align 4 %6)
  %41 = add nuw i32 %17, %20
  %42 = sub nsw i32 %41, 127
  %43 = load i32, ptr %8, align 4
  %44 = add nsw i32 %42, %43
  store i32 %44, ptr %5, align 4
  %45 = load i32, ptr %7, align 4
  %46 = and i32 %45, 8388608
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %121, label %124

48:                                               ; preds = %51, %50
  %49 = phi i1 [ true, %50 ], [ %53, %51 ]
  br i1 %49, label %54, label %60

50:                                               ; preds = %2
  br label %48

51:                                               ; preds = %2
  %52 = sub i32 %20, 1
  %53 = icmp uge i32 %52, 254
  br label %48

54:                                               ; preds = %48
  %55 = bitcast float %0 to i32
  %56 = and i32 %55, 2147483647
  %57 = bitcast float %1 to i32
  %58 = and i32 %57, 2147483647
  %59 = icmp ugt i32 %56, 2139095040
  br i1 %59, label %63, label %67

60:                                               ; preds = %48
  br label %33

61:                                               ; preds = %67
  %62 = icmp ugt i32 %58, 2139095040
  br i1 %62, label %70, label %74

63:                                               ; preds = %54
  %64 = bitcast float %0 to i32
  %65 = or i32 %64, 4194304
  %66 = bitcast i32 %65 to float
  br label %31

67:                                               ; preds = %54
  br label %61

68:                                               ; preds = %74
  %69 = icmp eq i32 %56, 2139095040
  br i1 %69, label %77, label %79

70:                                               ; preds = %61
  %71 = bitcast float %1 to i32
  %72 = or i32 %71, 4194304
  %73 = bitcast i32 %72 to float
  br label %31

74:                                               ; preds = %61
  br label %68

75:                                               ; preds = %79
  %76 = icmp eq i32 %58, 2139095040
  br i1 %76, label %87, label %89

77:                                               ; preds = %68
  %78 = icmp ne i32 %58, 0
  br i1 %78, label %80, label %83

79:                                               ; preds = %68
  br label %75

80:                                               ; preds = %77
  %81 = or i32 %56, %24
  %82 = bitcast i32 %81 to float
  br label %31

83:                                               ; preds = %77
  %84 = bitcast i32 %14 to float
  br label %31

85:                                               ; preds = %89
  %86 = icmp eq i32 %56, 0
  br i1 %86, label %97, label %99

87:                                               ; preds = %75
  %88 = icmp ne i32 %56, 0
  br i1 %88, label %90, label %93

89:                                               ; preds = %75
  br label %85

90:                                               ; preds = %87
  %91 = or i32 %58, %24
  %92 = bitcast i32 %91 to float
  br label %31

93:                                               ; preds = %87
  %94 = bitcast i32 %14 to float
  br label %31

95:                                               ; preds = %99
  %96 = icmp eq i32 %58, 0
  br i1 %96, label %102, label %104

97:                                               ; preds = %85
  %98 = bitcast i32 %24 to float
  br label %31

99:                                               ; preds = %85
  br label %95

100:                                              ; preds = %104
  %101 = icmp ult i32 %56, 8388608
  br i1 %101, label %107, label %111

102:                                              ; preds = %95
  %103 = bitcast i32 %24 to float
  br label %31

104:                                              ; preds = %95
  br label %100

105:                                              ; preds = %111, %107
  %106 = icmp ult i32 %58, 8388608
  br i1 %106, label %113, label %117

107:                                              ; preds = %100
  %108 = load i32, ptr %8, align 4
  %109 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3638(ptr nonnull align 4 %10)
  %110 = add nsw i32 %108, %109
  store i32 %110, ptr %8, align 4
  br label %105

111:                                              ; preds = %100
  br label %105

112:                                              ; preds = %117, %113
  br label %33

113:                                              ; preds = %105
  %114 = load i32, ptr %8, align 4
  %115 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3638(ptr nonnull align 4 %9)
  %116 = add nsw i32 %114, %115
  store i32 %116, ptr %8, align 4
  br label %112

117:                                              ; preds = %105
  br label %112

118:                                              ; preds = %124, %121
  %119 = load i32, ptr %5, align 4
  %120 = icmp sge i32 %119, 255
  br i1 %120, label %135, label %138

121:                                              ; preds = %33
  %122 = load i32, ptr %5, align 4
  %123 = add i32 %122, 1
  store i32 %123, ptr %5, align 4
  br label %118

124:                                              ; preds = %33
  %125 = load i32, ptr %7, align 4
  %126 = shl i32 %125, 1
  %127 = load i32, ptr %6, align 4
  %128 = lshr i32 %127, 31
  %129 = or i32 %126, %128
  store i32 %129, ptr %7, align 4
  %130 = load i32, ptr %6, align 4
  %131 = shl i32 %130, 1
  store i32 %131, ptr %6, align 4
  br label %118

132:                                              ; preds = %138
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 undef, i64 4, i1 false)
  %133 = load i32, ptr %5, align 4
  %134 = icmp sle i32 %133, 0
  br i1 %134, label %142, label %146

135:                                              ; preds = %118
  %136 = or i32 2139095040, %24
  %137 = bitcast i32 %136 to float
  br label %31

138:                                              ; preds = %118
  br label %132

139:                                              ; preds = %153, %146
  %140 = load i32, ptr %6, align 4
  %141 = icmp ugt i32 %140, -2147483648
  br i1 %141, label %165, label %168

142:                                              ; preds = %132
  %143 = load i32, ptr %5, align 4
  %144 = sub i32 1, %143
  %145 = icmp uge i32 %144, 32
  br i1 %145, label %159, label %161

146:                                              ; preds = %132
  %147 = load i32, ptr %7, align 4
  %148 = and i32 %147, 8388607
  store i32 %148, ptr %4, align 4
  %149 = load i32, ptr %4, align 4
  %150 = load i32, ptr %5, align 4
  %151 = shl i32 %150, 23
  %152 = or i32 %149, %151
  store i32 %152, ptr %4, align 4
  br label %139

153:                                              ; preds = %161
  %154 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3640(ptr nonnull align 4 %7, ptr nonnull align 4 %6, i32 %144)
  %155 = load i32, ptr %6, align 4
  %156 = zext i1 %154 to i32
  %157 = or i32 %155, %156
  store i32 %157, ptr %6, align 4
  %158 = load i32, ptr %7, align 4
  store i32 %158, ptr %4, align 4
  br label %139

159:                                              ; preds = %142
  %160 = bitcast i32 %24 to float
  br label %31

161:                                              ; preds = %142
  br label %153

162:                                              ; preds = %168, %165
  %163 = load i32, ptr %6, align 4
  %164 = icmp eq i32 %163, -2147483648
  br i1 %164, label %174, label %179

165:                                              ; preds = %139
  %166 = load i32, ptr %4, align 4
  %167 = add i32 %166, 1
  store i32 %167, ptr %4, align 4
  br label %162

168:                                              ; preds = %139
  br label %162

169:                                              ; preds = %179, %174
  %170 = load i32, ptr %4, align 4
  %171 = or i32 %170, %24
  store i32 %171, ptr %4, align 4
  %172 = load i32, ptr %4, align 4
  %173 = bitcast i32 %172 to float
  br label %31

174:                                              ; preds = %162
  %175 = load i32, ptr %4, align 4
  %176 = load i32, ptr %4, align 4
  %177 = and i32 %176, 1
  %178 = add i32 %175, %177
  store i32 %178, ptr %4, align 4
  br label %169

179:                                              ; preds = %162
  br label %169
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.common.wideMultiply__anon_3639(i32 %0, i32 %1, ptr nonnull align 4 %2, ptr nonnull align 4 %3) unnamed_addr #0 {
  %5 = zext i32 %0 to i64
  %6 = zext i32 %1 to i64
  %7 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %5, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %4
  %11 = extractvalue { i64, i1 } %7, 0
  %12 = lshr i64 %11, 32
  %13 = trunc i64 %12 to i32
  store i32 %13, ptr %2, align 4
  %14 = trunc i64 %11 to i32
  store i32 %14, ptr %3, align 4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3638(ptr nonnull align 4 %0) unnamed_addr #0 {
  %2 = load i32, ptr %0, align 4
  %3 = call i32 @llvm.ctlz.i32(i32 %2, i1 false)
  %4 = trunc i32 %3 to i6
  %5 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %4, i6 8)
  %6 = extractvalue { i6, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i6, i1 } %5, 0
  %10 = load i32, ptr %0, align 4
  %11 = sub i6 31, %9
  %12 = icmp ule i6 %11, 31
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i6 %9 to i5
  %15 = zext i5 %14 to i32
  %16 = shl i32 %10, %15
  store i32 %16, ptr %0, align 4
  %17 = zext i6 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @156)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3640(ptr nonnull align 4 %0, ptr nonnull align 4 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  store i1 false, ptr %4, align 1
  %5 = icmp ult i32 %2, 32
  br i1 %5, label %8, label %29

6:                                                ; preds = %31, %8
  %7 = load i1, ptr %4, align 1
  ret i1 %7

8:                                                ; preds = %3
  %9 = load i32, ptr %1, align 4
  %10 = sub i32 32, %2
  %11 = trunc i32 %10 to i5
  %12 = zext i5 %11 to i32
  %13 = shl i32 %9, %12
  %14 = icmp ne i32 %13, 0
  store i1 %14, ptr %4, align 1
  %15 = load i32, ptr %0, align 4
  %16 = sub i32 32, %2
  %17 = trunc i32 %16 to i5
  %18 = zext i5 %17 to i32
  %19 = shl i32 %15, %18
  %20 = load i32, ptr %1, align 4
  %21 = trunc i32 %2 to i5
  %22 = zext i5 %21 to i32
  %23 = lshr i32 %20, %22
  %24 = or i32 %19, %23
  store i32 %24, ptr %1, align 4
  %25 = load i32, ptr %0, align 4
  %26 = trunc i32 %2 to i5
  %27 = zext i5 %26 to i32
  %28 = lshr i32 %25, %27
  store i32 %28, ptr %0, align 4
  br label %6

29:                                               ; preds = %3
  %30 = icmp ult i32 %2, 64
  br i1 %30, label %32, label %46

31:                                               ; preds = %46, %32
  br label %6

32:                                               ; preds = %29
  %33 = load i32, ptr %0, align 4
  %34 = sub i32 64, %2
  %35 = trunc i32 %34 to i5
  %36 = zext i5 %35 to i32
  %37 = shl i32 %33, %36
  %38 = load i32, ptr %1, align 4
  %39 = or i32 %37, %38
  %40 = icmp ne i32 %39, 0
  store i1 %40, ptr %4, align 1
  %41 = load i32, ptr %0, align 4
  %42 = sub i32 %2, 32
  %43 = trunc i32 %42 to i5
  %44 = zext i5 %43 to i32
  %45 = lshr i32 %41, %44
  store i32 %45, ptr %1, align 4
  store i32 0, ptr %0, align 4
  br label %31

46:                                               ; preds = %29
  %47 = load i32, ptr %0, align 4
  %48 = load i32, ptr %1, align 4
  %49 = or i32 %47, %48
  %50 = icmp ne i32 %49, 0
  store i1 %50, ptr %4, align 1
  store i32 0, ptr %1, align 4
  store i32 0, ptr %0, align 4
  br label %31
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__muldf3(double %0, double %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca double, align 8
  store double 0x7FF0000000000001, ptr %11, align 8
  %12 = load double, ptr %11, align 8
  %13 = bitcast double %12 to i64
  %14 = or i64 %13, 2251799813685248
  %15 = bitcast double %0 to i64
  %16 = lshr i64 %15, 52
  %17 = and i64 %16, 2047
  %18 = trunc i64 %17 to i32
  %19 = bitcast double %1 to i64
  %20 = lshr i64 %19, 52
  %21 = and i64 %20, 2047
  %22 = trunc i64 %21 to i32
  %23 = bitcast double %0 to i64
  %24 = bitcast double %1 to i64
  %25 = xor i64 %23, %24
  %26 = and i64 %25, -9223372036854775808
  %27 = bitcast double %0 to i64
  %28 = and i64 %27, 4503599627370495
  store i64 %28, ptr %10, align 8
  %29 = bitcast double %1 to i64
  %30 = and i64 %29, 4503599627370495
  store i64 %30, ptr %9, align 8
  store i32 0, ptr %8, align 4
  %31 = sub i32 %18, 1
  %32 = icmp uge i32 %31, 2046
  br i1 %32, label %52, label %53

33:                                               ; preds = %174, %164, %137, %104, %99, %95, %92, %85, %82, %72, %65
  %34 = phi double [ %68, %65 ], [ %75, %72 ], [ %84, %82 ], [ %86, %85 ], [ %94, %92 ], [ %96, %95 ], [ %100, %99 ], [ %105, %104 ], [ %139, %137 ], [ %165, %164 ], [ %178, %174 ]
  ret double %34

35:                                               ; preds = %114, %62
  %36 = load i64, ptr %10, align 8
  %37 = or i64 %36, 4503599627370496
  store i64 %37, ptr %10, align 8
  %38 = load i64, ptr %9, align 8
  %39 = or i64 %38, 4503599627370496
  store i64 %39, ptr %9, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %7, i8 undef, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 undef, i64 8, i1 false)
  %40 = load i64, ptr %10, align 8
  %41 = load i64, ptr %9, align 8
  %42 = shl i64 %41, 11
  call fastcc void @compiler_rt.common.wideMultiply__anon_3644(i64 %40, i64 %42, ptr nonnull align 8 %7, ptr nonnull align 8 %6)
  %43 = add nuw i32 %18, %22
  %44 = sub nsw i32 %43, 1023
  %45 = load i32, ptr %8, align 4
  %46 = add nsw i32 %44, %45
  store i32 %46, ptr %5, align 4
  %47 = load i64, ptr %7, align 8
  %48 = and i64 %47, 4503599627370496
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %123, label %126

50:                                               ; preds = %53, %52
  %51 = phi i1 [ true, %52 ], [ %55, %53 ]
  br i1 %51, label %56, label %62

52:                                               ; preds = %2
  br label %50

53:                                               ; preds = %2
  %54 = sub i32 %22, 1
  %55 = icmp uge i32 %54, 2046
  br label %50

56:                                               ; preds = %50
  %57 = bitcast double %0 to i64
  %58 = and i64 %57, 9223372036854775807
  %59 = bitcast double %1 to i64
  %60 = and i64 %59, 9223372036854775807
  %61 = icmp ugt i64 %58, 9218868437227405312
  br i1 %61, label %65, label %69

62:                                               ; preds = %50
  br label %35

63:                                               ; preds = %69
  %64 = icmp ugt i64 %60, 9218868437227405312
  br i1 %64, label %72, label %76

65:                                               ; preds = %56
  %66 = bitcast double %0 to i64
  %67 = or i64 %66, 2251799813685248
  %68 = bitcast i64 %67 to double
  br label %33

69:                                               ; preds = %56
  br label %63

70:                                               ; preds = %76
  %71 = icmp eq i64 %58, 9218868437227405312
  br i1 %71, label %79, label %81

72:                                               ; preds = %63
  %73 = bitcast double %1 to i64
  %74 = or i64 %73, 2251799813685248
  %75 = bitcast i64 %74 to double
  br label %33

76:                                               ; preds = %63
  br label %70

77:                                               ; preds = %81
  %78 = icmp eq i64 %60, 9218868437227405312
  br i1 %78, label %89, label %91

79:                                               ; preds = %70
  %80 = icmp ne i64 %60, 0
  br i1 %80, label %82, label %85

81:                                               ; preds = %70
  br label %77

82:                                               ; preds = %79
  %83 = or i64 %58, %26
  %84 = bitcast i64 %83 to double
  br label %33

85:                                               ; preds = %79
  %86 = bitcast i64 %14 to double
  br label %33

87:                                               ; preds = %91
  %88 = icmp eq i64 %58, 0
  br i1 %88, label %99, label %101

89:                                               ; preds = %77
  %90 = icmp ne i64 %58, 0
  br i1 %90, label %92, label %95

91:                                               ; preds = %77
  br label %87

92:                                               ; preds = %89
  %93 = or i64 %60, %26
  %94 = bitcast i64 %93 to double
  br label %33

95:                                               ; preds = %89
  %96 = bitcast i64 %14 to double
  br label %33

97:                                               ; preds = %101
  %98 = icmp eq i64 %60, 0
  br i1 %98, label %104, label %106

99:                                               ; preds = %87
  %100 = bitcast i64 %26 to double
  br label %33

101:                                              ; preds = %87
  br label %97

102:                                              ; preds = %106
  %103 = icmp ult i64 %58, 4503599627370496
  br i1 %103, label %109, label %113

104:                                              ; preds = %97
  %105 = bitcast i64 %26 to double
  br label %33

106:                                              ; preds = %97
  br label %102

107:                                              ; preds = %113, %109
  %108 = icmp ult i64 %60, 4503599627370496
  br i1 %108, label %115, label %119

109:                                              ; preds = %102
  %110 = load i32, ptr %8, align 4
  %111 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3643(ptr nonnull align 8 %10)
  %112 = add nsw i32 %110, %111
  store i32 %112, ptr %8, align 4
  br label %107

113:                                              ; preds = %102
  br label %107

114:                                              ; preds = %119, %115
  br label %35

115:                                              ; preds = %107
  %116 = load i32, ptr %8, align 4
  %117 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3643(ptr nonnull align 8 %9)
  %118 = add nsw i32 %116, %117
  store i32 %118, ptr %8, align 4
  br label %114

119:                                              ; preds = %107
  br label %114

120:                                              ; preds = %126, %123
  %121 = load i32, ptr %5, align 4
  %122 = icmp sge i32 %121, 2047
  br i1 %122, label %137, label %140

123:                                              ; preds = %35
  %124 = load i32, ptr %5, align 4
  %125 = add i32 %124, 1
  store i32 %125, ptr %5, align 4
  br label %120

126:                                              ; preds = %35
  %127 = load i64, ptr %7, align 8
  %128 = shl i64 %127, 1
  %129 = load i64, ptr %6, align 8
  %130 = lshr i64 %129, 63
  %131 = or i64 %128, %130
  store i64 %131, ptr %7, align 8
  %132 = load i64, ptr %6, align 8
  %133 = shl i64 %132, 1
  store i64 %133, ptr %6, align 8
  br label %120

134:                                              ; preds = %140
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 undef, i64 8, i1 false)
  %135 = load i32, ptr %5, align 4
  %136 = icmp sle i32 %135, 0
  br i1 %136, label %144, label %150

137:                                              ; preds = %120
  %138 = or i64 9218868437227405312, %26
  %139 = bitcast i64 %138 to double
  br label %33

140:                                              ; preds = %120
  br label %134

141:                                              ; preds = %158, %150
  %142 = load i64, ptr %6, align 8
  %143 = icmp ugt i64 %142, -9223372036854775808
  br i1 %143, label %170, label %173

144:                                              ; preds = %134
  %145 = load i32, ptr %5, align 4
  %146 = zext i32 %145 to i64
  %147 = sub i64 1, %146
  %148 = trunc i64 %147 to i32
  %149 = icmp uge i32 %148, 64
  br i1 %149, label %164, label %166

150:                                              ; preds = %134
  %151 = load i64, ptr %7, align 8
  %152 = and i64 %151, 4503599627370495
  store i64 %152, ptr %4, align 8
  %153 = load i64, ptr %4, align 8
  %154 = load i32, ptr %5, align 4
  %155 = sext i32 %154 to i64
  %156 = shl i64 %155, 52
  %157 = or i64 %153, %156
  store i64 %157, ptr %4, align 8
  br label %141

158:                                              ; preds = %166
  %159 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3645(ptr nonnull align 8 %7, ptr nonnull align 8 %6, i32 %148)
  %160 = load i64, ptr %6, align 8
  %161 = zext i1 %159 to i64
  %162 = or i64 %160, %161
  store i64 %162, ptr %6, align 8
  %163 = load i64, ptr %7, align 8
  store i64 %163, ptr %4, align 8
  br label %141

164:                                              ; preds = %144
  %165 = bitcast i64 %26 to double
  br label %33

166:                                              ; preds = %144
  br label %158

167:                                              ; preds = %173, %170
  %168 = load i64, ptr %6, align 8
  %169 = icmp eq i64 %168, -9223372036854775808
  br i1 %169, label %179, label %184

170:                                              ; preds = %141
  %171 = load i64, ptr %4, align 8
  %172 = add i64 %171, 1
  store i64 %172, ptr %4, align 8
  br label %167

173:                                              ; preds = %141
  br label %167

174:                                              ; preds = %184, %179
  %175 = load i64, ptr %4, align 8
  %176 = or i64 %175, %26
  store i64 %176, ptr %4, align 8
  %177 = load i64, ptr %4, align 8
  %178 = bitcast i64 %177 to double
  br label %33

179:                                              ; preds = %167
  %180 = load i64, ptr %4, align 8
  %181 = load i64, ptr %4, align 8
  %182 = and i64 %181, 1
  %183 = add i64 %180, %182
  store i64 %183, ptr %4, align 8
  br label %174

184:                                              ; preds = %167
  br label %174
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.common.wideMultiply__anon_3644(i64 %0, i64 %1, ptr nonnull align 8 %2, ptr nonnull align 8 %3) unnamed_addr #0 {
  %5 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.loWord(i64 %0)
  %6 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.loWord(i64 %1)
  %7 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %5, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %4
  %11 = extractvalue { i64, i1 } %7, 0
  %12 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.loWord(i64 %0)
  %13 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %1)
  %14 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %12, i64 %13)
  %15 = extractvalue { i64, i1 } %14, 1
  br i1 %15, label %16, label %17

16:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %10
  %18 = extractvalue { i64, i1 } %14, 0
  %19 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %0)
  %20 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.loWord(i64 %1)
  %21 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 %20)
  %22 = extractvalue { i64, i1 } %21, 1
  br i1 %22, label %23, label %24

23:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

24:                                               ; preds = %17
  %25 = extractvalue { i64, i1 } %21, 0
  %26 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %0)
  %27 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %1)
  %28 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %26, i64 %27)
  %29 = extractvalue { i64, i1 } %28, 1
  br i1 %29, label %30, label %31

30:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %24
  %32 = extractvalue { i64, i1 } %28, 0
  %33 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.loWord(i64 %11)
  %34 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %11)
  %35 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.loWord(i64 %18)
  %36 = add i64 %34, %35
  %37 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.loWord(i64 %25)
  %38 = add i64 %36, %37
  %39 = shl i64 %38, 32
  %40 = add i64 %33, %39
  store i64 %40, ptr %3, align 8
  %41 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %18)
  %42 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %25)
  %43 = add i64 %41, %42
  %44 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %38)
  %45 = add i64 %43, %44
  %46 = add i64 %45, %32
  store i64 %46, ptr %2, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3643(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i64, ptr %0, align 8
  %3 = call i64 @llvm.ctlz.i64(i64 %2, i1 false)
  %4 = trunc i64 %3 to i7
  %5 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %4, i7 11)
  %6 = extractvalue { i7, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i7, i1 } %5, 0
  %10 = load i64, ptr %0, align 8
  %11 = sub i7 63, %9
  %12 = icmp ule i7 %11, 63
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i7 %9 to i6
  %15 = zext i6 %14 to i64
  %16 = shl i64 %10, %15
  store i64 %16, ptr %0, align 8
  %17 = zext i7 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @157)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3645(ptr nonnull align 8 %0, ptr nonnull align 8 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  store i1 false, ptr %4, align 1
  %5 = icmp ult i32 %2, 64
  br i1 %5, label %8, label %29

6:                                                ; preds = %31, %8
  %7 = load i1, ptr %4, align 1
  ret i1 %7

8:                                                ; preds = %3
  %9 = load i64, ptr %1, align 8
  %10 = sub i32 64, %2
  %11 = trunc i32 %10 to i6
  %12 = zext i6 %11 to i64
  %13 = shl i64 %9, %12
  %14 = icmp ne i64 %13, 0
  store i1 %14, ptr %4, align 1
  %15 = load i64, ptr %0, align 8
  %16 = sub i32 64, %2
  %17 = trunc i32 %16 to i6
  %18 = zext i6 %17 to i64
  %19 = shl i64 %15, %18
  %20 = load i64, ptr %1, align 8
  %21 = trunc i32 %2 to i6
  %22 = zext i6 %21 to i64
  %23 = lshr i64 %20, %22
  %24 = or i64 %19, %23
  store i64 %24, ptr %1, align 8
  %25 = load i64, ptr %0, align 8
  %26 = trunc i32 %2 to i6
  %27 = zext i6 %26 to i64
  %28 = lshr i64 %25, %27
  store i64 %28, ptr %0, align 8
  br label %6

29:                                               ; preds = %3
  %30 = icmp ult i32 %2, 128
  br i1 %30, label %32, label %46

31:                                               ; preds = %46, %32
  br label %6

32:                                               ; preds = %29
  %33 = load i64, ptr %0, align 8
  %34 = sub i32 128, %2
  %35 = trunc i32 %34 to i6
  %36 = zext i6 %35 to i64
  %37 = shl i64 %33, %36
  %38 = load i64, ptr %1, align 8
  %39 = or i64 %37, %38
  %40 = icmp ne i64 %39, 0
  store i1 %40, ptr %4, align 1
  %41 = load i64, ptr %0, align 8
  %42 = sub i32 %2, 64
  %43 = trunc i32 %42 to i6
  %44 = zext i6 %43 to i64
  %45 = lshr i64 %41, %44
  store i64 %45, ptr %1, align 8
  store i64 0, ptr %0, align 8
  br label %31

46:                                               ; preds = %29
  %47 = load i64, ptr %0, align 8
  %48 = load i64, ptr %1, align 8
  %49 = or i64 %47, %48
  %50 = icmp ne i64 %49, 0
  store i1 %50, ptr %4, align 1
  store i64 0, ptr %1, align 8
  store i64 0, ptr %0, align 8
  br label %31
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.loWord(i64 %0) unnamed_addr #0 {
  %2 = trunc i64 %0 to i32
  %3 = zext i32 %2 to i64
  ret i64 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3644.S.hiWord(i64 %0) unnamed_addr #0 {
  %2 = lshr i64 %0, 32
  %3 = trunc i64 %2 to i32
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__multf3(fp128 %0, fp128 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i128, align 16
  %5 = alloca i32, align 4
  %6 = alloca i128, align 16
  %7 = alloca i128, align 16
  %8 = alloca i32, align 4
  %9 = alloca i128, align 16
  %10 = alloca i128, align 16
  %11 = alloca fp128, align 16
  store fp128 0xL00000000000000017FFF000000000000, ptr %11, align 16
  %12 = load fp128, ptr %11, align 16
  %13 = bitcast fp128 %12 to i128
  %14 = or i128 %13, 2596148429267413814265248164610048
  %15 = bitcast fp128 %0 to i128
  %16 = lshr i128 %15, 112
  %17 = and i128 %16, 32767
  %18 = trunc i128 %17 to i32
  %19 = bitcast fp128 %1 to i128
  %20 = lshr i128 %19, 112
  %21 = and i128 %20, 32767
  %22 = trunc i128 %21 to i32
  %23 = bitcast fp128 %0 to i128
  %24 = bitcast fp128 %1 to i128
  %25 = xor i128 %23, %24
  %26 = and i128 %25, -170141183460469231731687303715884105728
  %27 = bitcast fp128 %0 to i128
  %28 = and i128 %27, 5192296858534827628530496329220095
  store i128 %28, ptr %10, align 16
  %29 = bitcast fp128 %1 to i128
  %30 = and i128 %29, 5192296858534827628530496329220095
  store i128 %30, ptr %9, align 16
  store i32 0, ptr %8, align 4
  %31 = sub i32 %18, 1
  %32 = icmp uge i32 %31, 32766
  br i1 %32, label %52, label %53

33:                                               ; preds = %174, %164, %137, %104, %99, %95, %92, %85, %82, %72, %65
  %34 = phi fp128 [ %68, %65 ], [ %75, %72 ], [ %84, %82 ], [ %86, %85 ], [ %94, %92 ], [ %96, %95 ], [ %100, %99 ], [ %105, %104 ], [ %139, %137 ], [ %165, %164 ], [ %178, %174 ]
  ret fp128 %34

35:                                               ; preds = %114, %62
  %36 = load i128, ptr %10, align 16
  %37 = or i128 %36, 5192296858534827628530496329220096
  store i128 %37, ptr %10, align 16
  %38 = load i128, ptr %9, align 16
  %39 = or i128 %38, 5192296858534827628530496329220096
  store i128 %39, ptr %9, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %7, i8 undef, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %6, i8 undef, i64 16, i1 false)
  %40 = load i128, ptr %10, align 16
  %41 = load i128, ptr %9, align 16
  %42 = shl i128 %41, 15
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %40, i128 %42, ptr nonnull align 16 %7, ptr nonnull align 16 %6)
  %43 = add nuw i32 %18, %22
  %44 = sub nsw i32 %43, 16383
  %45 = load i32, ptr %8, align 4
  %46 = add nsw i32 %44, %45
  store i32 %46, ptr %5, align 4
  %47 = load i128, ptr %7, align 16
  %48 = and i128 %47, 5192296858534827628530496329220096
  %49 = icmp ne i128 %48, 0
  br i1 %49, label %123, label %126

50:                                               ; preds = %53, %52
  %51 = phi i1 [ true, %52 ], [ %55, %53 ]
  br i1 %51, label %56, label %62

52:                                               ; preds = %2
  br label %50

53:                                               ; preds = %2
  %54 = sub i32 %22, 1
  %55 = icmp uge i32 %54, 32766
  br label %50

56:                                               ; preds = %50
  %57 = bitcast fp128 %0 to i128
  %58 = and i128 %57, 170141183460469231731687303715884105727
  %59 = bitcast fp128 %1 to i128
  %60 = and i128 %59, 170141183460469231731687303715884105727
  %61 = icmp ugt i128 %58, 170135991163610696904058773219554885632
  br i1 %61, label %65, label %69

62:                                               ; preds = %50
  br label %35

63:                                               ; preds = %69
  %64 = icmp ugt i128 %60, 170135991163610696904058773219554885632
  br i1 %64, label %72, label %76

65:                                               ; preds = %56
  %66 = bitcast fp128 %0 to i128
  %67 = or i128 %66, 2596148429267413814265248164610048
  %68 = bitcast i128 %67 to fp128
  br label %33

69:                                               ; preds = %56
  br label %63

70:                                               ; preds = %76
  %71 = icmp eq i128 %58, 170135991163610696904058773219554885632
  br i1 %71, label %79, label %81

72:                                               ; preds = %63
  %73 = bitcast fp128 %1 to i128
  %74 = or i128 %73, 2596148429267413814265248164610048
  %75 = bitcast i128 %74 to fp128
  br label %33

76:                                               ; preds = %63
  br label %70

77:                                               ; preds = %81
  %78 = icmp eq i128 %60, 170135991163610696904058773219554885632
  br i1 %78, label %89, label %91

79:                                               ; preds = %70
  %80 = icmp ne i128 %60, 0
  br i1 %80, label %82, label %85

81:                                               ; preds = %70
  br label %77

82:                                               ; preds = %79
  %83 = or i128 %58, %26
  %84 = bitcast i128 %83 to fp128
  br label %33

85:                                               ; preds = %79
  %86 = bitcast i128 %14 to fp128
  br label %33

87:                                               ; preds = %91
  %88 = icmp eq i128 %58, 0
  br i1 %88, label %99, label %101

89:                                               ; preds = %77
  %90 = icmp ne i128 %58, 0
  br i1 %90, label %92, label %95

91:                                               ; preds = %77
  br label %87

92:                                               ; preds = %89
  %93 = or i128 %60, %26
  %94 = bitcast i128 %93 to fp128
  br label %33

95:                                               ; preds = %89
  %96 = bitcast i128 %14 to fp128
  br label %33

97:                                               ; preds = %101
  %98 = icmp eq i128 %60, 0
  br i1 %98, label %104, label %106

99:                                               ; preds = %87
  %100 = bitcast i128 %26 to fp128
  br label %33

101:                                              ; preds = %87
  br label %97

102:                                              ; preds = %106
  %103 = icmp ult i128 %58, 5192296858534827628530496329220096
  br i1 %103, label %109, label %113

104:                                              ; preds = %97
  %105 = bitcast i128 %26 to fp128
  br label %33

106:                                              ; preds = %97
  br label %102

107:                                              ; preds = %113, %109
  %108 = icmp ult i128 %60, 5192296858534827628530496329220096
  br i1 %108, label %115, label %119

109:                                              ; preds = %102
  %110 = load i32, ptr %8, align 4
  %111 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3648(ptr nonnull align 16 %10)
  %112 = add nsw i32 %110, %111
  store i32 %112, ptr %8, align 4
  br label %107

113:                                              ; preds = %102
  br label %107

114:                                              ; preds = %119, %115
  br label %35

115:                                              ; preds = %107
  %116 = load i32, ptr %8, align 4
  %117 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3648(ptr nonnull align 16 %9)
  %118 = add nsw i32 %116, %117
  store i32 %118, ptr %8, align 4
  br label %114

119:                                              ; preds = %107
  br label %114

120:                                              ; preds = %126, %123
  %121 = load i32, ptr %5, align 4
  %122 = icmp sge i32 %121, 32767
  br i1 %122, label %137, label %140

123:                                              ; preds = %35
  %124 = load i32, ptr %5, align 4
  %125 = add i32 %124, 1
  store i32 %125, ptr %5, align 4
  br label %120

126:                                              ; preds = %35
  %127 = load i128, ptr %7, align 16
  %128 = shl i128 %127, 1
  %129 = load i128, ptr %6, align 16
  %130 = lshr i128 %129, 127
  %131 = or i128 %128, %130
  store i128 %131, ptr %7, align 16
  %132 = load i128, ptr %6, align 16
  %133 = shl i128 %132, 1
  store i128 %133, ptr %6, align 16
  br label %120

134:                                              ; preds = %140
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 undef, i64 16, i1 false)
  %135 = load i32, ptr %5, align 4
  %136 = icmp sle i32 %135, 0
  br i1 %136, label %144, label %150

137:                                              ; preds = %120
  %138 = or i128 170135991163610696904058773219554885632, %26
  %139 = bitcast i128 %138 to fp128
  br label %33

140:                                              ; preds = %120
  br label %134

141:                                              ; preds = %158, %150
  %142 = load i128, ptr %6, align 16
  %143 = icmp ugt i128 %142, -170141183460469231731687303715884105728
  br i1 %143, label %170, label %173

144:                                              ; preds = %134
  %145 = load i32, ptr %5, align 4
  %146 = zext i32 %145 to i128
  %147 = sub i128 1, %146
  %148 = trunc i128 %147 to i32
  %149 = icmp uge i32 %148, 128
  br i1 %149, label %164, label %166

150:                                              ; preds = %134
  %151 = load i128, ptr %7, align 16
  %152 = and i128 %151, 5192296858534827628530496329220095
  store i128 %152, ptr %4, align 16
  %153 = load i128, ptr %4, align 16
  %154 = load i32, ptr %5, align 4
  %155 = sext i32 %154 to i128
  %156 = shl i128 %155, 112
  %157 = or i128 %153, %156
  store i128 %157, ptr %4, align 16
  br label %141

158:                                              ; preds = %166
  %159 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3650(ptr nonnull align 16 %7, ptr nonnull align 16 %6, i32 %148)
  %160 = load i128, ptr %6, align 16
  %161 = zext i1 %159 to i128
  %162 = or i128 %160, %161
  store i128 %162, ptr %6, align 16
  %163 = load i128, ptr %7, align 16
  store i128 %163, ptr %4, align 16
  br label %141

164:                                              ; preds = %144
  %165 = bitcast i128 %26 to fp128
  br label %33

166:                                              ; preds = %144
  br label %158

167:                                              ; preds = %173, %170
  %168 = load i128, ptr %6, align 16
  %169 = icmp eq i128 %168, -170141183460469231731687303715884105728
  br i1 %169, label %179, label %184

170:                                              ; preds = %141
  %171 = load i128, ptr %4, align 16
  %172 = add i128 %171, 1
  store i128 %172, ptr %4, align 16
  br label %167

173:                                              ; preds = %141
  br label %167

174:                                              ; preds = %184, %179
  %175 = load i128, ptr %4, align 16
  %176 = or i128 %175, %26
  store i128 %176, ptr %4, align 16
  %177 = load i128, ptr %4, align 16
  %178 = bitcast i128 %177 to fp128
  br label %33

179:                                              ; preds = %167
  %180 = load i128, ptr %4, align 16
  %181 = load i128, ptr %4, align 16
  %182 = and i128 %181, 1
  %183 = add i128 %180, %182
  store i128 %183, ptr %4, align 16
  br label %174

184:                                              ; preds = %167
  br label %174
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %0, i128 %1, ptr nonnull align 16 %2, ptr nonnull align 16 %3) unnamed_addr #0 {
  %5 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %0)
  %6 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %1)
  %7 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %5, i64 %6)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

10:                                               ; preds = %4
  %11 = extractvalue { i64, i1 } %7, 0
  %12 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %0)
  %13 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %1)
  %14 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %12, i64 %13)
  %15 = extractvalue { i64, i1 } %14, 1
  br i1 %15, label %16, label %17

16:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %10
  %18 = extractvalue { i64, i1 } %14, 0
  %19 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %0)
  %20 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %1)
  %21 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 %20)
  %22 = extractvalue { i64, i1 } %21, 1
  br i1 %22, label %23, label %24

23:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

24:                                               ; preds = %17
  %25 = extractvalue { i64, i1 } %21, 0
  %26 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %0)
  %27 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %1)
  %28 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %26, i64 %27)
  %29 = extractvalue { i64, i1 } %28, 1
  br i1 %29, label %30, label %31

30:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

31:                                               ; preds = %24
  %32 = extractvalue { i64, i1 } %28, 0
  %33 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %0)
  %34 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %1)
  %35 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %33, i64 %34)
  %36 = extractvalue { i64, i1 } %35, 1
  br i1 %36, label %37, label %38

37:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

38:                                               ; preds = %31
  %39 = extractvalue { i64, i1 } %35, 0
  %40 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %0)
  %41 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %1)
  %42 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 %41)
  %43 = extractvalue { i64, i1 } %42, 1
  br i1 %43, label %44, label %45

44:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %38
  %46 = extractvalue { i64, i1 } %42, 0
  %47 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %0)
  %48 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %1)
  %49 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %47, i64 %48)
  %50 = extractvalue { i64, i1 } %49, 1
  br i1 %50, label %51, label %52

51:                                               ; preds = %45
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %45
  %53 = extractvalue { i64, i1 } %49, 0
  %54 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %0)
  %55 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %1)
  %56 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 %55)
  %57 = extractvalue { i64, i1 } %56, 1
  br i1 %57, label %58, label %59

58:                                               ; preds = %52
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

59:                                               ; preds = %52
  %60 = extractvalue { i64, i1 } %56, 0
  %61 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %0)
  %62 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %1)
  %63 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %61, i64 %62)
  %64 = extractvalue { i64, i1 } %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i64, i1 } %63, 0
  %68 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %0)
  %69 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %1)
  %70 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 %69)
  %71 = extractvalue { i64, i1 } %70, 1
  br i1 %71, label %72, label %73

72:                                               ; preds = %66
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %66
  %74 = extractvalue { i64, i1 } %70, 0
  %75 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %0)
  %76 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %1)
  %77 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %75, i64 %76)
  %78 = extractvalue { i64, i1 } %77, 1
  br i1 %78, label %79, label %80

79:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %73
  %81 = extractvalue { i64, i1 } %77, 0
  %82 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %0)
  %83 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %1)
  %84 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %82, i64 %83)
  %85 = extractvalue { i64, i1 } %84, 1
  br i1 %85, label %86, label %87

86:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

87:                                               ; preds = %80
  %88 = extractvalue { i64, i1 } %84, 0
  %89 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %0)
  %90 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %1)
  %91 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %89, i64 %90)
  %92 = extractvalue { i64, i1 } %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %87
  %95 = extractvalue { i64, i1 } %91, 0
  %96 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %0)
  %97 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %1)
  %98 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %96, i64 %97)
  %99 = extractvalue { i64, i1 } %98, 1
  br i1 %99, label %100, label %101

100:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %94
  %102 = extractvalue { i64, i1 } %98, 0
  %103 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %0)
  %104 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %1)
  %105 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %103, i64 %104)
  %106 = extractvalue { i64, i1 } %105, 1
  br i1 %106, label %107, label %108

107:                                              ; preds = %101
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

108:                                              ; preds = %101
  %109 = extractvalue { i64, i1 } %105, 0
  %110 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %0)
  %111 = call fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %1)
  %112 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %110, i64 %111)
  %113 = extractvalue { i64, i1 } %112, 1
  br i1 %113, label %114, label %115

114:                                              ; preds = %108
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

115:                                              ; preds = %108
  %116 = extractvalue { i64, i1 } %112, 0
  %117 = zext i64 %116 to i128
  %118 = zext i64 %88 to i128
  %119 = zext i64 %109 to i128
  %120 = add i128 %118, %119
  %121 = zext i64 %60 to i128
  %122 = zext i64 %81 to i128
  %123 = add i128 %121, %122
  %124 = zext i64 %102 to i128
  %125 = add i128 %123, %124
  %126 = zext i64 %32 to i128
  %127 = zext i64 %53 to i128
  %128 = add i128 %126, %127
  %129 = zext i64 %74 to i128
  %130 = add i128 %128, %129
  %131 = zext i64 %95 to i128
  %132 = add i128 %130, %131
  %133 = zext i64 %25 to i128
  %134 = zext i64 %46 to i128
  %135 = add i128 %133, %134
  %136 = zext i64 %67 to i128
  %137 = add i128 %135, %136
  %138 = zext i64 %18 to i128
  %139 = zext i64 %39 to i128
  %140 = add i128 %138, %139
  %141 = zext i64 %11 to i128
  %142 = and i128 %117, 18446744073709551615
  %143 = and i128 %120, 4294967295
  %144 = shl i128 %143, 32
  %145 = add i128 %142, %144
  %146 = lshr i128 %117, 64
  %147 = lshr i128 %120, 32
  %148 = and i128 %147, 18446744073709551615
  %149 = add i128 %146, %148
  %150 = and i128 %125, 18446744073709551615
  %151 = add i128 %149, %150
  %152 = shl i128 %132, 32
  %153 = and i128 %152, 18446744069414584320
  %154 = add i128 %151, %153
  %155 = shl i128 %154, 64
  %156 = add i128 %145, %155
  store i128 %156, ptr %3, align 16
  %157 = lshr i128 %154, 64
  %158 = lshr i128 %120, 96
  %159 = add i128 %157, %158
  %160 = lshr i128 %125, 64
  %161 = add i128 %159, %160
  %162 = lshr i128 %132, 32
  %163 = add i128 %161, %162
  %164 = add i128 %163, %137
  %165 = shl i128 %140, 32
  %166 = add i128 %164, %165
  %167 = shl i128 %141, 64
  %168 = add i128 %166, %167
  store i128 %168, ptr %2, align 16
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3648(ptr nonnull align 16 %0) unnamed_addr #0 {
  %2 = load i128, ptr %0, align 16
  %3 = call i128 @llvm.ctlz.i128(i128 %2, i1 false)
  %4 = trunc i128 %3 to i8
  %5 = call fastcc { i8, i1 } @llvm.usub.with.overflow.i8(i8 %4, i8 15)
  %6 = extractvalue { i8, i1 } %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

8:                                                ; preds = %1
  %9 = extractvalue { i8, i1 } %5, 0
  %10 = load i128, ptr %0, align 16
  %11 = sub i8 127, %9
  %12 = icmp ule i8 %11, 127
  br i1 %12, label %20, label %21

13:                                               ; preds = %20
  %14 = trunc i8 %9 to i7
  %15 = zext i7 %14 to i128
  %16 = shl i128 %10, %15
  store i128 %16, ptr %0, align 16
  %17 = zext i8 %9 to i32
  %18 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %22, label %23

20:                                               ; preds = %8
  br label %13

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @158)
  unreachable

22:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

23:                                               ; preds = %13
  %24 = extractvalue { i32, i1 } %18, 0
  ret i32 %24
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3650(ptr nonnull align 16 %0, ptr nonnull align 16 %1, i32 %2) unnamed_addr #0 {
  %4 = alloca i1, align 1
  store i1 false, ptr %4, align 1
  %5 = icmp ult i32 %2, 128
  br i1 %5, label %8, label %29

6:                                                ; preds = %31, %8
  %7 = load i1, ptr %4, align 1
  ret i1 %7

8:                                                ; preds = %3
  %9 = load i128, ptr %1, align 16
  %10 = sub i32 128, %2
  %11 = trunc i32 %10 to i7
  %12 = zext i7 %11 to i128
  %13 = shl i128 %9, %12
  %14 = icmp ne i128 %13, 0
  store i1 %14, ptr %4, align 1
  %15 = load i128, ptr %0, align 16
  %16 = sub i32 128, %2
  %17 = trunc i32 %16 to i7
  %18 = zext i7 %17 to i128
  %19 = shl i128 %15, %18
  %20 = load i128, ptr %1, align 16
  %21 = trunc i32 %2 to i7
  %22 = zext i7 %21 to i128
  %23 = lshr i128 %20, %22
  %24 = or i128 %19, %23
  store i128 %24, ptr %1, align 16
  %25 = load i128, ptr %0, align 16
  %26 = trunc i32 %2 to i7
  %27 = zext i7 %26 to i128
  %28 = lshr i128 %25, %27
  store i128 %28, ptr %0, align 16
  br label %6

29:                                               ; preds = %3
  %30 = icmp ult i32 %2, 256
  br i1 %30, label %32, label %46

31:                                               ; preds = %46, %32
  br label %6

32:                                               ; preds = %29
  %33 = load i128, ptr %0, align 16
  %34 = sub i32 256, %2
  %35 = trunc i32 %34 to i7
  %36 = zext i7 %35 to i128
  %37 = shl i128 %33, %36
  %38 = load i128, ptr %1, align 16
  %39 = or i128 %37, %38
  %40 = icmp ne i128 %39, 0
  store i1 %40, ptr %4, align 1
  %41 = load i128, ptr %0, align 16
  %42 = sub i32 %2, 128
  %43 = trunc i32 %42 to i7
  %44 = zext i7 %43 to i128
  %45 = lshr i128 %41, %44
  store i128 %45, ptr %1, align 16
  store i128 0, ptr %0, align 16
  br label %31

46:                                               ; preds = %29
  %47 = load i128, ptr %0, align 16
  %48 = load i128, ptr %1, align 16
  %49 = or i128 %47, %48
  %50 = icmp ne i128 %49, 0
  store i1 %50, ptr %4, align 1
  store i128 0, ptr %1, align 16
  store i128 0, ptr %0, align 16
  br label %31
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_1(i128 %0) unnamed_addr #0 {
  %2 = lshr i128 %0, 96
  %3 = trunc i128 %2 to i32
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_2(i128 %0) unnamed_addr #0 {
  %2 = lshr i128 %0, 64
  %3 = trunc i128 %2 to i32
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_3(i128 %0) unnamed_addr #0 {
  %2 = lshr i128 %0, 32
  %3 = trunc i128 %2 to i32
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.common.wideMultiply__anon_3649.S.Word_4(i128 %0) unnamed_addr #0 {
  %2 = trunc i128 %0 to i32
  %3 = zext i32 %2 to i64
  ret i64 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__mulxf3(i80 %0, i80 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i80, align 16
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i80, align 16
  store i80 604455992278286946271232, ptr %11, align 16
  %12 = load i80, ptr %11, align 16
  %13 = or i80 %12, 4611686018427387904
  %14 = lshr i80 %0, 64
  %15 = and i80 %14, 32767
  %16 = trunc i80 %15 to i32
  %17 = lshr i80 %1, 64
  %18 = and i80 %17, 32767
  %19 = trunc i80 %18 to i32
  %20 = xor i80 %0, %1
  %21 = and i80 %20, -604462909807314587353088
  %22 = and i80 %0, 18446744073709551615
  %23 = trunc i80 %22 to i64
  store i64 %23, ptr %10, align 8
  %24 = and i80 %1, 18446744073709551615
  %25 = trunc i80 %24 to i64
  store i64 %25, ptr %9, align 8
  store i32 0, ptr %8, align 4
  %26 = sub i32 %16, 1
  %27 = icmp uge i32 %26, 32766
  br i1 %27, label %46, label %47

28:                                               ; preds = %168, %149, %119, %87, %83, %80, %78, %72, %70, %62, %57
  %29 = phi i80 [ %58, %57 ], [ %63, %62 ], [ %71, %70 ], [ %13, %72 ], [ %79, %78 ], [ %13, %80 ], [ %21, %83 ], [ %21, %87 ], [ %120, %119 ], [ %21, %149 ], [ %171, %168 ]
  ret i80 %29

30:                                               ; preds = %96, %54
  %31 = load i64, ptr %10, align 8
  %32 = or i64 %31, -9223372036854775808
  store i64 %32, ptr %10, align 8
  %33 = load i64, ptr %9, align 8
  %34 = or i64 %33, -9223372036854775808
  store i64 %34, ptr %9, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %7, i8 undef, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 undef, i64 8, i1 false)
  %35 = load i64, ptr %10, align 8
  %36 = load i64, ptr %9, align 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3644(i64 %35, i64 %36, ptr nonnull align 8 %7, ptr nonnull align 8 %6)
  %37 = add nuw i32 %16, %19
  %38 = sub nsw i32 %37, 16383
  %39 = load i32, ptr %8, align 4
  %40 = add nsw i32 %38, %39
  store i32 %40, ptr %5, align 4
  %41 = load i64, ptr %7, align 8
  %42 = and i64 %41, -9223372036854775808
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %105, label %108

44:                                               ; preds = %47, %46
  %45 = phi i1 [ true, %46 ], [ %49, %47 ]
  br i1 %45, label %50, label %54

46:                                               ; preds = %2
  br label %44

47:                                               ; preds = %2
  %48 = sub i32 %19, 1
  %49 = icmp uge i32 %48, 32766
  br label %44

50:                                               ; preds = %44
  %51 = and i80 %0, 604462909807314587353087
  %52 = and i80 %1, 604462909807314587353087
  %53 = icmp ugt i80 %51, 604453686435277732577280
  br i1 %53, label %57, label %59

54:                                               ; preds = %44
  br label %30

55:                                               ; preds = %59
  %56 = icmp ugt i80 %52, 604453686435277732577280
  br i1 %56, label %62, label %64

57:                                               ; preds = %50
  %58 = or i80 %0, 4611686018427387904
  br label %28

59:                                               ; preds = %50
  br label %55

60:                                               ; preds = %64
  %61 = icmp eq i80 %51, 604453686435277732577280
  br i1 %61, label %67, label %69

62:                                               ; preds = %55
  %63 = or i80 %1, 4611686018427387904
  br label %28

64:                                               ; preds = %55
  br label %60

65:                                               ; preds = %69
  %66 = icmp eq i80 %52, 604453686435277732577280
  br i1 %66, label %75, label %77

67:                                               ; preds = %60
  %68 = icmp ne i80 %52, 0
  br i1 %68, label %70, label %72

69:                                               ; preds = %60
  br label %65

70:                                               ; preds = %67
  %71 = or i80 %51, %21
  br label %28

72:                                               ; preds = %67
  br label %28

73:                                               ; preds = %77
  %74 = icmp eq i80 %51, 0
  br i1 %74, label %83, label %84

75:                                               ; preds = %65
  %76 = icmp ne i80 %51, 0
  br i1 %76, label %78, label %80

77:                                               ; preds = %65
  br label %73

78:                                               ; preds = %75
  %79 = or i80 %52, %21
  br label %28

80:                                               ; preds = %75
  br label %28

81:                                               ; preds = %84
  %82 = icmp eq i80 %52, 0
  br i1 %82, label %87, label %88

83:                                               ; preds = %73
  br label %28

84:                                               ; preds = %73
  br label %81

85:                                               ; preds = %88
  %86 = icmp ult i80 %51, 27670116110564327424
  br i1 %86, label %91, label %95

87:                                               ; preds = %81
  br label %28

88:                                               ; preds = %81
  br label %85

89:                                               ; preds = %95, %91
  %90 = icmp ult i80 %52, 27670116110564327424
  br i1 %90, label %97, label %101

91:                                               ; preds = %85
  %92 = load i32, ptr %8, align 4
  %93 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3653(ptr nonnull align 8 %10)
  %94 = add nsw i32 %92, %93
  store i32 %94, ptr %8, align 4
  br label %89

95:                                               ; preds = %85
  br label %89

96:                                               ; preds = %101, %97
  br label %30

97:                                               ; preds = %89
  %98 = load i32, ptr %8, align 4
  %99 = call fastcc i32 @compiler_rt.mulf3.normalize__anon_3653(ptr nonnull align 8 %9)
  %100 = add nsw i32 %98, %99
  store i32 %100, ptr %8, align 4
  br label %96

101:                                              ; preds = %89
  br label %96

102:                                              ; preds = %108, %105
  %103 = load i32, ptr %5, align 4
  %104 = icmp sge i32 %103, 32767
  br i1 %104, label %119, label %121

105:                                              ; preds = %30
  %106 = load i32, ptr %5, align 4
  %107 = add i32 %106, 1
  store i32 %107, ptr %5, align 4
  br label %102

108:                                              ; preds = %30
  %109 = load i64, ptr %7, align 8
  %110 = shl i64 %109, 1
  %111 = load i64, ptr %6, align 8
  %112 = lshr i64 %111, 63
  %113 = or i64 %110, %112
  store i64 %113, ptr %7, align 8
  %114 = load i64, ptr %6, align 8
  %115 = shl i64 %114, 1
  store i64 %115, ptr %6, align 8
  br label %102

116:                                              ; preds = %121
  call void @llvm.memset.p0.i64(ptr align 16 %4, i8 undef, i64 16, i1 false)
  %117 = load i32, ptr %5, align 4
  %118 = icmp sle i32 %117, 0
  br i1 %118, label %125, label %131

119:                                              ; preds = %102
  %120 = or i80 604453686435277732577280, %21
  br label %28

121:                                              ; preds = %102
  br label %116

122:                                              ; preds = %140, %131
  %123 = load i64, ptr %6, align 8
  %124 = icmp ugt i64 %123, -9223372036854775808
  br i1 %124, label %154, label %157

125:                                              ; preds = %116
  %126 = load i32, ptr %5, align 4
  %127 = zext i32 %126 to i80
  %128 = sub i80 1, %127
  %129 = trunc i80 %128 to i32
  %130 = icmp uge i32 %129, 64
  br i1 %130, label %149, label %150

131:                                              ; preds = %116
  %132 = load i64, ptr %7, align 8
  %133 = zext i64 %132 to i80
  %134 = and i80 %133, 18446744073709551615
  store i80 %134, ptr %4, align 16
  %135 = load i80, ptr %4, align 16
  %136 = load i32, ptr %5, align 4
  %137 = sext i32 %136 to i80
  %138 = shl i80 %137, 64
  %139 = or i80 %135, %138
  store i80 %139, ptr %4, align 16
  br label %122

140:                                              ; preds = %150
  %141 = call fastcc i1 @compiler_rt.mulf3.wideShrWithTruncation__anon_3645(ptr nonnull align 8 %7, ptr nonnull align 8 %6, i32 %129)
  %142 = load i64, ptr %6, align 8
  %143 = zext i1 %141 to i64
  %144 = or i64 %142, %143
  store i64 %144, ptr %6, align 8
  %145 = load i64, ptr %7, align 8
  %146 = zext i64 %145 to i80
  store i80 %146, ptr %4, align 16
  %147 = load i80, ptr %4, align 16
  %148 = or i80 %147, 9223372036854775808
  store i80 %148, ptr %4, align 16
  br label %122

149:                                              ; preds = %125
  br label %28

150:                                              ; preds = %125
  br label %140

151:                                              ; preds = %157, %154
  %152 = load i64, ptr %6, align 8
  %153 = icmp eq i64 %152, -9223372036854775808
  br i1 %153, label %162, label %167

154:                                              ; preds = %122
  %155 = load i80, ptr %4, align 16
  %156 = add i80 %155, 1
  store i80 %156, ptr %4, align 16
  br label %151

157:                                              ; preds = %122
  br label %151

158:                                              ; preds = %167, %162
  %159 = load i80, ptr %4, align 16
  %160 = lshr i80 %159, 64
  %161 = icmp ne i80 %160, 0
  br i1 %161, label %172, label %175

162:                                              ; preds = %151
  %163 = load i80, ptr %4, align 16
  %164 = load i80, ptr %4, align 16
  %165 = and i80 %164, 1
  %166 = add i80 %163, %165
  store i80 %166, ptr %4, align 16
  br label %158

167:                                              ; preds = %151
  br label %158

168:                                              ; preds = %175, %172
  %169 = load i80, ptr %4, align 16
  %170 = or i80 %169, %21
  store i80 %170, ptr %4, align 16
  %171 = load i80, ptr %4, align 16
  br label %28

172:                                              ; preds = %158
  %173 = load i80, ptr %4, align 16
  %174 = or i80 %173, 9223372036854775808
  store i80 %174, ptr %4, align 16
  br label %168

175:                                              ; preds = %158
  %176 = load i80, ptr %4, align 16
  %177 = and i80 %176, 9223372036854775807
  store i80 %177, ptr %4, align 16
  br label %168
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.mulf3.normalize__anon_3653(ptr nonnull align 8 %0) unnamed_addr #0 {
  %2 = load i64, ptr %0, align 8
  %3 = call i64 @llvm.ctlz.i64(i64 %2, i1 false)
  %4 = trunc i64 %3 to i7
  %5 = load i64, ptr %0, align 8
  %6 = sub i7 63, %4
  %7 = icmp ule i7 %6, 63
  br i1 %7, label %15, label %16

8:                                                ; preds = %15
  %9 = trunc i7 %4 to i6
  %10 = zext i6 %9 to i64
  %11 = shl i64 %5, %10
  store i64 %11, ptr %0, align 8
  %12 = zext i7 %4 to i32
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %12)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %1
  br label %8

16:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @159)
  unreachable

17:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %8
  %19 = extractvalue { i32, i1 } %13, 0
  ret i32 %19
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__divhf3(half %0, half %1) #0 {
  %3 = fpext half %0 to float
  %4 = fpext half %1 to float
  %5 = call float @__divsf3(float %3, float %4)
  %6 = fptrunc float %5 to half
  ret half %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__divsf3(float %0, float %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast float %0 to i32
  %15 = lshr i32 %14, 23
  %16 = and i32 %15, 255
  %17 = bitcast float %1 to i32
  %18 = lshr i32 %17, 23
  %19 = and i32 %18, 255
  %20 = bitcast float %0 to i32
  %21 = bitcast float %1 to i32
  %22 = xor i32 %20, %21
  %23 = and i32 %22, -2147483648
  %24 = bitcast float %0 to i32
  %25 = and i32 %24, 8388607
  store i32 %25, ptr %13, align 4
  %26 = bitcast float %1 to i32
  %27 = and i32 %26, 8388607
  store i32 %27, ptr %12, align 4
  store i32 0, ptr %11, align 4
  %28 = sub i32 %16, 1
  %29 = icmp uge i32 %28, 254
  br i1 %29, label %102, label %103

30:                                               ; preds = %234, %213, %197, %190, %151, %147, %146, %138, %133, %132, %122, %115
  %31 = phi float [ %118, %115 ], [ %125, %122 ], [ 0x7FF8000000000000, %132 ], [ %135, %133 ], [ %139, %138 ], [ 0x7FF8000000000000, %146 ], [ %148, %147 ], [ %153, %151 ], [ %192, %190 ], [ %237, %234 ], [ %214, %213 ], [ %212, %197 ]
  ret float %31

32:                                               ; preds = %162, %112
  %33 = load i32, ptr %13, align 4
  %34 = or i32 %33, 8388608
  store i32 %34, ptr %13, align 4
  %35 = load i32, ptr %12, align 4
  %36 = or i32 %35, 8388608
  store i32 %36, ptr %12, align 4
  %37 = sub i32 %16, %19
  %38 = load i32, ptr %11, align 4
  %39 = add i32 %37, %38
  store i32 %39, ptr %10, align 4
  %40 = load i32, ptr %12, align 4
  %41 = shl i32 %40, 8
  %42 = sub i32 1963258675, %41
  store i32 %42, ptr %9, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %8, i8 -86, i64 4, i1 false)
  %43 = load i32, ptr %9, align 4
  %44 = zext i32 %43 to i64
  %45 = zext i32 %41 to i64
  %46 = mul i64 %44, %45
  %47 = lshr i64 %46, 32
  %48 = xor i64 %47, -1
  %49 = add i64 %48, 1
  %50 = trunc i64 %49 to i32
  store i32 %50, ptr %8, align 4
  %51 = load i32, ptr %9, align 4
  %52 = zext i32 %51 to i64
  %53 = load i32, ptr %8, align 4
  %54 = zext i32 %53 to i64
  %55 = mul i64 %52, %54
  %56 = lshr i64 %55, 31
  %57 = trunc i64 %56 to i32
  store i32 %57, ptr %9, align 4
  %58 = load i32, ptr %9, align 4
  %59 = zext i32 %58 to i64
  %60 = zext i32 %41 to i64
  %61 = mul i64 %59, %60
  %62 = lshr i64 %61, 32
  %63 = xor i64 %62, -1
  %64 = add i64 %63, 1
  %65 = trunc i64 %64 to i32
  store i32 %65, ptr %8, align 4
  %66 = load i32, ptr %9, align 4
  %67 = zext i32 %66 to i64
  %68 = load i32, ptr %8, align 4
  %69 = zext i32 %68 to i64
  %70 = mul i64 %67, %69
  %71 = lshr i64 %70, 31
  %72 = trunc i64 %71 to i32
  store i32 %72, ptr %9, align 4
  %73 = load i32, ptr %9, align 4
  %74 = zext i32 %73 to i64
  %75 = zext i32 %41 to i64
  %76 = mul i64 %74, %75
  %77 = lshr i64 %76, 32
  %78 = xor i64 %77, -1
  %79 = add i64 %78, 1
  %80 = trunc i64 %79 to i32
  store i32 %80, ptr %8, align 4
  %81 = load i32, ptr %9, align 4
  %82 = zext i32 %81 to i64
  %83 = load i32, ptr %8, align 4
  %84 = zext i32 %83 to i64
  %85 = mul i64 %82, %84
  %86 = lshr i64 %85, 31
  %87 = trunc i64 %86 to i32
  store i32 %87, ptr %9, align 4
  %88 = load i32, ptr %9, align 4
  %89 = sub i32 %88, 2
  store i32 %89, ptr %9, align 4
  %90 = load i32, ptr %9, align 4
  %91 = zext i32 %90 to i64
  %92 = load i32, ptr %13, align 4
  %93 = shl i32 %92, 1
  %94 = zext i32 %93 to i64
  %95 = mul i64 %91, %94
  %96 = lshr i64 %95, 32
  %97 = trunc i64 %96 to i32
  store i32 %97, ptr %7, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -86, i64 4, i1 false)
  %98 = load i32, ptr %7, align 4
  %99 = icmp ult i32 %98, 16777216
  br i1 %99, label %172, label %181

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %105, %103 ]
  br i1 %101, label %106, label %112

102:                                              ; preds = %2
  br label %100

103:                                              ; preds = %2
  %104 = sub i32 %19, 1
  %105 = icmp uge i32 %104, 254
  br label %100

106:                                              ; preds = %100
  %107 = bitcast float %0 to i32
  %108 = and i32 %107, 2147483647
  %109 = bitcast float %1 to i32
  %110 = and i32 %109, 2147483647
  %111 = icmp ugt i32 %108, 2139095040
  br i1 %111, label %115, label %119

112:                                              ; preds = %100
  br label %32

113:                                              ; preds = %119
  %114 = icmp ugt i32 %110, 2139095040
  br i1 %114, label %122, label %126

115:                                              ; preds = %106
  %116 = bitcast float %0 to i32
  %117 = or i32 %116, 4194304
  %118 = bitcast i32 %117 to float
  br label %30

119:                                              ; preds = %106
  br label %113

120:                                              ; preds = %126
  %121 = icmp eq i32 %108, 2139095040
  br i1 %121, label %129, label %131

122:                                              ; preds = %113
  %123 = bitcast float %1 to i32
  %124 = or i32 %123, 4194304
  %125 = bitcast i32 %124 to float
  br label %30

126:                                              ; preds = %113
  br label %120

127:                                              ; preds = %131
  %128 = icmp eq i32 %110, 2139095040
  br i1 %128, label %138, label %140

129:                                              ; preds = %120
  %130 = icmp eq i32 %110, 2139095040
  br i1 %130, label %132, label %133

131:                                              ; preds = %120
  br label %127

132:                                              ; preds = %129
  br label %30

133:                                              ; preds = %129
  %134 = or i32 %108, %23
  %135 = bitcast i32 %134 to float
  br label %30

136:                                              ; preds = %140
  %137 = icmp eq i32 %108, 0
  br i1 %137, label %143, label %145

138:                                              ; preds = %127
  %139 = bitcast i32 %23 to float
  br label %30

140:                                              ; preds = %127
  br label %136

141:                                              ; preds = %145
  %142 = icmp eq i32 %110, 0
  br i1 %142, label %151, label %154

143:                                              ; preds = %136
  %144 = icmp eq i32 %110, 0
  br i1 %144, label %146, label %147

145:                                              ; preds = %136
  br label %141

146:                                              ; preds = %143
  br label %30

147:                                              ; preds = %143
  %148 = bitcast i32 %23 to float
  br label %30

149:                                              ; preds = %154
  %150 = icmp ult i32 %108, 8388608
  br i1 %150, label %157, label %161

151:                                              ; preds = %141
  %152 = or i32 2139095040, %23
  %153 = bitcast i32 %152 to float
  br label %30

154:                                              ; preds = %141
  br label %149

155:                                              ; preds = %161, %157
  %156 = icmp ult i32 %110, 8388608
  br i1 %156, label %163, label %167

157:                                              ; preds = %149
  %158 = load i32, ptr %11, align 4
  %159 = call fastcc i32 @compiler_rt.common.normalize__anon_3624(ptr nonnull align 4 %13)
  %160 = add i32 %158, %159
  store i32 %160, ptr %11, align 4
  br label %155

161:                                              ; preds = %149
  br label %155

162:                                              ; preds = %167, %163
  br label %32

163:                                              ; preds = %155
  %164 = load i32, ptr %11, align 4
  %165 = call fastcc i32 @compiler_rt.common.normalize__anon_3624(ptr nonnull align 4 %12)
  %166 = sub i32 %164, %165
  store i32 %166, ptr %11, align 4
  br label %162

167:                                              ; preds = %155
  br label %162

168:                                              ; preds = %181, %172
  %169 = load i32, ptr %10, align 4
  %170 = add i32 %169, 127
  %171 = icmp sge i32 %170, 255
  br i1 %171, label %190, label %193

172:                                              ; preds = %32
  %173 = load i32, ptr %13, align 4
  %174 = shl i32 %173, 24
  %175 = load i32, ptr %7, align 4
  %176 = load i32, ptr %12, align 4
  %177 = mul i32 %175, %176
  %178 = sub i32 %174, %177
  store i32 %178, ptr %6, align 4
  %179 = load i32, ptr %10, align 4
  %180 = sub i32 %179, 1
  store i32 %180, ptr %10, align 4
  br label %168

181:                                              ; preds = %32
  %182 = load i32, ptr %7, align 4
  %183 = lshr i32 %182, 1
  store i32 %183, ptr %7, align 4
  %184 = load i32, ptr %13, align 4
  %185 = shl i32 %184, 23
  %186 = load i32, ptr %7, align 4
  %187 = load i32, ptr %12, align 4
  %188 = mul i32 %186, %187
  %189 = sub i32 %185, %188
  store i32 %189, ptr %6, align 4
  br label %168

190:                                              ; preds = %168
  %191 = or i32 2139095040, %23
  %192 = bitcast i32 %191 to float
  br label %30

193:                                              ; preds = %168
  %194 = icmp slt i32 %170, 1
  br i1 %194, label %195, label %197

195:                                              ; preds = %193
  %196 = icmp eq i32 %170, 0
  br i1 %196, label %215, label %226

197:                                              ; preds = %193
  %198 = load i32, ptr %6, align 4
  %199 = shl i32 %198, 1
  %200 = load i32, ptr %12, align 4
  %201 = icmp ugt i32 %199, %200
  %202 = load i32, ptr %7, align 4
  %203 = and i32 %202, 8388607
  store i32 %203, ptr %4, align 4
  %204 = load i32, ptr %4, align 4
  %205 = shl i32 %170, 23
  %206 = or i32 %204, %205
  store i32 %206, ptr %4, align 4
  %207 = load i32, ptr %4, align 4
  %208 = zext i1 %201 to i32
  %209 = add i32 %207, %208
  store i32 %209, ptr %4, align 4
  %210 = load i32, ptr %4, align 4
  %211 = or i32 %210, %23
  %212 = bitcast i32 %211 to float
  br label %30

213:                                              ; preds = %233, %226
  %214 = bitcast i32 %23 to float
  br label %30

215:                                              ; preds = %195
  %216 = load i32, ptr %6, align 4
  %217 = shl i32 %216, 1
  %218 = load i32, ptr %12, align 4
  %219 = icmp ugt i32 %217, %218
  %220 = load i32, ptr %7, align 4
  %221 = and i32 %220, 8388607
  store i32 %221, ptr %5, align 4
  %222 = load i32, ptr %5, align 4
  %223 = zext i1 %219 to i32
  %224 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %222, i32 %223)
  %225 = extractvalue { i32, i1 } %224, 1
  br i1 %225, label %227, label %228

226:                                              ; preds = %195
  br label %213

227:                                              ; preds = %215
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

228:                                              ; preds = %215
  %229 = extractvalue { i32, i1 } %224, 0
  store i32 %229, ptr %5, align 4
  %230 = load i32, ptr %5, align 4
  %231 = and i32 %230, -8388608
  %232 = icmp ugt i32 %231, 0
  br i1 %232, label %234, label %238

233:                                              ; preds = %238
  br label %213

234:                                              ; preds = %228
  %235 = load i32, ptr %5, align 4
  %236 = or i32 %235, %23
  %237 = bitcast i32 %236 to float
  br label %30

238:                                              ; preds = %228
  br label %233
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__divdf3(double %0, double %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = bitcast double %0 to i64
  %18 = lshr i64 %17, 52
  %19 = and i64 %18, 2047
  %20 = trunc i64 %19 to i32
  %21 = bitcast double %1 to i64
  %22 = lshr i64 %21, 52
  %23 = and i64 %22, 2047
  %24 = trunc i64 %23 to i32
  %25 = bitcast double %0 to i64
  %26 = bitcast double %1 to i64
  %27 = xor i64 %25, %26
  %28 = and i64 %27, -9223372036854775808
  %29 = bitcast double %0 to i64
  %30 = and i64 %29, 4503599627370495
  store i64 %30, ptr %16, align 8
  %31 = bitcast double %1 to i64
  %32 = and i64 %31, 4503599627370495
  store i64 %32, ptr %15, align 8
  store i32 0, ptr %14, align 4
  %33 = sub i32 %20, 1
  %34 = icmp uge i32 %33, 2046
  br i1 %34, label %135, label %136

35:                                               ; preds = %268, %247, %230, %223, %184, %180, %179, %171, %166, %165, %155, %148
  %36 = phi double [ %151, %148 ], [ %158, %155 ], [ 0x7FF8000000000000, %165 ], [ %168, %166 ], [ %172, %171 ], [ 0x7FF8000000000000, %179 ], [ %181, %180 ], [ %186, %184 ], [ %225, %223 ], [ %271, %268 ], [ %248, %247 ], [ %246, %230 ]
  ret double %36

37:                                               ; preds = %195, %145
  %38 = load i64, ptr %16, align 8
  %39 = or i64 %38, 4503599627370496
  store i64 %39, ptr %16, align 8
  %40 = load i64, ptr %15, align 8
  %41 = or i64 %40, 4503599627370496
  store i64 %41, ptr %15, align 8
  %42 = sub i32 %20, %24
  %43 = load i32, ptr %14, align 4
  %44 = add i32 %42, %43
  store i32 %44, ptr %13, align 4
  %45 = load i64, ptr %15, align 8
  %46 = lshr i64 %45, 21
  %47 = trunc i64 %46 to i32
  %48 = sub i32 1963258675, %47
  store i32 %48, ptr %12, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %11, i8 -86, i64 4, i1 false)
  %49 = load i32, ptr %12, align 4
  %50 = zext i32 %49 to i64
  %51 = zext i32 %47 to i64
  %52 = mul i64 %50, %51
  %53 = lshr i64 %52, 32
  %54 = xor i64 %53, -1
  %55 = add i64 %54, 1
  %56 = trunc i64 %55 to i32
  store i32 %56, ptr %11, align 4
  %57 = load i32, ptr %12, align 4
  %58 = zext i32 %57 to i64
  %59 = load i32, ptr %11, align 4
  %60 = zext i32 %59 to i64
  %61 = mul i64 %58, %60
  %62 = lshr i64 %61, 31
  %63 = trunc i64 %62 to i32
  store i32 %63, ptr %12, align 4
  %64 = load i32, ptr %12, align 4
  %65 = zext i32 %64 to i64
  %66 = zext i32 %47 to i64
  %67 = mul i64 %65, %66
  %68 = lshr i64 %67, 32
  %69 = xor i64 %68, -1
  %70 = add i64 %69, 1
  %71 = trunc i64 %70 to i32
  store i32 %71, ptr %11, align 4
  %72 = load i32, ptr %12, align 4
  %73 = zext i32 %72 to i64
  %74 = load i32, ptr %11, align 4
  %75 = zext i32 %74 to i64
  %76 = mul i64 %73, %75
  %77 = lshr i64 %76, 31
  %78 = trunc i64 %77 to i32
  store i32 %78, ptr %12, align 4
  %79 = load i32, ptr %12, align 4
  %80 = zext i32 %79 to i64
  %81 = zext i32 %47 to i64
  %82 = mul i64 %80, %81
  %83 = lshr i64 %82, 32
  %84 = xor i64 %83, -1
  %85 = add i64 %84, 1
  %86 = trunc i64 %85 to i32
  store i32 %86, ptr %11, align 4
  %87 = load i32, ptr %12, align 4
  %88 = zext i32 %87 to i64
  %89 = load i32, ptr %11, align 4
  %90 = zext i32 %89 to i64
  %91 = mul i64 %88, %90
  %92 = lshr i64 %91, 31
  %93 = trunc i64 %92 to i32
  store i32 %93, ptr %12, align 4
  %94 = load i32, ptr %12, align 4
  %95 = sub i32 %94, 1
  store i32 %95, ptr %12, align 4
  %96 = load i64, ptr %15, align 8
  %97 = shl i64 %96, 11
  %98 = trunc i64 %97 to i32
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 8, i1 false)
  %99 = load i32, ptr %12, align 4
  %100 = zext i32 %99 to i64
  %101 = zext i32 %47 to i64
  %102 = mul i64 %100, %101
  %103 = load i32, ptr %12, align 4
  %104 = zext i32 %103 to i64
  %105 = zext i32 %98 to i64
  %106 = mul i64 %104, %105
  %107 = lshr i64 %106, 32
  %108 = add i64 %102, %107
  %109 = xor i64 %108, -1
  %110 = add i64 %109, 1
  store i64 %110, ptr %10, align 8
  %111 = load i64, ptr %10, align 8
  %112 = lshr i64 %111, 32
  %113 = trunc i64 %112 to i32
  %114 = load i64, ptr %10, align 8
  %115 = trunc i64 %114 to i32
  %116 = load i32, ptr %12, align 4
  %117 = zext i32 %116 to i64
  %118 = zext i32 %113 to i64
  %119 = mul i64 %117, %118
  %120 = load i32, ptr %12, align 4
  %121 = zext i32 %120 to i64
  %122 = zext i32 %115 to i64
  %123 = mul i64 %121, %122
  %124 = lshr i64 %123, 32
  %125 = add i64 %119, %124
  store i64 %125, ptr %9, align 8
  %126 = load i64, ptr %9, align 8
  %127 = sub i64 %126, 2
  store i64 %127, ptr %9, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %7, i8 -86, i64 8, i1 false)
  %128 = load i64, ptr %16, align 8
  %129 = shl i64 %128, 2
  %130 = load i64, ptr %9, align 8
  call fastcc void @compiler_rt.common.wideMultiply__anon_3644(i64 %129, i64 %130, ptr nonnull align 8 %8, ptr nonnull align 8 %7)
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 8, i1 false)
  %131 = load i64, ptr %8, align 8
  %132 = icmp ult i64 %131, 9007199254740992
  br i1 %132, label %205, label %214

133:                                              ; preds = %136, %135
  %134 = phi i1 [ true, %135 ], [ %138, %136 ]
  br i1 %134, label %139, label %145

135:                                              ; preds = %2
  br label %133

136:                                              ; preds = %2
  %137 = sub i32 %24, 1
  %138 = icmp uge i32 %137, 2046
  br label %133

139:                                              ; preds = %133
  %140 = bitcast double %0 to i64
  %141 = and i64 %140, 9223372036854775807
  %142 = bitcast double %1 to i64
  %143 = and i64 %142, 9223372036854775807
  %144 = icmp ugt i64 %141, 9218868437227405312
  br i1 %144, label %148, label %152

145:                                              ; preds = %133
  br label %37

146:                                              ; preds = %152
  %147 = icmp ugt i64 %143, 9218868437227405312
  br i1 %147, label %155, label %159

148:                                              ; preds = %139
  %149 = bitcast double %0 to i64
  %150 = or i64 %149, 2251799813685248
  %151 = bitcast i64 %150 to double
  br label %35

152:                                              ; preds = %139
  br label %146

153:                                              ; preds = %159
  %154 = icmp eq i64 %141, 9218868437227405312
  br i1 %154, label %162, label %164

155:                                              ; preds = %146
  %156 = bitcast double %1 to i64
  %157 = or i64 %156, 2251799813685248
  %158 = bitcast i64 %157 to double
  br label %35

159:                                              ; preds = %146
  br label %153

160:                                              ; preds = %164
  %161 = icmp eq i64 %143, 9218868437227405312
  br i1 %161, label %171, label %173

162:                                              ; preds = %153
  %163 = icmp eq i64 %143, 9218868437227405312
  br i1 %163, label %165, label %166

164:                                              ; preds = %153
  br label %160

165:                                              ; preds = %162
  br label %35

166:                                              ; preds = %162
  %167 = or i64 %141, %28
  %168 = bitcast i64 %167 to double
  br label %35

169:                                              ; preds = %173
  %170 = icmp eq i64 %141, 0
  br i1 %170, label %176, label %178

171:                                              ; preds = %160
  %172 = bitcast i64 %28 to double
  br label %35

173:                                              ; preds = %160
  br label %169

174:                                              ; preds = %178
  %175 = icmp eq i64 %143, 0
  br i1 %175, label %184, label %187

176:                                              ; preds = %169
  %177 = icmp eq i64 %143, 0
  br i1 %177, label %179, label %180

178:                                              ; preds = %169
  br label %174

179:                                              ; preds = %176
  br label %35

180:                                              ; preds = %176
  %181 = bitcast i64 %28 to double
  br label %35

182:                                              ; preds = %187
  %183 = icmp ult i64 %141, 4503599627370496
  br i1 %183, label %190, label %194

184:                                              ; preds = %174
  %185 = or i64 9218868437227405312, %28
  %186 = bitcast i64 %185 to double
  br label %35

187:                                              ; preds = %174
  br label %182

188:                                              ; preds = %194, %190
  %189 = icmp ult i64 %143, 4503599627370496
  br i1 %189, label %196, label %200

190:                                              ; preds = %182
  %191 = load i32, ptr %14, align 4
  %192 = call fastcc i32 @compiler_rt.common.normalize__anon_3625(ptr nonnull align 8 %16)
  %193 = add i32 %191, %192
  store i32 %193, ptr %14, align 4
  br label %188

194:                                              ; preds = %182
  br label %188

195:                                              ; preds = %200, %196
  br label %37

196:                                              ; preds = %188
  %197 = load i32, ptr %14, align 4
  %198 = call fastcc i32 @compiler_rt.common.normalize__anon_3625(ptr nonnull align 8 %15)
  %199 = sub i32 %197, %198
  store i32 %199, ptr %14, align 4
  br label %195

200:                                              ; preds = %188
  br label %195

201:                                              ; preds = %214, %205
  %202 = load i32, ptr %13, align 4
  %203 = add i32 %202, 1023
  %204 = icmp sge i32 %203, 2047
  br i1 %204, label %223, label %226

205:                                              ; preds = %37
  %206 = load i64, ptr %16, align 8
  %207 = shl i64 %206, 53
  %208 = load i64, ptr %8, align 8
  %209 = load i64, ptr %15, align 8
  %210 = mul i64 %208, %209
  %211 = sub i64 %207, %210
  store i64 %211, ptr %6, align 8
  %212 = load i32, ptr %13, align 4
  %213 = sub i32 %212, 1
  store i32 %213, ptr %13, align 4
  br label %201

214:                                              ; preds = %37
  %215 = load i64, ptr %8, align 8
  %216 = lshr i64 %215, 1
  store i64 %216, ptr %8, align 8
  %217 = load i64, ptr %16, align 8
  %218 = shl i64 %217, 52
  %219 = load i64, ptr %8, align 8
  %220 = load i64, ptr %15, align 8
  %221 = mul i64 %219, %220
  %222 = sub i64 %218, %221
  store i64 %222, ptr %6, align 8
  br label %201

223:                                              ; preds = %201
  %224 = or i64 9218868437227405312, %28
  %225 = bitcast i64 %224 to double
  br label %35

226:                                              ; preds = %201
  %227 = icmp slt i32 %203, 1
  br i1 %227, label %228, label %230

228:                                              ; preds = %226
  %229 = icmp eq i32 %203, 0
  br i1 %229, label %249, label %260

230:                                              ; preds = %226
  %231 = load i64, ptr %6, align 8
  %232 = shl i64 %231, 1
  %233 = load i64, ptr %15, align 8
  %234 = icmp ugt i64 %232, %233
  %235 = load i64, ptr %8, align 8
  %236 = and i64 %235, 4503599627370495
  store i64 %236, ptr %4, align 8
  %237 = load i64, ptr %4, align 8
  %238 = sext i32 %203 to i64
  %239 = shl i64 %238, 52
  %240 = or i64 %237, %239
  store i64 %240, ptr %4, align 8
  %241 = load i64, ptr %4, align 8
  %242 = zext i1 %234 to i64
  %243 = add i64 %241, %242
  store i64 %243, ptr %4, align 8
  %244 = load i64, ptr %4, align 8
  %245 = or i64 %244, %28
  %246 = bitcast i64 %245 to double
  br label %35

247:                                              ; preds = %267, %260
  %248 = bitcast i64 %28 to double
  br label %35

249:                                              ; preds = %228
  %250 = load i64, ptr %6, align 8
  %251 = shl i64 %250, 1
  %252 = load i64, ptr %15, align 8
  %253 = icmp ugt i64 %251, %252
  %254 = load i64, ptr %8, align 8
  %255 = and i64 %254, 4503599627370495
  store i64 %255, ptr %5, align 8
  %256 = load i64, ptr %5, align 8
  %257 = zext i1 %253 to i64
  %258 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %256, i64 %257)
  %259 = extractvalue { i64, i1 } %258, 1
  br i1 %259, label %261, label %262

260:                                              ; preds = %228
  br label %247

261:                                              ; preds = %249
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

262:                                              ; preds = %249
  %263 = extractvalue { i64, i1 } %258, 0
  store i64 %263, ptr %5, align 8
  %264 = load i64, ptr %5, align 8
  %265 = and i64 %264, -4503599627370496
  %266 = icmp ne i64 %265, 0
  br i1 %266, label %268, label %272

267:                                              ; preds = %272
  br label %247

268:                                              ; preds = %262
  %269 = load i64, ptr %5, align 8
  %270 = or i64 %269, %28
  %271 = bitcast i64 %270 to double
  br label %35

272:                                              ; preds = %262
  br label %267
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__divxf3(i80 %0, i80 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i80, align 16
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i128, align 16
  %8 = alloca i128, align 16
  %9 = alloca i128, align 16
  %10 = alloca i128, align 16
  %11 = alloca i128, align 16
  %12 = alloca i128, align 16
  %13 = alloca i128, align 16
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i80, align 16
  %19 = alloca i80, align 16
  %20 = alloca i80, align 16
  store i80 604455992278286946271232, ptr %20, align 16
  %21 = load i80, ptr %20, align 16
  %22 = or i80 %21, 4611686018427387904
  %23 = lshr i80 %0, 64
  br i1 true, label %28, label %29

24:                                               ; preds = %28
  %25 = and i80 %23, 32767
  %26 = trunc i80 %25 to i32
  %27 = lshr i80 %1, 64
  br i1 true, label %39, label %40

28:                                               ; preds = %2
  br label %24

29:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

30:                                               ; preds = %39
  %31 = and i80 %27, 32767
  %32 = trunc i80 %31 to i32
  %33 = xor i80 %0, %1
  %34 = and i80 %33, -604462909807314587353088
  %35 = and i80 %0, 18446744073709551615
  store i80 %35, ptr %19, align 16
  %36 = and i80 %1, 18446744073709551615
  store i80 %36, ptr %18, align 16
  store i32 0, ptr %17, align 4
  %37 = sub i32 %26, 1
  %38 = icmp uge i32 %37, 32766
  br i1 %38, label %50, label %51

39:                                               ; preds = %24
  br label %30

40:                                               ; preds = %24
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

41:                                               ; preds = %100, %58
  %42 = sub i32 %26, %32
  %43 = load i32, ptr %17, align 4
  %44 = add i32 %42, %43
  store i32 %44, ptr %16, align 4
  %45 = load i80, ptr %18, align 16
  %46 = sub i80 18446744073709551615, %45
  %47 = icmp ule i80 %46, 18446744073709551615
  br i1 %47, label %207, label %208

48:                                               ; preds = %51, %50
  %49 = phi i1 [ true, %50 ], [ %53, %51 ]
  br i1 %49, label %54, label %58

50:                                               ; preds = %30
  br label %48

51:                                               ; preds = %30
  %52 = sub i32 %32, 1
  %53 = icmp uge i32 %52, 32766
  br label %48

54:                                               ; preds = %48
  %55 = and i80 %0, 604462909807314587353087
  %56 = and i80 %1, 604462909807314587353087
  %57 = icmp ugt i80 %55, 604453686435277732577280
  br i1 %57, label %61, label %63

58:                                               ; preds = %48
  br label %41

59:                                               ; preds = %63
  %60 = icmp ugt i80 %56, 604453686435277732577280
  br i1 %60, label %66, label %68

61:                                               ; preds = %54
  %62 = or i80 %0, 4611686018427387904
  ret i80 %62

63:                                               ; preds = %54
  br label %59

64:                                               ; preds = %68
  %65 = icmp eq i80 %55, 604453686435277732577280
  br i1 %65, label %71, label %73

66:                                               ; preds = %59
  %67 = or i80 %1, 4611686018427387904
  ret i80 %67

68:                                               ; preds = %59
  br label %64

69:                                               ; preds = %73
  %70 = icmp eq i80 %56, 604453686435277732577280
  br i1 %70, label %79, label %80

71:                                               ; preds = %64
  %72 = icmp eq i80 %56, 604453686435277732577280
  br i1 %72, label %74, label %75

73:                                               ; preds = %64
  br label %69

74:                                               ; preds = %71
  ret i80 %22

75:                                               ; preds = %71
  %76 = or i80 %55, %34
  ret i80 %76

77:                                               ; preds = %80
  %78 = icmp eq i80 %55, 0
  br i1 %78, label %83, label %85

79:                                               ; preds = %69
  ret i80 %34

80:                                               ; preds = %69
  br label %77

81:                                               ; preds = %85
  %82 = icmp eq i80 %56, 0
  br i1 %82, label %90, label %92

83:                                               ; preds = %77
  %84 = icmp eq i80 %56, 0
  br i1 %84, label %86, label %87

85:                                               ; preds = %77
  br label %81

86:                                               ; preds = %83
  ret i80 %22

87:                                               ; preds = %83
  ret i80 %34

88:                                               ; preds = %92
  %89 = icmp ult i80 %55, 9223372036854775808
  br i1 %89, label %95, label %99

90:                                               ; preds = %81
  %91 = or i80 604453686435277732577280, %34
  ret i80 %91

92:                                               ; preds = %81
  br label %88

93:                                               ; preds = %99, %95
  %94 = icmp ult i80 %56, 9223372036854775808
  br i1 %94, label %101, label %105

95:                                               ; preds = %88
  %96 = load i32, ptr %17, align 4
  %97 = call fastcc i32 @compiler_rt.common.normalize__anon_3627(ptr nonnull align 16 %19)
  %98 = add i32 %96, %97
  store i32 %98, ptr %17, align 4
  br label %93

99:                                               ; preds = %88
  br label %93

100:                                              ; preds = %105, %101
  br label %41

101:                                              ; preds = %93
  %102 = load i32, ptr %17, align 4
  %103 = call fastcc i32 @compiler_rt.common.normalize__anon_3627(ptr nonnull align 16 %18)
  %104 = sub i32 %102, %103
  store i32 %104, ptr %17, align 4
  br label %100

105:                                              ; preds = %93
  br label %100

106:                                              ; preds = %207
  %107 = trunc i80 %45 to i64
  %108 = sub i64 8432131806905394308, %107
  store i64 %108, ptr %15, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %14, i8 -86, i64 8, i1 false)
  %109 = load i64, ptr %15, align 8
  %110 = zext i64 %109 to i128
  %111 = zext i64 %107 to i128
  %112 = mul i128 %110, %111
  %113 = lshr i128 %112, 64
  %114 = xor i128 %113, -1
  %115 = add i128 %114, 1
  %116 = trunc i128 %115 to i64
  store i64 %116, ptr %14, align 8
  %117 = load i64, ptr %15, align 8
  %118 = zext i64 %117 to i128
  %119 = load i64, ptr %14, align 8
  %120 = zext i64 %119 to i128
  %121 = mul i128 %118, %120
  %122 = lshr i128 %121, 63
  %123 = trunc i128 %122 to i64
  store i64 %123, ptr %15, align 8
  %124 = load i64, ptr %15, align 8
  %125 = zext i64 %124 to i128
  %126 = zext i64 %107 to i128
  %127 = mul i128 %125, %126
  %128 = lshr i128 %127, 64
  %129 = xor i128 %128, -1
  %130 = add i128 %129, 1
  %131 = trunc i128 %130 to i64
  store i64 %131, ptr %14, align 8
  %132 = load i64, ptr %15, align 8
  %133 = zext i64 %132 to i128
  %134 = load i64, ptr %14, align 8
  %135 = zext i64 %134 to i128
  %136 = mul i128 %133, %135
  %137 = lshr i128 %136, 63
  %138 = trunc i128 %137 to i64
  store i64 %138, ptr %15, align 8
  %139 = load i64, ptr %15, align 8
  %140 = zext i64 %139 to i128
  %141 = zext i64 %107 to i128
  %142 = mul i128 %140, %141
  %143 = lshr i128 %142, 64
  %144 = xor i128 %143, -1
  %145 = add i128 %144, 1
  %146 = trunc i128 %145 to i64
  store i64 %146, ptr %14, align 8
  %147 = load i64, ptr %15, align 8
  %148 = zext i64 %147 to i128
  %149 = load i64, ptr %14, align 8
  %150 = zext i64 %149 to i128
  %151 = mul i128 %148, %150
  %152 = lshr i128 %151, 63
  %153 = trunc i128 %152 to i64
  store i64 %153, ptr %15, align 8
  %154 = load i64, ptr %15, align 8
  %155 = zext i64 %154 to i128
  %156 = zext i64 %107 to i128
  %157 = mul i128 %155, %156
  %158 = lshr i128 %157, 64
  %159 = xor i128 %158, -1
  %160 = add i128 %159, 1
  %161 = trunc i128 %160 to i64
  store i64 %161, ptr %14, align 8
  %162 = load i64, ptr %15, align 8
  %163 = zext i64 %162 to i128
  %164 = load i64, ptr %14, align 8
  %165 = zext i64 %164 to i128
  %166 = mul i128 %163, %165
  %167 = lshr i128 %166, 63
  %168 = trunc i128 %167 to i64
  store i64 %168, ptr %15, align 8
  %169 = load i64, ptr %15, align 8
  %170 = zext i64 %169 to i128
  %171 = zext i64 %107 to i128
  %172 = mul i128 %170, %171
  %173 = lshr i128 %172, 64
  %174 = xor i128 %173, -1
  %175 = add i128 %174, 1
  %176 = trunc i128 %175 to i64
  store i64 %176, ptr %14, align 8
  %177 = load i64, ptr %15, align 8
  %178 = zext i64 %177 to i128
  %179 = load i64, ptr %14, align 8
  %180 = zext i64 %179 to i128
  %181 = mul i128 %178, %180
  %182 = lshr i128 %181, 63
  %183 = trunc i128 %182 to i64
  store i64 %183, ptr %15, align 8
  %184 = load i64, ptr %15, align 8
  %185 = sub i64 %184, 1
  store i64 %185, ptr %15, align 8
  call void @llvm.memset.p0.i64(ptr align 16 %13, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %12, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %11, i8 -86, i64 16, i1 false)
  %186 = load i64, ptr %15, align 8
  %187 = zext i64 %186 to i128
  %188 = zext i64 %107 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %187, i128 %188, ptr nonnull align 16 %11, ptr nonnull align 16 %12)
  %189 = load i128, ptr %12, align 16
  %190 = sub i128 0, %189
  store i128 %190, ptr %12, align 16
  %191 = load i128, ptr %12, align 16
  %192 = lshr i128 %191, 64
  %193 = trunc i128 %192 to i64
  %194 = load i128, ptr %12, align 16
  %195 = trunc i128 %194 to i64
  call void @llvm.memset.p0.i64(ptr align 16 %10, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %9, i8 -86, i64 16, i1 false)
  %196 = load i64, ptr %15, align 8
  %197 = zext i64 %196 to i128
  %198 = zext i64 %193 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %197, i128 %198, ptr nonnull align 16 %11, ptr nonnull align 16 %10)
  %199 = load i64, ptr %15, align 8
  %200 = zext i64 %199 to i128
  %201 = zext i64 %195 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %200, i128 %201, ptr nonnull align 16 %11, ptr nonnull align 16 %9)
  %202 = load i128, ptr %10, align 16
  %203 = load i128, ptr %9, align 16
  %204 = lshr i128 %203, 64
  %205 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %202, i128 %204)
  %206 = extractvalue { i128, i1 } %205, 1
  br i1 %206, label %209, label %210

207:                                              ; preds = %41
  br label %106

208:                                              ; preds = %41
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

209:                                              ; preds = %106
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

210:                                              ; preds = %106
  %211 = extractvalue { i128, i1 } %205, 0
  store i128 %211, ptr %13, align 16
  %212 = load i128, ptr %13, align 16
  %213 = sub i128 %212, 2
  store i128 %213, ptr %13, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %8, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %7, i8 -86, i64 16, i1 false)
  %214 = load i80, ptr %19, align 16
  br i1 true, label %221, label %222

215:                                              ; preds = %221
  %216 = shl i80 %214, 2
  %217 = load i128, ptr %13, align 16
  %218 = zext i80 %216 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %218, i128 %217, ptr nonnull align 16 %8, ptr nonnull align 16 %7)
  %219 = load i128, ptr %8, align 16
  %220 = icmp ult i128 %219, 18446744073709551616
  br i1 %220, label %230, label %234

221:                                              ; preds = %210
  br label %215

222:                                              ; preds = %210
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

223:                                              ; preds = %249, %245
  %224 = load i64, ptr %6, align 8
  %225 = mul i64 %224, %107
  %226 = sub i64 0, %225
  store i64 %226, ptr %5, align 8
  %227 = load i32, ptr %16, align 4
  %228 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %227, i32 16383)
  %229 = extractvalue { i32, i1 } %228, 1
  br i1 %229, label %253, label %254

230:                                              ; preds = %215
  %231 = load i32, ptr %16, align 4
  %232 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %231, i32 1)
  %233 = extractvalue { i32, i1 } %232, 1
  br i1 %233, label %239, label %240

234:                                              ; preds = %215
  %235 = load i128, ptr %8, align 16
  %236 = lshr i128 %235, 1
  %237 = sub i128 18446744073709551615, %236
  %238 = icmp ule i128 %237, 18446744073709551615
  br i1 %238, label %251, label %252

239:                                              ; preds = %230
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

240:                                              ; preds = %230
  %241 = extractvalue { i32, i1 } %232, 0
  store i32 %241, ptr %16, align 4
  %242 = load i128, ptr %8, align 16
  %243 = sub i128 18446744073709551615, %242
  %244 = icmp ule i128 %243, 18446744073709551615
  br i1 %244, label %247, label %248

245:                                              ; preds = %247
  %246 = trunc i128 %242 to i64
  store i64 %246, ptr %6, align 8
  br label %223

247:                                              ; preds = %240
  br label %245

248:                                              ; preds = %240
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

249:                                              ; preds = %251
  %250 = trunc i128 %236 to i64
  store i64 %250, ptr %6, align 8
  br label %223

251:                                              ; preds = %234
  br label %249

252:                                              ; preds = %234
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

253:                                              ; preds = %223
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

254:                                              ; preds = %223
  %255 = extractvalue { i32, i1 } %228, 0
  %256 = icmp sge i32 %255, 32767
  br i1 %256, label %257, label %259

257:                                              ; preds = %254
  %258 = or i80 604453686435277732577280, %34
  ret i80 %258

259:                                              ; preds = %254
  %260 = icmp slt i32 %255, 1
  br i1 %260, label %261, label %263

261:                                              ; preds = %259
  %262 = icmp eq i32 %255, 0
  br i1 %262, label %268, label %272

263:                                              ; preds = %259
  %264 = load i64, ptr %5, align 8
  %265 = load i80, ptr %18, align 16
  %266 = lshr i80 %265, 1
  br i1 true, label %292, label %293

267:                                              ; preds = %273, %272
  ret i80 %34

268:                                              ; preds = %261
  %269 = load i64, ptr %5, align 8
  %270 = load i80, ptr %18, align 16
  %271 = lshr i80 %270, 1
  br i1 true, label %277, label %278

272:                                              ; preds = %261
  br label %267

273:                                              ; preds = %283, %282
  br label %267

274:                                              ; preds = %277
  %275 = zext i64 %269 to i80
  %276 = icmp ugt i80 %275, %271
  br i1 %276, label %279, label %282

277:                                              ; preds = %268
  br label %274

278:                                              ; preds = %268
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

279:                                              ; preds = %274
  %280 = load i64, ptr %6, align 8
  %281 = icmp eq i64 %280, 9223372036854775807
  br i1 %281, label %284, label %286

282:                                              ; preds = %274
  br label %273

283:                                              ; preds = %286
  br label %273

284:                                              ; preds = %279
  %285 = or i80 27670116110564327424, %34
  ret i80 %285

286:                                              ; preds = %279
  br label %283

287:                                              ; preds = %292
  %288 = zext i64 %264 to i80
  %289 = icmp ugt i80 %288, %266
  %290 = load i64, ptr %6, align 8
  %291 = icmp sge i32 %255, 0
  br i1 %291, label %296, label %297

292:                                              ; preds = %263
  br label %287

293:                                              ; preds = %263
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

294:                                              ; preds = %296
  %295 = sext i32 %255 to i80
  br i1 true, label %308, label %309

296:                                              ; preds = %287
  br label %294

297:                                              ; preds = %287
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable

298:                                              ; preds = %308
  %299 = shl i80 %295, 64
  %300 = zext i64 %290 to i80
  %301 = or i80 %300, %299
  store i80 %301, ptr %4, align 16
  %302 = load i80, ptr %4, align 16
  %303 = zext i1 %289 to i80
  %304 = add i80 %302, %303
  store i80 %304, ptr %4, align 16
  %305 = load i80, ptr %4, align 16
  %306 = or i80 %305, %34
  %307 = or i80 %306, 9223372036854775808
  ret i80 %307

308:                                              ; preds = %294
  br label %298

309:                                              ; preds = %294
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @88)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__divtf3(fp128 %0, fp128 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i128, align 16
  %5 = alloca i128, align 16
  %6 = alloca i128, align 16
  %7 = alloca i128, align 16
  %8 = alloca i128, align 16
  %9 = alloca i128, align 16
  %10 = alloca i128, align 16
  %11 = alloca i128, align 16
  %12 = alloca i128, align 16
  %13 = alloca i128, align 16
  %14 = alloca i128, align 16
  %15 = alloca i128, align 16
  %16 = alloca i128, align 16
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i128, align 16
  %22 = alloca i128, align 16
  %23 = bitcast fp128 %0 to i128
  %24 = lshr i128 %23, 112
  %25 = and i128 %24, 32767
  %26 = trunc i128 %25 to i32
  %27 = bitcast fp128 %1 to i128
  %28 = lshr i128 %27, 112
  %29 = and i128 %28, 32767
  %30 = trunc i128 %29 to i32
  %31 = bitcast fp128 %0 to i128
  %32 = bitcast fp128 %1 to i128
  %33 = xor i128 %31, %32
  %34 = and i128 %33, -170141183460469231731687303715884105728
  %35 = bitcast fp128 %0 to i128
  %36 = and i128 %35, 5192296858534827628530496329220095
  store i128 %36, ptr %22, align 16
  %37 = bitcast fp128 %1 to i128
  %38 = and i128 %37, 5192296858534827628530496329220095
  store i128 %38, ptr %21, align 16
  store i32 0, ptr %20, align 4
  %39 = sub i32 %26, 1
  %40 = icmp uge i32 %39, 32766
  br i1 %40, label %148, label %149

41:                                               ; preds = %308, %303, %282, %266, %197, %193, %192, %184, %179, %178, %168, %161
  %42 = phi fp128 [ %164, %161 ], [ %171, %168 ], [ 0xL00000000000000007FFF800000000000, %178 ], [ %181, %179 ], [ %185, %184 ], [ 0xL00000000000000007FFF800000000000, %192 ], [ %194, %193 ], [ %199, %197 ], [ %268, %266 ], [ %306, %303 ], [ %283, %282 ], [ %317, %308 ]
  ret fp128 %42

43:                                               ; preds = %208, %158
  %44 = load i128, ptr %22, align 16
  %45 = or i128 %44, 5192296858534827628530496329220096
  store i128 %45, ptr %22, align 16
  %46 = load i128, ptr %21, align 16
  %47 = or i128 %46, 5192296858534827628530496329220096
  store i128 %47, ptr %21, align 16
  %48 = sub i32 %26, %30
  %49 = load i32, ptr %20, align 4
  %50 = add i32 %48, %49
  store i32 %50, ptr %19, align 4
  %51 = load i128, ptr %21, align 16
  %52 = lshr i128 %51, 49
  %53 = trunc i128 %52 to i64
  %54 = sub i64 8432131806905394308, %53
  store i64 %54, ptr %18, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %17, i8 -86, i64 8, i1 false)
  %55 = load i64, ptr %18, align 8
  %56 = zext i64 %55 to i128
  %57 = zext i64 %53 to i128
  %58 = mul i128 %56, %57
  %59 = lshr i128 %58, 64
  %60 = xor i128 %59, -1
  %61 = add i128 %60, 1
  %62 = trunc i128 %61 to i64
  store i64 %62, ptr %17, align 8
  %63 = load i64, ptr %18, align 8
  %64 = zext i64 %63 to i128
  %65 = load i64, ptr %17, align 8
  %66 = zext i64 %65 to i128
  %67 = mul i128 %64, %66
  %68 = lshr i128 %67, 63
  %69 = trunc i128 %68 to i64
  store i64 %69, ptr %18, align 8
  %70 = load i64, ptr %18, align 8
  %71 = zext i64 %70 to i128
  %72 = zext i64 %53 to i128
  %73 = mul i128 %71, %72
  %74 = lshr i128 %73, 64
  %75 = xor i128 %74, -1
  %76 = add i128 %75, 1
  %77 = trunc i128 %76 to i64
  store i64 %77, ptr %17, align 8
  %78 = load i64, ptr %18, align 8
  %79 = zext i64 %78 to i128
  %80 = load i64, ptr %17, align 8
  %81 = zext i64 %80 to i128
  %82 = mul i128 %79, %81
  %83 = lshr i128 %82, 63
  %84 = trunc i128 %83 to i64
  store i64 %84, ptr %18, align 8
  %85 = load i64, ptr %18, align 8
  %86 = zext i64 %85 to i128
  %87 = zext i64 %53 to i128
  %88 = mul i128 %86, %87
  %89 = lshr i128 %88, 64
  %90 = xor i128 %89, -1
  %91 = add i128 %90, 1
  %92 = trunc i128 %91 to i64
  store i64 %92, ptr %17, align 8
  %93 = load i64, ptr %18, align 8
  %94 = zext i64 %93 to i128
  %95 = load i64, ptr %17, align 8
  %96 = zext i64 %95 to i128
  %97 = mul i128 %94, %96
  %98 = lshr i128 %97, 63
  %99 = trunc i128 %98 to i64
  store i64 %99, ptr %18, align 8
  %100 = load i64, ptr %18, align 8
  %101 = zext i64 %100 to i128
  %102 = zext i64 %53 to i128
  %103 = mul i128 %101, %102
  %104 = lshr i128 %103, 64
  %105 = xor i128 %104, -1
  %106 = add i128 %105, 1
  %107 = trunc i128 %106 to i64
  store i64 %107, ptr %17, align 8
  %108 = load i64, ptr %18, align 8
  %109 = zext i64 %108 to i128
  %110 = load i64, ptr %17, align 8
  %111 = zext i64 %110 to i128
  %112 = mul i128 %109, %111
  %113 = lshr i128 %112, 63
  %114 = trunc i128 %113 to i64
  store i64 %114, ptr %18, align 8
  %115 = load i64, ptr %18, align 8
  %116 = zext i64 %115 to i128
  %117 = zext i64 %53 to i128
  %118 = mul i128 %116, %117
  %119 = lshr i128 %118, 64
  %120 = xor i128 %119, -1
  %121 = add i128 %120, 1
  %122 = trunc i128 %121 to i64
  store i64 %122, ptr %17, align 8
  %123 = load i64, ptr %18, align 8
  %124 = zext i64 %123 to i128
  %125 = load i64, ptr %17, align 8
  %126 = zext i64 %125 to i128
  %127 = mul i128 %124, %126
  %128 = lshr i128 %127, 63
  %129 = trunc i128 %128 to i64
  store i64 %129, ptr %18, align 8
  %130 = load i64, ptr %18, align 8
  %131 = sub i64 %130, 1
  store i64 %131, ptr %18, align 8
  %132 = load i128, ptr %21, align 16
  %133 = shl i128 %132, 15
  %134 = trunc i128 %133 to i64
  call void @llvm.memset.p0.i64(ptr align 16 %16, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %15, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %14, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %13, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %12, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %11, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %10, i8 -86, i64 16, i1 false)
  %135 = load i64, ptr %18, align 8
  %136 = zext i64 %135 to i128
  %137 = zext i64 %53 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %136, i128 %137, ptr nonnull align 16 %10, ptr nonnull align 16 %14)
  %138 = load i64, ptr %18, align 8
  %139 = zext i64 %138 to i128
  %140 = zext i64 %134 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %139, i128 %140, ptr nonnull align 16 %10, ptr nonnull align 16 %13)
  %141 = load i128, ptr %14, align 16
  %142 = load i128, ptr %13, align 16
  %143 = lshr i128 %142, 64
  %144 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %141, i128 %143)
  %145 = extractvalue { i128, i1 } %144, 1
  br i1 %145, label %214, label %215

146:                                              ; preds = %149, %148
  %147 = phi i1 [ true, %148 ], [ %151, %149 ]
  br i1 %147, label %152, label %158

148:                                              ; preds = %2
  br label %146

149:                                              ; preds = %2
  %150 = sub i32 %30, 1
  %151 = icmp uge i32 %150, 32766
  br label %146

152:                                              ; preds = %146
  %153 = bitcast fp128 %0 to i128
  %154 = and i128 %153, 170141183460469231731687303715884105727
  %155 = bitcast fp128 %1 to i128
  %156 = and i128 %155, 170141183460469231731687303715884105727
  %157 = icmp ugt i128 %154, 170135991163610696904058773219554885632
  br i1 %157, label %161, label %165

158:                                              ; preds = %146
  br label %43

159:                                              ; preds = %165
  %160 = icmp ugt i128 %156, 170135991163610696904058773219554885632
  br i1 %160, label %168, label %172

161:                                              ; preds = %152
  %162 = bitcast fp128 %0 to i128
  %163 = or i128 %162, 2596148429267413814265248164610048
  %164 = bitcast i128 %163 to fp128
  br label %41

165:                                              ; preds = %152
  br label %159

166:                                              ; preds = %172
  %167 = icmp eq i128 %154, 170135991163610696904058773219554885632
  br i1 %167, label %175, label %177

168:                                              ; preds = %159
  %169 = bitcast fp128 %1 to i128
  %170 = or i128 %169, 2596148429267413814265248164610048
  %171 = bitcast i128 %170 to fp128
  br label %41

172:                                              ; preds = %159
  br label %166

173:                                              ; preds = %177
  %174 = icmp eq i128 %156, 170135991163610696904058773219554885632
  br i1 %174, label %184, label %186

175:                                              ; preds = %166
  %176 = icmp eq i128 %156, 170135991163610696904058773219554885632
  br i1 %176, label %178, label %179

177:                                              ; preds = %166
  br label %173

178:                                              ; preds = %175
  br label %41

179:                                              ; preds = %175
  %180 = or i128 %154, %34
  %181 = bitcast i128 %180 to fp128
  br label %41

182:                                              ; preds = %186
  %183 = icmp eq i128 %154, 0
  br i1 %183, label %189, label %191

184:                                              ; preds = %173
  %185 = bitcast i128 %34 to fp128
  br label %41

186:                                              ; preds = %173
  br label %182

187:                                              ; preds = %191
  %188 = icmp eq i128 %156, 0
  br i1 %188, label %197, label %200

189:                                              ; preds = %182
  %190 = icmp eq i128 %156, 0
  br i1 %190, label %192, label %193

191:                                              ; preds = %182
  br label %187

192:                                              ; preds = %189
  br label %41

193:                                              ; preds = %189
  %194 = bitcast i128 %34 to fp128
  br label %41

195:                                              ; preds = %200
  %196 = icmp ult i128 %154, 5192296858534827628530496329220096
  br i1 %196, label %203, label %207

197:                                              ; preds = %187
  %198 = or i128 170135991163610696904058773219554885632, %34
  %199 = bitcast i128 %198 to fp128
  br label %41

200:                                              ; preds = %187
  br label %195

201:                                              ; preds = %207, %203
  %202 = icmp ult i128 %156, 5192296858534827628530496329220096
  br i1 %202, label %209, label %213

203:                                              ; preds = %195
  %204 = load i32, ptr %20, align 4
  %205 = call fastcc i32 @compiler_rt.common.normalize__anon_3626(ptr nonnull align 16 %22)
  %206 = add i32 %204, %205
  store i32 %206, ptr %20, align 4
  br label %201

207:                                              ; preds = %195
  br label %201

208:                                              ; preds = %213, %209
  br label %43

209:                                              ; preds = %201
  %210 = load i32, ptr %20, align 4
  %211 = call fastcc i32 @compiler_rt.common.normalize__anon_3626(ptr nonnull align 16 %21)
  %212 = sub i32 %210, %211
  store i32 %212, ptr %20, align 4
  br label %208

213:                                              ; preds = %201
  br label %208

214:                                              ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

215:                                              ; preds = %43
  %216 = extractvalue { i128, i1 } %144, 0
  %217 = sub i128 0, %216
  store i128 %217, ptr %16, align 16
  %218 = load i128, ptr %16, align 16
  %219 = lshr i128 %218, 64
  %220 = trunc i128 %219 to i64
  %221 = load i128, ptr %16, align 16
  %222 = trunc i128 %221 to i64
  %223 = load i64, ptr %18, align 8
  %224 = zext i64 %223 to i128
  %225 = zext i64 %220 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %224, i128 %225, ptr nonnull align 16 %10, ptr nonnull align 16 %12)
  %226 = load i64, ptr %18, align 8
  %227 = zext i64 %226 to i128
  %228 = zext i64 %222 to i128
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %227, i128 %228, ptr nonnull align 16 %10, ptr nonnull align 16 %11)
  %229 = load i128, ptr %12, align 16
  %230 = load i128, ptr %11, align 16
  %231 = lshr i128 %230, 64
  %232 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %229, i128 %231)
  %233 = extractvalue { i128, i1 } %232, 1
  br i1 %233, label %234, label %235

234:                                              ; preds = %215
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

235:                                              ; preds = %215
  %236 = extractvalue { i128, i1 } %232, 0
  store i128 %236, ptr %15, align 16
  %237 = load i128, ptr %15, align 16
  %238 = sub i128 %237, 2
  store i128 %238, ptr %15, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %9, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %8, i8 -86, i64 16, i1 false)
  %239 = load i128, ptr %22, align 16
  %240 = shl i128 %239, 2
  %241 = load i128, ptr %15, align 16
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %240, i128 %241, ptr nonnull align 16 %9, ptr nonnull align 16 %8)
  call void @llvm.memset.p0.i64(ptr align 16 %7, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %6, i8 -86, i64 16, i1 false)
  %242 = load i128, ptr %9, align 16
  %243 = icmp ult i128 %242, 10384593717069655257060992658440192
  br i1 %243, label %248, label %257

244:                                              ; preds = %257, %248
  %245 = load i32, ptr %19, align 4
  %246 = add i32 %245, 16383
  %247 = icmp sge i32 %246, 32767
  br i1 %247, label %266, label %269

248:                                              ; preds = %235
  %249 = load i128, ptr %9, align 16
  %250 = load i128, ptr %21, align 16
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %249, i128 %250, ptr nonnull align 16 %10, ptr nonnull align 16 %6)
  %251 = load i128, ptr %22, align 16
  %252 = shl i128 %251, 113
  %253 = load i128, ptr %6, align 16
  %254 = sub i128 %252, %253
  store i128 %254, ptr %7, align 16
  %255 = load i32, ptr %19, align 4
  %256 = sub i32 %255, 1
  store i32 %256, ptr %19, align 4
  br label %244

257:                                              ; preds = %235
  %258 = load i128, ptr %9, align 16
  %259 = lshr i128 %258, 1
  store i128 %259, ptr %9, align 16
  %260 = load i128, ptr %9, align 16
  %261 = load i128, ptr %21, align 16
  call fastcc void @compiler_rt.common.wideMultiply__anon_3649(i128 %260, i128 %261, ptr nonnull align 16 %10, ptr nonnull align 16 %6)
  %262 = load i128, ptr %22, align 16
  %263 = shl i128 %262, 112
  %264 = load i128, ptr %6, align 16
  %265 = sub i128 %263, %264
  store i128 %265, ptr %7, align 16
  br label %244

266:                                              ; preds = %244
  %267 = or i128 170135991163610696904058773219554885632, %34
  %268 = bitcast i128 %267 to fp128
  br label %41

269:                                              ; preds = %244
  %270 = icmp slt i32 %246, 1
  br i1 %270, label %271, label %273

271:                                              ; preds = %269
  %272 = icmp eq i32 %246, 0
  br i1 %272, label %284, label %295

273:                                              ; preds = %269
  %274 = load i128, ptr %7, align 16
  %275 = shl i128 %274, 1
  %276 = load i128, ptr %21, align 16
  %277 = icmp uge i128 %275, %276
  %278 = load i128, ptr %9, align 16
  %279 = and i128 %278, 5192296858534827628530496329220095
  store i128 %279, ptr %4, align 16
  %280 = load i128, ptr %4, align 16
  %281 = icmp sge i32 %246, 0
  br i1 %281, label %318, label %319

282:                                              ; preds = %302, %295
  %283 = bitcast i128 %34 to fp128
  br label %41

284:                                              ; preds = %271
  %285 = load i128, ptr %7, align 16
  %286 = shl i128 %285, 1
  %287 = load i128, ptr %21, align 16
  %288 = icmp ugt i128 %286, %287
  %289 = load i128, ptr %9, align 16
  %290 = and i128 %289, 5192296858534827628530496329220095
  store i128 %290, ptr %5, align 16
  %291 = load i128, ptr %5, align 16
  %292 = zext i1 %288 to i128
  %293 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %291, i128 %292)
  %294 = extractvalue { i128, i1 } %293, 1
  br i1 %294, label %296, label %297

295:                                              ; preds = %271
  br label %282

296:                                              ; preds = %284
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

297:                                              ; preds = %284
  %298 = extractvalue { i128, i1 } %293, 0
  store i128 %298, ptr %5, align 16
  %299 = load i128, ptr %5, align 16
  %300 = and i128 %299, -5192296858534827628530496329220096
  %301 = icmp ugt i128 %300, 0
  br i1 %301, label %303, label %307

302:                                              ; preds = %307
  br label %282

303:                                              ; preds = %297
  %304 = load i128, ptr %5, align 16
  %305 = or i128 %304, %34
  %306 = bitcast i128 %305 to fp128
  br label %41

307:                                              ; preds = %297
  br label %302

308:                                              ; preds = %318
  %309 = sext i32 %246 to i128
  %310 = shl i128 %309, 112
  %311 = or i128 %280, %310
  store i128 %311, ptr %4, align 16
  %312 = load i128, ptr %4, align 16
  %313 = zext i1 %277 to i128
  %314 = add i128 %312, %313
  store i128 %314, ptr %4, align 16
  %315 = load i128, ptr %4, align 16
  %316 = or i128 %315, %34
  %317 = bitcast i128 %316 to fp128
  br label %41

318:                                              ; preds = %273
  br label %308

319:                                              ; preds = %273
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @89)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__neghf2(half %0) #0 {
  %2 = bitcast half %0 to i16
  %3 = xor i16 %2, -32768
  %4 = bitcast i16 %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__negsf2(float %0) #0 {
  %2 = bitcast float %0 to i32
  %3 = xor i32 %2, -2147483648
  %4 = bitcast i32 %3 to float
  ret float %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__negdf2(double %0) #0 {
  %2 = bitcast double %0 to i64
  %3 = xor i64 %2, -9223372036854775808
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__negtf2(fp128 %0) #0 {
  %2 = bitcast fp128 %0 to i128
  %3 = xor i128 %2, -170141183460469231731687303715884105728
  %4 = bitcast i128 %3 to fp128
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__negxf2(i80 %0) #0 {
  %2 = xor i80 %0, -604462909807314587353088
  ret i80 %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__powihf2(half %0, i32 %1) #0 {
  %3 = alloca half, align 2
  %4 = alloca half, align 2
  %5 = alloca i32, align 4
  %6 = alloca half, align 2
  store half %0, ptr %6, align 2
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store half 0xH3C00, ptr %4, align 2
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load half, ptr %4, align 2
  %20 = load half, ptr %6, align 2
  %21 = fmul half %19, %20
  store half %21, ptr %4, align 2
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load half, ptr %6, align 2
  %25 = load half, ptr %6, align 2
  %26 = fmul half %24, %25
  store half %26, ptr %6, align 2
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load half, ptr %3, align 2
  ret half %30

31:                                               ; preds = %8
  %32 = load half, ptr %4, align 2
  %33 = fdiv half 0xH3C00, %32
  store half %33, ptr %3, align 2
  br label %29

34:                                               ; preds = %8
  %35 = load half, ptr %4, align 2
  store half %35, ptr %3, align 2
  br label %29
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @__powisf2(float %0, i32 %1) #0 {
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  store float %0, ptr %6, align 4
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store float 1.000000e+00, ptr %4, align 4
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load float, ptr %4, align 4
  %20 = load float, ptr %6, align 4
  %21 = fmul float %19, %20
  store float %21, ptr %4, align 4
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load float, ptr %6, align 4
  %25 = load float, ptr %6, align 4
  %26 = fmul float %24, %25
  store float %26, ptr %6, align 4
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load float, ptr %3, align 4
  ret float %30

31:                                               ; preds = %8
  %32 = load float, ptr %4, align 4
  %33 = fdiv float 1.000000e+00, %32
  store float %33, ptr %3, align 4
  br label %29

34:                                               ; preds = %8
  %35 = load float, ptr %4, align 4
  store float %35, ptr %3, align 4
  br label %29
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @__powidf2(double %0, i32 %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = alloca double, align 8
  store double %0, ptr %6, align 8
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store double 1.000000e+00, ptr %4, align 8
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load double, ptr %4, align 8
  %20 = load double, ptr %6, align 8
  %21 = fmul double %19, %20
  store double %21, ptr %4, align 8
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load double, ptr %6, align 8
  %25 = load double, ptr %6, align 8
  %26 = fmul double %24, %25
  store double %26, ptr %6, align 8
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load double, ptr %3, align 8
  ret double %30

31:                                               ; preds = %8
  %32 = load double, ptr %4, align 8
  %33 = fdiv double 1.000000e+00, %32
  store double %33, ptr %3, align 8
  br label %29

34:                                               ; preds = %8
  %35 = load double, ptr %4, align 8
  store double %35, ptr %3, align 8
  br label %29
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @__powitf2(fp128 %0, i32 %1) #0 {
  %3 = alloca fp128, align 16
  %4 = alloca fp128, align 16
  %5 = alloca i32, align 4
  %6 = alloca fp128, align 16
  store fp128 %0, ptr %6, align 16
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store fp128 0xL00000000000000003FFF000000000000, ptr %4, align 16
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load fp128, ptr %4, align 16
  %20 = load fp128, ptr %6, align 16
  %21 = call fp128 @__multf3(fp128 %19, fp128 %20)
  store fp128 %21, ptr %4, align 16
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load fp128, ptr %6, align 16
  %25 = load fp128, ptr %6, align 16
  %26 = call fp128 @__multf3(fp128 %24, fp128 %25)
  store fp128 %26, ptr %6, align 16
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load fp128, ptr %3, align 16
  ret fp128 %30

31:                                               ; preds = %8
  %32 = load fp128, ptr %4, align 16
  %33 = call fp128 @__divtf3(fp128 0xL00000000000000003FFF000000000000, fp128 %32)
  store fp128 %33, ptr %3, align 16
  br label %29

34:                                               ; preds = %8
  %35 = load fp128, ptr %4, align 16
  store fp128 %35, ptr %3, align 16
  br label %29
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__powixf2(i80 %0, i32 %1) #0 {
  %3 = alloca i80, align 16
  %4 = alloca i80, align 16
  %5 = alloca i32, align 4
  %6 = alloca i80, align 16
  store i80 %0, ptr %6, align 16
  store i32 %1, ptr %5, align 4
  %7 = icmp slt i32 %1, 0
  store i80 302222231531620438900736, ptr %4, align 16
  br label %9

8:                                                ; preds = %27
  br i1 %7, label %31, label %34

9:                                                ; preds = %23, %2
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %22

13:                                               ; preds = %22, %18
  %14 = load i32, ptr %5, align 4
  %15 = sdiv i32 %14, 2
  store i32 %15, ptr %5, align 4
  %16 = load i32, ptr %5, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %28

18:                                               ; preds = %9
  %19 = load i80, ptr %4, align 16
  %20 = load i80, ptr %6, align 16
  %21 = call i80 @__mulxf3(i80 %19, i80 %20)
  store i80 %21, ptr %4, align 16
  br label %13

22:                                               ; preds = %9
  br label %13

23:                                               ; preds = %28
  %24 = load i80, ptr %6, align 16
  %25 = load i80, ptr %6, align 16
  %26 = call i80 @__mulxf3(i80 %24, i80 %25)
  store i80 %26, ptr %6, align 16
  br label %9

27:                                               ; preds = %13
  br label %8

28:                                               ; preds = %13
  br label %23

29:                                               ; preds = %34, %31
  %30 = load i80, ptr %3, align 16
  ret i80 %30

31:                                               ; preds = %8
  %32 = load i80, ptr %4, align 16
  %33 = call i80 @__divxf3(i80 302222231531620438900736, i80 %32)
  store i80 %33, ptr %3, align 16
  br label %29

34:                                               ; preds = %8
  %35 = load i80, ptr %4, align 16
  store i80 %35, ptr %3, align 16
  br label %29
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f16)" @__mulhc3(half %0, half %1, half %2, half %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %6 = alloca i1, align 1
  %7 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %8 = alloca half, align 2
  %9 = alloca half, align 2
  %10 = alloca half, align 2
  %11 = alloca half, align 2
  store half %0, ptr %11, align 2
  store half %1, ptr %10, align 2
  store half %2, ptr %9, align 2
  store half %3, ptr %8, align 2
  %12 = load half, ptr %11, align 2
  %13 = load half, ptr %9, align 2
  %14 = fmul half %12, %13
  %15 = load half, ptr %10, align 2
  %16 = load half, ptr %8, align 2
  %17 = fmul half %15, %16
  %18 = load half, ptr %11, align 2
  %19 = load half, ptr %8, align 2
  %20 = fmul half %18, %19
  %21 = load half, ptr %10, align 2
  %22 = load half, ptr %9, align 2
  %23 = fmul half %21, %22
  %24 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %7, i32 0, i32 0
  %25 = fsub half %14, %17
  store half %25, ptr %24, align 2
  %26 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %7, i32 0, i32 1
  %27 = fadd half %20, %23
  store half %27, ptr %26, align 2
  %28 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %7, i32 0, i32 0
  %29 = load half, ptr %28, align 2
  %30 = call fastcc i1 @math.isnan.isNan__anon_3662(half %29)
  br i1 %30, label %37, label %41

31:                                               ; preds = %205, %34
  %32 = phi ptr [ %5, %205 ], [ %7, %34 ]
  %33 = load %"compiler_rt.mulc3.Complex(f16)", ptr %32, align 2
  ret %"compiler_rt.mulc3.Complex(f16)" %33

34:                                               ; preds = %204, %47
  br label %31

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %4
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %7, i32 0, i32 1
  %39 = load half, ptr %38, align 2
  %40 = call fastcc i1 @math.isnan.isNan__anon_3662(half %39)
  br label %35

41:                                               ; preds = %4
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %6, align 1
  %43 = load half, ptr %11, align 2
  %44 = bitcast half %43 to i16
  %45 = and i16 %44, 32767
  %46 = icmp eq i16 %45, 31744
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %92, %66
  %49 = load half, ptr %9, align 2
  %50 = bitcast half %49 to i16
  %51 = and i16 %50, 32767
  %52 = icmp eq i16 %51, 31744
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load half, ptr %10, align 2
  %58 = bitcast half %57 to i16
  %59 = and i16 %58, 32767
  %60 = icmp eq i16 %59, 31744
  br label %53

61:                                               ; preds = %53
  %62 = load half, ptr %11, align 2
  %63 = bitcast half %62 to i16
  %64 = and i16 %63, 32767
  %65 = icmp eq i16 %64, 31744
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi half [ 0xH3C00, %75 ], [ 0xH0000, %76 ]
  %69 = load half, ptr %11, align 2
  %70 = call fastcc half @math.copysign.copysign__anon_3679(half %68, half %69)
  store half %70, ptr %11, align 2
  %71 = load half, ptr %10, align 2
  %72 = bitcast half %71 to i16
  %73 = and i16 %72, 32767
  %74 = icmp eq i16 %73, 31744
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi half [ 0xH3C00, %83 ], [ 0xH0000, %84 ]
  %79 = load half, ptr %10, align 2
  %80 = call fastcc half @math.copysign.copysign__anon_3679(half %78, half %79)
  store half %80, ptr %10, align 2
  %81 = load half, ptr %9, align 2
  %82 = call fastcc i1 @math.isnan.isNan__anon_3662(half %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load half, ptr %8, align 2
  %87 = call fastcc i1 @math.isnan.isNan__anon_3662(half %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load half, ptr %9, align 2
  %90 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH0000, half %89)
  store half %90, ptr %9, align 2
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %6, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load half, ptr %8, align 2
  %95 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH0000, half %94)
  store half %95, ptr %8, align 2
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %139, %113
  %98 = load i1, ptr %6, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load half, ptr %8, align 2
  %105 = bitcast half %104 to i16
  %106 = and i16 %105, 32767
  %107 = icmp eq i16 %106, 31744
  br label %100

108:                                              ; preds = %100
  %109 = load half, ptr %9, align 2
  %110 = bitcast half %109 to i16
  %111 = and i16 %110, 32767
  %112 = icmp eq i16 %111, 31744
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi half [ 0xH3C00, %122 ], [ 0xH0000, %123 ]
  %116 = load half, ptr %9, align 2
  %117 = call fastcc half @math.copysign.copysign__anon_3679(half %115, half %116)
  store half %117, ptr %9, align 2
  %118 = load half, ptr %8, align 2
  %119 = bitcast half %118 to i16
  %120 = and i16 %119, 32767
  %121 = icmp eq i16 %120, 31744
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi half [ 0xH3C00, %130 ], [ 0xH0000, %131 ]
  %126 = load half, ptr %8, align 2
  %127 = call fastcc half @math.copysign.copysign__anon_3679(half %125, half %126)
  store half %127, ptr %8, align 2
  %128 = load half, ptr %11, align 2
  %129 = call fastcc i1 @math.isnan.isNan__anon_3662(half %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load half, ptr %10, align 2
  %134 = call fastcc i1 @math.isnan.isNan__anon_3662(half %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load half, ptr %11, align 2
  %137 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH0000, half %136)
  store half %137, ptr %11, align 2
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %6, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load half, ptr %10, align 2
  %142 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH0000, half %141)
  store half %142, ptr %10, align 2
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %199, %177
  %145 = load i1, ptr %6, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %167, %152
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast half %14 to i16
  %150 = and i16 %149, 32767
  %151 = icmp eq i16 %150, 31744
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast half %17 to i16
  %158 = and i16 %157, 32767
  %159 = icmp eq i16 %158, 31744
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast half %20 to i16
  %165 = and i16 %164, 32767
  %166 = icmp eq i16 %165, 31744
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast half %23 to i16
  %172 = and i16 %171, 32767
  %173 = icmp eq i16 %172, 31744
  br label %167

174:                                              ; preds = %146
  %175 = load half, ptr %11, align 2
  %176 = call fastcc i1 @math.isnan.isNan__anon_3662(half %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load half, ptr %10, align 2
  %180 = call fastcc i1 @math.isnan.isNan__anon_3662(half %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load half, ptr %11, align 2
  %183 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH0000, half %182)
  store half %183, ptr %11, align 2
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load half, ptr %9, align 2
  %187 = call fastcc i1 @math.isnan.isNan__anon_3662(half %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load half, ptr %10, align 2
  %190 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH0000, half %189)
  store half %190, ptr %10, align 2
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load half, ptr %8, align 2
  %194 = call fastcc i1 @math.isnan.isNan__anon_3662(half %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load half, ptr %9, align 2
  %197 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH0000, half %196)
  store half %197, ptr %9, align 2
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %6, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load half, ptr %8, align 2
  %202 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH0000, half %201)
  store half %202, ptr %8, align 2
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %5, i32 0, i32 0
  %207 = load half, ptr %11, align 2
  %208 = load half, ptr %9, align 2
  %209 = fmul half %207, %208
  %210 = load half, ptr %10, align 2
  %211 = load half, ptr %8, align 2
  %212 = fmul half %210, %211
  %213 = fsub half %209, %212
  %214 = fmul half 0xH7C00, %213
  store half %214, ptr %206, align 2
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %5, i32 0, i32 1
  %216 = load half, ptr %11, align 2
  %217 = load half, ptr %8, align 2
  %218 = fmul half %216, %217
  %219 = load half, ptr %10, align 2
  %220 = load half, ptr %9, align 2
  %221 = fmul half %219, %220
  %222 = fadd half %218, %221
  %223 = fmul half 0xH7C00, %222
  store half %223, ptr %215, align 2
  br label %31

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3662(half %0) unnamed_addr #0 {
  %2 = fcmp une half %0, %0
  ret i1 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc half @math.copysign.copysign__anon_3679(half %0, half %1) unnamed_addr #0 {
  %3 = bitcast half %0 to i16
  %4 = and i16 %3, 32767
  %5 = bitcast half %1 to i16
  %6 = and i16 %5, -32768
  %7 = or i16 %4, %6
  %8 = bitcast i16 %7 to half
  ret half %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f32)" @__mulsc3(float %0, float %1, float %2, float %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %6 = alloca i1, align 1
  %7 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  store float %0, ptr %11, align 4
  store float %1, ptr %10, align 4
  store float %2, ptr %9, align 4
  store float %3, ptr %8, align 4
  %12 = load float, ptr %11, align 4
  %13 = load float, ptr %9, align 4
  %14 = fmul float %12, %13
  %15 = load float, ptr %10, align 4
  %16 = load float, ptr %8, align 4
  %17 = fmul float %15, %16
  %18 = load float, ptr %11, align 4
  %19 = load float, ptr %8, align 4
  %20 = fmul float %18, %19
  %21 = load float, ptr %10, align 4
  %22 = load float, ptr %9, align 4
  %23 = fmul float %21, %22
  %24 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 0
  %25 = fsub float %14, %17
  store float %25, ptr %24, align 4
  %26 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 1
  %27 = fadd float %20, %23
  store float %27, ptr %26, align 4
  %28 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 0
  %29 = load float, ptr %28, align 4
  %30 = call fastcc i1 @math.isnan.isNan__anon_3680(float %29)
  br i1 %30, label %37, label %41

31:                                               ; preds = %205, %34
  %32 = phi ptr [ %5, %205 ], [ %7, %34 ]
  %33 = load %"compiler_rt.mulc3.Complex(f32)", ptr %32, align 4
  ret %"compiler_rt.mulc3.Complex(f32)" %33

34:                                               ; preds = %204, %47
  br label %31

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %4
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 1
  %39 = load float, ptr %38, align 4
  %40 = call fastcc i1 @math.isnan.isNan__anon_3680(float %39)
  br label %35

41:                                               ; preds = %4
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %6, align 1
  %43 = load float, ptr %11, align 4
  %44 = bitcast float %43 to i32
  %45 = and i32 %44, 2147483647
  %46 = icmp eq i32 %45, 2139095040
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %92, %66
  %49 = load float, ptr %9, align 4
  %50 = bitcast float %49 to i32
  %51 = and i32 %50, 2147483647
  %52 = icmp eq i32 %51, 2139095040
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load float, ptr %10, align 4
  %58 = bitcast float %57 to i32
  %59 = and i32 %58, 2147483647
  %60 = icmp eq i32 %59, 2139095040
  br label %53

61:                                               ; preds = %53
  %62 = load float, ptr %11, align 4
  %63 = bitcast float %62 to i32
  %64 = and i32 %63, 2147483647
  %65 = icmp eq i32 %64, 2139095040
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi float [ 1.000000e+00, %75 ], [ 0.000000e+00, %76 ]
  %69 = load float, ptr %11, align 4
  %70 = call fastcc float @math.copysign.copysign__anon_3681(float %68, float %69)
  store float %70, ptr %11, align 4
  %71 = load float, ptr %10, align 4
  %72 = bitcast float %71 to i32
  %73 = and i32 %72, 2147483647
  %74 = icmp eq i32 %73, 2139095040
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi float [ 1.000000e+00, %83 ], [ 0.000000e+00, %84 ]
  %79 = load float, ptr %10, align 4
  %80 = call fastcc float @math.copysign.copysign__anon_3681(float %78, float %79)
  store float %80, ptr %10, align 4
  %81 = load float, ptr %9, align 4
  %82 = call fastcc i1 @math.isnan.isNan__anon_3680(float %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load float, ptr %8, align 4
  %87 = call fastcc i1 @math.isnan.isNan__anon_3680(float %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load float, ptr %9, align 4
  %90 = call fastcc float @math.copysign.copysign__anon_3681(float 0.000000e+00, float %89)
  store float %90, ptr %9, align 4
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %6, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load float, ptr %8, align 4
  %95 = call fastcc float @math.copysign.copysign__anon_3681(float 0.000000e+00, float %94)
  store float %95, ptr %8, align 4
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %139, %113
  %98 = load i1, ptr %6, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load float, ptr %8, align 4
  %105 = bitcast float %104 to i32
  %106 = and i32 %105, 2147483647
  %107 = icmp eq i32 %106, 2139095040
  br label %100

108:                                              ; preds = %100
  %109 = load float, ptr %9, align 4
  %110 = bitcast float %109 to i32
  %111 = and i32 %110, 2147483647
  %112 = icmp eq i32 %111, 2139095040
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi float [ 1.000000e+00, %122 ], [ 0.000000e+00, %123 ]
  %116 = load float, ptr %9, align 4
  %117 = call fastcc float @math.copysign.copysign__anon_3681(float %115, float %116)
  store float %117, ptr %9, align 4
  %118 = load float, ptr %8, align 4
  %119 = bitcast float %118 to i32
  %120 = and i32 %119, 2147483647
  %121 = icmp eq i32 %120, 2139095040
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi float [ 1.000000e+00, %130 ], [ 0.000000e+00, %131 ]
  %126 = load float, ptr %8, align 4
  %127 = call fastcc float @math.copysign.copysign__anon_3681(float %125, float %126)
  store float %127, ptr %8, align 4
  %128 = load float, ptr %11, align 4
  %129 = call fastcc i1 @math.isnan.isNan__anon_3680(float %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load float, ptr %10, align 4
  %134 = call fastcc i1 @math.isnan.isNan__anon_3680(float %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load float, ptr %11, align 4
  %137 = call fastcc float @math.copysign.copysign__anon_3681(float 0.000000e+00, float %136)
  store float %137, ptr %11, align 4
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %6, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load float, ptr %10, align 4
  %142 = call fastcc float @math.copysign.copysign__anon_3681(float 0.000000e+00, float %141)
  store float %142, ptr %10, align 4
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %199, %177
  %145 = load i1, ptr %6, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %167, %152
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast float %14 to i32
  %150 = and i32 %149, 2147483647
  %151 = icmp eq i32 %150, 2139095040
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast float %17 to i32
  %158 = and i32 %157, 2147483647
  %159 = icmp eq i32 %158, 2139095040
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast float %20 to i32
  %165 = and i32 %164, 2147483647
  %166 = icmp eq i32 %165, 2139095040
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast float %23 to i32
  %172 = and i32 %171, 2147483647
  %173 = icmp eq i32 %172, 2139095040
  br label %167

174:                                              ; preds = %146
  %175 = load float, ptr %11, align 4
  %176 = call fastcc i1 @math.isnan.isNan__anon_3680(float %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load float, ptr %10, align 4
  %180 = call fastcc i1 @math.isnan.isNan__anon_3680(float %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load float, ptr %11, align 4
  %183 = call fastcc float @math.copysign.copysign__anon_3681(float 0.000000e+00, float %182)
  store float %183, ptr %11, align 4
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load float, ptr %9, align 4
  %187 = call fastcc i1 @math.isnan.isNan__anon_3680(float %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load float, ptr %10, align 4
  %190 = call fastcc float @math.copysign.copysign__anon_3681(float 0.000000e+00, float %189)
  store float %190, ptr %10, align 4
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load float, ptr %8, align 4
  %194 = call fastcc i1 @math.isnan.isNan__anon_3680(float %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load float, ptr %9, align 4
  %197 = call fastcc float @math.copysign.copysign__anon_3681(float 0.000000e+00, float %196)
  store float %197, ptr %9, align 4
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %6, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load float, ptr %8, align 4
  %202 = call fastcc float @math.copysign.copysign__anon_3681(float 0.000000e+00, float %201)
  store float %202, ptr %8, align 4
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %5, i32 0, i32 0
  %207 = load float, ptr %11, align 4
  %208 = load float, ptr %9, align 4
  %209 = fmul float %207, %208
  %210 = load float, ptr %10, align 4
  %211 = load float, ptr %8, align 4
  %212 = fmul float %210, %211
  %213 = fsub float %209, %212
  %214 = fmul float 0x7FF0000000000000, %213
  store float %214, ptr %206, align 4
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %5, i32 0, i32 1
  %216 = load float, ptr %11, align 4
  %217 = load float, ptr %8, align 4
  %218 = fmul float %216, %217
  %219 = load float, ptr %10, align 4
  %220 = load float, ptr %9, align 4
  %221 = fmul float %219, %220
  %222 = fadd float %218, %221
  %223 = fmul float 0x7FF0000000000000, %222
  store float %223, ptr %215, align 4
  br label %31

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3680(float %0) unnamed_addr #0 {
  %2 = fcmp une float %0, %0
  ret i1 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @math.copysign.copysign__anon_3681(float %0, float %1) unnamed_addr #0 {
  %3 = bitcast float %0 to i32
  %4 = and i32 %3, 2147483647
  %5 = bitcast float %1 to i32
  %6 = and i32 %5, -2147483648
  %7 = or i32 %4, %6
  %8 = bitcast i32 %7 to float
  ret float %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f64)" @__muldc3(double %0, double %1, double %2, double %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %6 = alloca i1, align 1
  %7 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  store double %0, ptr %11, align 8
  store double %1, ptr %10, align 8
  store double %2, ptr %9, align 8
  store double %3, ptr %8, align 8
  %12 = load double, ptr %11, align 8
  %13 = load double, ptr %9, align 8
  %14 = fmul double %12, %13
  %15 = load double, ptr %10, align 8
  %16 = load double, ptr %8, align 8
  %17 = fmul double %15, %16
  %18 = load double, ptr %11, align 8
  %19 = load double, ptr %8, align 8
  %20 = fmul double %18, %19
  %21 = load double, ptr %10, align 8
  %22 = load double, ptr %9, align 8
  %23 = fmul double %21, %22
  %24 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %25 = fsub double %14, %17
  store double %25, ptr %24, align 8
  %26 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 1
  %27 = fadd double %20, %23
  store double %27, ptr %26, align 8
  %28 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %29 = load double, ptr %28, align 8
  %30 = call fastcc i1 @math.isnan.isNan__anon_3682(double %29)
  br i1 %30, label %37, label %41

31:                                               ; preds = %205, %34
  %32 = phi ptr [ %5, %205 ], [ %7, %34 ]
  %33 = load %"compiler_rt.mulc3.Complex(f64)", ptr %32, align 8
  ret %"compiler_rt.mulc3.Complex(f64)" %33

34:                                               ; preds = %204, %47
  br label %31

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %4
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 1
  %39 = load double, ptr %38, align 8
  %40 = call fastcc i1 @math.isnan.isNan__anon_3682(double %39)
  br label %35

41:                                               ; preds = %4
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %6, align 1
  %43 = load double, ptr %11, align 8
  %44 = bitcast double %43 to i64
  %45 = and i64 %44, 9223372036854775807
  %46 = icmp eq i64 %45, 9218868437227405312
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %92, %66
  %49 = load double, ptr %9, align 8
  %50 = bitcast double %49 to i64
  %51 = and i64 %50, 9223372036854775807
  %52 = icmp eq i64 %51, 9218868437227405312
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load double, ptr %10, align 8
  %58 = bitcast double %57 to i64
  %59 = and i64 %58, 9223372036854775807
  %60 = icmp eq i64 %59, 9218868437227405312
  br label %53

61:                                               ; preds = %53
  %62 = load double, ptr %11, align 8
  %63 = bitcast double %62 to i64
  %64 = and i64 %63, 9223372036854775807
  %65 = icmp eq i64 %64, 9218868437227405312
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi double [ 1.000000e+00, %75 ], [ 0.000000e+00, %76 ]
  %69 = load double, ptr %11, align 8
  %70 = call fastcc double @math.copysign.copysign__anon_3683(double %68, double %69)
  store double %70, ptr %11, align 8
  %71 = load double, ptr %10, align 8
  %72 = bitcast double %71 to i64
  %73 = and i64 %72, 9223372036854775807
  %74 = icmp eq i64 %73, 9218868437227405312
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi double [ 1.000000e+00, %83 ], [ 0.000000e+00, %84 ]
  %79 = load double, ptr %10, align 8
  %80 = call fastcc double @math.copysign.copysign__anon_3683(double %78, double %79)
  store double %80, ptr %10, align 8
  %81 = load double, ptr %9, align 8
  %82 = call fastcc i1 @math.isnan.isNan__anon_3682(double %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load double, ptr %8, align 8
  %87 = call fastcc i1 @math.isnan.isNan__anon_3682(double %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load double, ptr %9, align 8
  %90 = call fastcc double @math.copysign.copysign__anon_3683(double 0.000000e+00, double %89)
  store double %90, ptr %9, align 8
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %6, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load double, ptr %8, align 8
  %95 = call fastcc double @math.copysign.copysign__anon_3683(double 0.000000e+00, double %94)
  store double %95, ptr %8, align 8
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %139, %113
  %98 = load i1, ptr %6, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load double, ptr %8, align 8
  %105 = bitcast double %104 to i64
  %106 = and i64 %105, 9223372036854775807
  %107 = icmp eq i64 %106, 9218868437227405312
  br label %100

108:                                              ; preds = %100
  %109 = load double, ptr %9, align 8
  %110 = bitcast double %109 to i64
  %111 = and i64 %110, 9223372036854775807
  %112 = icmp eq i64 %111, 9218868437227405312
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi double [ 1.000000e+00, %122 ], [ 0.000000e+00, %123 ]
  %116 = load double, ptr %9, align 8
  %117 = call fastcc double @math.copysign.copysign__anon_3683(double %115, double %116)
  store double %117, ptr %9, align 8
  %118 = load double, ptr %8, align 8
  %119 = bitcast double %118 to i64
  %120 = and i64 %119, 9223372036854775807
  %121 = icmp eq i64 %120, 9218868437227405312
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi double [ 1.000000e+00, %130 ], [ 0.000000e+00, %131 ]
  %126 = load double, ptr %8, align 8
  %127 = call fastcc double @math.copysign.copysign__anon_3683(double %125, double %126)
  store double %127, ptr %8, align 8
  %128 = load double, ptr %11, align 8
  %129 = call fastcc i1 @math.isnan.isNan__anon_3682(double %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load double, ptr %10, align 8
  %134 = call fastcc i1 @math.isnan.isNan__anon_3682(double %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load double, ptr %11, align 8
  %137 = call fastcc double @math.copysign.copysign__anon_3683(double 0.000000e+00, double %136)
  store double %137, ptr %11, align 8
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %6, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load double, ptr %10, align 8
  %142 = call fastcc double @math.copysign.copysign__anon_3683(double 0.000000e+00, double %141)
  store double %142, ptr %10, align 8
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %199, %177
  %145 = load i1, ptr %6, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %167, %152
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast double %14 to i64
  %150 = and i64 %149, 9223372036854775807
  %151 = icmp eq i64 %150, 9218868437227405312
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast double %17 to i64
  %158 = and i64 %157, 9223372036854775807
  %159 = icmp eq i64 %158, 9218868437227405312
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast double %20 to i64
  %165 = and i64 %164, 9223372036854775807
  %166 = icmp eq i64 %165, 9218868437227405312
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast double %23 to i64
  %172 = and i64 %171, 9223372036854775807
  %173 = icmp eq i64 %172, 9218868437227405312
  br label %167

174:                                              ; preds = %146
  %175 = load double, ptr %11, align 8
  %176 = call fastcc i1 @math.isnan.isNan__anon_3682(double %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load double, ptr %10, align 8
  %180 = call fastcc i1 @math.isnan.isNan__anon_3682(double %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load double, ptr %11, align 8
  %183 = call fastcc double @math.copysign.copysign__anon_3683(double 0.000000e+00, double %182)
  store double %183, ptr %11, align 8
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load double, ptr %9, align 8
  %187 = call fastcc i1 @math.isnan.isNan__anon_3682(double %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load double, ptr %10, align 8
  %190 = call fastcc double @math.copysign.copysign__anon_3683(double 0.000000e+00, double %189)
  store double %190, ptr %10, align 8
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load double, ptr %8, align 8
  %194 = call fastcc i1 @math.isnan.isNan__anon_3682(double %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load double, ptr %9, align 8
  %197 = call fastcc double @math.copysign.copysign__anon_3683(double 0.000000e+00, double %196)
  store double %197, ptr %9, align 8
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %6, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load double, ptr %8, align 8
  %202 = call fastcc double @math.copysign.copysign__anon_3683(double 0.000000e+00, double %201)
  store double %202, ptr %8, align 8
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %207 = load double, ptr %11, align 8
  %208 = load double, ptr %9, align 8
  %209 = fmul double %207, %208
  %210 = load double, ptr %10, align 8
  %211 = load double, ptr %8, align 8
  %212 = fmul double %210, %211
  %213 = fsub double %209, %212
  %214 = fmul double 0x7FF0000000000000, %213
  store double %214, ptr %206, align 8
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 1
  %216 = load double, ptr %11, align 8
  %217 = load double, ptr %8, align 8
  %218 = fmul double %216, %217
  %219 = load double, ptr %10, align 8
  %220 = load double, ptr %9, align 8
  %221 = fmul double %219, %220
  %222 = fadd double %218, %221
  %223 = fmul double 0x7FF0000000000000, %222
  store double %223, ptr %215, align 8
  br label %31

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3682(double %0) unnamed_addr #0 {
  %2 = fcmp une double %0, %0
  ret i1 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @math.copysign.copysign__anon_3683(double %0, double %1) unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, -9223372036854775808
  %7 = or i64 %4, %6
  %8 = bitcast i64 %7 to double
  ret double %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f80)" @__mulxc3(i80 %0, i80 %1, i80 %2, i80 %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %6 = alloca i1, align 1
  %7 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %8 = alloca i80, align 16
  %9 = alloca i80, align 16
  %10 = alloca i80, align 16
  %11 = alloca i80, align 16
  store i80 %0, ptr %11, align 16
  store i80 %1, ptr %10, align 16
  store i80 %2, ptr %9, align 16
  store i80 %3, ptr %8, align 16
  %12 = load i80, ptr %11, align 16
  %13 = load i80, ptr %9, align 16
  %14 = call i80 @__mulxf3(i80 %12, i80 %13)
  %15 = load i80, ptr %10, align 16
  %16 = load i80, ptr %8, align 16
  %17 = call i80 @__mulxf3(i80 %15, i80 %16)
  %18 = load i80, ptr %11, align 16
  %19 = load i80, ptr %8, align 16
  %20 = call i80 @__mulxf3(i80 %18, i80 %19)
  %21 = load i80, ptr %10, align 16
  %22 = load i80, ptr %9, align 16
  %23 = call i80 @__mulxf3(i80 %21, i80 %22)
  %24 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %7, i32 0, i32 0
  %25 = call i80 @__subxf3(i80 %14, i80 %17)
  store i80 %25, ptr %24, align 16
  %26 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %7, i32 0, i32 1
  %27 = call i80 @__addxf3(i80 %20, i80 %23)
  store i80 %27, ptr %26, align 16
  %28 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %7, i32 0, i32 0
  %29 = load i80, ptr %28, align 16
  %30 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %29)
  br i1 %30, label %37, label %41

31:                                               ; preds = %193, %34
  %32 = phi ptr [ %5, %193 ], [ %7, %34 ]
  %33 = load %"compiler_rt.mulc3.Complex(f80)", ptr %32, align 16
  ret %"compiler_rt.mulc3.Complex(f80)" %33

34:                                               ; preds = %192, %46
  br label %31

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %46

37:                                               ; preds = %4
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %7, i32 0, i32 1
  %39 = load i80, ptr %38, align 16
  %40 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %39)
  br label %35

41:                                               ; preds = %4
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %6, align 1
  %43 = load i80, ptr %11, align 16
  %44 = and i80 %43, 604462909807314587353087
  %45 = icmp eq i80 %44, 604453686435277732577280
  br i1 %45, label %53, label %54

46:                                               ; preds = %35
  br label %34

47:                                               ; preds = %87, %62
  %48 = load i80, ptr %9, align 16
  %49 = and i80 %48, 604462909807314587353087
  %50 = icmp eq i80 %49, 604453686435277732577280
  br i1 %50, label %97, label %98

51:                                               ; preds = %54, %53
  %52 = phi i1 [ true, %53 ], [ %57, %54 ]
  br i1 %52, label %58, label %62

53:                                               ; preds = %42
  br label %51

54:                                               ; preds = %42
  %55 = load i80, ptr %10, align 16
  %56 = and i80 %55, 604462909807314587353087
  %57 = icmp eq i80 %56, 604453686435277732577280
  br label %51

58:                                               ; preds = %51
  %59 = load i80, ptr %11, align 16
  %60 = and i80 %59, 604462909807314587353087
  %61 = icmp eq i80 %60, 604453686435277732577280
  br i1 %61, label %70, label %71

62:                                               ; preds = %51
  br label %47

63:                                               ; preds = %71, %70
  %64 = phi i80 [ 302222231531620438900736, %70 ], [ 0, %71 ]
  %65 = load i80, ptr %11, align 16
  %66 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 %64, i80 %65)
  store i80 %66, ptr %11, align 16
  %67 = load i80, ptr %10, align 16
  %68 = and i80 %67, 604462909807314587353087
  %69 = icmp eq i80 %68, 604453686435277732577280
  br i1 %69, label %78, label %79

70:                                               ; preds = %58
  br label %63

71:                                               ; preds = %58
  br label %63

72:                                               ; preds = %79, %78
  %73 = phi i80 [ 302222231531620438900736, %78 ], [ 0, %79 ]
  %74 = load i80, ptr %10, align 16
  %75 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 %73, i80 %74)
  store i80 %75, ptr %10, align 16
  %76 = load i80, ptr %9, align 16
  %77 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %76)
  br i1 %77, label %83, label %86

78:                                               ; preds = %63
  br label %72

79:                                               ; preds = %63
  br label %72

80:                                               ; preds = %86, %83
  %81 = load i80, ptr %8, align 16
  %82 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %72
  %84 = load i80, ptr %9, align 16
  %85 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 0, i80 %84)
  store i80 %85, ptr %9, align 16
  br label %80

86:                                               ; preds = %72
  br label %80

87:                                               ; preds = %91, %88
  store i1 true, ptr %6, align 1
  br label %47

88:                                               ; preds = %80
  %89 = load i80, ptr %8, align 16
  %90 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 0, i80 %89)
  store i80 %90, ptr %8, align 16
  br label %87

91:                                               ; preds = %80
  br label %87

92:                                               ; preds = %131, %106
  %93 = load i1, ptr %6, align 1
  %94 = xor i1 %93, true
  br i1 %94, label %140, label %143

95:                                               ; preds = %98, %97
  %96 = phi i1 [ true, %97 ], [ %101, %98 ]
  br i1 %96, label %102, label %106

97:                                               ; preds = %47
  br label %95

98:                                               ; preds = %47
  %99 = load i80, ptr %8, align 16
  %100 = and i80 %99, 604462909807314587353087
  %101 = icmp eq i80 %100, 604453686435277732577280
  br label %95

102:                                              ; preds = %95
  %103 = load i80, ptr %9, align 16
  %104 = and i80 %103, 604462909807314587353087
  %105 = icmp eq i80 %104, 604453686435277732577280
  br i1 %105, label %114, label %115

106:                                              ; preds = %95
  br label %92

107:                                              ; preds = %115, %114
  %108 = phi i80 [ 302222231531620438900736, %114 ], [ 0, %115 ]
  %109 = load i80, ptr %9, align 16
  %110 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 %108, i80 %109)
  store i80 %110, ptr %9, align 16
  %111 = load i80, ptr %8, align 16
  %112 = and i80 %111, 604462909807314587353087
  %113 = icmp eq i80 %112, 604453686435277732577280
  br i1 %113, label %122, label %123

114:                                              ; preds = %102
  br label %107

115:                                              ; preds = %102
  br label %107

116:                                              ; preds = %123, %122
  %117 = phi i80 [ 302222231531620438900736, %122 ], [ 0, %123 ]
  %118 = load i80, ptr %8, align 16
  %119 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 %117, i80 %118)
  store i80 %119, ptr %8, align 16
  %120 = load i80, ptr %11, align 16
  %121 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %120)
  br i1 %121, label %127, label %130

122:                                              ; preds = %107
  br label %116

123:                                              ; preds = %107
  br label %116

124:                                              ; preds = %130, %127
  %125 = load i80, ptr %10, align 16
  %126 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %125)
  br i1 %126, label %132, label %135

127:                                              ; preds = %116
  %128 = load i80, ptr %11, align 16
  %129 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 0, i80 %128)
  store i80 %129, ptr %11, align 16
  br label %124

130:                                              ; preds = %116
  br label %124

131:                                              ; preds = %135, %132
  store i1 true, ptr %6, align 1
  br label %92

132:                                              ; preds = %124
  %133 = load i80, ptr %10, align 16
  %134 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 0, i80 %133)
  store i80 %134, ptr %10, align 16
  br label %131

135:                                              ; preds = %124
  br label %131

136:                                              ; preds = %187, %165
  %137 = load i1, ptr %6, align 1
  br i1 %137, label %193, label %212

138:                                              ; preds = %156, %143
  %139 = phi i1 [ %157, %156 ], [ false, %143 ]
  br i1 %139, label %162, label %165

140:                                              ; preds = %92
  %141 = and i80 %14, 604462909807314587353087
  %142 = icmp eq i80 %141, 604453686435277732577280
  br i1 %142, label %146, label %147

143:                                              ; preds = %92
  br label %138

144:                                              ; preds = %147, %146
  %145 = phi i1 [ true, %146 ], [ %149, %147 ]
  br i1 %145, label %152, label %153

146:                                              ; preds = %140
  br label %144

147:                                              ; preds = %140
  %148 = and i80 %17, 604462909807314587353087
  %149 = icmp eq i80 %148, 604453686435277732577280
  br label %144

150:                                              ; preds = %153, %152
  %151 = phi i1 [ true, %152 ], [ %155, %153 ]
  br i1 %151, label %158, label %159

152:                                              ; preds = %144
  br label %150

153:                                              ; preds = %144
  %154 = and i80 %20, 604462909807314587353087
  %155 = icmp eq i80 %154, 604453686435277732577280
  br label %150

156:                                              ; preds = %159, %158
  %157 = phi i1 [ true, %158 ], [ %161, %159 ]
  br label %138

158:                                              ; preds = %150
  br label %156

159:                                              ; preds = %150
  %160 = and i80 %23, 604462909807314587353087
  %161 = icmp eq i80 %160, 604453686435277732577280
  br label %156

162:                                              ; preds = %138
  %163 = load i80, ptr %11, align 16
  %164 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %163)
  br i1 %164, label %169, label %172

165:                                              ; preds = %138
  br label %136

166:                                              ; preds = %172, %169
  %167 = load i80, ptr %10, align 16
  %168 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %167)
  br i1 %168, label %176, label %179

169:                                              ; preds = %162
  %170 = load i80, ptr %11, align 16
  %171 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 0, i80 %170)
  store i80 %171, ptr %11, align 16
  br label %166

172:                                              ; preds = %162
  br label %166

173:                                              ; preds = %179, %176
  %174 = load i80, ptr %9, align 16
  %175 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %174)
  br i1 %175, label %183, label %186

176:                                              ; preds = %166
  %177 = load i80, ptr %10, align 16
  %178 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 0, i80 %177)
  store i80 %178, ptr %10, align 16
  br label %173

179:                                              ; preds = %166
  br label %173

180:                                              ; preds = %186, %183
  %181 = load i80, ptr %8, align 16
  %182 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %181)
  br i1 %182, label %188, label %191

183:                                              ; preds = %173
  %184 = load i80, ptr %9, align 16
  %185 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 0, i80 %184)
  store i80 %185, ptr %9, align 16
  br label %180

186:                                              ; preds = %173
  br label %180

187:                                              ; preds = %191, %188
  store i1 true, ptr %6, align 1
  br label %136

188:                                              ; preds = %180
  %189 = load i80, ptr %8, align 16
  %190 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 0, i80 %189)
  store i80 %190, ptr %8, align 16
  br label %187

191:                                              ; preds = %180
  br label %187

192:                                              ; preds = %212
  br label %34

193:                                              ; preds = %136
  %194 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %5, i32 0, i32 0
  %195 = load i80, ptr %11, align 16
  %196 = load i80, ptr %9, align 16
  %197 = call i80 @__mulxf3(i80 %195, i80 %196)
  %198 = load i80, ptr %10, align 16
  %199 = load i80, ptr %8, align 16
  %200 = call i80 @__mulxf3(i80 %198, i80 %199)
  %201 = call i80 @__subxf3(i80 %197, i80 %200)
  %202 = call i80 @__mulxf3(i80 604453686435277732577280, i80 %201)
  store i80 %202, ptr %194, align 16
  %203 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %5, i32 0, i32 1
  %204 = load i80, ptr %11, align 16
  %205 = load i80, ptr %8, align 16
  %206 = call i80 @__mulxf3(i80 %204, i80 %205)
  %207 = load i80, ptr %10, align 16
  %208 = load i80, ptr %9, align 16
  %209 = call i80 @__mulxf3(i80 %207, i80 %208)
  %210 = call i80 @__addxf3(i80 %206, i80 %209)
  %211 = call i80 @__mulxf3(i80 604453686435277732577280, i80 %210)
  store i80 %211, ptr %203, align 16
  br label %31

212:                                              ; preds = %136
  br label %192
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3684(i80 %0) unnamed_addr #0 {
  %2 = call i32 @__nexf2(i80 %0, i80 %0)
  %3 = icmp ne i32 %2, 0
  ret i1 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @math.copysign.copysign__anon_3685(i80 %0, i80 %1) unnamed_addr #0 {
  %3 = and i80 %0, 604462909807314587353087
  %4 = and i80 %1, -604462909807314587353088
  %5 = or i80 %3, %4
  ret i80 %5
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f128)" @__multc3(fp128 %0, fp128 %1, fp128 %2, fp128 %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %6 = alloca i1, align 1
  %7 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %8 = alloca fp128, align 16
  %9 = alloca fp128, align 16
  %10 = alloca fp128, align 16
  %11 = alloca fp128, align 16
  store fp128 %0, ptr %11, align 16
  store fp128 %1, ptr %10, align 16
  store fp128 %2, ptr %9, align 16
  store fp128 %3, ptr %8, align 16
  %12 = load fp128, ptr %11, align 16
  %13 = load fp128, ptr %9, align 16
  %14 = call fp128 @__multf3(fp128 %12, fp128 %13)
  %15 = load fp128, ptr %10, align 16
  %16 = load fp128, ptr %8, align 16
  %17 = call fp128 @__multf3(fp128 %15, fp128 %16)
  %18 = load fp128, ptr %11, align 16
  %19 = load fp128, ptr %8, align 16
  %20 = call fp128 @__multf3(fp128 %18, fp128 %19)
  %21 = load fp128, ptr %10, align 16
  %22 = load fp128, ptr %9, align 16
  %23 = call fp128 @__multf3(fp128 %21, fp128 %22)
  %24 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 0
  %25 = call fp128 @__subtf3(fp128 %14, fp128 %17)
  store fp128 %25, ptr %24, align 16
  %26 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 1
  %27 = call fp128 @__addtf3(fp128 %20, fp128 %23)
  store fp128 %27, ptr %26, align 16
  %28 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 0
  %29 = load fp128, ptr %28, align 16
  %30 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %29)
  br i1 %30, label %37, label %41

31:                                               ; preds = %205, %34
  %32 = phi ptr [ %5, %205 ], [ %7, %34 ]
  %33 = load %"compiler_rt.mulc3.Complex(f128)", ptr %32, align 16
  ret %"compiler_rt.mulc3.Complex(f128)" %33

34:                                               ; preds = %204, %47
  br label %31

35:                                               ; preds = %41, %37
  %36 = phi i1 [ %40, %37 ], [ false, %41 ]
  br i1 %36, label %42, label %47

37:                                               ; preds = %4
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 1
  %39 = load fp128, ptr %38, align 16
  %40 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %39)
  br label %35

41:                                               ; preds = %4
  br label %35

42:                                               ; preds = %35
  store i1 false, ptr %6, align 1
  %43 = load fp128, ptr %11, align 16
  %44 = bitcast fp128 %43 to i128
  %45 = and i128 %44, 170141183460469231731687303715884105727
  %46 = icmp eq i128 %45, 170135991163610696904058773219554885632
  br i1 %46, label %55, label %56

47:                                               ; preds = %35
  br label %34

48:                                               ; preds = %92, %66
  %49 = load fp128, ptr %9, align 16
  %50 = bitcast fp128 %49 to i128
  %51 = and i128 %50, 170141183460469231731687303715884105727
  %52 = icmp eq i128 %51, 170135991163610696904058773219554885632
  br i1 %52, label %102, label %103

53:                                               ; preds = %56, %55
  %54 = phi i1 [ true, %55 ], [ %60, %56 ]
  br i1 %54, label %61, label %66

55:                                               ; preds = %42
  br label %53

56:                                               ; preds = %42
  %57 = load fp128, ptr %10, align 16
  %58 = bitcast fp128 %57 to i128
  %59 = and i128 %58, 170141183460469231731687303715884105727
  %60 = icmp eq i128 %59, 170135991163610696904058773219554885632
  br label %53

61:                                               ; preds = %53
  %62 = load fp128, ptr %11, align 16
  %63 = bitcast fp128 %62 to i128
  %64 = and i128 %63, 170141183460469231731687303715884105727
  %65 = icmp eq i128 %64, 170135991163610696904058773219554885632
  br i1 %65, label %75, label %76

66:                                               ; preds = %53
  br label %48

67:                                               ; preds = %76, %75
  %68 = phi fp128 [ 0xL00000000000000003FFF000000000000, %75 ], [ 0xL00000000000000000000000000000000, %76 ]
  %69 = load fp128, ptr %11, align 16
  %70 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %68, fp128 %69)
  store fp128 %70, ptr %11, align 16
  %71 = load fp128, ptr %10, align 16
  %72 = bitcast fp128 %71 to i128
  %73 = and i128 %72, 170141183460469231731687303715884105727
  %74 = icmp eq i128 %73, 170135991163610696904058773219554885632
  br i1 %74, label %83, label %84

75:                                               ; preds = %61
  br label %67

76:                                               ; preds = %61
  br label %67

77:                                               ; preds = %84, %83
  %78 = phi fp128 [ 0xL00000000000000003FFF000000000000, %83 ], [ 0xL00000000000000000000000000000000, %84 ]
  %79 = load fp128, ptr %10, align 16
  %80 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %78, fp128 %79)
  store fp128 %80, ptr %10, align 16
  %81 = load fp128, ptr %9, align 16
  %82 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %81)
  br i1 %82, label %88, label %91

83:                                               ; preds = %67
  br label %77

84:                                               ; preds = %67
  br label %77

85:                                               ; preds = %91, %88
  %86 = load fp128, ptr %8, align 16
  %87 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %86)
  br i1 %87, label %93, label %96

88:                                               ; preds = %77
  %89 = load fp128, ptr %9, align 16
  %90 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000000000000000000, fp128 %89)
  store fp128 %90, ptr %9, align 16
  br label %85

91:                                               ; preds = %77
  br label %85

92:                                               ; preds = %96, %93
  store i1 true, ptr %6, align 1
  br label %48

93:                                               ; preds = %85
  %94 = load fp128, ptr %8, align 16
  %95 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000000000000000000, fp128 %94)
  store fp128 %95, ptr %8, align 16
  br label %92

96:                                               ; preds = %85
  br label %92

97:                                               ; preds = %139, %113
  %98 = load i1, ptr %6, align 1
  %99 = xor i1 %98, true
  br i1 %99, label %148, label %152

100:                                              ; preds = %103, %102
  %101 = phi i1 [ true, %102 ], [ %107, %103 ]
  br i1 %101, label %108, label %113

102:                                              ; preds = %48
  br label %100

103:                                              ; preds = %48
  %104 = load fp128, ptr %8, align 16
  %105 = bitcast fp128 %104 to i128
  %106 = and i128 %105, 170141183460469231731687303715884105727
  %107 = icmp eq i128 %106, 170135991163610696904058773219554885632
  br label %100

108:                                              ; preds = %100
  %109 = load fp128, ptr %9, align 16
  %110 = bitcast fp128 %109 to i128
  %111 = and i128 %110, 170141183460469231731687303715884105727
  %112 = icmp eq i128 %111, 170135991163610696904058773219554885632
  br i1 %112, label %122, label %123

113:                                              ; preds = %100
  br label %97

114:                                              ; preds = %123, %122
  %115 = phi fp128 [ 0xL00000000000000003FFF000000000000, %122 ], [ 0xL00000000000000000000000000000000, %123 ]
  %116 = load fp128, ptr %9, align 16
  %117 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %115, fp128 %116)
  store fp128 %117, ptr %9, align 16
  %118 = load fp128, ptr %8, align 16
  %119 = bitcast fp128 %118 to i128
  %120 = and i128 %119, 170141183460469231731687303715884105727
  %121 = icmp eq i128 %120, 170135991163610696904058773219554885632
  br i1 %121, label %130, label %131

122:                                              ; preds = %108
  br label %114

123:                                              ; preds = %108
  br label %114

124:                                              ; preds = %131, %130
  %125 = phi fp128 [ 0xL00000000000000003FFF000000000000, %130 ], [ 0xL00000000000000000000000000000000, %131 ]
  %126 = load fp128, ptr %8, align 16
  %127 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %125, fp128 %126)
  store fp128 %127, ptr %8, align 16
  %128 = load fp128, ptr %11, align 16
  %129 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %128)
  br i1 %129, label %135, label %138

130:                                              ; preds = %114
  br label %124

131:                                              ; preds = %114
  br label %124

132:                                              ; preds = %138, %135
  %133 = load fp128, ptr %10, align 16
  %134 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %133)
  br i1 %134, label %140, label %143

135:                                              ; preds = %124
  %136 = load fp128, ptr %11, align 16
  %137 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000000000000000000, fp128 %136)
  store fp128 %137, ptr %11, align 16
  br label %132

138:                                              ; preds = %124
  br label %132

139:                                              ; preds = %143, %140
  store i1 true, ptr %6, align 1
  br label %97

140:                                              ; preds = %132
  %141 = load fp128, ptr %10, align 16
  %142 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000000000000000000, fp128 %141)
  store fp128 %142, ptr %10, align 16
  br label %139

143:                                              ; preds = %132
  br label %139

144:                                              ; preds = %199, %177
  %145 = load i1, ptr %6, align 1
  br i1 %145, label %205, label %224

146:                                              ; preds = %167, %152
  %147 = phi i1 [ %168, %167 ], [ false, %152 ]
  br i1 %147, label %174, label %177

148:                                              ; preds = %97
  %149 = bitcast fp128 %14 to i128
  %150 = and i128 %149, 170141183460469231731687303715884105727
  %151 = icmp eq i128 %150, 170135991163610696904058773219554885632
  br i1 %151, label %155, label %156

152:                                              ; preds = %97
  br label %146

153:                                              ; preds = %156, %155
  %154 = phi i1 [ true, %155 ], [ %159, %156 ]
  br i1 %154, label %162, label %163

155:                                              ; preds = %148
  br label %153

156:                                              ; preds = %148
  %157 = bitcast fp128 %17 to i128
  %158 = and i128 %157, 170141183460469231731687303715884105727
  %159 = icmp eq i128 %158, 170135991163610696904058773219554885632
  br label %153

160:                                              ; preds = %163, %162
  %161 = phi i1 [ true, %162 ], [ %166, %163 ]
  br i1 %161, label %169, label %170

162:                                              ; preds = %153
  br label %160

163:                                              ; preds = %153
  %164 = bitcast fp128 %20 to i128
  %165 = and i128 %164, 170141183460469231731687303715884105727
  %166 = icmp eq i128 %165, 170135991163610696904058773219554885632
  br label %160

167:                                              ; preds = %170, %169
  %168 = phi i1 [ true, %169 ], [ %173, %170 ]
  br label %146

169:                                              ; preds = %160
  br label %167

170:                                              ; preds = %160
  %171 = bitcast fp128 %23 to i128
  %172 = and i128 %171, 170141183460469231731687303715884105727
  %173 = icmp eq i128 %172, 170135991163610696904058773219554885632
  br label %167

174:                                              ; preds = %146
  %175 = load fp128, ptr %11, align 16
  %176 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %175)
  br i1 %176, label %181, label %184

177:                                              ; preds = %146
  br label %144

178:                                              ; preds = %184, %181
  %179 = load fp128, ptr %10, align 16
  %180 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %179)
  br i1 %180, label %188, label %191

181:                                              ; preds = %174
  %182 = load fp128, ptr %11, align 16
  %183 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000000000000000000, fp128 %182)
  store fp128 %183, ptr %11, align 16
  br label %178

184:                                              ; preds = %174
  br label %178

185:                                              ; preds = %191, %188
  %186 = load fp128, ptr %9, align 16
  %187 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %186)
  br i1 %187, label %195, label %198

188:                                              ; preds = %178
  %189 = load fp128, ptr %10, align 16
  %190 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000000000000000000, fp128 %189)
  store fp128 %190, ptr %10, align 16
  br label %185

191:                                              ; preds = %178
  br label %185

192:                                              ; preds = %198, %195
  %193 = load fp128, ptr %8, align 16
  %194 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %193)
  br i1 %194, label %200, label %203

195:                                              ; preds = %185
  %196 = load fp128, ptr %9, align 16
  %197 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000000000000000000, fp128 %196)
  store fp128 %197, ptr %9, align 16
  br label %192

198:                                              ; preds = %185
  br label %192

199:                                              ; preds = %203, %200
  store i1 true, ptr %6, align 1
  br label %144

200:                                              ; preds = %192
  %201 = load fp128, ptr %8, align 16
  %202 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000000000000000000, fp128 %201)
  store fp128 %202, ptr %8, align 16
  br label %199

203:                                              ; preds = %192
  br label %199

204:                                              ; preds = %224
  br label %34

205:                                              ; preds = %144
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %207 = load fp128, ptr %11, align 16
  %208 = load fp128, ptr %9, align 16
  %209 = call fp128 @__multf3(fp128 %207, fp128 %208)
  %210 = load fp128, ptr %10, align 16
  %211 = load fp128, ptr %8, align 16
  %212 = call fp128 @__multf3(fp128 %210, fp128 %211)
  %213 = call fp128 @__subtf3(fp128 %209, fp128 %212)
  %214 = call fp128 @__multf3(fp128 0xL00000000000000007FFF000000000000, fp128 %213)
  store fp128 %214, ptr %206, align 16
  %215 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 1
  %216 = load fp128, ptr %11, align 16
  %217 = load fp128, ptr %8, align 16
  %218 = call fp128 @__multf3(fp128 %216, fp128 %217)
  %219 = load fp128, ptr %10, align 16
  %220 = load fp128, ptr %9, align 16
  %221 = call fp128 @__multf3(fp128 %219, fp128 %220)
  %222 = call fp128 @__addtf3(fp128 %218, fp128 %221)
  %223 = call fp128 @__multf3(fp128 0xL00000000000000007FFF000000000000, fp128 %222)
  store fp128 %223, ptr %215, align 16
  br label %31

224:                                              ; preds = %144
  br label %204
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isnan.isNan__anon_3686(fp128 %0) unnamed_addr #0 {
  %2 = call i32 @__netf2(fp128 %0, fp128 %0)
  %3 = icmp ne i32 %2, 0
  ret i1 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %0, fp128 %1) unnamed_addr #0 {
  %3 = bitcast fp128 %0 to i128
  %4 = and i128 %3, 170141183460469231731687303715884105727
  %5 = bitcast fp128 %1 to i128
  %6 = and i128 %5, -170141183460469231731687303715884105728
  %7 = or i128 %4, %6
  %8 = bitcast i128 %7 to fp128
  ret fp128 %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f16)" @__divhc3(half %0, half %1, half %2, half %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %6 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %7 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %8 = alloca %"compiler_rt.mulc3.Complex(f16)", align 2
  %9 = alloca half, align 2
  %10 = alloca half, align 2
  store half %2, ptr %10, align 2
  store half %3, ptr %9, align 2
  %11 = load half, ptr %10, align 2
  %12 = call half @llvm.fabs.f16(half %11)
  %13 = load half, ptr %9, align 2
  %14 = call half @llvm.fabs.f16(half %13)
  %15 = call half @llvm.maxnum.f16(half %12, half %14)
  %16 = call fastcc i32 @math.ilogb.ilogb__anon_3709(half %15)
  %17 = icmp ne i32 %16, 2147483647
  br i1 %17, label %23, label %25

18:                                               ; preds = %197, %151, %104, %80
  %19 = phi ptr [ %7, %104 ], [ %6, %151 ], [ %5, %197 ], [ %8, %80 ]
  %20 = load %"compiler_rt.mulc3.Complex(f16)", ptr %19, align 2
  ret %"compiler_rt.mulc3.Complex(f16)" %20

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %4
  %24 = icmp ne i32 %16, -2147483648
  br label %21

25:                                               ; preds = %4
  br label %21

26:                                               ; preds = %57, %48
  %27 = phi i32 [ %16, %57 ], [ 0, %48 ]
  %28 = load half, ptr %10, align 2
  %29 = load half, ptr %10, align 2
  %30 = fmul half %28, %29
  %31 = load half, ptr %9, align 2
  %32 = load half, ptr %9, align 2
  %33 = fmul half %31, %32
  %34 = fadd half %30, %33
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 0
  %36 = load half, ptr %10, align 2
  %37 = fmul half %0, %36
  %38 = load half, ptr %9, align 2
  %39 = fmul half %1, %38
  %40 = fadd half %37, %39
  %41 = fdiv half %40, %34
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load half, ptr %10, align 2
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc half @math.ldexp.ldexp__anon_3723(half %45, i32 %51)
  store half %52, ptr %10, align 2
  %53 = load half, ptr %9, align 2
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc half @math.ldexp.ldexp__anon_3723(half %53, i32 %58)
  store half %59, ptr %9, align 2
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc half @math.ldexp.ldexp__anon_3723(half %41, i32 %62)
  store half %63, ptr %35, align 2
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 1
  %65 = load half, ptr %10, align 2
  %66 = fmul half %1, %65
  %67 = load half, ptr %9, align 2
  %68 = fmul half %0, %67
  %69 = fsub half %66, %68
  %70 = fdiv half %69, %34
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc half @math.ldexp.ldexp__anon_3723(half %70, i32 %75)
  store half %76, ptr %64, align 2
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 0
  %78 = load half, ptr %77, align 2
  %79 = call fastcc i1 @math.isnan.isNan__anon_3662(half %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %91, %90
  br label %18

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %90

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %8, i32 0, i32 1
  %85 = load half, ptr %84, align 2
  %86 = call fastcc i1 @math.isnan.isNan__anon_3662(half %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = fcmp oeq half %34, 0xH0000
  br i1 %89, label %94, label %97

90:                                               ; preds = %81
  br label %80

91:                                               ; preds = %117
  br label %80

92:                                               ; preds = %98, %97
  %93 = phi i1 [ %99, %98 ], [ false, %97 ]
  br i1 %93, label %104, label %113

94:                                               ; preds = %88
  %95 = call fastcc i1 @math.isnan.isNan__anon_3662(half %0)
  %96 = xor i1 %95, true
  br i1 %96, label %100, label %101

97:                                               ; preds = %88
  br label %92

98:                                               ; preds = %101, %100
  %99 = phi i1 [ true, %100 ], [ %103, %101 ]
  br label %92

100:                                              ; preds = %94
  br label %98

101:                                              ; preds = %94
  %102 = call fastcc i1 @math.isnan.isNan__anon_3662(half %1)
  %103 = xor i1 %102, true
  br label %98

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %7, i32 0, i32 0
  %106 = load half, ptr %10, align 2
  %107 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH7C00, half %106)
  %108 = fmul half %107, %0
  store half %108, ptr %105, align 2
  %109 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %7, i32 0, i32 1
  %110 = load half, ptr %10, align 2
  %111 = call fastcc half @math.copysign.copysign__anon_3679(half 0xH7C00, half %110)
  %112 = fmul half %111, %1
  store half %112, ptr %109, align 2
  br label %18

113:                                              ; preds = %92
  %114 = bitcast half %0 to i16
  %115 = and i16 %114, 32767
  %116 = icmp eq i16 %115, 31744
  br i1 %116, label %120, label %121

117:                                              ; preds = %170
  br label %91

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %124, %121 ]
  br i1 %119, label %127, label %130

120:                                              ; preds = %113
  br label %118

121:                                              ; preds = %113
  %122 = bitcast half %1 to i16
  %123 = and i16 %122, 32767
  %124 = icmp eq i16 %123, 31744
  br label %118

125:                                              ; preds = %130, %127
  %126 = phi i1 [ %129, %127 ], [ false, %130 ]
  br i1 %126, label %133, label %136

127:                                              ; preds = %118
  %128 = load half, ptr %10, align 2
  %129 = call fastcc i1 @math.isfinite.isFinite__anon_3730(half %128)
  br label %125

130:                                              ; preds = %118
  br label %125

131:                                              ; preds = %136, %133
  %132 = phi i1 [ %135, %133 ], [ false, %136 ]
  br i1 %132, label %137, label %141

133:                                              ; preds = %125
  %134 = load half, ptr %9, align 2
  %135 = call fastcc i1 @math.isfinite.isFinite__anon_3730(half %134)
  br label %131

136:                                              ; preds = %125
  br label %131

137:                                              ; preds = %131
  %138 = bitcast half %0 to i16
  %139 = and i16 %138, 32767
  %140 = icmp eq i16 %139, 31744
  br i1 %140, label %149, label %150

141:                                              ; preds = %131
  %142 = icmp eq i32 %16, 2147483647
  br i1 %142, label %173, label %175

143:                                              ; preds = %150, %149
  %144 = phi half [ 0xH3C00, %149 ], [ 0xH0000, %150 ]
  %145 = call fastcc half @math.copysign.copysign__anon_3679(half %144, half %0)
  %146 = bitcast half %1 to i16
  %147 = and i16 %146, 32767
  %148 = icmp eq i16 %147, 31744
  br i1 %148, label %168, label %169

149:                                              ; preds = %137
  br label %143

150:                                              ; preds = %137
  br label %143

151:                                              ; preds = %169, %168
  %152 = phi half [ 0xH3C00, %168 ], [ 0xH0000, %169 ]
  %153 = call fastcc half @math.copysign.copysign__anon_3679(half %152, half %1)
  %154 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %6, i32 0, i32 0
  %155 = load half, ptr %10, align 2
  %156 = fmul half %145, %155
  %157 = load half, ptr %9, align 2
  %158 = fmul half %153, %157
  %159 = fsub half %156, %158
  %160 = fmul half 0xH7C00, %159
  store half %160, ptr %154, align 2
  %161 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %6, i32 0, i32 1
  %162 = load half, ptr %10, align 2
  %163 = fmul half %153, %162
  %164 = load half, ptr %9, align 2
  %165 = fmul half %145, %164
  %166 = fsub half %163, %165
  %167 = fmul half 0xH7C00, %166
  store half %167, ptr %161, align 2
  br label %18

168:                                              ; preds = %143
  br label %151

169:                                              ; preds = %143
  br label %151

170:                                              ; preds = %186
  br label %117

171:                                              ; preds = %175, %173
  %172 = phi i1 [ %174, %173 ], [ false, %175 ]
  br i1 %172, label %178, label %180

173:                                              ; preds = %141
  %174 = call fastcc i1 @math.isfinite.isFinite__anon_3730(half %0)
  br label %171

175:                                              ; preds = %141
  br label %171

176:                                              ; preds = %180, %178
  %177 = phi i1 [ %179, %178 ], [ false, %180 ]
  br i1 %177, label %181, label %186

178:                                              ; preds = %171
  %179 = call fastcc i1 @math.isfinite.isFinite__anon_3730(half %1)
  br label %176

180:                                              ; preds = %171
  br label %176

181:                                              ; preds = %176
  %182 = load half, ptr %10, align 2
  %183 = bitcast half %182 to i16
  %184 = and i16 %183, 32767
  %185 = icmp eq i16 %184, 31744
  br i1 %185, label %195, label %196

186:                                              ; preds = %176
  br label %170

187:                                              ; preds = %196, %195
  %188 = phi half [ 0xH3C00, %195 ], [ 0xH0000, %196 ]
  %189 = load half, ptr %10, align 2
  %190 = call fastcc half @math.copysign.copysign__anon_3679(half %188, half %189)
  %191 = load half, ptr %9, align 2
  %192 = bitcast half %191 to i16
  %193 = and i16 %192, 32767
  %194 = icmp eq i16 %193, 31744
  br i1 %194, label %211, label %212

195:                                              ; preds = %181
  br label %187

196:                                              ; preds = %181
  br label %187

197:                                              ; preds = %212, %211
  %198 = phi half [ 0xH3C00, %211 ], [ 0xH0000, %212 ]
  %199 = load half, ptr %9, align 2
  %200 = call fastcc half @math.copysign.copysign__anon_3679(half %198, half %199)
  %201 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %5, i32 0, i32 0
  %202 = fmul half %0, %190
  %203 = fmul half %1, %200
  %204 = fadd half %202, %203
  %205 = fmul half 0xH0000, %204
  store half %205, ptr %201, align 2
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f16)", ptr %5, i32 0, i32 1
  %207 = fmul half %1, %190
  %208 = fmul half %0, %200
  %209 = fsub half %207, %208
  %210 = fmul half 0xH0000, %209
  store half %210, ptr %206, align 2
  br label %18

211:                                              ; preds = %187
  br label %197

212:                                              ; preds = %187
  br label %197
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare half @llvm.fabs.f16(half) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare half @llvm.maxnum.f16(half, half) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3709(half %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_5843(half %0)
  ret i32 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc half @math.ldexp.ldexp__anon_3723(half %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = bitcast half %0 to i16
  %7 = and i16 %6, -32768
  %8 = call fastcc i1 @math.isnan.isNan__anon_3662(half %0)
  br i1 %8, label %17, label %18

9:                                                ; preds = %22
  %10 = shl i16 %6, 1
  %11 = lshr i16 %10, 11
  %12 = zext i16 %11 to i32
  store i32 %12, ptr %5, align 4
  %13 = load i32, ptr %5, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %25, label %33

15:                                               ; preds = %18, %17
  %16 = phi i1 [ true, %17 ], [ %20, %18 ]
  br i1 %16, label %21, label %22

17:                                               ; preds = %2
  br label %15

18:                                               ; preds = %2
  %19 = call fastcc i1 @math.isfinite.isFinite__anon_3730(half %0)
  %20 = xor i1 %19, true
  br label %15

21:                                               ; preds = %15
  ret half %0

22:                                               ; preds = %15
  br label %9

23:                                               ; preds = %40, %33
  %24 = icmp sge i32 %1, 0
  br i1 %24, label %42, label %46

25:                                               ; preds = %9
  %26 = load i32, ptr %5, align 4
  %27 = shl i16 %6, 1
  %28 = call i16 @llvm.ctlz.i16(i16 %27, i1 false)
  %29 = trunc i16 %28 to i5
  %30 = zext i5 %29 to i32
  %31 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 5, i32 %30)
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %34, label %35

33:                                               ; preds = %9
  br label %23

34:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %25
  %36 = extractvalue { i32, i1 } %31, 0
  %37 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %26, i32 %36)
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

40:                                               ; preds = %35
  %41 = extractvalue { i32, i1 } %37, 0
  store i32 %41, ptr %5, align 4
  br label %23

42:                                               ; preds = %23
  %43 = load i32, ptr %5, align 4
  %44 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 30, i32 %43)
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %53, label %54

46:                                               ; preds = %23
  %47 = load i32, ptr %5, align 4
  %48 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %47)
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %133, label %134

50:                                               ; preds = %64
  %51 = sub i32 65535, %1
  %52 = icmp ule i32 %51, 65535
  br i1 %52, label %124, label %125

53:                                               ; preds = %42
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

54:                                               ; preds = %42
  %55 = extractvalue { i32, i1 } %44, 0
  %56 = icmp sgt i32 %1, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %54
  %58 = or i16 31744, %7
  %59 = bitcast i16 %58 to half
  ret half %59

60:                                               ; preds = %54
  %61 = load i32, ptr %5, align 4
  %62 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %61, i32 %1)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %65, label %66

64:                                               ; preds = %83
  br label %50

65:                                               ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %60
  %67 = extractvalue { i32, i1 } %62, 0
  %68 = icmp sle i32 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %66
  %70 = sub i32 15, %1
  %71 = icmp ule i32 %70, 15
  br i1 %71, label %81, label %82

72:                                               ; preds = %66
  %73 = load i32, ptr %5, align 4
  %74 = icmp sle i32 %73, 0
  br i1 %74, label %84, label %88

75:                                               ; preds = %81
  %76 = trunc i32 %1 to i4
  %77 = zext i4 %76 to i16
  %78 = shl i16 %6, %77
  %79 = or i16 %78, %7
  %80 = bitcast i16 %79 to half
  ret half %80

81:                                               ; preds = %69
  br label %75

82:                                               ; preds = %69
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

83:                                               ; preds = %88
  br label %64

84:                                               ; preds = %72
  %85 = load i32, ptr %5, align 4
  %86 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %85)
  %87 = extractvalue { i32, i1 } %86, 1
  br i1 %87, label %89, label %90

88:                                               ; preds = %72
  br label %83

89:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %84
  %91 = extractvalue { i32, i1 } %86, 0
  %92 = sub i32 65535, %91
  %93 = icmp ule i32 %92, 65535
  br i1 %93, label %101, label %102

94:                                               ; preds = %101
  %95 = trunc i32 %91 to i16
  %96 = shl i16 %95, 10
  store i16 %96, ptr %4, align 2
  %97 = load i16, ptr %4, align 2
  %98 = load i32, ptr %5, align 4
  %99 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %98)
  %100 = extractvalue { i32, i1 } %99, 1
  br i1 %100, label %103, label %104

101:                                              ; preds = %90
  br label %94

102:                                              ; preds = %90
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

103:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %94
  %105 = extractvalue { i32, i1 } %99, 0
  %106 = sub i32 15, %105
  %107 = icmp ule i32 %106, 15
  br i1 %107, label %117, label %118

108:                                              ; preds = %117
  %109 = trunc i32 %105 to i4
  %110 = zext i4 %109 to i16
  %111 = shl i16 %6, %110
  %112 = and i16 %111, 1023
  %113 = or i16 %97, %112
  store i16 %113, ptr %4, align 2
  %114 = load i16, ptr %4, align 2
  %115 = or i16 %114, %7
  %116 = bitcast i16 %115 to half
  ret half %116

117:                                              ; preds = %104
  br label %108

118:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

119:                                              ; preds = %124
  %120 = trunc i32 %1 to i16
  %121 = shl i16 %120, 10
  %122 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %6, i16 %121)
  %123 = extractvalue { i16, i1 } %122, 1
  br i1 %123, label %126, label %127

124:                                              ; preds = %50
  br label %119

125:                                              ; preds = %50
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

126:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

127:                                              ; preds = %119
  %128 = extractvalue { i16, i1 } %122, 0
  %129 = bitcast i16 %128 to half
  ret half %129

130:                                              ; preds = %141
  %131 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %132 = extractvalue { i32, i1 } %131, 1
  br i1 %132, label %220, label %221

133:                                              ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

134:                                              ; preds = %46
  %135 = extractvalue { i32, i1 } %48, 0
  %136 = icmp sle i32 %1, %135
  br i1 %136, label %137, label %141

137:                                              ; preds = %134
  %138 = load i32, ptr %5, align 4
  %139 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 10, i32 %138)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %145, label %146

141:                                              ; preds = %134
  br label %130

142:                                              ; preds = %156
  %143 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %144 = extractvalue { i32, i1 } %143, 1
  br i1 %144, label %157, label %158

145:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

146:                                              ; preds = %137
  %147 = extractvalue { i32, i1 } %139, 0
  %148 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %147)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %150, label %151

150:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

151:                                              ; preds = %146
  %152 = extractvalue { i32, i1 } %148, 0
  %153 = icmp slt i32 %1, %152
  br i1 %153, label %154, label %156

154:                                              ; preds = %151
  %155 = bitcast i16 %7 to half
  ret half %155

156:                                              ; preds = %151
  br label %142

157:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

158:                                              ; preds = %142
  %159 = extractvalue { i32, i1 } %143, 0
  %160 = load i32, ptr %5, align 4
  %161 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %160, i32 %1)
  %162 = extractvalue { i32, i1 } %161, 1
  br i1 %162, label %163, label %164

163:                                              ; preds = %158
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

164:                                              ; preds = %158
  %165 = extractvalue { i32, i1 } %161, 0
  %166 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %165)
  %167 = extractvalue { i32, i1 } %166, 1
  br i1 %167, label %168, label %169

168:                                              ; preds = %164
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

169:                                              ; preds = %164
  %170 = extractvalue { i32, i1 } %166, 0
  %171 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %170, i32 1)
  %172 = extractvalue { i32, i1 } %171, 1
  br i1 %172, label %173, label %174

173:                                              ; preds = %169
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

174:                                              ; preds = %169
  %175 = extractvalue { i32, i1 } %171, 0
  %176 = call i32 @llvm.smin.i32(i32 %159, i32 %175)
  %177 = sub i32 15, %176
  %178 = icmp ule i32 %177, 15
  br i1 %178, label %185, label %186

179:                                              ; preds = %185
  %180 = trunc i32 %176 to i4
  %181 = call i16 @llvm.cttz.i16(i16 %6, i1 false)
  %182 = trunc i16 %181 to i5
  %183 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 %180, i4 1)
  %184 = extractvalue { i4, i1 } %183, 1
  br i1 %184, label %187, label %188

185:                                              ; preds = %174
  br label %179

186:                                              ; preds = %174
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

187:                                              ; preds = %179
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

188:                                              ; preds = %179
  %189 = extractvalue { i4, i1 } %183, 0
  %190 = zext i4 %189 to i5
  %191 = icmp eq i5 %182, %190
  %192 = and i16 %6, 1023
  store i16 %192, ptr %3, align 2
  %193 = load i16, ptr %3, align 2
  %194 = load i32, ptr %5, align 4
  %195 = icmp sgt i32 %194, 0
  %196 = zext i1 %195 to i16
  %197 = shl i16 %196, 10
  %198 = or i16 %193, %197
  store i16 %198, ptr %3, align 2
  %199 = load i16, ptr %3, align 2
  %200 = call fastcc { i4, i1 } @llvm.usub.with.overflow.i4(i4 %180, i4 1)
  %201 = extractvalue { i4, i1 } %200, 1
  br i1 %201, label %202, label %203

202:                                              ; preds = %188
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

203:                                              ; preds = %188
  %204 = extractvalue { i4, i1 } %200, 0
  %205 = zext i4 %204 to i16
  %206 = lshr i16 %199, %205
  store i16 %206, ptr %3, align 2
  %207 = load i16, ptr %3, align 2
  %208 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %207, i16 1)
  %209 = extractvalue { i16, i1 } %208, 1
  br i1 %209, label %210, label %211

210:                                              ; preds = %203
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

211:                                              ; preds = %203
  %212 = extractvalue { i16, i1 } %208, 0
  %213 = lshr i16 %212, 1
  %214 = zext i1 %191 to i16
  %215 = xor i16 %214, -1
  %216 = and i16 %213, %215
  store i16 %216, ptr %3, align 2
  %217 = load i16, ptr %3, align 2
  %218 = or i16 %217, %7
  %219 = bitcast i16 %218 to half
  ret half %219

220:                                              ; preds = %130
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

221:                                              ; preds = %130
  %222 = extractvalue { i32, i1 } %131, 0
  %223 = sub i32 65535, %222
  %224 = icmp ule i32 %223, 65535
  br i1 %224, label %230, label %231

225:                                              ; preds = %230
  %226 = trunc i32 %222 to i16
  %227 = shl i16 %226, 10
  %228 = call fastcc { i16, i1 } @llvm.usub.with.overflow.i16(i16 %6, i16 %227)
  %229 = extractvalue { i16, i1 } %228, 1
  br i1 %229, label %232, label %233

230:                                              ; preds = %221
  br label %225

231:                                              ; preds = %221
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @160)
  unreachable

232:                                              ; preds = %225
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

233:                                              ; preds = %225
  %234 = extractvalue { i16, i1 } %228, 0
  %235 = bitcast i16 %234 to half
  ret half %235
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3730(half %0) unnamed_addr #0 {
  %2 = bitcast half %0 to i16
  %3 = and i16 %2, 32767
  %4 = icmp ult i16 %3, 31744
  ret i1 %4
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.cttz.i16(i16, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_5843(half %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i16, align 2
  %4 = bitcast half %0 to i16
  %5 = and i16 %4, 32767
  store i16 %5, ptr %3, align 2
  %6 = load i16, ptr %3, align 2
  %7 = lshr i16 %6, 10
  %8 = zext i16 %7 to i32
  store i32 %8, ptr %2, align 4
  %9 = load i32, ptr %2, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %17

11:                                               ; preds = %17
  %12 = load i32, ptr %2, align 4
  %13 = icmp eq i32 %12, 31
  br i1 %13, label %34, label %37

14:                                               ; preds = %1
  %15 = load i16, ptr %3, align 2
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %25, label %26

17:                                               ; preds = %1
  br label %11

18:                                               ; preds = %26
  %19 = load i16, ptr %3, align 2
  %20 = call i16 @llvm.ctlz.i16(i16 %19, i1 false)
  %21 = trunc i16 %20 to i5
  %22 = zext i5 %21 to i32
  %23 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -9, i32 %22)
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %27, label %28

25:                                               ; preds = %14
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

26:                                               ; preds = %14
  br label %18

27:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

28:                                               ; preds = %18
  %29 = extractvalue { i32, i1 } %23, 0
  ret i32 %29

30:                                               ; preds = %37
  %31 = load i32, ptr %2, align 4
  %32 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %31, i32 15)
  %33 = extractvalue { i32, i1 } %32, 1
  br i1 %33, label %40, label %41

34:                                               ; preds = %11
  call fastcc void @math.raiseInvalid()
  %35 = load i16, ptr %3, align 2
  %36 = icmp ugt i16 %35, 31744
  br i1 %36, label %38, label %39

37:                                               ; preds = %11
  br label %30

38:                                               ; preds = %34
  ret i32 -2147483648

39:                                               ; preds = %34
  ret i32 2147483647

40:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

41:                                               ; preds = %30
  %42 = extractvalue { i32, i1 } %32, 0
  ret i32 %42
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.raiseInvalid() unnamed_addr #0 {
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f32)" @__divsc3(float %0, float %1, float %2, float %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %6 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %7 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %8 = alloca %"compiler_rt.mulc3.Complex(f32)", align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  store float %2, ptr %10, align 4
  store float %3, ptr %9, align 4
  %11 = load float, ptr %10, align 4
  %12 = call float @llvm.fabs.f32(float %11)
  %13 = load float, ptr %9, align 4
  %14 = call float @llvm.fabs.f32(float %13)
  %15 = call float @llvm.maxnum.f32(float %12, float %14)
  %16 = call fastcc i32 @math.ilogb.ilogb__anon_3731(float %15)
  %17 = icmp ne i32 %16, 2147483647
  br i1 %17, label %23, label %25

18:                                               ; preds = %197, %151, %104, %80
  %19 = phi ptr [ %7, %104 ], [ %6, %151 ], [ %5, %197 ], [ %8, %80 ]
  %20 = load %"compiler_rt.mulc3.Complex(f32)", ptr %19, align 4
  ret %"compiler_rt.mulc3.Complex(f32)" %20

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %4
  %24 = icmp ne i32 %16, -2147483648
  br label %21

25:                                               ; preds = %4
  br label %21

26:                                               ; preds = %57, %48
  %27 = phi i32 [ %16, %57 ], [ 0, %48 ]
  %28 = load float, ptr %10, align 4
  %29 = load float, ptr %10, align 4
  %30 = fmul float %28, %29
  %31 = load float, ptr %9, align 4
  %32 = load float, ptr %9, align 4
  %33 = fmul float %31, %32
  %34 = fadd float %30, %33
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %8, i32 0, i32 0
  %36 = load float, ptr %10, align 4
  %37 = fmul float %0, %36
  %38 = load float, ptr %9, align 4
  %39 = fmul float %1, %38
  %40 = fadd float %37, %39
  %41 = fdiv float %40, %34
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load float, ptr %10, align 4
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc float @math.ldexp.ldexp__anon_3732(float %45, i32 %51)
  store float %52, ptr %10, align 4
  %53 = load float, ptr %9, align 4
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc float @math.ldexp.ldexp__anon_3732(float %53, i32 %58)
  store float %59, ptr %9, align 4
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc float @math.ldexp.ldexp__anon_3732(float %41, i32 %62)
  store float %63, ptr %35, align 4
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %8, i32 0, i32 1
  %65 = load float, ptr %10, align 4
  %66 = fmul float %1, %65
  %67 = load float, ptr %9, align 4
  %68 = fmul float %0, %67
  %69 = fsub float %66, %68
  %70 = fdiv float %69, %34
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc float @math.ldexp.ldexp__anon_3732(float %70, i32 %75)
  store float %76, ptr %64, align 4
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %8, i32 0, i32 0
  %78 = load float, ptr %77, align 4
  %79 = call fastcc i1 @math.isnan.isNan__anon_3680(float %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %91, %90
  br label %18

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %90

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %8, i32 0, i32 1
  %85 = load float, ptr %84, align 4
  %86 = call fastcc i1 @math.isnan.isNan__anon_3680(float %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = fcmp oeq float %34, 0.000000e+00
  br i1 %89, label %94, label %97

90:                                               ; preds = %81
  br label %80

91:                                               ; preds = %117
  br label %80

92:                                               ; preds = %98, %97
  %93 = phi i1 [ %99, %98 ], [ false, %97 ]
  br i1 %93, label %104, label %113

94:                                               ; preds = %88
  %95 = call fastcc i1 @math.isnan.isNan__anon_3680(float %0)
  %96 = xor i1 %95, true
  br i1 %96, label %100, label %101

97:                                               ; preds = %88
  br label %92

98:                                               ; preds = %101, %100
  %99 = phi i1 [ true, %100 ], [ %103, %101 ]
  br label %92

100:                                              ; preds = %94
  br label %98

101:                                              ; preds = %94
  %102 = call fastcc i1 @math.isnan.isNan__anon_3680(float %1)
  %103 = xor i1 %102, true
  br label %98

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 0
  %106 = load float, ptr %10, align 4
  %107 = call fastcc float @math.copysign.copysign__anon_3681(float 0x7FF0000000000000, float %106)
  %108 = fmul float %107, %0
  store float %108, ptr %105, align 4
  %109 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %7, i32 0, i32 1
  %110 = load float, ptr %10, align 4
  %111 = call fastcc float @math.copysign.copysign__anon_3681(float 0x7FF0000000000000, float %110)
  %112 = fmul float %111, %1
  store float %112, ptr %109, align 4
  br label %18

113:                                              ; preds = %92
  %114 = bitcast float %0 to i32
  %115 = and i32 %114, 2147483647
  %116 = icmp eq i32 %115, 2139095040
  br i1 %116, label %120, label %121

117:                                              ; preds = %170
  br label %91

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %124, %121 ]
  br i1 %119, label %127, label %130

120:                                              ; preds = %113
  br label %118

121:                                              ; preds = %113
  %122 = bitcast float %1 to i32
  %123 = and i32 %122, 2147483647
  %124 = icmp eq i32 %123, 2139095040
  br label %118

125:                                              ; preds = %130, %127
  %126 = phi i1 [ %129, %127 ], [ false, %130 ]
  br i1 %126, label %133, label %136

127:                                              ; preds = %118
  %128 = load float, ptr %10, align 4
  %129 = call fastcc i1 @math.isfinite.isFinite__anon_3733(float %128)
  br label %125

130:                                              ; preds = %118
  br label %125

131:                                              ; preds = %136, %133
  %132 = phi i1 [ %135, %133 ], [ false, %136 ]
  br i1 %132, label %137, label %141

133:                                              ; preds = %125
  %134 = load float, ptr %9, align 4
  %135 = call fastcc i1 @math.isfinite.isFinite__anon_3733(float %134)
  br label %131

136:                                              ; preds = %125
  br label %131

137:                                              ; preds = %131
  %138 = bitcast float %0 to i32
  %139 = and i32 %138, 2147483647
  %140 = icmp eq i32 %139, 2139095040
  br i1 %140, label %149, label %150

141:                                              ; preds = %131
  %142 = icmp eq i32 %16, 2147483647
  br i1 %142, label %173, label %175

143:                                              ; preds = %150, %149
  %144 = phi float [ 1.000000e+00, %149 ], [ 0.000000e+00, %150 ]
  %145 = call fastcc float @math.copysign.copysign__anon_3681(float %144, float %0)
  %146 = bitcast float %1 to i32
  %147 = and i32 %146, 2147483647
  %148 = icmp eq i32 %147, 2139095040
  br i1 %148, label %168, label %169

149:                                              ; preds = %137
  br label %143

150:                                              ; preds = %137
  br label %143

151:                                              ; preds = %169, %168
  %152 = phi float [ 1.000000e+00, %168 ], [ 0.000000e+00, %169 ]
  %153 = call fastcc float @math.copysign.copysign__anon_3681(float %152, float %1)
  %154 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %6, i32 0, i32 0
  %155 = load float, ptr %10, align 4
  %156 = fmul float %145, %155
  %157 = load float, ptr %9, align 4
  %158 = fmul float %153, %157
  %159 = fsub float %156, %158
  %160 = fmul float 0x7FF0000000000000, %159
  store float %160, ptr %154, align 4
  %161 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %6, i32 0, i32 1
  %162 = load float, ptr %10, align 4
  %163 = fmul float %153, %162
  %164 = load float, ptr %9, align 4
  %165 = fmul float %145, %164
  %166 = fsub float %163, %165
  %167 = fmul float 0x7FF0000000000000, %166
  store float %167, ptr %161, align 4
  br label %18

168:                                              ; preds = %143
  br label %151

169:                                              ; preds = %143
  br label %151

170:                                              ; preds = %186
  br label %117

171:                                              ; preds = %175, %173
  %172 = phi i1 [ %174, %173 ], [ false, %175 ]
  br i1 %172, label %178, label %180

173:                                              ; preds = %141
  %174 = call fastcc i1 @math.isfinite.isFinite__anon_3733(float %0)
  br label %171

175:                                              ; preds = %141
  br label %171

176:                                              ; preds = %180, %178
  %177 = phi i1 [ %179, %178 ], [ false, %180 ]
  br i1 %177, label %181, label %186

178:                                              ; preds = %171
  %179 = call fastcc i1 @math.isfinite.isFinite__anon_3733(float %1)
  br label %176

180:                                              ; preds = %171
  br label %176

181:                                              ; preds = %176
  %182 = load float, ptr %10, align 4
  %183 = bitcast float %182 to i32
  %184 = and i32 %183, 2147483647
  %185 = icmp eq i32 %184, 2139095040
  br i1 %185, label %195, label %196

186:                                              ; preds = %176
  br label %170

187:                                              ; preds = %196, %195
  %188 = phi float [ 1.000000e+00, %195 ], [ 0.000000e+00, %196 ]
  %189 = load float, ptr %10, align 4
  %190 = call fastcc float @math.copysign.copysign__anon_3681(float %188, float %189)
  %191 = load float, ptr %9, align 4
  %192 = bitcast float %191 to i32
  %193 = and i32 %192, 2147483647
  %194 = icmp eq i32 %193, 2139095040
  br i1 %194, label %211, label %212

195:                                              ; preds = %181
  br label %187

196:                                              ; preds = %181
  br label %187

197:                                              ; preds = %212, %211
  %198 = phi float [ 1.000000e+00, %211 ], [ 0.000000e+00, %212 ]
  %199 = load float, ptr %9, align 4
  %200 = call fastcc float @math.copysign.copysign__anon_3681(float %198, float %199)
  %201 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %5, i32 0, i32 0
  %202 = fmul float %0, %190
  %203 = fmul float %1, %200
  %204 = fadd float %202, %203
  %205 = fmul float 0.000000e+00, %204
  store float %205, ptr %201, align 4
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f32)", ptr %5, i32 0, i32 1
  %207 = fmul float %1, %190
  %208 = fmul float %0, %200
  %209 = fsub float %207, %208
  %210 = fmul float 0.000000e+00, %209
  store float %210, ptr %206, align 4
  br label %18

211:                                              ; preds = %187
  br label %197

212:                                              ; preds = %187
  br label %197
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3731(float %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_5844(float %0)
  ret i32 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @math.ldexp.ldexp__anon_3732(float %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  %7 = and i32 %6, -2147483648
  %8 = call fastcc i1 @math.isnan.isNan__anon_3680(float %0)
  br i1 %8, label %16, label %17

9:                                                ; preds = %21
  %10 = shl i32 %6, 1
  %11 = lshr i32 %10, 24
  %12 = sub i32 2147483647, %11
  %13 = icmp ule i32 %12, 2147483647
  br i1 %13, label %25, label %26

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %19, %17 ]
  br i1 %15, label %20, label %21

16:                                               ; preds = %2
  br label %14

17:                                               ; preds = %2
  %18 = call fastcc i1 @math.isfinite.isFinite__anon_3733(float %0)
  %19 = xor i1 %18, true
  br label %14

20:                                               ; preds = %14
  ret float %0

21:                                               ; preds = %14
  br label %9

22:                                               ; preds = %25
  store i32 %11, ptr %5, align 4
  %23 = load i32, ptr %5, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %37

25:                                               ; preds = %9
  br label %22

26:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

27:                                               ; preds = %44, %37
  %28 = icmp sge i32 %1, 0
  br i1 %28, label %46, label %50

29:                                               ; preds = %22
  %30 = load i32, ptr %5, align 4
  %31 = shl i32 %6, 1
  %32 = call i32 @llvm.ctlz.i32(i32 %31, i1 false)
  %33 = trunc i32 %32 to i6
  %34 = zext i6 %33 to i32
  %35 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 8, i32 %34)
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %38, label %39

37:                                               ; preds = %22
  br label %27

38:                                               ; preds = %29
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

39:                                               ; preds = %29
  %40 = extractvalue { i32, i1 } %35, 0
  %41 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %40)
  %42 = extractvalue { i32, i1 } %41, 1
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

44:                                               ; preds = %39
  %45 = extractvalue { i32, i1 } %41, 0
  store i32 %45, ptr %5, align 4
  br label %27

46:                                               ; preds = %27
  %47 = load i32, ptr %5, align 4
  %48 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 254, i32 %47)
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %56, label %57

50:                                               ; preds = %27
  %51 = load i32, ptr %5, align 4
  %52 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %51)
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %133, label %134

54:                                               ; preds = %67
  %55 = icmp sge i32 %1, 0
  br i1 %55, label %124, label %125

56:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %46
  %58 = extractvalue { i32, i1 } %48, 0
  %59 = icmp sgt i32 %1, %58
  br i1 %59, label %60, label %63

60:                                               ; preds = %57
  %61 = or i32 2139095040, %7
  %62 = bitcast i32 %61 to float
  ret float %62

63:                                               ; preds = %57
  %64 = load i32, ptr %5, align 4
  %65 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %64, i32 %1)
  %66 = extractvalue { i32, i1 } %65, 1
  br i1 %66, label %68, label %69

67:                                               ; preds = %86
  br label %54

68:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %63
  %70 = extractvalue { i32, i1 } %65, 0
  %71 = icmp sle i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %69
  %73 = sub i32 31, %1
  %74 = icmp ule i32 %73, 31
  br i1 %74, label %84, label %85

75:                                               ; preds = %69
  %76 = load i32, ptr %5, align 4
  %77 = icmp sle i32 %76, 0
  br i1 %77, label %87, label %91

78:                                               ; preds = %84
  %79 = trunc i32 %1 to i5
  %80 = zext i5 %79 to i32
  %81 = shl i32 %6, %80
  %82 = or i32 %81, %7
  %83 = bitcast i32 %82 to float
  ret float %83

84:                                               ; preds = %72
  br label %78

85:                                               ; preds = %72
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

86:                                               ; preds = %91
  br label %67

87:                                               ; preds = %75
  %88 = load i32, ptr %5, align 4
  %89 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %88)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %92, label %93

91:                                               ; preds = %75
  br label %86

92:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %87
  %94 = extractvalue { i32, i1 } %89, 0
  %95 = icmp sge i32 %94, 0
  br i1 %95, label %102, label %103

96:                                               ; preds = %102
  %97 = shl i32 %94, 23
  store i32 %97, ptr %4, align 4
  %98 = load i32, ptr %4, align 4
  %99 = load i32, ptr %5, align 4
  %100 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %99)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %104, label %105

102:                                              ; preds = %93
  br label %96

103:                                              ; preds = %93
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

104:                                              ; preds = %96
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %96
  %106 = extractvalue { i32, i1 } %100, 0
  %107 = sub i32 31, %106
  %108 = icmp ule i32 %107, 31
  br i1 %108, label %118, label %119

109:                                              ; preds = %118
  %110 = trunc i32 %106 to i5
  %111 = zext i5 %110 to i32
  %112 = shl i32 %6, %111
  %113 = and i32 %112, 8388607
  %114 = or i32 %98, %113
  store i32 %114, ptr %4, align 4
  %115 = load i32, ptr %4, align 4
  %116 = or i32 %115, %7
  %117 = bitcast i32 %116 to float
  ret float %117

118:                                              ; preds = %105
  br label %109

119:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

120:                                              ; preds = %124
  %121 = shl i32 %1, 23
  %122 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %6, i32 %121)
  %123 = extractvalue { i32, i1 } %122, 1
  br i1 %123, label %126, label %127

124:                                              ; preds = %54
  br label %120

125:                                              ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

126:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

127:                                              ; preds = %120
  %128 = extractvalue { i32, i1 } %122, 0
  %129 = bitcast i32 %128 to float
  ret float %129

130:                                              ; preds = %141
  %131 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %132 = extractvalue { i32, i1 } %131, 1
  br i1 %132, label %220, label %221

133:                                              ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

134:                                              ; preds = %50
  %135 = extractvalue { i32, i1 } %52, 0
  %136 = icmp sle i32 %1, %135
  br i1 %136, label %137, label %141

137:                                              ; preds = %134
  %138 = load i32, ptr %5, align 4
  %139 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 23, i32 %138)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %145, label %146

141:                                              ; preds = %134
  br label %130

142:                                              ; preds = %156
  %143 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %144 = extractvalue { i32, i1 } %143, 1
  br i1 %144, label %157, label %158

145:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

146:                                              ; preds = %137
  %147 = extractvalue { i32, i1 } %139, 0
  %148 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %147)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %150, label %151

150:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

151:                                              ; preds = %146
  %152 = extractvalue { i32, i1 } %148, 0
  %153 = icmp slt i32 %1, %152
  br i1 %153, label %154, label %156

154:                                              ; preds = %151
  %155 = bitcast i32 %7 to float
  ret float %155

156:                                              ; preds = %151
  br label %142

157:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

158:                                              ; preds = %142
  %159 = extractvalue { i32, i1 } %143, 0
  %160 = load i32, ptr %5, align 4
  %161 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %160, i32 %1)
  %162 = extractvalue { i32, i1 } %161, 1
  br i1 %162, label %163, label %164

163:                                              ; preds = %158
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

164:                                              ; preds = %158
  %165 = extractvalue { i32, i1 } %161, 0
  %166 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %165)
  %167 = extractvalue { i32, i1 } %166, 1
  br i1 %167, label %168, label %169

168:                                              ; preds = %164
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

169:                                              ; preds = %164
  %170 = extractvalue { i32, i1 } %166, 0
  %171 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %170, i32 1)
  %172 = extractvalue { i32, i1 } %171, 1
  br i1 %172, label %173, label %174

173:                                              ; preds = %169
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

174:                                              ; preds = %169
  %175 = extractvalue { i32, i1 } %171, 0
  %176 = call i32 @llvm.smin.i32(i32 %159, i32 %175)
  %177 = sub i32 31, %176
  %178 = icmp ule i32 %177, 31
  br i1 %178, label %185, label %186

179:                                              ; preds = %185
  %180 = trunc i32 %176 to i5
  %181 = call i32 @llvm.cttz.i32(i32 %6, i1 false)
  %182 = trunc i32 %181 to i6
  %183 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %180, i5 1)
  %184 = extractvalue { i5, i1 } %183, 1
  br i1 %184, label %187, label %188

185:                                              ; preds = %174
  br label %179

186:                                              ; preds = %174
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

187:                                              ; preds = %179
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

188:                                              ; preds = %179
  %189 = extractvalue { i5, i1 } %183, 0
  %190 = zext i5 %189 to i6
  %191 = icmp eq i6 %182, %190
  %192 = and i32 %6, 8388607
  store i32 %192, ptr %3, align 4
  %193 = load i32, ptr %3, align 4
  %194 = load i32, ptr %5, align 4
  %195 = icmp sgt i32 %194, 0
  %196 = zext i1 %195 to i32
  %197 = shl i32 %196, 23
  %198 = or i32 %193, %197
  store i32 %198, ptr %3, align 4
  %199 = load i32, ptr %3, align 4
  %200 = call fastcc { i5, i1 } @llvm.usub.with.overflow.i5(i5 %180, i5 1)
  %201 = extractvalue { i5, i1 } %200, 1
  br i1 %201, label %202, label %203

202:                                              ; preds = %188
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

203:                                              ; preds = %188
  %204 = extractvalue { i5, i1 } %200, 0
  %205 = zext i5 %204 to i32
  %206 = lshr i32 %199, %205
  store i32 %206, ptr %3, align 4
  %207 = load i32, ptr %3, align 4
  %208 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %207, i32 1)
  %209 = extractvalue { i32, i1 } %208, 1
  br i1 %209, label %210, label %211

210:                                              ; preds = %203
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

211:                                              ; preds = %203
  %212 = extractvalue { i32, i1 } %208, 0
  %213 = lshr i32 %212, 1
  %214 = zext i1 %191 to i32
  %215 = xor i32 %214, -1
  %216 = and i32 %213, %215
  store i32 %216, ptr %3, align 4
  %217 = load i32, ptr %3, align 4
  %218 = or i32 %217, %7
  %219 = bitcast i32 %218 to float
  ret float %219

220:                                              ; preds = %130
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

221:                                              ; preds = %130
  %222 = extractvalue { i32, i1 } %131, 0
  %223 = icmp sge i32 %222, 0
  br i1 %223, label %228, label %229

224:                                              ; preds = %228
  %225 = shl i32 %222, 23
  %226 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %6, i32 %225)
  %227 = extractvalue { i32, i1 } %226, 1
  br i1 %227, label %230, label %231

228:                                              ; preds = %221
  br label %224

229:                                              ; preds = %221
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @161)
  unreachable

230:                                              ; preds = %224
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

231:                                              ; preds = %224
  %232 = extractvalue { i32, i1 } %226, 0
  %233 = bitcast i32 %232 to float
  ret float %233
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3733(float %0) unnamed_addr #0 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = icmp ult i32 %3, 2139095040
  ret i1 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_5844(float %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast float %0 to i32
  %5 = and i32 %4, 2147483647
  store i32 %5, ptr %3, align 4
  %6 = load i32, ptr %3, align 4
  %7 = lshr i32 %6, 23
  %8 = sub i32 2147483647, %7
  %9 = icmp ule i32 %8, 2147483647
  br i1 %9, label %13, label %14

10:                                               ; preds = %13
  store i32 %7, ptr %2, align 4
  %11 = load i32, ptr %2, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %21

13:                                               ; preds = %1
  br label %10

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @177)
  unreachable

15:                                               ; preds = %21
  %16 = load i32, ptr %2, align 4
  %17 = icmp eq i32 %16, 255
  br i1 %17, label %38, label %41

18:                                               ; preds = %10
  %19 = load i32, ptr %3, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %29, label %30

21:                                               ; preds = %10
  br label %15

22:                                               ; preds = %30
  %23 = load i32, ptr %3, align 4
  %24 = call i32 @llvm.ctlz.i32(i32 %23, i1 false)
  %25 = trunc i32 %24 to i6
  %26 = zext i6 %25 to i32
  %27 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -118, i32 %26)
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %31, label %32

29:                                               ; preds = %18
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

30:                                               ; preds = %18
  br label %22

31:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

32:                                               ; preds = %22
  %33 = extractvalue { i32, i1 } %27, 0
  ret i32 %33

34:                                               ; preds = %41
  %35 = load i32, ptr %2, align 4
  %36 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %35, i32 127)
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %44, label %45

38:                                               ; preds = %15
  call fastcc void @math.raiseInvalid()
  %39 = load i32, ptr %3, align 4
  %40 = icmp ugt i32 %39, 2139095040
  br i1 %40, label %42, label %43

41:                                               ; preds = %15
  br label %34

42:                                               ; preds = %38
  ret i32 -2147483648

43:                                               ; preds = %38
  ret i32 2147483647

44:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %34
  %46 = extractvalue { i32, i1 } %36, 0
  ret i32 %46
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f64)" @__divdc3(double %0, double %1, double %2, double %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %6 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %7 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %8 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  store double %2, ptr %10, align 8
  store double %3, ptr %9, align 8
  %11 = load double, ptr %10, align 8
  %12 = call double @llvm.fabs.f64(double %11)
  %13 = load double, ptr %9, align 8
  %14 = call double @llvm.fabs.f64(double %13)
  %15 = call double @llvm.maxnum.f64(double %12, double %14)
  %16 = call fastcc i32 @math.ilogb.ilogb__anon_3734(double %15)
  %17 = icmp ne i32 %16, 2147483647
  br i1 %17, label %23, label %25

18:                                               ; preds = %197, %151, %104, %80
  %19 = phi ptr [ %7, %104 ], [ %6, %151 ], [ %5, %197 ], [ %8, %80 ]
  %20 = load %"compiler_rt.mulc3.Complex(f64)", ptr %19, align 8
  ret %"compiler_rt.mulc3.Complex(f64)" %20

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %4
  %24 = icmp ne i32 %16, -2147483648
  br label %21

25:                                               ; preds = %4
  br label %21

26:                                               ; preds = %57, %48
  %27 = phi i32 [ %16, %57 ], [ 0, %48 ]
  %28 = load double, ptr %10, align 8
  %29 = load double, ptr %10, align 8
  %30 = fmul double %28, %29
  %31 = load double, ptr %9, align 8
  %32 = load double, ptr %9, align 8
  %33 = fmul double %31, %32
  %34 = fadd double %30, %33
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %8, i32 0, i32 0
  %36 = load double, ptr %10, align 8
  %37 = fmul double %0, %36
  %38 = load double, ptr %9, align 8
  %39 = fmul double %1, %38
  %40 = fadd double %37, %39
  %41 = fdiv double %40, %34
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load double, ptr %10, align 8
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc double @math.ldexp.ldexp__anon_3735(double %45, i32 %51)
  store double %52, ptr %10, align 8
  %53 = load double, ptr %9, align 8
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc double @math.ldexp.ldexp__anon_3735(double %53, i32 %58)
  store double %59, ptr %9, align 8
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc double @math.ldexp.ldexp__anon_3735(double %41, i32 %62)
  store double %63, ptr %35, align 8
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %8, i32 0, i32 1
  %65 = load double, ptr %10, align 8
  %66 = fmul double %1, %65
  %67 = load double, ptr %9, align 8
  %68 = fmul double %0, %67
  %69 = fsub double %66, %68
  %70 = fdiv double %69, %34
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc double @math.ldexp.ldexp__anon_3735(double %70, i32 %75)
  store double %76, ptr %64, align 8
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %8, i32 0, i32 0
  %78 = load double, ptr %77, align 8
  %79 = call fastcc i1 @math.isnan.isNan__anon_3682(double %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %91, %90
  br label %18

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %90

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %8, i32 0, i32 1
  %85 = load double, ptr %84, align 8
  %86 = call fastcc i1 @math.isnan.isNan__anon_3682(double %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = fcmp oeq double %34, 0.000000e+00
  br i1 %89, label %94, label %97

90:                                               ; preds = %81
  br label %80

91:                                               ; preds = %117
  br label %80

92:                                               ; preds = %98, %97
  %93 = phi i1 [ %99, %98 ], [ false, %97 ]
  br i1 %93, label %104, label %113

94:                                               ; preds = %88
  %95 = call fastcc i1 @math.isnan.isNan__anon_3682(double %0)
  %96 = xor i1 %95, true
  br i1 %96, label %100, label %101

97:                                               ; preds = %88
  br label %92

98:                                               ; preds = %101, %100
  %99 = phi i1 [ true, %100 ], [ %103, %101 ]
  br label %92

100:                                              ; preds = %94
  br label %98

101:                                              ; preds = %94
  %102 = call fastcc i1 @math.isnan.isNan__anon_3682(double %1)
  %103 = xor i1 %102, true
  br label %98

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %106 = load double, ptr %10, align 8
  %107 = call fastcc double @math.copysign.copysign__anon_3683(double 0x7FF0000000000000, double %106)
  %108 = fmul double %107, %0
  store double %108, ptr %105, align 8
  %109 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 1
  %110 = load double, ptr %10, align 8
  %111 = call fastcc double @math.copysign.copysign__anon_3683(double 0x7FF0000000000000, double %110)
  %112 = fmul double %111, %1
  store double %112, ptr %109, align 8
  br label %18

113:                                              ; preds = %92
  %114 = bitcast double %0 to i64
  %115 = and i64 %114, 9223372036854775807
  %116 = icmp eq i64 %115, 9218868437227405312
  br i1 %116, label %120, label %121

117:                                              ; preds = %170
  br label %91

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %124, %121 ]
  br i1 %119, label %127, label %130

120:                                              ; preds = %113
  br label %118

121:                                              ; preds = %113
  %122 = bitcast double %1 to i64
  %123 = and i64 %122, 9223372036854775807
  %124 = icmp eq i64 %123, 9218868437227405312
  br label %118

125:                                              ; preds = %130, %127
  %126 = phi i1 [ %129, %127 ], [ false, %130 ]
  br i1 %126, label %133, label %136

127:                                              ; preds = %118
  %128 = load double, ptr %10, align 8
  %129 = call fastcc i1 @math.isfinite.isFinite__anon_3736(double %128)
  br label %125

130:                                              ; preds = %118
  br label %125

131:                                              ; preds = %136, %133
  %132 = phi i1 [ %135, %133 ], [ false, %136 ]
  br i1 %132, label %137, label %141

133:                                              ; preds = %125
  %134 = load double, ptr %9, align 8
  %135 = call fastcc i1 @math.isfinite.isFinite__anon_3736(double %134)
  br label %131

136:                                              ; preds = %125
  br label %131

137:                                              ; preds = %131
  %138 = bitcast double %0 to i64
  %139 = and i64 %138, 9223372036854775807
  %140 = icmp eq i64 %139, 9218868437227405312
  br i1 %140, label %149, label %150

141:                                              ; preds = %131
  %142 = icmp eq i32 %16, 2147483647
  br i1 %142, label %173, label %175

143:                                              ; preds = %150, %149
  %144 = phi double [ 1.000000e+00, %149 ], [ 0.000000e+00, %150 ]
  %145 = call fastcc double @math.copysign.copysign__anon_3683(double %144, double %0)
  %146 = bitcast double %1 to i64
  %147 = and i64 %146, 9223372036854775807
  %148 = icmp eq i64 %147, 9218868437227405312
  br i1 %148, label %168, label %169

149:                                              ; preds = %137
  br label %143

150:                                              ; preds = %137
  br label %143

151:                                              ; preds = %169, %168
  %152 = phi double [ 1.000000e+00, %168 ], [ 0.000000e+00, %169 ]
  %153 = call fastcc double @math.copysign.copysign__anon_3683(double %152, double %1)
  %154 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 0
  %155 = load double, ptr %10, align 8
  %156 = fmul double %145, %155
  %157 = load double, ptr %9, align 8
  %158 = fmul double %153, %157
  %159 = fsub double %156, %158
  %160 = fmul double 0x7FF0000000000000, %159
  store double %160, ptr %154, align 8
  %161 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 1
  %162 = load double, ptr %10, align 8
  %163 = fmul double %153, %162
  %164 = load double, ptr %9, align 8
  %165 = fmul double %145, %164
  %166 = fsub double %163, %165
  %167 = fmul double 0x7FF0000000000000, %166
  store double %167, ptr %161, align 8
  br label %18

168:                                              ; preds = %143
  br label %151

169:                                              ; preds = %143
  br label %151

170:                                              ; preds = %186
  br label %117

171:                                              ; preds = %175, %173
  %172 = phi i1 [ %174, %173 ], [ false, %175 ]
  br i1 %172, label %178, label %180

173:                                              ; preds = %141
  %174 = call fastcc i1 @math.isfinite.isFinite__anon_3736(double %0)
  br label %171

175:                                              ; preds = %141
  br label %171

176:                                              ; preds = %180, %178
  %177 = phi i1 [ %179, %178 ], [ false, %180 ]
  br i1 %177, label %181, label %186

178:                                              ; preds = %171
  %179 = call fastcc i1 @math.isfinite.isFinite__anon_3736(double %1)
  br label %176

180:                                              ; preds = %171
  br label %176

181:                                              ; preds = %176
  %182 = load double, ptr %10, align 8
  %183 = bitcast double %182 to i64
  %184 = and i64 %183, 9223372036854775807
  %185 = icmp eq i64 %184, 9218868437227405312
  br i1 %185, label %195, label %196

186:                                              ; preds = %176
  br label %170

187:                                              ; preds = %196, %195
  %188 = phi double [ 1.000000e+00, %195 ], [ 0.000000e+00, %196 ]
  %189 = load double, ptr %10, align 8
  %190 = call fastcc double @math.copysign.copysign__anon_3683(double %188, double %189)
  %191 = load double, ptr %9, align 8
  %192 = bitcast double %191 to i64
  %193 = and i64 %192, 9223372036854775807
  %194 = icmp eq i64 %193, 9218868437227405312
  br i1 %194, label %211, label %212

195:                                              ; preds = %181
  br label %187

196:                                              ; preds = %181
  br label %187

197:                                              ; preds = %212, %211
  %198 = phi double [ 1.000000e+00, %211 ], [ 0.000000e+00, %212 ]
  %199 = load double, ptr %9, align 8
  %200 = call fastcc double @math.copysign.copysign__anon_3683(double %198, double %199)
  %201 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %202 = fmul double %0, %190
  %203 = fmul double %1, %200
  %204 = fadd double %202, %203
  %205 = fmul double 0.000000e+00, %204
  store double %205, ptr %201, align 8
  %206 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 1
  %207 = fmul double %1, %190
  %208 = fmul double %0, %200
  %209 = fsub double %207, %208
  %210 = fmul double 0.000000e+00, %209
  store double %210, ptr %206, align 8
  br label %18

211:                                              ; preds = %187
  br label %197

212:                                              ; preds = %187
  br label %197
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.maxnum.f64(double, double) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3734(double %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_5845(double %0)
  ret i32 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @math.ldexp.ldexp__anon_3735(double %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = bitcast double %0 to i64
  %7 = and i64 %6, -9223372036854775808
  %8 = call fastcc i1 @math.isnan.isNan__anon_3682(double %0)
  br i1 %8, label %16, label %17

9:                                                ; preds = %21
  %10 = shl i64 %6, 1
  %11 = lshr i64 %10, 53
  %12 = sub i64 2147483647, %11
  %13 = icmp ule i64 %12, 2147483647
  br i1 %13, label %26, label %27

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %19, %17 ]
  br i1 %15, label %20, label %21

16:                                               ; preds = %2
  br label %14

17:                                               ; preds = %2
  %18 = call fastcc i1 @math.isfinite.isFinite__anon_3736(double %0)
  %19 = xor i1 %18, true
  br label %14

20:                                               ; preds = %14
  ret double %0

21:                                               ; preds = %14
  br label %9

22:                                               ; preds = %26
  %23 = trunc i64 %11 to i32
  store i32 %23, ptr %5, align 4
  %24 = load i32, ptr %5, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %38

26:                                               ; preds = %9
  br label %22

27:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

28:                                               ; preds = %45, %38
  %29 = icmp sge i32 %1, 0
  br i1 %29, label %47, label %51

30:                                               ; preds = %22
  %31 = load i32, ptr %5, align 4
  %32 = shl i64 %6, 1
  %33 = call i64 @llvm.ctlz.i64(i64 %32, i1 false)
  %34 = trunc i64 %33 to i7
  %35 = zext i7 %34 to i32
  %36 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 11, i32 %35)
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %39, label %40

38:                                               ; preds = %22
  br label %28

39:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

40:                                               ; preds = %30
  %41 = extractvalue { i32, i1 } %36, 0
  %42 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %41)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %40
  %46 = extractvalue { i32, i1 } %42, 0
  store i32 %46, ptr %5, align 4
  br label %28

47:                                               ; preds = %28
  %48 = load i32, ptr %5, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 2046, i32 %48)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %57, label %58

51:                                               ; preds = %28
  %52 = load i32, ptr %5, align 4
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %52)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %136, label %137

55:                                               ; preds = %68
  %56 = icmp sge i32 %1, 0
  br i1 %56, label %127, label %128

57:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %47
  %59 = extractvalue { i32, i1 } %49, 0
  %60 = icmp sgt i32 %1, %59
  br i1 %60, label %61, label %64

61:                                               ; preds = %58
  %62 = or i64 9218868437227405312, %7
  %63 = bitcast i64 %62 to double
  ret double %63

64:                                               ; preds = %58
  %65 = load i32, ptr %5, align 4
  %66 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %65, i32 %1)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %69, label %70

68:                                               ; preds = %87
  br label %55

69:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %64
  %71 = extractvalue { i32, i1 } %66, 0
  %72 = icmp sle i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = sub i32 63, %1
  %75 = icmp ule i32 %74, 63
  br i1 %75, label %85, label %86

76:                                               ; preds = %70
  %77 = load i32, ptr %5, align 4
  %78 = icmp sle i32 %77, 0
  br i1 %78, label %88, label %92

79:                                               ; preds = %85
  %80 = trunc i32 %1 to i6
  %81 = zext i6 %80 to i64
  %82 = shl i64 %6, %81
  %83 = or i64 %82, %7
  %84 = bitcast i64 %83 to double
  ret double %84

85:                                               ; preds = %73
  br label %79

86:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

87:                                               ; preds = %92
  br label %68

88:                                               ; preds = %76
  %89 = load i32, ptr %5, align 4
  %90 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %93, label %94

92:                                               ; preds = %76
  br label %87

93:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %88
  %95 = extractvalue { i32, i1 } %90, 0
  %96 = icmp sge i32 %95, 0
  br i1 %96, label %104, label %105

97:                                               ; preds = %104
  %98 = sext i32 %95 to i64
  %99 = shl i64 %98, 52
  store i64 %99, ptr %4, align 8
  %100 = load i64, ptr %4, align 8
  %101 = load i32, ptr %5, align 4
  %102 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %101)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %106, label %107

104:                                              ; preds = %94
  br label %97

105:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

106:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %97
  %108 = extractvalue { i32, i1 } %102, 0
  %109 = sub i32 63, %108
  %110 = icmp ule i32 %109, 63
  br i1 %110, label %120, label %121

111:                                              ; preds = %120
  %112 = trunc i32 %108 to i6
  %113 = zext i6 %112 to i64
  %114 = shl i64 %6, %113
  %115 = and i64 %114, 4503599627370495
  %116 = or i64 %100, %115
  store i64 %116, ptr %4, align 8
  %117 = load i64, ptr %4, align 8
  %118 = or i64 %117, %7
  %119 = bitcast i64 %118 to double
  ret double %119

120:                                              ; preds = %107
  br label %111

121:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

122:                                              ; preds = %127
  %123 = sext i32 %1 to i64
  %124 = shl i64 %123, 52
  %125 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %6, i64 %124)
  %126 = extractvalue { i64, i1 } %125, 1
  br i1 %126, label %129, label %130

127:                                              ; preds = %55
  br label %122

128:                                              ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

129:                                              ; preds = %122
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

130:                                              ; preds = %122
  %131 = extractvalue { i64, i1 } %125, 0
  %132 = bitcast i64 %131 to double
  ret double %132

133:                                              ; preds = %144
  %134 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %135 = extractvalue { i32, i1 } %134, 1
  br i1 %135, label %223, label %224

136:                                              ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %51
  %138 = extractvalue { i32, i1 } %53, 0
  %139 = icmp sle i32 %1, %138
  br i1 %139, label %140, label %144

140:                                              ; preds = %137
  %141 = load i32, ptr %5, align 4
  %142 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 52, i32 %141)
  %143 = extractvalue { i32, i1 } %142, 1
  br i1 %143, label %148, label %149

144:                                              ; preds = %137
  br label %133

145:                                              ; preds = %159
  %146 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %147 = extractvalue { i32, i1 } %146, 1
  br i1 %147, label %160, label %161

148:                                              ; preds = %140
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

149:                                              ; preds = %140
  %150 = extractvalue { i32, i1 } %142, 0
  %151 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %150)
  %152 = extractvalue { i32, i1 } %151, 1
  br i1 %152, label %153, label %154

153:                                              ; preds = %149
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

154:                                              ; preds = %149
  %155 = extractvalue { i32, i1 } %151, 0
  %156 = icmp slt i32 %1, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %154
  %158 = bitcast i64 %7 to double
  ret double %158

159:                                              ; preds = %154
  br label %145

160:                                              ; preds = %145
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

161:                                              ; preds = %145
  %162 = extractvalue { i32, i1 } %146, 0
  %163 = load i32, ptr %5, align 4
  %164 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %163, i32 %1)
  %165 = extractvalue { i32, i1 } %164, 1
  br i1 %165, label %166, label %167

166:                                              ; preds = %161
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

167:                                              ; preds = %161
  %168 = extractvalue { i32, i1 } %164, 0
  %169 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %168)
  %170 = extractvalue { i32, i1 } %169, 1
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %167
  %173 = extractvalue { i32, i1 } %169, 0
  %174 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %173, i32 1)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

176:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %172
  %178 = extractvalue { i32, i1 } %174, 0
  %179 = call i32 @llvm.smin.i32(i32 %162, i32 %178)
  %180 = sub i32 63, %179
  %181 = icmp ule i32 %180, 63
  br i1 %181, label %188, label %189

182:                                              ; preds = %188
  %183 = trunc i32 %179 to i6
  %184 = call i64 @llvm.cttz.i64(i64 %6, i1 false)
  %185 = trunc i64 %184 to i7
  %186 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %183, i6 1)
  %187 = extractvalue { i6, i1 } %186, 1
  br i1 %187, label %190, label %191

188:                                              ; preds = %177
  br label %182

189:                                              ; preds = %177
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

190:                                              ; preds = %182
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

191:                                              ; preds = %182
  %192 = extractvalue { i6, i1 } %186, 0
  %193 = zext i6 %192 to i7
  %194 = icmp eq i7 %185, %193
  %195 = and i64 %6, 4503599627370495
  store i64 %195, ptr %3, align 8
  %196 = load i64, ptr %3, align 8
  %197 = load i32, ptr %5, align 4
  %198 = icmp sgt i32 %197, 0
  %199 = zext i1 %198 to i64
  %200 = shl i64 %199, 52
  %201 = or i64 %196, %200
  store i64 %201, ptr %3, align 8
  %202 = load i64, ptr %3, align 8
  %203 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 %183, i6 1)
  %204 = extractvalue { i6, i1 } %203, 1
  br i1 %204, label %205, label %206

205:                                              ; preds = %191
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

206:                                              ; preds = %191
  %207 = extractvalue { i6, i1 } %203, 0
  %208 = zext i6 %207 to i64
  %209 = lshr i64 %202, %208
  store i64 %209, ptr %3, align 8
  %210 = load i64, ptr %3, align 8
  %211 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %210, i64 1)
  %212 = extractvalue { i64, i1 } %211, 1
  br i1 %212, label %213, label %214

213:                                              ; preds = %206
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

214:                                              ; preds = %206
  %215 = extractvalue { i64, i1 } %211, 0
  %216 = lshr i64 %215, 1
  %217 = zext i1 %194 to i64
  %218 = xor i64 %217, -1
  %219 = and i64 %216, %218
  store i64 %219, ptr %3, align 8
  %220 = load i64, ptr %3, align 8
  %221 = or i64 %220, %7
  %222 = bitcast i64 %221 to double
  ret double %222

223:                                              ; preds = %133
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

224:                                              ; preds = %133
  %225 = extractvalue { i32, i1 } %134, 0
  %226 = icmp sge i32 %225, 0
  br i1 %226, label %232, label %233

227:                                              ; preds = %232
  %228 = sext i32 %225 to i64
  %229 = shl i64 %228, 52
  %230 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %6, i64 %229)
  %231 = extractvalue { i64, i1 } %230, 1
  br i1 %231, label %234, label %235

232:                                              ; preds = %224
  br label %227

233:                                              ; preds = %224
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @162)
  unreachable

234:                                              ; preds = %227
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

235:                                              ; preds = %227
  %236 = extractvalue { i64, i1 } %230, 0
  %237 = bitcast i64 %236 to double
  ret double %237
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3736(double %0) unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = icmp ult i64 %3, 9218868437227405312
  ret i1 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_5845(double %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast double %0 to i64
  %5 = and i64 %4, 9223372036854775807
  store i64 %5, ptr %3, align 8
  %6 = load i64, ptr %3, align 8
  %7 = lshr i64 %6, 52
  %8 = sub i64 2147483647, %7
  %9 = icmp ule i64 %8, 2147483647
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i64 %7 to i32
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %22

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @178)
  unreachable

16:                                               ; preds = %22
  %17 = load i32, ptr %2, align 4
  %18 = icmp eq i32 %17, 2047
  br i1 %18, label %39, label %42

19:                                               ; preds = %10
  %20 = load i64, ptr %3, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %30, label %31

22:                                               ; preds = %10
  br label %16

23:                                               ; preds = %31
  %24 = load i64, ptr %3, align 8
  %25 = call i64 @llvm.ctlz.i64(i64 %24, i1 false)
  %26 = trunc i64 %25 to i7
  %27 = zext i7 %26 to i32
  %28 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -1011, i32 %27)
  %29 = extractvalue { i32, i1 } %28, 1
  br i1 %29, label %32, label %33

30:                                               ; preds = %19
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

31:                                               ; preds = %19
  br label %23

32:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %23
  %34 = extractvalue { i32, i1 } %28, 0
  ret i32 %34

35:                                               ; preds = %42
  %36 = load i32, ptr %2, align 4
  %37 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %36, i32 1023)
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %45, label %46

39:                                               ; preds = %16
  call fastcc void @math.raiseInvalid()
  %40 = load i64, ptr %3, align 8
  %41 = icmp ugt i64 %40, 9218868437227405312
  br i1 %41, label %43, label %44

42:                                               ; preds = %16
  br label %35

43:                                               ; preds = %39
  ret i32 -2147483648

44:                                               ; preds = %39
  ret i32 2147483647

45:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %35
  %47 = extractvalue { i32, i1 } %37, 0
  ret i32 %47
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f80)" @__divxc3(i80 %0, i80 %1, i80 %2, i80 %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %6 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %7 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %8 = alloca %"compiler_rt.mulc3.Complex(f80)", align 16
  %9 = alloca i80, align 16
  %10 = alloca i80, align 16
  store i80 %2, ptr %10, align 16
  store i80 %3, ptr %9, align 16
  %11 = load i80, ptr %10, align 16
  %12 = call i80 @__fabsx(i80 %11)
  %13 = load i80, ptr %9, align 16
  %14 = call i80 @__fabsx(i80 %13)
  %15 = call i80 @__fmaxx(i80 %12, i80 %14)
  %16 = call fastcc i32 @math.ilogb.ilogb__anon_3737(i80 %15)
  %17 = icmp ne i32 %16, 2147483647
  br i1 %17, label %23, label %25

18:                                               ; preds = %192, %148, %105, %80
  %19 = phi ptr [ %7, %105 ], [ %6, %148 ], [ %5, %192 ], [ %8, %80 ]
  %20 = load %"compiler_rt.mulc3.Complex(f80)", ptr %19, align 16
  ret %"compiler_rt.mulc3.Complex(f80)" %20

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %4
  %24 = icmp ne i32 %16, -2147483648
  br label %21

25:                                               ; preds = %4
  br label %21

26:                                               ; preds = %57, %48
  %27 = phi i32 [ %16, %57 ], [ 0, %48 ]
  %28 = load i80, ptr %10, align 16
  %29 = load i80, ptr %10, align 16
  %30 = call i80 @__mulxf3(i80 %28, i80 %29)
  %31 = load i80, ptr %9, align 16
  %32 = load i80, ptr %9, align 16
  %33 = call i80 @__mulxf3(i80 %31, i80 %32)
  %34 = call i80 @__addxf3(i80 %30, i80 %33)
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 0
  %36 = load i80, ptr %10, align 16
  %37 = call i80 @__mulxf3(i80 %0, i80 %36)
  %38 = load i80, ptr %9, align 16
  %39 = call i80 @__mulxf3(i80 %1, i80 %38)
  %40 = call i80 @__addxf3(i80 %37, i80 %39)
  %41 = call i80 @__divxf3(i80 %40, i80 %34)
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load i80, ptr %10, align 16
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc i80 @math.ldexp.ldexp__anon_3738(i80 %45, i32 %51)
  store i80 %52, ptr %10, align 16
  %53 = load i80, ptr %9, align 16
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc i80 @math.ldexp.ldexp__anon_3738(i80 %53, i32 %58)
  store i80 %59, ptr %9, align 16
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc i80 @math.ldexp.ldexp__anon_3738(i80 %41, i32 %62)
  store i80 %63, ptr %35, align 16
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 1
  %65 = load i80, ptr %10, align 16
  %66 = call i80 @__mulxf3(i80 %1, i80 %65)
  %67 = load i80, ptr %9, align 16
  %68 = call i80 @__mulxf3(i80 %0, i80 %67)
  %69 = call i80 @__subxf3(i80 %66, i80 %68)
  %70 = call i80 @__divxf3(i80 %69, i80 %34)
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc i80 @math.ldexp.ldexp__anon_3738(i80 %70, i32 %75)
  store i80 %76, ptr %64, align 16
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 0
  %78 = load i80, ptr %77, align 16
  %79 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %92, %91
  br label %18

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %91

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %8, i32 0, i32 1
  %85 = load i80, ptr %84, align 16
  %86 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = call i32 @__eqxf2(i80 %34, i80 0)
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %95, label %98

91:                                               ; preds = %81
  br label %80

92:                                               ; preds = %117
  br label %80

93:                                               ; preds = %99, %98
  %94 = phi i1 [ %100, %99 ], [ false, %98 ]
  br i1 %94, label %105, label %114

95:                                               ; preds = %88
  %96 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %0)
  %97 = xor i1 %96, true
  br i1 %97, label %101, label %102

98:                                               ; preds = %88
  br label %93

99:                                               ; preds = %102, %101
  %100 = phi i1 [ true, %101 ], [ %104, %102 ]
  br label %93

101:                                              ; preds = %95
  br label %99

102:                                              ; preds = %95
  %103 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %1)
  %104 = xor i1 %103, true
  br label %99

105:                                              ; preds = %93
  %106 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %7, i32 0, i32 0
  %107 = load i80, ptr %10, align 16
  %108 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 604453686435277732577280, i80 %107)
  %109 = call i80 @__mulxf3(i80 %108, i80 %0)
  store i80 %109, ptr %106, align 16
  %110 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %7, i32 0, i32 1
  %111 = load i80, ptr %10, align 16
  %112 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 604453686435277732577280, i80 %111)
  %113 = call i80 @__mulxf3(i80 %112, i80 %1)
  store i80 %113, ptr %110, align 16
  br label %18

114:                                              ; preds = %93
  %115 = and i80 %0, 604462909807314587353087
  %116 = icmp eq i80 %115, 604453686435277732577280
  br i1 %116, label %120, label %121

117:                                              ; preds = %167
  br label %92

118:                                              ; preds = %121, %120
  %119 = phi i1 [ true, %120 ], [ %123, %121 ]
  br i1 %119, label %126, label %129

120:                                              ; preds = %114
  br label %118

121:                                              ; preds = %114
  %122 = and i80 %1, 604462909807314587353087
  %123 = icmp eq i80 %122, 604453686435277732577280
  br label %118

124:                                              ; preds = %129, %126
  %125 = phi i1 [ %128, %126 ], [ false, %129 ]
  br i1 %125, label %132, label %135

126:                                              ; preds = %118
  %127 = load i80, ptr %10, align 16
  %128 = call fastcc i1 @math.isfinite.isFinite__anon_3739(i80 %127)
  br label %124

129:                                              ; preds = %118
  br label %124

130:                                              ; preds = %135, %132
  %131 = phi i1 [ %134, %132 ], [ false, %135 ]
  br i1 %131, label %136, label %139

132:                                              ; preds = %124
  %133 = load i80, ptr %9, align 16
  %134 = call fastcc i1 @math.isfinite.isFinite__anon_3739(i80 %133)
  br label %130

135:                                              ; preds = %124
  br label %130

136:                                              ; preds = %130
  %137 = and i80 %0, 604462909807314587353087
  %138 = icmp eq i80 %137, 604453686435277732577280
  br i1 %138, label %146, label %147

139:                                              ; preds = %130
  %140 = icmp eq i32 %16, 2147483647
  br i1 %140, label %170, label %172

141:                                              ; preds = %147, %146
  %142 = phi i80 [ 302222231531620438900736, %146 ], [ 0, %147 ]
  %143 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 %142, i80 %0)
  %144 = and i80 %1, 604462909807314587353087
  %145 = icmp eq i80 %144, 604453686435277732577280
  br i1 %145, label %165, label %166

146:                                              ; preds = %136
  br label %141

147:                                              ; preds = %136
  br label %141

148:                                              ; preds = %166, %165
  %149 = phi i80 [ 302222231531620438900736, %165 ], [ 0, %166 ]
  %150 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 %149, i80 %1)
  %151 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %6, i32 0, i32 0
  %152 = load i80, ptr %10, align 16
  %153 = call i80 @__mulxf3(i80 %143, i80 %152)
  %154 = load i80, ptr %9, align 16
  %155 = call i80 @__mulxf3(i80 %150, i80 %154)
  %156 = call i80 @__subxf3(i80 %153, i80 %155)
  %157 = call i80 @__mulxf3(i80 604453686435277732577280, i80 %156)
  store i80 %157, ptr %151, align 16
  %158 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %6, i32 0, i32 1
  %159 = load i80, ptr %10, align 16
  %160 = call i80 @__mulxf3(i80 %150, i80 %159)
  %161 = load i80, ptr %9, align 16
  %162 = call i80 @__mulxf3(i80 %143, i80 %161)
  %163 = call i80 @__subxf3(i80 %160, i80 %162)
  %164 = call i80 @__mulxf3(i80 604453686435277732577280, i80 %163)
  store i80 %164, ptr %158, align 16
  br label %18

165:                                              ; preds = %141
  br label %148

166:                                              ; preds = %141
  br label %148

167:                                              ; preds = %182
  br label %117

168:                                              ; preds = %172, %170
  %169 = phi i1 [ %171, %170 ], [ false, %172 ]
  br i1 %169, label %175, label %177

170:                                              ; preds = %139
  %171 = call fastcc i1 @math.isfinite.isFinite__anon_3739(i80 %0)
  br label %168

172:                                              ; preds = %139
  br label %168

173:                                              ; preds = %177, %175
  %174 = phi i1 [ %176, %175 ], [ false, %177 ]
  br i1 %174, label %178, label %182

175:                                              ; preds = %168
  %176 = call fastcc i1 @math.isfinite.isFinite__anon_3739(i80 %1)
  br label %173

177:                                              ; preds = %168
  br label %173

178:                                              ; preds = %173
  %179 = load i80, ptr %10, align 16
  %180 = and i80 %179, 604462909807314587353087
  %181 = icmp eq i80 %180, 604453686435277732577280
  br i1 %181, label %190, label %191

182:                                              ; preds = %173
  br label %167

183:                                              ; preds = %191, %190
  %184 = phi i80 [ 302222231531620438900736, %190 ], [ 0, %191 ]
  %185 = load i80, ptr %10, align 16
  %186 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 %184, i80 %185)
  %187 = load i80, ptr %9, align 16
  %188 = and i80 %187, 604462909807314587353087
  %189 = icmp eq i80 %188, 604453686435277732577280
  br i1 %189, label %206, label %207

190:                                              ; preds = %178
  br label %183

191:                                              ; preds = %178
  br label %183

192:                                              ; preds = %207, %206
  %193 = phi i80 [ 302222231531620438900736, %206 ], [ 0, %207 ]
  %194 = load i80, ptr %9, align 16
  %195 = call fastcc i80 @math.copysign.copysign__anon_3685(i80 %193, i80 %194)
  %196 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %5, i32 0, i32 0
  %197 = call i80 @__mulxf3(i80 %0, i80 %186)
  %198 = call i80 @__mulxf3(i80 %1, i80 %195)
  %199 = call i80 @__addxf3(i80 %197, i80 %198)
  %200 = call i80 @__mulxf3(i80 0, i80 %199)
  store i80 %200, ptr %196, align 16
  %201 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f80)", ptr %5, i32 0, i32 1
  %202 = call i80 @__mulxf3(i80 %1, i80 %186)
  %203 = call i80 @__mulxf3(i80 %0, i80 %195)
  %204 = call i80 @__subxf3(i80 %202, i80 %203)
  %205 = call i80 @__mulxf3(i80 0, i80 %204)
  store i80 %205, ptr %201, align 16
  br label %18

206:                                              ; preds = %183
  br label %192

207:                                              ; preds = %183
  br label %192
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__fabsx(i80 %0) #0 {
  %2 = and i80 %0, 604462909807314587353087
  ret i80 %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__fmaxx(i80 %0, i80 %1) #0 {
  %3 = alloca i80, align 16
  %4 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %16, %14, %9
  %6 = phi i80 [ %1, %9 ], [ %0, %14 ], [ %17, %16 ]
  ret i80 %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %1)
  br i1 %8, label %14, label %15

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %15
  %12 = call i32 @__ltxf2(i80 %0, i80 %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %18, label %19

14:                                               ; preds = %7
  br label %5

15:                                               ; preds = %7
  br label %11

16:                                               ; preds = %19, %18
  %17 = load i80, ptr %3, align 16
  br label %5

18:                                               ; preds = %11
  store i80 %1, ptr %3, align 16
  br label %16

19:                                               ; preds = %11
  store i80 %0, ptr %3, align 16
  br label %16
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3737(i80 %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_5846(i80 %0)
  ret i32 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i80 @math.ldexp.ldexp__anon_3738(i80 %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i80, align 16
  %4 = alloca i80, align 16
  %5 = alloca i32, align 4
  %6 = and i80 %0, -604462909807314587353088
  %7 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %0)
  br i1 %7, label %11, label %12

8:                                                ; preds = %16
  br i1 true, label %20, label %21

9:                                                ; preds = %12, %11
  %10 = phi i1 [ true, %11 ], [ %14, %12 ]
  br i1 %10, label %15, label %16

11:                                               ; preds = %2
  br label %9

12:                                               ; preds = %2
  %13 = call fastcc i1 @math.isfinite.isFinite__anon_3739(i80 %0)
  %14 = xor i1 %13, true
  br label %9

15:                                               ; preds = %9
  ret i80 %0

16:                                               ; preds = %9
  br label %8

17:                                               ; preds = %20
  %18 = shl i80 %0, 1
  %19 = lshr i80 %18, 65
  br i1 true, label %25, label %26

20:                                               ; preds = %8
  br label %17

21:                                               ; preds = %8
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

22:                                               ; preds = %25
  %23 = sub i80 2147483647, %19
  %24 = icmp ule i80 %23, 2147483647
  br i1 %24, label %31, label %32

25:                                               ; preds = %17
  br label %22

26:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

27:                                               ; preds = %31
  %28 = trunc i80 %19 to i32
  store i32 %28, ptr %5, align 4
  %29 = load i32, ptr %5, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %37

31:                                               ; preds = %22
  br label %27

32:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

33:                                               ; preds = %53, %37
  %34 = icmp sge i32 %1, 0
  br i1 %34, label %55, label %59

35:                                               ; preds = %27
  %36 = load i32, ptr %5, align 4
  br i1 true, label %45, label %46

37:                                               ; preds = %27
  br label %33

38:                                               ; preds = %45
  %39 = shl i80 %0, 1
  %40 = call i80 @llvm.ctlz.i80(i80 %39, i1 false)
  %41 = trunc i80 %40 to i7
  %42 = zext i7 %41 to i32
  %43 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16, i32 %42)
  %44 = extractvalue { i32, i1 } %43, 1
  br i1 %44, label %47, label %48

45:                                               ; preds = %35
  br label %38

46:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

47:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %38
  %49 = extractvalue { i32, i1 } %43, 0
  %50 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %36, i32 %49)
  %51 = extractvalue { i32, i1 } %50, 1
  br i1 %51, label %52, label %53

52:                                               ; preds = %48
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

53:                                               ; preds = %48
  %54 = extractvalue { i32, i1 } %50, 0
  store i32 %54, ptr %5, align 4
  br label %33

55:                                               ; preds = %33
  %56 = load i32, ptr %5, align 4
  %57 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32766, i32 %56)
  %58 = extractvalue { i32, i1 } %57, 1
  br i1 %58, label %65, label %66

59:                                               ; preds = %33
  %60 = load i32, ptr %5, align 4
  %61 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %60)
  %62 = extractvalue { i32, i1 } %61, 1
  br i1 %62, label %154, label %155

63:                                               ; preds = %75
  %64 = icmp sge i32 %1, 0
  br i1 %64, label %140, label %141

65:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %55
  %67 = extractvalue { i32, i1 } %57, 0
  %68 = icmp sgt i32 %1, %67
  br i1 %68, label %69, label %71

69:                                               ; preds = %66
  %70 = or i80 604453686435277732577280, %6
  ret i80 %70

71:                                               ; preds = %66
  %72 = load i32, ptr %5, align 4
  %73 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %72, i32 %1)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %76, label %77

75:                                               ; preds = %97
  br label %63

76:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %71
  %78 = extractvalue { i32, i1 } %73, 0
  %79 = icmp sle i32 %78, 0
  br i1 %79, label %80, label %83

80:                                               ; preds = %77
  %81 = sub i32 127, %1
  %82 = icmp ule i32 %81, 127
  br i1 %82, label %89, label %90

83:                                               ; preds = %77
  %84 = load i32, ptr %5, align 4
  %85 = icmp sle i32 %84, 0
  br i1 %85, label %98, label %102

86:                                               ; preds = %89
  %87 = trunc i32 %1 to i7
  %88 = icmp ult i7 %87, -48
  br i1 %88, label %95, label %96

89:                                               ; preds = %80
  br label %86

90:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

91:                                               ; preds = %95
  %92 = zext i7 %87 to i80
  %93 = shl i80 %0, %92
  %94 = or i80 %93, %6
  ret i80 %94

95:                                               ; preds = %86
  br label %91

96:                                               ; preds = %86
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

97:                                               ; preds = %102
  br label %75

98:                                               ; preds = %83
  %99 = load i32, ptr %5, align 4
  %100 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %99)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %103, label %104

102:                                              ; preds = %83
  br label %97

103:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %98
  %105 = extractvalue { i32, i1 } %100, 0
  %106 = icmp sge i32 %105, 0
  br i1 %106, label %109, label %110

107:                                              ; preds = %109
  %108 = sext i32 %105 to i80
  br i1 true, label %117, label %118

109:                                              ; preds = %104
  br label %107

110:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

111:                                              ; preds = %117
  %112 = shl i80 %108, 64
  store i80 %112, ptr %4, align 16
  %113 = load i80, ptr %4, align 16
  %114 = load i32, ptr %5, align 4
  %115 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %114)
  %116 = extractvalue { i32, i1 } %115, 1
  br i1 %116, label %119, label %120

117:                                              ; preds = %107
  br label %111

118:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

119:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

120:                                              ; preds = %111
  %121 = extractvalue { i32, i1 } %115, 0
  %122 = sub i32 127, %121
  %123 = icmp ule i32 %122, 127
  br i1 %123, label %127, label %128

124:                                              ; preds = %127
  %125 = trunc i32 %121 to i7
  %126 = icmp ult i7 %125, -48
  br i1 %126, label %136, label %137

127:                                              ; preds = %120
  br label %124

128:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

129:                                              ; preds = %136
  %130 = zext i7 %125 to i80
  %131 = shl i80 %0, %130
  %132 = and i80 %131, 18446744073709551615
  %133 = or i80 %113, %132
  store i80 %133, ptr %4, align 16
  %134 = load i80, ptr %4, align 16
  %135 = or i80 %134, %6
  ret i80 %135

136:                                              ; preds = %124
  br label %129

137:                                              ; preds = %124
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

138:                                              ; preds = %140
  %139 = sext i32 %1 to i80
  br i1 true, label %146, label %147

140:                                              ; preds = %63
  br label %138

141:                                              ; preds = %63
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

142:                                              ; preds = %146
  %143 = shl i80 %139, 64
  %144 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %0, i80 %143)
  %145 = extractvalue { i80, i1 } %144, 1
  br i1 %145, label %148, label %149

146:                                              ; preds = %138
  br label %142

147:                                              ; preds = %138
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

148:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

149:                                              ; preds = %142
  %150 = extractvalue { i80, i1 } %144, 0
  ret i80 %150

151:                                              ; preds = %162
  %152 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %153 = extractvalue { i32, i1 } %152, 1
  br i1 %153, label %239, label %240

154:                                              ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

155:                                              ; preds = %59
  %156 = extractvalue { i32, i1 } %61, 0
  %157 = icmp sle i32 %1, %156
  br i1 %157, label %158, label %162

158:                                              ; preds = %155
  %159 = load i32, ptr %5, align 4
  %160 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 64, i32 %159)
  %161 = extractvalue { i32, i1 } %160, 1
  br i1 %161, label %166, label %167

162:                                              ; preds = %155
  br label %151

163:                                              ; preds = %176
  %164 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %165 = extractvalue { i32, i1 } %164, 1
  br i1 %165, label %177, label %178

166:                                              ; preds = %158
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

167:                                              ; preds = %158
  %168 = extractvalue { i32, i1 } %160, 0
  %169 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %168)
  %170 = extractvalue { i32, i1 } %169, 1
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %167
  %173 = extractvalue { i32, i1 } %169, 0
  %174 = icmp slt i32 %1, %173
  br i1 %174, label %175, label %176

175:                                              ; preds = %172
  ret i80 %6

176:                                              ; preds = %172
  br label %163

177:                                              ; preds = %163
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

178:                                              ; preds = %163
  %179 = extractvalue { i32, i1 } %164, 0
  %180 = load i32, ptr %5, align 4
  %181 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %180, i32 %1)
  %182 = extractvalue { i32, i1 } %181, 1
  br i1 %182, label %183, label %184

183:                                              ; preds = %178
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

184:                                              ; preds = %178
  %185 = extractvalue { i32, i1 } %181, 0
  %186 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %185)
  %187 = extractvalue { i32, i1 } %186, 1
  br i1 %187, label %188, label %189

188:                                              ; preds = %184
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

189:                                              ; preds = %184
  %190 = extractvalue { i32, i1 } %186, 0
  %191 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %190, i32 1)
  %192 = extractvalue { i32, i1 } %191, 1
  br i1 %192, label %193, label %194

193:                                              ; preds = %189
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

194:                                              ; preds = %189
  %195 = extractvalue { i32, i1 } %191, 0
  %196 = call i32 @llvm.smin.i32(i32 %179, i32 %195)
  %197 = sub i32 127, %196
  %198 = icmp ule i32 %197, 127
  br i1 %198, label %205, label %206

199:                                              ; preds = %205
  %200 = trunc i32 %196 to i7
  %201 = call i80 @llvm.cttz.i80(i80 %0, i1 false)
  %202 = trunc i80 %201 to i7
  %203 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %200, i7 1)
  %204 = extractvalue { i7, i1 } %203, 1
  br i1 %204, label %207, label %208

205:                                              ; preds = %194
  br label %199

206:                                              ; preds = %194
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

207:                                              ; preds = %199
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

208:                                              ; preds = %199
  %209 = extractvalue { i7, i1 } %203, 0
  %210 = icmp eq i7 %202, %209
  %211 = and i80 %0, 18446744073709551615
  store i80 %211, ptr %3, align 16
  %212 = load i80, ptr %3, align 16
  %213 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %200, i7 1)
  %214 = extractvalue { i7, i1 } %213, 1
  br i1 %214, label %215, label %216

215:                                              ; preds = %208
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

216:                                              ; preds = %208
  %217 = extractvalue { i7, i1 } %213, 0
  %218 = zext i7 %217 to i80
  %219 = lshr i80 %212, %218
  %220 = icmp ult i7 %217, -48
  br i1 %220, label %225, label %226

221:                                              ; preds = %225
  store i80 %219, ptr %3, align 16
  %222 = load i80, ptr %3, align 16
  %223 = call fastcc { i80, i1 } @llvm.uadd.with.overflow.i80(i80 %222, i80 1)
  %224 = extractvalue { i80, i1 } %223, 1
  br i1 %224, label %227, label %228

225:                                              ; preds = %216
  br label %221

226:                                              ; preds = %216
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

227:                                              ; preds = %221
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

228:                                              ; preds = %221
  %229 = extractvalue { i80, i1 } %223, 0
  %230 = lshr i80 %229, 1
  br i1 true, label %237, label %238

231:                                              ; preds = %237
  %232 = zext i1 %210 to i80
  %233 = xor i80 %232, -1
  %234 = and i80 %230, %233
  store i80 %234, ptr %3, align 16
  %235 = load i80, ptr %3, align 16
  %236 = or i80 %235, %6
  ret i80 %236

237:                                              ; preds = %228
  br label %231

238:                                              ; preds = %228
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

239:                                              ; preds = %151
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

240:                                              ; preds = %151
  %241 = extractvalue { i32, i1 } %152, 0
  %242 = icmp sge i32 %241, 0
  br i1 %242, label %245, label %246

243:                                              ; preds = %245
  %244 = sext i32 %241 to i80
  br i1 true, label %251, label %252

245:                                              ; preds = %240
  br label %243

246:                                              ; preds = %240
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

247:                                              ; preds = %251
  %248 = shl i80 %244, 64
  %249 = call fastcc { i80, i1 } @llvm.usub.with.overflow.i80(i80 %0, i80 %248)
  %250 = extractvalue { i80, i1 } %249, 1
  br i1 %250, label %253, label %254

251:                                              ; preds = %243
  br label %247

252:                                              ; preds = %243
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @163)
  unreachable

253:                                              ; preds = %247
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

254:                                              ; preds = %247
  %255 = extractvalue { i80, i1 } %249, 0
  ret i80 %255
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3739(i80 %0) unnamed_addr #0 {
  %2 = and i80 %0, 604462909807314587353087
  %3 = icmp ult i80 %2, 604453686435277732577280
  ret i1 %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i80 @llvm.cttz.i80(i80, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_5846(i80 %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i80, align 16
  %4 = and i80 %0, 604462909807314587353087
  store i80 %4, ptr %3, align 16
  %5 = load i80, ptr %3, align 16
  %6 = lshr i80 %5, 64
  br i1 true, label %10, label %11

7:                                                ; preds = %10
  %8 = sub i80 2147483647, %6
  %9 = icmp ule i80 %8, 2147483647
  br i1 %9, label %16, label %17

10:                                               ; preds = %1
  br label %7

11:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @179)
  unreachable

12:                                               ; preds = %16
  %13 = trunc i80 %6 to i32
  store i32 %13, ptr %2, align 4
  %14 = load i32, ptr %2, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %21, label %24

16:                                               ; preds = %7
  br label %12

17:                                               ; preds = %7
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @179)
  unreachable

18:                                               ; preds = %24
  %19 = load i32, ptr %2, align 4
  %20 = icmp eq i32 %19, 32767
  br i1 %20, label %41, label %44

21:                                               ; preds = %12
  %22 = load i80, ptr %3, align 16
  %23 = icmp eq i80 %22, 0
  br i1 %23, label %32, label %33

24:                                               ; preds = %12
  br label %18

25:                                               ; preds = %33
  %26 = load i80, ptr %3, align 16
  %27 = call i80 @llvm.ctlz.i80(i80 %26, i1 false)
  %28 = trunc i80 %27 to i7
  %29 = zext i7 %28 to i32
  %30 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -16366, i32 %29)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %34, label %35

32:                                               ; preds = %21
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

33:                                               ; preds = %21
  br label %25

34:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %25
  %36 = extractvalue { i32, i1 } %30, 0
  ret i32 %36

37:                                               ; preds = %44
  %38 = load i32, ptr %2, align 4
  %39 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %38, i32 16383)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %47, label %48

41:                                               ; preds = %18
  call fastcc void @math.raiseInvalid()
  %42 = load i80, ptr %3, align 16
  %43 = icmp ugt i80 %42, 604453686435277732577280
  br i1 %43, label %45, label %46

44:                                               ; preds = %18
  br label %37

45:                                               ; preds = %41
  ret i32 -2147483648

46:                                               ; preds = %41
  ret i32 2147483647

47:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

48:                                               ; preds = %37
  %49 = extractvalue { i32, i1 } %39, 0
  ret i32 %49
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local %"compiler_rt.mulc3.Complex(f128)" @__divtc3(fp128 %0, fp128 %1, fp128 %2, fp128 %3) #0 {
  %5 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %6 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %7 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %8 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %9 = alloca fp128, align 16
  %10 = alloca fp128, align 16
  store fp128 %2, ptr %10, align 16
  store fp128 %3, ptr %9, align 16
  %11 = load fp128, ptr %10, align 16
  %12 = call fp128 @fabsq(fp128 %11)
  %13 = load fp128, ptr %9, align 16
  %14 = call fp128 @fabsq(fp128 %13)
  %15 = call fp128 @fmaxq(fp128 %12, fp128 %14)
  %16 = call fastcc i32 @math.ilogb.ilogb__anon_3740(fp128 %15)
  %17 = icmp ne i32 %16, 2147483647
  br i1 %17, label %23, label %25

18:                                               ; preds = %198, %152, %105, %80
  %19 = phi ptr [ %7, %105 ], [ %6, %152 ], [ %5, %198 ], [ %8, %80 ]
  %20 = load %"compiler_rt.mulc3.Complex(f128)", ptr %19, align 16
  ret %"compiler_rt.mulc3.Complex(f128)" %20

21:                                               ; preds = %25, %23
  %22 = phi i1 [ %24, %23 ], [ false, %25 ]
  br i1 %22, label %44, label %48

23:                                               ; preds = %4
  %24 = icmp ne i32 %16, -2147483648
  br label %21

25:                                               ; preds = %4
  br label %21

26:                                               ; preds = %57, %48
  %27 = phi i32 [ %16, %57 ], [ 0, %48 ]
  %28 = load fp128, ptr %10, align 16
  %29 = load fp128, ptr %10, align 16
  %30 = call fp128 @__multf3(fp128 %28, fp128 %29)
  %31 = load fp128, ptr %9, align 16
  %32 = load fp128, ptr %9, align 16
  %33 = call fp128 @__multf3(fp128 %31, fp128 %32)
  %34 = call fp128 @__addtf3(fp128 %30, fp128 %33)
  %35 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 0
  %36 = load fp128, ptr %10, align 16
  %37 = call fp128 @__multf3(fp128 %0, fp128 %36)
  %38 = load fp128, ptr %9, align 16
  %39 = call fp128 @__multf3(fp128 %1, fp128 %38)
  %40 = call fp128 @__addtf3(fp128 %37, fp128 %39)
  %41 = call fp128 @__divtf3(fp128 %40, fp128 %34)
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %60, label %61

44:                                               ; preds = %21
  %45 = load fp128, ptr %10, align 16
  %46 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %49, label %50

48:                                               ; preds = %21
  br label %26

49:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

50:                                               ; preds = %44
  %51 = extractvalue { i32, i1 } %46, 0
  %52 = call fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %45, i32 %51)
  store fp128 %52, ptr %10, align 16
  %53 = load fp128, ptr %9, align 16
  %54 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %16)
  %55 = extractvalue { i32, i1 } %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

57:                                               ; preds = %50
  %58 = extractvalue { i32, i1 } %54, 0
  %59 = call fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %53, i32 %58)
  store fp128 %59, ptr %9, align 16
  br label %26

60:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %26
  %62 = extractvalue { i32, i1 } %42, 0
  %63 = call fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %41, i32 %62)
  store fp128 %63, ptr %35, align 16
  %64 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 1
  %65 = load fp128, ptr %10, align 16
  %66 = call fp128 @__multf3(fp128 %1, fp128 %65)
  %67 = load fp128, ptr %9, align 16
  %68 = call fp128 @__multf3(fp128 %0, fp128 %67)
  %69 = call fp128 @__subtf3(fp128 %66, fp128 %68)
  %70 = call fp128 @__divtf3(fp128 %69, fp128 %34)
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %61
  %75 = extractvalue { i32, i1 } %71, 0
  %76 = call fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %70, i32 %75)
  store fp128 %76, ptr %64, align 16
  %77 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 0
  %78 = load fp128, ptr %77, align 16
  %79 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %78)
  br i1 %79, label %83, label %87

80:                                               ; preds = %92, %91
  br label %18

81:                                               ; preds = %87, %83
  %82 = phi i1 [ %86, %83 ], [ false, %87 ]
  br i1 %82, label %88, label %91

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %8, i32 0, i32 1
  %85 = load fp128, ptr %84, align 16
  %86 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %85)
  br label %81

87:                                               ; preds = %74
  br label %81

88:                                               ; preds = %81
  %89 = call i32 @__eqtf2(fp128 %34, fp128 0xL00000000000000000000000000000000)
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %95, label %98

91:                                               ; preds = %81
  br label %80

92:                                               ; preds = %118
  br label %80

93:                                               ; preds = %99, %98
  %94 = phi i1 [ %100, %99 ], [ false, %98 ]
  br i1 %94, label %105, label %114

95:                                               ; preds = %88
  %96 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %0)
  %97 = xor i1 %96, true
  br i1 %97, label %101, label %102

98:                                               ; preds = %88
  br label %93

99:                                               ; preds = %102, %101
  %100 = phi i1 [ true, %101 ], [ %104, %102 ]
  br label %93

101:                                              ; preds = %95
  br label %99

102:                                              ; preds = %95
  %103 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %1)
  %104 = xor i1 %103, true
  br label %99

105:                                              ; preds = %93
  %106 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 0
  %107 = load fp128, ptr %10, align 16
  %108 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000007FFF000000000000, fp128 %107)
  %109 = call fp128 @__multf3(fp128 %108, fp128 %0)
  store fp128 %109, ptr %106, align 16
  %110 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 1
  %111 = load fp128, ptr %10, align 16
  %112 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000007FFF000000000000, fp128 %111)
  %113 = call fp128 @__multf3(fp128 %112, fp128 %1)
  store fp128 %113, ptr %110, align 16
  br label %18

114:                                              ; preds = %93
  %115 = bitcast fp128 %0 to i128
  %116 = and i128 %115, 170141183460469231731687303715884105727
  %117 = icmp eq i128 %116, 170135991163610696904058773219554885632
  br i1 %117, label %121, label %122

118:                                              ; preds = %171
  br label %92

119:                                              ; preds = %122, %121
  %120 = phi i1 [ true, %121 ], [ %125, %122 ]
  br i1 %120, label %128, label %131

121:                                              ; preds = %114
  br label %119

122:                                              ; preds = %114
  %123 = bitcast fp128 %1 to i128
  %124 = and i128 %123, 170141183460469231731687303715884105727
  %125 = icmp eq i128 %124, 170135991163610696904058773219554885632
  br label %119

126:                                              ; preds = %131, %128
  %127 = phi i1 [ %130, %128 ], [ false, %131 ]
  br i1 %127, label %134, label %137

128:                                              ; preds = %119
  %129 = load fp128, ptr %10, align 16
  %130 = call fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %129)
  br label %126

131:                                              ; preds = %119
  br label %126

132:                                              ; preds = %137, %134
  %133 = phi i1 [ %136, %134 ], [ false, %137 ]
  br i1 %133, label %138, label %142

134:                                              ; preds = %126
  %135 = load fp128, ptr %9, align 16
  %136 = call fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %135)
  br label %132

137:                                              ; preds = %126
  br label %132

138:                                              ; preds = %132
  %139 = bitcast fp128 %0 to i128
  %140 = and i128 %139, 170141183460469231731687303715884105727
  %141 = icmp eq i128 %140, 170135991163610696904058773219554885632
  br i1 %141, label %150, label %151

142:                                              ; preds = %132
  %143 = icmp eq i32 %16, 2147483647
  br i1 %143, label %174, label %176

144:                                              ; preds = %151, %150
  %145 = phi fp128 [ 0xL00000000000000003FFF000000000000, %150 ], [ 0xL00000000000000000000000000000000, %151 ]
  %146 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %145, fp128 %0)
  %147 = bitcast fp128 %1 to i128
  %148 = and i128 %147, 170141183460469231731687303715884105727
  %149 = icmp eq i128 %148, 170135991163610696904058773219554885632
  br i1 %149, label %169, label %170

150:                                              ; preds = %138
  br label %144

151:                                              ; preds = %138
  br label %144

152:                                              ; preds = %170, %169
  %153 = phi fp128 [ 0xL00000000000000003FFF000000000000, %169 ], [ 0xL00000000000000000000000000000000, %170 ]
  %154 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %153, fp128 %1)
  %155 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 0
  %156 = load fp128, ptr %10, align 16
  %157 = call fp128 @__multf3(fp128 %146, fp128 %156)
  %158 = load fp128, ptr %9, align 16
  %159 = call fp128 @__multf3(fp128 %154, fp128 %158)
  %160 = call fp128 @__subtf3(fp128 %157, fp128 %159)
  %161 = call fp128 @__multf3(fp128 0xL00000000000000007FFF000000000000, fp128 %160)
  store fp128 %161, ptr %155, align 16
  %162 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 1
  %163 = load fp128, ptr %10, align 16
  %164 = call fp128 @__multf3(fp128 %154, fp128 %163)
  %165 = load fp128, ptr %9, align 16
  %166 = call fp128 @__multf3(fp128 %146, fp128 %165)
  %167 = call fp128 @__subtf3(fp128 %164, fp128 %166)
  %168 = call fp128 @__multf3(fp128 0xL00000000000000007FFF000000000000, fp128 %167)
  store fp128 %168, ptr %162, align 16
  br label %18

169:                                              ; preds = %144
  br label %152

170:                                              ; preds = %144
  br label %152

171:                                              ; preds = %187
  br label %118

172:                                              ; preds = %176, %174
  %173 = phi i1 [ %175, %174 ], [ false, %176 ]
  br i1 %173, label %179, label %181

174:                                              ; preds = %142
  %175 = call fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %0)
  br label %172

176:                                              ; preds = %142
  br label %172

177:                                              ; preds = %181, %179
  %178 = phi i1 [ %180, %179 ], [ false, %181 ]
  br i1 %178, label %182, label %187

179:                                              ; preds = %172
  %180 = call fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %1)
  br label %177

181:                                              ; preds = %172
  br label %177

182:                                              ; preds = %177
  %183 = load fp128, ptr %10, align 16
  %184 = bitcast fp128 %183 to i128
  %185 = and i128 %184, 170141183460469231731687303715884105727
  %186 = icmp eq i128 %185, 170135991163610696904058773219554885632
  br i1 %186, label %196, label %197

187:                                              ; preds = %177
  br label %171

188:                                              ; preds = %197, %196
  %189 = phi fp128 [ 0xL00000000000000003FFF000000000000, %196 ], [ 0xL00000000000000000000000000000000, %197 ]
  %190 = load fp128, ptr %10, align 16
  %191 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %189, fp128 %190)
  %192 = load fp128, ptr %9, align 16
  %193 = bitcast fp128 %192 to i128
  %194 = and i128 %193, 170141183460469231731687303715884105727
  %195 = icmp eq i128 %194, 170135991163610696904058773219554885632
  br i1 %195, label %212, label %213

196:                                              ; preds = %182
  br label %188

197:                                              ; preds = %182
  br label %188

198:                                              ; preds = %213, %212
  %199 = phi fp128 [ 0xL00000000000000003FFF000000000000, %212 ], [ 0xL00000000000000000000000000000000, %213 ]
  %200 = load fp128, ptr %9, align 16
  %201 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 %199, fp128 %200)
  %202 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %203 = call fp128 @__multf3(fp128 %0, fp128 %191)
  %204 = call fp128 @__multf3(fp128 %1, fp128 %201)
  %205 = call fp128 @__addtf3(fp128 %203, fp128 %204)
  %206 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %205)
  store fp128 %206, ptr %202, align 16
  %207 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 1
  %208 = call fp128 @__multf3(fp128 %1, fp128 %191)
  %209 = call fp128 @__multf3(fp128 %0, fp128 %201)
  %210 = call fp128 @__subtf3(fp128 %208, fp128 %209)
  %211 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %210)
  store fp128 %211, ptr %207, align 16
  br label %18

212:                                              ; preds = %188
  br label %198

213:                                              ; preds = %188
  br label %198
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @fabsq(fp128 %0) #0 {
  %2 = bitcast fp128 %0 to i128
  %3 = and i128 %2, 170141183460469231731687303715884105727
  %4 = bitcast i128 %3 to fp128
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @fmaxq(fp128 %0, fp128 %1) #0 {
  %3 = alloca fp128, align 16
  %4 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %16, %14, %9
  %6 = phi fp128 [ %1, %9 ], [ %0, %14 ], [ %17, %16 ]
  ret fp128 %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %1)
  br i1 %8, label %14, label %15

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %15
  %12 = call i32 @__lttf2(fp128 %0, fp128 %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %18, label %19

14:                                               ; preds = %7
  br label %5

15:                                               ; preds = %7
  br label %11

16:                                               ; preds = %19, %18
  %17 = load fp128, ptr %3, align 16
  br label %5

18:                                               ; preds = %11
  store fp128 %1, ptr %3, align 16
  br label %16

19:                                               ; preds = %11
  store fp128 %0, ptr %3, align 16
  br label %16
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogb__anon_3740(fp128 %0) unnamed_addr #0 {
  %2 = call fastcc i32 @math.ilogb.ilogbX__anon_5847(fp128 %0)
  ret i32 %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %0, i32 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = alloca i32, align 4
  %6 = bitcast fp128 %0 to i128
  %7 = and i128 %6, -170141183460469231731687303715884105728
  %8 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %0)
  br i1 %8, label %16, label %17

9:                                                ; preds = %21
  %10 = shl i128 %6, 1
  %11 = lshr i128 %10, 113
  %12 = sub i128 2147483647, %11
  %13 = icmp ule i128 %12, 2147483647
  br i1 %13, label %26, label %27

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %19, %17 ]
  br i1 %15, label %20, label %21

16:                                               ; preds = %2
  br label %14

17:                                               ; preds = %2
  %18 = call fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %0)
  %19 = xor i1 %18, true
  br label %14

20:                                               ; preds = %14
  ret fp128 %0

21:                                               ; preds = %14
  br label %9

22:                                               ; preds = %26
  %23 = trunc i128 %11 to i32
  store i32 %23, ptr %5, align 4
  %24 = load i32, ptr %5, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %38

26:                                               ; preds = %9
  br label %22

27:                                               ; preds = %9
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

28:                                               ; preds = %45, %38
  %29 = icmp sge i32 %1, 0
  br i1 %29, label %47, label %51

30:                                               ; preds = %22
  %31 = load i32, ptr %5, align 4
  %32 = shl i128 %6, 1
  %33 = call i128 @llvm.ctlz.i128(i128 %32, i1 false)
  %34 = trunc i128 %33 to i8
  %35 = zext i8 %34 to i32
  %36 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 15, i32 %35)
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %39, label %40

38:                                               ; preds = %22
  br label %28

39:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

40:                                               ; preds = %30
  %41 = extractvalue { i32, i1 } %36, 0
  %42 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %41)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %40
  %46 = extractvalue { i32, i1 } %42, 0
  store i32 %46, ptr %5, align 4
  br label %28

47:                                               ; preds = %28
  %48 = load i32, ptr %5, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 32766, i32 %48)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %57, label %58

51:                                               ; preds = %28
  %52 = load i32, ptr %5, align 4
  %53 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %52)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %136, label %137

55:                                               ; preds = %68
  %56 = icmp sge i32 %1, 0
  br i1 %56, label %127, label %128

57:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %47
  %59 = extractvalue { i32, i1 } %49, 0
  %60 = icmp sgt i32 %1, %59
  br i1 %60, label %61, label %64

61:                                               ; preds = %58
  %62 = or i128 170135991163610696904058773219554885632, %7
  %63 = bitcast i128 %62 to fp128
  ret fp128 %63

64:                                               ; preds = %58
  %65 = load i32, ptr %5, align 4
  %66 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %65, i32 %1)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %69, label %70

68:                                               ; preds = %87
  br label %55

69:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %64
  %71 = extractvalue { i32, i1 } %66, 0
  %72 = icmp sle i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = sub i32 127, %1
  %75 = icmp ule i32 %74, 127
  br i1 %75, label %85, label %86

76:                                               ; preds = %70
  %77 = load i32, ptr %5, align 4
  %78 = icmp sle i32 %77, 0
  br i1 %78, label %88, label %92

79:                                               ; preds = %85
  %80 = trunc i32 %1 to i7
  %81 = zext i7 %80 to i128
  %82 = shl i128 %6, %81
  %83 = or i128 %82, %7
  %84 = bitcast i128 %83 to fp128
  ret fp128 %84

85:                                               ; preds = %73
  br label %79

86:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

87:                                               ; preds = %92
  br label %68

88:                                               ; preds = %76
  %89 = load i32, ptr %5, align 4
  %90 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %89)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %93, label %94

92:                                               ; preds = %76
  br label %87

93:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

94:                                               ; preds = %88
  %95 = extractvalue { i32, i1 } %90, 0
  %96 = icmp sge i32 %95, 0
  br i1 %96, label %104, label %105

97:                                               ; preds = %104
  %98 = sext i32 %95 to i128
  %99 = shl i128 %98, 112
  store i128 %99, ptr %4, align 16
  %100 = load i128, ptr %4, align 16
  %101 = load i32, ptr %5, align 4
  %102 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %101)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %106, label %107

104:                                              ; preds = %94
  br label %97

105:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

106:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %97
  %108 = extractvalue { i32, i1 } %102, 0
  %109 = sub i32 127, %108
  %110 = icmp ule i32 %109, 127
  br i1 %110, label %120, label %121

111:                                              ; preds = %120
  %112 = trunc i32 %108 to i7
  %113 = zext i7 %112 to i128
  %114 = shl i128 %6, %113
  %115 = and i128 %114, 5192296858534827628530496329220095
  %116 = or i128 %100, %115
  store i128 %116, ptr %4, align 16
  %117 = load i128, ptr %4, align 16
  %118 = or i128 %117, %7
  %119 = bitcast i128 %118 to fp128
  ret fp128 %119

120:                                              ; preds = %107
  br label %111

121:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

122:                                              ; preds = %127
  %123 = sext i32 %1 to i128
  %124 = shl i128 %123, 112
  %125 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %6, i128 %124)
  %126 = extractvalue { i128, i1 } %125, 1
  br i1 %126, label %129, label %130

127:                                              ; preds = %55
  br label %122

128:                                              ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

129:                                              ; preds = %122
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

130:                                              ; preds = %122
  %131 = extractvalue { i128, i1 } %125, 0
  %132 = bitcast i128 %131 to fp128
  ret fp128 %132

133:                                              ; preds = %144
  %134 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %135 = extractvalue { i32, i1 } %134, 1
  br i1 %135, label %223, label %224

136:                                              ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %51
  %138 = extractvalue { i32, i1 } %53, 0
  %139 = icmp sle i32 %1, %138
  br i1 %139, label %140, label %144

140:                                              ; preds = %137
  %141 = load i32, ptr %5, align 4
  %142 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 112, i32 %141)
  %143 = extractvalue { i32, i1 } %142, 1
  br i1 %143, label %148, label %149

144:                                              ; preds = %137
  br label %133

145:                                              ; preds = %159
  %146 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %1)
  %147 = extractvalue { i32, i1 } %146, 1
  br i1 %147, label %160, label %161

148:                                              ; preds = %140
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

149:                                              ; preds = %140
  %150 = extractvalue { i32, i1 } %142, 0
  %151 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %150)
  %152 = extractvalue { i32, i1 } %151, 1
  br i1 %152, label %153, label %154

153:                                              ; preds = %149
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

154:                                              ; preds = %149
  %155 = extractvalue { i32, i1 } %151, 0
  %156 = icmp slt i32 %1, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %154
  %158 = bitcast i128 %7 to fp128
  ret fp128 %158

159:                                              ; preds = %154
  br label %145

160:                                              ; preds = %145
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

161:                                              ; preds = %145
  %162 = extractvalue { i32, i1 } %146, 0
  %163 = load i32, ptr %5, align 4
  %164 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %163, i32 %1)
  %165 = extractvalue { i32, i1 } %164, 1
  br i1 %165, label %166, label %167

166:                                              ; preds = %161
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

167:                                              ; preds = %161
  %168 = extractvalue { i32, i1 } %164, 0
  %169 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %168)
  %170 = extractvalue { i32, i1 } %169, 1
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %167
  %173 = extractvalue { i32, i1 } %169, 0
  %174 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %173, i32 1)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

176:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %172
  %178 = extractvalue { i32, i1 } %174, 0
  %179 = call i32 @llvm.smin.i32(i32 %162, i32 %178)
  %180 = sub i32 127, %179
  %181 = icmp ule i32 %180, 127
  br i1 %181, label %188, label %189

182:                                              ; preds = %188
  %183 = trunc i32 %179 to i7
  %184 = call i128 @llvm.cttz.i128(i128 %6, i1 false)
  %185 = trunc i128 %184 to i8
  %186 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %183, i7 1)
  %187 = extractvalue { i7, i1 } %186, 1
  br i1 %187, label %190, label %191

188:                                              ; preds = %177
  br label %182

189:                                              ; preds = %177
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

190:                                              ; preds = %182
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

191:                                              ; preds = %182
  %192 = extractvalue { i7, i1 } %186, 0
  %193 = zext i7 %192 to i8
  %194 = icmp eq i8 %185, %193
  %195 = and i128 %6, 5192296858534827628530496329220095
  store i128 %195, ptr %3, align 16
  %196 = load i128, ptr %3, align 16
  %197 = load i32, ptr %5, align 4
  %198 = icmp sgt i32 %197, 0
  %199 = zext i1 %198 to i128
  %200 = shl i128 %199, 112
  %201 = or i128 %196, %200
  store i128 %201, ptr %3, align 16
  %202 = load i128, ptr %3, align 16
  %203 = call fastcc { i7, i1 } @llvm.usub.with.overflow.i7(i7 %183, i7 1)
  %204 = extractvalue { i7, i1 } %203, 1
  br i1 %204, label %205, label %206

205:                                              ; preds = %191
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

206:                                              ; preds = %191
  %207 = extractvalue { i7, i1 } %203, 0
  %208 = zext i7 %207 to i128
  %209 = lshr i128 %202, %208
  store i128 %209, ptr %3, align 16
  %210 = load i128, ptr %3, align 16
  %211 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %210, i128 1)
  %212 = extractvalue { i128, i1 } %211, 1
  br i1 %212, label %213, label %214

213:                                              ; preds = %206
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

214:                                              ; preds = %206
  %215 = extractvalue { i128, i1 } %211, 0
  %216 = lshr i128 %215, 1
  %217 = zext i1 %194 to i128
  %218 = xor i128 %217, -1
  %219 = and i128 %216, %218
  store i128 %219, ptr %3, align 16
  %220 = load i128, ptr %3, align 16
  %221 = or i128 %220, %7
  %222 = bitcast i128 %221 to fp128
  ret fp128 %222

223:                                              ; preds = %133
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

224:                                              ; preds = %133
  %225 = extractvalue { i32, i1 } %134, 0
  %226 = icmp sge i32 %225, 0
  br i1 %226, label %232, label %233

227:                                              ; preds = %232
  %228 = sext i32 %225 to i128
  %229 = shl i128 %228, 112
  %230 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 %6, i128 %229)
  %231 = extractvalue { i128, i1 } %230, 1
  br i1 %231, label %234, label %235

232:                                              ; preds = %224
  br label %227

233:                                              ; preds = %224
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @164)
  unreachable

234:                                              ; preds = %227
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

235:                                              ; preds = %227
  %236 = extractvalue { i128, i1 } %230, 0
  %237 = bitcast i128 %236 to fp128
  ret fp128 %237
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %0) unnamed_addr #0 {
  %2 = bitcast fp128 %0 to i128
  %3 = and i128 %2, 170141183460469231731687303715884105727
  %4 = icmp ult i128 %3, 170135991163610696904058773219554885632
  ret i1 %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.ilogb.ilogbX__anon_5847(fp128 %0) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i128, align 16
  %4 = bitcast fp128 %0 to i128
  %5 = and i128 %4, 170141183460469231731687303715884105727
  store i128 %5, ptr %3, align 16
  %6 = load i128, ptr %3, align 16
  %7 = lshr i128 %6, 112
  %8 = sub i128 2147483647, %7
  %9 = icmp ule i128 %8, 2147483647
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i128 %7 to i32
  store i32 %11, ptr %2, align 4
  %12 = load i32, ptr %2, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %22

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @180)
  unreachable

16:                                               ; preds = %22
  %17 = load i32, ptr %2, align 4
  %18 = icmp eq i32 %17, 32767
  br i1 %18, label %39, label %42

19:                                               ; preds = %10
  %20 = load i128, ptr %3, align 16
  %21 = icmp eq i128 %20, 0
  br i1 %21, label %30, label %31

22:                                               ; preds = %10
  br label %16

23:                                               ; preds = %31
  %24 = load i128, ptr %3, align 16
  %25 = call i128 @llvm.ctlz.i128(i128 %24, i1 false)
  %26 = trunc i128 %25 to i8
  %27 = zext i8 %26 to i32
  %28 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 -16367, i32 %27)
  %29 = extractvalue { i32, i1 } %28, 1
  br i1 %29, label %32, label %33

30:                                               ; preds = %19
  call fastcc void @math.raiseInvalid()
  ret i32 -2147483648

31:                                               ; preds = %19
  br label %23

32:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %23
  %34 = extractvalue { i32, i1 } %28, 0
  ret i32 %34

35:                                               ; preds = %42
  %36 = load i32, ptr %2, align 4
  %37 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %36, i32 16383)
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %45, label %46

39:                                               ; preds = %16
  call fastcc void @math.raiseInvalid()
  %40 = load i128, ptr %3, align 16
  %41 = icmp ugt i128 %40, 170135991163610696904058773219554885632
  br i1 %41, label %43, label %44

42:                                               ; preds = %16
  br label %35

43:                                               ; preds = %39
  ret i32 -2147483648

44:                                               ; preds = %39
  ret i32 2147483647

45:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

46:                                               ; preds = %35
  %47 = extractvalue { i32, i1 } %37, 0
  ret i32 %47
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__ceilh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @ceilf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @ceilf(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  store i32 %6, ptr %5, align 4
  %7 = load i32, ptr %5, align 4
  %8 = lshr i32 %7, 23
  %9 = and i32 %8, 255
  %10 = sub i32 2147483647, %9
  %11 = icmp ule i32 %10, 2147483647
  br i1 %11, label %15, label %16

12:                                               ; preds = %15
  %13 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 127)
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %18

15:                                               ; preds = %1
  br label %12

16:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @90)
  unreachable

17:                                               ; preds = %12
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

18:                                               ; preds = %12
  %19 = extractvalue { i32, i1 } %13, 0
  store i32 %19, ptr %4, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %20 = fcmp oeq float %0, 0.000000e+00
  br i1 %20, label %24, label %25

21:                                               ; preds = %25
  %22 = load i32, ptr %4, align 4
  %23 = icmp sge i32 %22, 23
  br i1 %23, label %26, label %27

24:                                               ; preds = %18
  ret float %0

25:                                               ; preds = %18
  br label %21

26:                                               ; preds = %21
  ret float %0

27:                                               ; preds = %21
  %28 = load i32, ptr %4, align 4
  %29 = icmp sge i32 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %27
  %31 = load i32, ptr %4, align 4
  %32 = sub i32 31, %31
  %33 = icmp ule i32 %32, 31
  br i1 %33, label %47, label %48

34:                                               ; preds = %27
  %35 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %35)
  %36 = load i32, ptr %5, align 4
  %37 = lshr i32 %36, 31
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %72, label %73

39:                                               ; preds = %47
  %40 = trunc i32 %31 to i5
  %41 = zext i5 %40 to i32
  %42 = lshr i32 8388607, %41
  store i32 %42, ptr %3, align 4
  %43 = load i32, ptr %5, align 4
  %44 = load i32, ptr %3, align 4
  %45 = and i32 %43, %44
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %54, label %55

47:                                               ; preds = %30
  br label %39

48:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @90)
  unreachable

49:                                               ; preds = %55
  %50 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %50)
  %51 = load i32, ptr %5, align 4
  %52 = lshr i32 %51, 31
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %63, label %68

54:                                               ; preds = %39
  ret float %0

55:                                               ; preds = %39
  br label %49

56:                                               ; preds = %70, %68
  %57 = load i32, ptr %5, align 4
  %58 = load i32, ptr %3, align 4
  %59 = xor i32 %58, -1
  %60 = and i32 %57, %59
  store i32 %60, ptr %5, align 4
  %61 = load i32, ptr %5, align 4
  %62 = bitcast i32 %61 to float
  ret float %62

63:                                               ; preds = %49
  %64 = load i32, ptr %5, align 4
  %65 = load i32, ptr %3, align 4
  %66 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %64, i32 %65)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %69, label %70

68:                                               ; preds = %49
  br label %56

69:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

70:                                               ; preds = %63
  %71 = extractvalue { i32, i1 } %66, 0
  store i32 %71, ptr %5, align 4
  br label %56

72:                                               ; preds = %34
  ret float -0.000000e+00

73:                                               ; preds = %34
  ret float 1.000000e+00
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.doNotOptimizeAway__anon_3743(float %0) unnamed_addr #0 {
  call fastcc void @mem.doNotOptimizeAway__anon_6109(float %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_6109(float %0) unnamed_addr #0 {
  %2 = alloca i8, align 1
  store i8 0, ptr %2, align 1
  call void asm sideeffect "", "rm"(float %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @ceil(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca double, align 8
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 52
  %6 = and i64 %5, 2047
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %7 = icmp uge i64 %6, 1075
  br i1 %7, label %13, label %14

8:                                                ; preds = %17
  %9 = lshr i64 %4, 63
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %20, label %24

11:                                               ; preds = %14, %13
  %12 = phi i1 [ true, %13 ], [ %15, %14 ]
  br i1 %12, label %16, label %17

13:                                               ; preds = %1
  br label %11

14:                                               ; preds = %1
  %15 = fcmp oeq double %0, 0.000000e+00
  br label %11

16:                                               ; preds = %11
  ret double %0

17:                                               ; preds = %11
  br label %8

18:                                               ; preds = %24, %20
  %19 = icmp ule i64 %6, 1022
  br i1 %19, label %28, label %32

20:                                               ; preds = %8
  %21 = fsub double %0, 0x4330000000000000
  %22 = fadd double %21, 0x4330000000000000
  %23 = fsub double %22, %0
  store double %23, ptr %3, align 8
  br label %18

24:                                               ; preds = %8
  %25 = fadd double %0, 0x4330000000000000
  %26 = fsub double %25, 0x4330000000000000
  %27 = fsub double %26, %0
  store double %27, ptr %3, align 8
  br label %18

28:                                               ; preds = %18
  %29 = load double, ptr %3, align 8
  call fastcc void @math.doNotOptimizeAway__anon_3744(double %29)
  %30 = lshr i64 %4, 63
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %35, label %36

32:                                               ; preds = %18
  %33 = load double, ptr %3, align 8
  %34 = fcmp olt double %33, 0.000000e+00
  br i1 %34, label %37, label %41

35:                                               ; preds = %28
  ret double -0.000000e+00

36:                                               ; preds = %28
  ret double 1.000000e+00

37:                                               ; preds = %32
  %38 = load double, ptr %3, align 8
  %39 = fadd double %0, %38
  %40 = fadd double %39, 1.000000e+00
  ret double %40

41:                                               ; preds = %32
  %42 = load double, ptr %3, align 8
  %43 = fadd double %0, %42
  ret double %43
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.doNotOptimizeAway__anon_3744(double %0) unnamed_addr #0 {
  call fastcc void @mem.doNotOptimizeAway__anon_6110(double %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_6110(double %0) unnamed_addr #0 {
  %2 = alloca i8, align 1
  store i8 0, ptr %2, align 1
  call void asm sideeffect "", "rm"(double %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__ceilx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @ceilq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @ceilq(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca fp128, align 16
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 112
  %6 = and i128 %5, 32767
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %7 = icmp uge i128 %6, 16495
  br i1 %7, label %13, label %14

8:                                                ; preds = %18
  %9 = lshr i128 %4, 127
  %10 = icmp ne i128 %9, 0
  br i1 %10, label %21, label %25

11:                                               ; preds = %14, %13
  %12 = phi i1 [ true, %13 ], [ %16, %14 ]
  br i1 %12, label %17, label %18

13:                                               ; preds = %1
  br label %11

14:                                               ; preds = %1
  %15 = call i32 @__eqtf2(fp128 %0, fp128 0xL00000000000000000000000000000000)
  %16 = icmp eq i32 %15, 0
  br label %11

17:                                               ; preds = %11
  ret fp128 %0

18:                                               ; preds = %11
  br label %8

19:                                               ; preds = %25, %21
  %20 = icmp ule i128 %6, 16382
  br i1 %20, label %29, label %33

21:                                               ; preds = %8
  %22 = call fp128 @__subtf3(fp128 %0, fp128 0xL0000000000000000406F000000000000)
  %23 = call fp128 @__addtf3(fp128 %22, fp128 0xL0000000000000000406F000000000000)
  %24 = call fp128 @__subtf3(fp128 %23, fp128 %0)
  store fp128 %24, ptr %3, align 16
  br label %19

25:                                               ; preds = %8
  %26 = call fp128 @__addtf3(fp128 %0, fp128 0xL0000000000000000406F000000000000)
  %27 = call fp128 @__subtf3(fp128 %26, fp128 0xL0000000000000000406F000000000000)
  %28 = call fp128 @__subtf3(fp128 %27, fp128 %0)
  store fp128 %28, ptr %3, align 16
  br label %19

29:                                               ; preds = %19
  %30 = load fp128, ptr %3, align 16
  call fastcc void @math.doNotOptimizeAway__anon_3745(fp128 %30)
  %31 = lshr i128 %4, 127
  %32 = icmp ne i128 %31, 0
  br i1 %32, label %37, label %38

33:                                               ; preds = %19
  %34 = load fp128, ptr %3, align 16
  %35 = call i32 @__lttf2(fp128 %34, fp128 0xL00000000000000000000000000000000)
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %39, label %43

37:                                               ; preds = %29
  ret fp128 0xL00000000000000008000000000000000

38:                                               ; preds = %29
  ret fp128 0xL00000000000000003FFF000000000000

39:                                               ; preds = %33
  %40 = load fp128, ptr %3, align 16
  %41 = call fp128 @__addtf3(fp128 %0, fp128 %40)
  %42 = call fp128 @__addtf3(fp128 %41, fp128 0xL00000000000000003FFF000000000000)
  ret fp128 %42

43:                                               ; preds = %33
  %44 = load fp128, ptr %3, align 16
  %45 = call fp128 @__addtf3(fp128 %0, fp128 %44)
  ret fp128 %45
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.doNotOptimizeAway__anon_3745(fp128 %0) unnamed_addr #0 {
  call fastcc void @mem.doNotOptimizeAway__anon_6111(fp128 %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_6111(fp128 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca fp128, align 16
  %4 = alloca i8, align 1
  store i8 0, ptr %4, align 1
  store fp128 %0, ptr %3, align 16
  call fastcc void @mem.doNotOptimizeAway__anon_6714(ptr nonnull readonly align 16 %3)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_6714(ptr nonnull readonly align 16 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca ptr, align 8
  %4 = alloca i8, align 1
  store i8 0, ptr %4, align 1
  store ptr %0, ptr %3, align 8
  call void asm sideeffect "", "m,~{memory}"(ptr %3)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @ceill(double %0) #0 {
  %2 = call double @ceil(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__cosh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @cosf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @cosf(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca float, align 4
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  store i32 %6, ptr %5, align 4
  %7 = load i32, ptr %5, align 4
  %8 = lshr i32 %7, 31
  %9 = icmp ne i32 %8, 0
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 2147483647
  store i32 %11, ptr %5, align 4
  %12 = load i32, ptr %5, align 4
  %13 = icmp ule i32 %12, 1061752794
  br i1 %13, label %17, label %20

14:                                               ; preds = %20
  %15 = load i32, ptr %5, align 4
  %16 = icmp ule i32 %15, 1081824209
  br i1 %16, label %30, label %33

17:                                               ; preds = %1
  %18 = load i32, ptr %5, align 4
  %19 = icmp ult i32 %18, 964689920
  br i1 %19, label %24, label %26

20:                                               ; preds = %1
  br label %14

21:                                               ; preds = %26
  %22 = fpext float %0 to double
  %23 = call fastcc float @compiler_rt.trig.__cosdf(double %22)
  ret float %23

24:                                               ; preds = %17
  %25 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %25)
  ret float 1.000000e+00

26:                                               ; preds = %17
  br label %21

27:                                               ; preds = %33
  %28 = load i32, ptr %5, align 4
  %29 = icmp ule i32 %28, 1088565717
  br i1 %29, label %57, label %60

30:                                               ; preds = %14
  %31 = load i32, ptr %5, align 4
  %32 = icmp ugt i32 %31, 1075235811
  br i1 %32, label %34, label %35

33:                                               ; preds = %14
  br label %27

34:                                               ; preds = %30
  br i1 %9, label %40, label %43

35:                                               ; preds = %30
  br i1 %9, label %46, label %50

36:                                               ; preds = %43, %40
  %37 = phi double [ %42, %40 ], [ %45, %43 ]
  %38 = call fastcc float @compiler_rt.trig.__cosdf(double %37)
  %39 = fneg float %38
  ret float %39

40:                                               ; preds = %34
  %41 = fpext float %0 to double
  %42 = fadd double %41, 0x400921FB54442D18
  br label %36

43:                                               ; preds = %34
  %44 = fpext float %0 to double
  %45 = fsub double %44, 0x400921FB54442D18
  br label %36

46:                                               ; preds = %35
  %47 = fpext float %0 to double
  %48 = fadd double %47, 0x3FF921FB54442D18
  %49 = call fastcc float @compiler_rt.trig.__sindf(double %48)
  ret float %49

50:                                               ; preds = %35
  %51 = fpext float %0 to double
  %52 = fsub double 0x3FF921FB54442D18, %51
  %53 = call fastcc float @compiler_rt.trig.__sindf(double %52)
  ret float %53

54:                                               ; preds = %60
  %55 = load i32, ptr %5, align 4
  %56 = icmp uge i32 %55, 2139095040
  br i1 %56, label %84, label %86

57:                                               ; preds = %27
  %58 = load i32, ptr %5, align 4
  %59 = icmp ugt i32 %58, 1085271519
  br i1 %59, label %61, label %62

60:                                               ; preds = %27
  br label %54

61:                                               ; preds = %57
  br i1 %9, label %66, label %69

62:                                               ; preds = %57
  br i1 %9, label %72, label %77

63:                                               ; preds = %69, %66
  %64 = phi double [ %68, %66 ], [ %71, %69 ]
  %65 = call fastcc float @compiler_rt.trig.__cosdf(double %64)
  ret float %65

66:                                               ; preds = %61
  %67 = fpext float %0 to double
  %68 = fadd double %67, 0x401921FB54442D18
  br label %63

69:                                               ; preds = %61
  %70 = fpext float %0 to double
  %71 = fsub double %70, 0x401921FB54442D18
  br label %63

72:                                               ; preds = %62
  %73 = fneg float %0
  %74 = fpext float %73 to double
  %75 = fsub double %74, 0x4012D97C7F3321D2
  %76 = call fastcc float @compiler_rt.trig.__sindf(double %75)
  ret float %76

77:                                               ; preds = %62
  %78 = fpext float %0 to double
  %79 = fsub double %78, 0x4012D97C7F3321D2
  %80 = call fastcc float @compiler_rt.trig.__sindf(double %79)
  ret float %80

81:                                               ; preds = %86
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %82 = call fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %4)
  %83 = and i32 %82, 3
  switch i32 %83, label %89 [
    i32 0, label %92
    i32 1, label %95
    i32 2, label %99
  ]

84:                                               ; preds = %54
  %85 = fsub float %0, %0
  ret float %85

86:                                               ; preds = %54
  br label %81

87:                                               ; preds = %99, %95, %92, %89
  %88 = load float, ptr %3, align 4
  ret float %88

89:                                               ; preds = %81
  %90 = load double, ptr %4, align 8
  %91 = call fastcc float @compiler_rt.trig.__sindf(double %90)
  store float %91, ptr %3, align 4
  br label %87

92:                                               ; preds = %81
  %93 = load double, ptr %4, align 8
  %94 = call fastcc float @compiler_rt.trig.__cosdf(double %93)
  store float %94, ptr %3, align 4
  br label %87

95:                                               ; preds = %81
  %96 = load double, ptr %4, align 8
  %97 = fneg double %96
  %98 = call fastcc float @compiler_rt.trig.__sindf(double %97)
  store float %98, ptr %3, align 4
  br label %87

99:                                               ; preds = %81
  %100 = load double, ptr %4, align 8
  %101 = call fastcc float @compiler_rt.trig.__cosdf(double %100)
  %102 = fneg float %101
  store float %102, ptr %3, align 4
  br label %87
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.trig.__cosdf(double %0) unnamed_addr #0 {
  %2 = fmul double %0, %0
  %3 = fmul double %2, %2
  %4 = fmul double %2, 0x3EF99342E0EE5069
  %5 = fadd double 0xBF56C087E80F1E27, %4
  %6 = fmul double %2, 0xBFDFFFFFFD0C5E81
  %7 = fadd double 1.000000e+00, %6
  %8 = fmul double %3, 0x3FA55553E1053A42
  %9 = fadd double %7, %8
  %10 = fmul double %3, %2
  %11 = fmul double %10, %5
  %12 = fadd double %9, %11
  %13 = fptrunc double %12 to float
  ret float %13
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.trig.__sindf(double %0) unnamed_addr #0 {
  %2 = fmul double %0, %0
  %3 = fmul double %2, %2
  %4 = fmul double %2, 0x3EC6CD878C3B46A7
  %5 = fadd double 0xBF2A00F9E2CAE774, %4
  %6 = fmul double %2, %0
  %7 = fmul double %2, 0x3F811110896EFBB2
  %8 = fadd double 0xBFC5555554CBAC77, %7
  %9 = fmul double %6, %8
  %10 = fadd double %0, %9
  %11 = fmul double %6, %3
  %12 = fmul double %11, %5
  %13 = fadd double %10, %12
  %14 = fptrunc double %13 to float
  ret float %14
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca [1 x double], align 8
  %11 = alloca [1 x double], align 8
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %8, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %7, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %6, i8 -86, i64 1, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %12 = bitcast float %0 to i32
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %4, align 4
  %14 = and i32 %13, 2147483647
  store i32 %14, ptr %8, align 4
  %15 = load i32, ptr %8, align 4
  %16 = icmp ult i32 %15, 1305022427
  br i1 %16, label %20, label %32

17:                                               ; preds = %32
  %18 = load i32, ptr %8, align 4
  %19 = icmp uge i32 %18, 2139095040
  br i1 %19, label %92, label %95

20:                                               ; preds = %2
  %21 = fpext float %0 to double
  %22 = fmul double %21, 0x3FE45F306DC9C883
  %23 = fadd double %22, 0x4338000000000000
  %24 = fsub double %23, 0x4338000000000000
  store double %24, ptr %9, align 8
  %25 = load double, ptr %9, align 8
  %26 = fptosi double %25 to i32
  %27 = sitofp i32 %26 to double
  %28 = fsub double %25, %27
  %29 = fcmp olt double %28, 1.000000e+00
  %30 = fcmp ogt double %28, -1.000000e+00
  %31 = and i1 %29, %30
  br i1 %31, label %43, label %44

32:                                               ; preds = %2
  br label %17

33:                                               ; preds = %43
  store i32 %26, ptr %7, align 4
  %34 = load double, ptr %9, align 8
  %35 = fmul double %34, 0x3FF921FB50000000
  %36 = fpext float %0 to double
  %37 = fsub double %36, %35
  %38 = load double, ptr %9, align 8
  %39 = fmul double %38, 0x3E5110B4611A6263
  %40 = fsub double %37, %39
  store double %40, ptr %1, align 8
  %41 = load double, ptr %1, align 8
  %42 = fcmp olt double %41, 0xBFE921FB60000000
  br i1 %42, label %47, label %51

43:                                               ; preds = %20
  br label %33

44:                                               ; preds = %20
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @165)
  unreachable

45:                                               ; preds = %66, %55
  %46 = load i32, ptr %7, align 4
  ret i32 %46

47:                                               ; preds = %33
  %48 = load i32, ptr %7, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %48, i32 1)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %54, label %55

51:                                               ; preds = %33
  %52 = load double, ptr %1, align 8
  %53 = fcmp ogt double %52, 0x3FE921FB60000000
  br i1 %53, label %67, label %71

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i32, i1 } %49, 0
  store i32 %56, ptr %7, align 4
  %57 = load double, ptr %9, align 8
  %58 = fsub double %57, 1.000000e+00
  store double %58, ptr %9, align 8
  %59 = load double, ptr %9, align 8
  %60 = fmul double %59, 0x3FF921FB50000000
  %61 = fpext float %0 to double
  %62 = fsub double %61, %60
  %63 = load double, ptr %9, align 8
  %64 = fmul double %63, 0x3E5110B4611A6263
  %65 = fsub double %62, %64
  store double %65, ptr %1, align 8
  br label %45

66:                                               ; preds = %73, %71
  br label %45

67:                                               ; preds = %51
  %68 = load i32, ptr %7, align 4
  %69 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %68, i32 1)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %72, label %73

71:                                               ; preds = %51
  br label %66

72:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

73:                                               ; preds = %67
  %74 = extractvalue { i32, i1 } %69, 0
  store i32 %74, ptr %7, align 4
  %75 = load double, ptr %9, align 8
  %76 = fadd double %75, 1.000000e+00
  store double %76, ptr %9, align 8
  %77 = load double, ptr %9, align 8
  %78 = fmul double %77, 0x3FF921FB50000000
  %79 = fpext float %0 to double
  %80 = fsub double %79, %78
  %81 = load double, ptr %9, align 8
  %82 = fmul double %81, 0x3E5110B4611A6263
  %83 = fsub double %80, %82
  store double %83, ptr %1, align 8
  br label %66

84:                                               ; preds = %95
  %85 = load i32, ptr %4, align 4
  %86 = lshr i32 %85, 31
  %87 = icmp ne i32 %86, 0
  store i1 %87, ptr %6, align 1
  %88 = load i32, ptr %8, align 4
  %89 = lshr i32 %88, 23
  %90 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %89, i32 150)
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %96, label %97

92:                                               ; preds = %17
  %93 = fsub float %0, %0
  %94 = fpext float %93 to double
  store double %94, ptr %1, align 8
  ret i32 0

95:                                               ; preds = %17
  br label %84

96:                                               ; preds = %84
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %84
  %98 = extractvalue { i32, i1 } %90, 0
  store i32 %98, ptr %5, align 4
  %99 = load i32, ptr %8, align 4
  %100 = load i32, ptr %5, align 4
  %101 = shl i32 %100, 23
  %102 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %99, i32 %101)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %104, label %105

104:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %97
  %106 = extractvalue { i32, i1 } %102, 0
  store i32 %106, ptr %4, align 4
  %107 = getelementptr inbounds [1 x double], ptr %11, i64 0, i64 0
  %108 = load i32, ptr %4, align 4
  %109 = bitcast i32 %108 to float
  %110 = fpext float %109 to double
  store double %110, ptr %107, align 8
  %111 = load i32, ptr %5, align 4
  %112 = sub i32 2147483647, %111
  %113 = icmp ule i32 %112, 2147483647
  br i1 %113, label %127, label %128

114:                                              ; preds = %127
  %115 = getelementptr inbounds [1 x double], ptr %11, i64 0, i64 0
  %116 = insertvalue { ptr, i64 } poison, ptr %115, 0
  %117 = insertvalue { ptr, i64 } %116, i64 1, 1
  %118 = getelementptr inbounds [1 x double], ptr %10, i64 0, i64 0
  %119 = insertvalue { ptr, i64 } poison, ptr %118, 0
  %120 = insertvalue { ptr, i64 } %119, i64 1, 1
  %121 = extractvalue { ptr, i64 } %117, 0
  %122 = extractvalue { ptr, i64 } %117, 1
  %123 = extractvalue { ptr, i64 } %120, 0
  %124 = extractvalue { ptr, i64 } %120, 1
  %125 = call fastcc i32 @compiler_rt.rem_pio2_large.rem_pio2_large(ptr nonnull align 8 %121, i64 %122, ptr nonnull align 8 %123, i64 %124, i32 %111, i32 1, i64 0)
  store i32 %125, ptr %7, align 4
  %126 = load i1, ptr %6, align 1
  br i1 %126, label %133, label %140

127:                                              ; preds = %105
  br label %114

128:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @165)
  unreachable

129:                                              ; preds = %140
  %130 = getelementptr inbounds [1 x double], ptr %10, i64 0, i64 0
  %131 = load double, ptr %130, align 8
  store double %131, ptr %1, align 8
  %132 = load i32, ptr %7, align 4
  ret i32 %132

133:                                              ; preds = %114
  %134 = getelementptr inbounds [1 x double], ptr %10, i64 0, i64 0
  %135 = load double, ptr %134, align 8
  %136 = fneg double %135
  store double %136, ptr %1, align 8
  %137 = load i32, ptr %7, align 4
  %138 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %137)
  %139 = extractvalue { i32, i1 } %138, 1
  br i1 %139, label %141, label %142

140:                                              ; preds = %114
  br label %129

141:                                              ; preds = %133
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

142:                                              ; preds = %133
  %143 = extractvalue { i32, i1 } %138, 0
  ret i32 %143
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.rem_pio2_large.rem_pio2_large(ptr nonnull align 8 %0, i64 %1, ptr nonnull align 8 %2, i64 %3, i32 %4, i32 %5, i64 %6) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %8 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %8, ptr %StackGuardSlot)
  %9 = alloca { ptr, i64 }, align 8
  %10 = alloca [20 x double], align 8
  %11 = alloca { ptr, i64 }, align 8
  %12 = alloca [20 x double], align 8
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca { ptr, i64 }, align 8
  %15 = alloca { ptr, i64 }, align 8
  %16 = alloca { ptr, i64 }, align 8
  %17 = alloca { ptr, i64 }, align 8
  %18 = alloca { ptr, i64 }, align 8
  %19 = alloca [20 x double], align 8
  %20 = alloca [20 x double], align 8
  %21 = alloca [20 x double], align 8
  %22 = alloca [20 x double], align 8
  %23 = alloca [20 x double], align 8
  %24 = alloca [20 x double], align 8
  %25 = alloca [20 x double], align 8
  %26 = alloca { ptr, i64 }, align 8
  %27 = alloca [20 x double], align 8
  %28 = alloca [20 x double], align 8
  %29 = alloca [20 x i32], align 4
  %30 = alloca [20 x i32], align 4
  %31 = alloca [20 x double], align 8
  %32 = alloca [20 x i32], align 4
  %33 = alloca [20 x i32], align 4
  %34 = alloca [20 x i32], align 4
  %35 = alloca [20 x i32], align 4
  %36 = alloca [20 x i32], align 4
  %37 = alloca [20 x i32], align 4
  %38 = alloca [20 x double], align 8
  %39 = alloca [20 x double], align 8
  %40 = alloca [20 x double], align 8
  %41 = alloca [20 x double], align 8
  %42 = alloca [20 x double], align 8
  %43 = alloca [20 x double], align 8
  %44 = alloca double, align 8
  %45 = alloca double, align 8
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca [20 x i32], align 4
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca i32, align 4
  %59 = alloca i32, align 4
  %60 = insertvalue { ptr, i64 } poison, ptr %0, 0
  %61 = insertvalue { ptr, i64 } %60, i64 %1, 1
  %62 = insertvalue { ptr, i64 } poison, ptr %2, 0
  %63 = insertvalue { ptr, i64 } %62, i64 %3, 1
  call void @llvm.memset.p0.i64(ptr align 4 %59, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %58, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %57, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %56, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %55, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %54, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %53, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %52, i8 -86, i64 80, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %51, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %50, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %49, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %48, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %47, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %46, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %45, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %44, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %43, i8 -86, i64 160, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %42, i8 -86, i64 160, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %41, i8 -86, i64 160, i1 false)
  %64 = icmp ult i64 %6, 4
  br i1 %64, label %71, label %72

65:                                               ; preds = %71
  %66 = getelementptr inbounds [4 x i32], ptr @181, i64 0, i64 %6
  %67 = load i32, ptr %66, align 4
  store i32 %67, ptr %55, align 4
  %68 = load i32, ptr %55, align 4
  store i32 %68, ptr %56, align 4
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %5, i32 1)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %7
  br label %65

72:                                               ; preds = %7
  call fastcc void @builtin.panicOutOfBounds(i64 %6, i64 4)
  unreachable

73:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %65
  %75 = extractvalue { i32, i1 } %69, 0
  store i32 %75, ptr %58, align 4
  %76 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 3)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %74
  %80 = extractvalue { i32, i1 } %76, 0
  %81 = sdiv i32 %80, 24
  %82 = srem i32 %80, 24
  %83 = xor i32 %80, 24
  %84 = ashr i32 %83, 31
  %85 = icmp ne i32 %82, 0
  %86 = select i1 %85, i32 %84, i32 0
  %87 = add nsw i32 %81, %86
  store i32 %87, ptr %57, align 4
  %88 = load i32, ptr %57, align 4
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %94, label %95

90:                                               ; preds = %95, %94
  %91 = load i32, ptr %57, align 4
  %92 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %91, i32 1)
  %93 = extractvalue { i32, i1 } %92, 1
  br i1 %93, label %96, label %97

94:                                               ; preds = %79
  store i32 0, ptr %57, align 4
  br label %90

95:                                               ; preds = %79
  br label %90

96:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %90
  %98 = extractvalue { i32, i1 } %92, 0
  %99 = call fastcc { i32, i1 } @llvm.smul.with.overflow.i32(i32 24, i32 %98)
  %100 = extractvalue { i32, i1 } %99, 1
  br i1 %100, label %101, label %102

101:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

102:                                              ; preds = %97
  %103 = extractvalue { i32, i1 } %99, 0
  %104 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 %103)
  %105 = extractvalue { i32, i1 } %104, 1
  br i1 %105, label %106, label %107

106:                                              ; preds = %102
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %102
  %108 = extractvalue { i32, i1 } %104, 0
  store i32 %108, ptr %47, align 4
  %109 = load i32, ptr %57, align 4
  %110 = load i32, ptr %58, align 4
  %111 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %109, i32 %110)
  %112 = extractvalue { i32, i1 } %111, 1
  br i1 %112, label %113, label %114

113:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

114:                                              ; preds = %107
  %115 = extractvalue { i32, i1 } %111, 0
  store i32 %115, ptr %50, align 4
  %116 = load i32, ptr %58, align 4
  %117 = load i32, ptr %55, align 4
  %118 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %116, i32 %117)
  %119 = extractvalue { i32, i1 } %118, 1
  br i1 %119, label %120, label %121

120:                                              ; preds = %114
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

121:                                              ; preds = %114
  %122 = extractvalue { i32, i1 } %118, 0
  store i32 %122, ptr %48, align 4
  store i32 0, ptr %51, align 4
  br label %124

123:                                              ; preds = %133
  store i32 0, ptr %51, align 4
  br label %166

124:                                              ; preds = %128, %121
  %125 = load i32, ptr %51, align 4
  %126 = load i32, ptr %48, align 4
  %127 = icmp sle i32 %125, %126
  br i1 %127, label %129, label %133

128:                                              ; preds = %162
  br label %124

129:                                              ; preds = %124
  %130 = load i32, ptr %51, align 4
  %131 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %130)
  %132 = icmp ult i64 %131, 20
  br i1 %132, label %138, label %139

133:                                              ; preds = %124
  br label %123

134:                                              ; preds = %138
  %135 = getelementptr inbounds [20 x double], ptr %43, i64 0, i64 %131
  %136 = load i32, ptr %50, align 4
  %137 = icmp slt i32 %136, 0
  br i1 %137, label %144, label %145

138:                                              ; preds = %129
  br label %134

139:                                              ; preds = %129
  call fastcc void @builtin.panicOutOfBounds(i64 %131, i64 20)
  unreachable

140:                                              ; preds = %149, %144
  %141 = load i32, ptr %51, align 4
  %142 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %141, i32 1)
  %143 = extractvalue { i32, i1 } %142, 1
  br i1 %143, label %155, label %156

144:                                              ; preds = %134
  store double 0.000000e+00, ptr %135, align 8
  br label %140

145:                                              ; preds = %134
  %146 = load i32, ptr %50, align 4
  %147 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %146)
  %148 = icmp ult i64 %147, 690
  br i1 %148, label %153, label %154

149:                                              ; preds = %153
  %150 = getelementptr inbounds [690 x i32], ptr @182, i64 0, i64 %147
  %151 = load i32, ptr %150, align 4
  %152 = sitofp i32 %151 to double
  store double %152, ptr %135, align 8
  br label %140

153:                                              ; preds = %145
  br label %149

154:                                              ; preds = %145
  call fastcc void @builtin.panicOutOfBounds(i64 %147, i64 690)
  unreachable

155:                                              ; preds = %140
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

156:                                              ; preds = %140
  %157 = extractvalue { i32, i1 } %142, 0
  store i32 %157, ptr %51, align 4
  %158 = load i32, ptr %50, align 4
  %159 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %158, i32 1)
  %160 = extractvalue { i32, i1 } %159, 1
  br i1 %160, label %161, label %162

161:                                              ; preds = %156
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

162:                                              ; preds = %156
  %163 = extractvalue { i32, i1 } %159, 0
  store i32 %163, ptr %50, align 4
  br label %128

164:                                              ; preds = %172
  %165 = load i32, ptr %55, align 4
  store i32 %165, ptr %59, align 4
  br label %234

166:                                              ; preds = %170, %123
  %167 = load i32, ptr %51, align 4
  %168 = load i32, ptr %55, align 4
  %169 = icmp sle i32 %167, %168
  br i1 %169, label %171, label %172

170:                                              ; preds = %232
  br label %166

171:                                              ; preds = %166
  store i32 0, ptr %50, align 4
  store double 0.000000e+00, ptr %44, align 8
  br label %177

172:                                              ; preds = %166
  br label %164

173:                                              ; preds = %188
  %174 = load i32, ptr %51, align 4
  %175 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %174)
  %176 = icmp ult i64 %175, 20
  br i1 %176, label %229, label %230

177:                                              ; preds = %181, %171
  %178 = load i32, ptr %50, align 4
  %179 = load i32, ptr %58, align 4
  %180 = icmp sle i32 %178, %179
  br i1 %180, label %182, label %188

181:                                              ; preds = %221
  br label %177

182:                                              ; preds = %177
  %183 = load double, ptr %44, align 8
  %184 = load i32, ptr %50, align 4
  %185 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %184)
  %186 = extractvalue { ptr, i64 } %61, 1
  %187 = icmp ult i64 %185, %186
  br i1 %187, label %197, label %198

188:                                              ; preds = %177
  br label %173

189:                                              ; preds = %197
  %190 = extractvalue { ptr, i64 } %61, 0
  %191 = getelementptr inbounds double, ptr %190, i64 %185
  %192 = load double, ptr %191, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %40, ptr align 8 %43, i64 160, i1 false)
  %193 = load i32, ptr %58, align 4
  %194 = load i32, ptr %51, align 4
  %195 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %193, i32 %194)
  %196 = extractvalue { i32, i1 } %195, 1
  br i1 %196, label %199, label %200

197:                                              ; preds = %182
  br label %189

198:                                              ; preds = %182
  call fastcc void @builtin.panicOutOfBounds(i64 %185, i64 %186)
  unreachable

199:                                              ; preds = %189
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

200:                                              ; preds = %189
  %201 = extractvalue { i32, i1 } %195, 0
  %202 = load i32, ptr %50, align 4
  %203 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %201, i32 %202)
  %204 = extractvalue { i32, i1 } %203, 1
  br i1 %204, label %205, label %206

205:                                              ; preds = %200
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

206:                                              ; preds = %200
  %207 = extractvalue { i32, i1 } %203, 0
  %208 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %207)
  %209 = icmp ult i64 %208, 20
  br i1 %209, label %218, label %219

210:                                              ; preds = %218
  %211 = getelementptr inbounds [20 x double], ptr %40, i64 0, i64 %208
  %212 = load double, ptr %211, align 8
  %213 = fmul double %192, %212
  %214 = fadd double %183, %213
  store double %214, ptr %44, align 8
  %215 = load i32, ptr %50, align 4
  %216 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %215, i32 1)
  %217 = extractvalue { i32, i1 } %216, 1
  br i1 %217, label %220, label %221

218:                                              ; preds = %206
  br label %210

219:                                              ; preds = %206
  call fastcc void @builtin.panicOutOfBounds(i64 %208, i64 20)
  unreachable

220:                                              ; preds = %210
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

221:                                              ; preds = %210
  %222 = extractvalue { i32, i1 } %216, 0
  store i32 %222, ptr %50, align 4
  br label %181

223:                                              ; preds = %229
  %224 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 %175
  %225 = load double, ptr %44, align 8
  store double %225, ptr %224, align 8
  %226 = load i32, ptr %51, align 4
  %227 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %226, i32 1)
  %228 = extractvalue { i32, i1 } %227, 1
  br i1 %228, label %231, label %232

229:                                              ; preds = %173
  br label %223

230:                                              ; preds = %173
  call fastcc void @builtin.panicOutOfBounds(i64 %175, i64 20)
  unreachable

231:                                              ; preds = %223
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

232:                                              ; preds = %223
  %233 = extractvalue { i32, i1 } %227, 0
  store i32 %233, ptr %51, align 4
  br label %170

234:                                              ; preds = %239, %164
  store i32 0, ptr %51, align 4
  %235 = load i32, ptr %59, align 4
  store i32 %235, ptr %50, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %39, ptr align 8 %41, i64 160, i1 false)
  %236 = load i32, ptr %59, align 4
  %237 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %236)
  %238 = icmp ult i64 %237, 20
  br i1 %238, label %243, label %244

239:                                              ; preds = %762
  br label %234

240:                                              ; preds = %243
  %241 = getelementptr inbounds [20 x double], ptr %39, i64 0, i64 %237
  %242 = load double, ptr %241, align 8
  store double %242, ptr %45, align 8
  br label %262

243:                                              ; preds = %234
  br label %240

244:                                              ; preds = %234
  call fastcc void @builtin.panicOutOfBounds(i64 %237, i64 20)
  unreachable

245:                                              ; preds = %275
  %246 = load double, ptr %45, align 8
  %247 = load i32, ptr %47, align 4
  %248 = call fastcc double @math.ldexp.ldexp__anon_3735(double %246, i32 %247)
  store double %248, ptr %45, align 8
  %249 = load double, ptr %45, align 8
  %250 = load double, ptr %45, align 8
  %251 = fmul double %250, 1.250000e-01
  %252 = call double @llvm.floor.f64(double %251)
  %253 = fmul double 8.000000e+00, %252
  %254 = fsub double %249, %253
  store double %254, ptr %45, align 8
  %255 = load double, ptr %45, align 8
  %256 = fptosi double %255 to i32
  %257 = sitofp i32 %256 to double
  %258 = fsub double %255, %257
  %259 = fcmp olt double %258, 1.000000e+00
  %260 = fcmp ogt double %258, -1.000000e+00
  %261 = and i1 %259, %260
  br i1 %261, label %334, label %335

262:                                              ; preds = %265, %240
  %263 = load i32, ptr %50, align 4
  %264 = icmp sgt i32 %263, 0
  br i1 %264, label %266, label %275

265:                                              ; preds = %325
  br label %262

266:                                              ; preds = %262
  %267 = load double, ptr %45, align 8
  %268 = fmul double 0x3E70000000000000, %267
  %269 = fptosi double %268 to i32
  %270 = sitofp i32 %269 to double
  %271 = fsub double %268, %270
  %272 = fcmp olt double %271, 1.000000e+00
  %273 = fcmp ogt double %271, -1.000000e+00
  %274 = and i1 %272, %273
  br i1 %274, label %281, label %282

275:                                              ; preds = %262
  br label %245

276:                                              ; preds = %281
  %277 = sitofp i32 %269 to double
  store double %277, ptr %44, align 8
  %278 = load i32, ptr %51, align 4
  %279 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %278)
  %280 = icmp ult i64 %279, 20
  br i1 %280, label %295, label %296

281:                                              ; preds = %266
  br label %276

282:                                              ; preds = %266
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

283:                                              ; preds = %295
  %284 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %279
  %285 = load double, ptr %45, align 8
  %286 = load double, ptr %44, align 8
  %287 = fmul double 0x4170000000000000, %286
  %288 = fsub double %285, %287
  %289 = fptosi double %288 to i32
  %290 = sitofp i32 %289 to double
  %291 = fsub double %288, %290
  %292 = fcmp olt double %291, 1.000000e+00
  %293 = fcmp ogt double %291, -1.000000e+00
  %294 = and i1 %292, %293
  br i1 %294, label %301, label %302

295:                                              ; preds = %276
  br label %283

296:                                              ; preds = %276
  call fastcc void @builtin.panicOutOfBounds(i64 %279, i64 20)
  unreachable

297:                                              ; preds = %301
  store i32 %289, ptr %284, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %38, ptr align 8 %41, i64 160, i1 false)
  %298 = load i32, ptr %50, align 4
  %299 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %298, i32 1)
  %300 = extractvalue { i32, i1 } %299, 1
  br i1 %300, label %303, label %304

301:                                              ; preds = %283
  br label %297

302:                                              ; preds = %283
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

303:                                              ; preds = %297
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

304:                                              ; preds = %297
  %305 = extractvalue { i32, i1 } %299, 0
  %306 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %305)
  %307 = icmp ult i64 %306, 20
  br i1 %307, label %316, label %317

308:                                              ; preds = %316
  %309 = getelementptr inbounds [20 x double], ptr %38, i64 0, i64 %306
  %310 = load double, ptr %309, align 8
  %311 = load double, ptr %44, align 8
  %312 = fadd double %310, %311
  store double %312, ptr %45, align 8
  %313 = load i32, ptr %51, align 4
  %314 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %313, i32 1)
  %315 = extractvalue { i32, i1 } %314, 1
  br i1 %315, label %318, label %319

316:                                              ; preds = %304
  br label %308

317:                                              ; preds = %304
  call fastcc void @builtin.panicOutOfBounds(i64 %306, i64 20)
  unreachable

318:                                              ; preds = %308
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

319:                                              ; preds = %308
  %320 = extractvalue { i32, i1 } %314, 0
  store i32 %320, ptr %51, align 4
  %321 = load i32, ptr %50, align 4
  %322 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %321, i32 1)
  %323 = extractvalue { i32, i1 } %322, 1
  br i1 %323, label %324, label %325

324:                                              ; preds = %319
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

325:                                              ; preds = %319
  %326 = extractvalue { i32, i1 } %322, 0
  store i32 %326, ptr %50, align 4
  br label %265

327:                                              ; preds = %334
  store i32 %256, ptr %53, align 4
  %328 = load double, ptr %45, align 8
  %329 = load i32, ptr %53, align 4
  %330 = sitofp i32 %329 to double
  %331 = fsub double %328, %330
  store double %331, ptr %45, align 8
  store i32 0, ptr %46, align 4
  %332 = load i32, ptr %47, align 4
  %333 = icmp sgt i32 %332, 0
  br i1 %333, label %339, label %343

334:                                              ; preds = %245
  br label %327

335:                                              ; preds = %245
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

336:                                              ; preds = %437, %431
  %337 = load i32, ptr %46, align 4
  %338 = icmp sgt i32 %337, 0
  br i1 %338, label %462, label %466

339:                                              ; preds = %327
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %37, ptr align 4 %52, i64 80, i1 false)
  %340 = load i32, ptr %59, align 4
  %341 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %340, i32 1)
  %342 = extractvalue { i32, i1 } %341, 1
  br i1 %342, label %346, label %347

343:                                              ; preds = %327
  %344 = load i32, ptr %47, align 4
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %438, label %442

346:                                              ; preds = %339
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

347:                                              ; preds = %339
  %348 = extractvalue { i32, i1 } %341, 0
  %349 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %348)
  %350 = icmp ult i64 %349, 20
  br i1 %350, label %357, label %358

351:                                              ; preds = %357
  %352 = getelementptr inbounds [20 x i32], ptr %37, i64 0, i64 %349
  %353 = load i32, ptr %352, align 4
  %354 = load i32, ptr %47, align 4
  %355 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 24, i32 %354)
  %356 = extractvalue { i32, i1 } %355, 1
  br i1 %356, label %359, label %360

357:                                              ; preds = %347
  br label %351

358:                                              ; preds = %347
  call fastcc void @builtin.panicOutOfBounds(i64 %349, i64 20)
  unreachable

359:                                              ; preds = %351
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

360:                                              ; preds = %351
  %361 = extractvalue { i32, i1 } %355, 0
  %362 = sub i32 31, %361
  %363 = icmp ule i32 %362, 31
  br i1 %363, label %372, label %373

364:                                              ; preds = %372
  %365 = trunc i32 %361 to i5
  %366 = zext i5 %365 to i32
  %367 = ashr i32 %353, %366
  store i32 %367, ptr %51, align 4
  %368 = load i32, ptr %53, align 4
  %369 = load i32, ptr %51, align 4
  %370 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %368, i32 %369)
  %371 = extractvalue { i32, i1 } %370, 1
  br i1 %371, label %374, label %375

372:                                              ; preds = %360
  br label %364

373:                                              ; preds = %360
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

374:                                              ; preds = %364
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

375:                                              ; preds = %364
  %376 = extractvalue { i32, i1 } %370, 0
  store i32 %376, ptr %53, align 4
  %377 = load i32, ptr %59, align 4
  %378 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %377, i32 1)
  %379 = extractvalue { i32, i1 } %378, 1
  br i1 %379, label %380, label %381

380:                                              ; preds = %375
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

381:                                              ; preds = %375
  %382 = extractvalue { i32, i1 } %378, 0
  %383 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %382)
  %384 = icmp ult i64 %383, 20
  br i1 %384, label %392, label %393

385:                                              ; preds = %392
  %386 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %383
  %387 = load i32, ptr %386, align 4
  %388 = load i32, ptr %51, align 4
  %389 = load i32, ptr %47, align 4
  %390 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 24, i32 %389)
  %391 = extractvalue { i32, i1 } %390, 1
  br i1 %391, label %394, label %395

392:                                              ; preds = %381
  br label %385

393:                                              ; preds = %381
  call fastcc void @builtin.panicOutOfBounds(i64 %383, i64 20)
  unreachable

394:                                              ; preds = %385
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

395:                                              ; preds = %385
  %396 = extractvalue { i32, i1 } %390, 0
  %397 = sub i32 31, %396
  %398 = icmp ule i32 %397, 31
  br i1 %398, label %405, label %406

399:                                              ; preds = %405
  %400 = trunc i32 %396 to i5
  %401 = zext i5 %400 to i32
  %402 = shl i32 %388, %401
  %403 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %387, i32 %402)
  %404 = extractvalue { i32, i1 } %403, 1
  br i1 %404, label %407, label %408

405:                                              ; preds = %395
  br label %399

406:                                              ; preds = %395
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

407:                                              ; preds = %399
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

408:                                              ; preds = %399
  %409 = extractvalue { i32, i1 } %403, 0
  store i32 %409, ptr %386, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %36, ptr align 4 %52, i64 80, i1 false)
  %410 = load i32, ptr %59, align 4
  %411 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %410, i32 1)
  %412 = extractvalue { i32, i1 } %411, 1
  br i1 %412, label %413, label %414

413:                                              ; preds = %408
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

414:                                              ; preds = %408
  %415 = extractvalue { i32, i1 } %411, 0
  %416 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %415)
  %417 = icmp ult i64 %416, 20
  br i1 %417, label %424, label %425

418:                                              ; preds = %424
  %419 = getelementptr inbounds [20 x i32], ptr %36, i64 0, i64 %416
  %420 = load i32, ptr %419, align 4
  %421 = load i32, ptr %47, align 4
  %422 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 23, i32 %421)
  %423 = extractvalue { i32, i1 } %422, 1
  br i1 %423, label %426, label %427

424:                                              ; preds = %414
  br label %418

425:                                              ; preds = %414
  call fastcc void @builtin.panicOutOfBounds(i64 %416, i64 20)
  unreachable

426:                                              ; preds = %418
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

427:                                              ; preds = %418
  %428 = extractvalue { i32, i1 } %422, 0
  %429 = sub i32 31, %428
  %430 = icmp ule i32 %429, 31
  br i1 %430, label %435, label %436

431:                                              ; preds = %435
  %432 = trunc i32 %428 to i5
  %433 = zext i5 %432 to i32
  %434 = ashr i32 %420, %433
  store i32 %434, ptr %46, align 4
  br label %336

435:                                              ; preds = %427
  br label %431

436:                                              ; preds = %427
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

437:                                              ; preds = %456, %450
  br label %336

438:                                              ; preds = %343
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %35, ptr align 4 %52, i64 80, i1 false)
  %439 = load i32, ptr %59, align 4
  %440 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %439, i32 1)
  %441 = extractvalue { i32, i1 } %440, 1
  br i1 %441, label %445, label %446

442:                                              ; preds = %343
  %443 = load double, ptr %45, align 8
  %444 = fcmp oge double %443, 5.000000e-01
  br i1 %444, label %457, label %458

445:                                              ; preds = %438
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

446:                                              ; preds = %438
  %447 = extractvalue { i32, i1 } %440, 0
  %448 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %447)
  %449 = icmp ult i64 %448, 20
  br i1 %449, label %454, label %455

450:                                              ; preds = %454
  %451 = getelementptr inbounds [20 x i32], ptr %35, i64 0, i64 %448
  %452 = load i32, ptr %451, align 4
  %453 = ashr i32 %452, 23
  store i32 %453, ptr %46, align 4
  br label %437

454:                                              ; preds = %446
  br label %450

455:                                              ; preds = %446
  call fastcc void @builtin.panicOutOfBounds(i64 %448, i64 20)
  unreachable

456:                                              ; preds = %458, %457
  br label %437

457:                                              ; preds = %442
  store i32 2, ptr %46, align 4
  br label %456

458:                                              ; preds = %442
  br label %456

459:                                              ; preds = %568, %466
  %460 = load double, ptr %45, align 8
  %461 = fcmp oeq double %460, 0.000000e+00
  br i1 %461, label %585, label %589

462:                                              ; preds = %336
  %463 = load i32, ptr %53, align 4
  %464 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %463, i32 1)
  %465 = extractvalue { i32, i1 } %464, 1
  br i1 %465, label %467, label %468

466:                                              ; preds = %336
  br label %459

467:                                              ; preds = %462
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

468:                                              ; preds = %462
  %469 = extractvalue { i32, i1 } %464, 0
  store i32 %469, ptr %53, align 4
  store i32 0, ptr %54, align 4
  store i32 0, ptr %51, align 4
  br label %473

470:                                              ; preds = %482
  %471 = load i32, ptr %47, align 4
  %472 = icmp sgt i32 %471, 0
  br i1 %472, label %533, label %535

473:                                              ; preds = %477, %468
  %474 = load i32, ptr %51, align 4
  %475 = load i32, ptr %59, align 4
  %476 = icmp slt i32 %474, %475
  br i1 %476, label %478, label %482

477:                                              ; preds = %528
  br label %473

478:                                              ; preds = %473
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %34, ptr align 4 %52, i64 80, i1 false)
  %479 = load i32, ptr %51, align 4
  %480 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %479)
  %481 = icmp ult i64 %480, 20
  br i1 %481, label %488, label %489

482:                                              ; preds = %473
  br label %470

483:                                              ; preds = %488
  %484 = getelementptr inbounds [20 x i32], ptr %34, i64 0, i64 %480
  %485 = load i32, ptr %484, align 4
  store i32 %485, ptr %50, align 4
  %486 = load i32, ptr %54, align 4
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %494, label %497

488:                                              ; preds = %478
  br label %483

489:                                              ; preds = %478
  call fastcc void @builtin.panicOutOfBounds(i64 %480, i64 20)
  unreachable

490:                                              ; preds = %525, %501
  %491 = load i32, ptr %51, align 4
  %492 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %491, i32 1)
  %493 = extractvalue { i32, i1 } %492, 1
  br i1 %493, label %527, label %528

494:                                              ; preds = %483
  %495 = load i32, ptr %50, align 4
  %496 = icmp ne i32 %495, 0
  br i1 %496, label %502, label %506

497:                                              ; preds = %483
  %498 = load i32, ptr %51, align 4
  %499 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %498)
  %500 = icmp ult i64 %499, 20
  br i1 %500, label %522, label %523

501:                                              ; preds = %515, %506
  br label %490

502:                                              ; preds = %494
  store i32 1, ptr %54, align 4
  %503 = load i32, ptr %51, align 4
  %504 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %503)
  %505 = icmp ult i64 %504, 20
  br i1 %505, label %512, label %513

506:                                              ; preds = %494
  br label %501

507:                                              ; preds = %512
  %508 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %504
  %509 = load i32, ptr %50, align 4
  %510 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16777216, i32 %509)
  %511 = extractvalue { i32, i1 } %510, 1
  br i1 %511, label %514, label %515

512:                                              ; preds = %502
  br label %507

513:                                              ; preds = %502
  call fastcc void @builtin.panicOutOfBounds(i64 %504, i64 20)
  unreachable

514:                                              ; preds = %507
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

515:                                              ; preds = %507
  %516 = extractvalue { i32, i1 } %510, 0
  store i32 %516, ptr %508, align 4
  br label %501

517:                                              ; preds = %522
  %518 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %499
  %519 = load i32, ptr %50, align 4
  %520 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 16777215, i32 %519)
  %521 = extractvalue { i32, i1 } %520, 1
  br i1 %521, label %524, label %525

522:                                              ; preds = %497
  br label %517

523:                                              ; preds = %497
  call fastcc void @builtin.panicOutOfBounds(i64 %499, i64 20)
  unreachable

524:                                              ; preds = %517
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

525:                                              ; preds = %517
  %526 = extractvalue { i32, i1 } %520, 0
  store i32 %526, ptr %518, align 4
  br label %490

527:                                              ; preds = %490
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

528:                                              ; preds = %490
  %529 = extractvalue { i32, i1 } %492, 0
  store i32 %529, ptr %51, align 4
  br label %477

530:                                              ; preds = %536, %535
  %531 = load i32, ptr %46, align 4
  %532 = icmp eq i32 %531, 2
  br i1 %532, label %569, label %574

533:                                              ; preds = %470
  %534 = load i32, ptr %47, align 4
  switch i32 %534, label %537 [
    i32 1, label %538
    i32 2, label %553
  ]

535:                                              ; preds = %470
  br label %530

536:                                              ; preds = %562, %547
  br label %530

537:                                              ; preds = %533
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

538:                                              ; preds = %533
  %539 = load i32, ptr %59, align 4
  %540 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %539, i32 1)
  %541 = extractvalue { i32, i1 } %540, 1
  br i1 %541, label %542, label %543

542:                                              ; preds = %538
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

543:                                              ; preds = %538
  %544 = extractvalue { i32, i1 } %540, 0
  %545 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %544)
  %546 = icmp ult i64 %545, 20
  br i1 %546, label %551, label %552

547:                                              ; preds = %551
  %548 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %545
  %549 = load i32, ptr %548, align 4
  %550 = and i32 %549, 8388607
  store i32 %550, ptr %548, align 4
  br label %536

551:                                              ; preds = %543
  br label %547

552:                                              ; preds = %543
  call fastcc void @builtin.panicOutOfBounds(i64 %545, i64 20)
  unreachable

553:                                              ; preds = %533
  %554 = load i32, ptr %59, align 4
  %555 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %554, i32 1)
  %556 = extractvalue { i32, i1 } %555, 1
  br i1 %556, label %557, label %558

557:                                              ; preds = %553
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

558:                                              ; preds = %553
  %559 = extractvalue { i32, i1 } %555, 0
  %560 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %559)
  %561 = icmp ult i64 %560, 20
  br i1 %561, label %566, label %567

562:                                              ; preds = %566
  %563 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %560
  %564 = load i32, ptr %563, align 4
  %565 = and i32 %564, 4194303
  store i32 %565, ptr %563, align 4
  br label %536

566:                                              ; preds = %558
  br label %562

567:                                              ; preds = %558
  call fastcc void @builtin.panicOutOfBounds(i64 %560, i64 20)
  unreachable

568:                                              ; preds = %575, %574
  br label %459

569:                                              ; preds = %530
  %570 = load double, ptr %45, align 8
  %571 = fsub double 1.000000e+00, %570
  store double %571, ptr %45, align 8
  %572 = load i32, ptr %54, align 4
  %573 = icmp ne i32 %572, 0
  br i1 %573, label %576, label %581

574:                                              ; preds = %530
  br label %568

575:                                              ; preds = %581, %576
  br label %568

576:                                              ; preds = %569
  %577 = load double, ptr %45, align 8
  %578 = load i32, ptr %47, align 4
  %579 = call fastcc double @math.ldexp.ldexp__anon_3735(double 1.000000e+00, i32 %578)
  %580 = fsub double %577, %579
  store double %580, ptr %45, align 8
  br label %575

581:                                              ; preds = %569
  br label %575

582:                                              ; preds = %619, %589
  %583 = load double, ptr %45, align 8
  %584 = fcmp oeq double %583, 0.000000e+00
  br i1 %584, label %768, label %772

585:                                              ; preds = %459
  store i32 0, ptr %50, align 4
  %586 = load i32, ptr %59, align 4
  %587 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %586, i32 1)
  %588 = extractvalue { i32, i1 } %587, 1
  br i1 %588, label %590, label %591

589:                                              ; preds = %459
  br label %582

590:                                              ; preds = %585
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

591:                                              ; preds = %585
  %592 = extractvalue { i32, i1 } %587, 0
  store i32 %592, ptr %51, align 4
  br label %596

593:                                              ; preds = %606
  %594 = load i32, ptr %50, align 4
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %620, label %621

596:                                              ; preds = %600, %591
  %597 = load i32, ptr %51, align 4
  %598 = load i32, ptr %55, align 4
  %599 = icmp sge i32 %597, %598
  br i1 %599, label %601, label %606

600:                                              ; preds = %617
  br label %596

601:                                              ; preds = %596
  %602 = load i32, ptr %50, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %33, ptr align 4 %52, i64 80, i1 false)
  %603 = load i32, ptr %51, align 4
  %604 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %603)
  %605 = icmp ult i64 %604, 20
  br i1 %605, label %614, label %615

606:                                              ; preds = %596
  br label %593

607:                                              ; preds = %614
  %608 = getelementptr inbounds [20 x i32], ptr %33, i64 0, i64 %604
  %609 = load i32, ptr %608, align 4
  %610 = or i32 %602, %609
  store i32 %610, ptr %50, align 4
  %611 = load i32, ptr %51, align 4
  %612 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %611, i32 1)
  %613 = extractvalue { i32, i1 } %612, 1
  br i1 %613, label %616, label %617

614:                                              ; preds = %601
  br label %607

615:                                              ; preds = %601
  call fastcc void @builtin.panicOutOfBounds(i64 %604, i64 20)
  unreachable

616:                                              ; preds = %607
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

617:                                              ; preds = %607
  %618 = extractvalue { i32, i1 } %612, 0
  store i32 %618, ptr %51, align 4
  br label %600

619:                                              ; preds = %621
  br label %582

620:                                              ; preds = %593
  store i32 1, ptr %49, align 4
  br label %626

621:                                              ; preds = %593
  br label %619

622:                                              ; preds = %647
  %623 = load i32, ptr %59, align 4
  %624 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %623, i32 1)
  %625 = extractvalue { i32, i1 } %624, 1
  br i1 %625, label %651, label %652

626:                                              ; preds = %631, %620
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %32, ptr align 4 %52, i64 80, i1 false)
  %627 = load i32, ptr %55, align 4
  %628 = load i32, ptr %49, align 4
  %629 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %627, i32 %628)
  %630 = extractvalue { i32, i1 } %629, 1
  br i1 %630, label %632, label %633

631:                                              ; preds = %649
  br label %626

632:                                              ; preds = %626
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

633:                                              ; preds = %626
  %634 = extractvalue { i32, i1 } %629, 0
  %635 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %634)
  %636 = icmp ult i64 %635, 20
  br i1 %636, label %641, label %642

637:                                              ; preds = %641
  %638 = getelementptr inbounds [20 x i32], ptr %32, i64 0, i64 %635
  %639 = load i32, ptr %638, align 4
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %643, label %647

641:                                              ; preds = %633
  br label %637

642:                                              ; preds = %633
  call fastcc void @builtin.panicOutOfBounds(i64 %635, i64 20)
  unreachable

643:                                              ; preds = %637
  %644 = load i32, ptr %49, align 4
  %645 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %644, i32 1)
  %646 = extractvalue { i32, i1 } %645, 1
  br i1 %646, label %648, label %649

647:                                              ; preds = %637
  br label %622

648:                                              ; preds = %643
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

649:                                              ; preds = %643
  %650 = extractvalue { i32, i1 } %645, 0
  store i32 %650, ptr %49, align 4
  br label %631

651:                                              ; preds = %622
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

652:                                              ; preds = %622
  %653 = extractvalue { i32, i1 } %624, 0
  store i32 %653, ptr %51, align 4
  br label %659

654:                                              ; preds = %675
  %655 = load i32, ptr %59, align 4
  %656 = load i32, ptr %49, align 4
  %657 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %655, i32 %656)
  %658 = extractvalue { i32, i1 } %657, 1
  br i1 %658, label %761, label %762

659:                                              ; preds = %665, %652
  %660 = load i32, ptr %51, align 4
  %661 = load i32, ptr %59, align 4
  %662 = load i32, ptr %49, align 4
  %663 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %661, i32 %662)
  %664 = extractvalue { i32, i1 } %663, 1
  br i1 %664, label %666, label %667

665:                                              ; preds = %759
  br label %659

666:                                              ; preds = %659
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

667:                                              ; preds = %659
  %668 = extractvalue { i32, i1 } %663, 0
  %669 = icmp sle i32 %660, %668
  br i1 %669, label %670, label %675

670:                                              ; preds = %667
  %671 = load i32, ptr %58, align 4
  %672 = load i32, ptr %51, align 4
  %673 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %671, i32 %672)
  %674 = extractvalue { i32, i1 } %673, 1
  br i1 %674, label %676, label %677

675:                                              ; preds = %667
  br label %654

676:                                              ; preds = %670
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

677:                                              ; preds = %670
  %678 = extractvalue { i32, i1 } %673, 0
  %679 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %678)
  %680 = icmp ult i64 %679, 20
  br i1 %680, label %687, label %688

681:                                              ; preds = %687
  %682 = getelementptr inbounds [20 x double], ptr %43, i64 0, i64 %679
  %683 = load i32, ptr %57, align 4
  %684 = load i32, ptr %51, align 4
  %685 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %683, i32 %684)
  %686 = extractvalue { i32, i1 } %685, 1
  br i1 %686, label %689, label %690

687:                                              ; preds = %677
  br label %681

688:                                              ; preds = %677
  call fastcc void @builtin.panicOutOfBounds(i64 %679, i64 20)
  unreachable

689:                                              ; preds = %681
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

690:                                              ; preds = %681
  %691 = extractvalue { i32, i1 } %685, 0
  %692 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %691)
  %693 = icmp ult i64 %692, 690
  br i1 %693, label %698, label %699

694:                                              ; preds = %698
  %695 = getelementptr inbounds [690 x i32], ptr @182, i64 0, i64 %692
  %696 = load i32, ptr %695, align 4
  %697 = sitofp i32 %696 to double
  store double %697, ptr %682, align 8
  store i32 0, ptr %50, align 4
  store double 0.000000e+00, ptr %44, align 8
  br label %704

698:                                              ; preds = %690
  br label %694

699:                                              ; preds = %690
  call fastcc void @builtin.panicOutOfBounds(i64 %692, i64 690)
  unreachable

700:                                              ; preds = %715
  %701 = load i32, ptr %51, align 4
  %702 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %701)
  %703 = icmp ult i64 %702, 20
  br i1 %703, label %756, label %757

704:                                              ; preds = %708, %694
  %705 = load i32, ptr %50, align 4
  %706 = load i32, ptr %58, align 4
  %707 = icmp sle i32 %705, %706
  br i1 %707, label %709, label %715

708:                                              ; preds = %748
  br label %704

709:                                              ; preds = %704
  %710 = load double, ptr %44, align 8
  %711 = load i32, ptr %50, align 4
  %712 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %711)
  %713 = extractvalue { ptr, i64 } %61, 1
  %714 = icmp ult i64 %712, %713
  br i1 %714, label %724, label %725

715:                                              ; preds = %704
  br label %700

716:                                              ; preds = %724
  %717 = extractvalue { ptr, i64 } %61, 0
  %718 = getelementptr inbounds double, ptr %717, i64 %712
  %719 = load double, ptr %718, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %31, ptr align 8 %43, i64 160, i1 false)
  %720 = load i32, ptr %58, align 4
  %721 = load i32, ptr %51, align 4
  %722 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %720, i32 %721)
  %723 = extractvalue { i32, i1 } %722, 1
  br i1 %723, label %726, label %727

724:                                              ; preds = %709
  br label %716

725:                                              ; preds = %709
  call fastcc void @builtin.panicOutOfBounds(i64 %712, i64 %713)
  unreachable

726:                                              ; preds = %716
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

727:                                              ; preds = %716
  %728 = extractvalue { i32, i1 } %722, 0
  %729 = load i32, ptr %50, align 4
  %730 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %728, i32 %729)
  %731 = extractvalue { i32, i1 } %730, 1
  br i1 %731, label %732, label %733

732:                                              ; preds = %727
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

733:                                              ; preds = %727
  %734 = extractvalue { i32, i1 } %730, 0
  %735 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %734)
  %736 = icmp ult i64 %735, 20
  br i1 %736, label %745, label %746

737:                                              ; preds = %745
  %738 = getelementptr inbounds [20 x double], ptr %31, i64 0, i64 %735
  %739 = load double, ptr %738, align 8
  %740 = fmul double %719, %739
  %741 = fadd double %710, %740
  store double %741, ptr %44, align 8
  %742 = load i32, ptr %50, align 4
  %743 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %742, i32 1)
  %744 = extractvalue { i32, i1 } %743, 1
  br i1 %744, label %747, label %748

745:                                              ; preds = %733
  br label %737

746:                                              ; preds = %733
  call fastcc void @builtin.panicOutOfBounds(i64 %735, i64 20)
  unreachable

747:                                              ; preds = %737
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

748:                                              ; preds = %737
  %749 = extractvalue { i32, i1 } %743, 0
  store i32 %749, ptr %50, align 4
  br label %708

750:                                              ; preds = %756
  %751 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 %702
  %752 = load double, ptr %44, align 8
  store double %752, ptr %751, align 8
  %753 = load i32, ptr %51, align 4
  %754 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %753, i32 1)
  %755 = extractvalue { i32, i1 } %754, 1
  br i1 %755, label %758, label %759

756:                                              ; preds = %700
  br label %750

757:                                              ; preds = %700
  call fastcc void @builtin.panicOutOfBounds(i64 %702, i64 20)
  unreachable

758:                                              ; preds = %750
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

759:                                              ; preds = %750
  %760 = extractvalue { i32, i1 } %754, 0
  store i32 %760, ptr %51, align 4
  br label %665

761:                                              ; preds = %654
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

762:                                              ; preds = %654
  %763 = extractvalue { i32, i1 } %657, 0
  store i32 %763, ptr %59, align 4
  br label %239

764:                                              ; preds = %818, %786
  %765 = load i32, ptr %47, align 4
  %766 = call fastcc double @math.ldexp.ldexp__anon_3735(double 1.000000e+00, i32 %765)
  store double %766, ptr %44, align 8
  %767 = load i32, ptr %59, align 4
  store i32 %767, ptr %51, align 4
  br label %901

768:                                              ; preds = %582
  %769 = load i32, ptr %59, align 4
  %770 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %769, i32 1)
  %771 = extractvalue { i32, i1 } %770, 1
  br i1 %771, label %777, label %778

772:                                              ; preds = %582
  %773 = load double, ptr %45, align 8
  %774 = load i32, ptr %47, align 4
  %775 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %774)
  %776 = extractvalue { i32, i1 } %775, 1
  br i1 %776, label %812, label %813

777:                                              ; preds = %768
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

778:                                              ; preds = %768
  %779 = extractvalue { i32, i1 } %770, 0
  store i32 %779, ptr %59, align 4
  %780 = load i32, ptr %47, align 4
  %781 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %780, i32 24)
  %782 = extractvalue { i32, i1 } %781, 1
  br i1 %782, label %783, label %784

783:                                              ; preds = %778
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

784:                                              ; preds = %778
  %785 = extractvalue { i32, i1 } %781, 0
  store i32 %785, ptr %47, align 4
  br label %787

786:                                              ; preds = %802
  br label %764

787:                                              ; preds = %791, %784
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %30, ptr align 4 %52, i64 80, i1 false)
  %788 = load i32, ptr %59, align 4
  %789 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %788)
  %790 = icmp ult i64 %789, 20
  br i1 %790, label %796, label %797

791:                                              ; preds = %810
  br label %787

792:                                              ; preds = %796
  %793 = getelementptr inbounds [20 x i32], ptr %30, i64 0, i64 %789
  %794 = load i32, ptr %793, align 4
  %795 = icmp eq i32 %794, 0
  br i1 %795, label %798, label %802

796:                                              ; preds = %787
  br label %792

797:                                              ; preds = %787
  call fastcc void @builtin.panicOutOfBounds(i64 %789, i64 20)
  unreachable

798:                                              ; preds = %792
  %799 = load i32, ptr %59, align 4
  %800 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %799, i32 1)
  %801 = extractvalue { i32, i1 } %800, 1
  br i1 %801, label %803, label %804

802:                                              ; preds = %792
  br label %786

803:                                              ; preds = %798
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

804:                                              ; preds = %798
  %805 = extractvalue { i32, i1 } %800, 0
  store i32 %805, ptr %59, align 4
  %806 = load i32, ptr %47, align 4
  %807 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %806, i32 24)
  %808 = extractvalue { i32, i1 } %807, 1
  br i1 %808, label %809, label %810

809:                                              ; preds = %804
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

810:                                              ; preds = %804
  %811 = extractvalue { i32, i1 } %807, 0
  store i32 %811, ptr %47, align 4
  br label %791

812:                                              ; preds = %772
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

813:                                              ; preds = %772
  %814 = extractvalue { i32, i1 } %775, 0
  %815 = call fastcc double @math.ldexp.ldexp__anon_3735(double %773, i32 %814)
  store double %815, ptr %45, align 8
  %816 = load double, ptr %45, align 8
  %817 = fcmp oge double %816, 0x4170000000000000
  br i1 %817, label %819, label %828

818:                                              ; preds = %896, %882
  br label %764

819:                                              ; preds = %813
  %820 = load double, ptr %45, align 8
  %821 = fmul double 0x3E70000000000000, %820
  %822 = fptosi double %821 to i32
  %823 = sitofp i32 %822 to double
  %824 = fsub double %821, %823
  %825 = fcmp olt double %824, 1.000000e+00
  %826 = fcmp ogt double %824, -1.000000e+00
  %827 = and i1 %825, %826
  br i1 %827, label %837, label %838

828:                                              ; preds = %813
  %829 = load i32, ptr %59, align 4
  %830 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %829)
  %831 = icmp ult i64 %830, 20
  br i1 %831, label %894, label %895

832:                                              ; preds = %837
  %833 = sitofp i32 %822 to double
  store double %833, ptr %44, align 8
  %834 = load i32, ptr %59, align 4
  %835 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %834)
  %836 = icmp ult i64 %835, 20
  br i1 %836, label %851, label %852

837:                                              ; preds = %819
  br label %832

838:                                              ; preds = %819
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

839:                                              ; preds = %851
  %840 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %835
  %841 = load double, ptr %45, align 8
  %842 = load double, ptr %44, align 8
  %843 = fmul double 0x4170000000000000, %842
  %844 = fsub double %841, %843
  %845 = fptosi double %844 to i32
  %846 = sitofp i32 %845 to double
  %847 = fsub double %844, %846
  %848 = fcmp olt double %847, 1.000000e+00
  %849 = fcmp ogt double %847, -1.000000e+00
  %850 = and i1 %848, %849
  br i1 %850, label %857, label %858

851:                                              ; preds = %832
  br label %839

852:                                              ; preds = %832
  call fastcc void @builtin.panicOutOfBounds(i64 %835, i64 20)
  unreachable

853:                                              ; preds = %857
  store i32 %845, ptr %840, align 4
  %854 = load i32, ptr %59, align 4
  %855 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %854, i32 1)
  %856 = extractvalue { i32, i1 } %855, 1
  br i1 %856, label %859, label %860

857:                                              ; preds = %839
  br label %853

858:                                              ; preds = %839
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

859:                                              ; preds = %853
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

860:                                              ; preds = %853
  %861 = extractvalue { i32, i1 } %855, 0
  store i32 %861, ptr %59, align 4
  %862 = load i32, ptr %47, align 4
  %863 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %862, i32 24)
  %864 = extractvalue { i32, i1 } %863, 1
  br i1 %864, label %865, label %866

865:                                              ; preds = %860
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

866:                                              ; preds = %860
  %867 = extractvalue { i32, i1 } %863, 0
  store i32 %867, ptr %47, align 4
  %868 = load i32, ptr %59, align 4
  %869 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %868)
  %870 = icmp ult i64 %869, 20
  br i1 %870, label %880, label %881

871:                                              ; preds = %880
  %872 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %869
  %873 = load double, ptr %44, align 8
  %874 = fptosi double %873 to i32
  %875 = sitofp i32 %874 to double
  %876 = fsub double %873, %875
  %877 = fcmp olt double %876, 1.000000e+00
  %878 = fcmp ogt double %876, -1.000000e+00
  %879 = and i1 %877, %878
  br i1 %879, label %883, label %884

880:                                              ; preds = %866
  br label %871

881:                                              ; preds = %866
  call fastcc void @builtin.panicOutOfBounds(i64 %869, i64 20)
  unreachable

882:                                              ; preds = %883
  store i32 %874, ptr %872, align 4
  br label %818

883:                                              ; preds = %871
  br label %882

884:                                              ; preds = %871
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

885:                                              ; preds = %894
  %886 = getelementptr inbounds [20 x i32], ptr %52, i64 0, i64 %830
  %887 = load double, ptr %45, align 8
  %888 = fptosi double %887 to i32
  %889 = sitofp i32 %888 to double
  %890 = fsub double %887, %889
  %891 = fcmp olt double %890, 1.000000e+00
  %892 = fcmp ogt double %890, -1.000000e+00
  %893 = and i1 %891, %892
  br i1 %893, label %897, label %898

894:                                              ; preds = %828
  br label %885

895:                                              ; preds = %828
  call fastcc void @builtin.panicOutOfBounds(i64 %830, i64 20)
  unreachable

896:                                              ; preds = %897
  store i32 %888, ptr %886, align 4
  br label %818

897:                                              ; preds = %885
  br label %896

898:                                              ; preds = %885
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

899:                                              ; preds = %909
  %900 = load i32, ptr %59, align 4
  store i32 %900, ptr %51, align 4
  br label %934

901:                                              ; preds = %904, %764
  %902 = load i32, ptr %51, align 4
  %903 = icmp sge i32 %902, 0
  br i1 %903, label %905, label %909

904:                                              ; preds = %931
  br label %901

905:                                              ; preds = %901
  %906 = load i32, ptr %51, align 4
  %907 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %906)
  %908 = icmp ult i64 %907, 20
  br i1 %908, label %916, label %917

909:                                              ; preds = %901
  br label %899

910:                                              ; preds = %916
  %911 = getelementptr inbounds [20 x double], ptr %41, i64 0, i64 %907
  %912 = load double, ptr %44, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %29, ptr align 4 %52, i64 80, i1 false)
  %913 = load i32, ptr %51, align 4
  %914 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %913)
  %915 = icmp ult i64 %914, 20
  br i1 %915, label %928, label %929

916:                                              ; preds = %905
  br label %910

917:                                              ; preds = %905
  call fastcc void @builtin.panicOutOfBounds(i64 %907, i64 20)
  unreachable

918:                                              ; preds = %928
  %919 = getelementptr inbounds [20 x i32], ptr %29, i64 0, i64 %914
  %920 = load i32, ptr %919, align 4
  %921 = sitofp i32 %920 to double
  %922 = fmul double %912, %921
  store double %922, ptr %911, align 8
  %923 = load double, ptr %44, align 8
  %924 = fmul double %923, 0x3E70000000000000
  store double %924, ptr %44, align 8
  %925 = load i32, ptr %51, align 4
  %926 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %925, i32 1)
  %927 = extractvalue { i32, i1 } %926, 1
  br i1 %927, label %930, label %931

928:                                              ; preds = %910
  br label %918

929:                                              ; preds = %910
  call fastcc void @builtin.panicOutOfBounds(i64 %914, i64 20)
  unreachable

930:                                              ; preds = %918
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

931:                                              ; preds = %918
  %932 = extractvalue { i32, i1 } %926, 0
  store i32 %932, ptr %51, align 4
  br label %904

933:                                              ; preds = %939
  switch i64 %6, label %1015 [
    i64 0, label %1016
    i64 3, label %1057
    i64 1, label %1294
    i64 2, label %1294
  ]

934:                                              ; preds = %937, %899
  %935 = load i32, ptr %51, align 4
  %936 = icmp sge i32 %935, 0
  br i1 %936, label %938, label %939

937:                                              ; preds = %1010
  br label %934

938:                                              ; preds = %934
  store double 0.000000e+00, ptr %44, align 8
  store i32 0, ptr %49, align 4
  br label %945

939:                                              ; preds = %934
  br label %933

940:                                              ; preds = %968
  %941 = load i32, ptr %59, align 4
  %942 = load i32, ptr %51, align 4
  %943 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %941, i32 %942)
  %944 = extractvalue { i32, i1 } %943, 1
  br i1 %944, label %996, label %997

945:                                              ; preds = %949, %938
  %946 = load i32, ptr %49, align 4
  %947 = load i32, ptr %56, align 4
  %948 = icmp sle i32 %946, %947
  br i1 %948, label %952, label %958

949:                                              ; preds = %994
  br label %945

950:                                              ; preds = %960, %958
  %951 = phi i1 [ %962, %960 ], [ false, %958 ]
  br i1 %951, label %963, label %968

952:                                              ; preds = %945
  %953 = load i32, ptr %49, align 4
  %954 = load i32, ptr %59, align 4
  %955 = load i32, ptr %51, align 4
  %956 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %954, i32 %955)
  %957 = extractvalue { i32, i1 } %956, 1
  br i1 %957, label %959, label %960

958:                                              ; preds = %945
  br label %950

959:                                              ; preds = %952
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

960:                                              ; preds = %952
  %961 = extractvalue { i32, i1 } %956, 0
  %962 = icmp sle i32 %953, %961
  br label %950

963:                                              ; preds = %950
  %964 = load double, ptr %44, align 8
  %965 = load i32, ptr %49, align 4
  %966 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %965)
  %967 = icmp ult i64 %966, 8
  br i1 %967, label %976, label %977

968:                                              ; preds = %950
  br label %940

969:                                              ; preds = %976
  %970 = getelementptr inbounds [8 x double], ptr @184, i64 0, i64 %966
  %971 = load double, ptr %970, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %41, i64 160, i1 false)
  %972 = load i32, ptr %51, align 4
  %973 = load i32, ptr %49, align 4
  %974 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %972, i32 %973)
  %975 = extractvalue { i32, i1 } %974, 1
  br i1 %975, label %978, label %979

976:                                              ; preds = %963
  br label %969

977:                                              ; preds = %963
  call fastcc void @builtin.panicOutOfBounds(i64 %966, i64 8)
  unreachable

978:                                              ; preds = %969
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

979:                                              ; preds = %969
  %980 = extractvalue { i32, i1 } %974, 0
  %981 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %980)
  %982 = icmp ult i64 %981, 20
  br i1 %982, label %991, label %992

983:                                              ; preds = %991
  %984 = getelementptr inbounds [20 x double], ptr %28, i64 0, i64 %981
  %985 = load double, ptr %984, align 8
  %986 = fmul double %971, %985
  %987 = fadd double %964, %986
  store double %987, ptr %44, align 8
  %988 = load i32, ptr %49, align 4
  %989 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %988, i32 1)
  %990 = extractvalue { i32, i1 } %989, 1
  br i1 %990, label %993, label %994

991:                                              ; preds = %979
  br label %983

992:                                              ; preds = %979
  call fastcc void @builtin.panicOutOfBounds(i64 %981, i64 20)
  unreachable

993:                                              ; preds = %983
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

994:                                              ; preds = %983
  %995 = extractvalue { i32, i1 } %989, 0
  store i32 %995, ptr %49, align 4
  br label %949

996:                                              ; preds = %940
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

997:                                              ; preds = %940
  %998 = extractvalue { i32, i1 } %943, 0
  %999 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %998)
  %1000 = icmp ult i64 %999, 20
  br i1 %1000, label %1007, label %1008

1001:                                             ; preds = %1007
  %1002 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 %999
  %1003 = load double, ptr %44, align 8
  store double %1003, ptr %1002, align 8
  %1004 = load i32, ptr %51, align 4
  %1005 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1004, i32 1)
  %1006 = extractvalue { i32, i1 } %1005, 1
  br i1 %1006, label %1009, label %1010

1007:                                             ; preds = %997
  br label %1001

1008:                                             ; preds = %997
  call fastcc void @builtin.panicOutOfBounds(i64 %999, i64 20)
  unreachable

1009:                                             ; preds = %1001
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1010:                                             ; preds = %1001
  %1011 = extractvalue { i32, i1 } %1005, 0
  store i32 %1011, ptr %51, align 4
  br label %937

1012:                                             ; preds = %1374, %1230, %1051
  %1013 = load i32, ptr %53, align 4
  %1014 = and i32 %1013, 7
  ret i32 %1014

1015:                                             ; preds = %933
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.unreach__anon_6716, i64 24, ptr align 8 null, ptr nonnull readonly align 8 @183)
  unreachable

1016:                                             ; preds = %933
  store double 0.000000e+00, ptr %44, align 8
  %1017 = load i32, ptr %59, align 4
  store i32 %1017, ptr %51, align 4
  br label %1022

1018:                                             ; preds = %1031
  store { ptr, i64 } %63, ptr %26, align 8
  %1019 = load { ptr, i64 }, ptr %26, align 8
  %1020 = extractvalue { ptr, i64 } %1019, 1
  %1021 = icmp ult i64 0, %1020
  br i1 %1021, label %1049, label %1050

1022:                                             ; preds = %1025, %1016
  %1023 = load i32, ptr %51, align 4
  %1024 = icmp sge i32 %1023, 0
  br i1 %1024, label %1026, label %1031

1025:                                             ; preds = %1042
  br label %1022

1026:                                             ; preds = %1022
  %1027 = load double, ptr %44, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %27, ptr align 8 %42, i64 160, i1 false)
  %1028 = load i32, ptr %51, align 4
  %1029 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1028)
  %1030 = icmp ult i64 %1029, 20
  br i1 %1030, label %1039, label %1040

1031:                                             ; preds = %1022
  br label %1018

1032:                                             ; preds = %1039
  %1033 = getelementptr inbounds [20 x double], ptr %27, i64 0, i64 %1029
  %1034 = load double, ptr %1033, align 8
  %1035 = fadd double %1027, %1034
  store double %1035, ptr %44, align 8
  %1036 = load i32, ptr %51, align 4
  %1037 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1036, i32 1)
  %1038 = extractvalue { i32, i1 } %1037, 1
  br i1 %1038, label %1041, label %1042

1039:                                             ; preds = %1026
  br label %1032

1040:                                             ; preds = %1026
  call fastcc void @builtin.panicOutOfBounds(i64 %1029, i64 20)
  unreachable

1041:                                             ; preds = %1032
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1042:                                             ; preds = %1032
  %1043 = extractvalue { i32, i1 } %1037, 0
  store i32 %1043, ptr %51, align 4
  br label %1025

1044:                                             ; preds = %1049
  %1045 = extractvalue { ptr, i64 } %1019, 0
  %1046 = getelementptr inbounds double, ptr %1045, i64 0
  %1047 = load i32, ptr %46, align 4
  %1048 = icmp eq i32 %1047, 0
  br i1 %1048, label %1052, label %1054

1049:                                             ; preds = %1018
  br label %1044

1050:                                             ; preds = %1018
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %1020)
  unreachable

1051:                                             ; preds = %1054, %1052
  br label %1012

1052:                                             ; preds = %1044
  %1053 = load double, ptr %44, align 8
  store double %1053, ptr %1046, align 8
  br label %1051

1054:                                             ; preds = %1044
  %1055 = load double, ptr %44, align 8
  %1056 = fneg double %1055
  store double %1056, ptr %1046, align 8
  br label %1051

1057:                                             ; preds = %933
  %1058 = load i32, ptr %59, align 4
  store i32 %1058, ptr %51, align 4
  br label %1061

1059:                                             ; preds = %1069
  %1060 = load i32, ptr %59, align 4
  store i32 %1060, ptr %51, align 4
  br label %1134

1061:                                             ; preds = %1064, %1057
  %1062 = load i32, ptr %51, align 4
  %1063 = icmp sgt i32 %1062, 0
  br i1 %1063, label %1065, label %1069

1064:                                             ; preds = %1130
  br label %1061

1065:                                             ; preds = %1061
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %25, ptr align 8 %42, i64 160, i1 false)
  %1066 = load i32, ptr %51, align 4
  %1067 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1066, i32 1)
  %1068 = extractvalue { i32, i1 } %1067, 1
  br i1 %1068, label %1070, label %1071

1069:                                             ; preds = %1061
  br label %1059

1070:                                             ; preds = %1065
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1071:                                             ; preds = %1065
  %1072 = extractvalue { i32, i1 } %1067, 0
  %1073 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1072)
  %1074 = icmp ult i64 %1073, 20
  br i1 %1074, label %1081, label %1082

1075:                                             ; preds = %1081
  %1076 = getelementptr inbounds [20 x double], ptr %25, i64 0, i64 %1073
  %1077 = load double, ptr %1076, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %24, ptr align 8 %42, i64 160, i1 false)
  %1078 = load i32, ptr %51, align 4
  %1079 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1078)
  %1080 = icmp ult i64 %1079, 20
  br i1 %1080, label %1090, label %1091

1081:                                             ; preds = %1071
  br label %1075

1082:                                             ; preds = %1071
  call fastcc void @builtin.panicOutOfBounds(i64 %1073, i64 20)
  unreachable

1083:                                             ; preds = %1090
  %1084 = getelementptr inbounds [20 x double], ptr %24, i64 0, i64 %1079
  %1085 = load double, ptr %1084, align 8
  %1086 = fadd double %1077, %1085
  store double %1086, ptr %44, align 8
  %1087 = load i32, ptr %51, align 4
  %1088 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1087)
  %1089 = icmp ult i64 %1088, 20
  br i1 %1089, label %1098, label %1099

1090:                                             ; preds = %1075
  br label %1083

1091:                                             ; preds = %1075
  call fastcc void @builtin.panicOutOfBounds(i64 %1079, i64 20)
  unreachable

1092:                                             ; preds = %1098
  %1093 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 %1088
  %1094 = load double, ptr %1093, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %23, ptr align 8 %42, i64 160, i1 false)
  %1095 = load i32, ptr %51, align 4
  %1096 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1095, i32 1)
  %1097 = extractvalue { i32, i1 } %1096, 1
  br i1 %1097, label %1100, label %1101

1098:                                             ; preds = %1083
  br label %1092

1099:                                             ; preds = %1083
  call fastcc void @builtin.panicOutOfBounds(i64 %1088, i64 20)
  unreachable

1100:                                             ; preds = %1092
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1101:                                             ; preds = %1092
  %1102 = extractvalue { i32, i1 } %1096, 0
  %1103 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1102)
  %1104 = icmp ult i64 %1103, 20
  br i1 %1104, label %1114, label %1115

1105:                                             ; preds = %1114
  %1106 = getelementptr inbounds [20 x double], ptr %23, i64 0, i64 %1103
  %1107 = load double, ptr %1106, align 8
  %1108 = load double, ptr %44, align 8
  %1109 = fsub double %1107, %1108
  %1110 = fadd double %1094, %1109
  store double %1110, ptr %1093, align 8
  %1111 = load i32, ptr %51, align 4
  %1112 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1111, i32 1)
  %1113 = extractvalue { i32, i1 } %1112, 1
  br i1 %1113, label %1116, label %1117

1114:                                             ; preds = %1101
  br label %1105

1115:                                             ; preds = %1101
  call fastcc void @builtin.panicOutOfBounds(i64 %1103, i64 20)
  unreachable

1116:                                             ; preds = %1105
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1117:                                             ; preds = %1105
  %1118 = extractvalue { i32, i1 } %1112, 0
  %1119 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1118)
  %1120 = icmp ult i64 %1119, 20
  br i1 %1120, label %1127, label %1128

1121:                                             ; preds = %1127
  %1122 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 %1119
  %1123 = load double, ptr %44, align 8
  store double %1123, ptr %1122, align 8
  %1124 = load i32, ptr %51, align 4
  %1125 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1124, i32 1)
  %1126 = extractvalue { i32, i1 } %1125, 1
  br i1 %1126, label %1129, label %1130

1127:                                             ; preds = %1117
  br label %1121

1128:                                             ; preds = %1117
  call fastcc void @builtin.panicOutOfBounds(i64 %1119, i64 20)
  unreachable

1129:                                             ; preds = %1121
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1130:                                             ; preds = %1121
  %1131 = extractvalue { i32, i1 } %1125, 0
  store i32 %1131, ptr %51, align 4
  br label %1064

1132:                                             ; preds = %1142
  store double 0.000000e+00, ptr %44, align 8
  %1133 = load i32, ptr %59, align 4
  store i32 %1133, ptr %51, align 4
  br label %1208

1134:                                             ; preds = %1137, %1059
  %1135 = load i32, ptr %51, align 4
  %1136 = icmp sgt i32 %1135, 1
  br i1 %1136, label %1138, label %1142

1137:                                             ; preds = %1203
  br label %1134

1138:                                             ; preds = %1134
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %22, ptr align 8 %42, i64 160, i1 false)
  %1139 = load i32, ptr %51, align 4
  %1140 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1139, i32 1)
  %1141 = extractvalue { i32, i1 } %1140, 1
  br i1 %1141, label %1143, label %1144

1142:                                             ; preds = %1134
  br label %1132

1143:                                             ; preds = %1138
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1144:                                             ; preds = %1138
  %1145 = extractvalue { i32, i1 } %1140, 0
  %1146 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1145)
  %1147 = icmp ult i64 %1146, 20
  br i1 %1147, label %1154, label %1155

1148:                                             ; preds = %1154
  %1149 = getelementptr inbounds [20 x double], ptr %22, i64 0, i64 %1146
  %1150 = load double, ptr %1149, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %21, ptr align 8 %42, i64 160, i1 false)
  %1151 = load i32, ptr %51, align 4
  %1152 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1151)
  %1153 = icmp ult i64 %1152, 20
  br i1 %1153, label %1163, label %1164

1154:                                             ; preds = %1144
  br label %1148

1155:                                             ; preds = %1144
  call fastcc void @builtin.panicOutOfBounds(i64 %1146, i64 20)
  unreachable

1156:                                             ; preds = %1163
  %1157 = getelementptr inbounds [20 x double], ptr %21, i64 0, i64 %1152
  %1158 = load double, ptr %1157, align 8
  %1159 = fadd double %1150, %1158
  store double %1159, ptr %44, align 8
  %1160 = load i32, ptr %51, align 4
  %1161 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1160)
  %1162 = icmp ult i64 %1161, 20
  br i1 %1162, label %1171, label %1172

1163:                                             ; preds = %1148
  br label %1156

1164:                                             ; preds = %1148
  call fastcc void @builtin.panicOutOfBounds(i64 %1152, i64 20)
  unreachable

1165:                                             ; preds = %1171
  %1166 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 %1161
  %1167 = load double, ptr %1166, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %20, ptr align 8 %42, i64 160, i1 false)
  %1168 = load i32, ptr %51, align 4
  %1169 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1168, i32 1)
  %1170 = extractvalue { i32, i1 } %1169, 1
  br i1 %1170, label %1173, label %1174

1171:                                             ; preds = %1156
  br label %1165

1172:                                             ; preds = %1156
  call fastcc void @builtin.panicOutOfBounds(i64 %1161, i64 20)
  unreachable

1173:                                             ; preds = %1165
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1174:                                             ; preds = %1165
  %1175 = extractvalue { i32, i1 } %1169, 0
  %1176 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1175)
  %1177 = icmp ult i64 %1176, 20
  br i1 %1177, label %1187, label %1188

1178:                                             ; preds = %1187
  %1179 = getelementptr inbounds [20 x double], ptr %20, i64 0, i64 %1176
  %1180 = load double, ptr %1179, align 8
  %1181 = load double, ptr %44, align 8
  %1182 = fsub double %1180, %1181
  %1183 = fadd double %1167, %1182
  store double %1183, ptr %1166, align 8
  %1184 = load i32, ptr %51, align 4
  %1185 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1184, i32 1)
  %1186 = extractvalue { i32, i1 } %1185, 1
  br i1 %1186, label %1189, label %1190

1187:                                             ; preds = %1174
  br label %1178

1188:                                             ; preds = %1174
  call fastcc void @builtin.panicOutOfBounds(i64 %1176, i64 20)
  unreachable

1189:                                             ; preds = %1178
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1190:                                             ; preds = %1178
  %1191 = extractvalue { i32, i1 } %1185, 0
  %1192 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1191)
  %1193 = icmp ult i64 %1192, 20
  br i1 %1193, label %1200, label %1201

1194:                                             ; preds = %1200
  %1195 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 %1192
  %1196 = load double, ptr %44, align 8
  store double %1196, ptr %1195, align 8
  %1197 = load i32, ptr %51, align 4
  %1198 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1197, i32 1)
  %1199 = extractvalue { i32, i1 } %1198, 1
  br i1 %1199, label %1202, label %1203

1200:                                             ; preds = %1190
  br label %1194

1201:                                             ; preds = %1190
  call fastcc void @builtin.panicOutOfBounds(i64 %1192, i64 20)
  unreachable

1202:                                             ; preds = %1194
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1203:                                             ; preds = %1194
  %1204 = extractvalue { i32, i1 } %1198, 0
  store i32 %1204, ptr %51, align 4
  br label %1137

1205:                                             ; preds = %1217
  %1206 = load i32, ptr %46, align 4
  %1207 = icmp eq i32 %1206, 0
  br i1 %1207, label %1231, label %1235

1208:                                             ; preds = %1211, %1132
  %1209 = load i32, ptr %51, align 4
  %1210 = icmp sge i32 %1209, 2
  br i1 %1210, label %1212, label %1217

1211:                                             ; preds = %1228
  br label %1208

1212:                                             ; preds = %1208
  %1213 = load double, ptr %44, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %19, ptr align 8 %42, i64 160, i1 false)
  %1214 = load i32, ptr %51, align 4
  %1215 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1214)
  %1216 = icmp ult i64 %1215, 20
  br i1 %1216, label %1225, label %1226

1217:                                             ; preds = %1208
  br label %1205

1218:                                             ; preds = %1225
  %1219 = getelementptr inbounds [20 x double], ptr %19, i64 0, i64 %1215
  %1220 = load double, ptr %1219, align 8
  %1221 = fadd double %1213, %1220
  store double %1221, ptr %44, align 8
  %1222 = load i32, ptr %51, align 4
  %1223 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1222, i32 1)
  %1224 = extractvalue { i32, i1 } %1223, 1
  br i1 %1224, label %1227, label %1228

1225:                                             ; preds = %1212
  br label %1218

1226:                                             ; preds = %1212
  call fastcc void @builtin.panicOutOfBounds(i64 %1215, i64 20)
  unreachable

1227:                                             ; preds = %1218
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1228:                                             ; preds = %1218
  %1229 = extractvalue { i32, i1 } %1223, 0
  store i32 %1229, ptr %51, align 4
  br label %1211

1230:                                             ; preds = %1287, %1259
  br label %1012

1231:                                             ; preds = %1205
  store { ptr, i64 } %63, ptr %18, align 8
  %1232 = load { ptr, i64 }, ptr %18, align 8
  %1233 = extractvalue { ptr, i64 } %1232, 1
  %1234 = icmp ult i64 0, %1233
  br i1 %1234, label %1247, label %1248

1235:                                             ; preds = %1205
  store { ptr, i64 } %63, ptr %15, align 8
  %1236 = load { ptr, i64 }, ptr %15, align 8
  %1237 = extractvalue { ptr, i64 } %1236, 1
  %1238 = icmp ult i64 0, %1237
  br i1 %1238, label %1274, label %1275

1239:                                             ; preds = %1247
  %1240 = extractvalue { ptr, i64 } %1232, 0
  %1241 = getelementptr inbounds double, ptr %1240, i64 0
  %1242 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 0
  %1243 = load double, ptr %1242, align 8
  store double %1243, ptr %1241, align 8
  store { ptr, i64 } %63, ptr %17, align 8
  %1244 = load { ptr, i64 }, ptr %17, align 8
  %1245 = extractvalue { ptr, i64 } %1244, 1
  %1246 = icmp ult i64 1, %1245
  br i1 %1246, label %1257, label %1258

1247:                                             ; preds = %1231
  br label %1239

1248:                                             ; preds = %1231
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %1233)
  unreachable

1249:                                             ; preds = %1257
  %1250 = extractvalue { ptr, i64 } %1244, 0
  %1251 = getelementptr inbounds double, ptr %1250, i64 1
  %1252 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 1
  %1253 = load double, ptr %1252, align 8
  store double %1253, ptr %1251, align 8
  store { ptr, i64 } %63, ptr %16, align 8
  %1254 = load { ptr, i64 }, ptr %16, align 8
  %1255 = extractvalue { ptr, i64 } %1254, 1
  %1256 = icmp ult i64 2, %1255
  br i1 %1256, label %1263, label %1264

1257:                                             ; preds = %1239
  br label %1249

1258:                                             ; preds = %1239
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %1245)
  unreachable

1259:                                             ; preds = %1263
  %1260 = extractvalue { ptr, i64 } %1254, 0
  %1261 = getelementptr inbounds double, ptr %1260, i64 2
  %1262 = load double, ptr %44, align 8
  store double %1262, ptr %1261, align 8
  br label %1230

1263:                                             ; preds = %1249
  br label %1259

1264:                                             ; preds = %1249
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %1255)
  unreachable

1265:                                             ; preds = %1274
  %1266 = extractvalue { ptr, i64 } %1236, 0
  %1267 = getelementptr inbounds double, ptr %1266, i64 0
  %1268 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 0
  %1269 = load double, ptr %1268, align 8
  %1270 = fneg double %1269
  store double %1270, ptr %1267, align 8
  store { ptr, i64 } %63, ptr %14, align 8
  %1271 = load { ptr, i64 }, ptr %14, align 8
  %1272 = extractvalue { ptr, i64 } %1271, 1
  %1273 = icmp ult i64 1, %1272
  br i1 %1273, label %1285, label %1286

1274:                                             ; preds = %1235
  br label %1265

1275:                                             ; preds = %1235
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %1237)
  unreachable

1276:                                             ; preds = %1285
  %1277 = extractvalue { ptr, i64 } %1271, 0
  %1278 = getelementptr inbounds double, ptr %1277, i64 1
  %1279 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 1
  %1280 = load double, ptr %1279, align 8
  %1281 = fneg double %1280
  store double %1281, ptr %1278, align 8
  store { ptr, i64 } %63, ptr %13, align 8
  %1282 = load { ptr, i64 }, ptr %13, align 8
  %1283 = extractvalue { ptr, i64 } %1282, 1
  %1284 = icmp ult i64 2, %1283
  br i1 %1284, label %1292, label %1293

1285:                                             ; preds = %1265
  br label %1276

1286:                                             ; preds = %1265
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %1272)
  unreachable

1287:                                             ; preds = %1292
  %1288 = extractvalue { ptr, i64 } %1282, 0
  %1289 = getelementptr inbounds double, ptr %1288, i64 2
  %1290 = load double, ptr %44, align 8
  %1291 = fneg double %1290
  store double %1291, ptr %1289, align 8
  br label %1230

1292:                                             ; preds = %1276
  br label %1287

1293:                                             ; preds = %1276
  call fastcc void @builtin.panicOutOfBounds(i64 2, i64 %1283)
  unreachable

1294:                                             ; preds = %933, %933
  store double 0.000000e+00, ptr %44, align 8
  %1295 = load i32, ptr %59, align 4
  store i32 %1295, ptr %51, align 4
  br label %1301

1296:                                             ; preds = %1310
  %1297 = load double, ptr %44, align 8
  store double %1297, ptr %44, align 8
  store { ptr, i64 } %63, ptr %11, align 8
  %1298 = load { ptr, i64 }, ptr %11, align 8
  %1299 = extractvalue { ptr, i64 } %1298, 1
  %1300 = icmp ult i64 0, %1299
  br i1 %1300, label %1328, label %1329

1301:                                             ; preds = %1304, %1294
  %1302 = load i32, ptr %51, align 4
  %1303 = icmp sge i32 %1302, 0
  br i1 %1303, label %1305, label %1310

1304:                                             ; preds = %1321
  br label %1301

1305:                                             ; preds = %1301
  %1306 = load double, ptr %44, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %42, i64 160, i1 false)
  %1307 = load i32, ptr %51, align 4
  %1308 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1307)
  %1309 = icmp ult i64 %1308, 20
  br i1 %1309, label %1318, label %1319

1310:                                             ; preds = %1301
  br label %1296

1311:                                             ; preds = %1318
  %1312 = getelementptr inbounds [20 x double], ptr %12, i64 0, i64 %1308
  %1313 = load double, ptr %1312, align 8
  %1314 = fadd double %1306, %1313
  store double %1314, ptr %44, align 8
  %1315 = load i32, ptr %51, align 4
  %1316 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1315, i32 1)
  %1317 = extractvalue { i32, i1 } %1316, 1
  br i1 %1317, label %1320, label %1321

1318:                                             ; preds = %1305
  br label %1311

1319:                                             ; preds = %1305
  call fastcc void @builtin.panicOutOfBounds(i64 %1308, i64 20)
  unreachable

1320:                                             ; preds = %1311
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1321:                                             ; preds = %1311
  %1322 = extractvalue { i32, i1 } %1316, 0
  store i32 %1322, ptr %51, align 4
  br label %1304

1323:                                             ; preds = %1328
  %1324 = extractvalue { ptr, i64 } %1298, 0
  %1325 = getelementptr inbounds double, ptr %1324, i64 0
  %1326 = load i32, ptr %46, align 4
  %1327 = icmp eq i32 %1326, 0
  br i1 %1327, label %1335, label %1337

1328:                                             ; preds = %1296
  br label %1323

1329:                                             ; preds = %1296
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %1299)
  unreachable

1330:                                             ; preds = %1337, %1335
  %1331 = getelementptr inbounds [20 x double], ptr %42, i64 0, i64 0
  %1332 = load double, ptr %1331, align 8
  %1333 = load double, ptr %44, align 8
  %1334 = fsub double %1332, %1333
  store double %1334, ptr %44, align 8
  store i32 1, ptr %51, align 4
  br label %1344

1335:                                             ; preds = %1323
  %1336 = load double, ptr %44, align 8
  store double %1336, ptr %1325, align 8
  br label %1330

1337:                                             ; preds = %1323
  %1338 = load double, ptr %44, align 8
  %1339 = fneg double %1338
  store double %1339, ptr %1325, align 8
  br label %1330

1340:                                             ; preds = %1354
  store { ptr, i64 } %63, ptr %9, align 8
  %1341 = load { ptr, i64 }, ptr %9, align 8
  %1342 = extractvalue { ptr, i64 } %1341, 1
  %1343 = icmp ult i64 1, %1342
  br i1 %1343, label %1372, label %1373

1344:                                             ; preds = %1348, %1330
  %1345 = load i32, ptr %51, align 4
  %1346 = load i32, ptr %59, align 4
  %1347 = icmp sle i32 %1345, %1346
  br i1 %1347, label %1349, label %1354

1348:                                             ; preds = %1365
  br label %1344

1349:                                             ; preds = %1344
  %1350 = load double, ptr %44, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %42, i64 160, i1 false)
  %1351 = load i32, ptr %51, align 4
  %1352 = call fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %1351)
  %1353 = icmp ult i64 %1352, 20
  br i1 %1353, label %1362, label %1363

1354:                                             ; preds = %1344
  br label %1340

1355:                                             ; preds = %1362
  %1356 = getelementptr inbounds [20 x double], ptr %10, i64 0, i64 %1352
  %1357 = load double, ptr %1356, align 8
  %1358 = fadd double %1350, %1357
  store double %1358, ptr %44, align 8
  %1359 = load i32, ptr %51, align 4
  %1360 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1359, i32 1)
  %1361 = extractvalue { i32, i1 } %1360, 1
  br i1 %1361, label %1364, label %1365

1362:                                             ; preds = %1349
  br label %1355

1363:                                             ; preds = %1349
  call fastcc void @builtin.panicOutOfBounds(i64 %1352, i64 20)
  unreachable

1364:                                             ; preds = %1355
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1365:                                             ; preds = %1355
  %1366 = extractvalue { i32, i1 } %1360, 0
  store i32 %1366, ptr %51, align 4
  br label %1348

1367:                                             ; preds = %1372
  %1368 = extractvalue { ptr, i64 } %1341, 0
  %1369 = getelementptr inbounds double, ptr %1368, i64 1
  %1370 = load i32, ptr %46, align 4
  %1371 = icmp eq i32 %1370, 0
  br i1 %1371, label %1375, label %1377

1372:                                             ; preds = %1340
  br label %1367

1373:                                             ; preds = %1340
  call fastcc void @builtin.panicOutOfBounds(i64 1, i64 %1342)
  unreachable

1374:                                             ; preds = %1377, %1375
  br label %1012

1375:                                             ; preds = %1367
  %1376 = load double, ptr %44, align 8
  store double %1376, ptr %1369, align 8
  br label %1374

1377:                                             ; preds = %1367
  %1378 = load double, ptr %44, align 8
  %1379 = fneg double %1378
  store double %1379, ptr %1369, align 8
  br label %1374
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.rem_pio2_large.U__anon_6715(i32 %0) unnamed_addr #0 {
  %2 = icmp sge i32 %0, 0
  br i1 %2, label %5, label %6

3:                                                ; preds = %5
  %4 = sext i32 %0 to i64
  ret i64 %4

5:                                                ; preds = %1
  br label %3

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @204)
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @cos(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca double, align 8
  %4 = alloca [2 x double], align 8
  %5 = alloca i64, align 8
  %6 = bitcast double %0 to i64
  %7 = lshr i64 %6, 32
  store i64 %7, ptr %5, align 8
  %8 = load i64, ptr %5, align 8
  %9 = and i64 %8, 2147483647
  store i64 %9, ptr %5, align 8
  %10 = load i64, ptr %5, align 8
  %11 = icmp ule i64 %10, 1072243195
  br i1 %11, label %15, label %18

12:                                               ; preds = %18
  %13 = load i64, ptr %5, align 8
  %14 = icmp uge i64 %13, 2146435072
  br i1 %14, label %27, label %29

15:                                               ; preds = %1
  %16 = load i64, ptr %5, align 8
  %17 = icmp ult i64 %16, 1044816030
  br i1 %17, label %21, label %23

18:                                               ; preds = %1
  br label %12

19:                                               ; preds = %23
  %20 = call fastcc double @compiler_rt.trig.__cos(double %0, double 0.000000e+00)
  ret double %20

21:                                               ; preds = %15
  %22 = fadd double %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3744(double %22)
  ret double 1.000000e+00

23:                                               ; preds = %15
  br label %19

24:                                               ; preds = %29
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %25 = call fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %4)
  %26 = and i32 %25, 3
  switch i32 %26, label %32 [
    i32 0, label %38
    i32 1, label %44
    i32 2, label %51
  ]

27:                                               ; preds = %12
  %28 = fsub double %0, %0
  ret double %28

29:                                               ; preds = %12
  br label %24

30:                                               ; preds = %51, %44, %38, %32
  %31 = load double, ptr %3, align 8
  ret double %31

32:                                               ; preds = %24
  %33 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %34 = load double, ptr %33, align 8
  %35 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %36 = load double, ptr %35, align 8
  %37 = call fastcc double @compiler_rt.trig.__sin(double %34, double %36, i32 1)
  store double %37, ptr %3, align 8
  br label %30

38:                                               ; preds = %24
  %39 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %40 = load double, ptr %39, align 8
  %41 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %42 = load double, ptr %41, align 8
  %43 = call fastcc double @compiler_rt.trig.__cos(double %40, double %42)
  store double %43, ptr %3, align 8
  br label %30

44:                                               ; preds = %24
  %45 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %46 = load double, ptr %45, align 8
  %47 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %48 = load double, ptr %47, align 8
  %49 = call fastcc double @compiler_rt.trig.__sin(double %46, double %48, i32 1)
  %50 = fneg double %49
  store double %50, ptr %3, align 8
  br label %30

51:                                               ; preds = %24
  %52 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %53 = load double, ptr %52, align 8
  %54 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %55 = load double, ptr %54, align 8
  %56 = call fastcc double @compiler_rt.trig.__cos(double %53, double %55)
  %57 = fneg double %56
  store double %57, ptr %3, align 8
  br label %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.trig.__cos(double %0, double %1) unnamed_addr #0 {
  %3 = fmul double %0, %0
  %4 = fmul double %3, %3
  %5 = fmul double %3, 0x3EFA01A019CB1590
  %6 = fadd double 0xBF56C16C16C15177, %5
  %7 = fmul double %3, %6
  %8 = fadd double 0x3FA555555555554C, %7
  %9 = fmul double %3, %8
  %10 = fmul double %4, %4
  %11 = fmul double %3, 0xBDA8FAE9BE8838D4
  %12 = fadd double 0x3E21EE9EBDB4B1C4, %11
  %13 = fmul double %3, %12
  %14 = fadd double 0xBE927E4F809C52AD, %13
  %15 = fmul double %10, %14
  %16 = fadd double %9, %15
  %17 = fmul double 5.000000e-01, %3
  %18 = fsub double 1.000000e+00, %17
  %19 = fsub double 1.000000e+00, %18
  %20 = fsub double %19, %17
  %21 = fmul double %3, %16
  %22 = fmul double %0, %1
  %23 = fsub double %21, %22
  %24 = fadd double %20, %23
  %25 = fadd double %18, %24
  ret double %25
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [3 x double], align 8
  %9 = alloca [3 x double], align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = alloca ptr, align 8
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca ptr, align 8
  %26 = alloca ptr, align 8
  %27 = alloca ptr, align 8
  %28 = alloca i64, align 8
  %29 = alloca i32, align 4
  %30 = alloca i1, align 1
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca [2 x double], align 8
  %34 = alloca [3 x double], align 8
  %35 = alloca double, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %35, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %34, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %33, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %32, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %31, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %30, i8 -86, i64 1, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %29, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %28, i8 -86, i64 8, i1 false)
  %36 = bitcast double %0 to i64
  store i64 %36, ptr %28, align 8
  %37 = load i64, ptr %28, align 8
  %38 = lshr i64 %37, 63
  %39 = icmp ne i64 %38, 0
  store i1 %39, ptr %30, align 1
  %40 = load i64, ptr %28, align 8
  %41 = lshr i64 %40, 32
  %42 = and i64 %41, 2147483647
  %43 = trunc i64 %42 to i32
  store i32 %43, ptr %31, align 4
  %44 = load i32, ptr %31, align 4
  %45 = icmp ule i32 %44, 1074752122
  br i1 %45, label %49, label %53

46:                                               ; preds = %53
  %47 = load i32, ptr %31, align 4
  %48 = icmp ule i32 %47, 1075594811
  br i1 %48, label %122, label %125

49:                                               ; preds = %2
  %50 = load i32, ptr %31, align 4
  %51 = and i32 %50, 1048575
  %52 = icmp eq i32 %51, 598523
  br i1 %52, label %57, label %60

53:                                               ; preds = %2
  br label %46

54:                                               ; preds = %60
  %55 = load i32, ptr %31, align 4
  %56 = icmp ule i32 %55, 1073928572
  br i1 %56, label %61, label %64

57:                                               ; preds = %49
  %58 = load i32, ptr %31, align 4
  %59 = call fastcc i32 @compiler_rt.rem_pio2.medium(i32 %58, double %0, ptr nonnull align 8 %1)
  ret i32 %59

60:                                               ; preds = %49
  br label %54

61:                                               ; preds = %54
  %62 = load i1, ptr %30, align 1
  %63 = xor i1 %62, true
  br i1 %63, label %67, label %80

64:                                               ; preds = %54
  %65 = load i1, ptr %30, align 1
  %66 = xor i1 %65, true
  br i1 %66, label %93, label %106

67:                                               ; preds = %61
  %68 = fsub double %0, 0x3FF921FB54400000
  store double %68, ptr %35, align 8
  store ptr %1, ptr %27, align 8
  %69 = load ptr, ptr %27, align 8
  %70 = getelementptr inbounds [2 x double], ptr %69, i64 0, i64 0
  %71 = load double, ptr %35, align 8
  %72 = fsub double %71, 0x3DD0B4611A626331
  store double %72, ptr %70, align 8
  store ptr %1, ptr %26, align 8
  %73 = load ptr, ptr %26, align 8
  %74 = getelementptr inbounds [2 x double], ptr %73, i64 0, i64 1
  %75 = load double, ptr %35, align 8
  %76 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %77 = load double, ptr %76, align 8
  %78 = fsub double %75, %77
  %79 = fsub double %78, 0x3DD0B4611A626331
  store double %79, ptr %74, align 8
  ret i32 1

80:                                               ; preds = %61
  %81 = fadd double %0, 0x3FF921FB54400000
  store double %81, ptr %35, align 8
  store ptr %1, ptr %25, align 8
  %82 = load ptr, ptr %25, align 8
  %83 = getelementptr inbounds [2 x double], ptr %82, i64 0, i64 0
  %84 = load double, ptr %35, align 8
  %85 = fadd double %84, 0x3DD0B4611A626331
  store double %85, ptr %83, align 8
  store ptr %1, ptr %24, align 8
  %86 = load ptr, ptr %24, align 8
  %87 = getelementptr inbounds [2 x double], ptr %86, i64 0, i64 1
  %88 = load double, ptr %35, align 8
  %89 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %90 = load double, ptr %89, align 8
  %91 = fsub double %88, %90
  %92 = fadd double %91, 0x3DD0B4611A626331
  store double %92, ptr %87, align 8
  ret i32 -1

93:                                               ; preds = %64
  %94 = fsub double %0, 0x400921FB54400000
  store double %94, ptr %35, align 8
  store ptr %1, ptr %23, align 8
  %95 = load ptr, ptr %23, align 8
  %96 = getelementptr inbounds [2 x double], ptr %95, i64 0, i64 0
  %97 = load double, ptr %35, align 8
  %98 = fsub double %97, 0x3DE0B4611A626331
  store double %98, ptr %96, align 8
  store ptr %1, ptr %22, align 8
  %99 = load ptr, ptr %22, align 8
  %100 = getelementptr inbounds [2 x double], ptr %99, i64 0, i64 1
  %101 = load double, ptr %35, align 8
  %102 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %103 = load double, ptr %102, align 8
  %104 = fsub double %101, %103
  %105 = fsub double %104, 0x3DE0B4611A626331
  store double %105, ptr %100, align 8
  ret i32 2

106:                                              ; preds = %64
  %107 = fadd double %0, 0x400921FB54400000
  store double %107, ptr %35, align 8
  store ptr %1, ptr %21, align 8
  %108 = load ptr, ptr %21, align 8
  %109 = getelementptr inbounds [2 x double], ptr %108, i64 0, i64 0
  %110 = load double, ptr %35, align 8
  %111 = fadd double %110, 0x3DE0B4611A626331
  store double %111, ptr %109, align 8
  store ptr %1, ptr %20, align 8
  %112 = load ptr, ptr %20, align 8
  %113 = getelementptr inbounds [2 x double], ptr %112, i64 0, i64 1
  %114 = load double, ptr %35, align 8
  %115 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %116 = load double, ptr %115, align 8
  %117 = fsub double %114, %116
  %118 = fadd double %117, 0x3DE0B4611A626331
  store double %118, ptr %113, align 8
  ret i32 -2

119:                                              ; preds = %125
  %120 = load i32, ptr %31, align 4
  %121 = icmp ult i32 %120, 1094263291
  br i1 %121, label %201, label %204

122:                                              ; preds = %46
  %123 = load i32, ptr %31, align 4
  %124 = icmp ule i32 %123, 1075183036
  br i1 %124, label %126, label %129

125:                                              ; preds = %46
  br label %119

126:                                              ; preds = %122
  %127 = load i32, ptr %31, align 4
  %128 = icmp eq i32 %127, 1074977148
  br i1 %128, label %135, label %138

129:                                              ; preds = %122
  %130 = load i32, ptr %31, align 4
  %131 = icmp eq i32 %130, 1075388923
  br i1 %131, label %168, label %171

132:                                              ; preds = %138
  %133 = load i1, ptr %30, align 1
  %134 = xor i1 %133, true
  br i1 %134, label %139, label %152

135:                                              ; preds = %126
  %136 = load i32, ptr %31, align 4
  %137 = call fastcc i32 @compiler_rt.rem_pio2.medium(i32 %136, double %0, ptr nonnull align 8 %1)
  ret i32 %137

138:                                              ; preds = %126
  br label %132

139:                                              ; preds = %132
  %140 = fsub double %0, 0x4012D97C7F300000
  store double %140, ptr %35, align 8
  store ptr %1, ptr %19, align 8
  %141 = load ptr, ptr %19, align 8
  %142 = getelementptr inbounds [2 x double], ptr %141, i64 0, i64 0
  %143 = load double, ptr %35, align 8
  %144 = fsub double %143, 0x3DE90E91A79394CA
  store double %144, ptr %142, align 8
  store ptr %1, ptr %18, align 8
  %145 = load ptr, ptr %18, align 8
  %146 = getelementptr inbounds [2 x double], ptr %145, i64 0, i64 1
  %147 = load double, ptr %35, align 8
  %148 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %149 = load double, ptr %148, align 8
  %150 = fsub double %147, %149
  %151 = fsub double %150, 0x3DE90E91A79394CA
  store double %151, ptr %146, align 8
  ret i32 3

152:                                              ; preds = %132
  %153 = fadd double %0, 0x4012D97C7F300000
  store double %153, ptr %35, align 8
  store ptr %1, ptr %17, align 8
  %154 = load ptr, ptr %17, align 8
  %155 = getelementptr inbounds [2 x double], ptr %154, i64 0, i64 0
  %156 = load double, ptr %35, align 8
  %157 = fadd double %156, 0x3DE90E91A79394CA
  store double %157, ptr %155, align 8
  store ptr %1, ptr %16, align 8
  %158 = load ptr, ptr %16, align 8
  %159 = getelementptr inbounds [2 x double], ptr %158, i64 0, i64 1
  %160 = load double, ptr %35, align 8
  %161 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %162 = load double, ptr %161, align 8
  %163 = fsub double %160, %162
  %164 = fadd double %163, 0x3DE90E91A79394CA
  store double %164, ptr %159, align 8
  ret i32 -3

165:                                              ; preds = %171
  %166 = load i1, ptr %30, align 1
  %167 = xor i1 %166, true
  br i1 %167, label %172, label %185

168:                                              ; preds = %129
  %169 = load i32, ptr %31, align 4
  %170 = call fastcc i32 @compiler_rt.rem_pio2.medium(i32 %169, double %0, ptr nonnull align 8 %1)
  ret i32 %170

171:                                              ; preds = %129
  br label %165

172:                                              ; preds = %165
  %173 = fsub double %0, 0x401921FB54400000
  store double %173, ptr %35, align 8
  store ptr %1, ptr %15, align 8
  %174 = load ptr, ptr %15, align 8
  %175 = getelementptr inbounds [2 x double], ptr %174, i64 0, i64 0
  %176 = load double, ptr %35, align 8
  %177 = fsub double %176, 0x3DF0B4611A626331
  store double %177, ptr %175, align 8
  store ptr %1, ptr %14, align 8
  %178 = load ptr, ptr %14, align 8
  %179 = getelementptr inbounds [2 x double], ptr %178, i64 0, i64 1
  %180 = load double, ptr %35, align 8
  %181 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %182 = load double, ptr %181, align 8
  %183 = fsub double %180, %182
  %184 = fsub double %183, 0x3DF0B4611A626331
  store double %184, ptr %179, align 8
  ret i32 4

185:                                              ; preds = %165
  %186 = fadd double %0, 0x401921FB54400000
  store double %186, ptr %35, align 8
  store ptr %1, ptr %13, align 8
  %187 = load ptr, ptr %13, align 8
  %188 = getelementptr inbounds [2 x double], ptr %187, i64 0, i64 0
  %189 = load double, ptr %35, align 8
  %190 = fadd double %189, 0x3DF0B4611A626331
  store double %190, ptr %188, align 8
  store ptr %1, ptr %12, align 8
  %191 = load ptr, ptr %12, align 8
  %192 = getelementptr inbounds [2 x double], ptr %191, i64 0, i64 1
  %193 = load double, ptr %35, align 8
  %194 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %195 = load double, ptr %194, align 8
  %196 = fsub double %193, %195
  %197 = fadd double %196, 0x3DF0B4611A626331
  store double %197, ptr %192, align 8
  ret i32 -4

198:                                              ; preds = %204
  %199 = load i32, ptr %31, align 4
  %200 = icmp uge i32 %199, 2146435072
  br i1 %200, label %213, label %221

201:                                              ; preds = %119
  %202 = load i32, ptr %31, align 4
  %203 = call fastcc i32 @compiler_rt.rem_pio2.medium(i32 %202, double %0, ptr nonnull align 8 %1)
  ret i32 %203

204:                                              ; preds = %119
  br label %198

205:                                              ; preds = %221
  %206 = bitcast double %0 to i64
  store i64 %206, ptr %28, align 8
  %207 = load i64, ptr %28, align 8
  %208 = and i64 %207, 4503599627370495
  store i64 %208, ptr %28, align 8
  %209 = load i64, ptr %28, align 8
  %210 = or i64 %209, 4710765210229538816
  store i64 %210, ptr %28, align 8
  %211 = load i64, ptr %28, align 8
  %212 = bitcast i64 %211 to double
  store double %212, ptr %35, align 8
  store i32 0, ptr %29, align 4
  br label %226

213:                                              ; preds = %198
  store ptr %1, ptr %11, align 8
  %214 = load ptr, ptr %11, align 8
  %215 = getelementptr inbounds [2 x double], ptr %214, i64 0, i64 0
  %216 = fsub double %0, %0
  store double %216, ptr %215, align 8
  store ptr %1, ptr %10, align 8
  %217 = load ptr, ptr %10, align 8
  %218 = getelementptr inbounds [2 x double], ptr %217, i64 0, i64 1
  %219 = getelementptr inbounds [2 x double], ptr %1, i64 0, i64 0
  %220 = load double, ptr %219, align 8
  store double %220, ptr %218, align 8
  ret i32 0

221:                                              ; preds = %198
  br label %205

222:                                              ; preds = %234
  %223 = load i32, ptr %29, align 4
  %224 = call fastcc i64 @compiler_rt.rem_pio2.U__anon_6120(i32 %223)
  %225 = icmp ult i64 %224, 3
  br i1 %225, label %270, label %271

226:                                              ; preds = %229, %205
  %227 = load i32, ptr %29, align 4
  %228 = icmp slt i32 %227, 2
  br i1 %228, label %230, label %234

229:                                              ; preds = %265
  br label %226

230:                                              ; preds = %226
  %231 = load i32, ptr %29, align 4
  %232 = call fastcc i64 @compiler_rt.rem_pio2.U__anon_6120(i32 %231)
  %233 = icmp ult i64 %232, 3
  br i1 %233, label %244, label %245

234:                                              ; preds = %226
  br label %222

235:                                              ; preds = %244
  %236 = getelementptr inbounds [3 x double], ptr %34, i64 0, i64 %232
  %237 = load double, ptr %35, align 8
  %238 = fptosi double %237 to i32
  %239 = sitofp i32 %238 to double
  %240 = fsub double %237, %239
  %241 = fcmp olt double %240, 1.000000e+00
  %242 = fcmp ogt double %240, -1.000000e+00
  %243 = and i1 %241, %242
  br i1 %243, label %252, label %253

244:                                              ; preds = %230
  br label %235

245:                                              ; preds = %230
  call fastcc void @builtin.panicOutOfBounds(i64 %232, i64 3)
  unreachable

246:                                              ; preds = %252
  %247 = sitofp i32 %238 to double
  store double %247, ptr %236, align 8
  %248 = load double, ptr %35, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %34, i64 24, i1 false)
  %249 = load i32, ptr %29, align 4
  %250 = call fastcc i64 @compiler_rt.rem_pio2.U__anon_6120(i32 %249)
  %251 = icmp ult i64 %250, 3
  br i1 %251, label %262, label %263

252:                                              ; preds = %235
  br label %246

253:                                              ; preds = %235
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @166)
  unreachable

254:                                              ; preds = %262
  %255 = getelementptr inbounds [3 x double], ptr %9, i64 0, i64 %250
  %256 = load double, ptr %255, align 8
  %257 = fsub double %248, %256
  %258 = fmul double %257, 0x4170000000000000
  store double %258, ptr %35, align 8
  %259 = load i32, ptr %29, align 4
  %260 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %259, i32 1)
  %261 = extractvalue { i32, i1 } %260, 1
  br i1 %261, label %264, label %265

262:                                              ; preds = %246
  br label %254

263:                                              ; preds = %246
  call fastcc void @builtin.panicOutOfBounds(i64 %250, i64 3)
  unreachable

264:                                              ; preds = %254
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

265:                                              ; preds = %254
  %266 = extractvalue { i32, i1 } %260, 0
  store i32 %266, ptr %29, align 4
  br label %229

267:                                              ; preds = %270
  %268 = getelementptr inbounds [3 x double], ptr %34, i64 0, i64 %224
  %269 = load double, ptr %35, align 8
  store double %269, ptr %268, align 8
  br label %279

270:                                              ; preds = %222
  br label %267

271:                                              ; preds = %222
  call fastcc void @builtin.panicOutOfBounds(i64 %224, i64 3)
  unreachable

272:                                              ; preds = %294
  %273 = getelementptr inbounds double, ptr %34, i64 0
  %274 = getelementptr inbounds double, ptr %33, i64 0
  %275 = load i32, ptr %31, align 4
  %276 = lshr i32 %275, 20
  %277 = sub i32 2147483647, %276
  %278 = icmp ule i32 %277, 2147483647
  br i1 %278, label %301, label %302

279:                                              ; preds = %283, %267
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %34, i64 24, i1 false)
  %280 = load i32, ptr %29, align 4
  %281 = call fastcc i64 @compiler_rt.rem_pio2.U__anon_6120(i32 %280)
  %282 = icmp ult i64 %281, 3
  br i1 %282, label %288, label %289

283:                                              ; preds = %296
  br label %279

284:                                              ; preds = %288
  %285 = getelementptr inbounds [3 x double], ptr %8, i64 0, i64 %281
  %286 = load double, ptr %285, align 8
  %287 = fcmp oeq double %286, 0.000000e+00
  br i1 %287, label %290, label %294

288:                                              ; preds = %279
  br label %284

289:                                              ; preds = %279
  call fastcc void @builtin.panicOutOfBounds(i64 %281, i64 3)
  unreachable

290:                                              ; preds = %284
  %291 = load i32, ptr %29, align 4
  %292 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %291, i32 1)
  %293 = extractvalue { i32, i1 } %292, 1
  br i1 %293, label %295, label %296

294:                                              ; preds = %284
  br label %272

295:                                              ; preds = %290
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

296:                                              ; preds = %290
  %297 = extractvalue { i32, i1 } %292, 0
  store i32 %297, ptr %29, align 4
  br label %283

298:                                              ; preds = %301
  %299 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %276, i32 1046)
  %300 = extractvalue { i32, i1 } %299, 1
  br i1 %300, label %303, label %304

301:                                              ; preds = %272
  br label %298

302:                                              ; preds = %272
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @166)
  unreachable

303:                                              ; preds = %298
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

304:                                              ; preds = %298
  %305 = extractvalue { i32, i1 } %299, 0
  %306 = load i32, ptr %29, align 4
  %307 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %306, i32 1)
  %308 = extractvalue { i32, i1 } %307, 1
  br i1 %308, label %309, label %310

309:                                              ; preds = %304
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

310:                                              ; preds = %304
  %311 = extractvalue { i32, i1 } %307, 0
  %312 = getelementptr inbounds [3 x double], ptr %273, i64 0, i64 0
  %313 = insertvalue { ptr, i64 } poison, ptr %312, 0
  %314 = insertvalue { ptr, i64 } %313, i64 3, 1
  %315 = getelementptr inbounds [2 x double], ptr %274, i64 0, i64 0
  %316 = insertvalue { ptr, i64 } poison, ptr %315, 0
  %317 = insertvalue { ptr, i64 } %316, i64 2, 1
  %318 = extractvalue { ptr, i64 } %314, 0
  %319 = extractvalue { ptr, i64 } %314, 1
  %320 = extractvalue { ptr, i64 } %317, 0
  %321 = extractvalue { ptr, i64 } %317, 1
  %322 = call fastcc i32 @compiler_rt.rem_pio2_large.rem_pio2_large(ptr nonnull align 8 %318, i64 %319, ptr nonnull align 8 %320, i64 %321, i32 %305, i32 %311, i64 1)
  store i32 %322, ptr %32, align 4
  %323 = load i1, ptr %30, align 1
  br i1 %323, label %334, label %348

324:                                              ; preds = %348
  store ptr %1, ptr %5, align 8
  %325 = load ptr, ptr %5, align 8
  %326 = getelementptr inbounds [2 x double], ptr %325, i64 0, i64 0
  %327 = getelementptr inbounds [2 x double], ptr %33, i64 0, i64 0
  %328 = load double, ptr %327, align 8
  store double %328, ptr %326, align 8
  store ptr %1, ptr %4, align 8
  %329 = load ptr, ptr %4, align 8
  %330 = getelementptr inbounds [2 x double], ptr %329, i64 0, i64 1
  %331 = getelementptr inbounds [2 x double], ptr %33, i64 0, i64 1
  %332 = load double, ptr %331, align 8
  store double %332, ptr %330, align 8
  %333 = load i32, ptr %32, align 4
  ret i32 %333

334:                                              ; preds = %310
  store ptr %1, ptr %7, align 8
  %335 = load ptr, ptr %7, align 8
  %336 = getelementptr inbounds [2 x double], ptr %335, i64 0, i64 0
  %337 = getelementptr inbounds [2 x double], ptr %33, i64 0, i64 0
  %338 = load double, ptr %337, align 8
  %339 = fneg double %338
  store double %339, ptr %336, align 8
  store ptr %1, ptr %6, align 8
  %340 = load ptr, ptr %6, align 8
  %341 = getelementptr inbounds [2 x double], ptr %340, i64 0, i64 1
  %342 = getelementptr inbounds [2 x double], ptr %33, i64 0, i64 1
  %343 = load double, ptr %342, align 8
  %344 = fneg double %343
  store double %344, ptr %341, align 8
  %345 = load i32, ptr %32, align 4
  %346 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %345)
  %347 = extractvalue { i32, i1 } %346, 1
  br i1 %347, label %349, label %350

348:                                              ; preds = %310
  br label %324

349:                                              ; preds = %334
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

350:                                              ; preds = %334
  %351 = extractvalue { i32, i1 } %346, 0
  ret i32 %351
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.trig.__sin(double %0, double %1, i32 %2) unnamed_addr #0 {
  %4 = fmul double %0, %0
  %5 = fmul double %4, %4
  %6 = fmul double %4, 0x3EC71DE357B1FE7D
  %7 = fadd double 0xBF2A01A019C161D5, %6
  %8 = fmul double %4, %7
  %9 = fadd double 0x3F8111111110F8A6, %8
  %10 = fmul double %4, %5
  %11 = fmul double %4, 0x3DE5D93A5ACFD57C
  %12 = fadd double 0xBE5AE5E68A2B9CEB, %11
  %13 = fmul double %10, %12
  %14 = fadd double %9, %13
  %15 = fmul double %4, %0
  %16 = icmp eq i32 %2, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %3
  %18 = fmul double %4, %14
  %19 = fadd double 0xBFC5555555555549, %18
  %20 = fmul double %15, %19
  %21 = fadd double %0, %20
  ret double %21

22:                                               ; preds = %3
  %23 = fmul double 5.000000e-01, %1
  %24 = fmul double %15, %14
  %25 = fsub double %23, %24
  %26 = fmul double %4, %25
  %27 = fsub double %26, %1
  %28 = fmul double %15, 0xBFC5555555555549
  %29 = fsub double %27, %28
  %30 = fsub double %0, %29
  ret double %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @compiler_rt.rem_pio2.medium(i32 %0, double %1, ptr nonnull align 8 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %16, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %15, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %14, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %13, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %12, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %11, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %10, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 8, i1 false)
  %17 = fmul double %1, 0x3FE45F306DC9C883
  %18 = fadd double %17, 0x4338000000000000
  %19 = fsub double %18, 0x4338000000000000
  store double %19, ptr %13, align 8
  %20 = load double, ptr %13, align 8
  %21 = fptosi double %20 to i32
  %22 = sitofp i32 %21 to double
  %23 = fsub double %20, %22
  %24 = fcmp olt double %23, 1.000000e+00
  %25 = fcmp ogt double %23, -1.000000e+00
  %26 = and i1 %24, %25
  br i1 %26, label %37, label %38

27:                                               ; preds = %37
  store i32 %21, ptr %12, align 4
  %28 = load double, ptr %13, align 8
  %29 = fmul double %28, 0x3FF921FB54400000
  %30 = fsub double %1, %29
  store double %30, ptr %14, align 8
  %31 = load double, ptr %13, align 8
  %32 = fmul double %31, 0x3DD0B4611A626331
  store double %32, ptr %16, align 8
  %33 = load double, ptr %14, align 8
  %34 = load double, ptr %16, align 8
  %35 = fsub double %33, %34
  %36 = fcmp olt double %35, 0xBFE921FB54442D18
  br i1 %36, label %53, label %57

37:                                               ; preds = %3
  br label %27

38:                                               ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @185)
  unreachable

39:                                               ; preds = %72, %63
  store ptr %2, ptr %8, align 8
  %40 = load ptr, ptr %8, align 8
  %41 = getelementptr inbounds [2 x double], ptr %40, i64 0, i64 0
  %42 = load double, ptr %14, align 8
  %43 = load double, ptr %16, align 8
  %44 = fsub double %42, %43
  store double %44, ptr %41, align 8
  %45 = getelementptr inbounds [2 x double], ptr %2, i64 0, i64 0
  %46 = load double, ptr %45, align 8
  %47 = bitcast double %46 to i64
  store i64 %47, ptr %9, align 8
  %48 = load i64, ptr %9, align 8
  %49 = lshr i64 %48, 52
  %50 = and i64 %49, 2047
  %51 = sub i64 2147483647, %50
  %52 = icmp ule i64 %51, 2147483647
  br i1 %52, label %93, label %94

53:                                               ; preds = %27
  %54 = load i32, ptr %12, align 4
  %55 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %54, i32 1)
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %62, label %63

57:                                               ; preds = %27
  %58 = load double, ptr %14, align 8
  %59 = load double, ptr %16, align 8
  %60 = fsub double %58, %59
  %61 = fcmp ogt double %60, 0x3FE921FB54442D18
  br i1 %61, label %73, label %77

62:                                               ; preds = %53
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %53
  %64 = extractvalue { i32, i1 } %55, 0
  store i32 %64, ptr %12, align 4
  %65 = load double, ptr %13, align 8
  %66 = fsub double %65, 1.000000e+00
  store double %66, ptr %13, align 8
  %67 = load double, ptr %13, align 8
  %68 = fmul double %67, 0x3FF921FB54400000
  %69 = fsub double %1, %68
  store double %69, ptr %14, align 8
  %70 = load double, ptr %13, align 8
  %71 = fmul double %70, 0x3DD0B4611A626331
  store double %71, ptr %16, align 8
  br label %39

72:                                               ; preds = %79, %77
  br label %39

73:                                               ; preds = %57
  %74 = load i32, ptr %12, align 4
  %75 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %74, i32 1)
  %76 = extractvalue { i32, i1 } %75, 1
  br i1 %76, label %78, label %79

77:                                               ; preds = %57
  br label %72

78:                                               ; preds = %73
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %73
  %80 = extractvalue { i32, i1 } %75, 0
  store i32 %80, ptr %12, align 4
  %81 = load double, ptr %13, align 8
  %82 = fadd double %81, 1.000000e+00
  store double %82, ptr %13, align 8
  %83 = load double, ptr %13, align 8
  %84 = fmul double %83, 0x3FF921FB54400000
  %85 = fsub double %1, %84
  store double %85, ptr %14, align 8
  %86 = load double, ptr %13, align 8
  %87 = fmul double %86, 0x3DD0B4611A626331
  store double %87, ptr %16, align 8
  br label %72

88:                                               ; preds = %93
  %89 = trunc i64 %50 to i32
  store i32 %89, ptr %10, align 4
  %90 = lshr i32 %0, 20
  %91 = sub i32 2147483647, %90
  %92 = icmp ule i32 %91, 2147483647
  br i1 %92, label %100, label %101

93:                                               ; preds = %39
  br label %88

94:                                               ; preds = %39
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @185)
  unreachable

95:                                               ; preds = %100
  store i32 %90, ptr %11, align 4
  %96 = load i32, ptr %11, align 4
  %97 = load i32, ptr %10, align 4
  %98 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %96, i32 %97)
  %99 = extractvalue { i32, i1 } %98, 1
  br i1 %99, label %112, label %113

100:                                              ; preds = %88
  br label %95

101:                                              ; preds = %88
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @185)
  unreachable

102:                                              ; preds = %153, %144
  store ptr %2, ptr %5, align 8
  %103 = load ptr, ptr %5, align 8
  %104 = getelementptr inbounds [2 x double], ptr %103, i64 0, i64 1
  %105 = load double, ptr %14, align 8
  %106 = getelementptr inbounds [2 x double], ptr %2, i64 0, i64 0
  %107 = load double, ptr %106, align 8
  %108 = fsub double %105, %107
  %109 = load double, ptr %16, align 8
  %110 = fsub double %108, %109
  store double %110, ptr %104, align 8
  %111 = load i32, ptr %12, align 4
  ret i32 %111

112:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

113:                                              ; preds = %95
  %114 = extractvalue { i32, i1 } %98, 0
  %115 = icmp sgt i32 %114, 16
  br i1 %115, label %116, label %144

116:                                              ; preds = %113
  %117 = load double, ptr %14, align 8
  store double %117, ptr %15, align 8
  %118 = load double, ptr %13, align 8
  %119 = fmul double %118, 0x3DD0B4611A600000
  store double %119, ptr %16, align 8
  %120 = load double, ptr %15, align 8
  %121 = load double, ptr %16, align 8
  %122 = fsub double %120, %121
  store double %122, ptr %14, align 8
  %123 = load double, ptr %13, align 8
  %124 = fmul double %123, 0x3BA3198A2E037073
  %125 = load double, ptr %15, align 8
  %126 = load double, ptr %14, align 8
  %127 = fsub double %125, %126
  %128 = load double, ptr %16, align 8
  %129 = fsub double %127, %128
  %130 = fsub double %124, %129
  store double %130, ptr %16, align 8
  store ptr %2, ptr %7, align 8
  %131 = load ptr, ptr %7, align 8
  %132 = getelementptr inbounds [2 x double], ptr %131, i64 0, i64 0
  %133 = load double, ptr %14, align 8
  %134 = load double, ptr %16, align 8
  %135 = fsub double %133, %134
  store double %135, ptr %132, align 8
  %136 = getelementptr inbounds [2 x double], ptr %2, i64 0, i64 0
  %137 = load double, ptr %136, align 8
  %138 = bitcast double %137 to i64
  store i64 %138, ptr %9, align 8
  %139 = load i64, ptr %9, align 8
  %140 = lshr i64 %139, 52
  %141 = and i64 %140, 2047
  %142 = sub i64 2147483647, %141
  %143 = icmp ule i64 %142, 2147483647
  br i1 %143, label %151, label %152

144:                                              ; preds = %113
  br label %102

145:                                              ; preds = %151
  %146 = trunc i64 %141 to i32
  store i32 %146, ptr %10, align 4
  %147 = load i32, ptr %11, align 4
  %148 = load i32, ptr %10, align 4
  %149 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %147, i32 %148)
  %150 = extractvalue { i32, i1 } %149, 1
  br i1 %150, label %154, label %155

151:                                              ; preds = %116
  br label %145

152:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @185)
  unreachable

153:                                              ; preds = %178, %158
  br label %102

154:                                              ; preds = %145
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

155:                                              ; preds = %145
  %156 = extractvalue { i32, i1 } %149, 0
  %157 = icmp sgt i32 %156, 49
  br i1 %157, label %158, label %178

158:                                              ; preds = %155
  %159 = load double, ptr %14, align 8
  store double %159, ptr %15, align 8
  %160 = load double, ptr %13, align 8
  %161 = fmul double %160, 0x3BA3198A2E000000
  store double %161, ptr %16, align 8
  %162 = load double, ptr %15, align 8
  %163 = load double, ptr %16, align 8
  %164 = fsub double %162, %163
  store double %164, ptr %14, align 8
  %165 = load double, ptr %13, align 8
  %166 = fmul double %165, 0x397B839A252049C1
  %167 = load double, ptr %15, align 8
  %168 = load double, ptr %14, align 8
  %169 = fsub double %167, %168
  %170 = load double, ptr %16, align 8
  %171 = fsub double %169, %170
  %172 = fsub double %166, %171
  store double %172, ptr %16, align 8
  store ptr %2, ptr %6, align 8
  %173 = load ptr, ptr %6, align 8
  %174 = getelementptr inbounds [2 x double], ptr %173, i64 0, i64 0
  %175 = load double, ptr %14, align 8
  %176 = load double, ptr %16, align 8
  %177 = fsub double %175, %176
  store double %177, ptr %174, align 8
  br label %153

178:                                              ; preds = %155
  br label %153
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @compiler_rt.rem_pio2.U__anon_6120(i32 %0) unnamed_addr #0 {
  %2 = icmp sge i32 %0, 0
  br i1 %2, label %5, label %6

3:                                                ; preds = %5
  %4 = sext i32 %0 to i64
  ret i64 %4

5:                                                ; preds = %1
  br label %3

6:                                                ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @186)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__cosx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @cosq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @cosq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @cos(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @cosl(double %0) #0 {
  %2 = call double @cos(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__exph(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @expf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @expf(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  store float %0, ptr %7, align 4
  %8 = load float, ptr %7, align 4
  %9 = bitcast float %8 to i32
  store i32 %9, ptr %6, align 4
  %10 = load i32, ptr %6, align 4
  %11 = lshr i32 %10, 31
  %12 = sub i32 2147483647, %11
  %13 = icmp ule i32 %12, 2147483647
  br i1 %13, label %19, label %20

14:                                               ; preds = %19
  %15 = load i32, ptr %6, align 4
  %16 = and i32 %15, 2147483647
  store i32 %16, ptr %6, align 4
  %17 = load float, ptr %7, align 4
  %18 = call fastcc i1 @math.isnan.isNan__anon_3680(float %17)
  br i1 %18, label %24, label %26

19:                                               ; preds = %1
  br label %14

20:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @91)
  unreachable

21:                                               ; preds = %26
  %22 = load i32, ptr %6, align 4
  %23 = icmp uge i32 %22, 1118743632
  br i1 %23, label %30, label %33

24:                                               ; preds = %14
  %25 = load float, ptr %7, align 4
  ret float %25

26:                                               ; preds = %14
  br label %21

27:                                               ; preds = %51, %33
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %28 = load i32, ptr %6, align 4
  %29 = icmp ugt i32 %28, 1051816472
  br i1 %29, label %81, label %84

30:                                               ; preds = %21
  %31 = load i32, ptr %6, align 4
  %32 = icmp ugt i32 %31, 2139095040
  br i1 %32, label %37, label %39

33:                                               ; preds = %21
  br label %27

34:                                               ; preds = %39
  %35 = load i32, ptr %6, align 4
  %36 = icmp uge i32 %35, 1118925336
  br i1 %36, label %44, label %46

37:                                               ; preds = %30
  %38 = load float, ptr %7, align 4
  ret float %38

39:                                               ; preds = %30
  br label %34

40:                                               ; preds = %50
  %41 = icmp ne i32 %11, 0
  br i1 %41, label %52, label %57

42:                                               ; preds = %46, %44
  %43 = phi i1 [ %45, %44 ], [ false, %46 ]
  br i1 %43, label %47, label %50

44:                                               ; preds = %34
  %45 = icmp eq i32 %11, 0
  br label %42

46:                                               ; preds = %34
  br label %42

47:                                               ; preds = %42
  %48 = load float, ptr %7, align 4
  %49 = fmul float %48, 0x47E0000000000000
  ret float %49

50:                                               ; preds = %42
  br label %40

51:                                               ; preds = %58, %57
  br label %27

52:                                               ; preds = %40
  %53 = load float, ptr %7, align 4
  %54 = fdiv float 0xB6A0000000000000, %53
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %54)
  %55 = load i32, ptr %6, align 4
  %56 = icmp uge i32 %55, 1120924085
  br i1 %56, label %59, label %60

57:                                               ; preds = %40
  br label %51

58:                                               ; preds = %60
  br label %51

59:                                               ; preds = %52
  ret float 0.000000e+00

60:                                               ; preds = %52
  br label %58

61:                                               ; preds = %132, %87
  %62 = load float, ptr %7, align 4
  %63 = load float, ptr %7, align 4
  %64 = fmul float %62, %63
  %65 = load float, ptr %7, align 4
  %66 = fmul float %64, 0xBF66AA42A0000000
  %67 = fadd float 0x3FC55551E0000000, %66
  %68 = fmul float %64, %67
  %69 = fsub float %65, %68
  %70 = load float, ptr %7, align 4
  %71 = fmul float %70, %69
  %72 = fsub float 2.000000e+00, %69
  %73 = fdiv float %71, %72
  %74 = load float, ptr %3, align 4
  %75 = fsub float %73, %74
  %76 = load float, ptr %4, align 4
  %77 = fadd float %75, %76
  %78 = fadd float 1.000000e+00, %77
  %79 = load i32, ptr %5, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %140, label %141

81:                                               ; preds = %27
  %82 = load i32, ptr %6, align 4
  %83 = icmp ugt i32 %82, 1065686418
  br i1 %83, label %97, label %101

84:                                               ; preds = %27
  %85 = load i32, ptr %6, align 4
  %86 = icmp ugt i32 %85, 956301312
  br i1 %86, label %133, label %135

87:                                               ; preds = %130, %121
  %88 = load i32, ptr %5, align 4
  %89 = sitofp i32 %88 to float
  %90 = load float, ptr %7, align 4
  %91 = fmul float %89, 0x3FE62E4000000000
  %92 = fsub float %90, %91
  store float %92, ptr %4, align 4
  %93 = fmul float %89, 0x3EB7F7D1C0000000
  store float %93, ptr %3, align 4
  %94 = load float, ptr %4, align 4
  %95 = load float, ptr %3, align 4
  %96 = fsub float %94, %95
  store float %96, ptr %7, align 4
  br label %61

97:                                               ; preds = %81
  %98 = load float, ptr %7, align 4
  %99 = fmul float 0x3FF7154760000000, %98
  %100 = icmp sge i32 %11, 0
  br i1 %100, label %107, label %108

101:                                              ; preds = %81
  %102 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %11)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %124, label %125

104:                                              ; preds = %107
  %105 = sext i32 %11 to i64
  %106 = icmp ult i64 %105, 2
  br i1 %106, label %119, label %120

107:                                              ; preds = %97
  br label %104

108:                                              ; preds = %97
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @91)
  unreachable

109:                                              ; preds = %119
  %110 = getelementptr inbounds [2 x float], ptr @92, i64 0, i64 %105
  %111 = load float, ptr %110, align 4
  %112 = fadd float %99, %111
  %113 = fptosi float %112 to i32
  %114 = sitofp i32 %113 to float
  %115 = fsub float %112, %114
  %116 = fcmp olt float %115, 1.000000e+00
  %117 = fcmp ogt float %115, -1.000000e+00
  %118 = and i1 %116, %117
  br i1 %118, label %122, label %123

119:                                              ; preds = %104
  br label %109

120:                                              ; preds = %104
  call fastcc void @builtin.panicOutOfBounds(i64 %105, i64 2)
  unreachable

121:                                              ; preds = %122
  store i32 %113, ptr %5, align 4
  br label %87

122:                                              ; preds = %109
  br label %121

123:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @91)
  unreachable

124:                                              ; preds = %101
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

125:                                              ; preds = %101
  %126 = extractvalue { i32, i1 } %102, 0
  %127 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %126, i32 %11)
  %128 = extractvalue { i32, i1 } %127, 1
  br i1 %128, label %129, label %130

129:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

130:                                              ; preds = %125
  %131 = extractvalue { i32, i1 } %127, 0
  store i32 %131, ptr %5, align 4
  br label %87

132:                                              ; preds = %133
  br label %61

133:                                              ; preds = %84
  store i32 0, ptr %5, align 4
  %134 = load float, ptr %7, align 4
  store float %134, ptr %4, align 4
  store float 0.000000e+00, ptr %3, align 4
  br label %132

135:                                              ; preds = %84
  %136 = load float, ptr %7, align 4
  %137 = fadd float 0x47E0000000000000, %136
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %137)
  %138 = load float, ptr %7, align 4
  %139 = fadd float 1.000000e+00, %138
  ret float %139

140:                                              ; preds = %61
  ret float %78

141:                                              ; preds = %61
  %142 = load i32, ptr %5, align 4
  %143 = call fastcc float @math.ldexp.ldexp__anon_3732(float %78, i32 %142)
  ret float %143
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @exp(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca double, align 8
  store double %0, ptr %8, align 8
  %9 = load double, ptr %8, align 8
  %10 = bitcast double %9 to i64
  store i64 %10, ptr %7, align 8
  %11 = load i64, ptr %7, align 8
  %12 = lshr i64 %11, 32
  store i64 %12, ptr %6, align 8
  %13 = load i64, ptr %6, align 8
  %14 = lshr i64 %13, 31
  %15 = sub i64 2147483647, %14
  %16 = icmp ule i64 %15, 2147483647
  br i1 %16, label %23, label %24

17:                                               ; preds = %23
  %18 = trunc i64 %14 to i32
  %19 = load i64, ptr %6, align 8
  %20 = and i64 %19, 2147483647
  store i64 %20, ptr %6, align 8
  %21 = load double, ptr %8, align 8
  %22 = call fastcc i1 @math.isnan.isNan__anon_3682(double %21)
  br i1 %22, label %28, label %30

23:                                               ; preds = %1
  br label %17

24:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @93)
  unreachable

25:                                               ; preds = %30
  %26 = load i64, ptr %6, align 8
  %27 = icmp uge i64 %26, 1082532651
  br i1 %27, label %34, label %37

28:                                               ; preds = %17
  %29 = load double, ptr %8, align 8
  ret double %29

30:                                               ; preds = %17
  br label %25

31:                                               ; preds = %57, %37
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %32 = load i64, ptr %6, align 8
  %33 = icmp ugt i64 %32, 1071001154
  br i1 %33, label %91, label %94

34:                                               ; preds = %25
  %35 = load i64, ptr %6, align 8
  %36 = icmp ugt i64 %35, 2146435072
  br i1 %36, label %41, label %43

37:                                               ; preds = %25
  br label %31

38:                                               ; preds = %43
  %39 = load double, ptr %8, align 8
  %40 = fcmp ogt double %39, 0x40862E42FEFA39EF
  br i1 %40, label %47, label %53

41:                                               ; preds = %34
  %42 = load double, ptr %8, align 8
  ret double %42

43:                                               ; preds = %34
  br label %38

44:                                               ; preds = %53
  %45 = load double, ptr %8, align 8
  %46 = fcmp olt double %45, 0xC086232BDD7ABCD2
  br i1 %46, label %58, label %61

47:                                               ; preds = %38
  %48 = load double, ptr %8, align 8
  %49 = bitcast double %48 to i64
  %50 = and i64 %49, 9223372036854775807
  %51 = icmp eq i64 %50, 9218868437227405312
  %52 = xor i1 %51, true
  br i1 %52, label %55, label %56

53:                                               ; preds = %38
  br label %44

54:                                               ; preds = %56, %55
  ret double 0x7FF0000000000000

55:                                               ; preds = %47
  call fastcc void @math.raiseOverflow()
  br label %54

56:                                               ; preds = %47
  br label %54

57:                                               ; preds = %62, %61
  br label %31

58:                                               ; preds = %44
  %59 = load double, ptr %8, align 8
  %60 = fcmp olt double %59, 0xC0874910D52D3051
  br i1 %60, label %63, label %64

61:                                               ; preds = %44
  br label %57

62:                                               ; preds = %64
  br label %57

63:                                               ; preds = %58
  ret double 0.000000e+00

64:                                               ; preds = %58
  br label %62

65:                                               ; preds = %142, %97
  %66 = load double, ptr %8, align 8
  %67 = load double, ptr %8, align 8
  %68 = fmul double %66, %67
  %69 = load double, ptr %8, align 8
  %70 = fmul double %68, 0x3E66376972BEA4D0
  %71 = fadd double 0xBEBBBD41C5D26BF1, %70
  %72 = fmul double %68, %71
  %73 = fadd double 0x3F11566AAF25DE2C, %72
  %74 = fmul double %68, %73
  %75 = fadd double 0xBF66C16C16BEBD93, %74
  %76 = fmul double %68, %75
  %77 = fadd double 0x3FC555555555553E, %76
  %78 = fmul double %68, %77
  %79 = fsub double %69, %78
  %80 = load double, ptr %8, align 8
  %81 = fmul double %80, %79
  %82 = fsub double 2.000000e+00, %79
  %83 = fdiv double %81, %82
  %84 = load double, ptr %3, align 8
  %85 = fsub double %83, %84
  %86 = load double, ptr %4, align 8
  %87 = fadd double %85, %86
  %88 = fadd double 1.000000e+00, %87
  %89 = load i32, ptr %5, align 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %148, label %149

91:                                               ; preds = %31
  %92 = load i64, ptr %6, align 8
  %93 = icmp ugt i64 %92, 1072734898
  br i1 %93, label %107, label %111

94:                                               ; preds = %31
  %95 = load i64, ptr %6, align 8
  %96 = icmp ugt i64 %95, 1043333120
  br i1 %96, label %143, label %145

97:                                               ; preds = %140, %131
  %98 = load i32, ptr %5, align 4
  %99 = sitofp i32 %98 to double
  %100 = load double, ptr %8, align 8
  %101 = fmul double %99, 0x3FE62E42FEE00000
  %102 = fsub double %100, %101
  store double %102, ptr %4, align 8
  %103 = fmul double %99, 0x3DEA39EF35793C76
  store double %103, ptr %3, align 8
  %104 = load double, ptr %4, align 8
  %105 = load double, ptr %3, align 8
  %106 = fsub double %104, %105
  store double %106, ptr %8, align 8
  br label %65

107:                                              ; preds = %91
  %108 = load double, ptr %8, align 8
  %109 = fmul double 0x3FF71547652B82FE, %108
  %110 = icmp sge i32 %18, 0
  br i1 %110, label %117, label %118

111:                                              ; preds = %91
  %112 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %18)
  %113 = extractvalue { i32, i1 } %112, 1
  br i1 %113, label %134, label %135

114:                                              ; preds = %117
  %115 = sext i32 %18 to i64
  %116 = icmp ult i64 %115, 2
  br i1 %116, label %129, label %130

117:                                              ; preds = %107
  br label %114

118:                                              ; preds = %107
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @93)
  unreachable

119:                                              ; preds = %129
  %120 = getelementptr inbounds [2 x double], ptr @94, i64 0, i64 %115
  %121 = load double, ptr %120, align 8
  %122 = fadd double %109, %121
  %123 = fptosi double %122 to i32
  %124 = sitofp i32 %123 to double
  %125 = fsub double %122, %124
  %126 = fcmp olt double %125, 1.000000e+00
  %127 = fcmp ogt double %125, -1.000000e+00
  %128 = and i1 %126, %127
  br i1 %128, label %132, label %133

129:                                              ; preds = %114
  br label %119

130:                                              ; preds = %114
  call fastcc void @builtin.panicOutOfBounds(i64 %115, i64 2)
  unreachable

131:                                              ; preds = %132
  store i32 %123, ptr %5, align 4
  br label %97

132:                                              ; preds = %119
  br label %131

133:                                              ; preds = %119
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.integer_part_out_of_bounds__anon_3780, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @93)
  unreachable

134:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

135:                                              ; preds = %111
  %136 = extractvalue { i32, i1 } %112, 0
  %137 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %136, i32 %18)
  %138 = extractvalue { i32, i1 } %137, 1
  br i1 %138, label %139, label %140

139:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

140:                                              ; preds = %135
  %141 = extractvalue { i32, i1 } %137, 0
  store i32 %141, ptr %5, align 4
  br label %97

142:                                              ; preds = %143
  br label %65

143:                                              ; preds = %94
  store i32 0, ptr %5, align 4
  %144 = load double, ptr %8, align 8
  store double %144, ptr %4, align 8
  store double 0.000000e+00, ptr %3, align 8
  br label %142

145:                                              ; preds = %94
  %146 = load double, ptr %8, align 8
  %147 = fadd double 1.000000e+00, %146
  ret double %147

148:                                              ; preds = %65
  ret double %88

149:                                              ; preds = %65
  %150 = load i32, ptr %5, align 4
  %151 = call fastcc double @math.ldexp.ldexp__anon_3735(double %88, i32 %150)
  ret double %151
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.raiseOverflow() unnamed_addr #0 {
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__expx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @expq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @expq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @exp(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @expl(double %0) #0 {
  %2 = call double @exp(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__exp2h(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @exp2f(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @exp2f(float %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  store i32 %6, ptr %5, align 4
  %7 = load i32, ptr %5, align 4
  %8 = and i32 %7, 2147483647
  %9 = icmp ugt i32 %8, 1123811328
  br i1 %9, label %20, label %22

10:                                               ; preds = %62, %41
  %11 = fadd float %0, 7.864320e+05
  store float %11, ptr %4, align 4
  %12 = load float, ptr %4, align 4
  %13 = bitcast float %12 to i32
  store i32 %13, ptr %3, align 4
  %14 = load i32, ptr %3, align 4
  %15 = add i32 %14, 8
  store i32 %15, ptr %3, align 4
  %16 = load i32, ptr %3, align 4
  %17 = udiv i32 %16, 16
  %18 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 1023, i32 %17)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %66, label %67

20:                                               ; preds = %1
  %21 = icmp ugt i32 %8, 2139095040
  br i1 %21, label %27, label %28

22:                                               ; preds = %1
  %23 = icmp ule i32 %8, 855638016
  br i1 %23, label %63, label %65

24:                                               ; preds = %28
  %25 = load i32, ptr %5, align 4
  %26 = icmp uge i32 %25, 1124073472
  br i1 %26, label %34, label %37

27:                                               ; preds = %20
  ret float %0

28:                                               ; preds = %20
  br label %24

29:                                               ; preds = %40
  %30 = load i32, ptr %5, align 4
  %31 = icmp uge i32 %30, -2147483648
  br i1 %31, label %42, label %45

32:                                               ; preds = %37, %34
  %33 = phi i1 [ %36, %34 ], [ false, %37 ]
  br i1 %33, label %38, label %40

34:                                               ; preds = %24
  %35 = load i32, ptr %5, align 4
  %36 = icmp ult i32 %35, -2147483648
  br label %32

37:                                               ; preds = %24
  br label %32

38:                                               ; preds = %32
  %39 = fmul float %0, 0x47E0000000000000
  ret float %39

40:                                               ; preds = %32
  br label %29

41:                                               ; preds = %59, %45
  br label %10

42:                                               ; preds = %29
  %43 = load i32, ptr %5, align 4
  %44 = icmp uge i32 %43, -1021968384
  br i1 %44, label %51, label %52

45:                                               ; preds = %29
  br label %41

46:                                               ; preds = %58, %56
  %47 = load i32, ptr %5, align 4
  %48 = icmp uge i32 %47, 51773440
  br i1 %48, label %60, label %61

49:                                               ; preds = %52, %51
  %50 = phi i1 [ true, %51 ], [ %55, %52 ]
  br i1 %50, label %56, label %58

51:                                               ; preds = %42
  br label %49

52:                                               ; preds = %42
  %53 = load i32, ptr %5, align 4
  %54 = and i32 %53, 65535
  %55 = icmp ne i32 %54, 0
  br label %49

56:                                               ; preds = %49
  %57 = fdiv float 0xB6A0000000000000, %0
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %57)
  br label %46

58:                                               ; preds = %49
  br label %46

59:                                               ; preds = %61
  br label %41

60:                                               ; preds = %46
  ret float 0.000000e+00

61:                                               ; preds = %46
  br label %59

62:                                               ; preds = %65
  br label %10

63:                                               ; preds = %22
  %64 = fadd float 1.000000e+00, %0
  ret float %64

65:                                               ; preds = %22
  br label %62

66:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %10
  %68 = extractvalue { i32, i1 } %18, 0
  %69 = zext i32 %68 to i64
  %70 = shl i64 %69, 52
  %71 = bitcast i64 %70 to double
  %72 = load i32, ptr %3, align 4
  %73 = and i32 %72, 15
  store i32 %73, ptr %3, align 4
  %74 = load float, ptr %4, align 4
  %75 = fsub float %74, 7.864320e+05
  store float %75, ptr %4, align 4
  %76 = load float, ptr %4, align 4
  %77 = fsub float %0, %76
  %78 = fpext float %77 to double
  %79 = load i32, ptr %3, align 4
  %80 = zext i32 %79 to i64
  %81 = icmp ult i64 %80, 16
  br i1 %81, label %101, label %102

82:                                               ; preds = %101
  %83 = getelementptr inbounds [16 x double], ptr @95, i64 0, i64 %80
  %84 = load double, ptr %83, align 8
  store double %84, ptr %2, align 8
  %85 = load double, ptr %2, align 8
  %86 = fmul double %85, %78
  %87 = load double, ptr %2, align 8
  %88 = fmul double %78, 0x3FCEBFBE00000000
  %89 = fadd double 0x3FE62E4300000000, %88
  %90 = fmul double %86, %89
  %91 = fadd double %87, %90
  %92 = fmul double %78, %78
  %93 = fmul double %86, %92
  %94 = fmul double %78, 0x3F83B2C9C0000000
  %95 = fadd double 0x3FAC6B3480000000, %94
  %96 = fmul double %93, %95
  %97 = fadd double %91, %96
  store double %97, ptr %2, align 8
  %98 = load double, ptr %2, align 8
  %99 = fmul double %98, %71
  %100 = fptrunc double %99 to float
  ret float %100

101:                                              ; preds = %67
  br label %82

102:                                              ; preds = %67
  call fastcc void @builtin.panicOutOfBounds(i64 %80, i64 16)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @exp2(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = bitcast double %0 to i64
  %7 = lshr i64 %6, 32
  %8 = sub i64 4294967295, %7
  %9 = icmp ule i64 %8, 4294967295
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 2147483647
  %13 = call fastcc i1 @math.isnan.isNan__anon_3682(double %0)
  br i1 %13, label %18, label %20

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @96)
  unreachable

16:                                               ; preds = %20
  %17 = icmp uge i32 %12, 1083174912
  br i1 %17, label %32, label %34

18:                                               ; preds = %10
  store double 0x7FF0000000000001, ptr %5, align 8
  %19 = load double, ptr %5, align 8
  ret double %19

20:                                               ; preds = %10
  br label %16

21:                                               ; preds = %72, %52
  %22 = fadd double %0, 0x42B8000000000000
  store double %22, ptr %4, align 8
  %23 = load double, ptr %4, align 8
  %24 = bitcast double %23 to i64
  %25 = trunc i64 %24 to i32
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = add i32 %26, 128
  store i32 %27, ptr %3, align 4
  %28 = load i32, ptr %3, align 4
  %29 = udiv i32 %28, 256
  %30 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 %29, i32 256)
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %76, label %77

32:                                               ; preds = %16
  %33 = icmp uge i32 %12, 1083179008
  br i1 %33, label %40, label %43

34:                                               ; preds = %16
  %35 = icmp ult i32 %12, 1016070144
  br i1 %35, label %73, label %75

36:                                               ; preds = %45
  %37 = icmp uge i32 %12, 2146435072
  br i1 %37, label %49, label %51

38:                                               ; preds = %43, %40
  %39 = phi i1 [ %42, %40 ], [ false, %43 ]
  br i1 %39, label %44, label %45

40:                                               ; preds = %32
  %41 = lshr i64 %6, 63
  %42 = icmp eq i64 %41, 0
  br label %38

43:                                               ; preds = %32
  br label %38

44:                                               ; preds = %38
  call fastcc void @math.raiseOverflow()
  ret double 0x7FF0000000000000

45:                                               ; preds = %38
  br label %36

46:                                               ; preds = %51
  %47 = lshr i64 %6, 63
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %53, label %55

49:                                               ; preds = %36
  %50 = fdiv double -1.000000e+00, %0
  ret double %50

51:                                               ; preds = %36
  br label %46

52:                                               ; preds = %69, %55
  br label %21

53:                                               ; preds = %46
  %54 = fcmp ole double %0, -1.075000e+03
  br i1 %54, label %60, label %61

55:                                               ; preds = %46
  br label %52

56:                                               ; preds = %68, %65
  %57 = fcmp ole double %0, -1.075000e+03
  br i1 %57, label %70, label %71

58:                                               ; preds = %61, %60
  %59 = phi i1 [ true, %60 ], [ %64, %61 ]
  br i1 %59, label %65, label %68

60:                                               ; preds = %53
  br label %58

61:                                               ; preds = %53
  %62 = fsub double %0, 0x4330000000000000
  %63 = fadd double %62, 0x4330000000000000
  %64 = fcmp une double %63, %0
  br label %58

65:                                               ; preds = %58
  %66 = fdiv double 0xB6A0000000000000, %0
  %67 = fptrunc double %66 to float
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %67)
  br label %56

68:                                               ; preds = %58
  br label %56

69:                                               ; preds = %71
  br label %52

70:                                               ; preds = %56
  ret double 0.000000e+00

71:                                               ; preds = %56
  br label %69

72:                                               ; preds = %75
  br label %21

73:                                               ; preds = %34
  %74 = fadd double 1.000000e+00, %0
  ret double %74

75:                                               ; preds = %34
  br label %72

76:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %21
  %78 = extractvalue { i32, i1 } %30, 0
  %79 = sdiv i32 %78, 256
  %80 = load i32, ptr %3, align 4
  %81 = urem i32 %80, 256
  store i32 %81, ptr %3, align 4
  %82 = load double, ptr %4, align 8
  %83 = fsub double %82, 0x42B8000000000000
  store double %83, ptr %4, align 8
  %84 = load double, ptr %4, align 8
  %85 = fsub double %0, %84
  store double %85, ptr %2, align 8
  %86 = load i32, ptr %3, align 4
  %87 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 2, i32 %86)
  %88 = extractvalue { i32, i1 } %87, 1
  br i1 %88, label %89, label %90

89:                                               ; preds = %77
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

90:                                               ; preds = %77
  %91 = extractvalue { i32, i1 } %87, 0
  %92 = zext i32 %91 to i64
  %93 = icmp ult i64 %92, 512
  br i1 %93, label %101, label %102

94:                                               ; preds = %101
  %95 = getelementptr inbounds [512 x double], ptr @97, i64 0, i64 %92
  %96 = load double, ptr %95, align 8
  %97 = load double, ptr %2, align 8
  %98 = load i32, ptr %3, align 4
  %99 = call fastcc { i32, i1 } @llvm.umul.with.overflow.i32(i32 2, i32 %98)
  %100 = extractvalue { i32, i1 } %99, 1
  br i1 %100, label %103, label %104

101:                                              ; preds = %90
  br label %94

102:                                              ; preds = %90
  call fastcc void @builtin.panicOutOfBounds(i64 %92, i64 512)
  unreachable

103:                                              ; preds = %94
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %94
  %105 = extractvalue { i32, i1 } %99, 0
  %106 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %105, i32 1)
  %107 = extractvalue { i32, i1 } %106, 1
  br i1 %107, label %108, label %109

108:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

109:                                              ; preds = %104
  %110 = extractvalue { i32, i1 } %106, 0
  %111 = zext i32 %110 to i64
  %112 = icmp ult i64 %111, 512
  br i1 %112, label %134, label %135

113:                                              ; preds = %134
  %114 = getelementptr inbounds [512 x double], ptr @97, i64 0, i64 %111
  %115 = load double, ptr %114, align 8
  %116 = fsub double %97, %115
  store double %116, ptr %2, align 8
  %117 = load double, ptr %2, align 8
  %118 = fmul double %96, %117
  %119 = load double, ptr %2, align 8
  %120 = load double, ptr %2, align 8
  %121 = load double, ptr %2, align 8
  %122 = load double, ptr %2, align 8
  %123 = fmul double %122, 0x3F55D88003875C74
  %124 = fadd double 0x3F83B2AB88F70400, %123
  %125 = fmul double %121, %124
  %126 = fadd double 0x3FAC6B08D704A0A6, %125
  %127 = fmul double %120, %126
  %128 = fadd double 0x3FCEBFBDFF82C575, %127
  %129 = fmul double %119, %128
  %130 = fadd double 0x3FE62E42FEFA39EF, %129
  %131 = fmul double %118, %130
  %132 = fadd double %96, %131
  %133 = call fastcc double @math.ldexp.ldexp__anon_3735(double %132, i32 %79)
  ret double %133

134:                                              ; preds = %109
  br label %113

135:                                              ; preds = %109
  call fastcc void @builtin.panicOutOfBounds(i64 %111, i64 512)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__exp2x(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @exp2q(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @exp2q(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @exp2(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @exp2l(double %0) #0 {
  %2 = call double @exp2(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__fabsh(half %0) #0 {
  %2 = bitcast half %0 to i16
  %3 = and i16 %2, 32767
  %4 = bitcast i16 %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @fabsf(float %0) #0 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = bitcast i32 %3 to float
  ret float %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fabs(double %0) #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fabsl(double %0) #0 {
  %2 = call double @fabs(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__floorh(half %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = bitcast half %0 to i16
  store i16 %5, ptr %4, align 2
  %6 = load i16, ptr %4, align 2
  %7 = lshr i16 %6, 10
  %8 = and i16 %7, 31
  %9 = sub i16 32767, %8
  %10 = icmp ule i16 %9, 32767
  br i1 %10, label %14, label %15

11:                                               ; preds = %14
  %12 = call fastcc { i16, i1 } @llvm.ssub.with.overflow.i16(i16 %8, i16 15)
  %13 = extractvalue { i16, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  br label %11

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @98)
  unreachable

16:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %11
  %18 = extractvalue { i16, i1 } %12, 0
  call void @llvm.memset.p0.i64(ptr align 2 %3, i8 -86, i64 2, i1 false)
  %19 = fcmp oeq half %0, 0xH0000
  br i1 %19, label %22, label %23

20:                                               ; preds = %23
  %21 = icmp sge i16 %18, 10
  br i1 %21, label %26, label %27

22:                                               ; preds = %17
  ret half %0

23:                                               ; preds = %17
  br label %20

24:                                               ; preds = %27
  %25 = icmp sge i16 %18, 0
  br i1 %25, label %28, label %31

26:                                               ; preds = %20
  ret half %0

27:                                               ; preds = %20
  br label %24

28:                                               ; preds = %24
  %29 = sub i16 15, %18
  %30 = icmp ule i16 %29, 15
  br i1 %30, label %44, label %45

31:                                               ; preds = %24
  %32 = fadd half %0, 0xH7C00
  call fastcc void @math.doNotOptimizeAway__anon_3782(half %32)
  %33 = load i16, ptr %4, align 2
  %34 = lshr i16 %33, 15
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %68, label %69

36:                                               ; preds = %44
  %37 = trunc i16 %18 to i4
  %38 = zext i4 %37 to i16
  %39 = lshr i16 1023, %38
  store i16 %39, ptr %3, align 2
  %40 = load i16, ptr %4, align 2
  %41 = load i16, ptr %3, align 2
  %42 = and i16 %40, %41
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %51, label %52

44:                                               ; preds = %28
  br label %36

45:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @98)
  unreachable

46:                                               ; preds = %52
  %47 = fadd half %0, 0xH7C00
  call fastcc void @math.doNotOptimizeAway__anon_3782(half %47)
  %48 = load i16, ptr %4, align 2
  %49 = lshr i16 %48, 15
  %50 = icmp ne i16 %49, 0
  br i1 %50, label %59, label %64

51:                                               ; preds = %36
  ret half %0

52:                                               ; preds = %36
  br label %46

53:                                               ; preds = %66, %64
  %54 = load i16, ptr %4, align 2
  %55 = load i16, ptr %3, align 2
  %56 = xor i16 %55, -1
  %57 = and i16 %54, %56
  %58 = bitcast i16 %57 to half
  ret half %58

59:                                               ; preds = %46
  %60 = load i16, ptr %4, align 2
  %61 = load i16, ptr %3, align 2
  %62 = call fastcc { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %60, i16 %61)
  %63 = extractvalue { i16, i1 } %62, 1
  br i1 %63, label %65, label %66

64:                                               ; preds = %46
  br label %53

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i16, i1 } %62, 0
  store i16 %67, ptr %4, align 2
  br label %53

68:                                               ; preds = %31
  ret half 0xH0000

69:                                               ; preds = %31
  ret half 0xHBC00
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i16, i1 } @llvm.ssub.with.overflow.i16(i16, i16) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.doNotOptimizeAway__anon_3782(half %0) unnamed_addr #0 {
  call fastcc void @mem.doNotOptimizeAway__anon_6123(half %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_6123(half %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca half, align 2
  %4 = alloca i8, align 1
  store i8 0, ptr %4, align 1
  store half %0, ptr %3, align 2
  call fastcc void @mem.doNotOptimizeAway__anon_6724(ptr nonnull readonly align 2 %3)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @mem.doNotOptimizeAway__anon_6724(ptr nonnull readonly align 2 %0) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca ptr, align 8
  %4 = alloca i8, align 1
  store i8 0, ptr %4, align 1
  store ptr %0, ptr %3, align 8
  call void asm sideeffect "", "m,~{memory}"(ptr %3)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @floorf(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast float %0 to i32
  store i32 %5, ptr %4, align 4
  %6 = load i32, ptr %4, align 4
  %7 = lshr i32 %6, 23
  %8 = and i32 %7, 255
  %9 = sub i32 2147483647, %8
  %10 = icmp ule i32 %9, 2147483647
  br i1 %10, label %14, label %15

11:                                               ; preds = %14
  %12 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 127)
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  br label %11

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @99)
  unreachable

16:                                               ; preds = %11
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %11
  %18 = extractvalue { i32, i1 } %12, 0
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %19 = fcmp oeq float %0, 0.000000e+00
  br i1 %19, label %22, label %23

20:                                               ; preds = %23
  %21 = icmp sge i32 %18, 23
  br i1 %21, label %26, label %27

22:                                               ; preds = %17
  ret float %0

23:                                               ; preds = %17
  br label %20

24:                                               ; preds = %27
  %25 = icmp sge i32 %18, 0
  br i1 %25, label %28, label %31

26:                                               ; preds = %20
  ret float %0

27:                                               ; preds = %20
  br label %24

28:                                               ; preds = %24
  %29 = sub i32 31, %18
  %30 = icmp ule i32 %29, 31
  br i1 %30, label %44, label %45

31:                                               ; preds = %24
  %32 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %32)
  %33 = load i32, ptr %4, align 4
  %34 = lshr i32 %33, 31
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %68, label %69

36:                                               ; preds = %44
  %37 = trunc i32 %18 to i5
  %38 = zext i5 %37 to i32
  %39 = lshr i32 8388607, %38
  store i32 %39, ptr %3, align 4
  %40 = load i32, ptr %4, align 4
  %41 = load i32, ptr %3, align 4
  %42 = and i32 %40, %41
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %51, label %52

44:                                               ; preds = %28
  br label %36

45:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @99)
  unreachable

46:                                               ; preds = %52
  %47 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %47)
  %48 = load i32, ptr %4, align 4
  %49 = lshr i32 %48, 31
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %59, label %64

51:                                               ; preds = %36
  ret float %0

52:                                               ; preds = %36
  br label %46

53:                                               ; preds = %66, %64
  %54 = load i32, ptr %4, align 4
  %55 = load i32, ptr %3, align 4
  %56 = xor i32 %55, -1
  %57 = and i32 %54, %56
  %58 = bitcast i32 %57 to float
  ret float %58

59:                                               ; preds = %46
  %60 = load i32, ptr %4, align 4
  %61 = load i32, ptr %3, align 4
  %62 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %60, i32 %61)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %65, label %66

64:                                               ; preds = %46
  br label %53

65:                                               ; preds = %59
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

66:                                               ; preds = %59
  %67 = extractvalue { i32, i1 } %62, 0
  store i32 %67, ptr %4, align 4
  br label %53

68:                                               ; preds = %31
  ret float 0.000000e+00

69:                                               ; preds = %31
  ret float -1.000000e+00
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @floor(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca double, align 8
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 52
  %6 = and i64 %5, 2047
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %7 = icmp uge i64 %6, 1075
  br i1 %7, label %13, label %14

8:                                                ; preds = %17
  %9 = lshr i64 %4, 63
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %20, label %24

11:                                               ; preds = %14, %13
  %12 = phi i1 [ true, %13 ], [ %15, %14 ]
  br i1 %12, label %16, label %17

13:                                               ; preds = %1
  br label %11

14:                                               ; preds = %1
  %15 = fcmp oeq double %0, 0.000000e+00
  br label %11

16:                                               ; preds = %11
  ret double %0

17:                                               ; preds = %11
  br label %8

18:                                               ; preds = %24, %20
  %19 = icmp ule i64 %6, 1022
  br i1 %19, label %28, label %32

20:                                               ; preds = %8
  %21 = fsub double %0, 0x4330000000000000
  %22 = fadd double %21, 0x4330000000000000
  %23 = fsub double %22, %0
  store double %23, ptr %3, align 8
  br label %18

24:                                               ; preds = %8
  %25 = fadd double %0, 0x4330000000000000
  %26 = fsub double %25, 0x4330000000000000
  %27 = fsub double %26, %0
  store double %27, ptr %3, align 8
  br label %18

28:                                               ; preds = %18
  %29 = load double, ptr %3, align 8
  call fastcc void @math.doNotOptimizeAway__anon_3744(double %29)
  %30 = lshr i64 %4, 63
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %35, label %36

32:                                               ; preds = %18
  %33 = load double, ptr %3, align 8
  %34 = fcmp ogt double %33, 0.000000e+00
  br i1 %34, label %37, label %41

35:                                               ; preds = %28
  ret double -1.000000e+00

36:                                               ; preds = %28
  ret double 0.000000e+00

37:                                               ; preds = %32
  %38 = load double, ptr %3, align 8
  %39 = fadd double %0, %38
  %40 = fsub double %39, 1.000000e+00
  ret double %40

41:                                               ; preds = %32
  %42 = load double, ptr %3, align 8
  %43 = fadd double %0, %42
  ret double %43
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__floorx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @floorq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @floorq(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca fp128, align 16
  %4 = bitcast fp128 %0 to i128
  %5 = lshr i128 %4, 112
  %6 = and i128 %5, 32767
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %7 = icmp uge i128 %6, 16495
  br i1 %7, label %13, label %14

8:                                                ; preds = %18
  %9 = lshr i128 %4, 127
  %10 = icmp ne i128 %9, 0
  br i1 %10, label %21, label %25

11:                                               ; preds = %14, %13
  %12 = phi i1 [ true, %13 ], [ %16, %14 ]
  br i1 %12, label %17, label %18

13:                                               ; preds = %1
  br label %11

14:                                               ; preds = %1
  %15 = call i32 @__eqtf2(fp128 %0, fp128 0xL00000000000000000000000000000000)
  %16 = icmp eq i32 %15, 0
  br label %11

17:                                               ; preds = %11
  ret fp128 %0

18:                                               ; preds = %11
  br label %8

19:                                               ; preds = %25, %21
  %20 = icmp ule i128 %6, 16382
  br i1 %20, label %29, label %33

21:                                               ; preds = %8
  %22 = call fp128 @__subtf3(fp128 %0, fp128 0xL0000000000000000406F000000000000)
  %23 = call fp128 @__addtf3(fp128 %22, fp128 0xL0000000000000000406F000000000000)
  %24 = call fp128 @__subtf3(fp128 %23, fp128 %0)
  store fp128 %24, ptr %3, align 16
  br label %19

25:                                               ; preds = %8
  %26 = call fp128 @__addtf3(fp128 %0, fp128 0xL0000000000000000406F000000000000)
  %27 = call fp128 @__subtf3(fp128 %26, fp128 0xL0000000000000000406F000000000000)
  %28 = call fp128 @__subtf3(fp128 %27, fp128 %0)
  store fp128 %28, ptr %3, align 16
  br label %19

29:                                               ; preds = %19
  %30 = load fp128, ptr %3, align 16
  call fastcc void @math.doNotOptimizeAway__anon_3745(fp128 %30)
  %31 = lshr i128 %4, 127
  %32 = icmp ne i128 %31, 0
  br i1 %32, label %37, label %38

33:                                               ; preds = %19
  %34 = load fp128, ptr %3, align 16
  %35 = call i32 @__gttf2(fp128 %34, fp128 0xL00000000000000000000000000000000)
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %39, label %43

37:                                               ; preds = %29
  ret fp128 0xL0000000000000000BFFF000000000000

38:                                               ; preds = %29
  ret fp128 0xL00000000000000000000000000000000

39:                                               ; preds = %33
  %40 = load fp128, ptr %3, align 16
  %41 = call fp128 @__addtf3(fp128 %0, fp128 %40)
  %42 = call fp128 @__subtf3(fp128 %41, fp128 0xL00000000000000003FFF000000000000)
  ret fp128 %42

43:                                               ; preds = %33
  %44 = load fp128, ptr %3, align 16
  %45 = call fp128 @__addtf3(fp128 %0, fp128 %44)
  ret fp128 %45
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @floorl(double %0) #0 {
  %2 = call double @floor(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__fmah(half %0, half %1, half %2) #0 {
  %4 = fpext half %0 to float
  %5 = fpext half %1 to float
  %6 = fpext half %2 to float
  %7 = call float @fmaf(float %4, float %5, float %6)
  %8 = fptrunc float %7 to half
  ret half %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @fmaf(float %0, float %1, float %2) #0 {
  %4 = fpext float %0 to double
  %5 = fpext float %1 to double
  %6 = fmul double %4, %5
  %7 = fpext float %2 to double
  %8 = fadd double %6, %7
  %9 = bitcast double %8 to i64
  %10 = lshr i64 %9, 52
  %11 = and i64 %10, 2047
  %12 = and i64 %9, 536870911
  %13 = icmp ne i64 %12, 268435456
  br i1 %13, label %16, label %17

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %18, %17 ]
  br i1 %15, label %21, label %22

16:                                               ; preds = %3
  br label %14

17:                                               ; preds = %3
  %18 = icmp eq i64 %11, 2047
  br label %14

19:                                               ; preds = %26, %21
  %20 = phi i1 [ true, %21 ], [ %27, %26 ]
  br i1 %20, label %33, label %35

21:                                               ; preds = %14
  br label %19

22:                                               ; preds = %14
  %23 = fsub double %8, %6
  %24 = fpext float %2 to double
  %25 = fcmp oeq double %23, %24
  br i1 %25, label %28, label %32

26:                                               ; preds = %32, %28
  %27 = phi i1 [ %31, %28 ], [ false, %32 ]
  br label %19

28:                                               ; preds = %22
  %29 = fpext float %2 to double
  %30 = fsub double %8, %29
  %31 = fcmp oeq double %30, %6
  br label %26

32:                                               ; preds = %22
  br label %26

33:                                               ; preds = %19
  %34 = fptrunc double %8 to float
  ret float %34

35:                                               ; preds = %19
  %36 = fptrunc double %8 to float
  ret float %36
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fma(double %0, double %1, double %2) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %6 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = alloca %"math.frexp.Frexp(f64)", align 8
  %11 = alloca double, align 8
  %12 = alloca i32, align 4
  %13 = alloca %"math.frexp.Frexp(f64)", align 8
  %14 = alloca double, align 8
  %15 = alloca i32, align 4
  %16 = alloca %"math.frexp.Frexp(f64)", align 8
  %17 = call fastcc i1 @math.isfinite.isFinite__anon_3736(double %0)
  %18 = xor i1 %17, true
  br i1 %18, label %24, label %25

19:                                               ; preds = %31
  %20 = call fastcc i1 @math.isfinite.isFinite__anon_3736(double %2)
  %21 = xor i1 %20, true
  br i1 %21, label %34, label %35

22:                                               ; preds = %25, %24
  %23 = phi i1 [ true, %24 ], [ %27, %25 ]
  br i1 %23, label %28, label %31

24:                                               ; preds = %3
  br label %22

25:                                               ; preds = %3
  %26 = call fastcc i1 @math.isfinite.isFinite__anon_3736(double %1)
  %27 = xor i1 %26, true
  br label %22

28:                                               ; preds = %22
  %29 = fmul double %0, %1
  %30 = fadd double %29, %2
  ret double %30

31:                                               ; preds = %22
  br label %19

32:                                               ; preds = %35
  %33 = fcmp oeq double %0, 0.000000e+00
  br i1 %33, label %40, label %41

34:                                               ; preds = %19
  ret double %2

35:                                               ; preds = %19
  br label %32

36:                                               ; preds = %46
  %37 = fcmp oeq double %2, 0.000000e+00
  br i1 %37, label %64, label %66

38:                                               ; preds = %41, %40
  %39 = phi i1 [ true, %40 ], [ %42, %41 ]
  br i1 %39, label %43, label %46

40:                                               ; preds = %32
  br label %38

41:                                               ; preds = %32
  %42 = fcmp oeq double %1, 0.000000e+00
  br label %38

43:                                               ; preds = %38
  %44 = fmul double %0, %1
  %45 = fadd double %44, %2
  ret double %45

46:                                               ; preds = %38
  br label %36

47:                                               ; preds = %66
  call fastcc void @math.frexp.frexp__anon_3800(ptr sret(%"math.frexp.Frexp(f64)") %16, double %0)
  %48 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %16, i32 0, i32 1
  %49 = load i32, ptr %48, align 4
  store i32 %49, ptr %15, align 4
  %50 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %16, i32 0, i32 0
  %51 = load double, ptr %50, align 8
  store double %51, ptr %14, align 8
  call fastcc void @math.frexp.frexp__anon_3800(ptr sret(%"math.frexp.Frexp(f64)") %13, double %1)
  %52 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %13, i32 0, i32 1
  %53 = load i32, ptr %52, align 4
  store i32 %53, ptr %12, align 4
  %54 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %13, i32 0, i32 0
  %55 = load double, ptr %54, align 8
  store double %55, ptr %11, align 8
  call fastcc void @math.frexp.frexp__anon_3800(ptr sret(%"math.frexp.Frexp(f64)") %10, double %2)
  %56 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %10, i32 0, i32 1
  %57 = load i32, ptr %56, align 4
  store i32 %57, ptr %9, align 4
  %58 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %10, i32 0, i32 0
  %59 = load double, ptr %58, align 8
  store double %59, ptr %8, align 8
  %60 = load i32, ptr %15, align 4
  %61 = load i32, ptr %12, align 4
  %62 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %60, i32 %61)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %67, label %68

64:                                               ; preds = %36
  %65 = fmul double %0, %1
  ret double %65

66:                                               ; preds = %36
  br label %47

67:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %47
  %69 = extractvalue { i32, i1 } %62, 0
  %70 = load i32, ptr %9, align 4
  %71 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %69, i32 %70)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %73, label %74

73:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %68
  %75 = extractvalue { i32, i1 } %71, 0
  store i32 %75, ptr %7, align 4
  %76 = load i32, ptr %7, align 4
  %77 = icmp sle i32 %76, 106
  br i1 %77, label %88, label %93

78:                                               ; preds = %97, %93
  %79 = load double, ptr %14, align 8
  %80 = load double, ptr %11, align 8
  call fastcc void @compiler_rt.fma.dd_mul(ptr sret(%"compiler_rt.mulc3.Complex(f64)") %6, double %79, double %80)
  %81 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 0
  %82 = load double, ptr %81, align 8
  %83 = load double, ptr %8, align 8
  call fastcc void @compiler_rt.fma.dd_add(ptr sret(%"compiler_rt.mulc3.Complex(f64)") %5, double %82, double %83)
  %84 = load i32, ptr %15, align 4
  %85 = load i32, ptr %12, align 4
  %86 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %84, i32 %85)
  %87 = extractvalue { i32, i1 } %86, 1
  br i1 %87, label %100, label %101

88:                                               ; preds = %74
  %89 = load double, ptr %8, align 8
  %90 = load i32, ptr %7, align 4
  %91 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %90)
  %92 = extractvalue { i32, i1 } %91, 1
  br i1 %92, label %96, label %97

93:                                               ; preds = %74
  %94 = load double, ptr %8, align 8
  %95 = call fastcc double @math.copysign.copysign__anon_3683(double 0x10000000000000, double %94)
  store double %95, ptr %8, align 8
  br label %78

96:                                               ; preds = %88
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %88
  %98 = extractvalue { i32, i1 } %91, 0
  %99 = call fastcc double @math.ldexp.ldexp__anon_3735(double %89, i32 %98)
  store double %99, ptr %8, align 8
  br label %78

100:                                              ; preds = %78
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

101:                                              ; preds = %78
  %102 = extractvalue { i32, i1 } %86, 0
  store i32 %102, ptr %7, align 4
  %103 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %104 = load double, ptr %103, align 8
  %105 = fcmp oeq double %104, 0.000000e+00
  br i1 %105, label %118, label %128

106:                                              ; preds = %128
  %107 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 1
  %108 = load double, ptr %107, align 8
  %109 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 1
  %110 = load double, ptr %109, align 8
  %111 = call fastcc double @compiler_rt.fma.add_adjusted(double %108, double %110)
  %112 = load i32, ptr %7, align 4
  %113 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %114 = load double, ptr %113, align 8
  %115 = call fastcc i32 @math.ilogb.ilogb__anon_3734(double %114)
  %116 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %112, i32 %115)
  %117 = extractvalue { i32, i1 } %116, 1
  br i1 %117, label %129, label %130

118:                                              ; preds = %101
  %119 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 0
  %120 = load double, ptr %119, align 8
  %121 = load double, ptr %8, align 8
  %122 = fadd double %120, %121
  %123 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 1
  %124 = load double, ptr %123, align 8
  %125 = load i32, ptr %7, align 4
  %126 = call fastcc double @math.ldexp.ldexp__anon_3735(double %124, i32 %125)
  %127 = fadd double %122, %126
  ret double %127

128:                                              ; preds = %101
  br label %106

129:                                              ; preds = %106
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

130:                                              ; preds = %106
  %131 = extractvalue { i32, i1 } %116, 0
  %132 = icmp sgt i32 %131, -1023
  br i1 %132, label %133, label %139

133:                                              ; preds = %130
  %134 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %135 = load double, ptr %134, align 8
  %136 = fadd double %135, %111
  %137 = load i32, ptr %7, align 4
  %138 = call fastcc double @math.ldexp.ldexp__anon_3735(double %136, i32 %137)
  ret double %138

139:                                              ; preds = %130
  %140 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %141 = load double, ptr %140, align 8
  %142 = load i32, ptr %7, align 4
  %143 = call fastcc double @compiler_rt.fma.add_and_denorm(double %141, double %111, i32 %142)
  ret double %143
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.frexp.frexp__anon_3800(ptr noalias nonnull sret(%"math.frexp.Frexp(f64)") %0, double %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"math.frexp.Frexp(f64)", align 8
  call fastcc void @math.frexp.frexp64(ptr sret(%"math.frexp.Frexp(f64)") %4, double %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %4, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.fma.dd_mul(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f64)") %0, double %1, double %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 -86, i64 16, i1 false)
  %12 = fmul double %1, 0x41A0000002000000
  store double %12, ptr %10, align 8
  %13 = load double, ptr %10, align 8
  %14 = fsub double %1, %13
  store double %14, ptr %9, align 8
  %15 = load double, ptr %9, align 8
  %16 = load double, ptr %10, align 8
  %17 = fadd double %15, %16
  store double %17, ptr %9, align 8
  %18 = load double, ptr %9, align 8
  %19 = fsub double %1, %18
  store double %19, ptr %8, align 8
  %20 = fmul double %2, 0x41A0000002000000
  store double %20, ptr %10, align 8
  %21 = load double, ptr %10, align 8
  %22 = fsub double %2, %21
  store double %22, ptr %7, align 8
  %23 = load double, ptr %7, align 8
  %24 = load double, ptr %10, align 8
  %25 = fadd double %23, %24
  store double %25, ptr %7, align 8
  %26 = load double, ptr %7, align 8
  %27 = fsub double %2, %26
  store double %27, ptr %6, align 8
  %28 = load double, ptr %9, align 8
  %29 = load double, ptr %7, align 8
  %30 = fmul double %28, %29
  store double %30, ptr %10, align 8
  %31 = load double, ptr %9, align 8
  %32 = load double, ptr %6, align 8
  %33 = fmul double %31, %32
  %34 = load double, ptr %8, align 8
  %35 = load double, ptr %7, align 8
  %36 = fmul double %34, %35
  %37 = fadd double %33, %36
  store double %37, ptr %5, align 8
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %11, i32 0, i32 0
  %39 = load double, ptr %10, align 8
  %40 = load double, ptr %5, align 8
  %41 = fadd double %39, %40
  store double %41, ptr %38, align 8
  %42 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %11, i32 0, i32 1
  %43 = load double, ptr %10, align 8
  %44 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %11, i32 0, i32 0
  %45 = load double, ptr %44, align 8
  %46 = fsub double %43, %45
  %47 = load double, ptr %5, align 8
  %48 = fadd double %46, %47
  %49 = load double, ptr %8, align 8
  %50 = load double, ptr %6, align 8
  %51 = fmul double %49, %50
  %52 = fadd double %48, %51
  store double %52, ptr %42, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.fma.dd_add(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f64)") %0, double %1, double %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 16, i1 false)
  %6 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %7 = fadd double %1, %2
  store double %7, ptr %6, align 8
  %8 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %9 = load double, ptr %8, align 8
  %10 = fsub double %9, %1
  %11 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 1
  %12 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %5, i32 0, i32 0
  %13 = load double, ptr %12, align 8
  %14 = fsub double %13, %10
  %15 = fsub double %1, %14
  %16 = fsub double %2, %10
  %17 = fadd double %15, %16
  store double %17, ptr %11, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.fma.add_adjusted(double %0, double %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %6 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  call fastcc void @compiler_rt.fma.dd_add(ptr sret(%"compiler_rt.mulc3.Complex(f64)") %5, double %0, double %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false)
  %7 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 1
  %8 = load double, ptr %7, align 8
  %9 = fcmp une double %8, 0.000000e+00
  br i1 %9, label %13, label %20

10:                                               ; preds = %21, %20
  %11 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 0
  %12 = load double, ptr %11, align 8
  ret double %12

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 0
  %15 = load double, ptr %14, align 8
  %16 = bitcast double %15 to i64
  store i64 %16, ptr %4, align 8
  %17 = load i64, ptr %4, align 8
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %22, label %32

20:                                               ; preds = %2
  br label %10

21:                                               ; preds = %39, %32
  br label %10

22:                                               ; preds = %13
  %23 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 1
  %24 = load double, ptr %23, align 8
  %25 = bitcast double %24 to i64
  %26 = load i64, ptr %4, align 8
  %27 = load i64, ptr %4, align 8
  %28 = xor i64 %27, %25
  %29 = lshr i64 %28, 62
  %30 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 1, i64 %29)
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %33, label %34

32:                                               ; preds = %13
  br label %21

33:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

34:                                               ; preds = %22
  %35 = extractvalue { i64, i1 } %30, 0
  %36 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %26, i64 %35)
  %37 = extractvalue { i64, i1 } %36, 1
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

39:                                               ; preds = %34
  %40 = extractvalue { i64, i1 } %36, 0
  store i64 %40, ptr %4, align 8
  %41 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %6, i32 0, i32 0
  %42 = load i64, ptr %4, align 8
  %43 = bitcast i64 %42 to double
  store double %43, ptr %41, align 8
  br label %21
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.fma.add_and_denorm(double %0, double %1, i32 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca i64, align 8
  %6 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  %7 = alloca %"compiler_rt.mulc3.Complex(f64)", align 8
  call fastcc void @compiler_rt.fma.dd_add(ptr sret(%"compiler_rt.mulc3.Complex(f64)") %6, double %0, double %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %6, i64 16, i1 false)
  %8 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 1
  %9 = load double, ptr %8, align 8
  %10 = fcmp une double %9, 0.000000e+00
  br i1 %10, label %15, label %24

11:                                               ; preds = %49, %24
  %12 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %13 = load double, ptr %12, align 8
  %14 = call fastcc double @math.ldexp.ldexp__anon_3735(double %13, i32 %2)
  ret double %14

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %17 = load double, ptr %16, align 8
  %18 = bitcast double %17 to i64
  store i64 %18, ptr %5, align 8
  %19 = load i64, ptr %5, align 8
  %20 = lshr i64 %19, 52
  %21 = and i64 %20, 2047
  %22 = sub i64 2147483647, %21
  %23 = icmp ule i64 %22, 2147483647
  br i1 %23, label %29, label %30

24:                                               ; preds = %3
  br label %11

25:                                               ; preds = %29
  %26 = trunc i64 %21 to i32
  %27 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %26)
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %31, label %32

29:                                               ; preds = %15
  br label %25

30:                                               ; preds = %15
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @167)
  unreachable

31:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

32:                                               ; preds = %25
  %33 = extractvalue { i32, i1 } %27, 0
  %34 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %33, i32 %2)
  %35 = extractvalue { i32, i1 } %34, 1
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

37:                                               ; preds = %32
  %38 = extractvalue { i32, i1 } %34, 0
  %39 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %38, i32 1)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %41, label %42

41:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

42:                                               ; preds = %37
  %43 = extractvalue { i32, i1 } %39, 0
  %44 = icmp ne i32 %43, 1
  %45 = load i64, ptr %5, align 8
  %46 = and i64 %45, 1
  %47 = icmp ne i64 %46, 0
  %48 = icmp eq i1 %44, %47
  br i1 %48, label %50, label %61

49:                                               ; preds = %68, %61
  br label %11

50:                                               ; preds = %42
  %51 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 1
  %52 = load double, ptr %51, align 8
  %53 = bitcast double %52 to i64
  %54 = load i64, ptr %5, align 8
  %55 = load i64, ptr %5, align 8
  %56 = xor i64 %55, %53
  %57 = lshr i64 %56, 62
  %58 = and i64 %57, 2
  %59 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 1, i64 %58)
  %60 = extractvalue { i64, i1 } %59, 1
  br i1 %60, label %62, label %63

61:                                               ; preds = %42
  br label %49

62:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

63:                                               ; preds = %50
  %64 = extractvalue { i64, i1 } %59, 0
  %65 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %54, i64 %64)
  %66 = extractvalue { i64, i1 } %65, 1
  br i1 %66, label %67, label %68

67:                                               ; preds = %63
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

68:                                               ; preds = %63
  %69 = extractvalue { i64, i1 } %65, 0
  store i64 %69, ptr %5, align 8
  %70 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f64)", ptr %7, i32 0, i32 0
  %71 = load i64, ptr %5, align 8
  %72 = bitcast i64 %71 to double
  store double %72, ptr %70, align 8
  br label %49
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.frexp.frexp64(ptr noalias nonnull sret(%"math.frexp.Frexp(f64)") %0, double %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"math.frexp.Frexp(f64)", align 8
  %5 = alloca i64, align 8
  %6 = alloca %"math.frexp.Frexp(f64)", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 16, i1 false)
  %7 = bitcast double %1 to i64
  store i64 %7, ptr %5, align 8
  %8 = load i64, ptr %5, align 8
  %9 = lshr i64 %8, 52
  %10 = sub i64 2147483647, %9
  %11 = icmp ule i64 %10, 2147483647
  br i1 %11, label %16, label %17

12:                                               ; preds = %16
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 2047
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %22, label %24

16:                                               ; preds = %2
  br label %12

17:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @188)
  unreachable

18:                                               ; preds = %39
  %19 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  %20 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 1022)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %51, label %52

22:                                               ; preds = %12
  %23 = fcmp une double %1, 0.000000e+00
  br i1 %23, label %27, label %33

24:                                               ; preds = %12
  %25 = icmp eq i32 %14, 2047
  br i1 %25, label %40, label %46

26:                                               ; preds = %37, %33
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void

27:                                               ; preds = %22
  %28 = fmul double %1, 0x43F0000000000000
  call fastcc void @math.frexp.frexp64(ptr sret(%"math.frexp.Frexp(f64)") %4, double %28)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %4, i64 16, i1 false)
  %29 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  %30 = load i32, ptr %29, align 4
  %31 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 64)
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %36, label %37

33:                                               ; preds = %22
  %34 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 0
  store double %1, ptr %34, align 8
  %35 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  store i32 0, ptr %35, align 4
  br label %26

36:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

37:                                               ; preds = %27
  %38 = extractvalue { i32, i1 } %31, 0
  store i32 %38, ptr %29, align 4
  br label %26

39:                                               ; preds = %46
  br label %18

40:                                               ; preds = %24
  %41 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 0
  store double %1, ptr %41, align 8
  %42 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  call void @llvm.memset.p0.i64(ptr align 4 %42, i8 -86, i64 4, i1 false)
  %43 = bitcast double %1 to i64
  %44 = and i64 %43, 9223372036854775807
  %45 = icmp eq i64 %44, 9218868437227405312
  br i1 %45, label %48, label %50

46:                                               ; preds = %24
  br label %39

47:                                               ; preds = %50, %48
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void

48:                                               ; preds = %40
  %49 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 1
  store i32 0, ptr %49, align 4
  br label %47

50:                                               ; preds = %40
  br label %47

51:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

52:                                               ; preds = %18
  %53 = extractvalue { i32, i1 } %20, 0
  store i32 %53, ptr %19, align 4
  %54 = load i64, ptr %5, align 8
  %55 = and i64 %54, -9218868437227405313
  store i64 %55, ptr %5, align 8
  %56 = load i64, ptr %5, align 8
  %57 = or i64 %56, 4602678819172646912
  store i64 %57, ptr %5, align 8
  %58 = getelementptr inbounds %"math.frexp.Frexp(f64)", ptr %6, i32 0, i32 0
  %59 = load i64, ptr %5, align 8
  %60 = bitcast i64 %59 to double
  store double %60, ptr %58, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__fmax(i80 %0, i80 %1, i80 %2) #0 {
  %4 = call fp128 @__extendxftf2(i80 %0)
  %5 = call fp128 @__extendxftf2(i80 %1)
  %6 = call fp128 @__extendxftf2(i80 %2)
  %7 = call fp128 @fmaq(fp128 %4, fp128 %5, fp128 %6)
  %8 = call i80 @__trunctfxf2(fp128 %7)
  ret i80 %8
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @fmaq(fp128 %0, fp128 %1, fp128 %2) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %6 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %7 = alloca i32, align 4
  %8 = alloca fp128, align 16
  %9 = alloca i32, align 4
  %10 = alloca %"math.frexp.Frexp(f128)", align 16
  %11 = alloca fp128, align 16
  %12 = alloca i32, align 4
  %13 = alloca %"math.frexp.Frexp(f128)", align 16
  %14 = alloca fp128, align 16
  %15 = alloca i32, align 4
  %16 = alloca %"math.frexp.Frexp(f128)", align 16
  %17 = call fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %0)
  %18 = xor i1 %17, true
  br i1 %18, label %24, label %25

19:                                               ; preds = %31
  %20 = call fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %2)
  %21 = xor i1 %20, true
  br i1 %21, label %35, label %36

22:                                               ; preds = %25, %24
  %23 = phi i1 [ true, %24 ], [ %27, %25 ]
  br i1 %23, label %28, label %31

24:                                               ; preds = %3
  br label %22

25:                                               ; preds = %3
  %26 = call fastcc i1 @math.isfinite.isFinite__anon_3742(fp128 %1)
  %27 = xor i1 %26, true
  br label %22

28:                                               ; preds = %22
  %29 = call fp128 @__multf3(fp128 %0, fp128 %1)
  %30 = call fp128 @__addtf3(fp128 %29, fp128 %2)
  ret fp128 %30

31:                                               ; preds = %22
  br label %19

32:                                               ; preds = %36
  %33 = call i32 @__eqtf2(fp128 %0, fp128 0xL00000000000000000000000000000000)
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %42, label %43

35:                                               ; preds = %19
  ret fp128 %2

36:                                               ; preds = %19
  br label %32

37:                                               ; preds = %49
  %38 = call i32 @__eqtf2(fp128 %2, fp128 0xL00000000000000000000000000000000)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %67, label %69

40:                                               ; preds = %43, %42
  %41 = phi i1 [ true, %42 ], [ %45, %43 ]
  br i1 %41, label %46, label %49

42:                                               ; preds = %32
  br label %40

43:                                               ; preds = %32
  %44 = call i32 @__eqtf2(fp128 %1, fp128 0xL00000000000000000000000000000000)
  %45 = icmp eq i32 %44, 0
  br label %40

46:                                               ; preds = %40
  %47 = call fp128 @__multf3(fp128 %0, fp128 %1)
  %48 = call fp128 @__addtf3(fp128 %47, fp128 %2)
  ret fp128 %48

49:                                               ; preds = %40
  br label %37

50:                                               ; preds = %69
  call fastcc void @math.frexp.frexp__anon_3803(ptr sret(%"math.frexp.Frexp(f128)") %16, fp128 %0)
  %51 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %16, i32 0, i32 1
  %52 = load i32, ptr %51, align 4
  store i32 %52, ptr %15, align 4
  %53 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %16, i32 0, i32 0
  %54 = load fp128, ptr %53, align 16
  store fp128 %54, ptr %14, align 16
  call fastcc void @math.frexp.frexp__anon_3803(ptr sret(%"math.frexp.Frexp(f128)") %13, fp128 %1)
  %55 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %13, i32 0, i32 1
  %56 = load i32, ptr %55, align 4
  store i32 %56, ptr %12, align 4
  %57 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %13, i32 0, i32 0
  %58 = load fp128, ptr %57, align 16
  store fp128 %58, ptr %11, align 16
  call fastcc void @math.frexp.frexp__anon_3803(ptr sret(%"math.frexp.Frexp(f128)") %10, fp128 %2)
  %59 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %10, i32 0, i32 1
  %60 = load i32, ptr %59, align 4
  store i32 %60, ptr %9, align 4
  %61 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %10, i32 0, i32 0
  %62 = load fp128, ptr %61, align 16
  store fp128 %62, ptr %8, align 16
  %63 = load i32, ptr %15, align 4
  %64 = load i32, ptr %12, align 4
  %65 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %63, i32 %64)
  %66 = extractvalue { i32, i1 } %65, 1
  br i1 %66, label %70, label %71

67:                                               ; preds = %37
  %68 = call fp128 @__multf3(fp128 %0, fp128 %1)
  ret fp128 %68

69:                                               ; preds = %37
  br label %50

70:                                               ; preds = %50
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %50
  %72 = extractvalue { i32, i1 } %65, 0
  %73 = load i32, ptr %9, align 4
  %74 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %72, i32 %73)
  %75 = extractvalue { i32, i1 } %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %71
  %78 = extractvalue { i32, i1 } %74, 0
  store i32 %78, ptr %7, align 4
  %79 = load i32, ptr %7, align 4
  %80 = icmp sle i32 %79, 226
  br i1 %80, label %91, label %96

81:                                               ; preds = %100, %96
  %82 = load fp128, ptr %14, align 16
  %83 = load fp128, ptr %11, align 16
  call fastcc void @compiler_rt.fma.dd_mul128(ptr sret(%"compiler_rt.mulc3.Complex(f128)") %6, fp128 %82, fp128 %83)
  %84 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 0
  %85 = load fp128, ptr %84, align 16
  %86 = load fp128, ptr %8, align 16
  call fastcc void @compiler_rt.fma.dd_add128(ptr sret(%"compiler_rt.mulc3.Complex(f128)") %5, fp128 %85, fp128 %86)
  %87 = load i32, ptr %15, align 4
  %88 = load i32, ptr %12, align 4
  %89 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %87, i32 %88)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %103, label %104

91:                                               ; preds = %77
  %92 = load fp128, ptr %8, align 16
  %93 = load i32, ptr %7, align 4
  %94 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %93)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %99, label %100

96:                                               ; preds = %77
  %97 = load fp128, ptr %8, align 16
  %98 = call fastcc fp128 @math.copysign.copysign__anon_3687(fp128 0xL00000000000000000001000000000000, fp128 %97)
  store fp128 %98, ptr %8, align 16
  br label %81

99:                                               ; preds = %91
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %91
  %101 = extractvalue { i32, i1 } %94, 0
  %102 = call fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %92, i32 %101)
  store fp128 %102, ptr %8, align 16
  br label %81

103:                                              ; preds = %81
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %81
  %105 = extractvalue { i32, i1 } %89, 0
  store i32 %105, ptr %7, align 4
  %106 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %107 = load fp128, ptr %106, align 16
  %108 = call i32 @__eqtf2(fp128 %107, fp128 0xL00000000000000000000000000000000)
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %122, label %132

110:                                              ; preds = %132
  %111 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 1
  %112 = load fp128, ptr %111, align 16
  %113 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 1
  %114 = load fp128, ptr %113, align 16
  %115 = call fastcc fp128 @compiler_rt.fma.add_adjusted128(fp128 %112, fp128 %114)
  %116 = load i32, ptr %7, align 4
  %117 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %118 = load fp128, ptr %117, align 16
  %119 = call fastcc i32 @math.ilogb.ilogb__anon_3740(fp128 %118)
  %120 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %116, i32 %119)
  %121 = extractvalue { i32, i1 } %120, 1
  br i1 %121, label %133, label %134

122:                                              ; preds = %104
  %123 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 0
  %124 = load fp128, ptr %123, align 16
  %125 = load fp128, ptr %8, align 16
  %126 = call fp128 @__addtf3(fp128 %124, fp128 %125)
  %127 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 1
  %128 = load fp128, ptr %127, align 16
  %129 = load i32, ptr %7, align 4
  %130 = call fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %128, i32 %129)
  %131 = call fp128 @__addtf3(fp128 %126, fp128 %130)
  ret fp128 %131

132:                                              ; preds = %104
  br label %110

133:                                              ; preds = %110
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

134:                                              ; preds = %110
  %135 = extractvalue { i32, i1 } %120, 0
  %136 = icmp sgt i32 %135, -16383
  br i1 %136, label %137, label %143

137:                                              ; preds = %134
  %138 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %139 = load fp128, ptr %138, align 16
  %140 = call fp128 @__addtf3(fp128 %139, fp128 %115)
  %141 = load i32, ptr %7, align 4
  %142 = call fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %140, i32 %141)
  ret fp128 %142

143:                                              ; preds = %134
  %144 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %145 = load fp128, ptr %144, align 16
  %146 = load i32, ptr %7, align 4
  %147 = call fastcc fp128 @compiler_rt.fma.add_and_denorm128(fp128 %145, fp128 %115, i32 %146)
  ret fp128 %147
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.frexp.frexp__anon_3803(ptr noalias nonnull sret(%"math.frexp.Frexp(f128)") %0, fp128 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"math.frexp.Frexp(f128)", align 16
  call fastcc void @math.frexp.frexp128(ptr sret(%"math.frexp.Frexp(f128)") %4, fp128 %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %4, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.fma.dd_mul128(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f128)") %0, fp128 %1, fp128 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca fp128, align 16
  %6 = alloca fp128, align 16
  %7 = alloca fp128, align 16
  %8 = alloca fp128, align 16
  %9 = alloca fp128, align 16
  %10 = alloca fp128, align 16
  %11 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  call void @llvm.memset.p0.i64(ptr align 16 %11, i8 -86, i64 32, i1 false)
  %12 = call fp128 @__multf3(fp128 %1, fp128 0xL00800000000000004038000000000000)
  store fp128 %12, ptr %10, align 16
  %13 = load fp128, ptr %10, align 16
  %14 = call fp128 @__subtf3(fp128 %1, fp128 %13)
  store fp128 %14, ptr %9, align 16
  %15 = load fp128, ptr %9, align 16
  %16 = load fp128, ptr %10, align 16
  %17 = call fp128 @__addtf3(fp128 %15, fp128 %16)
  store fp128 %17, ptr %9, align 16
  %18 = load fp128, ptr %9, align 16
  %19 = call fp128 @__subtf3(fp128 %1, fp128 %18)
  store fp128 %19, ptr %8, align 16
  %20 = call fp128 @__multf3(fp128 %2, fp128 0xL00800000000000004038000000000000)
  store fp128 %20, ptr %10, align 16
  %21 = load fp128, ptr %10, align 16
  %22 = call fp128 @__subtf3(fp128 %2, fp128 %21)
  store fp128 %22, ptr %7, align 16
  %23 = load fp128, ptr %7, align 16
  %24 = load fp128, ptr %10, align 16
  %25 = call fp128 @__addtf3(fp128 %23, fp128 %24)
  store fp128 %25, ptr %7, align 16
  %26 = load fp128, ptr %7, align 16
  %27 = call fp128 @__subtf3(fp128 %2, fp128 %26)
  store fp128 %27, ptr %6, align 16
  %28 = load fp128, ptr %9, align 16
  %29 = load fp128, ptr %7, align 16
  %30 = call fp128 @__multf3(fp128 %28, fp128 %29)
  store fp128 %30, ptr %10, align 16
  %31 = load fp128, ptr %9, align 16
  %32 = load fp128, ptr %6, align 16
  %33 = call fp128 @__multf3(fp128 %31, fp128 %32)
  %34 = load fp128, ptr %8, align 16
  %35 = load fp128, ptr %7, align 16
  %36 = call fp128 @__multf3(fp128 %34, fp128 %35)
  %37 = call fp128 @__addtf3(fp128 %33, fp128 %36)
  store fp128 %37, ptr %5, align 16
  %38 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %11, i32 0, i32 0
  %39 = load fp128, ptr %10, align 16
  %40 = load fp128, ptr %5, align 16
  %41 = call fp128 @__addtf3(fp128 %39, fp128 %40)
  store fp128 %41, ptr %38, align 16
  %42 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %11, i32 0, i32 1
  %43 = load fp128, ptr %10, align 16
  %44 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %11, i32 0, i32 0
  %45 = load fp128, ptr %44, align 16
  %46 = call fp128 @__subtf3(fp128 %43, fp128 %45)
  %47 = load fp128, ptr %5, align 16
  %48 = call fp128 @__addtf3(fp128 %46, fp128 %47)
  %49 = load fp128, ptr %8, align 16
  %50 = load fp128, ptr %6, align 16
  %51 = call fp128 @__multf3(fp128 %49, fp128 %50)
  %52 = call fp128 @__addtf3(fp128 %48, fp128 %51)
  store fp128 %52, ptr %42, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %11, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.fma.dd_add128(ptr noalias nonnull sret(%"compiler_rt.mulc3.Complex(f128)") %0, fp128 %1, fp128 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  call void @llvm.memset.p0.i64(ptr align 16 %5, i8 -86, i64 32, i1 false)
  %6 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %7 = call fp128 @__addtf3(fp128 %1, fp128 %2)
  store fp128 %7, ptr %6, align 16
  %8 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %9 = load fp128, ptr %8, align 16
  %10 = call fp128 @__subtf3(fp128 %9, fp128 %1)
  %11 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 1
  %12 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %5, i32 0, i32 0
  %13 = load fp128, ptr %12, align 16
  %14 = call fp128 @__subtf3(fp128 %13, fp128 %10)
  %15 = call fp128 @__subtf3(fp128 %1, fp128 %14)
  %16 = call fp128 @__subtf3(fp128 %2, fp128 %10)
  %17 = call fp128 @__addtf3(fp128 %15, fp128 %16)
  store fp128 %17, ptr %11, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %5, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @compiler_rt.fma.add_adjusted128(fp128 %0, fp128 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i128, align 16
  %5 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %6 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  call fastcc void @compiler_rt.fma.dd_add128(ptr sret(%"compiler_rt.mulc3.Complex(f128)") %5, fp128 %0, fp128 %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %6, ptr align 16 %5, i64 32, i1 false)
  %7 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 1
  %8 = load fp128, ptr %7, align 16
  %9 = call i32 @__netf2(fp128 %8, fp128 0xL00000000000000000000000000000000)
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %14, label %21

11:                                               ; preds = %22, %21
  %12 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 0
  %13 = load fp128, ptr %12, align 16
  ret fp128 %13

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 0
  %16 = load fp128, ptr %15, align 16
  %17 = bitcast fp128 %16 to i128
  store i128 %17, ptr %4, align 16
  %18 = load i128, ptr %4, align 16
  %19 = and i128 %18, 1
  %20 = icmp eq i128 %19, 0
  br i1 %20, label %23, label %33

21:                                               ; preds = %2
  br label %11

22:                                               ; preds = %40, %33
  br label %11

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 1
  %25 = load fp128, ptr %24, align 16
  %26 = bitcast fp128 %25 to i128
  %27 = load i128, ptr %4, align 16
  %28 = load i128, ptr %4, align 16
  %29 = xor i128 %28, %26
  %30 = lshr i128 %29, 126
  %31 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 1, i128 %30)
  %32 = extractvalue { i128, i1 } %31, 1
  br i1 %32, label %34, label %35

33:                                               ; preds = %14
  br label %22

34:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

35:                                               ; preds = %23
  %36 = extractvalue { i128, i1 } %31, 0
  %37 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %27, i128 %36)
  %38 = extractvalue { i128, i1 } %37, 1
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

40:                                               ; preds = %35
  %41 = extractvalue { i128, i1 } %37, 0
  store i128 %41, ptr %4, align 16
  %42 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %6, i32 0, i32 0
  %43 = load i128, ptr %4, align 16
  %44 = bitcast i128 %43 to fp128
  store fp128 %44, ptr %42, align 16
  br label %22
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc fp128 @compiler_rt.fma.add_and_denorm128(fp128 %0, fp128 %1, i32 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca i128, align 16
  %6 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  %7 = alloca %"compiler_rt.mulc3.Complex(f128)", align 16
  call fastcc void @compiler_rt.fma.dd_add128(ptr sret(%"compiler_rt.mulc3.Complex(f128)") %6, fp128 %0, fp128 %1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %7, ptr align 16 %6, i64 32, i1 false)
  %8 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 1
  %9 = load fp128, ptr %8, align 16
  %10 = call i32 @__netf2(fp128 %9, fp128 0xL00000000000000000000000000000000)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %16, label %25

12:                                               ; preds = %50, %25
  %13 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 0
  %14 = load fp128, ptr %13, align 16
  %15 = call fastcc fp128 @math.ldexp.ldexp__anon_3741(fp128 %14, i32 %2)
  ret fp128 %15

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 0
  %18 = load fp128, ptr %17, align 16
  %19 = bitcast fp128 %18 to i128
  store i128 %19, ptr %5, align 16
  %20 = load i128, ptr %5, align 16
  %21 = lshr i128 %20, 112
  %22 = and i128 %21, 32767
  %23 = sub i128 2147483647, %22
  %24 = icmp ule i128 %23, 2147483647
  br i1 %24, label %30, label %31

25:                                               ; preds = %3
  br label %12

26:                                               ; preds = %30
  %27 = trunc i128 %22 to i32
  %28 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %27)
  %29 = extractvalue { i32, i1 } %28, 1
  br i1 %29, label %32, label %33

30:                                               ; preds = %16
  br label %26

31:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @168)
  unreachable

32:                                               ; preds = %26
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

33:                                               ; preds = %26
  %34 = extractvalue { i32, i1 } %28, 0
  %35 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %34, i32 %2)
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

38:                                               ; preds = %33
  %39 = extractvalue { i32, i1 } %35, 0
  %40 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %39, i32 1)
  %41 = extractvalue { i32, i1 } %40, 1
  br i1 %41, label %42, label %43

42:                                               ; preds = %38
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

43:                                               ; preds = %38
  %44 = extractvalue { i32, i1 } %40, 0
  %45 = icmp ne i32 %44, 1
  %46 = load i128, ptr %5, align 16
  %47 = and i128 %46, 1
  %48 = icmp ne i128 %47, 0
  %49 = icmp eq i1 %45, %48
  br i1 %49, label %51, label %62

50:                                               ; preds = %69, %62
  br label %12

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 1
  %53 = load fp128, ptr %52, align 16
  %54 = bitcast fp128 %53 to i128
  %55 = load i128, ptr %5, align 16
  %56 = load i128, ptr %5, align 16
  %57 = xor i128 %56, %54
  %58 = lshr i128 %57, 126
  %59 = and i128 %58, 2
  %60 = call fastcc { i128, i1 } @llvm.usub.with.overflow.i128(i128 1, i128 %59)
  %61 = extractvalue { i128, i1 } %60, 1
  br i1 %61, label %63, label %64

62:                                               ; preds = %43
  br label %50

63:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

64:                                               ; preds = %51
  %65 = extractvalue { i128, i1 } %60, 0
  %66 = call fastcc { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %55, i128 %65)
  %67 = extractvalue { i128, i1 } %66, 1
  br i1 %67, label %68, label %69

68:                                               ; preds = %64
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

69:                                               ; preds = %64
  %70 = extractvalue { i128, i1 } %66, 0
  store i128 %70, ptr %5, align 16
  %71 = getelementptr inbounds %"compiler_rt.mulc3.Complex(f128)", ptr %7, i32 0, i32 0
  %72 = load i128, ptr %5, align 16
  %73 = bitcast i128 %72 to fp128
  store fp128 %73, ptr %71, align 16
  br label %50
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @math.frexp.frexp128(ptr noalias nonnull sret(%"math.frexp.Frexp(f128)") %0, fp128 %1) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca %"math.frexp.Frexp(f128)", align 16
  %5 = alloca i128, align 16
  %6 = alloca %"math.frexp.Frexp(f128)", align 16
  call void @llvm.memset.p0.i64(ptr align 16 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast fp128 %1 to i128
  store i128 %7, ptr %5, align 16
  %8 = load i128, ptr %5, align 16
  %9 = lshr i128 %8, 112
  %10 = sub i128 2147483647, %9
  %11 = icmp ule i128 %10, 2147483647
  br i1 %11, label %16, label %17

12:                                               ; preds = %16
  %13 = trunc i128 %9 to i32
  %14 = and i32 %13, 32767
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %22, label %25

16:                                               ; preds = %2
  br label %12

17:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @189)
  unreachable

18:                                               ; preds = %40
  %19 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  %20 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 16382)
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %52, label %53

22:                                               ; preds = %12
  %23 = call i32 @__netf2(fp128 %1, fp128 0xL00000000000000000000000000000000)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %28, label %34

25:                                               ; preds = %12
  %26 = icmp eq i32 %14, 32767
  br i1 %26, label %41, label %47

27:                                               ; preds = %38, %34
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %6, i64 32, i1 false)
  ret void

28:                                               ; preds = %22
  %29 = call fp128 @__multf3(fp128 %1, fp128 0xL00000000000000004077000000000000)
  call fastcc void @math.frexp.frexp128(ptr sret(%"math.frexp.Frexp(f128)") %4, fp128 %29)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %6, ptr align 16 %4, i64 32, i1 false)
  %30 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  %31 = load i32, ptr %30, align 4
  %32 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %31, i32 120)
  %33 = extractvalue { i32, i1 } %32, 1
  br i1 %33, label %37, label %38

34:                                               ; preds = %22
  %35 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 0
  store fp128 %1, ptr %35, align 16
  %36 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  store i32 0, ptr %36, align 4
  br label %27

37:                                               ; preds = %28
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

38:                                               ; preds = %28
  %39 = extractvalue { i32, i1 } %32, 0
  store i32 %39, ptr %30, align 4
  br label %27

40:                                               ; preds = %47
  br label %18

41:                                               ; preds = %25
  %42 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 0
  store fp128 %1, ptr %42, align 16
  %43 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  call void @llvm.memset.p0.i64(ptr align 4 %43, i8 -86, i64 4, i1 false)
  %44 = bitcast fp128 %1 to i128
  %45 = and i128 %44, 170141183460469231731687303715884105727
  %46 = icmp eq i128 %45, 170135991163610696904058773219554885632
  br i1 %46, label %49, label %51

47:                                               ; preds = %25
  br label %40

48:                                               ; preds = %51, %49
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %6, i64 32, i1 false)
  ret void

49:                                               ; preds = %41
  %50 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 1
  store i32 0, ptr %50, align 4
  br label %48

51:                                               ; preds = %41
  br label %48

52:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

53:                                               ; preds = %18
  %54 = extractvalue { i32, i1 } %20, 0
  store i32 %54, ptr %19, align 4
  %55 = load i128, ptr %5, align 16
  %56 = and i128 %55, -170135991163610696904058773219554885633
  store i128 %56, ptr %5, align 16
  %57 = load i128, ptr %5, align 16
  %58 = or i128 %57, 85060207136517546210586590865283612672
  store i128 %58, ptr %5, align 16
  %59 = getelementptr inbounds %"math.frexp.Frexp(f128)", ptr %6, i32 0, i32 0
  %60 = load i128, ptr %5, align 16
  %61 = bitcast i128 %60 to fp128
  store fp128 %61, ptr %59, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %0, ptr align 16 %6, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fmal(double %0, double %1, double %2) #0 {
  %4 = call double @fma(double %0, double %1, double %2)
  ret double %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__fmaxh(half %0, half %1) #0 {
  %3 = alloca half, align 2
  %4 = call fastcc i1 @math.isnan.isNan__anon_3662(half %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi half [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret half %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3662(half %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt half %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load half, ptr %3, align 2
  br label %5

17:                                               ; preds = %11
  store half %1, ptr %3, align 2
  br label %15

18:                                               ; preds = %11
  store half %0, ptr %3, align 2
  br label %15
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @fmaxf(float %0, float %1) #0 {
  %3 = alloca float, align 4
  %4 = call fastcc i1 @math.isnan.isNan__anon_3680(float %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi float [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret float %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3680(float %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt float %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load float, ptr %3, align 4
  br label %5

17:                                               ; preds = %11
  store float %1, ptr %3, align 4
  br label %15

18:                                               ; preds = %11
  store float %0, ptr %3, align 4
  br label %15
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fmax(double %0, double %1) #0 {
  %3 = alloca double, align 8
  %4 = call fastcc i1 @math.isnan.isNan__anon_3682(double %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi double [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret double %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3682(double %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt double %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load double, ptr %3, align 8
  br label %5

17:                                               ; preds = %11
  store double %1, ptr %3, align 8
  br label %15

18:                                               ; preds = %11
  store double %0, ptr %3, align 8
  br label %15
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fmaxl(double %0, double %1) #0 {
  %3 = call double @fmax(double %0, double %1)
  ret double %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__fminh(half %0, half %1) #0 {
  %3 = alloca half, align 2
  %4 = call fastcc i1 @math.isnan.isNan__anon_3662(half %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi half [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret half %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3662(half %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt half %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load half, ptr %3, align 2
  br label %5

17:                                               ; preds = %11
  store half %0, ptr %3, align 2
  br label %15

18:                                               ; preds = %11
  store half %1, ptr %3, align 2
  br label %15
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @fminf(float %0, float %1) #0 {
  %3 = alloca float, align 4
  %4 = call fastcc i1 @math.isnan.isNan__anon_3680(float %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi float [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret float %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3680(float %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt float %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load float, ptr %3, align 4
  br label %5

17:                                               ; preds = %11
  store float %0, ptr %3, align 4
  br label %15

18:                                               ; preds = %11
  store float %1, ptr %3, align 4
  br label %15
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fmin(double %0, double %1) #0 {
  %3 = alloca double, align 8
  %4 = call fastcc i1 @math.isnan.isNan__anon_3682(double %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %15, %13, %9
  %6 = phi double [ %1, %9 ], [ %0, %13 ], [ %16, %15 ]
  ret double %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3682(double %1)
  br i1 %8, label %13, label %14

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %14
  %12 = fcmp olt double %0, %1
  br i1 %12, label %17, label %18

13:                                               ; preds = %7
  br label %5

14:                                               ; preds = %7
  br label %11

15:                                               ; preds = %18, %17
  %16 = load double, ptr %3, align 8
  br label %5

17:                                               ; preds = %11
  store double %0, ptr %3, align 8
  br label %15

18:                                               ; preds = %11
  store double %1, ptr %3, align 8
  br label %15
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__fminx(i80 %0, i80 %1) #0 {
  %3 = alloca i80, align 16
  %4 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %16, %14, %9
  %6 = phi i80 [ %1, %9 ], [ %0, %14 ], [ %17, %16 ]
  ret i80 %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %1)
  br i1 %8, label %14, label %15

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %15
  %12 = call i32 @__ltxf2(i80 %0, i80 %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %18, label %19

14:                                               ; preds = %7
  br label %5

15:                                               ; preds = %7
  br label %11

16:                                               ; preds = %19, %18
  %17 = load i80, ptr %3, align 16
  br label %5

18:                                               ; preds = %11
  store i80 %0, ptr %3, align 16
  br label %16

19:                                               ; preds = %11
  store i80 %1, ptr %3, align 16
  br label %16
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @fminq(fp128 %0, fp128 %1) #0 {
  %3 = alloca fp128, align 16
  %4 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %0)
  br i1 %4, label %9, label %10

5:                                                ; preds = %16, %14, %9
  %6 = phi fp128 [ %1, %9 ], [ %0, %14 ], [ %17, %16 ]
  ret fp128 %6

7:                                                ; preds = %10
  %8 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %1)
  br i1 %8, label %14, label %15

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %2
  br label %7

11:                                               ; preds = %15
  %12 = call i32 @__lttf2(fp128 %0, fp128 %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %18, label %19

14:                                               ; preds = %7
  br label %5

15:                                               ; preds = %7
  br label %11

16:                                               ; preds = %19, %18
  %17 = load fp128, ptr %3, align 16
  br label %5

18:                                               ; preds = %11
  store fp128 %0, ptr %3, align 16
  br label %16

19:                                               ; preds = %11
  store fp128 %1, ptr %3, align 16
  br label %16
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fminl(double %0, double %1) #0 {
  %3 = call double @fmin(double %0, double %1)
  ret double %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__fmodh(half %0, half %1) #0 {
  %3 = fpext half %0 to float
  %4 = fpext half %1 to float
  %5 = call float @fmodf(float %3, float %4)
  %6 = fptrunc float %5 to half
  ret half %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @fmodf(float %0, float %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = bitcast float %0 to i32
  store i32 %9, ptr %8, align 4
  %10 = bitcast float %1 to i32
  store i32 %10, ptr %7, align 4
  %11 = load i32, ptr %8, align 4
  %12 = lshr i32 %11, 23
  %13 = and i32 %12, 255
  %14 = sub i32 2147483647, %13
  %15 = icmp ule i32 %14, 2147483647
  br i1 %15, label %24, label %25

16:                                               ; preds = %230, %209, %196, %69, %68, %53
  %17 = phi float [ %56, %53 ], [ %70, %69 ], [ %0, %68 ], [ %197, %196 ], [ %210, %209 ], [ %234, %230 ]
  ret float %17

18:                                               ; preds = %24
  store i32 %13, ptr %6, align 4
  %19 = load i32, ptr %7, align 4
  %20 = lshr i32 %19, 23
  %21 = and i32 %20, 255
  %22 = sub i32 2147483647, %21
  %23 = icmp ule i32 %22, 2147483647
  br i1 %23, label %32, label %33

24:                                               ; preds = %2
  br label %18

25:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable

26:                                               ; preds = %32
  store i32 %21, ptr %5, align 4
  %27 = load i32, ptr %8, align 4
  %28 = and i32 %27, -2147483648
  call void @llvm.memset.p0.i64(ptr align 4 %4, i8 -86, i64 4, i1 false)
  %29 = load i32, ptr %7, align 4
  %30 = shl i32 %29, 1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %42, label %43

32:                                               ; preds = %18
  br label %26

33:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable

34:                                               ; preds = %57
  %35 = load i32, ptr %8, align 4
  %36 = shl i32 %35, 1
  %37 = load i32, ptr %7, align 4
  %38 = shl i32 %37, 1
  %39 = icmp ule i32 %36, %38
  br i1 %39, label %61, label %67

40:                                               ; preds = %43, %42
  %41 = phi i1 [ true, %42 ], [ %46, %43 ]
  br i1 %41, label %49, label %50

42:                                               ; preds = %26
  br label %40

43:                                               ; preds = %26
  %44 = load i32, ptr %7, align 4
  %45 = bitcast i32 %44 to float
  %46 = call fastcc i1 @math.isnan.isNan__anon_3680(float %45)
  br label %40

47:                                               ; preds = %50, %49
  %48 = phi i1 [ true, %49 ], [ %52, %50 ]
  br i1 %48, label %53, label %57

49:                                               ; preds = %40
  br label %47

50:                                               ; preds = %40
  %51 = load i32, ptr %6, align 4
  %52 = icmp eq i32 %51, 255
  br label %47

53:                                               ; preds = %47
  %54 = fmul float %0, %1
  %55 = fmul float %0, %1
  %56 = fdiv float %54, %55
  br label %16

57:                                               ; preds = %47
  br label %34

58:                                               ; preds = %67
  %59 = load i32, ptr %6, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %75, label %78

61:                                               ; preds = %34
  %62 = load i32, ptr %8, align 4
  %63 = shl i32 %62, 1
  %64 = load i32, ptr %7, align 4
  %65 = shl i32 %64, 1
  %66 = icmp eq i32 %63, %65
  br i1 %66, label %69, label %71

67:                                               ; preds = %34
  br label %58

68:                                               ; preds = %71
  br label %16

69:                                               ; preds = %61
  %70 = fmul float 0.000000e+00, %0
  br label %16

71:                                               ; preds = %61
  br label %68

72:                                               ; preds = %113, %78
  %73 = load i32, ptr %5, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %120, label %123

75:                                               ; preds = %58
  %76 = load i32, ptr %8, align 4
  %77 = shl i32 %76, 9
  store i32 %77, ptr %4, align 4
  br label %88

78:                                               ; preds = %58
  %79 = load i32, ptr %8, align 4
  %80 = and i32 %79, 8388607
  store i32 %80, ptr %8, align 4
  %81 = load i32, ptr %8, align 4
  %82 = or i32 %81, 8388608
  store i32 %82, ptr %8, align 4
  br label %72

83:                                               ; preds = %97
  %84 = load i32, ptr %8, align 4
  %85 = load i32, ptr %6, align 4
  %86 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %85)
  %87 = extractvalue { i32, i1 } %86, 1
  br i1 %87, label %103, label %104

88:                                               ; preds = %92, %75
  %89 = load i32, ptr %4, align 4
  %90 = lshr i32 %89, 31
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %93, label %97

92:                                               ; preds = %99
  br label %88

93:                                               ; preds = %88
  %94 = load i32, ptr %6, align 4
  %95 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %94, i32 1)
  %96 = extractvalue { i32, i1 } %95, 1
  br i1 %96, label %98, label %99

97:                                               ; preds = %88
  br label %83

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i32, i1 } %95, 0
  store i32 %100, ptr %6, align 4
  %101 = load i32, ptr %4, align 4
  %102 = shl i32 %101, 1
  store i32 %102, ptr %4, align 4
  br label %92

103:                                              ; preds = %83
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %83
  %105 = extractvalue { i32, i1 } %86, 0
  %106 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %105, i32 1)
  %107 = extractvalue { i32, i1 } %106, 1
  br i1 %107, label %108, label %109

108:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

109:                                              ; preds = %104
  %110 = extractvalue { i32, i1 } %106, 0
  %111 = sub i32 31, %110
  %112 = icmp ule i32 %111, 31
  br i1 %112, label %117, label %118

113:                                              ; preds = %117
  %114 = trunc i32 %110 to i5
  %115 = zext i5 %114 to i32
  %116 = shl i32 %84, %115
  store i32 %116, ptr %8, align 4
  br label %72

117:                                              ; preds = %109
  br label %113

118:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable

119:                                              ; preds = %158, %123
  br label %171

120:                                              ; preds = %72
  %121 = load i32, ptr %7, align 4
  %122 = shl i32 %121, 9
  store i32 %122, ptr %4, align 4
  br label %133

123:                                              ; preds = %72
  %124 = load i32, ptr %7, align 4
  %125 = and i32 %124, 8388607
  store i32 %125, ptr %7, align 4
  %126 = load i32, ptr %7, align 4
  %127 = or i32 %126, 8388608
  store i32 %127, ptr %7, align 4
  br label %119

128:                                              ; preds = %142
  %129 = load i32, ptr %7, align 4
  %130 = load i32, ptr %5, align 4
  %131 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %130)
  %132 = extractvalue { i32, i1 } %131, 1
  br i1 %132, label %148, label %149

133:                                              ; preds = %137, %120
  %134 = load i32, ptr %4, align 4
  %135 = lshr i32 %134, 31
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %138, label %142

137:                                              ; preds = %144
  br label %133

138:                                              ; preds = %133
  %139 = load i32, ptr %5, align 4
  %140 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %139, i32 1)
  %141 = extractvalue { i32, i1 } %140, 1
  br i1 %141, label %143, label %144

142:                                              ; preds = %133
  br label %128

143:                                              ; preds = %138
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

144:                                              ; preds = %138
  %145 = extractvalue { i32, i1 } %140, 0
  store i32 %145, ptr %5, align 4
  %146 = load i32, ptr %4, align 4
  %147 = shl i32 %146, 1
  store i32 %147, ptr %4, align 4
  br label %137

148:                                              ; preds = %128
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

149:                                              ; preds = %128
  %150 = extractvalue { i32, i1 } %131, 0
  %151 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %150, i32 1)
  %152 = extractvalue { i32, i1 } %151, 1
  br i1 %152, label %153, label %154

153:                                              ; preds = %149
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

154:                                              ; preds = %149
  %155 = extractvalue { i32, i1 } %151, 0
  %156 = sub i32 31, %155
  %157 = icmp ule i32 %156, 31
  br i1 %157, label %162, label %163

158:                                              ; preds = %162
  %159 = trunc i32 %155 to i5
  %160 = zext i5 %159 to i32
  %161 = shl i32 %129, %160
  store i32 %161, ptr %7, align 4
  br label %119

162:                                              ; preds = %154
  br label %158

163:                                              ; preds = %154
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable

164:                                              ; preds = %183
  %165 = load i32, ptr %8, align 4
  %166 = load i32, ptr %7, align 4
  %167 = sub i32 %165, %166
  store i32 %167, ptr %4, align 4
  %168 = load i32, ptr %4, align 4
  %169 = lshr i32 %168, 31
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %203, label %206

171:                                              ; preds = %175, %119
  %172 = load i32, ptr %6, align 4
  %173 = load i32, ptr %5, align 4
  %174 = icmp sgt i32 %172, %173
  br i1 %174, label %176, label %183

175:                                              ; preds = %200
  br label %171

176:                                              ; preds = %171
  %177 = load i32, ptr %8, align 4
  %178 = load i32, ptr %7, align 4
  %179 = sub i32 %177, %178
  store i32 %179, ptr %4, align 4
  %180 = load i32, ptr %4, align 4
  %181 = lshr i32 %180, 31
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %190, label %193

183:                                              ; preds = %171
  br label %164

184:                                              ; preds = %194, %193
  %185 = load i32, ptr %8, align 4
  %186 = shl i32 %185, 1
  store i32 %186, ptr %8, align 4
  %187 = load i32, ptr %6, align 4
  %188 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %187, i32 1)
  %189 = extractvalue { i32, i1 } %188, 1
  br i1 %189, label %199, label %200

190:                                              ; preds = %176
  %191 = load i32, ptr %4, align 4
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %196, label %198

193:                                              ; preds = %176
  br label %184

194:                                              ; preds = %198
  %195 = load i32, ptr %4, align 4
  store i32 %195, ptr %8, align 4
  br label %184

196:                                              ; preds = %190
  %197 = fmul float 0.000000e+00, %0
  br label %16

198:                                              ; preds = %190
  br label %194

199:                                              ; preds = %184
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

200:                                              ; preds = %184
  %201 = extractvalue { i32, i1 } %188, 0
  store i32 %201, ptr %6, align 4
  br label %175

202:                                              ; preds = %207, %206
  br label %215

203:                                              ; preds = %164
  %204 = load i32, ptr %4, align 4
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %209, label %211

206:                                              ; preds = %164
  br label %202

207:                                              ; preds = %211
  %208 = load i32, ptr %4, align 4
  store i32 %208, ptr %8, align 4
  br label %202

209:                                              ; preds = %203
  %210 = fmul float 0.000000e+00, %0
  br label %16

211:                                              ; preds = %203
  br label %207

212:                                              ; preds = %226
  %213 = load i32, ptr %6, align 4
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %235, label %242

215:                                              ; preds = %219, %202
  %216 = load i32, ptr %8, align 4
  %217 = lshr i32 %216, 23
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %220, label %226

219:                                              ; preds = %228
  br label %215

220:                                              ; preds = %215
  %221 = load i32, ptr %8, align 4
  %222 = shl i32 %221, 1
  store i32 %222, ptr %8, align 4
  %223 = load i32, ptr %6, align 4
  %224 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %223, i32 1)
  %225 = extractvalue { i32, i1 } %224, 1
  br i1 %225, label %227, label %228

226:                                              ; preds = %215
  br label %212

227:                                              ; preds = %220
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

228:                                              ; preds = %220
  %229 = extractvalue { i32, i1 } %224, 0
  store i32 %229, ptr %6, align 4
  br label %219

230:                                              ; preds = %257, %235
  %231 = load i32, ptr %8, align 4
  %232 = or i32 %231, %28
  store i32 %232, ptr %8, align 4
  %233 = load i32, ptr %8, align 4
  %234 = bitcast i32 %233 to float
  br label %16

235:                                              ; preds = %212
  %236 = load i32, ptr %8, align 4
  %237 = sub i32 %236, 8388608
  store i32 %237, ptr %8, align 4
  %238 = load i32, ptr %8, align 4
  %239 = load i32, ptr %6, align 4
  %240 = shl i32 %239, 23
  %241 = or i32 %238, %240
  store i32 %241, ptr %8, align 4
  br label %230

242:                                              ; preds = %212
  %243 = load i32, ptr %8, align 4
  %244 = load i32, ptr %6, align 4
  %245 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %244)
  %246 = extractvalue { i32, i1 } %245, 1
  br i1 %246, label %247, label %248

247:                                              ; preds = %242
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

248:                                              ; preds = %242
  %249 = extractvalue { i32, i1 } %245, 0
  %250 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %249, i32 1)
  %251 = extractvalue { i32, i1 } %250, 1
  br i1 %251, label %252, label %253

252:                                              ; preds = %248
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

253:                                              ; preds = %248
  %254 = extractvalue { i32, i1 } %250, 0
  %255 = sub i32 31, %254
  %256 = icmp ule i32 %255, 31
  br i1 %256, label %261, label %262

257:                                              ; preds = %261
  %258 = trunc i32 %254 to i5
  %259 = zext i5 %258 to i32
  %260 = lshr i32 %243, %259
  store i32 %260, ptr %8, align 4
  br label %230

261:                                              ; preds = %253
  br label %257

262:                                              ; preds = %253
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @100)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fmod(double %0, double %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast double %0 to i64
  store i64 %9, ptr %8, align 8
  %10 = bitcast double %1 to i64
  store i64 %10, ptr %7, align 8
  %11 = load i64, ptr %8, align 8
  %12 = lshr i64 %11, 52
  %13 = and i64 %12, 2047
  %14 = sub i64 2147483647, %13
  %15 = icmp ule i64 %14, 2147483647
  br i1 %15, label %25, label %26

16:                                               ; preds = %270, %217, %204, %77, %76, %61
  %17 = phi double [ %64, %61 ], [ %78, %77 ], [ %0, %76 ], [ %205, %204 ], [ %218, %217 ], [ %275, %270 ]
  ret double %17

18:                                               ; preds = %25
  %19 = trunc i64 %13 to i32
  store i32 %19, ptr %6, align 4
  %20 = load i64, ptr %7, align 8
  %21 = lshr i64 %20, 52
  %22 = and i64 %21, 2047
  %23 = sub i64 2147483647, %22
  %24 = icmp ule i64 %23, 2147483647
  br i1 %24, label %33, label %34

25:                                               ; preds = %2
  br label %18

26:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

27:                                               ; preds = %33
  %28 = trunc i64 %22 to i32
  store i32 %28, ptr %5, align 4
  %29 = load i64, ptr %8, align 8
  %30 = lshr i64 %29, 63
  %31 = sub i64 2147483647, %30
  %32 = icmp ule i64 %31, 2147483647
  br i1 %32, label %40, label %41

33:                                               ; preds = %18
  br label %27

34:                                               ; preds = %18
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

35:                                               ; preds = %40
  %36 = trunc i64 %30 to i32
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %37 = load i64, ptr %7, align 8
  %38 = shl i64 %37, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %50, label %51

40:                                               ; preds = %27
  br label %35

41:                                               ; preds = %27
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

42:                                               ; preds = %65
  %43 = load i64, ptr %8, align 8
  %44 = shl i64 %43, 1
  %45 = load i64, ptr %7, align 8
  %46 = shl i64 %45, 1
  %47 = icmp ule i64 %44, %46
  br i1 %47, label %69, label %75

48:                                               ; preds = %51, %50
  %49 = phi i1 [ true, %50 ], [ %54, %51 ]
  br i1 %49, label %57, label %58

50:                                               ; preds = %35
  br label %48

51:                                               ; preds = %35
  %52 = load i64, ptr %7, align 8
  %53 = bitcast i64 %52 to double
  %54 = call fastcc i1 @math.isnan.isNan__anon_3682(double %53)
  br label %48

55:                                               ; preds = %58, %57
  %56 = phi i1 [ true, %57 ], [ %60, %58 ]
  br i1 %56, label %61, label %65

57:                                               ; preds = %48
  br label %55

58:                                               ; preds = %48
  %59 = load i32, ptr %6, align 4
  %60 = icmp eq i32 %59, 2047
  br label %55

61:                                               ; preds = %55
  %62 = fmul double %0, %1
  %63 = fmul double %0, %1
  %64 = fdiv double %62, %63
  br label %16

65:                                               ; preds = %55
  br label %42

66:                                               ; preds = %75
  %67 = load i32, ptr %6, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %83, label %86

69:                                               ; preds = %42
  %70 = load i64, ptr %8, align 8
  %71 = shl i64 %70, 1
  %72 = load i64, ptr %7, align 8
  %73 = shl i64 %72, 1
  %74 = icmp eq i64 %71, %73
  br i1 %74, label %77, label %79

75:                                               ; preds = %42
  br label %66

76:                                               ; preds = %79
  br label %16

77:                                               ; preds = %69
  %78 = fmul double 0.000000e+00, %0
  br label %16

79:                                               ; preds = %69
  br label %76

80:                                               ; preds = %121, %86
  %81 = load i32, ptr %5, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %128, label %131

83:                                               ; preds = %66
  %84 = load i64, ptr %8, align 8
  %85 = shl i64 %84, 12
  store i64 %85, ptr %4, align 8
  br label %96

86:                                               ; preds = %66
  %87 = load i64, ptr %8, align 8
  %88 = and i64 %87, 4503599627370495
  store i64 %88, ptr %8, align 8
  %89 = load i64, ptr %8, align 8
  %90 = or i64 %89, 4503599627370496
  store i64 %90, ptr %8, align 8
  br label %80

91:                                               ; preds = %105
  %92 = load i64, ptr %8, align 8
  %93 = load i32, ptr %6, align 4
  %94 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %93)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %111, label %112

96:                                               ; preds = %100, %83
  %97 = load i64, ptr %4, align 8
  %98 = lshr i64 %97, 63
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %101, label %105

100:                                              ; preds = %107
  br label %96

101:                                              ; preds = %96
  %102 = load i32, ptr %6, align 4
  %103 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %102, i32 1)
  %104 = extractvalue { i32, i1 } %103, 1
  br i1 %104, label %106, label %107

105:                                              ; preds = %96
  br label %91

106:                                              ; preds = %101
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

107:                                              ; preds = %101
  %108 = extractvalue { i32, i1 } %103, 0
  store i32 %108, ptr %6, align 4
  %109 = load i64, ptr %4, align 8
  %110 = shl i64 %109, 1
  store i64 %110, ptr %4, align 8
  br label %100

111:                                              ; preds = %91
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

112:                                              ; preds = %91
  %113 = extractvalue { i32, i1 } %94, 0
  %114 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %113, i32 1)
  %115 = extractvalue { i32, i1 } %114, 1
  br i1 %115, label %116, label %117

116:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

117:                                              ; preds = %112
  %118 = extractvalue { i32, i1 } %114, 0
  %119 = sub i32 63, %118
  %120 = icmp ule i32 %119, 63
  br i1 %120, label %125, label %126

121:                                              ; preds = %125
  %122 = trunc i32 %118 to i6
  %123 = zext i6 %122 to i64
  %124 = shl i64 %92, %123
  store i64 %124, ptr %8, align 8
  br label %80

125:                                              ; preds = %117
  br label %121

126:                                              ; preds = %117
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

127:                                              ; preds = %166, %131
  br label %179

128:                                              ; preds = %80
  %129 = load i64, ptr %7, align 8
  %130 = shl i64 %129, 12
  store i64 %130, ptr %4, align 8
  br label %141

131:                                              ; preds = %80
  %132 = load i64, ptr %7, align 8
  %133 = and i64 %132, 4503599627370495
  store i64 %133, ptr %7, align 8
  %134 = load i64, ptr %7, align 8
  %135 = or i64 %134, 4503599627370496
  store i64 %135, ptr %7, align 8
  br label %127

136:                                              ; preds = %150
  %137 = load i64, ptr %7, align 8
  %138 = load i32, ptr %5, align 4
  %139 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %138)
  %140 = extractvalue { i32, i1 } %139, 1
  br i1 %140, label %156, label %157

141:                                              ; preds = %145, %128
  %142 = load i64, ptr %4, align 8
  %143 = lshr i64 %142, 63
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %146, label %150

145:                                              ; preds = %152
  br label %141

146:                                              ; preds = %141
  %147 = load i32, ptr %5, align 4
  %148 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %147, i32 1)
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %151, label %152

150:                                              ; preds = %141
  br label %136

151:                                              ; preds = %146
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

152:                                              ; preds = %146
  %153 = extractvalue { i32, i1 } %148, 0
  store i32 %153, ptr %5, align 4
  %154 = load i64, ptr %4, align 8
  %155 = shl i64 %154, 1
  store i64 %155, ptr %4, align 8
  br label %145

156:                                              ; preds = %136
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

157:                                              ; preds = %136
  %158 = extractvalue { i32, i1 } %139, 0
  %159 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %158, i32 1)
  %160 = extractvalue { i32, i1 } %159, 1
  br i1 %160, label %161, label %162

161:                                              ; preds = %157
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

162:                                              ; preds = %157
  %163 = extractvalue { i32, i1 } %159, 0
  %164 = sub i32 63, %163
  %165 = icmp ule i32 %164, 63
  br i1 %165, label %170, label %171

166:                                              ; preds = %170
  %167 = trunc i32 %163 to i6
  %168 = zext i6 %167 to i64
  %169 = shl i64 %137, %168
  store i64 %169, ptr %7, align 8
  br label %127

170:                                              ; preds = %162
  br label %166

171:                                              ; preds = %162
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

172:                                              ; preds = %191
  %173 = load i64, ptr %8, align 8
  %174 = load i64, ptr %7, align 8
  %175 = sub i64 %173, %174
  store i64 %175, ptr %4, align 8
  %176 = load i64, ptr %4, align 8
  %177 = lshr i64 %176, 63
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %211, label %214

179:                                              ; preds = %183, %127
  %180 = load i32, ptr %6, align 4
  %181 = load i32, ptr %5, align 4
  %182 = icmp sgt i32 %180, %181
  br i1 %182, label %184, label %191

183:                                              ; preds = %208
  br label %179

184:                                              ; preds = %179
  %185 = load i64, ptr %8, align 8
  %186 = load i64, ptr %7, align 8
  %187 = sub i64 %185, %186
  store i64 %187, ptr %4, align 8
  %188 = load i64, ptr %4, align 8
  %189 = lshr i64 %188, 63
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %198, label %201

191:                                              ; preds = %179
  br label %172

192:                                              ; preds = %202, %201
  %193 = load i64, ptr %8, align 8
  %194 = shl i64 %193, 1
  store i64 %194, ptr %8, align 8
  %195 = load i32, ptr %6, align 4
  %196 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %195, i32 1)
  %197 = extractvalue { i32, i1 } %196, 1
  br i1 %197, label %207, label %208

198:                                              ; preds = %184
  %199 = load i64, ptr %4, align 8
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %204, label %206

201:                                              ; preds = %184
  br label %192

202:                                              ; preds = %206
  %203 = load i64, ptr %4, align 8
  store i64 %203, ptr %8, align 8
  br label %192

204:                                              ; preds = %198
  %205 = fmul double 0.000000e+00, %0
  br label %16

206:                                              ; preds = %198
  br label %202

207:                                              ; preds = %192
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

208:                                              ; preds = %192
  %209 = extractvalue { i32, i1 } %196, 0
  store i32 %209, ptr %6, align 4
  br label %183

210:                                              ; preds = %215, %214
  br label %223

211:                                              ; preds = %172
  %212 = load i64, ptr %4, align 8
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %217, label %219

214:                                              ; preds = %172
  br label %210

215:                                              ; preds = %219
  %216 = load i64, ptr %4, align 8
  store i64 %216, ptr %8, align 8
  br label %210

217:                                              ; preds = %211
  %218 = fmul double 0.000000e+00, %0
  br label %16

219:                                              ; preds = %211
  br label %215

220:                                              ; preds = %234
  %221 = load i32, ptr %6, align 4
  %222 = icmp sgt i32 %221, 0
  br i1 %222, label %241, label %249

223:                                              ; preds = %227, %210
  %224 = load i64, ptr %8, align 8
  %225 = lshr i64 %224, 52
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %228, label %234

227:                                              ; preds = %236
  br label %223

228:                                              ; preds = %223
  %229 = load i64, ptr %8, align 8
  %230 = shl i64 %229, 1
  store i64 %230, ptr %8, align 8
  %231 = load i32, ptr %6, align 4
  %232 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %231, i32 1)
  %233 = extractvalue { i32, i1 } %232, 1
  br i1 %233, label %235, label %236

234:                                              ; preds = %223
  br label %220

235:                                              ; preds = %228
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

236:                                              ; preds = %228
  %237 = extractvalue { i32, i1 } %232, 0
  store i32 %237, ptr %6, align 4
  br label %227

238:                                              ; preds = %264, %241
  %239 = load i64, ptr %8, align 8
  %240 = icmp sge i32 %36, 0
  br i1 %240, label %276, label %277

241:                                              ; preds = %220
  %242 = load i64, ptr %8, align 8
  %243 = sub i64 %242, 4503599627370496
  store i64 %243, ptr %8, align 8
  %244 = load i64, ptr %8, align 8
  %245 = load i32, ptr %6, align 4
  %246 = zext i32 %245 to i64
  %247 = shl i64 %246, 52
  %248 = or i64 %244, %247
  store i64 %248, ptr %8, align 8
  br label %238

249:                                              ; preds = %220
  %250 = load i64, ptr %8, align 8
  %251 = load i32, ptr %6, align 4
  %252 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %251)
  %253 = extractvalue { i32, i1 } %252, 1
  br i1 %253, label %254, label %255

254:                                              ; preds = %249
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

255:                                              ; preds = %249
  %256 = extractvalue { i32, i1 } %252, 0
  %257 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %256, i32 1)
  %258 = extractvalue { i32, i1 } %257, 1
  br i1 %258, label %259, label %260

259:                                              ; preds = %255
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

260:                                              ; preds = %255
  %261 = extractvalue { i32, i1 } %257, 0
  %262 = sub i32 63, %261
  %263 = icmp ule i32 %262, 63
  br i1 %263, label %268, label %269

264:                                              ; preds = %268
  %265 = trunc i32 %261 to i6
  %266 = zext i6 %265 to i64
  %267 = lshr i64 %250, %266
  store i64 %267, ptr %8, align 8
  br label %238

268:                                              ; preds = %260
  br label %264

269:                                              ; preds = %260
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable

270:                                              ; preds = %276
  %271 = sext i32 %36 to i64
  %272 = shl i64 %271, 63
  %273 = or i64 %239, %272
  store i64 %273, ptr %8, align 8
  %274 = load i64, ptr %8, align 8
  %275 = bitcast i64 %274 to double
  br label %16

276:                                              ; preds = %238
  br label %270

277:                                              ; preds = %238
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @101)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__fmodx(i80 %0, i80 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i80, align 16
  %15 = alloca i80, align 16
  store i80 %0, ptr %15, align 16
  store i80 %1, ptr %14, align 16
  %16 = load i80, ptr %15, align 16
  %17 = and i80 %16, -604462909807314587353088
  %18 = lshr i80 %0, 64
  br i1 true, label %23, label %24

19:                                               ; preds = %23
  %20 = and i80 %18, 32767
  %21 = sub i80 2147483647, %20
  %22 = icmp ule i80 %21, 2147483647
  br i1 %22, label %28, label %29

23:                                               ; preds = %2
  br label %19

24:                                               ; preds = %2
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

25:                                               ; preds = %28
  %26 = trunc i80 %20 to i32
  store i32 %26, ptr %13, align 4
  %27 = lshr i80 %1, 64
  br i1 true, label %34, label %35

28:                                               ; preds = %19
  br label %25

29:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

30:                                               ; preds = %34
  %31 = and i80 %27, 32767
  %32 = sub i80 2147483647, %31
  %33 = icmp ule i80 %32, 2147483647
  br i1 %33, label %40, label %41

34:                                               ; preds = %25
  br label %30

35:                                               ; preds = %25
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

36:                                               ; preds = %40
  %37 = trunc i80 %31 to i32
  store i32 %37, ptr %12, align 4
  %38 = call i32 @__eqxf2(i80 %1, i80 0)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %52, label %53

40:                                               ; preds = %30
  br label %36

41:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

42:                                               ; preds = %65
  %43 = load i80, ptr %15, align 16
  %44 = and i80 %43, 604462909807314587353087
  store i80 %44, ptr %15, align 16
  %45 = load i80, ptr %14, align 16
  %46 = and i80 %45, 604462909807314587353087
  store i80 %46, ptr %14, align 16
  %47 = load i80, ptr %15, align 16
  %48 = load i80, ptr %14, align 16
  %49 = icmp ule i80 %47, %48
  br i1 %49, label %69, label %73

50:                                               ; preds = %53, %52
  %51 = phi i1 [ true, %52 ], [ %54, %53 ]
  br i1 %51, label %57, label %58

52:                                               ; preds = %36
  br label %50

53:                                               ; preds = %36
  %54 = call fastcc i1 @math.isnan.isNan__anon_3684(i80 %1)
  br label %50

55:                                               ; preds = %58, %57
  %56 = phi i1 [ true, %57 ], [ %60, %58 ]
  br i1 %56, label %61, label %65

57:                                               ; preds = %50
  br label %55

58:                                               ; preds = %50
  %59 = load i32, ptr %13, align 4
  %60 = icmp eq i32 %59, 32767
  br label %55

61:                                               ; preds = %55
  %62 = call i80 @__mulxf3(i80 %0, i80 %1)
  %63 = call i80 @__mulxf3(i80 %0, i80 %1)
  %64 = call i80 @__divxf3(i80 %62, i80 %63)
  ret i80 %64

65:                                               ; preds = %55
  br label %42

66:                                               ; preds = %73
  %67 = load i32, ptr %13, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %81, label %83

69:                                               ; preds = %42
  %70 = load i80, ptr %15, align 16
  %71 = load i80, ptr %14, align 16
  %72 = icmp eq i80 %70, %71
  br i1 %72, label %75, label %77

73:                                               ; preds = %42
  br label %66

74:                                               ; preds = %77
  ret i80 %0

75:                                               ; preds = %69
  %76 = call i80 @__mulxf3(i80 0, i80 %0)
  ret i80 %76

77:                                               ; preds = %69
  br label %74

78:                                               ; preds = %83, %81
  %79 = load i32, ptr %12, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %89, label %91

81:                                               ; preds = %66
  %82 = call fastcc i32 @compiler_rt.common.normalize__anon_3627(ptr nonnull align 16 %15)
  store i32 %82, ptr %13, align 4
  br label %78

83:                                               ; preds = %66
  br label %78

84:                                               ; preds = %91, %89
  store i64 0, ptr %11, align 8
  store i64 0, ptr %10, align 8
  %85 = load i80, ptr %15, align 16
  %86 = trunc i80 %85 to i64
  store i64 %86, ptr %9, align 8
  %87 = load i80, ptr %14, align 16
  %88 = trunc i80 %87 to i64
  store i64 %88, ptr %8, align 8
  br label %102

89:                                               ; preds = %78
  %90 = call fastcc i32 @compiler_rt.common.normalize__anon_3627(ptr nonnull align 16 %14)
  store i32 %90, ptr %12, align 4
  br label %84

91:                                               ; preds = %78
  br label %84

92:                                               ; preds = %117
  %93 = load i64, ptr %11, align 8
  %94 = load i64, ptr %10, align 8
  %95 = sub i64 %93, %94
  store i64 %95, ptr %5, align 8
  %96 = load i64, ptr %9, align 8
  %97 = load i64, ptr %8, align 8
  %98 = sub i64 %96, %97
  store i64 %98, ptr %4, align 8
  %99 = load i64, ptr %9, align 8
  %100 = load i64, ptr %8, align 8
  %101 = icmp ult i64 %99, %100
  br i1 %101, label %169, label %172

102:                                              ; preds = %106, %84
  %103 = load i32, ptr %13, align 4
  %104 = load i32, ptr %12, align 4
  %105 = icmp sgt i32 %103, %104
  br i1 %105, label %107, label %117

106:                                              ; preds = %163
  br label %102

107:                                              ; preds = %102
  %108 = load i64, ptr %11, align 8
  %109 = load i64, ptr %10, align 8
  %110 = sub i64 %108, %109
  store i64 %110, ptr %7, align 8
  %111 = load i64, ptr %9, align 8
  %112 = load i64, ptr %8, align 8
  %113 = sub i64 %111, %112
  store i64 %113, ptr %6, align 8
  %114 = load i64, ptr %9, align 8
  %115 = load i64, ptr %8, align 8
  %116 = icmp ult i64 %114, %115
  br i1 %116, label %122, label %125

117:                                              ; preds = %102
  br label %92

118:                                              ; preds = %125, %122
  %119 = load i64, ptr %7, align 8
  %120 = lshr i64 %119, 63
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %130, label %135

122:                                              ; preds = %107
  %123 = load i64, ptr %7, align 8
  %124 = sub i64 %123, 1
  store i64 %124, ptr %7, align 8
  br label %118

125:                                              ; preds = %107
  br label %118

126:                                              ; preds = %158, %153
  %127 = load i32, ptr %13, align 4
  %128 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %127, i32 1)
  %129 = extractvalue { i32, i1 } %128, 1
  br i1 %129, label %162, label %163

130:                                              ; preds = %118
  %131 = load i64, ptr %7, align 8
  %132 = load i64, ptr %6, align 8
  %133 = or i64 %131, %132
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %149, label %151

135:                                              ; preds = %118
  %136 = load i64, ptr %11, align 8
  %137 = mul i64 2, %136
  %138 = load i64, ptr %9, align 8
  %139 = lshr i64 %138, 63
  %140 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %137, i64 %139)
  %141 = extractvalue { i64, i1 } %140, 1
  br i1 %141, label %157, label %158

142:                                              ; preds = %151
  %143 = load i64, ptr %7, align 8
  %144 = mul i64 2, %143
  %145 = load i64, ptr %6, align 8
  %146 = lshr i64 %145, 63
  %147 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %144, i64 %146)
  %148 = extractvalue { i64, i1 } %147, 1
  br i1 %148, label %152, label %153

149:                                              ; preds = %130
  %150 = call i80 @__mulxf3(i80 0, i80 %0)
  ret i80 %150

151:                                              ; preds = %130
  br label %142

152:                                              ; preds = %142
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

153:                                              ; preds = %142
  %154 = extractvalue { i64, i1 } %147, 0
  store i64 %154, ptr %11, align 8
  %155 = load i64, ptr %6, align 8
  %156 = mul i64 2, %155
  store i64 %156, ptr %9, align 8
  br label %126

157:                                              ; preds = %135
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

158:                                              ; preds = %135
  %159 = extractvalue { i64, i1 } %140, 0
  store i64 %159, ptr %11, align 8
  %160 = load i64, ptr %9, align 8
  %161 = mul i64 2, %160
  store i64 %161, ptr %9, align 8
  br label %126

162:                                              ; preds = %126
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

163:                                              ; preds = %126
  %164 = extractvalue { i32, i1 } %128, 0
  store i32 %164, ptr %13, align 4
  br label %106

165:                                              ; preds = %172, %169
  %166 = load i64, ptr %5, align 8
  %167 = lshr i64 %166, 63
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %174, label %179

169:                                              ; preds = %92
  %170 = load i64, ptr %5, align 8
  %171 = sub i64 %170, 1
  store i64 %171, ptr %5, align 8
  br label %165

172:                                              ; preds = %92
  br label %165

173:                                              ; preds = %180, %179
  br label %189

174:                                              ; preds = %165
  %175 = load i64, ptr %5, align 8
  %176 = load i64, ptr %4, align 8
  %177 = or i64 %175, %176
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %183, label %185

179:                                              ; preds = %165
  br label %173

180:                                              ; preds = %185
  %181 = load i64, ptr %5, align 8
  store i64 %181, ptr %11, align 8
  %182 = load i64, ptr %4, align 8
  store i64 %182, ptr %9, align 8
  br label %173

183:                                              ; preds = %174
  %184 = call i80 @__mulxf3(i80 0, i80 %0)
  ret i80 %184

185:                                              ; preds = %174
  br label %180

186:                                              ; preds = %200
  %187 = load i32, ptr %13, align 4
  %188 = icmp slt i32 %187, -63
  br i1 %188, label %204, label %205

189:                                              ; preds = %193, %173
  %190 = load i64, ptr %9, align 8
  %191 = lshr i64 %190, 63
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %194, label %200

193:                                              ; preds = %202
  br label %189

194:                                              ; preds = %189
  %195 = load i64, ptr %9, align 8
  %196 = mul i64 2, %195
  store i64 %196, ptr %9, align 8
  %197 = load i32, ptr %13, align 4
  %198 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %197, i32 1)
  %199 = extractvalue { i32, i1 } %198, 1
  br i1 %199, label %201, label %202

200:                                              ; preds = %189
  br label %186

201:                                              ; preds = %194
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

202:                                              ; preds = %194
  %203 = extractvalue { i32, i1 } %198, 0
  store i32 %203, ptr %13, align 4
  br label %193

204:                                              ; preds = %186
  ret i80 %17

205:                                              ; preds = %186
  %206 = load i32, ptr %13, align 4
  %207 = icmp sle i32 %206, 0
  br i1 %207, label %208, label %213

208:                                              ; preds = %205
  %209 = load i64, ptr %9, align 8
  %210 = load i32, ptr %13, align 4
  %211 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 1, i32 %210)
  %212 = extractvalue { i32, i1 } %211, 1
  br i1 %212, label %218, label %219

213:                                              ; preds = %205
  %214 = load i64, ptr %9, align 8
  %215 = load i32, ptr %13, align 4
  %216 = sub i32 65535, %215
  %217 = icmp ule i32 %216, 65535
  br i1 %217, label %234, label %235

218:                                              ; preds = %208
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

219:                                              ; preds = %208
  %220 = extractvalue { i32, i1 } %211, 0
  %221 = sub i32 63, %220
  %222 = icmp ule i32 %221, 63
  br i1 %222, label %229, label %230

223:                                              ; preds = %229
  %224 = trunc i32 %220 to i6
  %225 = zext i6 %224 to i64
  %226 = lshr i64 %209, %225
  %227 = zext i64 %226 to i80
  %228 = or i80 %227, %17
  ret i80 %228

229:                                              ; preds = %219
  br label %223

230:                                              ; preds = %219
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

231:                                              ; preds = %234
  %232 = trunc i32 %215 to i16
  %233 = zext i16 %232 to i80
  br i1 true, label %241, label %242

234:                                              ; preds = %213
  br label %231

235:                                              ; preds = %213
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable

236:                                              ; preds = %241
  %237 = shl i80 %233, 64
  %238 = zext i64 %214 to i80
  %239 = or i80 %238, %237
  %240 = or i80 %239, %17
  ret i80 %240

241:                                              ; preds = %231
  br label %236

242:                                              ; preds = %231
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.shift_rhs_too_big__anon_3577, i64 42, ptr align 8 null, ptr nonnull readonly align 8 @102)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @fmodq(fp128 %0, fp128 %1) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %3 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %3, ptr %StackGuardSlot)
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca fp128, align 16
  %18 = alloca fp128, align 16
  store fp128 %0, ptr %18, align 16
  store fp128 %1, ptr %17, align 16
  store ptr %18, ptr %16, align 8
  store ptr %18, ptr %15, align 8
  store ptr %17, ptr %14, align 8
  %19 = getelementptr inbounds i16, ptr %18, i64 7
  %20 = load i16, ptr %19, align 2
  %21 = and i16 %20, -32768
  %22 = getelementptr inbounds i16, ptr %18, i64 7
  %23 = load i16, ptr %22, align 2
  %24 = and i16 %23, 32767
  %25 = zext i16 %24 to i32
  store i32 %25, ptr %13, align 4
  %26 = getelementptr inbounds i16, ptr %17, i64 7
  %27 = load i16, ptr %26, align 2
  %28 = and i16 %27, 32767
  %29 = zext i16 %28 to i32
  store i32 %29, ptr %12, align 4
  %30 = call i32 @__eqtf2(fp128 %1, fp128 0xL00000000000000000000000000000000)
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %40, label %41

32:                                               ; preds = %53
  %33 = load ptr, ptr %15, align 8
  %34 = getelementptr inbounds i16, ptr %33, i64 7
  %35 = load i32, ptr %13, align 4
  %36 = sub i32 32767, %35
  %37 = icmp ule i32 %36, 65535
  br i1 %37, label %61, label %62

38:                                               ; preds = %41, %40
  %39 = phi i1 [ true, %40 ], [ %42, %41 ]
  br i1 %39, label %45, label %46

40:                                               ; preds = %2
  br label %38

41:                                               ; preds = %2
  %42 = call fastcc i1 @math.isnan.isNan__anon_3686(fp128 %1)
  br label %38

43:                                               ; preds = %46, %45
  %44 = phi i1 [ true, %45 ], [ %48, %46 ]
  br i1 %44, label %49, label %53

45:                                               ; preds = %38
  br label %43

46:                                               ; preds = %38
  %47 = load i32, ptr %13, align 4
  %48 = icmp eq i32 %47, 32767
  br label %43

49:                                               ; preds = %43
  %50 = call fp128 @__multf3(fp128 %0, fp128 %1)
  %51 = call fp128 @__multf3(fp128 %0, fp128 %1)
  %52 = call fp128 @__divtf3(fp128 %50, fp128 %51)
  ret fp128 %52

53:                                               ; preds = %43
  br label %32

54:                                               ; preds = %61
  %55 = trunc i32 %35 to i16
  store i16 %55, ptr %34, align 2
  %56 = load ptr, ptr %14, align 8
  %57 = getelementptr inbounds i16, ptr %56, i64 7
  %58 = load i32, ptr %12, align 4
  %59 = sub i32 32767, %58
  %60 = icmp ule i32 %59, 65535
  br i1 %60, label %69, label %70

61:                                               ; preds = %32
  br label %54

62:                                               ; preds = %32
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @103)
  unreachable

63:                                               ; preds = %69
  %64 = trunc i32 %58 to i16
  store i16 %64, ptr %57, align 2
  %65 = load fp128, ptr %18, align 16
  %66 = load fp128, ptr %17, align 16
  %67 = call i32 @__letf2(fp128 %65, fp128 %66)
  %68 = icmp sle i32 %67, 0
  br i1 %68, label %74, label %79

69:                                               ; preds = %54
  br label %63

70:                                               ; preds = %54
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @103)
  unreachable

71:                                               ; preds = %79
  %72 = load i32, ptr %13, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %87, label %95

74:                                               ; preds = %63
  %75 = load fp128, ptr %18, align 16
  %76 = load fp128, ptr %17, align 16
  %77 = call i32 @__eqtf2(fp128 %75, fp128 %76)
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %81, label %83

79:                                               ; preds = %63
  br label %71

80:                                               ; preds = %83
  ret fp128 %0

81:                                               ; preds = %74
  %82 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %0)
  ret fp128 %82

83:                                               ; preds = %74
  br label %80

84:                                               ; preds = %97, %95
  %85 = load i32, ptr %12, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %112, label %120

87:                                               ; preds = %71
  %88 = load fp128, ptr %18, align 16
  %89 = call fp128 @__multf3(fp128 %88, fp128 0xL00000000000000004077000000000000)
  store fp128 %89, ptr %18, align 16
  %90 = getelementptr inbounds i16, ptr %18, i64 7
  %91 = load i16, ptr %90, align 2
  %92 = zext i16 %91 to i32
  %93 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %92, i32 120)
  %94 = extractvalue { i32, i1 } %93, 1
  br i1 %94, label %96, label %97

95:                                               ; preds = %71
  br label %84

96:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %87
  %98 = extractvalue { i32, i1 } %93, 0
  store i32 %98, ptr %13, align 4
  br label %84

99:                                               ; preds = %122, %120
  %100 = getelementptr inbounds i64, ptr %18, i64 1
  %101 = load i64, ptr %100, align 8
  %102 = and i64 %101, 281474976710655
  %103 = or i64 %102, 281474976710656
  store i64 %103, ptr %11, align 8
  %104 = getelementptr inbounds i64, ptr %17, i64 1
  %105 = load i64, ptr %104, align 8
  %106 = and i64 %105, 281474976710655
  %107 = or i64 %106, 281474976710656
  store i64 %107, ptr %10, align 8
  %108 = getelementptr inbounds i64, ptr %18, i64 0
  %109 = load i64, ptr %108, align 8
  store i64 %109, ptr %9, align 8
  %110 = getelementptr inbounds i64, ptr %17, i64 0
  %111 = load i64, ptr %110, align 8
  store i64 %111, ptr %8, align 8
  br label %134

112:                                              ; preds = %84
  %113 = load fp128, ptr %17, align 16
  %114 = call fp128 @__multf3(fp128 %113, fp128 0xL00000000000000004077000000000000)
  store fp128 %114, ptr %17, align 16
  %115 = getelementptr inbounds i16, ptr %17, i64 7
  %116 = load i16, ptr %115, align 2
  %117 = zext i16 %116 to i32
  %118 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %117, i32 120)
  %119 = extractvalue { i32, i1 } %118, 1
  br i1 %119, label %121, label %122

120:                                              ; preds = %84
  br label %99

121:                                              ; preds = %112
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

122:                                              ; preds = %112
  %123 = extractvalue { i32, i1 } %118, 0
  store i32 %123, ptr %12, align 4
  br label %99

124:                                              ; preds = %149
  %125 = load i64, ptr %11, align 8
  %126 = load i64, ptr %10, align 8
  %127 = sub i64 %125, %126
  store i64 %127, ptr %5, align 8
  %128 = load i64, ptr %9, align 8
  %129 = load i64, ptr %8, align 8
  %130 = sub i64 %128, %129
  store i64 %130, ptr %4, align 8
  %131 = load i64, ptr %9, align 8
  %132 = load i64, ptr %8, align 8
  %133 = icmp ult i64 %131, %132
  br i1 %133, label %201, label %205

134:                                              ; preds = %138, %99
  %135 = load i32, ptr %13, align 4
  %136 = load i32, ptr %12, align 4
  %137 = icmp sgt i32 %135, %136
  br i1 %137, label %139, label %149

138:                                              ; preds = %195
  br label %134

139:                                              ; preds = %134
  %140 = load i64, ptr %11, align 8
  %141 = load i64, ptr %10, align 8
  %142 = sub i64 %140, %141
  store i64 %142, ptr %7, align 8
  %143 = load i64, ptr %9, align 8
  %144 = load i64, ptr %8, align 8
  %145 = sub i64 %143, %144
  store i64 %145, ptr %6, align 8
  %146 = load i64, ptr %9, align 8
  %147 = load i64, ptr %8, align 8
  %148 = icmp ult i64 %146, %147
  br i1 %148, label %154, label %157

149:                                              ; preds = %134
  br label %124

150:                                              ; preds = %157, %154
  %151 = load i64, ptr %7, align 8
  %152 = lshr i64 %151, 63
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %162, label %167

154:                                              ; preds = %139
  %155 = load i64, ptr %7, align 8
  %156 = sub i64 %155, 1
  store i64 %156, ptr %7, align 8
  br label %150

157:                                              ; preds = %139
  br label %150

158:                                              ; preds = %190, %185
  %159 = load i32, ptr %13, align 4
  %160 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %159, i32 1)
  %161 = extractvalue { i32, i1 } %160, 1
  br i1 %161, label %194, label %195

162:                                              ; preds = %150
  %163 = load i64, ptr %7, align 8
  %164 = load i64, ptr %6, align 8
  %165 = or i64 %163, %164
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %181, label %183

167:                                              ; preds = %150
  %168 = load i64, ptr %11, align 8
  %169 = mul i64 2, %168
  %170 = load i64, ptr %9, align 8
  %171 = lshr i64 %170, 63
  %172 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %169, i64 %171)
  %173 = extractvalue { i64, i1 } %172, 1
  br i1 %173, label %189, label %190

174:                                              ; preds = %183
  %175 = load i64, ptr %7, align 8
  %176 = mul i64 2, %175
  %177 = load i64, ptr %6, align 8
  %178 = lshr i64 %177, 63
  %179 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %176, i64 %178)
  %180 = extractvalue { i64, i1 } %179, 1
  br i1 %180, label %184, label %185

181:                                              ; preds = %162
  %182 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %0)
  ret fp128 %182

183:                                              ; preds = %162
  br label %174

184:                                              ; preds = %174
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

185:                                              ; preds = %174
  %186 = extractvalue { i64, i1 } %179, 0
  store i64 %186, ptr %11, align 8
  %187 = load i64, ptr %6, align 8
  %188 = mul i64 2, %187
  store i64 %188, ptr %9, align 8
  br label %158

189:                                              ; preds = %167
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

190:                                              ; preds = %167
  %191 = extractvalue { i64, i1 } %172, 0
  store i64 %191, ptr %11, align 8
  %192 = load i64, ptr %9, align 8
  %193 = mul i64 2, %192
  store i64 %193, ptr %9, align 8
  br label %158

194:                                              ; preds = %158
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

195:                                              ; preds = %158
  %196 = extractvalue { i32, i1 } %160, 0
  store i32 %196, ptr %13, align 4
  br label %138

197:                                              ; preds = %207, %205
  %198 = load i64, ptr %5, align 8
  %199 = lshr i64 %198, 63
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %210, label %215

201:                                              ; preds = %124
  %202 = load i64, ptr %5, align 8
  %203 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %202, i64 1)
  %204 = extractvalue { i64, i1 } %203, 1
  br i1 %204, label %206, label %207

205:                                              ; preds = %124
  br label %197

206:                                              ; preds = %201
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

207:                                              ; preds = %201
  %208 = extractvalue { i64, i1 } %203, 0
  store i64 %208, ptr %5, align 8
  br label %197

209:                                              ; preds = %216, %215
  br label %231

210:                                              ; preds = %197
  %211 = load i64, ptr %5, align 8
  %212 = load i64, ptr %4, align 8
  %213 = or i64 %211, %212
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %219, label %221

215:                                              ; preds = %197
  br label %209

216:                                              ; preds = %221
  %217 = load i64, ptr %5, align 8
  store i64 %217, ptr %11, align 8
  %218 = load i64, ptr %4, align 8
  store i64 %218, ptr %9, align 8
  br label %209

219:                                              ; preds = %210
  %220 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %0)
  ret fp128 %220

221:                                              ; preds = %210
  br label %216

222:                                              ; preds = %243
  %223 = load ptr, ptr %16, align 8
  %224 = getelementptr inbounds i64, ptr %223, i64 1
  %225 = load i64, ptr %11, align 8
  store i64 %225, ptr %224, align 8
  %226 = load ptr, ptr %16, align 8
  %227 = getelementptr inbounds i64, ptr %226, i64 0
  %228 = load i64, ptr %9, align 8
  store i64 %228, ptr %227, align 8
  %229 = load i32, ptr %13, align 4
  %230 = icmp sle i32 %229, 0
  br i1 %230, label %257, label %266

231:                                              ; preds = %235, %209
  %232 = load i64, ptr %11, align 8
  %233 = lshr i64 %232, 48
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %236, label %243

235:                                              ; preds = %253
  br label %231

236:                                              ; preds = %231
  %237 = load i64, ptr %11, align 8
  %238 = mul i64 2, %237
  %239 = load i64, ptr %9, align 8
  %240 = lshr i64 %239, 63
  %241 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %238, i64 %240)
  %242 = extractvalue { i64, i1 } %241, 1
  br i1 %242, label %244, label %245

243:                                              ; preds = %231
  br label %222

244:                                              ; preds = %236
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

245:                                              ; preds = %236
  %246 = extractvalue { i64, i1 } %241, 0
  store i64 %246, ptr %11, align 8
  %247 = load i64, ptr %9, align 8
  %248 = mul i64 2, %247
  store i64 %248, ptr %9, align 8
  %249 = load i32, ptr %13, align 4
  %250 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %249, i32 1)
  %251 = extractvalue { i32, i1 } %250, 1
  br i1 %251, label %252, label %253

252:                                              ; preds = %245
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

253:                                              ; preds = %245
  %254 = extractvalue { i32, i1 } %250, 0
  store i32 %254, ptr %13, align 4
  br label %235

255:                                              ; preds = %266, %257
  %256 = load fp128, ptr %18, align 16
  ret fp128 %256

257:                                              ; preds = %222
  %258 = load ptr, ptr %15, align 8
  %259 = getelementptr inbounds i16, ptr %258, i64 7
  %260 = load i32, ptr %13, align 4
  %261 = add i32 %260, 120
  %262 = trunc i32 %261 to i16
  %263 = or i16 %262, %21
  store i16 %263, ptr %259, align 2
  %264 = load fp128, ptr %18, align 16
  %265 = call fp128 @__multf3(fp128 %264, fp128 0xL00000000000000003F87000000000000)
  store fp128 %265, ptr %18, align 16
  br label %255

266:                                              ; preds = %222
  %267 = load ptr, ptr %15, align 8
  %268 = getelementptr inbounds i16, ptr %267, i64 7
  %269 = load i32, ptr %13, align 4
  %270 = trunc i32 %269 to i16
  %271 = or i16 %270, %21
  store i16 %271, ptr %268, align 2
  br label %255
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @fmodl(double %0, double %1) #0 {
  %3 = call double @fmod(double %0, double %1)
  ret double %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__logh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @logf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @logf(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  store float %0, ptr %5, align 4
  %6 = load float, ptr %5, align 4
  %7 = bitcast float %6 to i32
  store i32 %7, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %8 = load i32, ptr %4, align 4
  %9 = icmp ult i32 %8, 8388608
  br i1 %9, label %16, label %17

10:                                               ; preds = %48, %42
  %11 = load i32, ptr %4, align 4
  %12 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %11, i32 4913933)
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %57, label %58

14:                                               ; preds = %17, %16
  %15 = phi i1 [ true, %16 ], [ %20, %17 ]
  br i1 %15, label %21, label %25

16:                                               ; preds = %1
  br label %14

17:                                               ; preds = %1
  %18 = load i32, ptr %4, align 4
  %19 = lshr i32 %18, 31
  %20 = icmp ne i32 %19, 0
  br label %14

21:                                               ; preds = %14
  %22 = load i32, ptr %4, align 4
  %23 = shl i32 %22, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %32, label %33

25:                                               ; preds = %14
  %26 = load i32, ptr %4, align 4
  %27 = icmp uge i32 %26, 2139095040
  br i1 %27, label %49, label %51

28:                                               ; preds = %33
  %29 = load i32, ptr %4, align 4
  %30 = lshr i32 %29, 31
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %38, label %40

32:                                               ; preds = %21
  ret float 0xFFF0000000000000

33:                                               ; preds = %21
  br label %28

34:                                               ; preds = %40
  %35 = load i32, ptr %3, align 4
  %36 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %35, i32 25)
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %41, label %42

38:                                               ; preds = %28
  store float 0x7FF0000020000000, ptr %2, align 4
  %39 = load float, ptr %2, align 4
  ret float %39

40:                                               ; preds = %28
  br label %34

41:                                               ; preds = %34
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

42:                                               ; preds = %34
  %43 = extractvalue { i32, i1 } %36, 0
  store i32 %43, ptr %3, align 4
  %44 = load float, ptr %5, align 4
  %45 = fmul float %44, 0x4180000000000000
  store float %45, ptr %5, align 4
  %46 = load float, ptr %5, align 4
  %47 = bitcast float %46 to i32
  store i32 %47, ptr %4, align 4
  br label %10

48:                                               ; preds = %54
  br label %10

49:                                               ; preds = %25
  %50 = load float, ptr %5, align 4
  ret float %50

51:                                               ; preds = %25
  %52 = load i32, ptr %4, align 4
  %53 = icmp eq i32 %52, 1065353216
  br i1 %53, label %55, label %56

54:                                               ; preds = %56
  br label %48

55:                                               ; preds = %51
  ret float 0.000000e+00

56:                                               ; preds = %51
  br label %54

57:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

58:                                               ; preds = %10
  %59 = extractvalue { i32, i1 } %12, 0
  store i32 %59, ptr %4, align 4
  %60 = load i32, ptr %3, align 4
  %61 = load i32, ptr %4, align 4
  %62 = lshr i32 %61, 23
  %63 = sub i32 2147483647, %62
  %64 = icmp ule i32 %63, 2147483647
  br i1 %64, label %68, label %69

65:                                               ; preds = %68
  %66 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %62, i32 127)
  %67 = extractvalue { i32, i1 } %66, 1
  br i1 %67, label %70, label %71

68:                                               ; preds = %58
  br label %65

69:                                               ; preds = %58
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @104)
  unreachable

70:                                               ; preds = %65
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

71:                                               ; preds = %65
  %72 = extractvalue { i32, i1 } %66, 0
  %73 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %60, i32 %72)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %75, label %76

75:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

76:                                               ; preds = %71
  %77 = extractvalue { i32, i1 } %73, 0
  store i32 %77, ptr %3, align 4
  %78 = load i32, ptr %4, align 4
  %79 = and i32 %78, 8388607
  %80 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %79, i32 1060439283)
  %81 = extractvalue { i32, i1 } %80, 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %76
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

83:                                               ; preds = %76
  %84 = extractvalue { i32, i1 } %80, 0
  store i32 %84, ptr %4, align 4
  %85 = load i32, ptr %4, align 4
  %86 = bitcast i32 %85 to float
  store float %86, ptr %5, align 4
  %87 = load float, ptr %5, align 4
  %88 = fsub float %87, 1.000000e+00
  %89 = fadd float 2.000000e+00, %88
  %90 = fdiv float %88, %89
  %91 = fmul float %90, %90
  %92 = fmul float %91, %91
  %93 = fmul float %92, 0x3FCF13C4C0000000
  %94 = fadd float 0x3FD999C260000000, %93
  %95 = fmul float %92, %94
  %96 = fmul float %92, 0x3FD23D3DC0000000
  %97 = fadd float 0x3FE5555540000000, %96
  %98 = fmul float %91, %97
  %99 = fadd float %98, %95
  %100 = fmul float 5.000000e-01, %88
  %101 = fmul float %100, %88
  %102 = load i32, ptr %3, align 4
  %103 = sitofp i32 %102 to float
  %104 = fadd float %101, %99
  %105 = fmul float %90, %104
  %106 = fmul float %103, 0x3EE2FEFA20000000
  %107 = fadd float %105, %106
  %108 = fsub float %107, %101
  %109 = fadd float %108, %88
  %110 = fmul float %103, 0x3FE62E3000000000
  %111 = fadd float %109, %110
  ret float %111
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @log(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca double, align 8
  store double %0, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  %8 = bitcast double %7 to i64
  store i64 %8, ptr %5, align 8
  %9 = load i64, ptr %5, align 8
  %10 = lshr i64 %9, 32
  %11 = sub i64 4294967295, %10
  %12 = icmp ule i64 %11, 4294967295
  br i1 %12, label %17, label %18

13:                                               ; preds = %17
  %14 = trunc i64 %10 to i32
  store i32 %14, ptr %4, align 4
  store i32 0, ptr %3, align 4
  %15 = load i32, ptr %4, align 4
  %16 = icmp ult i32 %15, 1048576
  br i1 %16, label %25, label %26

17:                                               ; preds = %1
  br label %13

18:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @105)
  unreachable

19:                                               ; preds = %63, %59
  %20 = load i32, ptr %4, align 4
  %21 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %20, i32 614242)
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %79, label %80

23:                                               ; preds = %26, %25
  %24 = phi i1 [ true, %25 ], [ %29, %26 ]
  br i1 %24, label %30, label %34

25:                                               ; preds = %13
  br label %23

26:                                               ; preds = %13
  %27 = load i32, ptr %4, align 4
  %28 = lshr i32 %27, 31
  %29 = icmp ne i32 %28, 0
  br label %23

30:                                               ; preds = %23
  %31 = load i64, ptr %5, align 8
  %32 = shl i64 %31, 1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %41, label %42

34:                                               ; preds = %23
  %35 = load i32, ptr %4, align 4
  %36 = icmp uge i32 %35, 2146435072
  br i1 %36, label %64, label %66

37:                                               ; preds = %42
  %38 = load i32, ptr %4, align 4
  %39 = lshr i32 %38, 31
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %47, label %49

41:                                               ; preds = %30
  ret double 0xFFF0000000000000

42:                                               ; preds = %30
  br label %37

43:                                               ; preds = %49
  %44 = load i32, ptr %3, align 4
  %45 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %44, i32 54)
  %46 = extractvalue { i32, i1 } %45, 1
  br i1 %46, label %50, label %51

47:                                               ; preds = %37
  store double 0x7FF0000000000001, ptr %2, align 8
  %48 = load double, ptr %2, align 8
  ret double %48

49:                                               ; preds = %37
  br label %43

50:                                               ; preds = %43
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

51:                                               ; preds = %43
  %52 = extractvalue { i32, i1 } %45, 0
  store i32 %52, ptr %3, align 4
  %53 = load double, ptr %6, align 8
  %54 = fmul double %53, 0x4350000000000000
  store double %54, ptr %6, align 8
  %55 = load i64, ptr %5, align 8
  %56 = lshr i64 %55, 32
  %57 = sub i64 4294967295, %56
  %58 = icmp ule i64 %57, 4294967295
  br i1 %58, label %61, label %62

59:                                               ; preds = %61
  %60 = trunc i64 %56 to i32
  store i32 %60, ptr %4, align 4
  br label %19

61:                                               ; preds = %51
  br label %59

62:                                               ; preds = %51
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @105)
  unreachable

63:                                               ; preds = %69
  br label %19

64:                                               ; preds = %34
  %65 = load double, ptr %6, align 8
  ret double %65

66:                                               ; preds = %34
  %67 = load i32, ptr %4, align 4
  %68 = icmp eq i32 %67, 1072693248
  br i1 %68, label %72, label %76

69:                                               ; preds = %78
  br label %63

70:                                               ; preds = %76, %72
  %71 = phi i1 [ %75, %72 ], [ false, %76 ]
  br i1 %71, label %77, label %78

72:                                               ; preds = %66
  %73 = load i64, ptr %5, align 8
  %74 = shl i64 %73, 32
  %75 = icmp eq i64 %74, 0
  br label %70

76:                                               ; preds = %66
  br label %70

77:                                               ; preds = %70
  ret double 0.000000e+00

78:                                               ; preds = %70
  br label %69

79:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

80:                                               ; preds = %19
  %81 = extractvalue { i32, i1 } %21, 0
  store i32 %81, ptr %4, align 4
  %82 = load i32, ptr %3, align 4
  %83 = load i32, ptr %4, align 4
  %84 = lshr i32 %83, 20
  %85 = sub i32 2147483647, %84
  %86 = icmp ule i32 %85, 2147483647
  br i1 %86, label %90, label %91

87:                                               ; preds = %90
  %88 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %84, i32 1023)
  %89 = extractvalue { i32, i1 } %88, 1
  br i1 %89, label %92, label %93

90:                                               ; preds = %80
  br label %87

91:                                               ; preds = %80
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @105)
  unreachable

92:                                               ; preds = %87
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

93:                                               ; preds = %87
  %94 = extractvalue { i32, i1 } %88, 0
  %95 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %82, i32 %94)
  %96 = extractvalue { i32, i1 } %95, 1
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %93
  %99 = extractvalue { i32, i1 } %95, 0
  store i32 %99, ptr %3, align 4
  %100 = load i32, ptr %4, align 4
  %101 = and i32 %100, 1048575
  %102 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %101, i32 1072079006)
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %104, label %105

104:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

105:                                              ; preds = %98
  %106 = extractvalue { i32, i1 } %102, 0
  store i32 %106, ptr %4, align 4
  %107 = load i32, ptr %4, align 4
  %108 = zext i32 %107 to i64
  %109 = shl i64 %108, 32
  %110 = load i64, ptr %5, align 8
  %111 = and i64 %110, 4294967295
  %112 = or i64 %109, %111
  store i64 %112, ptr %5, align 8
  %113 = load i64, ptr %5, align 8
  %114 = bitcast i64 %113 to double
  store double %114, ptr %6, align 8
  %115 = load double, ptr %6, align 8
  %116 = fsub double %115, 1.000000e+00
  %117 = fmul double 5.000000e-01, %116
  %118 = fmul double %117, %116
  %119 = fadd double 2.000000e+00, %116
  %120 = fdiv double %116, %119
  %121 = fmul double %120, %120
  %122 = fmul double %121, %121
  %123 = fmul double %122, 0x3FC39A09D078C69F
  %124 = fadd double 0x3FCC71C51D8E78AF, %123
  %125 = fmul double %122, %124
  %126 = fadd double 0x3FD999999997FA04, %125
  %127 = fmul double %122, %126
  %128 = fmul double %122, 0x3FC2F112DF3E5244
  %129 = fadd double 0x3FC7466496CB03DE, %128
  %130 = fmul double %122, %129
  %131 = fadd double 0x3FD2492494229359, %130
  %132 = fmul double %122, %131
  %133 = fadd double 0x3FE5555555555593, %132
  %134 = fmul double %121, %133
  %135 = fadd double %134, %127
  %136 = load i32, ptr %3, align 4
  %137 = sitofp i32 %136 to double
  %138 = fadd double %118, %135
  %139 = fmul double %120, %138
  %140 = fmul double %137, 0x3DEA39EF35793C76
  %141 = fadd double %139, %140
  %142 = fsub double %141, %118
  %143 = fadd double %142, %116
  %144 = fmul double %137, 0x3FE62E42FEE00000
  %145 = fadd double %143, %144
  ret double %145
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__logx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @logq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @logq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @log(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @logl(double %0) #0 {
  %2 = call double @log(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__log10h(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @log10f(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @log10f(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  store float %0, ptr %7, align 4
  %8 = load float, ptr %7, align 4
  %9 = bitcast float %8 to i32
  store i32 %9, ptr %6, align 4
  %10 = load i32, ptr %6, align 4
  store i32 %10, ptr %5, align 4
  store i32 0, ptr %4, align 4
  %11 = load i32, ptr %5, align 4
  %12 = icmp ult i32 %11, 8388608
  br i1 %12, label %19, label %20

13:                                               ; preds = %51, %45
  %14 = load i32, ptr %5, align 4
  %15 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %14, i32 4913933)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %60, label %61

17:                                               ; preds = %20, %19
  %18 = phi i1 [ true, %19 ], [ %23, %20 ]
  br i1 %18, label %24, label %28

19:                                               ; preds = %1
  br label %17

20:                                               ; preds = %1
  %21 = load i32, ptr %5, align 4
  %22 = lshr i32 %21, 31
  %23 = icmp ne i32 %22, 0
  br label %17

24:                                               ; preds = %17
  %25 = load i32, ptr %5, align 4
  %26 = shl i32 %25, 1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %35, label %36

28:                                               ; preds = %17
  %29 = load i32, ptr %5, align 4
  %30 = icmp uge i32 %29, 2139095040
  br i1 %30, label %52, label %54

31:                                               ; preds = %36
  %32 = load i32, ptr %5, align 4
  %33 = lshr i32 %32, 31
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %41, label %43

35:                                               ; preds = %24
  ret float 0xFFF0000000000000

36:                                               ; preds = %24
  br label %31

37:                                               ; preds = %43
  %38 = load i32, ptr %4, align 4
  %39 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %38, i32 25)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %44, label %45

41:                                               ; preds = %31
  store float 0x7FF0000020000000, ptr %3, align 4
  %42 = load float, ptr %3, align 4
  ret float %42

43:                                               ; preds = %31
  br label %37

44:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %37
  %46 = extractvalue { i32, i1 } %39, 0
  store i32 %46, ptr %4, align 4
  %47 = load float, ptr %7, align 4
  %48 = fmul float %47, 0x4180000000000000
  store float %48, ptr %7, align 4
  %49 = load float, ptr %7, align 4
  %50 = bitcast float %49 to i32
  store i32 %50, ptr %5, align 4
  br label %13

51:                                               ; preds = %57
  br label %13

52:                                               ; preds = %28
  %53 = load float, ptr %7, align 4
  ret float %53

54:                                               ; preds = %28
  %55 = load i32, ptr %5, align 4
  %56 = icmp eq i32 %55, 1065353216
  br i1 %56, label %58, label %59

57:                                               ; preds = %59
  br label %51

58:                                               ; preds = %54
  ret float 0.000000e+00

59:                                               ; preds = %54
  br label %57

60:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %13
  %62 = extractvalue { i32, i1 } %15, 0
  store i32 %62, ptr %5, align 4
  %63 = load i32, ptr %4, align 4
  %64 = load i32, ptr %5, align 4
  %65 = lshr i32 %64, 23
  %66 = sub i32 2147483647, %65
  %67 = icmp ule i32 %66, 2147483647
  br i1 %67, label %71, label %72

68:                                               ; preds = %71
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %65, i32 127)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %61
  br label %68

72:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @106)
  unreachable

73:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %68
  %75 = extractvalue { i32, i1 } %69, 0
  %76 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %63, i32 %75)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %74
  %80 = extractvalue { i32, i1 } %76, 0
  store i32 %80, ptr %4, align 4
  %81 = load i32, ptr %5, align 4
  %82 = and i32 %81, 8388607
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1060439283)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %79
  %87 = extractvalue { i32, i1 } %83, 0
  store i32 %87, ptr %5, align 4
  %88 = load i32, ptr %5, align 4
  %89 = bitcast i32 %88 to float
  store float %89, ptr %7, align 4
  %90 = load float, ptr %7, align 4
  %91 = fsub float %90, 1.000000e+00
  %92 = fadd float 2.000000e+00, %91
  %93 = fdiv float %91, %92
  %94 = fmul float %93, %93
  %95 = fmul float %94, %94
  %96 = fmul float %95, 0x3FCF13C4C0000000
  %97 = fadd float 0x3FD999C260000000, %96
  %98 = fmul float %95, %97
  %99 = fmul float %95, 0x3FD23D3DC0000000
  %100 = fadd float 0x3FE5555540000000, %99
  %101 = fmul float %94, %100
  %102 = fadd float %101, %98
  %103 = fmul float 5.000000e-01, %91
  %104 = fmul float %103, %91
  %105 = fsub float %91, %104
  store float %105, ptr %2, align 4
  %106 = load float, ptr %2, align 4
  %107 = bitcast float %106 to i32
  store i32 %107, ptr %6, align 4
  %108 = load i32, ptr %6, align 4
  %109 = and i32 %108, -4096
  store i32 %109, ptr %6, align 4
  %110 = load i32, ptr %6, align 4
  %111 = bitcast i32 %110 to float
  store float %111, ptr %2, align 4
  %112 = load float, ptr %2, align 4
  %113 = fsub float %91, %112
  %114 = fsub float %113, %104
  %115 = fadd float %104, %102
  %116 = fmul float %93, %115
  %117 = fadd float %114, %116
  %118 = load i32, ptr %4, align 4
  %119 = sitofp i32 %118 to float
  %120 = fmul float %119, 0x3EAA84FB60000000
  %121 = load float, ptr %2, align 4
  %122 = fadd float %117, %121
  %123 = fmul float %122, 0xBF009D5B20000000
  %124 = fadd float %120, %123
  %125 = fmul float %117, 0x3FDBCC0000000000
  %126 = fadd float %124, %125
  %127 = load float, ptr %2, align 4
  %128 = fmul float %127, 0x3FDBCC0000000000
  %129 = fadd float %126, %128
  %130 = fmul float %119, 0x3FD3441000000000
  %131 = fadd float %129, %130
  ret float %131
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @log10(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca i64, align 8
  %5 = alloca double, align 8
  %6 = alloca float, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  store double %0, ptr %10, align 8
  %11 = load double, ptr %10, align 8
  %12 = bitcast double %11 to i64
  store i64 %12, ptr %9, align 8
  %13 = load i64, ptr %9, align 8
  %14 = lshr i64 %13, 32
  %15 = sub i64 4294967295, %14
  %16 = icmp ule i64 %15, 4294967295
  br i1 %16, label %21, label %22

17:                                               ; preds = %21
  %18 = trunc i64 %14 to i32
  store i32 %18, ptr %8, align 4
  store i32 0, ptr %7, align 4
  %19 = load i32, ptr %8, align 4
  %20 = icmp ult i32 %19, 1048576
  br i1 %20, label %29, label %30

21:                                               ; preds = %1
  br label %17

22:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @107)
  unreachable

23:                                               ; preds = %69, %65
  %24 = load i32, ptr %8, align 4
  %25 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %24, i32 614242)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %85, label %86

27:                                               ; preds = %30, %29
  %28 = phi i1 [ true, %29 ], [ %33, %30 ]
  br i1 %28, label %34, label %38

29:                                               ; preds = %17
  br label %27

30:                                               ; preds = %17
  %31 = load i32, ptr %8, align 4
  %32 = lshr i32 %31, 31
  %33 = icmp ne i32 %32, 0
  br label %27

34:                                               ; preds = %27
  %35 = load i64, ptr %9, align 8
  %36 = shl i64 %35, 1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %45, label %46

38:                                               ; preds = %27
  %39 = load i32, ptr %8, align 4
  %40 = icmp uge i32 %39, 2146435072
  br i1 %40, label %70, label %72

41:                                               ; preds = %46
  %42 = load i32, ptr %8, align 4
  %43 = lshr i32 %42, 31
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %51, label %54

45:                                               ; preds = %34
  ret double 0xFFF0000000000000

46:                                               ; preds = %34
  br label %41

47:                                               ; preds = %54
  %48 = load i32, ptr %7, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %48, i32 54)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %55, label %56

51:                                               ; preds = %41
  store float 0x7FF0000020000000, ptr %6, align 4
  %52 = load float, ptr %6, align 4
  %53 = fpext float %52 to double
  ret double %53

54:                                               ; preds = %41
  br label %47

55:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

56:                                               ; preds = %47
  %57 = extractvalue { i32, i1 } %49, 0
  store i32 %57, ptr %7, align 4
  %58 = load double, ptr %10, align 8
  %59 = fmul double %58, 0x4350000000000000
  store double %59, ptr %10, align 8
  %60 = load double, ptr %10, align 8
  %61 = bitcast double %60 to i64
  %62 = lshr i64 %61, 32
  %63 = sub i64 4294967295, %62
  %64 = icmp ule i64 %63, 4294967295
  br i1 %64, label %67, label %68

65:                                               ; preds = %67
  %66 = trunc i64 %62 to i32
  store i32 %66, ptr %8, align 4
  br label %23

67:                                               ; preds = %56
  br label %65

68:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @107)
  unreachable

69:                                               ; preds = %75
  br label %23

70:                                               ; preds = %38
  %71 = load double, ptr %10, align 8
  ret double %71

72:                                               ; preds = %38
  %73 = load i32, ptr %8, align 4
  %74 = icmp eq i32 %73, 1072693248
  br i1 %74, label %78, label %82

75:                                               ; preds = %84
  br label %69

76:                                               ; preds = %82, %78
  %77 = phi i1 [ %81, %78 ], [ false, %82 ]
  br i1 %77, label %83, label %84

78:                                               ; preds = %72
  %79 = load i64, ptr %9, align 8
  %80 = shl i64 %79, 32
  %81 = icmp eq i64 %80, 0
  br label %76

82:                                               ; preds = %72
  br label %76

83:                                               ; preds = %76
  ret double 0.000000e+00

84:                                               ; preds = %76
  br label %75

85:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %23
  %87 = extractvalue { i32, i1 } %25, 0
  store i32 %87, ptr %8, align 4
  %88 = load i32, ptr %7, align 4
  %89 = load i32, ptr %8, align 4
  %90 = lshr i32 %89, 20
  %91 = sub i32 2147483647, %90
  %92 = icmp ule i32 %91, 2147483647
  br i1 %92, label %96, label %97

93:                                               ; preds = %96
  %94 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %90, i32 1023)
  %95 = extractvalue { i32, i1 } %94, 1
  br i1 %95, label %98, label %99

96:                                               ; preds = %86
  br label %93

97:                                               ; preds = %86
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @107)
  unreachable

98:                                               ; preds = %93
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

99:                                               ; preds = %93
  %100 = extractvalue { i32, i1 } %94, 0
  %101 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %88, i32 %100)
  %102 = extractvalue { i32, i1 } %101, 1
  br i1 %102, label %103, label %104

103:                                              ; preds = %99
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

104:                                              ; preds = %99
  %105 = extractvalue { i32, i1 } %101, 0
  store i32 %105, ptr %7, align 4
  %106 = load i32, ptr %8, align 4
  %107 = and i32 %106, 1048575
  %108 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %107, i32 1072079006)
  %109 = extractvalue { i32, i1 } %108, 1
  br i1 %109, label %110, label %111

110:                                              ; preds = %104
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

111:                                              ; preds = %104
  %112 = extractvalue { i32, i1 } %108, 0
  store i32 %112, ptr %8, align 4
  %113 = load i32, ptr %8, align 4
  %114 = zext i32 %113 to i64
  %115 = shl i64 %114, 32
  %116 = load i64, ptr %9, align 8
  %117 = and i64 %116, 4294967295
  %118 = or i64 %115, %117
  store i64 %118, ptr %9, align 8
  %119 = load i64, ptr %9, align 8
  %120 = bitcast i64 %119 to double
  store double %120, ptr %10, align 8
  %121 = load double, ptr %10, align 8
  %122 = fsub double %121, 1.000000e+00
  %123 = fmul double 5.000000e-01, %122
  %124 = fmul double %123, %122
  %125 = fadd double 2.000000e+00, %122
  %126 = fdiv double %122, %125
  %127 = fmul double %126, %126
  %128 = fmul double %127, %127
  %129 = fmul double %128, 0x3FC39A09D078C69F
  %130 = fadd double 0x3FCC71C51D8E78AF, %129
  %131 = fmul double %128, %130
  %132 = fadd double 0x3FD999999997FA04, %131
  %133 = fmul double %128, %132
  %134 = fmul double %128, 0x3FC2F112DF3E5244
  %135 = fadd double 0x3FC7466496CB03DE, %134
  %136 = fmul double %128, %135
  %137 = fadd double 0x3FD2492494229359, %136
  %138 = fmul double %128, %137
  %139 = fadd double 0x3FE5555555555593, %138
  %140 = fmul double %127, %139
  %141 = fadd double %140, %133
  %142 = fsub double %122, %124
  store double %142, ptr %5, align 8
  %143 = load double, ptr %5, align 8
  %144 = bitcast double %143 to i64
  store i64 %144, ptr %4, align 8
  %145 = load i64, ptr %4, align 8
  %146 = and i64 %145, -4294967296
  store i64 %146, ptr %4, align 8
  %147 = load i64, ptr %4, align 8
  %148 = bitcast i64 %147 to double
  store double %148, ptr %5, align 8
  %149 = load double, ptr %5, align 8
  %150 = fsub double %122, %149
  %151 = fsub double %150, %124
  %152 = fadd double %124, %141
  %153 = fmul double %126, %152
  %154 = fadd double %151, %153
  %155 = load double, ptr %5, align 8
  %156 = fmul double %155, 0x3FDBCB7B15200000
  store double %156, ptr %3, align 8
  %157 = load i32, ptr %7, align 4
  %158 = sitofp i32 %157 to double
  %159 = fmul double %158, 0x3FD34413509F6000
  %160 = fmul double %158, 0x3D59FEF311F12B36
  %161 = load double, ptr %5, align 8
  %162 = fadd double %154, %161
  %163 = fmul double %162, 0x3DBB9438CA9AADD5
  %164 = fadd double %160, %163
  %165 = fmul double %154, 0x3FDBCB7B15200000
  %166 = fadd double %164, %165
  store double %166, ptr %2, align 8
  %167 = load double, ptr %3, align 8
  %168 = fadd double %159, %167
  %169 = load double, ptr %2, align 8
  %170 = fsub double %159, %168
  %171 = load double, ptr %3, align 8
  %172 = fadd double %170, %171
  %173 = fadd double %169, %172
  store double %173, ptr %2, align 8
  store double %168, ptr %3, align 8
  %174 = load double, ptr %2, align 8
  %175 = load double, ptr %3, align 8
  %176 = fadd double %174, %175
  ret double %176
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__log10x(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @log10q(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @log10q(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @log10(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @log10l(double %0) #0 {
  %2 = call double @log10(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__log2h(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @log2f(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @log2f(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  store float %0, ptr %7, align 4
  %8 = load float, ptr %7, align 4
  %9 = bitcast float %8 to i32
  store i32 %9, ptr %6, align 4
  %10 = load i32, ptr %6, align 4
  store i32 %10, ptr %5, align 4
  store i32 0, ptr %4, align 4
  %11 = load i32, ptr %5, align 4
  %12 = icmp ult i32 %11, 8388608
  br i1 %12, label %19, label %20

13:                                               ; preds = %51, %45
  %14 = load i32, ptr %5, align 4
  %15 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %14, i32 4913933)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %60, label %61

17:                                               ; preds = %20, %19
  %18 = phi i1 [ true, %19 ], [ %23, %20 ]
  br i1 %18, label %24, label %28

19:                                               ; preds = %1
  br label %17

20:                                               ; preds = %1
  %21 = load i32, ptr %5, align 4
  %22 = lshr i32 %21, 31
  %23 = icmp ne i32 %22, 0
  br label %17

24:                                               ; preds = %17
  %25 = load i32, ptr %5, align 4
  %26 = shl i32 %25, 1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %35, label %36

28:                                               ; preds = %17
  %29 = load i32, ptr %5, align 4
  %30 = icmp uge i32 %29, 2139095040
  br i1 %30, label %52, label %54

31:                                               ; preds = %36
  %32 = load i32, ptr %5, align 4
  %33 = lshr i32 %32, 31
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %41, label %43

35:                                               ; preds = %24
  ret float 0xFFF0000000000000

36:                                               ; preds = %24
  br label %31

37:                                               ; preds = %43
  %38 = load i32, ptr %4, align 4
  %39 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %38, i32 25)
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %44, label %45

41:                                               ; preds = %31
  store float 0x7FF0000020000000, ptr %3, align 4
  %42 = load float, ptr %3, align 4
  ret float %42

43:                                               ; preds = %31
  br label %37

44:                                               ; preds = %37
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

45:                                               ; preds = %37
  %46 = extractvalue { i32, i1 } %39, 0
  store i32 %46, ptr %4, align 4
  %47 = load float, ptr %7, align 4
  %48 = fmul float %47, 0x4180000000000000
  store float %48, ptr %7, align 4
  %49 = load float, ptr %7, align 4
  %50 = bitcast float %49 to i32
  store i32 %50, ptr %5, align 4
  br label %13

51:                                               ; preds = %57
  br label %13

52:                                               ; preds = %28
  %53 = load float, ptr %7, align 4
  ret float %53

54:                                               ; preds = %28
  %55 = load i32, ptr %5, align 4
  %56 = icmp eq i32 %55, 1065353216
  br i1 %56, label %58, label %59

57:                                               ; preds = %59
  br label %51

58:                                               ; preds = %54
  ret float 0.000000e+00

59:                                               ; preds = %54
  br label %57

60:                                               ; preds = %13
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

61:                                               ; preds = %13
  %62 = extractvalue { i32, i1 } %15, 0
  store i32 %62, ptr %5, align 4
  %63 = load i32, ptr %4, align 4
  %64 = load i32, ptr %5, align 4
  %65 = lshr i32 %64, 23
  %66 = sub i32 2147483647, %65
  %67 = icmp ule i32 %66, 2147483647
  br i1 %67, label %71, label %72

68:                                               ; preds = %71
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %65, i32 127)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %73, label %74

71:                                               ; preds = %61
  br label %68

72:                                               ; preds = %61
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @108)
  unreachable

73:                                               ; preds = %68
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

74:                                               ; preds = %68
  %75 = extractvalue { i32, i1 } %69, 0
  %76 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %63, i32 %75)
  %77 = extractvalue { i32, i1 } %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %74
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

79:                                               ; preds = %74
  %80 = extractvalue { i32, i1 } %76, 0
  store i32 %80, ptr %4, align 4
  %81 = load i32, ptr %5, align 4
  %82 = and i32 %81, 8388607
  %83 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %82, i32 1060439283)
  %84 = extractvalue { i32, i1 } %83, 1
  br i1 %84, label %85, label %86

85:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

86:                                               ; preds = %79
  %87 = extractvalue { i32, i1 } %83, 0
  store i32 %87, ptr %5, align 4
  %88 = load i32, ptr %5, align 4
  %89 = bitcast i32 %88 to float
  store float %89, ptr %7, align 4
  %90 = load float, ptr %7, align 4
  %91 = fsub float %90, 1.000000e+00
  %92 = fadd float 2.000000e+00, %91
  %93 = fdiv float %91, %92
  %94 = fmul float %93, %93
  %95 = fmul float %94, %94
  %96 = fmul float %95, 0x3FCF13C4C0000000
  %97 = fadd float 0x3FD999C260000000, %96
  %98 = fmul float %95, %97
  %99 = fmul float %95, 0x3FD23D3DC0000000
  %100 = fadd float 0x3FE5555540000000, %99
  %101 = fmul float %94, %100
  %102 = fadd float %101, %98
  %103 = fmul float 5.000000e-01, %91
  %104 = fmul float %103, %91
  %105 = fsub float %91, %104
  store float %105, ptr %2, align 4
  %106 = load float, ptr %2, align 4
  %107 = bitcast float %106 to i32
  store i32 %107, ptr %6, align 4
  %108 = load i32, ptr %6, align 4
  %109 = and i32 %108, -4096
  store i32 %109, ptr %6, align 4
  %110 = load i32, ptr %6, align 4
  %111 = bitcast i32 %110 to float
  store float %111, ptr %2, align 4
  %112 = load float, ptr %2, align 4
  %113 = fsub float %91, %112
  %114 = fsub float %113, %104
  %115 = fadd float %104, %102
  %116 = fmul float %93, %115
  %117 = fadd float %114, %116
  %118 = load float, ptr %2, align 4
  %119 = fadd float %117, %118
  %120 = fmul float %119, 0xBF27135A80000000
  %121 = fmul float %117, 0x3FF7160000000000
  %122 = fadd float %120, %121
  %123 = load float, ptr %2, align 4
  %124 = fmul float %123, 0x3FF7160000000000
  %125 = fadd float %122, %124
  %126 = load i32, ptr %4, align 4
  %127 = sitofp i32 %126 to float
  %128 = fadd float %125, %127
  ret float %128
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @log2(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca i64, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  store double %0, ptr %10, align 8
  %11 = load double, ptr %10, align 8
  %12 = bitcast double %11 to i64
  store i64 %12, ptr %9, align 8
  %13 = load i64, ptr %9, align 8
  %14 = lshr i64 %13, 32
  %15 = sub i64 4294967295, %14
  %16 = icmp ule i64 %15, 4294967295
  br i1 %16, label %21, label %22

17:                                               ; preds = %21
  %18 = trunc i64 %14 to i32
  store i32 %18, ptr %8, align 4
  store i32 0, ptr %7, align 4
  %19 = load i32, ptr %8, align 4
  %20 = icmp ult i32 %19, 1048576
  br i1 %20, label %29, label %30

21:                                               ; preds = %1
  br label %17

22:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @109)
  unreachable

23:                                               ; preds = %68, %64
  %24 = load i32, ptr %8, align 4
  %25 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %24, i32 614242)
  %26 = extractvalue { i32, i1 } %25, 1
  br i1 %26, label %84, label %85

27:                                               ; preds = %30, %29
  %28 = phi i1 [ true, %29 ], [ %33, %30 ]
  br i1 %28, label %34, label %38

29:                                               ; preds = %17
  br label %27

30:                                               ; preds = %17
  %31 = load i32, ptr %8, align 4
  %32 = lshr i32 %31, 31
  %33 = icmp ne i32 %32, 0
  br label %27

34:                                               ; preds = %27
  %35 = load i64, ptr %9, align 8
  %36 = shl i64 %35, 1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %45, label %46

38:                                               ; preds = %27
  %39 = load i32, ptr %8, align 4
  %40 = icmp uge i32 %39, 2146435072
  br i1 %40, label %69, label %71

41:                                               ; preds = %46
  %42 = load i32, ptr %8, align 4
  %43 = lshr i32 %42, 31
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %51, label %53

45:                                               ; preds = %34
  ret double 0xFFF0000000000000

46:                                               ; preds = %34
  br label %41

47:                                               ; preds = %53
  %48 = load i32, ptr %7, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %48, i32 54)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %54, label %55

51:                                               ; preds = %41
  store double 0x7FF0000000000001, ptr %6, align 8
  %52 = load double, ptr %6, align 8
  ret double %52

53:                                               ; preds = %41
  br label %47

54:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

55:                                               ; preds = %47
  %56 = extractvalue { i32, i1 } %49, 0
  store i32 %56, ptr %7, align 4
  %57 = load double, ptr %10, align 8
  %58 = fmul double %57, 0x4350000000000000
  store double %58, ptr %10, align 8
  %59 = load double, ptr %10, align 8
  %60 = bitcast double %59 to i64
  %61 = lshr i64 %60, 32
  %62 = sub i64 4294967295, %61
  %63 = icmp ule i64 %62, 4294967295
  br i1 %63, label %66, label %67

64:                                               ; preds = %66
  %65 = trunc i64 %61 to i32
  store i32 %65, ptr %8, align 4
  br label %23

66:                                               ; preds = %55
  br label %64

67:                                               ; preds = %55
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @109)
  unreachable

68:                                               ; preds = %74
  br label %23

69:                                               ; preds = %38
  %70 = load double, ptr %10, align 8
  ret double %70

71:                                               ; preds = %38
  %72 = load i32, ptr %8, align 4
  %73 = icmp eq i32 %72, 1072693248
  br i1 %73, label %77, label %81

74:                                               ; preds = %83
  br label %68

75:                                               ; preds = %81, %77
  %76 = phi i1 [ %80, %77 ], [ false, %81 ]
  br i1 %76, label %82, label %83

77:                                               ; preds = %71
  %78 = load i64, ptr %9, align 8
  %79 = shl i64 %78, 32
  %80 = icmp eq i64 %79, 0
  br label %75

81:                                               ; preds = %71
  br label %75

82:                                               ; preds = %75
  ret double 0.000000e+00

83:                                               ; preds = %75
  br label %74

84:                                               ; preds = %23
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

85:                                               ; preds = %23
  %86 = extractvalue { i32, i1 } %25, 0
  store i32 %86, ptr %8, align 4
  %87 = load i32, ptr %7, align 4
  %88 = load i32, ptr %8, align 4
  %89 = lshr i32 %88, 20
  %90 = sub i32 2147483647, %89
  %91 = icmp ule i32 %90, 2147483647
  br i1 %91, label %95, label %96

92:                                               ; preds = %95
  %93 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %89, i32 1023)
  %94 = extractvalue { i32, i1 } %93, 1
  br i1 %94, label %97, label %98

95:                                               ; preds = %85
  br label %92

96:                                               ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @109)
  unreachable

97:                                               ; preds = %92
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

98:                                               ; preds = %92
  %99 = extractvalue { i32, i1 } %93, 0
  %100 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %87, i32 %99)
  %101 = extractvalue { i32, i1 } %100, 1
  br i1 %101, label %102, label %103

102:                                              ; preds = %98
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %98
  %104 = extractvalue { i32, i1 } %100, 0
  store i32 %104, ptr %7, align 4
  %105 = load i32, ptr %8, align 4
  %106 = and i32 %105, 1048575
  %107 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %106, i32 1072079006)
  %108 = extractvalue { i32, i1 } %107, 1
  br i1 %108, label %109, label %110

109:                                              ; preds = %103
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

110:                                              ; preds = %103
  %111 = extractvalue { i32, i1 } %107, 0
  store i32 %111, ptr %8, align 4
  %112 = load i32, ptr %8, align 4
  %113 = zext i32 %112 to i64
  %114 = shl i64 %113, 32
  %115 = load i64, ptr %9, align 8
  %116 = and i64 %115, 4294967295
  %117 = or i64 %114, %116
  store i64 %117, ptr %9, align 8
  %118 = load i64, ptr %9, align 8
  %119 = bitcast i64 %118 to double
  store double %119, ptr %10, align 8
  %120 = load double, ptr %10, align 8
  %121 = fsub double %120, 1.000000e+00
  %122 = fmul double 5.000000e-01, %121
  %123 = fmul double %122, %121
  %124 = fadd double 2.000000e+00, %121
  %125 = fdiv double %121, %124
  %126 = fmul double %125, %125
  %127 = fmul double %126, %126
  %128 = fmul double %127, 0x3FC39A09D078C69F
  %129 = fadd double 0x3FCC71C51D8E78AF, %128
  %130 = fmul double %127, %129
  %131 = fadd double 0x3FD999999997FA04, %130
  %132 = fmul double %127, %131
  %133 = fmul double %127, 0x3FC2F112DF3E5244
  %134 = fadd double 0x3FC7466496CB03DE, %133
  %135 = fmul double %127, %134
  %136 = fadd double 0x3FD2492494229359, %135
  %137 = fmul double %127, %136
  %138 = fadd double 0x3FE5555555555593, %137
  %139 = fmul double %126, %138
  %140 = fadd double %139, %132
  %141 = fsub double %121, %123
  store double %141, ptr %5, align 8
  %142 = load double, ptr %5, align 8
  %143 = bitcast double %142 to i64
  store i64 %143, ptr %4, align 8
  %144 = load i64, ptr %4, align 8
  %145 = and i64 %144, -4294967296
  store i64 %145, ptr %4, align 8
  %146 = load i64, ptr %4, align 8
  %147 = bitcast i64 %146 to double
  store double %147, ptr %5, align 8
  %148 = load double, ptr %5, align 8
  %149 = fsub double %121, %148
  %150 = fsub double %149, %123
  %151 = fadd double %123, %140
  %152 = fmul double %125, %151
  %153 = fadd double %150, %152
  %154 = load double, ptr %5, align 8
  %155 = fmul double %154, 0x3FF7154765200000
  store double %155, ptr %3, align 8
  %156 = load double, ptr %5, align 8
  %157 = fadd double %153, %156
  %158 = fmul double %157, 0x3DE705FC2EEFA200
  %159 = fmul double %153, 0x3FF7154765200000
  %160 = fadd double %158, %159
  store double %160, ptr %2, align 8
  %161 = load i32, ptr %7, align 4
  %162 = sitofp i32 %161 to double
  %163 = load double, ptr %3, align 8
  %164 = fadd double %162, %163
  %165 = load double, ptr %2, align 8
  %166 = fsub double %162, %164
  %167 = load double, ptr %3, align 8
  %168 = fadd double %166, %167
  %169 = fadd double %165, %168
  store double %169, ptr %2, align 8
  store double %164, ptr %3, align 8
  %170 = load double, ptr %2, align 8
  %171 = load double, ptr %3, align 8
  %172 = fadd double %170, %171
  ret double %172
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__log2x(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @log2q(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @log2q(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @log2(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @log2l(double %0) #0 {
  %2 = call double @log2(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__roundh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @roundf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @roundf(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  store float %0, ptr %4, align 4
  %5 = load float, ptr %4, align 4
  %6 = bitcast float %5 to i32
  %7 = lshr i32 %6, 23
  %8 = and i32 %7, 255
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %9 = icmp uge i32 %8, 150
  br i1 %9, label %13, label %15

10:                                               ; preds = %15
  %11 = lshr i32 %6, 31
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %21

13:                                               ; preds = %1
  %14 = load float, ptr %4, align 4
  ret float %14

15:                                               ; preds = %1
  br label %10

16:                                               ; preds = %21, %18
  %17 = icmp ult i32 %8, 126
  br i1 %17, label %30, label %35

18:                                               ; preds = %10
  %19 = load float, ptr %4, align 4
  %20 = fneg float %19
  store float %20, ptr %4, align 4
  br label %16

21:                                               ; preds = %10
  br label %16

22:                                               ; preds = %35
  %23 = load float, ptr %4, align 4
  %24 = fadd float %23, 0x4160000000000000
  %25 = fsub float %24, 0x4160000000000000
  %26 = load float, ptr %4, align 4
  %27 = fsub float %25, %26
  store float %27, ptr %3, align 4
  %28 = load float, ptr %3, align 4
  %29 = fcmp ogt float %28, 5.000000e-01
  br i1 %29, label %39, label %44

30:                                               ; preds = %16
  %31 = load float, ptr %4, align 4
  %32 = fadd float %31, 0x4160000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %32)
  %33 = bitcast i32 %6 to float
  %34 = fmul float 0.000000e+00, %33
  ret float %34

35:                                               ; preds = %16
  br label %22

36:                                               ; preds = %47, %39
  %37 = lshr i32 %6, 31
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %57, label %60

39:                                               ; preds = %22
  %40 = load float, ptr %3, align 4
  %41 = load float, ptr %4, align 4
  %42 = fadd float %40, %41
  %43 = fsub float %42, 1.000000e+00
  store float %43, ptr %3, align 4
  br label %36

44:                                               ; preds = %22
  %45 = load float, ptr %3, align 4
  %46 = fcmp ole float %45, -5.000000e-01
  br i1 %46, label %48, label %53

47:                                               ; preds = %53, %48
  br label %36

48:                                               ; preds = %44
  %49 = load float, ptr %3, align 4
  %50 = load float, ptr %4, align 4
  %51 = fadd float %49, %50
  %52 = fadd float %51, 1.000000e+00
  store float %52, ptr %3, align 4
  br label %47

53:                                               ; preds = %44
  %54 = load float, ptr %3, align 4
  %55 = load float, ptr %4, align 4
  %56 = fadd float %54, %55
  store float %56, ptr %3, align 4
  br label %47

57:                                               ; preds = %36
  %58 = load float, ptr %3, align 4
  %59 = fneg float %58
  ret float %59

60:                                               ; preds = %36
  %61 = load float, ptr %3, align 4
  ret float %61
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @round(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  store double %0, ptr %4, align 8
  %5 = load double, ptr %4, align 8
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = and i64 %7, 2047
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %9 = icmp uge i64 %8, 1075
  br i1 %9, label %13, label %15

10:                                               ; preds = %15
  %11 = lshr i64 %6, 63
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %18, label %21

13:                                               ; preds = %1
  %14 = load double, ptr %4, align 8
  ret double %14

15:                                               ; preds = %1
  br label %10

16:                                               ; preds = %21, %18
  %17 = icmp ult i64 %8, 1022
  br i1 %17, label %30, label %35

18:                                               ; preds = %10
  %19 = load double, ptr %4, align 8
  %20 = fneg double %19
  store double %20, ptr %4, align 8
  br label %16

21:                                               ; preds = %10
  br label %16

22:                                               ; preds = %35
  %23 = load double, ptr %4, align 8
  %24 = fadd double %23, 0x4330000000000000
  %25 = fsub double %24, 0x4330000000000000
  %26 = load double, ptr %4, align 8
  %27 = fsub double %25, %26
  store double %27, ptr %3, align 8
  %28 = load double, ptr %3, align 8
  %29 = fcmp ogt double %28, 5.000000e-01
  br i1 %29, label %39, label %44

30:                                               ; preds = %16
  %31 = load double, ptr %4, align 8
  %32 = fadd double %31, 0x4330000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3744(double %32)
  %33 = bitcast i64 %6 to double
  %34 = fmul double 0.000000e+00, %33
  ret double %34

35:                                               ; preds = %16
  br label %22

36:                                               ; preds = %47, %39
  %37 = lshr i64 %6, 63
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %57, label %60

39:                                               ; preds = %22
  %40 = load double, ptr %3, align 8
  %41 = load double, ptr %4, align 8
  %42 = fadd double %40, %41
  %43 = fsub double %42, 1.000000e+00
  store double %43, ptr %3, align 8
  br label %36

44:                                               ; preds = %22
  %45 = load double, ptr %3, align 8
  %46 = fcmp ole double %45, -5.000000e-01
  br i1 %46, label %48, label %53

47:                                               ; preds = %53, %48
  br label %36

48:                                               ; preds = %44
  %49 = load double, ptr %3, align 8
  %50 = load double, ptr %4, align 8
  %51 = fadd double %49, %50
  %52 = fadd double %51, 1.000000e+00
  store double %52, ptr %3, align 8
  br label %47

53:                                               ; preds = %44
  %54 = load double, ptr %3, align 8
  %55 = load double, ptr %4, align 8
  %56 = fadd double %54, %55
  store double %56, ptr %3, align 8
  br label %47

57:                                               ; preds = %36
  %58 = load double, ptr %3, align 8
  %59 = fneg double %58
  ret double %59

60:                                               ; preds = %36
  %61 = load double, ptr %3, align 8
  ret double %61
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__roundx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @roundq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @roundq(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca fp128, align 16
  %4 = alloca fp128, align 16
  store fp128 %0, ptr %4, align 16
  %5 = load fp128, ptr %4, align 16
  %6 = bitcast fp128 %5 to i128
  %7 = lshr i128 %6, 112
  %8 = and i128 %7, 32767
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %9 = icmp uge i128 %8, 16495
  br i1 %9, label %13, label %15

10:                                               ; preds = %15
  %11 = lshr i128 %6, 127
  %12 = icmp ne i128 %11, 0
  br i1 %12, label %18, label %23

13:                                               ; preds = %1
  %14 = load fp128, ptr %4, align 16
  ret fp128 %14

15:                                               ; preds = %1
  br label %10

16:                                               ; preds = %23, %18
  %17 = icmp ult i128 %8, 16382
  br i1 %17, label %33, label %38

18:                                               ; preds = %10
  %19 = load fp128, ptr %4, align 16
  %20 = bitcast fp128 %19 to i128
  %21 = xor i128 %20, -170141183460469231731687303715884105728
  %22 = bitcast i128 %21 to fp128
  store fp128 %22, ptr %4, align 16
  br label %16

23:                                               ; preds = %10
  br label %16

24:                                               ; preds = %38
  %25 = load fp128, ptr %4, align 16
  %26 = call fp128 @__addtf3(fp128 %25, fp128 0xL0000000000000000406F000000000000)
  %27 = call fp128 @__subtf3(fp128 %26, fp128 0xL0000000000000000406F000000000000)
  %28 = load fp128, ptr %4, align 16
  %29 = call fp128 @__subtf3(fp128 %27, fp128 %28)
  store fp128 %29, ptr %3, align 16
  %30 = load fp128, ptr %3, align 16
  %31 = call i32 @__gttf2(fp128 %30, fp128 0xL00000000000000003FFE000000000000)
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %42, label %47

33:                                               ; preds = %16
  %34 = load fp128, ptr %4, align 16
  %35 = call fp128 @__addtf3(fp128 %34, fp128 0xL0000000000000000406F000000000000)
  call fastcc void @math.doNotOptimizeAway__anon_3745(fp128 %35)
  %36 = bitcast i128 %6 to fp128
  %37 = call fp128 @__multf3(fp128 0xL00000000000000000000000000000000, fp128 %36)
  ret fp128 %37

38:                                               ; preds = %16
  br label %24

39:                                               ; preds = %51, %42
  %40 = lshr i128 %6, 127
  %41 = icmp ne i128 %40, 0
  br i1 %41, label %61, label %66

42:                                               ; preds = %24
  %43 = load fp128, ptr %3, align 16
  %44 = load fp128, ptr %4, align 16
  %45 = call fp128 @__addtf3(fp128 %43, fp128 %44)
  %46 = call fp128 @__subtf3(fp128 %45, fp128 0xL00000000000000003FFF000000000000)
  store fp128 %46, ptr %3, align 16
  br label %39

47:                                               ; preds = %24
  %48 = load fp128, ptr %3, align 16
  %49 = call i32 @__letf2(fp128 %48, fp128 0xL0000000000000000BFFE000000000000)
  %50 = icmp sle i32 %49, 0
  br i1 %50, label %52, label %57

51:                                               ; preds = %57, %52
  br label %39

52:                                               ; preds = %47
  %53 = load fp128, ptr %3, align 16
  %54 = load fp128, ptr %4, align 16
  %55 = call fp128 @__addtf3(fp128 %53, fp128 %54)
  %56 = call fp128 @__addtf3(fp128 %55, fp128 0xL00000000000000003FFF000000000000)
  store fp128 %56, ptr %3, align 16
  br label %51

57:                                               ; preds = %47
  %58 = load fp128, ptr %3, align 16
  %59 = load fp128, ptr %4, align 16
  %60 = call fp128 @__addtf3(fp128 %58, fp128 %59)
  store fp128 %60, ptr %3, align 16
  br label %51

61:                                               ; preds = %39
  %62 = load fp128, ptr %3, align 16
  %63 = bitcast fp128 %62 to i128
  %64 = xor i128 %63, -170141183460469231731687303715884105728
  %65 = bitcast i128 %64 to fp128
  ret fp128 %65

66:                                               ; preds = %39
  %67 = load fp128, ptr %3, align 16
  ret fp128 %67
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @roundl(double %0) #0 {
  %2 = call double @round(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__sinh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @sinf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @sinf(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca float, align 4
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = bitcast float %0 to i32
  store i32 %6, ptr %5, align 4
  %7 = load i32, ptr %5, align 4
  %8 = lshr i32 %7, 31
  %9 = icmp ne i32 %8, 0
  %10 = load i32, ptr %5, align 4
  %11 = and i32 %10, 2147483647
  store i32 %11, ptr %5, align 4
  %12 = load i32, ptr %5, align 4
  %13 = icmp ule i32 %12, 1061752794
  br i1 %13, label %17, label %20

14:                                               ; preds = %20
  %15 = load i32, ptr %5, align 4
  %16 = icmp ule i32 %15, 1081824209
  br i1 %16, label %37, label %40

17:                                               ; preds = %1
  %18 = load i32, ptr %5, align 4
  %19 = icmp ult i32 %18, 964689920
  br i1 %19, label %24, label %27

20:                                               ; preds = %1
  br label %14

21:                                               ; preds = %27
  %22 = fpext float %0 to double
  %23 = call fastcc float @compiler_rt.trig.__sindf(double %22)
  ret float %23

24:                                               ; preds = %17
  %25 = load i32, ptr %5, align 4
  %26 = icmp ult i32 %25, 8388608
  br i1 %26, label %30, label %32

27:                                               ; preds = %17
  br label %21

28:                                               ; preds = %32, %30
  %29 = phi float [ %31, %30 ], [ %33, %32 ]
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %29)
  ret float %0

30:                                               ; preds = %24
  %31 = fdiv float %0, 0x4770000000000000
  br label %28

32:                                               ; preds = %24
  %33 = fadd float %0, 0x4770000000000000
  br label %28

34:                                               ; preds = %40
  %35 = load i32, ptr %5, align 4
  %36 = icmp ule i32 %35, 1088565717
  br i1 %36, label %67, label %70

37:                                               ; preds = %14
  %38 = load i32, ptr %5, align 4
  %39 = icmp ule i32 %38, 1075235811
  br i1 %39, label %42, label %43

40:                                               ; preds = %14
  br label %34

41:                                               ; preds = %43
  br i1 %9, label %56, label %60

42:                                               ; preds = %37
  br i1 %9, label %44, label %49

43:                                               ; preds = %37
  br label %41

44:                                               ; preds = %42
  %45 = fpext float %0 to double
  %46 = fadd double %45, 0x3FF921FB54442D18
  %47 = call fastcc float @compiler_rt.trig.__cosdf(double %46)
  %48 = fneg float %47
  ret float %48

49:                                               ; preds = %42
  %50 = fpext float %0 to double
  %51 = fsub double %50, 0x3FF921FB54442D18
  %52 = call fastcc float @compiler_rt.trig.__cosdf(double %51)
  ret float %52

53:                                               ; preds = %60, %56
  %54 = phi double [ %59, %56 ], [ %63, %60 ]
  %55 = call fastcc float @compiler_rt.trig.__sindf(double %54)
  ret float %55

56:                                               ; preds = %41
  %57 = fpext float %0 to double
  %58 = fadd double %57, 0x400921FB54442D18
  %59 = fneg double %58
  br label %53

60:                                               ; preds = %41
  %61 = fpext float %0 to double
  %62 = fsub double %61, 0x400921FB54442D18
  %63 = fneg double %62
  br label %53

64:                                               ; preds = %70
  %65 = load i32, ptr %5, align 4
  %66 = icmp uge i32 %65, 2139095040
  br i1 %66, label %95, label %97

67:                                               ; preds = %34
  %68 = load i32, ptr %5, align 4
  %69 = icmp ule i32 %68, 1085271519
  br i1 %69, label %72, label %73

70:                                               ; preds = %34
  br label %64

71:                                               ; preds = %73
  br i1 %9, label %86, label %89

72:                                               ; preds = %67
  br i1 %9, label %74, label %78

73:                                               ; preds = %67
  br label %71

74:                                               ; preds = %72
  %75 = fpext float %0 to double
  %76 = fadd double %75, 0x4012D97C7F3321D2
  %77 = call fastcc float @compiler_rt.trig.__cosdf(double %76)
  ret float %77

78:                                               ; preds = %72
  %79 = fpext float %0 to double
  %80 = fsub double %79, 0x4012D97C7F3321D2
  %81 = call fastcc float @compiler_rt.trig.__cosdf(double %80)
  %82 = fneg float %81
  ret float %82

83:                                               ; preds = %89, %86
  %84 = phi double [ %88, %86 ], [ %91, %89 ]
  %85 = call fastcc float @compiler_rt.trig.__sindf(double %84)
  ret float %85

86:                                               ; preds = %71
  %87 = fpext float %0 to double
  %88 = fadd double %87, 0x401921FB54442D18
  br label %83

89:                                               ; preds = %71
  %90 = fpext float %0 to double
  %91 = fsub double %90, 0x401921FB54442D18
  br label %83

92:                                               ; preds = %97
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 8, i1 false)
  %93 = call fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %4)
  %94 = and i32 %93, 3
  switch i32 %94, label %100 [
    i32 0, label %104
    i32 1, label %107
    i32 2, label %110
  ]

95:                                               ; preds = %64
  %96 = fsub float %0, %0
  ret float %96

97:                                               ; preds = %64
  br label %92

98:                                               ; preds = %110, %107, %104, %100
  %99 = load float, ptr %3, align 4
  ret float %99

100:                                              ; preds = %92
  %101 = load double, ptr %4, align 8
  %102 = call fastcc float @compiler_rt.trig.__cosdf(double %101)
  %103 = fneg float %102
  store float %103, ptr %3, align 4
  br label %98

104:                                              ; preds = %92
  %105 = load double, ptr %4, align 8
  %106 = call fastcc float @compiler_rt.trig.__sindf(double %105)
  store float %106, ptr %3, align 4
  br label %98

107:                                              ; preds = %92
  %108 = load double, ptr %4, align 8
  %109 = call fastcc float @compiler_rt.trig.__cosdf(double %108)
  store float %109, ptr %3, align 4
  br label %98

110:                                              ; preds = %92
  %111 = load double, ptr %4, align 8
  %112 = fneg double %111
  %113 = call fastcc float @compiler_rt.trig.__sindf(double %112)
  store float %113, ptr %3, align 4
  br label %98
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @sin(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca double, align 8
  %4 = alloca [2 x double], align 8
  %5 = alloca i64, align 8
  %6 = bitcast double %0 to i64
  %7 = lshr i64 %6, 32
  store i64 %7, ptr %5, align 8
  %8 = load i64, ptr %5, align 8
  %9 = and i64 %8, 2147483647
  store i64 %9, ptr %5, align 8
  %10 = load i64, ptr %5, align 8
  %11 = icmp ule i64 %10, 1072243195
  br i1 %11, label %15, label %18

12:                                               ; preds = %18
  %13 = load i64, ptr %5, align 8
  %14 = icmp uge i64 %13, 2146435072
  br i1 %14, label %34, label %36

15:                                               ; preds = %1
  %16 = load i64, ptr %5, align 8
  %17 = icmp ult i64 %16, 1045430272
  br i1 %17, label %21, label %24

18:                                               ; preds = %1
  br label %12

19:                                               ; preds = %24
  %20 = call fastcc double @compiler_rt.trig.__sin(double %0, double 0.000000e+00, i32 0)
  ret double %20

21:                                               ; preds = %15
  %22 = load i64, ptr %5, align 8
  %23 = icmp ult i64 %22, 1048576
  br i1 %23, label %27, label %29

24:                                               ; preds = %15
  br label %19

25:                                               ; preds = %29, %27
  %26 = phi double [ %28, %27 ], [ %30, %29 ]
  call fastcc void @math.doNotOptimizeAway__anon_3744(double %26)
  ret double %0

27:                                               ; preds = %21
  %28 = fdiv double %0, 0x4770000000000000
  br label %25

29:                                               ; preds = %21
  %30 = fadd double %0, 0x4770000000000000
  br label %25

31:                                               ; preds = %36
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 -86, i64 16, i1 false)
  %32 = call fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %4)
  %33 = and i32 %32, 3
  switch i32 %33, label %39 [
    i32 0, label %46
    i32 1, label %52
    i32 2, label %58
  ]

34:                                               ; preds = %12
  %35 = fsub double %0, %0
  ret double %35

36:                                               ; preds = %12
  br label %31

37:                                               ; preds = %58, %52, %46, %39
  %38 = load double, ptr %3, align 8
  ret double %38

39:                                               ; preds = %31
  %40 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %41 = load double, ptr %40, align 8
  %42 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %43 = load double, ptr %42, align 8
  %44 = call fastcc double @compiler_rt.trig.__cos(double %41, double %43)
  %45 = fneg double %44
  store double %45, ptr %3, align 8
  br label %37

46:                                               ; preds = %31
  %47 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %48 = load double, ptr %47, align 8
  %49 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %50 = load double, ptr %49, align 8
  %51 = call fastcc double @compiler_rt.trig.__sin(double %48, double %50, i32 1)
  store double %51, ptr %3, align 8
  br label %37

52:                                               ; preds = %31
  %53 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %54 = load double, ptr %53, align 8
  %55 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %56 = load double, ptr %55, align 8
  %57 = call fastcc double @compiler_rt.trig.__cos(double %54, double %56)
  store double %57, ptr %3, align 8
  br label %37

58:                                               ; preds = %31
  %59 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 0
  %60 = load double, ptr %59, align 8
  %61 = getelementptr inbounds [2 x double], ptr %4, i64 0, i64 1
  %62 = load double, ptr %61, align 8
  %63 = call fastcc double @compiler_rt.trig.__sin(double %60, double %62, i32 1)
  %64 = fneg double %63
  store double %64, ptr %3, align 8
  br label %37
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__sinx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @sinq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @sinq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @sin(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @sinl(double %0) #0 {
  %2 = call double @sin(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__sincosh(half %0, ptr nonnull align 2 %1, ptr nonnull align 2 %2) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 -86, i64 4, i1 false)
  %7 = fpext half %0 to float
  call void @sincosf(float %7, ptr nonnull align 4 %6, ptr nonnull align 4 %5)
  %8 = load float, ptr %6, align 4
  %9 = fptrunc float %8 to half
  store half %9, ptr %1, align 2
  %10 = load float, ptr %5, align 4
  %11 = fptrunc float %10 to half
  store half %11, ptr %2, align 2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @sincosf(float %0, ptr nonnull align 4 %1, ptr nonnull align 4 %2) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca double, align 8
  %6 = bitcast float %0 to i32
  %7 = lshr i32 %6, 31
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %6, 2147483647
  %10 = icmp ule i32 %9, 1061752794
  br i1 %10, label %13, label %15

11:                                               ; preds = %15
  %12 = icmp ule i32 %9, 1081824209
  br i1 %12, label %32, label %34

13:                                               ; preds = %3
  %14 = icmp ult i32 %9, 964689920
  br i1 %14, label %21, label %23

15:                                               ; preds = %3
  br label %11

16:                                               ; preds = %23
  %17 = fpext float %0 to double
  %18 = call fastcc float @compiler_rt.trig.__sindf(double %17)
  store float %18, ptr %1, align 4
  %19 = fpext float %0 to double
  %20 = call fastcc float @compiler_rt.trig.__cosdf(double %19)
  store float %20, ptr %2, align 4
  ret void

21:                                               ; preds = %13
  %22 = icmp ult i32 %9, 1048576
  br i1 %22, label %26, label %28

23:                                               ; preds = %13
  br label %16

24:                                               ; preds = %28, %26
  %25 = phi float [ %27, %26 ], [ %29, %28 ]
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %25)
  store float %0, ptr %1, align 4
  store float 1.000000e+00, ptr %2, align 4
  ret void

26:                                               ; preds = %21
  %27 = fdiv float %0, 0x4770000000000000
  br label %24

28:                                               ; preds = %21
  %29 = fadd float %0, 0x4770000000000000
  br label %24

30:                                               ; preds = %34
  %31 = icmp ule i32 %9, 1088565717
  br i1 %31, label %76, label %78

32:                                               ; preds = %11
  %33 = icmp ule i32 %9, 1075235811
  br i1 %33, label %36, label %37

34:                                               ; preds = %11
  br label %30

35:                                               ; preds = %37
  br i1 %8, label %58, label %61

36:                                               ; preds = %32
  br i1 %8, label %39, label %47

37:                                               ; preds = %32
  br label %35

38:                                               ; preds = %47, %39
  ret void

39:                                               ; preds = %36
  %40 = fpext float %0 to double
  %41 = fadd double %40, 0x3FF921FB54442D18
  %42 = call fastcc float @compiler_rt.trig.__cosdf(double %41)
  %43 = fneg float %42
  store float %43, ptr %1, align 4
  %44 = fpext float %0 to double
  %45 = fadd double %44, 0x3FF921FB54442D18
  %46 = call fastcc float @compiler_rt.trig.__sindf(double %45)
  store float %46, ptr %2, align 4
  br label %38

47:                                               ; preds = %36
  %48 = fpext float %0 to double
  %49 = fsub double 0x3FF921FB54442D18, %48
  %50 = call fastcc float @compiler_rt.trig.__cosdf(double %49)
  store float %50, ptr %1, align 4
  %51 = fpext float %0 to double
  %52 = fsub double 0x3FF921FB54442D18, %51
  %53 = call fastcc float @compiler_rt.trig.__sindf(double %52)
  store float %53, ptr %2, align 4
  br label %38

54:                                               ; preds = %61, %58
  %55 = phi double [ %60, %58 ], [ %63, %61 ]
  %56 = call fastcc float @compiler_rt.trig.__sindf(double %55)
  %57 = fneg float %56
  store float %57, ptr %1, align 4
  br i1 %8, label %68, label %71

58:                                               ; preds = %35
  %59 = fpext float %0 to double
  %60 = fadd double %59, 0x400921FB54442D18
  br label %54

61:                                               ; preds = %35
  %62 = fpext float %0 to double
  %63 = fsub double %62, 0x400921FB54442D18
  br label %54

64:                                               ; preds = %71, %68
  %65 = phi double [ %70, %68 ], [ %73, %71 ]
  %66 = call fastcc float @compiler_rt.trig.__cosdf(double %65)
  %67 = fneg float %66
  store float %67, ptr %2, align 4
  ret void

68:                                               ; preds = %54
  %69 = fpext float %0 to double
  %70 = fadd double %69, 0x400921FB54442D18
  br label %64

71:                                               ; preds = %54
  %72 = fpext float %0 to double
  %73 = fsub double %72, 0x400921FB54442D18
  br label %64

74:                                               ; preds = %78
  %75 = icmp uge i32 %9, 2139095040
  br i1 %75, label %124, label %126

76:                                               ; preds = %30
  %77 = icmp ule i32 %9, 1085271519
  br i1 %77, label %80, label %81

78:                                               ; preds = %30
  br label %74

79:                                               ; preds = %81
  br i1 %8, label %102, label %105

80:                                               ; preds = %76
  br i1 %8, label %83, label %91

81:                                               ; preds = %76
  br label %79

82:                                               ; preds = %91, %83
  ret void

83:                                               ; preds = %80
  %84 = fpext float %0 to double
  %85 = fadd double %84, 0x4012D97C7F3321D2
  %86 = call fastcc float @compiler_rt.trig.__cosdf(double %85)
  store float %86, ptr %1, align 4
  %87 = fpext float %0 to double
  %88 = fadd double %87, 0x4012D97C7F3321D2
  %89 = call fastcc float @compiler_rt.trig.__sindf(double %88)
  %90 = fneg float %89
  store float %90, ptr %2, align 4
  br label %82

91:                                               ; preds = %80
  %92 = fpext float %0 to double
  %93 = fsub double %92, 0x4012D97C7F3321D2
  %94 = call fastcc float @compiler_rt.trig.__cosdf(double %93)
  %95 = fneg float %94
  store float %95, ptr %1, align 4
  %96 = fpext float %0 to double
  %97 = fsub double %96, 0x4012D97C7F3321D2
  %98 = call fastcc float @compiler_rt.trig.__sindf(double %97)
  store float %98, ptr %2, align 4
  br label %82

99:                                               ; preds = %105, %102
  %100 = phi double [ %104, %102 ], [ %107, %105 ]
  %101 = call fastcc float @compiler_rt.trig.__sindf(double %100)
  store float %101, ptr %1, align 4
  br i1 %8, label %111, label %114

102:                                              ; preds = %79
  %103 = fpext float %0 to double
  %104 = fadd double %103, 0x401921FB54442D18
  br label %99

105:                                              ; preds = %79
  %106 = fpext float %0 to double
  %107 = fsub double %106, 0x401921FB54442D18
  br label %99

108:                                              ; preds = %114, %111
  %109 = phi double [ %113, %111 ], [ %116, %114 ]
  %110 = call fastcc float @compiler_rt.trig.__cosdf(double %109)
  store float %110, ptr %2, align 4
  ret void

111:                                              ; preds = %99
  %112 = fpext float %0 to double
  %113 = fadd double %112, 0x401921FB54442D18
  br label %108

114:                                              ; preds = %99
  %115 = fpext float %0 to double
  %116 = fsub double %115, 0x401921FB54442D18
  br label %108

117:                                              ; preds = %126
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 8, i1 false)
  %118 = call fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %5)
  %119 = load double, ptr %5, align 8
  %120 = call fastcc float @compiler_rt.trig.__sindf(double %119)
  %121 = load double, ptr %5, align 8
  %122 = call fastcc float @compiler_rt.trig.__cosdf(double %121)
  %123 = and i32 %118, 3
  switch i32 %123, label %128 [
    i32 0, label %130
    i32 1, label %131
    i32 2, label %133
  ]

124:                                              ; preds = %74
  %125 = fsub float %0, %0
  store float %125, ptr %1, align 4
  store float %125, ptr %2, align 4
  ret void

126:                                              ; preds = %74
  br label %117

127:                                              ; preds = %133, %131, %130, %128
  ret void

128:                                              ; preds = %117
  %129 = fneg float %122
  store float %129, ptr %1, align 4
  store float %120, ptr %2, align 4
  br label %127

130:                                              ; preds = %117
  store float %120, ptr %1, align 4
  store float %122, ptr %2, align 4
  br label %127

131:                                              ; preds = %117
  store float %122, ptr %1, align 4
  %132 = fneg float %120
  store float %132, ptr %2, align 4
  br label %127

133:                                              ; preds = %117
  %134 = fneg float %120
  store float %134, ptr %1, align 4
  %135 = fneg float %122
  store float %135, ptr %2, align 4
  br label %127
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @sincos(double %0, ptr nonnull align 8 %1, ptr nonnull align 8 %2) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca [2 x double], align 8
  %6 = bitcast double %0 to i64
  %7 = lshr i64 %6, 32
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2147483647
  %10 = icmp ule i32 %9, 1072243195
  br i1 %10, label %13, label %15

11:                                               ; preds = %15
  %12 = icmp uge i32 %9, 2146435072
  br i1 %12, label %41, label %43

13:                                               ; preds = %3
  %14 = icmp ult i32 %9, 1044816030
  br i1 %14, label %19, label %21

15:                                               ; preds = %3
  br label %11

16:                                               ; preds = %21
  %17 = call fastcc double @compiler_rt.trig.__sin(double %0, double 0.000000e+00, i32 0)
  store double %17, ptr %1, align 8
  %18 = call fastcc double @compiler_rt.trig.__cos(double %0, double 0.000000e+00)
  store double %18, ptr %2, align 8
  ret void

19:                                               ; preds = %13
  %20 = icmp ult i32 %9, 1048576
  br i1 %20, label %24, label %26

21:                                               ; preds = %13
  br label %16

22:                                               ; preds = %26, %24
  %23 = phi double [ %25, %24 ], [ %27, %26 ]
  call fastcc void @math.doNotOptimizeAway__anon_3744(double %23)
  store double %0, ptr %1, align 8
  store double 1.000000e+00, ptr %2, align 8
  ret void

24:                                               ; preds = %19
  %25 = fdiv double %0, 0x4770000000000000
  br label %22

26:                                               ; preds = %19
  %27 = fadd double %0, 0x4770000000000000
  br label %22

28:                                               ; preds = %43
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 16, i1 false)
  %29 = call fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %5)
  %30 = getelementptr inbounds [2 x double], ptr %5, i64 0, i64 0
  %31 = load double, ptr %30, align 8
  %32 = getelementptr inbounds [2 x double], ptr %5, i64 0, i64 1
  %33 = load double, ptr %32, align 8
  %34 = call fastcc double @compiler_rt.trig.__sin(double %31, double %33, i32 1)
  %35 = getelementptr inbounds [2 x double], ptr %5, i64 0, i64 0
  %36 = load double, ptr %35, align 8
  %37 = getelementptr inbounds [2 x double], ptr %5, i64 0, i64 1
  %38 = load double, ptr %37, align 8
  %39 = call fastcc double @compiler_rt.trig.__cos(double %36, double %38)
  %40 = and i32 %29, 3
  switch i32 %40, label %45 [
    i32 0, label %47
    i32 1, label %48
    i32 2, label %50
  ]

41:                                               ; preds = %11
  %42 = fsub double %0, %0
  store double %42, ptr %1, align 8
  store double %42, ptr %2, align 8
  ret void

43:                                               ; preds = %11
  br label %28

44:                                               ; preds = %50, %48, %47, %45
  ret void

45:                                               ; preds = %28
  %46 = fneg double %39
  store double %46, ptr %1, align 8
  store double %34, ptr %2, align 8
  br label %44

47:                                               ; preds = %28
  store double %34, ptr %1, align 8
  store double %39, ptr %2, align 8
  br label %44

48:                                               ; preds = %28
  store double %39, ptr %1, align 8
  %49 = fneg double %34
  store double %49, ptr %2, align 8
  br label %44

50:                                               ; preds = %28
  %51 = fneg double %34
  store double %51, ptr %1, align 8
  %52 = fneg double %39
  store double %52, ptr %2, align 8
  br label %44
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__sincosx(i80 %0, ptr nonnull align 16 %1, ptr nonnull align 16 %2) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca fp128, align 16
  %6 = alloca fp128, align 16
  call void @llvm.memset.p0.i64(ptr align 16 %6, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %5, i8 -86, i64 16, i1 false)
  %7 = call fp128 @__extendxftf2(i80 %0)
  call void @sincosq(fp128 %7, ptr nonnull align 16 %6, ptr nonnull align 16 %5)
  %8 = load fp128, ptr %6, align 16
  %9 = call i80 @__trunctfxf2(fp128 %8)
  store i80 %9, ptr %1, align 16
  %10 = load fp128, ptr %5, align 16
  %11 = call i80 @__trunctfxf2(fp128 %10)
  store i80 %11, ptr %2, align 16
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @sincosq(fp128 %0, ptr nonnull align 16 %1, ptr nonnull align 16 %2) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %6, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %5, i8 -86, i64 8, i1 false)
  %7 = call double @__trunctfdf2(fp128 %0)
  call void @sincos(double %7, ptr nonnull align 8 %6, ptr nonnull align 8 %5)
  %8 = load double, ptr %6, align 8
  %9 = call fp128 @__extenddftf2(double %8)
  store fp128 %9, ptr %1, align 16
  %10 = load double, ptr %5, align 8
  %11 = call fp128 @__extenddftf2(double %10)
  store fp128 %11, ptr %2, align 16
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @sincosl(double %0, ptr nonnull align 8 %1, ptr nonnull align 8 %2) #0 {
  call void @sincos(double %0, ptr nonnull align 8 %1, ptr nonnull align 8 %2)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__sqrth(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @sqrtf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @sqrtf(float %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca float, align 4
  %9 = alloca i32, align 4
  %10 = bitcast float %0 to i32
  store i32 %10, ptr %9, align 4
  %11 = load i32, ptr %9, align 4
  %12 = and i32 %11, 2139095040
  %13 = icmp eq i32 %12, 2139095040
  br i1 %13, label %17, label %20

14:                                               ; preds = %20
  %15 = load i32, ptr %9, align 4
  %16 = icmp sle i32 %15, 0
  br i1 %16, label %26, label %30

17:                                               ; preds = %1
  %18 = fmul float %0, %0
  %19 = fadd float %18, %0
  ret float %19

20:                                               ; preds = %1
  br label %14

21:                                               ; preds = %36, %30
  %22 = load i32, ptr %9, align 4
  %23 = ashr i32 %22, 23
  store i32 %23, ptr %7, align 4
  %24 = load i32, ptr %7, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %44, label %45

26:                                               ; preds = %14
  %27 = load i32, ptr %9, align 4
  %28 = and i32 %27, 2147483647
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %35

30:                                               ; preds = %14
  br label %21

31:                                               ; preds = %35
  %32 = load i32, ptr %9, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %37, label %39

34:                                               ; preds = %26
  ret float %0

35:                                               ; preds = %26
  br label %31

36:                                               ; preds = %39
  br label %21

37:                                               ; preds = %31
  store float 0x7FF0000020000000, ptr %8, align 4
  %38 = load float, ptr %8, align 4
  ret float %38

39:                                               ; preds = %31
  br label %36

40:                                               ; preds = %72, %45
  %41 = load i32, ptr %7, align 4
  %42 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %41, i32 127)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %74, label %75

44:                                               ; preds = %21
  store i32 0, ptr %6, align 4
  br label %51

45:                                               ; preds = %21
  br label %40

46:                                               ; preds = %62
  %47 = load i32, ptr %7, align 4
  %48 = load i32, ptr %6, align 4
  %49 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %48, i32 1)
  %50 = extractvalue { i32, i1 } %49, 1
  br i1 %50, label %66, label %67

51:                                               ; preds = %55, %44
  %52 = load i32, ptr %9, align 4
  %53 = and i32 %52, 8388608
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %56, label %62

55:                                               ; preds = %64
  br label %51

56:                                               ; preds = %51
  %57 = load i32, ptr %9, align 4
  %58 = shl i32 %57, 1
  store i32 %58, ptr %9, align 4
  %59 = load i32, ptr %6, align 4
  %60 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %59, i32 1)
  %61 = extractvalue { i32, i1 } %60, 1
  br i1 %61, label %63, label %64

62:                                               ; preds = %51
  br label %46

63:                                               ; preds = %56
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

64:                                               ; preds = %56
  %65 = extractvalue { i32, i1 } %60, 0
  store i32 %65, ptr %6, align 4
  br label %55

66:                                               ; preds = %46
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

67:                                               ; preds = %46
  %68 = extractvalue { i32, i1 } %49, 0
  %69 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %47, i32 %68)
  %70 = extractvalue { i32, i1 } %69, 1
  br i1 %70, label %71, label %72

71:                                               ; preds = %67
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

72:                                               ; preds = %67
  %73 = extractvalue { i32, i1 } %69, 0
  store i32 %73, ptr %7, align 4
  br label %40

74:                                               ; preds = %40
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

75:                                               ; preds = %40
  %76 = extractvalue { i32, i1 } %42, 0
  store i32 %76, ptr %7, align 4
  %77 = load i32, ptr %9, align 4
  %78 = and i32 %77, 8388607
  %79 = or i32 %78, 8388608
  store i32 %79, ptr %9, align 4
  %80 = load i32, ptr %7, align 4
  %81 = and i32 %80, 1
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %90, label %95

83:                                               ; preds = %97, %95
  %84 = load i32, ptr %7, align 4
  %85 = ashr i32 %84, 1
  store i32 %85, ptr %7, align 4
  %86 = load i32, ptr %9, align 4
  %87 = load i32, ptr %9, align 4
  %88 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %86, i32 %87)
  %89 = extractvalue { i32, i1 } %88, 1
  br i1 %89, label %99, label %100

90:                                               ; preds = %75
  %91 = load i32, ptr %9, align 4
  %92 = load i32, ptr %9, align 4
  %93 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %91, i32 %92)
  %94 = extractvalue { i32, i1 } %93, 1
  br i1 %94, label %96, label %97

95:                                               ; preds = %75
  br label %83

96:                                               ; preds = %90
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

97:                                               ; preds = %90
  %98 = extractvalue { i32, i1 } %93, 0
  store i32 %98, ptr %9, align 4
  br label %83

99:                                               ; preds = %83
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

100:                                              ; preds = %83
  %101 = extractvalue { i32, i1 } %88, 0
  store i32 %101, ptr %9, align 4
  store i32 0, ptr %5, align 4
  store i32 0, ptr %4, align 4
  store i32 16777216, ptr %3, align 4
  br label %105

102:                                              ; preds = %114
  %103 = load i32, ptr %9, align 4
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %156, label %159

105:                                              ; preds = %108, %100
  %106 = load i32, ptr %3, align 4
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %109, label %114

108:                                              ; preds = %147
  br label %105

109:                                              ; preds = %105
  %110 = load i32, ptr %4, align 4
  %111 = load i32, ptr %3, align 4
  %112 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %110, i32 %111)
  %113 = extractvalue { i32, i1 } %112, 1
  br i1 %113, label %115, label %116

114:                                              ; preds = %105
  br label %102

115:                                              ; preds = %109
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %109
  %117 = extractvalue { i32, i1 } %112, 0
  %118 = load i32, ptr %9, align 4
  %119 = icmp sle i32 %117, %118
  br i1 %119, label %125, label %129

120:                                              ; preds = %144, %129
  %121 = load i32, ptr %9, align 4
  %122 = load i32, ptr %9, align 4
  %123 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %121, i32 %122)
  %124 = extractvalue { i32, i1 } %123, 1
  br i1 %124, label %146, label %147

125:                                              ; preds = %116
  %126 = load i32, ptr %3, align 4
  %127 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %117, i32 %126)
  %128 = extractvalue { i32, i1 } %127, 1
  br i1 %128, label %130, label %131

129:                                              ; preds = %116
  br label %120

130:                                              ; preds = %125
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

131:                                              ; preds = %125
  %132 = extractvalue { i32, i1 } %127, 0
  store i32 %132, ptr %4, align 4
  %133 = load i32, ptr %9, align 4
  %134 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %133, i32 %117)
  %135 = extractvalue { i32, i1 } %134, 1
  br i1 %135, label %136, label %137

136:                                              ; preds = %131
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %131
  %138 = extractvalue { i32, i1 } %134, 0
  store i32 %138, ptr %9, align 4
  %139 = load i32, ptr %5, align 4
  %140 = load i32, ptr %3, align 4
  %141 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %139, i32 %140)
  %142 = extractvalue { i32, i1 } %141, 1
  br i1 %142, label %143, label %144

143:                                              ; preds = %137
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

144:                                              ; preds = %137
  %145 = extractvalue { i32, i1 } %141, 0
  store i32 %145, ptr %5, align 4
  br label %120

146:                                              ; preds = %120
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

147:                                              ; preds = %120
  %148 = extractvalue { i32, i1 } %123, 0
  store i32 %148, ptr %9, align 4
  %149 = load i32, ptr %3, align 4
  %150 = ashr i32 %149, 1
  store i32 %150, ptr %3, align 4
  br label %108

151:                                              ; preds = %160, %159
  %152 = load i32, ptr %5, align 4
  %153 = ashr i32 %152, 1
  %154 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %153, i32 1056964608)
  %155 = extractvalue { i32, i1 } %154, 1
  br i1 %155, label %186, label %187

156:                                              ; preds = %102
  store float 1.000000e+00, ptr %2, align 4
  %157 = load float, ptr %2, align 4
  %158 = fcmp oge float %157, 1.000000e+00
  br i1 %158, label %161, label %164

159:                                              ; preds = %102
  br label %151

160:                                              ; preds = %165, %164
  br label %151

161:                                              ; preds = %156
  store float 1.000000e+00, ptr %2, align 4
  %162 = load float, ptr %2, align 4
  %163 = fcmp ogt float %162, 1.000000e+00
  br i1 %163, label %166, label %170

164:                                              ; preds = %156
  br label %160

165:                                              ; preds = %177, %175
  br label %160

166:                                              ; preds = %161
  %167 = load i32, ptr %5, align 4
  %168 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %167, i32 2)
  %169 = extractvalue { i32, i1 } %168, 1
  br i1 %169, label %174, label %175

170:                                              ; preds = %161
  %171 = load i32, ptr %5, align 4
  %172 = and i32 %171, 1
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %178, label %182

174:                                              ; preds = %166
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

175:                                              ; preds = %166
  %176 = extractvalue { i32, i1 } %168, 0
  store i32 %176, ptr %5, align 4
  br label %165

177:                                              ; preds = %184, %182
  br label %165

178:                                              ; preds = %170
  %179 = load i32, ptr %5, align 4
  %180 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %179, i32 1)
  %181 = extractvalue { i32, i1 } %180, 1
  br i1 %181, label %183, label %184

182:                                              ; preds = %170
  br label %177

183:                                              ; preds = %178
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

184:                                              ; preds = %178
  %185 = extractvalue { i32, i1 } %180, 0
  store i32 %185, ptr %5, align 4
  br label %177

186:                                              ; preds = %151
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

187:                                              ; preds = %151
  %188 = extractvalue { i32, i1 } %154, 0
  store i32 %188, ptr %9, align 4
  %189 = load i32, ptr %9, align 4
  %190 = load i32, ptr %7, align 4
  %191 = shl i32 %190, 23
  %192 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %189, i32 %191)
  %193 = extractvalue { i32, i1 } %192, 1
  br i1 %193, label %194, label %195

194:                                              ; preds = %187
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

195:                                              ; preds = %187
  %196 = extractvalue { i32, i1 } %192, 0
  store i32 %196, ptr %9, align 4
  %197 = load i32, ptr %9, align 4
  %198 = bitcast i32 %197 to float
  ret float %198
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @sqrt(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = bitcast double %0 to i64
  %18 = lshr i64 %17, 32
  %19 = sub i64 4294967295, %18
  %20 = icmp ule i64 %19, 4294967295
  br i1 %20, label %26, label %27

21:                                               ; preds = %26
  %22 = trunc i64 %18 to i32
  store i32 %22, ptr %16, align 4
  %23 = and i64 %17, 4294967295
  %24 = sub i64 4294967295, %23
  %25 = icmp ule i64 %24, 4294967295
  br i1 %25, label %33, label %34

26:                                               ; preds = %1
  br label %21

27:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

28:                                               ; preds = %33
  %29 = trunc i64 %23 to i32
  store i32 %29, ptr %15, align 4
  %30 = load i32, ptr %16, align 4
  %31 = and i32 %30, 2146435072
  %32 = icmp eq i32 %31, 2146435072
  br i1 %32, label %37, label %40

33:                                               ; preds = %21
  br label %28

34:                                               ; preds = %21
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

35:                                               ; preds = %40
  %36 = fcmp oeq double %0, 0.000000e+00
  br i1 %36, label %45, label %46

37:                                               ; preds = %28
  %38 = fmul double %0, %0
  %39 = fadd double %38, %0
  ret double %39

40:                                               ; preds = %28
  br label %35

41:                                               ; preds = %46
  %42 = load i32, ptr %16, align 4
  %43 = and i32 %42, -2147483648
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %52, label %54

45:                                               ; preds = %35
  ret double %0

46:                                               ; preds = %35
  br label %41

47:                                               ; preds = %54
  %48 = load i32, ptr %16, align 4
  %49 = lshr i32 %48, 20
  %50 = sub i32 2147483647, %49
  %51 = icmp ule i32 %50, 2147483647
  br i1 %51, label %58, label %59

52:                                               ; preds = %41
  store double 0x7FF0000000000001, ptr %14, align 8
  %53 = load double, ptr %14, align 8
  ret double %53

54:                                               ; preds = %41
  br label %47

55:                                               ; preds = %58
  store i32 %49, ptr %13, align 4
  %56 = load i32, ptr %13, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %64, label %65

58:                                               ; preds = %47
  br label %55

59:                                               ; preds = %47
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

60:                                               ; preds = %139, %65
  %61 = load i32, ptr %13, align 4
  %62 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %61, i32 1023)
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %145, label %146

64:                                               ; preds = %55
  br label %67

65:                                               ; preds = %55
  br label %60

66:                                               ; preds = %75
  store i32 0, ptr %12, align 4
  br label %90

67:                                               ; preds = %70, %64
  %68 = load i32, ptr %16, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %71, label %75

70:                                               ; preds = %77
  br label %67

71:                                               ; preds = %67
  %72 = load i32, ptr %13, align 4
  %73 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %72, i32 21)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %76, label %77

75:                                               ; preds = %67
  br label %66

76:                                               ; preds = %71
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

77:                                               ; preds = %71
  %78 = extractvalue { i32, i1 } %73, 0
  store i32 %78, ptr %13, align 4
  %79 = load i32, ptr %16, align 4
  %80 = load i32, ptr %15, align 4
  %81 = lshr i32 %80, 11
  %82 = or i32 %79, %81
  store i32 %82, ptr %16, align 4
  %83 = load i32, ptr %15, align 4
  %84 = shl i32 %83, 21
  store i32 %84, ptr %15, align 4
  br label %70

85:                                               ; preds = %101
  %86 = load i32, ptr %13, align 4
  %87 = load i32, ptr %12, align 4
  %88 = sub i32 2147483647, %87
  %89 = icmp ule i32 %88, 2147483647
  br i1 %89, label %108, label %109

90:                                               ; preds = %94, %66
  %91 = load i32, ptr %16, align 4
  %92 = and i32 %91, 1048576
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %95, label %101

94:                                               ; preds = %103
  br label %90

95:                                               ; preds = %90
  %96 = load i32, ptr %16, align 4
  %97 = shl i32 %96, 1
  store i32 %97, ptr %16, align 4
  %98 = load i32, ptr %12, align 4
  %99 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %98, i32 1)
  %100 = extractvalue { i32, i1 } %99, 1
  br i1 %100, label %102, label %103

101:                                              ; preds = %90
  br label %85

102:                                              ; preds = %95
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

103:                                              ; preds = %95
  %104 = extractvalue { i32, i1 } %99, 0
  store i32 %104, ptr %12, align 4
  br label %94

105:                                              ; preds = %108
  %106 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %87, i32 1)
  %107 = extractvalue { i32, i1 } %106, 1
  br i1 %107, label %110, label %111

108:                                              ; preds = %85
  br label %105

109:                                              ; preds = %85
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

110:                                              ; preds = %105
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

111:                                              ; preds = %105
  %112 = extractvalue { i32, i1 } %106, 0
  %113 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %86, i32 %112)
  %114 = extractvalue { i32, i1 } %113, 1
  br i1 %114, label %115, label %116

115:                                              ; preds = %111
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

116:                                              ; preds = %111
  %117 = extractvalue { i32, i1 } %113, 0
  store i32 %117, ptr %13, align 4
  %118 = load i32, ptr %16, align 4
  %119 = load i32, ptr %15, align 4
  %120 = load i32, ptr %12, align 4
  %121 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 32, i32 %120)
  %122 = extractvalue { i32, i1 } %121, 1
  br i1 %122, label %123, label %124

123:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

124:                                              ; preds = %116
  %125 = extractvalue { i32, i1 } %121, 0
  %126 = sub i32 31, %125
  %127 = icmp ule i32 %126, 31
  br i1 %127, label %137, label %138

128:                                              ; preds = %137
  %129 = trunc i32 %125 to i5
  %130 = zext i5 %129 to i32
  %131 = lshr i32 %119, %130
  %132 = or i32 %118, %131
  store i32 %132, ptr %16, align 4
  %133 = load i32, ptr %15, align 4
  %134 = load i32, ptr %12, align 4
  %135 = sub i32 31, %134
  %136 = icmp ule i32 %135, 31
  br i1 %136, label %143, label %144

137:                                              ; preds = %124
  br label %128

138:                                              ; preds = %124
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

139:                                              ; preds = %143
  %140 = trunc i32 %134 to i5
  %141 = zext i5 %140 to i32
  %142 = shl i32 %133, %141
  store i32 %142, ptr %15, align 4
  br label %60

143:                                              ; preds = %128
  br label %139

144:                                              ; preds = %128
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

145:                                              ; preds = %60
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

146:                                              ; preds = %60
  %147 = extractvalue { i32, i1 } %62, 0
  store i32 %147, ptr %13, align 4
  %148 = load i32, ptr %16, align 4
  %149 = and i32 %148, 1048575
  %150 = or i32 %149, 1048576
  store i32 %150, ptr %16, align 4
  %151 = load i32, ptr %13, align 4
  %152 = and i32 %151, 1
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %163, label %170

154:                                              ; preds = %177, %170
  %155 = load i32, ptr %13, align 4
  %156 = ashr i32 %155, 1
  store i32 %156, ptr %13, align 4
  %157 = load i32, ptr %16, align 4
  %158 = load i32, ptr %16, align 4
  %159 = load i32, ptr %15, align 4
  %160 = lshr i32 %159, 31
  %161 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %158, i32 %160)
  %162 = extractvalue { i32, i1 } %161, 1
  br i1 %162, label %182, label %183

163:                                              ; preds = %146
  %164 = load i32, ptr %16, align 4
  %165 = load i32, ptr %16, align 4
  %166 = load i32, ptr %15, align 4
  %167 = lshr i32 %166, 31
  %168 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %165, i32 %167)
  %169 = extractvalue { i32, i1 } %168, 1
  br i1 %169, label %171, label %172

170:                                              ; preds = %146
  br label %154

171:                                              ; preds = %163
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

172:                                              ; preds = %163
  %173 = extractvalue { i32, i1 } %168, 0
  %174 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %164, i32 %173)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

176:                                              ; preds = %172
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

177:                                              ; preds = %172
  %178 = extractvalue { i32, i1 } %174, 0
  store i32 %178, ptr %16, align 4
  %179 = load i32, ptr %15, align 4
  %180 = load i32, ptr %15, align 4
  %181 = add i32 %179, %180
  store i32 %181, ptr %15, align 4
  br label %154

182:                                              ; preds = %154
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

183:                                              ; preds = %154
  %184 = extractvalue { i32, i1 } %161, 0
  %185 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %157, i32 %184)
  %186 = extractvalue { i32, i1 } %185, 1
  br i1 %186, label %187, label %188

187:                                              ; preds = %183
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

188:                                              ; preds = %183
  %189 = extractvalue { i32, i1 } %185, 0
  store i32 %189, ptr %16, align 4
  %190 = load i32, ptr %15, align 4
  %191 = load i32, ptr %15, align 4
  %192 = add i32 %190, %191
  store i32 %192, ptr %15, align 4
  store i32 0, ptr %11, align 4
  store i32 0, ptr %10, align 4
  store i32 0, ptr %9, align 4
  store i32 0, ptr %8, align 4
  store i32 2097152, ptr %7, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %5, i8 -86, i64 4, i1 false)
  br label %194

193:                                              ; preds = %205
  store i32 -2147483648, ptr %7, align 4
  br label %246

194:                                              ; preds = %197, %188
  %195 = load i32, ptr %7, align 4
  %196 = icmp ne i32 %195, 0
  br i1 %196, label %198, label %205

197:                                              ; preds = %206
  br label %194

198:                                              ; preds = %194
  %199 = load i32, ptr %9, align 4
  %200 = load i32, ptr %7, align 4
  %201 = add i32 %199, %200
  store i32 %201, ptr %6, align 4
  %202 = load i32, ptr %6, align 4
  %203 = load i32, ptr %16, align 4
  %204 = icmp ule i32 %202, %203
  br i1 %204, label %218, label %223

205:                                              ; preds = %194
  br label %193

206:                                              ; preds = %239, %223
  %207 = load i32, ptr %16, align 4
  %208 = load i32, ptr %16, align 4
  %209 = add i32 %207, %208
  %210 = load i32, ptr %15, align 4
  %211 = lshr i32 %210, 31
  %212 = add i32 %209, %211
  store i32 %212, ptr %16, align 4
  %213 = load i32, ptr %15, align 4
  %214 = load i32, ptr %15, align 4
  %215 = add i32 %213, %214
  store i32 %215, ptr %15, align 4
  %216 = load i32, ptr %7, align 4
  %217 = lshr i32 %216, 1
  store i32 %217, ptr %7, align 4
  br label %197

218:                                              ; preds = %198
  %219 = load i32, ptr %6, align 4
  %220 = load i32, ptr %7, align 4
  %221 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %219, i32 %220)
  %222 = extractvalue { i32, i1 } %221, 1
  br i1 %222, label %224, label %225

223:                                              ; preds = %198
  br label %206

224:                                              ; preds = %218
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

225:                                              ; preds = %218
  %226 = extractvalue { i32, i1 } %221, 0
  store i32 %226, ptr %9, align 4
  %227 = load i32, ptr %16, align 4
  %228 = load i32, ptr %6, align 4
  %229 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %227, i32 %228)
  %230 = extractvalue { i32, i1 } %229, 1
  br i1 %230, label %231, label %232

231:                                              ; preds = %225
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

232:                                              ; preds = %225
  %233 = extractvalue { i32, i1 } %229, 0
  store i32 %233, ptr %16, align 4
  %234 = load i32, ptr %11, align 4
  %235 = load i32, ptr %7, align 4
  %236 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %234, i32 %235)
  %237 = extractvalue { i32, i1 } %236, 1
  br i1 %237, label %238, label %239

238:                                              ; preds = %232
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

239:                                              ; preds = %232
  %240 = extractvalue { i32, i1 } %236, 0
  store i32 %240, ptr %11, align 4
  br label %206

241:                                              ; preds = %258
  %242 = load i32, ptr %16, align 4
  %243 = load i32, ptr %15, align 4
  %244 = or i32 %242, %243
  %245 = icmp ne i32 %244, 0
  br i1 %245, label %343, label %346

246:                                              ; preds = %249, %193
  %247 = load i32, ptr %7, align 4
  %248 = icmp ne i32 %247, 0
  br i1 %248, label %250, label %258

249:                                              ; preds = %259
  br label %246

250:                                              ; preds = %246
  %251 = load i32, ptr %8, align 4
  %252 = load i32, ptr %7, align 4
  %253 = add i32 %251, %252
  store i32 %253, ptr %5, align 4
  %254 = load i32, ptr %9, align 4
  store i32 %254, ptr %6, align 4
  %255 = load i32, ptr %6, align 4
  %256 = load i32, ptr %16, align 4
  %257 = icmp ult i32 %255, %256
  br i1 %257, label %273, label %274

258:                                              ; preds = %246
  br label %241

259:                                              ; preds = %336, %292
  %260 = load i32, ptr %16, align 4
  %261 = load i32, ptr %16, align 4
  %262 = add i32 %260, %261
  %263 = load i32, ptr %15, align 4
  %264 = lshr i32 %263, 31
  %265 = add i32 %262, %264
  store i32 %265, ptr %16, align 4
  %266 = load i32, ptr %15, align 4
  %267 = load i32, ptr %15, align 4
  %268 = add i32 %266, %267
  store i32 %268, ptr %15, align 4
  %269 = load i32, ptr %7, align 4
  %270 = lshr i32 %269, 1
  store i32 %270, ptr %7, align 4
  br label %249

271:                                              ; preds = %278, %273
  %272 = phi i1 [ true, %273 ], [ %279, %278 ]
  br i1 %272, label %285, label %292

273:                                              ; preds = %250
  br label %271

274:                                              ; preds = %250
  %275 = load i32, ptr %6, align 4
  %276 = load i32, ptr %16, align 4
  %277 = icmp eq i32 %275, %276
  br i1 %277, label %280, label %284

278:                                              ; preds = %284, %280
  %279 = phi i1 [ %283, %280 ], [ false, %284 ]
  br label %271

280:                                              ; preds = %274
  %281 = load i32, ptr %5, align 4
  %282 = load i32, ptr %15, align 4
  %283 = icmp ule i32 %281, %282
  br label %278

284:                                              ; preds = %274
  br label %278

285:                                              ; preds = %271
  %286 = load i32, ptr %5, align 4
  %287 = load i32, ptr %7, align 4
  %288 = add i32 %286, %287
  store i32 %288, ptr %8, align 4
  %289 = load i32, ptr %5, align 4
  %290 = and i32 %289, -2147483648
  %291 = icmp eq i32 %290, -2147483648
  br i1 %291, label %300, label %304

292:                                              ; preds = %271
  br label %259

293:                                              ; preds = %311, %309
  %294 = load i32, ptr %16, align 4
  %295 = load i32, ptr %6, align 4
  %296 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %294, i32 %295)
  %297 = extractvalue { i32, i1 } %296, 1
  br i1 %297, label %313, label %314

298:                                              ; preds = %304, %300
  %299 = phi i1 [ %303, %300 ], [ false, %304 ]
  br i1 %299, label %305, label %309

300:                                              ; preds = %285
  %301 = load i32, ptr %8, align 4
  %302 = and i32 %301, -2147483648
  %303 = icmp eq i32 %302, 0
  br label %298

304:                                              ; preds = %285
  br label %298

305:                                              ; preds = %298
  %306 = load i32, ptr %9, align 4
  %307 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %306, i32 1)
  %308 = extractvalue { i32, i1 } %307, 1
  br i1 %308, label %310, label %311

309:                                              ; preds = %298
  br label %293

310:                                              ; preds = %305
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

311:                                              ; preds = %305
  %312 = extractvalue { i32, i1 } %307, 0
  store i32 %312, ptr %9, align 4
  br label %293

313:                                              ; preds = %293
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

314:                                              ; preds = %293
  %315 = extractvalue { i32, i1 } %296, 0
  store i32 %315, ptr %16, align 4
  %316 = load i32, ptr %15, align 4
  %317 = load i32, ptr %5, align 4
  %318 = icmp ult i32 %316, %317
  br i1 %318, label %327, label %331

319:                                              ; preds = %333, %331
  %320 = load i32, ptr %15, align 4
  %321 = load i32, ptr %5, align 4
  %322 = sub i32 %320, %321
  store i32 %322, ptr %15, align 4
  %323 = load i32, ptr %10, align 4
  %324 = load i32, ptr %7, align 4
  %325 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %323, i32 %324)
  %326 = extractvalue { i32, i1 } %325, 1
  br i1 %326, label %335, label %336

327:                                              ; preds = %314
  %328 = load i32, ptr %16, align 4
  %329 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %328, i32 1)
  %330 = extractvalue { i32, i1 } %329, 1
  br i1 %330, label %332, label %333

331:                                              ; preds = %314
  br label %319

332:                                              ; preds = %327
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

333:                                              ; preds = %327
  %334 = extractvalue { i32, i1 } %329, 0
  store i32 %334, ptr %16, align 4
  br label %319

335:                                              ; preds = %319
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

336:                                              ; preds = %319
  %337 = extractvalue { i32, i1 } %325, 0
  store i32 %337, ptr %10, align 4
  br label %259

338:                                              ; preds = %347, %346
  %339 = load i32, ptr %11, align 4
  %340 = lshr i32 %339, 1
  %341 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %340, i32 1071644672)
  %342 = extractvalue { i32, i1 } %341, 1
  br i1 %342, label %391, label %392

343:                                              ; preds = %241
  store double 1.000000e+00, ptr %4, align 8
  %344 = load double, ptr %4, align 8
  %345 = fcmp oge double %344, 1.000000e+00
  br i1 %345, label %348, label %351

346:                                              ; preds = %241
  br label %338

347:                                              ; preds = %352, %351
  br label %338

348:                                              ; preds = %343
  store double 1.000000e+00, ptr %4, align 8
  %349 = load i32, ptr %10, align 4
  %350 = icmp eq i32 %349, -1
  br i1 %350, label %353, label %357

351:                                              ; preds = %343
  br label %347

352:                                              ; preds = %363, %361
  br label %347

353:                                              ; preds = %348
  store i32 0, ptr %10, align 4
  %354 = load i32, ptr %11, align 4
  %355 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %354, i32 1)
  %356 = extractvalue { i32, i1 } %355, 1
  br i1 %356, label %360, label %361

357:                                              ; preds = %348
  %358 = load double, ptr %4, align 8
  %359 = fcmp ogt double %358, 1.000000e+00
  br i1 %359, label %364, label %367

360:                                              ; preds = %353
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

361:                                              ; preds = %353
  %362 = extractvalue { i32, i1 } %355, 0
  store i32 %362, ptr %11, align 4
  br label %352

363:                                              ; preds = %389, %386
  br label %352

364:                                              ; preds = %357
  %365 = load i32, ptr %10, align 4
  %366 = icmp eq i32 %365, -2
  br i1 %366, label %377, label %381

367:                                              ; preds = %357
  %368 = load i32, ptr %10, align 4
  %369 = load i32, ptr %10, align 4
  %370 = and i32 %369, 1
  %371 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %368, i32 %370)
  %372 = extractvalue { i32, i1 } %371, 1
  br i1 %372, label %388, label %389

373:                                              ; preds = %383, %381
  %374 = load i32, ptr %10, align 4
  %375 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %374, i32 2)
  %376 = extractvalue { i32, i1 } %375, 1
  br i1 %376, label %385, label %386

377:                                              ; preds = %364
  %378 = load i32, ptr %11, align 4
  %379 = call fastcc { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %378, i32 1)
  %380 = extractvalue { i32, i1 } %379, 1
  br i1 %380, label %382, label %383

381:                                              ; preds = %364
  br label %373

382:                                              ; preds = %377
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

383:                                              ; preds = %377
  %384 = extractvalue { i32, i1 } %379, 0
  store i32 %384, ptr %11, align 4
  br label %373

385:                                              ; preds = %373
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

386:                                              ; preds = %373
  %387 = extractvalue { i32, i1 } %375, 0
  store i32 %387, ptr %10, align 4
  br label %363

388:                                              ; preds = %367
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

389:                                              ; preds = %367
  %390 = extractvalue { i32, i1 } %371, 0
  store i32 %390, ptr %10, align 4
  br label %363

391:                                              ; preds = %338
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

392:                                              ; preds = %338
  %393 = extractvalue { i32, i1 } %341, 0
  store i32 %393, ptr %16, align 4
  %394 = load i32, ptr %10, align 4
  %395 = lshr i32 %394, 1
  store i32 %395, ptr %15, align 4
  %396 = load i32, ptr %11, align 4
  %397 = and i32 %396, 1
  %398 = icmp ne i32 %397, 0
  br i1 %398, label %403, label %406

399:                                              ; preds = %406, %403
  %400 = load i32, ptr %16, align 4
  %401 = sub i32 2147483647, %400
  %402 = icmp ule i32 %401, 2147483647
  br i1 %402, label %414, label %415

403:                                              ; preds = %392
  %404 = load i32, ptr %15, align 4
  %405 = or i32 %404, -2147483648
  store i32 %405, ptr %15, align 4
  br label %399

406:                                              ; preds = %392
  br label %399

407:                                              ; preds = %414
  store i32 %400, ptr %3, align 4
  %408 = load i32, ptr %3, align 4
  %409 = load i32, ptr %13, align 4
  %410 = shl i32 %409, 20
  %411 = add i32 %408, %410
  store i32 %411, ptr %3, align 4
  %412 = load i32, ptr %3, align 4
  %413 = icmp sge i32 %412, 0
  br i1 %413, label %423, label %424

414:                                              ; preds = %399
  br label %407

415:                                              ; preds = %399
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable

416:                                              ; preds = %423
  %417 = sext i32 %412 to i64
  %418 = shl i64 %417, 32
  %419 = load i32, ptr %15, align 4
  %420 = zext i32 %419 to i64
  %421 = or i64 %418, %420
  %422 = bitcast i64 %421 to double
  ret double %422

423:                                              ; preds = %407
  br label %416

424:                                              ; preds = %407
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.negative_to_unsigned__anon_3532, i64 50, ptr align 8 null, ptr nonnull readonly align 8 @110)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__sqrtx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @sqrtq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @sqrtq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @sqrt(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @sqrtl(double %0) #0 {
  %2 = call double @sqrt(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__tanh(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @tanf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @tanf(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca double, align 8
  %4 = alloca i32, align 4
  %5 = bitcast float %0 to i32
  store i32 %5, ptr %4, align 4
  %6 = load i32, ptr %4, align 4
  %7 = lshr i32 %6, 31
  %8 = icmp ne i32 %7, 0
  %9 = load i32, ptr %4, align 4
  %10 = and i32 %9, 2147483647
  store i32 %10, ptr %4, align 4
  %11 = load i32, ptr %4, align 4
  %12 = icmp ule i32 %11, 1061752794
  br i1 %12, label %16, label %19

13:                                               ; preds = %19
  %14 = load i32, ptr %4, align 4
  %15 = icmp ule i32 %14, 1081824209
  br i1 %15, label %36, label %39

16:                                               ; preds = %1
  %17 = load i32, ptr %4, align 4
  %18 = icmp ult i32 %17, 964689920
  br i1 %18, label %23, label %26

19:                                               ; preds = %1
  br label %13

20:                                               ; preds = %26
  %21 = fpext float %0 to double
  %22 = call fastcc float @compiler_rt.trig.__tandf(double %21, i1 false)
  ret float %22

23:                                               ; preds = %16
  %24 = load i32, ptr %4, align 4
  %25 = icmp ult i32 %24, 8388608
  br i1 %25, label %29, label %31

26:                                               ; preds = %16
  br label %20

27:                                               ; preds = %31, %29
  %28 = phi float [ %30, %29 ], [ %32, %31 ]
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %28)
  ret float %0

29:                                               ; preds = %23
  %30 = fdiv float %0, 0x4770000000000000
  br label %27

31:                                               ; preds = %23
  %32 = fadd float %0, 0x4770000000000000
  br label %27

33:                                               ; preds = %39
  %34 = load i32, ptr %4, align 4
  %35 = icmp ule i32 %34, 1088565717
  br i1 %35, label %63, label %66

36:                                               ; preds = %13
  %37 = load i32, ptr %4, align 4
  %38 = icmp ule i32 %37, 1075235811
  br i1 %38, label %40, label %41

39:                                               ; preds = %13
  br label %33

40:                                               ; preds = %36
  br i1 %8, label %45, label %48

41:                                               ; preds = %36
  br i1 %8, label %54, label %57

42:                                               ; preds = %48, %45
  %43 = phi double [ %47, %45 ], [ %50, %48 ]
  %44 = call fastcc float @compiler_rt.trig.__tandf(double %43, i1 true)
  ret float %44

45:                                               ; preds = %40
  %46 = fpext float %0 to double
  %47 = fadd double %46, 0x3FF921FB54442D18
  br label %42

48:                                               ; preds = %40
  %49 = fpext float %0 to double
  %50 = fsub double %49, 0x3FF921FB54442D18
  br label %42

51:                                               ; preds = %57, %54
  %52 = phi double [ %56, %54 ], [ %59, %57 ]
  %53 = call fastcc float @compiler_rt.trig.__tandf(double %52, i1 false)
  ret float %53

54:                                               ; preds = %41
  %55 = fpext float %0 to double
  %56 = fadd double %55, 0x400921FB54442D18
  br label %51

57:                                               ; preds = %41
  %58 = fpext float %0 to double
  %59 = fsub double %58, 0x400921FB54442D18
  br label %51

60:                                               ; preds = %66
  %61 = load i32, ptr %4, align 4
  %62 = icmp uge i32 %61, 2139095040
  br i1 %62, label %93, label %95

63:                                               ; preds = %33
  %64 = load i32, ptr %4, align 4
  %65 = icmp ule i32 %64, 1085271519
  br i1 %65, label %67, label %68

66:                                               ; preds = %33
  br label %60

67:                                               ; preds = %63
  br i1 %8, label %72, label %75

68:                                               ; preds = %63
  br i1 %8, label %81, label %84

69:                                               ; preds = %75, %72
  %70 = phi double [ %74, %72 ], [ %77, %75 ]
  %71 = call fastcc float @compiler_rt.trig.__tandf(double %70, i1 true)
  ret float %71

72:                                               ; preds = %67
  %73 = fpext float %0 to double
  %74 = fadd double %73, 0x4012D97C7F3321D2
  br label %69

75:                                               ; preds = %67
  %76 = fpext float %0 to double
  %77 = fsub double %76, 0x4012D97C7F3321D2
  br label %69

78:                                               ; preds = %84, %81
  %79 = phi double [ %83, %81 ], [ %86, %84 ]
  %80 = call fastcc float @compiler_rt.trig.__tandf(double %79, i1 false)
  ret float %80

81:                                               ; preds = %68
  %82 = fpext float %0 to double
  %83 = fadd double %82, 0x401921FB54442D18
  br label %78

84:                                               ; preds = %68
  %85 = fpext float %0 to double
  %86 = fsub double %85, 0x401921FB54442D18
  br label %78

87:                                               ; preds = %95
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %88 = call fastcc i32 @compiler_rt.rem_pio2f.rem_pio2f(float %0, ptr nonnull align 8 %3)
  %89 = load double, ptr %3, align 8
  %90 = and i32 %88, 1
  %91 = icmp ne i32 %90, 0
  %92 = call fastcc float @compiler_rt.trig.__tandf(double %89, i1 %91)
  ret float %92

93:                                               ; preds = %60
  %94 = fsub float %0, %0
  ret float %94

95:                                               ; preds = %60
  br label %87
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc float @compiler_rt.trig.__tandf(double %0, i1 %1) unnamed_addr #0 {
  %3 = fmul double %0, %0
  %4 = fmul double %3, 0x3F8362B9BF971BCD
  %5 = fadd double 0x3F685DADFCECF44E, %4
  %6 = fmul double %3, 0x3F991DF3908C33CE
  %7 = fadd double 0x3FAB54C91D865AFE, %6
  %8 = fmul double %3, %3
  %9 = fmul double %3, %0
  %10 = fmul double %3, 0x3FC112FD38999F72
  %11 = fadd double 0x3FD5554D3418C99F, %10
  %12 = fmul double %9, %11
  %13 = fadd double %0, %12
  %14 = fmul double %9, %8
  %15 = fmul double %8, %5
  %16 = fadd double %7, %15
  %17 = fmul double %14, %16
  %18 = fadd double %13, %17
  br i1 %1, label %22, label %24

19:                                               ; preds = %24, %22
  %20 = phi double [ %23, %22 ], [ %18, %24 ]
  %21 = fptrunc double %20 to float
  ret float %21

22:                                               ; preds = %2
  %23 = fdiv double -1.000000e+00, %18
  br label %19

24:                                               ; preds = %2
  br label %19
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @tan(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca [2 x double], align 8
  %4 = alloca i64, align 8
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 32
  store i64 %6, ptr %4, align 8
  %7 = load i64, ptr %4, align 8
  %8 = and i64 %7, 2147483647
  store i64 %8, ptr %4, align 8
  %9 = load i64, ptr %4, align 8
  %10 = icmp ule i64 %9, 1072243195
  br i1 %10, label %14, label %17

11:                                               ; preds = %17
  %12 = load i64, ptr %4, align 8
  %13 = icmp uge i64 %12, 2146435072
  br i1 %13, label %39, label %41

14:                                               ; preds = %1
  %15 = load i64, ptr %4, align 8
  %16 = icmp ult i64 %15, 1044381696
  br i1 %16, label %20, label %23

17:                                               ; preds = %1
  br label %11

18:                                               ; preds = %23
  %19 = call fastcc double @compiler_rt.trig.__tan(double %0, double 0.000000e+00, i1 false)
  ret double %19

20:                                               ; preds = %14
  %21 = load i64, ptr %4, align 8
  %22 = icmp ult i64 %21, 1048576
  br i1 %22, label %26, label %28

23:                                               ; preds = %14
  br label %18

24:                                               ; preds = %28, %26
  %25 = phi double [ %27, %26 ], [ %29, %28 ]
  call fastcc void @math.doNotOptimizeAway__anon_3744(double %25)
  ret double %0

26:                                               ; preds = %20
  %27 = fdiv double %0, 0x4770000000000000
  br label %24

28:                                               ; preds = %20
  %29 = fadd double %0, 0x4770000000000000
  br label %24

30:                                               ; preds = %41
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 16, i1 false)
  %31 = call fastcc i32 @compiler_rt.rem_pio2.rem_pio2(double %0, ptr nonnull align 8 %3)
  %32 = getelementptr inbounds [2 x double], ptr %3, i64 0, i64 0
  %33 = load double, ptr %32, align 8
  %34 = getelementptr inbounds [2 x double], ptr %3, i64 0, i64 1
  %35 = load double, ptr %34, align 8
  %36 = and i32 %31, 1
  %37 = icmp ne i32 %36, 0
  %38 = call fastcc double @compiler_rt.trig.__tan(double %33, double %35, i1 %37)
  ret double %38

39:                                               ; preds = %11
  %40 = fsub double %0, %0
  ret double %40

41:                                               ; preds = %11
  br label %30
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc double @compiler_rt.trig.__tan(double %0, double %1, i1 %2) unnamed_addr #0 {
  %StackGuardSlot = alloca ptr, align 8
  %4 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %4, ptr %StackGuardSlot)
  %5 = alloca double, align 8
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store double %0, ptr %17, align 8
  store double %1, ptr %16, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %15, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %14, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %13, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %12, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %11, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %10, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %9, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 -86, i64 8, i1 false)
  call void @llvm.memset.p0.i64(ptr align 4 %7, i8 -86, i64 4, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %6, i8 -86, i64 1, i1 false)
  %18 = load double, ptr %17, align 8
  %19 = bitcast double %18 to i64
  %20 = lshr i64 %19, 32
  %21 = sub i64 4294967295, %20
  %22 = icmp ule i64 %21, 4294967295
  br i1 %22, label %28, label %29

23:                                               ; preds = %28
  %24 = trunc i64 %20 to i32
  store i32 %24, ptr %7, align 4
  %25 = load i32, ptr %7, align 4
  %26 = and i32 %25, 2147483647
  %27 = icmp uge i32 %26, 1072010280
  br i1 %27, label %89, label %94

28:                                               ; preds = %3
  br label %23

29:                                               ; preds = %3
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @169)
  unreachable

30:                                               ; preds = %95, %94
  %31 = load double, ptr %17, align 8
  %32 = load double, ptr %17, align 8
  %33 = fmul double %31, %32
  store double %33, ptr %15, align 8
  %34 = load double, ptr %15, align 8
  %35 = load double, ptr %15, align 8
  %36 = fmul double %34, %35
  store double %36, ptr %12, align 8
  %37 = load double, ptr %12, align 8
  %38 = load double, ptr %12, align 8
  %39 = load double, ptr %12, align 8
  %40 = load double, ptr %12, align 8
  %41 = load double, ptr %12, align 8
  %42 = fmul double %41, 0xBEF375CBDB605373
  %43 = fadd double 0x3F147E88A03792A6, %42
  %44 = fmul double %40, %43
  %45 = fadd double 0x3F4344D8F2F26501, %44
  %46 = fmul double %39, %45
  %47 = fadd double 0x3F6D6D22C9560328, %46
  %48 = fmul double %38, %47
  %49 = fadd double 0x3F9664F48406D637, %48
  %50 = fmul double %37, %49
  %51 = fadd double 0x3FC111111110FE7A, %50
  store double %51, ptr %14, align 8
  %52 = load double, ptr %15, align 8
  %53 = load double, ptr %12, align 8
  %54 = load double, ptr %12, align 8
  %55 = load double, ptr %12, align 8
  %56 = load double, ptr %12, align 8
  %57 = load double, ptr %12, align 8
  %58 = fmul double %57, 0x3EFB2A7074BF7AD4
  %59 = fadd double 0x3F12B80F32F0A7E9, %58
  %60 = fmul double %56, %59
  %61 = fadd double 0x3F3026F71A8D1068, %60
  %62 = fmul double %55, %61
  %63 = fadd double 0x3F57DBC8FEE08315, %62
  %64 = fmul double %54, %63
  %65 = fadd double 0x3F8226E3E96E8493, %64
  %66 = fmul double %53, %65
  %67 = fadd double 0x3FABA1BA1BB341FE, %66
  %68 = fmul double %52, %67
  store double %68, ptr %13, align 8
  %69 = load double, ptr %15, align 8
  %70 = load double, ptr %17, align 8
  %71 = fmul double %69, %70
  store double %71, ptr %11, align 8
  %72 = load double, ptr %16, align 8
  %73 = load double, ptr %15, align 8
  %74 = load double, ptr %11, align 8
  %75 = load double, ptr %14, align 8
  %76 = load double, ptr %13, align 8
  %77 = fadd double %75, %76
  %78 = fmul double %74, %77
  %79 = load double, ptr %16, align 8
  %80 = fadd double %78, %79
  %81 = fmul double %73, %80
  %82 = fadd double %72, %81
  %83 = load double, ptr %11, align 8
  %84 = fmul double %83, 0x3FD5555555555563
  %85 = fadd double %82, %84
  store double %85, ptr %14, align 8
  %86 = load double, ptr %17, align 8
  %87 = load double, ptr %14, align 8
  %88 = fadd double %86, %87
  store double %88, ptr %12, align 8
  br i1 %27, label %109, label %128

89:                                               ; preds = %23
  %90 = load i32, ptr %7, align 4
  %91 = lshr i32 %90, 31
  %92 = icmp ne i32 %91, 0
  store i1 %92, ptr %6, align 1
  %93 = load i1, ptr %6, align 1
  br i1 %93, label %101, label %106

94:                                               ; preds = %23
  br label %30

95:                                               ; preds = %106, %101
  %96 = load double, ptr %17, align 8
  %97 = fsub double 0x3FE921FB54442D18, %96
  %98 = load double, ptr %16, align 8
  %99 = fsub double 0x3C81A62633145C07, %98
  %100 = fadd double %97, %99
  store double %100, ptr %17, align 8
  store double 0.000000e+00, ptr %16, align 8
  br label %30

101:                                              ; preds = %89
  %102 = load double, ptr %17, align 8
  %103 = fneg double %102
  store double %103, ptr %17, align 8
  %104 = load double, ptr %16, align 8
  %105 = fneg double %104
  store double %105, ptr %16, align 8
  br label %95

106:                                              ; preds = %89
  br label %95

107:                                              ; preds = %128
  %108 = xor i1 %2, true
  br i1 %108, label %166, label %168

109:                                              ; preds = %30
  %110 = uitofp i1 %2 to double
  %111 = fmul double 2.000000e+00, %110
  %112 = fsub double 1.000000e+00, %111
  store double %112, ptr %11, align 8
  %113 = load double, ptr %11, align 8
  %114 = load double, ptr %17, align 8
  %115 = load double, ptr %14, align 8
  %116 = load double, ptr %12, align 8
  %117 = load double, ptr %12, align 8
  %118 = fmul double %116, %117
  %119 = load double, ptr %12, align 8
  %120 = load double, ptr %11, align 8
  %121 = fadd double %119, %120
  %122 = fdiv double %118, %121
  %123 = fsub double %115, %122
  %124 = fadd double %114, %123
  %125 = fmul double 2.000000e+00, %124
  %126 = fsub double %113, %125
  store double %126, ptr %13, align 8
  %127 = load i1, ptr %6, align 1
  br i1 %127, label %131, label %134

128:                                              ; preds = %30
  br label %107

129:                                              ; preds = %134, %131
  %130 = load double, ptr %5, align 8
  ret double %130

131:                                              ; preds = %109
  %132 = load double, ptr %13, align 8
  %133 = fneg double %132
  store double %133, ptr %5, align 8
  br label %129

134:                                              ; preds = %109
  %135 = load double, ptr %13, align 8
  store double %135, ptr %5, align 8
  br label %129

136:                                              ; preds = %168
  %137 = load double, ptr %12, align 8
  store double %137, ptr %9, align 8
  %138 = load double, ptr %9, align 8
  %139 = bitcast double %138 to i64
  %140 = and i64 %139, -4294967296
  %141 = bitcast i64 %140 to double
  store double %141, ptr %9, align 8
  %142 = load double, ptr %14, align 8
  %143 = load double, ptr %9, align 8
  %144 = load double, ptr %17, align 8
  %145 = fsub double %143, %144
  %146 = fsub double %142, %145
  store double %146, ptr %13, align 8
  %147 = load double, ptr %12, align 8
  %148 = fdiv double -1.000000e+00, %147
  store double %148, ptr %10, align 8
  %149 = load double, ptr %10, align 8
  store double %149, ptr %8, align 8
  %150 = load double, ptr %8, align 8
  %151 = bitcast double %150 to i64
  %152 = and i64 %151, -4294967296
  %153 = bitcast i64 %152 to double
  store double %153, ptr %8, align 8
  %154 = load double, ptr %8, align 8
  %155 = load double, ptr %10, align 8
  %156 = load double, ptr %8, align 8
  %157 = load double, ptr %9, align 8
  %158 = fmul double %156, %157
  %159 = fadd double 1.000000e+00, %158
  %160 = load double, ptr %8, align 8
  %161 = load double, ptr %13, align 8
  %162 = fmul double %160, %161
  %163 = fadd double %159, %162
  %164 = fmul double %155, %163
  %165 = fadd double %154, %164
  ret double %165

166:                                              ; preds = %107
  %167 = load double, ptr %12, align 8
  ret double %167

168:                                              ; preds = %107
  br label %136
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__tanx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @tanq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @tanq(fp128 %0) #0 {
  %2 = call double @__trunctfdf2(fp128 %0)
  %3 = call double @tan(double %2)
  %4 = call fp128 @__extenddftf2(double %3)
  ret fp128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @tanl(double %0) #0 {
  %2 = call double @tan(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local half @__trunch(half %0) #0 {
  %2 = fpext half %0 to float
  %3 = call float @truncf(float %2)
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local float @truncf(float %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast float %0 to i32
  %6 = lshr i32 %5, 23
  %7 = and i32 %6, 255
  %8 = sub i32 2147483647, %7
  %9 = icmp ule i32 %8, 2147483647
  br i1 %9, label %13, label %14

10:                                               ; preds = %13
  %11 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %7, i32 127)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %15, label %16

13:                                               ; preds = %1
  br label %10

14:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @111)
  unreachable

15:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

16:                                               ; preds = %10
  %17 = extractvalue { i32, i1 } %11, 0
  %18 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %17, i32 9)
  %19 = extractvalue { i32, i1 } %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

21:                                               ; preds = %16
  %22 = extractvalue { i32, i1 } %18, 0
  store i32 %22, ptr %4, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 -86, i64 4, i1 false)
  %23 = load i32, ptr %4, align 4
  %24 = icmp sge i32 %23, 32
  br i1 %24, label %28, label %29

25:                                               ; preds = %29
  %26 = load i32, ptr %4, align 4
  %27 = icmp slt i32 %26, 9
  br i1 %27, label %34, label %35

28:                                               ; preds = %21
  ret float %0

29:                                               ; preds = %21
  br label %25

30:                                               ; preds = %35, %34
  %31 = load i32, ptr %4, align 4
  %32 = sub i32 31, %31
  %33 = icmp ule i32 %32, 31
  br i1 %33, label %43, label %44

34:                                               ; preds = %25
  store i32 1, ptr %4, align 4
  br label %30

35:                                               ; preds = %25
  br label %30

36:                                               ; preds = %43
  %37 = trunc i32 %31 to i5
  %38 = zext i5 %37 to i32
  %39 = lshr i32 -1, %38
  store i32 %39, ptr %3, align 4
  %40 = load i32, ptr %3, align 4
  %41 = and i32 %5, %40
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %45, label %46

43:                                               ; preds = %30
  br label %36

44:                                               ; preds = %30
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @111)
  unreachable

45:                                               ; preds = %36
  ret float %0

46:                                               ; preds = %36
  %47 = fadd float %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3743(float %47)
  %48 = load i32, ptr %3, align 4
  %49 = xor i32 %48, -1
  %50 = and i32 %5, %49
  %51 = bitcast i32 %50 to float
  ret float %51
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @trunc(double %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = bitcast double %0 to i64
  %6 = lshr i64 %5, 52
  %7 = and i64 %6, 2047
  %8 = sub i64 2147483647, %7
  %9 = icmp ule i64 %8, 2147483647
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i64 %7 to i32
  %12 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 1023)
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @112)
  unreachable

16:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %10
  %18 = extractvalue { i32, i1 } %12, 0
  %19 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %18, i32 12)
  %20 = extractvalue { i32, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i32, i1 } %19, 0
  store i32 %23, ptr %4, align 4
  call void @llvm.memset.p0.i64(ptr align 8 %3, i8 -86, i64 8, i1 false)
  %24 = load i32, ptr %4, align 4
  %25 = icmp sge i32 %24, 64
  br i1 %25, label %29, label %30

26:                                               ; preds = %30
  %27 = load i32, ptr %4, align 4
  %28 = icmp slt i32 %27, 12
  br i1 %28, label %35, label %36

29:                                               ; preds = %22
  ret double %0

30:                                               ; preds = %22
  br label %26

31:                                               ; preds = %36, %35
  %32 = load i32, ptr %4, align 4
  %33 = sub i32 63, %32
  %34 = icmp ule i32 %33, 63
  br i1 %34, label %44, label %45

35:                                               ; preds = %26
  store i32 1, ptr %4, align 4
  br label %31

36:                                               ; preds = %26
  br label %31

37:                                               ; preds = %44
  %38 = trunc i32 %32 to i6
  %39 = zext i6 %38 to i64
  %40 = lshr i64 -1, %39
  store i64 %40, ptr %3, align 8
  %41 = load i64, ptr %3, align 8
  %42 = and i64 %5, %41
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %46, label %47

44:                                               ; preds = %31
  br label %37

45:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @112)
  unreachable

46:                                               ; preds = %37
  ret double %0

47:                                               ; preds = %37
  %48 = fadd double %0, 0x4770000000000000
  call fastcc void @math.doNotOptimizeAway__anon_3744(double %48)
  %49 = load i64, ptr %3, align 8
  %50 = xor i64 %49, -1
  %51 = and i64 %5, %50
  %52 = bitcast i64 %51 to double
  ret double %52
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i80 @__truncx(i80 %0) #0 {
  %2 = call fp128 @__extendxftf2(i80 %0)
  %3 = call fp128 @truncq(fp128 %2)
  %4 = call i80 @__trunctfxf2(fp128 %3)
  ret i80 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local fp128 @truncq(fp128 %0) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %2 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %2, ptr %StackGuardSlot)
  %3 = alloca i128, align 16
  %4 = alloca i32, align 4
  %5 = bitcast fp128 %0 to i128
  %6 = lshr i128 %5, 112
  %7 = and i128 %6, 32767
  %8 = sub i128 2147483647, %7
  %9 = icmp ule i128 %8, 2147483647
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = trunc i128 %7 to i32
  %12 = call fastcc { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 16383)
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %16, label %17

14:                                               ; preds = %1
  br label %10

15:                                               ; preds = %1
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @113)
  unreachable

16:                                               ; preds = %10
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

17:                                               ; preds = %10
  %18 = extractvalue { i32, i1 } %12, 0
  %19 = call fastcc { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %18, i32 16)
  %20 = extractvalue { i32, i1 } %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

22:                                               ; preds = %17
  %23 = extractvalue { i32, i1 } %19, 0
  store i32 %23, ptr %4, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 -86, i64 16, i1 false)
  %24 = load i32, ptr %4, align 4
  %25 = icmp sge i32 %24, 128
  br i1 %25, label %29, label %30

26:                                               ; preds = %30
  %27 = load i32, ptr %4, align 4
  %28 = icmp slt i32 %27, 16
  br i1 %28, label %35, label %36

29:                                               ; preds = %22
  ret fp128 %0

30:                                               ; preds = %22
  br label %26

31:                                               ; preds = %36, %35
  %32 = load i32, ptr %4, align 4
  %33 = sub i32 127, %32
  %34 = icmp ule i32 %33, 127
  br i1 %34, label %44, label %45

35:                                               ; preds = %26
  store i32 1, ptr %4, align 4
  br label %31

36:                                               ; preds = %26
  br label %31

37:                                               ; preds = %44
  %38 = trunc i32 %32 to i7
  %39 = zext i7 %38 to i128
  %40 = lshr i128 -1, %39
  store i128 %40, ptr %3, align 16
  %41 = load i128, ptr %3, align 16
  %42 = and i128 %5, %41
  %43 = icmp eq i128 %42, 0
  br i1 %43, label %46, label %47

44:                                               ; preds = %31
  br label %37

45:                                               ; preds = %31
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @113)
  unreachable

46:                                               ; preds = %37
  ret fp128 %0

47:                                               ; preds = %37
  %48 = call fp128 @__addtf3(fp128 %0, fp128 0xL00000000000000004077000000000000)
  call fastcc void @math.doNotOptimizeAway__anon_3745(fp128 %48)
  %49 = load i128, ptr %3, align 16
  %50 = xor i128 %49, -1
  %51 = and i128 %5, %50
  %52 = bitcast i128 %51 to fp128
  ret fp128 %52
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local double @truncl(double %0) #0 {
  %2 = call double @trunc(double %0)
  ret double %2
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__udivei4(ptr nonnull align 4 %0, ptr nonnull readonly align 4 %1, ptr nonnull readonly align 4 %2, i64 %3) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i32, align 4
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca { ptr, i64 }, align 8
  %13 = alloca i32, align 4
  %14 = alloca { ptr, i64 }, align 8
  %15 = alloca { ptr, i64 }, align 8
  %16 = alloca { ptr, i64 }, align 8
  %17 = alloca i32, align 4
  %18 = alloca { ptr, i64 }, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i64, align 8
  %27 = alloca i32, align 4
  %28 = alloca i64, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i64, align 8
  %32 = alloca { ptr, i64 }, align 8
  %33 = alloca i32, align 4
  %34 = alloca { ptr, i64 }, align 8
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca { ptr, i64 }, align 8
  %38 = alloca i32, align 4
  %39 = alloca [2049 x i32], align 4
  %40 = alloca { ptr, i64 }, align 8
  %41 = alloca i32, align 4
  %42 = alloca { ptr, i64 }, align 8
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i64, align 8
  %46 = alloca [2048 x i32], align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca { ptr, i64 }, align 8
  %53 = alloca { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, align 8
  %54 = alloca ptr, align 8
  %55 = alloca { ptr, i64 }, align 8
  %56 = alloca ptr, align 8
  %57 = alloca ptr, align 8
  store ptr %1, ptr %57, align 8
  %58 = udiv i64 %3, 32
  %59 = load ptr, ptr %57, align 8
  %60 = getelementptr inbounds i32, ptr %59, i64 0
  %61 = insertvalue { ptr, i64 } poison, ptr %60, 0
  %62 = insertvalue { ptr, i64 } %61, i64 %58, 1
  store ptr %2, ptr %56, align 8
  %63 = udiv i64 %3, 32
  %64 = load ptr, ptr %56, align 8
  %65 = getelementptr inbounds i32, ptr %64, i64 0
  %66 = insertvalue { ptr, i64 } poison, ptr %65, 0
  %67 = insertvalue { ptr, i64 } %66, i64 %63, 1
  store ptr %0, ptr %54, align 8
  %68 = udiv i64 %3, 32
  %69 = load ptr, ptr %54, align 8
  %70 = getelementptr inbounds i32, ptr %69, i64 0
  %71 = insertvalue { ptr, i64 } poison, ptr %70, 0
  %72 = insertvalue { ptr, i64 } %71, i64 %68, 1
  store { ptr, i64 } %72, ptr %55, align 8
  %73 = load { ptr, i64 }, ptr %55, align 8
  %74 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 0
  store { ptr, i64 } %73, ptr %74, align 8
  %75 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 1
  store { ptr, i64 } %62, ptr %75, align 8
  %76 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 2
  store { ptr, i64 } %67, ptr %76, align 8
  %77 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 0
  %78 = load { ptr, i64 }, ptr %77, align 8
  %79 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 1
  %80 = load { ptr, i64 }, ptr %79, align 8
  %81 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %53, i32 0, i32 2
  %82 = load { ptr, i64 }, ptr %81, align 8
  %83 = extractvalue { ptr, i64 } %78, 0
  %84 = icmp ne ptr %83, null
  br i1 %84, label %92, label %98

85:                                               ; preds = %951
  ret void

86:                                               ; preds = %409, %198, %189, %159, %126
  %87 = phi i16 [ 2, %126 ], [ 0, %159 ], [ 2, %189 ], [ 0, %198 ], [ 0, %409 ]
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %951, label %952

89:                                               ; preds = %108, %98
  %90 = extractvalue { ptr, i64 } %80, 1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %122, label %123

92:                                               ; preds = %4
  store { ptr, i64 } %78, ptr %52, align 8
  %93 = load { ptr, i64 }, ptr %52, align 8
  %94 = extractvalue { ptr, i64 } %93, 0
  %95 = getelementptr inbounds i32, ptr %94, i64 0
  %96 = extractvalue { ptr, i64 } %93, 1
  %97 = icmp ule i64 0, %96
  br i1 %97, label %102, label %103

98:                                               ; preds = %4
  br label %89

99:                                               ; preds = %102
  %100 = extractvalue { ptr, i64 } %93, 1
  %101 = icmp ule i64 %96, %100
  br i1 %101, label %106, label %107

102:                                              ; preds = %92
  br label %99

103:                                              ; preds = %92
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %96)
  unreachable

104:                                              ; preds = %106
  %105 = icmp ule i64 0, %96
  br i1 %105, label %114, label %115

106:                                              ; preds = %99
  br label %104

107:                                              ; preds = %99
  call fastcc void @builtin.panicOutOfBounds(i64 %96, i64 %100)
  unreachable

108:                                              ; preds = %114
  %109 = insertvalue { ptr, i64 } poison, ptr %95, 0
  %110 = insertvalue { ptr, i64 } %109, i64 %96, 1
  %111 = extractvalue { ptr, i64 } %110, 0
  %112 = extractvalue { ptr, i64 } %110, 1
  %113 = mul nuw i64 %112, 4
  call void @llvm.memset.p0.i64(ptr align 4 %111, i8 0, i64 %113, i1 false)
  br label %89

114:                                              ; preds = %104
  br label %108

115:                                              ; preds = %104
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %96)
  unreachable

116:                                              ; preds = %127
  %117 = extractvalue { ptr, i64 } %80, 1
  %118 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %117, i64 1)
  %119 = extractvalue { i64, i1 } %118, 1
  br i1 %119, label %128, label %129

120:                                              ; preds = %123, %122
  %121 = phi i1 [ true, %122 ], [ %125, %123 ]
  br i1 %121, label %126, label %127

122:                                              ; preds = %89
  br label %120

123:                                              ; preds = %89
  %124 = extractvalue { ptr, i64 } %82, 1
  %125 = icmp eq i64 %124, 0
  br label %120

126:                                              ; preds = %120
  br label %86

127:                                              ; preds = %120
  br label %116

128:                                              ; preds = %116
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

129:                                              ; preds = %116
  %130 = extractvalue { i64, i1 } %118, 0
  store i64 %130, ptr %51, align 8
  %131 = extractvalue { ptr, i64 } %82, 1
  %132 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %131, i64 1)
  %133 = extractvalue { i64, i1 } %132, 1
  br i1 %133, label %134, label %135

134:                                              ; preds = %129
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

135:                                              ; preds = %129
  %136 = extractvalue { i64, i1 } %132, 0
  store i64 %136, ptr %50, align 8
  br label %138

137:                                              ; preds = %154
  br label %168

138:                                              ; preds = %142, %135
  %139 = load i64, ptr %51, align 8
  %140 = extractvalue { ptr, i64 } %80, 1
  %141 = icmp ult i64 %139, %140
  br i1 %141, label %149, label %150

142:                                              ; preds = %162
  br label %138

143:                                              ; preds = %149
  %144 = extractvalue { ptr, i64 } %80, 0
  %145 = getelementptr inbounds i32, ptr %144, i64 %139
  %146 = load i32, ptr %145, align 4
  store i32 %146, ptr %49, align 4
  %147 = load i32, ptr %49, align 4
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %151, label %154

149:                                              ; preds = %138
  br label %143

150:                                              ; preds = %138
  call fastcc void @builtin.panicOutOfBounds(i64 %139, i64 %140)
  unreachable

151:                                              ; preds = %143
  %152 = load i64, ptr %51, align 8
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %159, label %160

154:                                              ; preds = %143
  br label %137

155:                                              ; preds = %160
  %156 = load i64, ptr %51, align 8
  %157 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %156, i64 1)
  %158 = extractvalue { i64, i1 } %157, 1
  br i1 %158, label %161, label %162

159:                                              ; preds = %151
  br label %86

160:                                              ; preds = %151
  br label %155

161:                                              ; preds = %155
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

162:                                              ; preds = %155
  %163 = extractvalue { i64, i1 } %157, 0
  store i64 %163, ptr %51, align 8
  br label %142

164:                                              ; preds = %184
  %165 = load i64, ptr %50, align 8
  %166 = load i64, ptr %51, align 8
  %167 = icmp ugt i64 %165, %166
  br i1 %167, label %198, label %199

168:                                              ; preds = %172, %137
  %169 = load i64, ptr %50, align 8
  %170 = extractvalue { ptr, i64 } %82, 1
  %171 = icmp ult i64 %169, %170
  br i1 %171, label %179, label %180

172:                                              ; preds = %192
  br label %168

173:                                              ; preds = %179
  %174 = extractvalue { ptr, i64 } %82, 0
  %175 = getelementptr inbounds i32, ptr %174, i64 %169
  %176 = load i32, ptr %175, align 4
  store i32 %176, ptr %48, align 4
  %177 = load i32, ptr %48, align 4
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %181, label %184

179:                                              ; preds = %168
  br label %173

180:                                              ; preds = %168
  call fastcc void @builtin.panicOutOfBounds(i64 %169, i64 %170)
  unreachable

181:                                              ; preds = %173
  %182 = load i64, ptr %50, align 8
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %189, label %190

184:                                              ; preds = %173
  br label %164

185:                                              ; preds = %190
  %186 = load i64, ptr %50, align 8
  %187 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %186, i64 1)
  %188 = extractvalue { i64, i1 } %187, 1
  br i1 %188, label %191, label %192

189:                                              ; preds = %181
  br label %86

190:                                              ; preds = %181
  br label %185

191:                                              ; preds = %185
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

192:                                              ; preds = %185
  %193 = extractvalue { i64, i1 } %187, 0
  store i64 %193, ptr %50, align 8
  br label %172

194:                                              ; preds = %199
  %195 = load i64, ptr %50, align 8
  %196 = extractvalue { ptr, i64 } %82, 1
  %197 = icmp ult i64 %195, %196
  br i1 %197, label %208, label %209

198:                                              ; preds = %164
  br label %86

199:                                              ; preds = %164
  br label %194

200:                                              ; preds = %208
  %201 = extractvalue { ptr, i64 } %82, 0
  %202 = getelementptr inbounds i32, ptr %201, i64 %195
  %203 = load i32, ptr %202, align 4
  store i32 %203, ptr %47, align 4
  %204 = load i32, ptr %47, align 4
  %205 = call i32 @llvm.ctlz.i32(i32 %204, i1 false)
  %206 = trunc i32 %205 to i6
  call void @llvm.memset.p0.i64(ptr align 4 %46, i8 -86, i64 8192, i1 false)
  %207 = load i64, ptr %50, align 8
  store i64 %207, ptr %45, align 8
  br label %213

208:                                              ; preds = %194
  br label %200

209:                                              ; preds = %194
  call fastcc void @builtin.panicOutOfBounds(i64 %195, i64 %196)
  unreachable

210:                                              ; preds = %222
  %211 = extractvalue { ptr, i64 } %82, 1
  %212 = icmp ult i64 0, %211
  br i1 %212, label %282, label %283

213:                                              ; preds = %216, %200
  %214 = load i64, ptr %45, align 8
  %215 = icmp ugt i64 %214, 0
  br i1 %215, label %217, label %222

216:                                              ; preds = %268
  br label %213

217:                                              ; preds = %213
  %218 = load i64, ptr %45, align 8
  %219 = load i64, ptr %45, align 8
  %220 = extractvalue { ptr, i64 } %82, 1
  %221 = icmp ult i64 %219, %220
  br i1 %221, label %232, label %233

222:                                              ; preds = %213
  br label %210

223:                                              ; preds = %232
  %224 = extractvalue { ptr, i64 } %82, 0
  %225 = getelementptr inbounds i32, ptr %224, i64 %219
  %226 = load i32, ptr %225, align 4
  store i32 %226, ptr %44, align 4
  %227 = load i32, ptr %44, align 4
  %228 = call fastcc i32 @math.shl__anon_3864(i32 %227, i6 %206)
  %229 = load i64, ptr %45, align 8
  %230 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %229, i64 1)
  %231 = extractvalue { i64, i1 } %230, 1
  br i1 %231, label %234, label %235

232:                                              ; preds = %217
  br label %223

233:                                              ; preds = %217
  call fastcc void @builtin.panicOutOfBounds(i64 %219, i64 %220)
  unreachable

234:                                              ; preds = %223
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

235:                                              ; preds = %223
  %236 = extractvalue { i64, i1 } %230, 0
  %237 = extractvalue { ptr, i64 } %82, 1
  %238 = icmp ult i64 %236, %237
  br i1 %238, label %246, label %247

239:                                              ; preds = %246
  %240 = extractvalue { ptr, i64 } %82, 0
  %241 = getelementptr inbounds i32, ptr %240, i64 %236
  %242 = load i32, ptr %241, align 4
  store i32 %242, ptr %43, align 4
  %243 = load i32, ptr %43, align 4
  %244 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %206)
  %245 = extractvalue { i6, i1 } %244, 1
  br i1 %245, label %248, label %249

246:                                              ; preds = %235
  br label %239

247:                                              ; preds = %235
  call fastcc void @builtin.panicOutOfBounds(i64 %236, i64 %237)
  unreachable

248:                                              ; preds = %239
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

249:                                              ; preds = %239
  %250 = extractvalue { i6, i1 } %244, 0
  %251 = call fastcc i32 @math.shr__anon_3865(i32 %243, i6 %250)
  %252 = or i32 %228, %251
  %253 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %254 = insertvalue { ptr, i64 } poison, ptr %253, 0
  %255 = insertvalue { ptr, i64 } %254, i64 2048, 1
  store { ptr, i64 } %255, ptr %42, align 8
  %256 = load { ptr, i64 }, ptr %42, align 8
  %257 = extractvalue { ptr, i64 } %256, 1
  %258 = icmp ult i64 %218, %257
  br i1 %258, label %265, label %266

259:                                              ; preds = %265
  %260 = extractvalue { ptr, i64 } %256, 0
  %261 = getelementptr inbounds i32, ptr %260, i64 %218
  store i32 %252, ptr %261, align 4
  %262 = load i64, ptr %45, align 8
  %263 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %262, i64 1)
  %264 = extractvalue { i64, i1 } %263, 1
  br i1 %264, label %267, label %268

265:                                              ; preds = %249
  br label %259

266:                                              ; preds = %249
  call fastcc void @builtin.panicOutOfBounds(i64 %218, i64 %257)
  unreachable

267:                                              ; preds = %259
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

268:                                              ; preds = %259
  %269 = extractvalue { i64, i1 } %263, 0
  store i64 %269, ptr %45, align 8
  br label %216

270:                                              ; preds = %282
  %271 = extractvalue { ptr, i64 } %82, 0
  %272 = getelementptr inbounds i32, ptr %271, i64 0
  %273 = load i32, ptr %272, align 4
  store i32 %273, ptr %41, align 4
  %274 = load i32, ptr %41, align 4
  %275 = call fastcc i32 @math.shl__anon_3864(i32 %274, i6 %206)
  %276 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %277 = insertvalue { ptr, i64 } poison, ptr %276, 0
  %278 = insertvalue { ptr, i64 } %277, i64 2048, 1
  store { ptr, i64 } %278, ptr %40, align 8
  %279 = load { ptr, i64 }, ptr %40, align 8
  %280 = extractvalue { ptr, i64 } %279, 1
  %281 = icmp ult i64 0, %280
  br i1 %281, label %290, label %291

282:                                              ; preds = %210
  br label %270

283:                                              ; preds = %210
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %211)
  unreachable

284:                                              ; preds = %290
  %285 = extractvalue { ptr, i64 } %279, 0
  %286 = getelementptr inbounds i32, ptr %285, i64 0
  store i32 %275, ptr %286, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %39, i8 -86, i64 8196, i1 false)
  %287 = load i64, ptr %51, align 8
  %288 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %287, i64 1)
  %289 = extractvalue { i64, i1 } %288, 1
  br i1 %289, label %292, label %293

290:                                              ; preds = %270
  br label %284

291:                                              ; preds = %270
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %280)
  unreachable

292:                                              ; preds = %284
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

293:                                              ; preds = %284
  %294 = extractvalue { i64, i1 } %288, 0
  %295 = load i64, ptr %51, align 8
  %296 = extractvalue { ptr, i64 } %80, 1
  %297 = icmp ult i64 %295, %296
  br i1 %297, label %305, label %306

298:                                              ; preds = %305
  %299 = extractvalue { ptr, i64 } %80, 0
  %300 = getelementptr inbounds i32, ptr %299, i64 %295
  %301 = load i32, ptr %300, align 4
  store i32 %301, ptr %38, align 4
  %302 = load i32, ptr %38, align 4
  %303 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %206)
  %304 = extractvalue { i6, i1 } %303, 1
  br i1 %304, label %307, label %308

305:                                              ; preds = %293
  br label %298

306:                                              ; preds = %293
  call fastcc void @builtin.panicOutOfBounds(i64 %295, i64 %296)
  unreachable

307:                                              ; preds = %298
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

308:                                              ; preds = %298
  %309 = extractvalue { i6, i1 } %303, 0
  %310 = call fastcc i32 @math.shr__anon_3865(i32 %302, i6 %309)
  %311 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %312 = insertvalue { ptr, i64 } poison, ptr %311, 0
  %313 = insertvalue { ptr, i64 } %312, i64 2049, 1
  store { ptr, i64 } %313, ptr %37, align 8
  %314 = load { ptr, i64 }, ptr %37, align 8
  %315 = extractvalue { ptr, i64 } %314, 1
  %316 = icmp ult i64 %294, %315
  br i1 %316, label %321, label %322

317:                                              ; preds = %321
  %318 = extractvalue { ptr, i64 } %314, 0
  %319 = getelementptr inbounds i32, ptr %318, i64 %294
  store i32 %310, ptr %319, align 4
  %320 = load i64, ptr %51, align 8
  store i64 %320, ptr %45, align 8
  br label %326

321:                                              ; preds = %308
  br label %317

322:                                              ; preds = %308
  call fastcc void @builtin.panicOutOfBounds(i64 %294, i64 %315)
  unreachable

323:                                              ; preds = %335
  %324 = extractvalue { ptr, i64 } %80, 1
  %325 = icmp ult i64 0, %324
  br i1 %325, label %395, label %396

326:                                              ; preds = %329, %317
  %327 = load i64, ptr %45, align 8
  %328 = icmp ugt i64 %327, 0
  br i1 %328, label %330, label %335

329:                                              ; preds = %381
  br label %326

330:                                              ; preds = %326
  %331 = load i64, ptr %45, align 8
  %332 = load i64, ptr %45, align 8
  %333 = extractvalue { ptr, i64 } %80, 1
  %334 = icmp ult i64 %332, %333
  br i1 %334, label %345, label %346

335:                                              ; preds = %326
  br label %323

336:                                              ; preds = %345
  %337 = extractvalue { ptr, i64 } %80, 0
  %338 = getelementptr inbounds i32, ptr %337, i64 %332
  %339 = load i32, ptr %338, align 4
  store i32 %339, ptr %36, align 4
  %340 = load i32, ptr %36, align 4
  %341 = call fastcc i32 @math.shl__anon_3864(i32 %340, i6 %206)
  %342 = load i64, ptr %45, align 8
  %343 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %342, i64 1)
  %344 = extractvalue { i64, i1 } %343, 1
  br i1 %344, label %347, label %348

345:                                              ; preds = %330
  br label %336

346:                                              ; preds = %330
  call fastcc void @builtin.panicOutOfBounds(i64 %332, i64 %333)
  unreachable

347:                                              ; preds = %336
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

348:                                              ; preds = %336
  %349 = extractvalue { i64, i1 } %343, 0
  %350 = extractvalue { ptr, i64 } %80, 1
  %351 = icmp ult i64 %349, %350
  br i1 %351, label %359, label %360

352:                                              ; preds = %359
  %353 = extractvalue { ptr, i64 } %80, 0
  %354 = getelementptr inbounds i32, ptr %353, i64 %349
  %355 = load i32, ptr %354, align 4
  store i32 %355, ptr %35, align 4
  %356 = load i32, ptr %35, align 4
  %357 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %206)
  %358 = extractvalue { i6, i1 } %357, 1
  br i1 %358, label %361, label %362

359:                                              ; preds = %348
  br label %352

360:                                              ; preds = %348
  call fastcc void @builtin.panicOutOfBounds(i64 %349, i64 %350)
  unreachable

361:                                              ; preds = %352
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

362:                                              ; preds = %352
  %363 = extractvalue { i6, i1 } %357, 0
  %364 = call fastcc i32 @math.shr__anon_3865(i32 %356, i6 %363)
  %365 = or i32 %341, %364
  %366 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %367 = insertvalue { ptr, i64 } poison, ptr %366, 0
  %368 = insertvalue { ptr, i64 } %367, i64 2049, 1
  store { ptr, i64 } %368, ptr %34, align 8
  %369 = load { ptr, i64 }, ptr %34, align 8
  %370 = extractvalue { ptr, i64 } %369, 1
  %371 = icmp ult i64 %331, %370
  br i1 %371, label %378, label %379

372:                                              ; preds = %378
  %373 = extractvalue { ptr, i64 } %369, 0
  %374 = getelementptr inbounds i32, ptr %373, i64 %331
  store i32 %365, ptr %374, align 4
  %375 = load i64, ptr %45, align 8
  %376 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %375, i64 1)
  %377 = extractvalue { i64, i1 } %376, 1
  br i1 %377, label %380, label %381

378:                                              ; preds = %362
  br label %372

379:                                              ; preds = %362
  call fastcc void @builtin.panicOutOfBounds(i64 %331, i64 %370)
  unreachable

380:                                              ; preds = %372
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

381:                                              ; preds = %372
  %382 = extractvalue { i64, i1 } %376, 0
  store i64 %382, ptr %45, align 8
  br label %329

383:                                              ; preds = %395
  %384 = extractvalue { ptr, i64 } %80, 0
  %385 = getelementptr inbounds i32, ptr %384, i64 0
  %386 = load i32, ptr %385, align 4
  store i32 %386, ptr %33, align 4
  %387 = load i32, ptr %33, align 4
  %388 = call fastcc i32 @math.shl__anon_3864(i32 %387, i6 %206)
  %389 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %390 = insertvalue { ptr, i64 } poison, ptr %389, 0
  %391 = insertvalue { ptr, i64 } %390, i64 2049, 1
  store { ptr, i64 } %391, ptr %32, align 8
  %392 = load { ptr, i64 }, ptr %32, align 8
  %393 = extractvalue { ptr, i64 } %392, 1
  %394 = icmp ult i64 0, %393
  br i1 %394, label %404, label %405

395:                                              ; preds = %323
  br label %383

396:                                              ; preds = %323
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %324)
  unreachable

397:                                              ; preds = %404
  %398 = extractvalue { ptr, i64 } %392, 0
  %399 = getelementptr inbounds i32, ptr %398, i64 0
  store i32 %388, ptr %399, align 4
  %400 = load i64, ptr %51, align 8
  %401 = load i64, ptr %50, align 8
  %402 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %400, i64 %401)
  %403 = extractvalue { i64, i1 } %402, 1
  br i1 %403, label %406, label %407

404:                                              ; preds = %383
  br label %397

405:                                              ; preds = %383
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %393)
  unreachable

406:                                              ; preds = %397
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

407:                                              ; preds = %397
  %408 = extractvalue { i64, i1 } %402, 0
  store i64 %408, ptr %31, align 8
  br label %410

409:                                              ; preds = %946
  br label %86

410:                                              ; preds = %949, %407
  %411 = load i64, ptr %31, align 8
  %412 = load i64, ptr %50, align 8
  %413 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %411, i64 %412)
  %414 = extractvalue { i64, i1 } %413, 1
  br i1 %414, label %415, label %416

415:                                              ; preds = %410
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

416:                                              ; preds = %410
  %417 = extractvalue { i64, i1 } %413, 0
  %418 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %417, i64 1)
  %419 = extractvalue { i64, i1 } %418, 1
  br i1 %419, label %420, label %421

420:                                              ; preds = %416
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

421:                                              ; preds = %416
  %422 = extractvalue { i64, i1 } %418, 0
  %423 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %424 = insertvalue { ptr, i64 } poison, ptr %423, 0
  %425 = insertvalue { ptr, i64 } %424, i64 2049, 1
  %426 = extractvalue { ptr, i64 } %425, 1
  %427 = icmp ult i64 %422, %426
  br i1 %427, label %439, label %440

428:                                              ; preds = %439
  %429 = extractvalue { ptr, i64 } %425, 0
  %430 = getelementptr inbounds i32, ptr %429, i64 %422
  %431 = load i32, ptr %430, align 4
  store i32 %431, ptr %30, align 4
  %432 = load i32, ptr %30, align 4
  %433 = zext i32 %432 to i64
  %434 = shl i64 %433, 32
  %435 = load i64, ptr %31, align 8
  %436 = load i64, ptr %50, align 8
  %437 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %435, i64 %436)
  %438 = extractvalue { i64, i1 } %437, 1
  br i1 %438, label %441, label %442

439:                                              ; preds = %421
  br label %428

440:                                              ; preds = %421
  call fastcc void @builtin.panicOutOfBounds(i64 %422, i64 %426)
  unreachable

441:                                              ; preds = %428
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

442:                                              ; preds = %428
  %443 = extractvalue { i64, i1 } %437, 0
  %444 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %445 = insertvalue { ptr, i64 } poison, ptr %444, 0
  %446 = insertvalue { ptr, i64 } %445, i64 2049, 1
  %447 = extractvalue { ptr, i64 } %446, 1
  %448 = icmp ult i64 %443, %447
  br i1 %448, label %457, label %458

449:                                              ; preds = %457
  %450 = extractvalue { ptr, i64 } %446, 0
  %451 = getelementptr inbounds i32, ptr %450, i64 %443
  %452 = load i32, ptr %451, align 4
  store i32 %452, ptr %29, align 4
  %453 = load i32, ptr %29, align 4
  %454 = zext i32 %453 to i64
  %455 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %434, i64 %454)
  %456 = extractvalue { i64, i1 } %455, 1
  br i1 %456, label %459, label %460

457:                                              ; preds = %442
  br label %449

458:                                              ; preds = %442
  call fastcc void @builtin.panicOutOfBounds(i64 %443, i64 %447)
  unreachable

459:                                              ; preds = %449
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

460:                                              ; preds = %449
  %461 = extractvalue { i64, i1 } %455, 0
  %462 = load i64, ptr %50, align 8
  %463 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %464 = insertvalue { ptr, i64 } poison, ptr %463, 0
  %465 = insertvalue { ptr, i64 } %464, i64 2048, 1
  %466 = extractvalue { ptr, i64 } %465, 1
  %467 = icmp ult i64 %462, %466
  br i1 %467, label %475, label %476

468:                                              ; preds = %475
  %469 = extractvalue { ptr, i64 } %465, 0
  %470 = getelementptr inbounds i32, ptr %469, i64 %462
  %471 = load i32, ptr %470, align 4
  store i32 %471, ptr %27, align 4
  %472 = load i32, ptr %27, align 4
  %473 = zext i32 %472 to i64
  %474 = icmp ne i64 %473, 0
  br i1 %474, label %485, label %486

475:                                              ; preds = %460
  br label %468

476:                                              ; preds = %460
  call fastcc void @builtin.panicOutOfBounds(i64 %462, i64 %466)
  unreachable

477:                                              ; preds = %485
  %478 = udiv i64 %461, %473
  store i64 %478, ptr %28, align 8
  %479 = load i64, ptr %50, align 8
  %480 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %481 = insertvalue { ptr, i64 } poison, ptr %480, 0
  %482 = insertvalue { ptr, i64 } %481, i64 2048, 1
  %483 = extractvalue { ptr, i64 } %482, 1
  %484 = icmp ult i64 %479, %483
  br i1 %484, label %494, label %495

485:                                              ; preds = %468
  br label %477

486:                                              ; preds = %468
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @114)
  unreachable

487:                                              ; preds = %494
  %488 = extractvalue { ptr, i64 } %482, 0
  %489 = getelementptr inbounds i32, ptr %488, i64 %479
  %490 = load i32, ptr %489, align 4
  store i32 %490, ptr %25, align 4
  %491 = load i32, ptr %25, align 4
  %492 = zext i32 %491 to i64
  %493 = icmp ne i64 %492, 0
  br i1 %493, label %498, label %499

494:                                              ; preds = %477
  br label %487

495:                                              ; preds = %477
  call fastcc void @builtin.panicOutOfBounds(i64 %479, i64 %483)
  unreachable

496:                                              ; preds = %498
  %497 = urem i64 %461, %492
  store i64 %497, ptr %26, align 8
  br label %501

498:                                              ; preds = %487
  br label %496

499:                                              ; preds = %487
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @114)
  unreachable

500:                                              ; preds = %505
  store i64 0, ptr %21, align 8
  store i64 0, ptr %45, align 8
  br label %612

501:                                              ; preds = %504, %496
  %502 = load i64, ptr %28, align 8
  %503 = icmp uge i64 %502, 4294967296
  br i1 %503, label %508, label %509

504:                                              ; preds = %605
  br label %501

505:                                              ; preds = %604, %578
  br label %500

506:                                              ; preds = %512, %508
  %507 = phi i1 [ true, %508 ], [ %513, %512 ]
  br i1 %507, label %574, label %578

508:                                              ; preds = %501
  br label %506

509:                                              ; preds = %501
  %510 = load i64, ptr %50, align 8
  %511 = icmp ugt i64 %510, 0
  br i1 %511, label %514, label %519

512:                                              ; preds = %571, %519
  %513 = phi i1 [ %573, %571 ], [ false, %519 ]
  br label %506

514:                                              ; preds = %509
  %515 = load i64, ptr %28, align 8
  %516 = load i64, ptr %50, align 8
  %517 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %516, i64 1)
  %518 = extractvalue { i64, i1 } %517, 1
  br i1 %518, label %520, label %521

519:                                              ; preds = %509
  br label %512

520:                                              ; preds = %514
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

521:                                              ; preds = %514
  %522 = extractvalue { i64, i1 } %517, 0
  %523 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %524 = insertvalue { ptr, i64 } poison, ptr %523, 0
  %525 = insertvalue { ptr, i64 } %524, i64 2048, 1
  %526 = extractvalue { ptr, i64 } %525, 1
  %527 = icmp ult i64 %522, %526
  br i1 %527, label %536, label %537

528:                                              ; preds = %536
  %529 = extractvalue { ptr, i64 } %525, 0
  %530 = getelementptr inbounds i32, ptr %529, i64 %522
  %531 = load i32, ptr %530, align 4
  store i32 %531, ptr %24, align 4
  %532 = load i32, ptr %24, align 4
  %533 = zext i32 %532 to i64
  %534 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %515, i64 %533)
  %535 = extractvalue { i64, i1 } %534, 1
  br i1 %535, label %538, label %539

536:                                              ; preds = %521
  br label %528

537:                                              ; preds = %521
  call fastcc void @builtin.panicOutOfBounds(i64 %522, i64 %526)
  unreachable

538:                                              ; preds = %528
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

539:                                              ; preds = %528
  %540 = extractvalue { i64, i1 } %534, 0
  %541 = load i64, ptr %26, align 8
  %542 = shl i64 %541, 32
  %543 = load i64, ptr %31, align 8
  %544 = load i64, ptr %50, align 8
  %545 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %543, i64 %544)
  %546 = extractvalue { i64, i1 } %545, 1
  br i1 %546, label %547, label %548

547:                                              ; preds = %539
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

548:                                              ; preds = %539
  %549 = extractvalue { i64, i1 } %545, 0
  %550 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %549, i64 1)
  %551 = extractvalue { i64, i1 } %550, 1
  br i1 %551, label %552, label %553

552:                                              ; preds = %548
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

553:                                              ; preds = %548
  %554 = extractvalue { i64, i1 } %550, 0
  %555 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %556 = insertvalue { ptr, i64 } poison, ptr %555, 0
  %557 = insertvalue { ptr, i64 } %556, i64 2049, 1
  %558 = extractvalue { ptr, i64 } %557, 1
  %559 = icmp ult i64 %554, %558
  br i1 %559, label %568, label %569

560:                                              ; preds = %568
  %561 = extractvalue { ptr, i64 } %557, 0
  %562 = getelementptr inbounds i32, ptr %561, i64 %554
  %563 = load i32, ptr %562, align 4
  store i32 %563, ptr %23, align 4
  %564 = load i32, ptr %23, align 4
  %565 = zext i32 %564 to i64
  %566 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %542, i64 %565)
  %567 = extractvalue { i64, i1 } %566, 1
  br i1 %567, label %570, label %571

568:                                              ; preds = %553
  br label %560

569:                                              ; preds = %553
  call fastcc void @builtin.panicOutOfBounds(i64 %554, i64 %558)
  unreachable

570:                                              ; preds = %560
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

571:                                              ; preds = %560
  %572 = extractvalue { i64, i1 } %566, 0
  %573 = icmp ugt i64 %540, %572
  br label %512

574:                                              ; preds = %506
  %575 = load i64, ptr %28, align 8
  %576 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %575, i64 1)
  %577 = extractvalue { i64, i1 } %576, 1
  br i1 %577, label %579, label %580

578:                                              ; preds = %506
  br label %505

579:                                              ; preds = %574
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

580:                                              ; preds = %574
  %581 = extractvalue { i64, i1 } %576, 0
  store i64 %581, ptr %28, align 8
  %582 = load i64, ptr %26, align 8
  %583 = load i64, ptr %50, align 8
  %584 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %585 = insertvalue { ptr, i64 } poison, ptr %584, 0
  %586 = insertvalue { ptr, i64 } %585, i64 2048, 1
  %587 = extractvalue { ptr, i64 } %586, 1
  %588 = icmp ult i64 %583, %587
  br i1 %588, label %597, label %598

589:                                              ; preds = %597
  %590 = extractvalue { ptr, i64 } %586, 0
  %591 = getelementptr inbounds i32, ptr %590, i64 %583
  %592 = load i32, ptr %591, align 4
  store i32 %592, ptr %22, align 4
  %593 = load i32, ptr %22, align 4
  %594 = zext i32 %593 to i64
  %595 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %582, i64 %594)
  %596 = extractvalue { i64, i1 } %595, 1
  br i1 %596, label %599, label %600

597:                                              ; preds = %580
  br label %589

598:                                              ; preds = %580
  call fastcc void @builtin.panicOutOfBounds(i64 %583, i64 %587)
  unreachable

599:                                              ; preds = %589
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

600:                                              ; preds = %589
  %601 = extractvalue { i64, i1 } %595, 0
  store i64 %601, ptr %26, align 8
  %602 = load i64, ptr %26, align 8
  %603 = icmp ult i64 %602, 4294967296
  br i1 %603, label %605, label %606

604:                                              ; preds = %606
  br label %505

605:                                              ; preds = %600
  br label %504

606:                                              ; preds = %600
  br label %604

607:                                              ; preds = %625
  %608 = load i64, ptr %31, align 8
  %609 = load i64, ptr %50, align 8
  %610 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %608, i64 %609)
  %611 = extractvalue { i64, i1 } %610, 1
  br i1 %611, label %709, label %710

612:                                              ; preds = %616, %500
  %613 = load i64, ptr %45, align 8
  %614 = load i64, ptr %50, align 8
  %615 = icmp ule i64 %613, %614
  br i1 %615, label %617, label %625

616:                                              ; preds = %707
  br label %612

617:                                              ; preds = %612
  %618 = load i64, ptr %28, align 8
  %619 = load i64, ptr %45, align 8
  %620 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %621 = insertvalue { ptr, i64 } poison, ptr %620, 0
  %622 = insertvalue { ptr, i64 } %621, i64 2048, 1
  %623 = extractvalue { ptr, i64 } %622, 1
  %624 = icmp ult i64 %619, %623
  br i1 %624, label %634, label %635

625:                                              ; preds = %612
  br label %607

626:                                              ; preds = %634
  %627 = extractvalue { ptr, i64 } %622, 0
  %628 = getelementptr inbounds i32, ptr %627, i64 %619
  %629 = load i32, ptr %628, align 4
  store i32 %629, ptr %20, align 4
  %630 = load i32, ptr %20, align 4
  %631 = zext i32 %630 to i64
  %632 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %618, i64 %631)
  %633 = extractvalue { i64, i1 } %632, 1
  br i1 %633, label %636, label %637

634:                                              ; preds = %617
  br label %626

635:                                              ; preds = %617
  call fastcc void @builtin.panicOutOfBounds(i64 %619, i64 %623)
  unreachable

636:                                              ; preds = %626
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

637:                                              ; preds = %626
  %638 = extractvalue { i64, i1 } %632, 0
  %639 = load i64, ptr %45, align 8
  %640 = load i64, ptr %31, align 8
  %641 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %639, i64 %640)
  %642 = extractvalue { i64, i1 } %641, 1
  br i1 %642, label %643, label %644

643:                                              ; preds = %637
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

644:                                              ; preds = %637
  %645 = extractvalue { i64, i1 } %641, 0
  %646 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %647 = insertvalue { ptr, i64 } poison, ptr %646, 0
  %648 = insertvalue { ptr, i64 } %647, i64 2049, 1
  %649 = extractvalue { ptr, i64 } %648, 1
  %650 = icmp ult i64 %645, %649
  br i1 %650, label %660, label %661

651:                                              ; preds = %660
  %652 = extractvalue { ptr, i64 } %648, 0
  %653 = getelementptr inbounds i32, ptr %652, i64 %645
  %654 = load i32, ptr %653, align 4
  store i32 %654, ptr %19, align 4
  %655 = load i32, ptr %19, align 4
  %656 = load i64, ptr %21, align 8
  %657 = zext i32 %655 to i64
  %658 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %657, i64 %656)
  %659 = extractvalue { i64, i1 } %658, 1
  br i1 %659, label %662, label %663

660:                                              ; preds = %644
  br label %651

661:                                              ; preds = %644
  call fastcc void @builtin.panicOutOfBounds(i64 %645, i64 %649)
  unreachable

662:                                              ; preds = %651
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

663:                                              ; preds = %651
  %664 = extractvalue { i64, i1 } %658, 0
  %665 = trunc i64 %638 to i32
  %666 = zext i32 %665 to i64
  %667 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %664, i64 %666)
  %668 = extractvalue { i64, i1 } %667, 1
  br i1 %668, label %669, label %670

669:                                              ; preds = %663
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

670:                                              ; preds = %663
  %671 = extractvalue { i64, i1 } %667, 0
  %672 = load i64, ptr %45, align 8
  %673 = load i64, ptr %31, align 8
  %674 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %672, i64 %673)
  %675 = extractvalue { i64, i1 } %674, 1
  br i1 %675, label %676, label %677

676:                                              ; preds = %670
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

677:                                              ; preds = %670
  %678 = extractvalue { i64, i1 } %674, 0
  %679 = trunc i64 %671 to i32
  %680 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %681 = insertvalue { ptr, i64 } poison, ptr %680, 0
  %682 = insertvalue { ptr, i64 } %681, i64 2049, 1
  store { ptr, i64 } %682, ptr %18, align 8
  %683 = load { ptr, i64 }, ptr %18, align 8
  %684 = extractvalue { ptr, i64 } %683, 1
  %685 = icmp ult i64 %678, %684
  br i1 %685, label %692, label %693

686:                                              ; preds = %692
  %687 = extractvalue { ptr, i64 } %683, 0
  %688 = getelementptr inbounds i32, ptr %687, i64 %678
  store i32 %679, ptr %688, align 4
  %689 = lshr i64 %638, 32
  %690 = sub i64 9223372036854775807, %689
  %691 = icmp ule i64 %690, 9223372036854775807
  br i1 %691, label %698, label %699

692:                                              ; preds = %677
  br label %686

693:                                              ; preds = %677
  call fastcc void @builtin.panicOutOfBounds(i64 %678, i64 %684)
  unreachable

694:                                              ; preds = %698
  %695 = ashr i64 %671, 32
  %696 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %689, i64 %695)
  %697 = extractvalue { i64, i1 } %696, 1
  br i1 %697, label %700, label %701

698:                                              ; preds = %686
  br label %694

699:                                              ; preds = %686
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @114)
  unreachable

700:                                              ; preds = %694
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

701:                                              ; preds = %694
  %702 = extractvalue { i64, i1 } %696, 0
  store i64 %702, ptr %21, align 8
  %703 = load i64, ptr %45, align 8
  %704 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %703, i64 1)
  %705 = extractvalue { i64, i1 } %704, 1
  br i1 %705, label %706, label %707

706:                                              ; preds = %701
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

707:                                              ; preds = %701
  %708 = extractvalue { i64, i1 } %704, 0
  store i64 %708, ptr %45, align 8
  br label %616

709:                                              ; preds = %607
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

710:                                              ; preds = %607
  %711 = extractvalue { i64, i1 } %610, 0
  %712 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %711, i64 1)
  %713 = extractvalue { i64, i1 } %712, 1
  br i1 %713, label %714, label %715

714:                                              ; preds = %710
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

715:                                              ; preds = %710
  %716 = extractvalue { i64, i1 } %712, 0
  %717 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %718 = insertvalue { ptr, i64 } poison, ptr %717, 0
  %719 = insertvalue { ptr, i64 } %718, i64 2049, 1
  %720 = extractvalue { ptr, i64 } %719, 1
  %721 = icmp ult i64 %716, %720
  br i1 %721, label %734, label %735

722:                                              ; preds = %734
  %723 = extractvalue { ptr, i64 } %719, 0
  %724 = getelementptr inbounds i32, ptr %723, i64 %716
  %725 = load i32, ptr %724, align 4
  store i32 %725, ptr %17, align 4
  %726 = load i32, ptr %17, align 4
  %727 = load i64, ptr %21, align 8
  %728 = zext i32 %726 to i64
  %729 = sub i64 %728, %727
  %730 = load i64, ptr %31, align 8
  %731 = load i64, ptr %50, align 8
  %732 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %730, i64 %731)
  %733 = extractvalue { i64, i1 } %732, 1
  br i1 %733, label %736, label %737

734:                                              ; preds = %715
  br label %722

735:                                              ; preds = %715
  call fastcc void @builtin.panicOutOfBounds(i64 %716, i64 %720)
  unreachable

736:                                              ; preds = %722
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

737:                                              ; preds = %722
  %738 = extractvalue { i64, i1 } %732, 0
  %739 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %738, i64 1)
  %740 = extractvalue { i64, i1 } %739, 1
  br i1 %740, label %741, label %742

741:                                              ; preds = %737
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

742:                                              ; preds = %737
  %743 = extractvalue { i64, i1 } %739, 0
  %744 = trunc i64 %729 to i32
  %745 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %746 = insertvalue { ptr, i64 } poison, ptr %745, 0
  %747 = insertvalue { ptr, i64 } %746, i64 2049, 1
  store { ptr, i64 } %747, ptr %16, align 8
  %748 = load { ptr, i64 }, ptr %16, align 8
  %749 = extractvalue { ptr, i64 } %748, 1
  %750 = icmp ult i64 %743, %749
  br i1 %750, label %756, label %757

751:                                              ; preds = %756
  %752 = extractvalue { ptr, i64 } %748, 0
  %753 = getelementptr inbounds i32, ptr %752, i64 %743
  store i32 %744, ptr %753, align 4
  %754 = extractvalue { ptr, i64 } %78, 0
  %755 = icmp ne ptr %754, null
  br i1 %755, label %760, label %767

756:                                              ; preds = %742
  br label %751

757:                                              ; preds = %742
  call fastcc void @builtin.panicOutOfBounds(i64 %743, i64 %749)
  unreachable

758:                                              ; preds = %768, %767
  %759 = icmp slt i64 %729, 0
  br i1 %759, label %776, label %779

760:                                              ; preds = %751
  %761 = load i64, ptr %31, align 8
  %762 = load i64, ptr %28, align 8
  %763 = trunc i64 %762 to i32
  store { ptr, i64 } %78, ptr %15, align 8
  %764 = load { ptr, i64 }, ptr %15, align 8
  %765 = extractvalue { ptr, i64 } %764, 1
  %766 = icmp ult i64 %761, %765
  br i1 %766, label %771, label %772

767:                                              ; preds = %751
  br label %758

768:                                              ; preds = %771
  %769 = extractvalue { ptr, i64 } %764, 0
  %770 = getelementptr inbounds i32, ptr %769, i64 %761
  store i32 %763, ptr %770, align 4
  br label %758

771:                                              ; preds = %760
  br label %768

772:                                              ; preds = %760
  call fastcc void @builtin.panicOutOfBounds(i64 %761, i64 %765)
  unreachable

773:                                              ; preds = %937, %779
  %774 = load i64, ptr %31, align 8
  %775 = icmp eq i64 %774, 0
  br i1 %775, label %946, label %947

776:                                              ; preds = %758
  %777 = extractvalue { ptr, i64 } %78, 0
  %778 = icmp ne ptr %777, null
  br i1 %778, label %781, label %787

779:                                              ; preds = %758
  br label %773

780:                                              ; preds = %803, %787
  store i64 0, ptr %11, align 8
  store i64 0, ptr %45, align 8
  br label %813

781:                                              ; preds = %776
  %782 = load i64, ptr %31, align 8
  %783 = load i64, ptr %31, align 8
  store { ptr, i64 } %78, ptr %14, align 8
  %784 = load { ptr, i64 }, ptr %14, align 8
  %785 = extractvalue { ptr, i64 } %784, 1
  %786 = icmp ult i64 %783, %785
  br i1 %786, label %795, label %796

787:                                              ; preds = %776
  br label %780

788:                                              ; preds = %795
  %789 = extractvalue { ptr, i64 } %784, 0
  %790 = getelementptr inbounds i32, ptr %789, i64 %783
  %791 = load i32, ptr %790, align 4
  store i32 %791, ptr %13, align 4
  %792 = load i32, ptr %13, align 4
  %793 = call fastcc { i32, i1 } @llvm.usub.with.overflow.i32(i32 %792, i32 1)
  %794 = extractvalue { i32, i1 } %793, 1
  br i1 %794, label %797, label %798

795:                                              ; preds = %781
  br label %788

796:                                              ; preds = %781
  call fastcc void @builtin.panicOutOfBounds(i64 %783, i64 %785)
  unreachable

797:                                              ; preds = %788
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

798:                                              ; preds = %788
  %799 = extractvalue { i32, i1 } %793, 0
  store { ptr, i64 } %78, ptr %12, align 8
  %800 = load { ptr, i64 }, ptr %12, align 8
  %801 = extractvalue { ptr, i64 } %800, 1
  %802 = icmp ult i64 %782, %801
  br i1 %802, label %806, label %807

803:                                              ; preds = %806
  %804 = extractvalue { ptr, i64 } %800, 0
  %805 = getelementptr inbounds i32, ptr %804, i64 %782
  store i32 %799, ptr %805, align 4
  br label %780

806:                                              ; preds = %798
  br label %803

807:                                              ; preds = %798
  call fastcc void @builtin.panicOutOfBounds(i64 %782, i64 %801)
  unreachable

808:                                              ; preds = %823
  %809 = load i64, ptr %31, align 8
  %810 = load i64, ptr %50, align 8
  %811 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %809, i64 %810)
  %812 = extractvalue { i64, i1 } %811, 1
  br i1 %812, label %891, label %892

813:                                              ; preds = %817, %780
  %814 = load i64, ptr %45, align 8
  %815 = load i64, ptr %50, align 8
  %816 = icmp ule i64 %814, %815
  br i1 %816, label %818, label %823

817:                                              ; preds = %889
  br label %813

818:                                              ; preds = %813
  %819 = load i64, ptr %45, align 8
  %820 = load i64, ptr %31, align 8
  %821 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %819, i64 %820)
  %822 = extractvalue { i64, i1 } %821, 1
  br i1 %822, label %824, label %825

823:                                              ; preds = %813
  br label %808

824:                                              ; preds = %818
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

825:                                              ; preds = %818
  %826 = extractvalue { i64, i1 } %821, 0
  %827 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %828 = insertvalue { ptr, i64 } poison, ptr %827, 0
  %829 = insertvalue { ptr, i64 } %828, i64 2049, 1
  %830 = extractvalue { ptr, i64 } %829, 1
  %831 = icmp ult i64 %826, %830
  br i1 %831, label %844, label %845

832:                                              ; preds = %844
  %833 = extractvalue { ptr, i64 } %829, 0
  %834 = getelementptr inbounds i32, ptr %833, i64 %826
  %835 = load i32, ptr %834, align 4
  store i32 %835, ptr %10, align 4
  %836 = load i32, ptr %10, align 4
  %837 = zext i32 %836 to i64
  %838 = load i64, ptr %45, align 8
  %839 = getelementptr inbounds [2048 x i32], ptr %46, i64 0, i64 0
  %840 = insertvalue { ptr, i64 } poison, ptr %839, 0
  %841 = insertvalue { ptr, i64 } %840, i64 2048, 1
  %842 = extractvalue { ptr, i64 } %841, 1
  %843 = icmp ult i64 %838, %842
  br i1 %843, label %854, label %855

844:                                              ; preds = %825
  br label %832

845:                                              ; preds = %825
  call fastcc void @builtin.panicOutOfBounds(i64 %826, i64 %830)
  unreachable

846:                                              ; preds = %854
  %847 = extractvalue { ptr, i64 } %841, 0
  %848 = getelementptr inbounds i32, ptr %847, i64 %838
  %849 = load i32, ptr %848, align 4
  store i32 %849, ptr %9, align 4
  %850 = load i32, ptr %9, align 4
  %851 = zext i32 %850 to i64
  %852 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %837, i64 %851)
  %853 = extractvalue { i64, i1 } %852, 1
  br i1 %853, label %856, label %857

854:                                              ; preds = %832
  br label %846

855:                                              ; preds = %832
  call fastcc void @builtin.panicOutOfBounds(i64 %838, i64 %842)
  unreachable

856:                                              ; preds = %846
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

857:                                              ; preds = %846
  %858 = extractvalue { i64, i1 } %852, 0
  %859 = load i64, ptr %11, align 8
  %860 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %858, i64 %859)
  %861 = extractvalue { i64, i1 } %860, 1
  br i1 %861, label %862, label %863

862:                                              ; preds = %857
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

863:                                              ; preds = %857
  %864 = extractvalue { i64, i1 } %860, 0
  %865 = load i64, ptr %45, align 8
  %866 = load i64, ptr %31, align 8
  %867 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %865, i64 %866)
  %868 = extractvalue { i64, i1 } %867, 1
  br i1 %868, label %869, label %870

869:                                              ; preds = %863
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

870:                                              ; preds = %863
  %871 = extractvalue { i64, i1 } %867, 0
  %872 = trunc i64 %864 to i32
  %873 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %874 = insertvalue { ptr, i64 } poison, ptr %873, 0
  %875 = insertvalue { ptr, i64 } %874, i64 2049, 1
  store { ptr, i64 } %875, ptr %8, align 8
  %876 = load { ptr, i64 }, ptr %8, align 8
  %877 = extractvalue { ptr, i64 } %876, 1
  %878 = icmp ult i64 %871, %877
  br i1 %878, label %886, label %887

879:                                              ; preds = %886
  %880 = extractvalue { ptr, i64 } %876, 0
  %881 = getelementptr inbounds i32, ptr %880, i64 %871
  store i32 %872, ptr %881, align 4
  %882 = lshr i64 %864, 32
  store i64 %882, ptr %11, align 8
  %883 = load i64, ptr %45, align 8
  %884 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %883, i64 1)
  %885 = extractvalue { i64, i1 } %884, 1
  br i1 %885, label %888, label %889

886:                                              ; preds = %870
  br label %879

887:                                              ; preds = %870
  call fastcc void @builtin.panicOutOfBounds(i64 %871, i64 %877)
  unreachable

888:                                              ; preds = %879
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

889:                                              ; preds = %879
  %890 = extractvalue { i64, i1 } %884, 0
  store i64 %890, ptr %45, align 8
  br label %817

891:                                              ; preds = %808
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

892:                                              ; preds = %808
  %893 = extractvalue { i64, i1 } %811, 0
  %894 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %893, i64 1)
  %895 = extractvalue { i64, i1 } %894, 1
  br i1 %895, label %896, label %897

896:                                              ; preds = %892
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

897:                                              ; preds = %892
  %898 = extractvalue { i64, i1 } %894, 0
  %899 = load i64, ptr %31, align 8
  %900 = load i64, ptr %50, align 8
  %901 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %899, i64 %900)
  %902 = extractvalue { i64, i1 } %901, 1
  br i1 %902, label %903, label %904

903:                                              ; preds = %897
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

904:                                              ; preds = %897
  %905 = extractvalue { i64, i1 } %901, 0
  %906 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %905, i64 1)
  %907 = extractvalue { i64, i1 } %906, 1
  br i1 %907, label %908, label %909

908:                                              ; preds = %904
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

909:                                              ; preds = %904
  %910 = extractvalue { i64, i1 } %906, 0
  %911 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %912 = insertvalue { ptr, i64 } poison, ptr %911, 0
  %913 = insertvalue { ptr, i64 } %912, i64 2049, 1
  %914 = extractvalue { ptr, i64 } %913, 1
  %915 = icmp ult i64 %910, %914
  br i1 %915, label %925, label %926

916:                                              ; preds = %925
  %917 = extractvalue { ptr, i64 } %913, 0
  %918 = getelementptr inbounds i32, ptr %917, i64 %910
  %919 = load i32, ptr %918, align 4
  store i32 %919, ptr %7, align 4
  %920 = load i32, ptr %7, align 4
  %921 = load i64, ptr %11, align 8
  %922 = zext i32 %920 to i64
  %923 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %922, i64 %921)
  %924 = extractvalue { i64, i1 } %923, 1
  br i1 %924, label %927, label %928

925:                                              ; preds = %909
  br label %916

926:                                              ; preds = %909
  call fastcc void @builtin.panicOutOfBounds(i64 %910, i64 %914)
  unreachable

927:                                              ; preds = %916
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

928:                                              ; preds = %916
  %929 = extractvalue { i64, i1 } %923, 0
  %930 = trunc i64 %929 to i32
  %931 = getelementptr inbounds [2049 x i32], ptr %39, i64 0, i64 0
  %932 = insertvalue { ptr, i64 } poison, ptr %931, 0
  %933 = insertvalue { ptr, i64 } %932, i64 2049, 1
  store { ptr, i64 } %933, ptr %6, align 8
  %934 = load { ptr, i64 }, ptr %6, align 8
  %935 = extractvalue { ptr, i64 } %934, 1
  %936 = icmp ult i64 %898, %935
  br i1 %936, label %940, label %941

937:                                              ; preds = %940
  %938 = extractvalue { ptr, i64 } %934, 0
  %939 = getelementptr inbounds i32, ptr %938, i64 %898
  store i32 %930, ptr %939, align 4
  br label %773

940:                                              ; preds = %928
  br label %937

941:                                              ; preds = %928
  call fastcc void @builtin.panicOutOfBounds(i64 %898, i64 %935)
  unreachable

942:                                              ; preds = %947
  %943 = load i64, ptr %31, align 8
  %944 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %943, i64 1)
  %945 = extractvalue { i64, i1 } %944, 1
  br i1 %945, label %948, label %949

946:                                              ; preds = %773
  br label %409

947:                                              ; preds = %773
  br label %942

948:                                              ; preds = %942
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

949:                                              ; preds = %942
  %950 = extractvalue { i64, i1 } %944, 0
  store i64 %950, ptr %31, align 8
  br label %410

951:                                              ; preds = %86
  br label %85

952:                                              ; preds = %86
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.shl__anon_3864(i32 %0, i6 %1) unnamed_addr #0 {
  %3 = call fastcc i6 @math.absCast__anon_6128(i6 %1)
  %4 = icmp uge i6 %3, -32
  br i1 %4, label %8, label %9

5:                                                ; preds = %9
  %6 = sub i6 31, %3
  %7 = icmp ule i6 %6, 31
  br i1 %7, label %14, label %15

8:                                                ; preds = %2
  ret i32 0

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %14
  %11 = trunc i6 %3 to i5
  %12 = zext i5 %11 to i32
  %13 = shl i32 %0, %12
  ret i32 %13

14:                                               ; preds = %5
  br label %10

15:                                               ; preds = %5
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @170)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @math.shr__anon_3865(i32 %0, i6 %1) unnamed_addr #0 {
  %3 = call fastcc i6 @math.absCast__anon_6128(i6 %1)
  %4 = icmp uge i6 %3, -32
  br i1 %4, label %8, label %9

5:                                                ; preds = %9
  %6 = sub i6 31, %3
  %7 = icmp ule i6 %6, 31
  br i1 %7, label %14, label %15

8:                                                ; preds = %2
  ret i32 0

9:                                                ; preds = %2
  br label %5

10:                                               ; preds = %14
  %11 = trunc i6 %3 to i5
  %12 = zext i5 %11 to i32
  %13 = lshr i32 %0, %12
  ret i32 %13

14:                                               ; preds = %5
  br label %10

15:                                               ; preds = %5
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @171)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i6 @math.absCast__anon_6128(i6 %0) unnamed_addr #0 {
  ret i6 %0
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__umodei4(ptr nonnull align 4 %0, ptr nonnull readonly align 4 %1, ptr nonnull readonly align 4 %2, i64 %3) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i32, align 4
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca { ptr, i64 }, align 8
  %12 = alloca i32, align 4
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  %17 = alloca { ptr, i64 }, align 8
  %18 = alloca i32, align 4
  %19 = alloca { ptr, i64 }, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i64, align 8
  %28 = alloca i32, align 4
  %29 = alloca i64, align 8
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i64, align 8
  %33 = alloca { ptr, i64 }, align 8
  %34 = alloca i32, align 4
  %35 = alloca { ptr, i64 }, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca { ptr, i64 }, align 8
  %39 = alloca i32, align 4
  %40 = alloca [2049 x i32], align 4
  %41 = alloca { ptr, i64 }, align 8
  %42 = alloca i32, align 4
  %43 = alloca { ptr, i64 }, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i64, align 8
  %47 = alloca [2048 x i32], align 4
  %48 = alloca i32, align 4
  %49 = alloca { ptr, i64 }, align 8
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca { ptr, i64 }, align 8
  %55 = alloca { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, align 8
  %56 = alloca ptr, align 8
  %57 = alloca { ptr, i64 }, align 8
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  store ptr %1, ptr %59, align 8
  %60 = udiv i64 %3, 32
  %61 = load ptr, ptr %59, align 8
  %62 = getelementptr inbounds i32, ptr %61, i64 0
  %63 = insertvalue { ptr, i64 } poison, ptr %62, 0
  %64 = insertvalue { ptr, i64 } %63, i64 %60, 1
  store ptr %2, ptr %58, align 8
  %65 = udiv i64 %3, 32
  %66 = load ptr, ptr %58, align 8
  %67 = getelementptr inbounds i32, ptr %66, i64 0
  %68 = insertvalue { ptr, i64 } poison, ptr %67, 0
  %69 = insertvalue { ptr, i64 } %68, i64 %65, 1
  store ptr %0, ptr %56, align 8
  %70 = udiv i64 %3, 32
  %71 = load ptr, ptr %56, align 8
  %72 = getelementptr inbounds i32, ptr %71, i64 0
  %73 = insertvalue { ptr, i64 } poison, ptr %72, 0
  %74 = insertvalue { ptr, i64 } %73, i64 %70, 1
  store { ptr, i64 } %74, ptr %57, align 8
  %75 = load { ptr, i64 }, ptr %57, align 8
  %76 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 0
  store { ptr, i64 } %75, ptr %76, align 8
  %77 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 1
  store { ptr, i64 } %64, ptr %77, align 8
  %78 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 2
  store { ptr, i64 } %69, ptr %78, align 8
  %79 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 0
  %80 = load { ptr, i64 }, ptr %79, align 8
  %81 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 1
  %82 = load { ptr, i64 }, ptr %81, align 8
  %83 = getelementptr inbounds { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }, ptr %55, i32 0, i32 2
  %84 = load { ptr, i64 }, ptr %83, align 8
  %85 = extractvalue { ptr, i64 } %80, 0
  %86 = icmp ne ptr %85, null
  br i1 %86, label %94, label %100

87:                                               ; preds = %1040
  ret void

88:                                               ; preds = %952, %204, %191, %161, %128
  %89 = phi i16 [ 2, %128 ], [ 0, %161 ], [ 2, %191 ], [ 0, %204 ], [ 0, %952 ]
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %1040, label %1041

91:                                               ; preds = %110, %100
  %92 = extractvalue { ptr, i64 } %82, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %124, label %125

94:                                               ; preds = %4
  store { ptr, i64 } %80, ptr %54, align 8
  %95 = load { ptr, i64 }, ptr %54, align 8
  %96 = extractvalue { ptr, i64 } %95, 0
  %97 = getelementptr inbounds i32, ptr %96, i64 0
  %98 = extractvalue { ptr, i64 } %95, 1
  %99 = icmp ule i64 0, %98
  br i1 %99, label %104, label %105

100:                                              ; preds = %4
  br label %91

101:                                              ; preds = %104
  %102 = extractvalue { ptr, i64 } %95, 1
  %103 = icmp ule i64 %98, %102
  br i1 %103, label %108, label %109

104:                                              ; preds = %94
  br label %101

105:                                              ; preds = %94
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %98)
  unreachable

106:                                              ; preds = %108
  %107 = icmp ule i64 0, %98
  br i1 %107, label %116, label %117

108:                                              ; preds = %101
  br label %106

109:                                              ; preds = %101
  call fastcc void @builtin.panicOutOfBounds(i64 %98, i64 %102)
  unreachable

110:                                              ; preds = %116
  %111 = insertvalue { ptr, i64 } poison, ptr %97, 0
  %112 = insertvalue { ptr, i64 } %111, i64 %98, 1
  %113 = extractvalue { ptr, i64 } %112, 0
  %114 = extractvalue { ptr, i64 } %112, 1
  %115 = mul nuw i64 %114, 4
  call void @llvm.memset.p0.i64(ptr align 4 %113, i8 0, i64 %115, i1 false)
  br label %91

116:                                              ; preds = %106
  br label %110

117:                                              ; preds = %106
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %98)
  unreachable

118:                                              ; preds = %129
  %119 = extractvalue { ptr, i64 } %82, 1
  %120 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %119, i64 1)
  %121 = extractvalue { i64, i1 } %120, 1
  br i1 %121, label %130, label %131

122:                                              ; preds = %125, %124
  %123 = phi i1 [ true, %124 ], [ %127, %125 ]
  br i1 %123, label %128, label %129

124:                                              ; preds = %91
  br label %122

125:                                              ; preds = %91
  %126 = extractvalue { ptr, i64 } %84, 1
  %127 = icmp eq i64 %126, 0
  br label %122

128:                                              ; preds = %122
  br label %88

129:                                              ; preds = %122
  br label %118

130:                                              ; preds = %118
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

131:                                              ; preds = %118
  %132 = extractvalue { i64, i1 } %120, 0
  store i64 %132, ptr %53, align 8
  %133 = extractvalue { ptr, i64 } %84, 1
  %134 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %133, i64 1)
  %135 = extractvalue { i64, i1 } %134, 1
  br i1 %135, label %136, label %137

136:                                              ; preds = %131
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

137:                                              ; preds = %131
  %138 = extractvalue { i64, i1 } %134, 0
  store i64 %138, ptr %52, align 8
  br label %140

139:                                              ; preds = %156
  br label %170

140:                                              ; preds = %144, %137
  %141 = load i64, ptr %53, align 8
  %142 = extractvalue { ptr, i64 } %82, 1
  %143 = icmp ult i64 %141, %142
  br i1 %143, label %151, label %152

144:                                              ; preds = %164
  br label %140

145:                                              ; preds = %151
  %146 = extractvalue { ptr, i64 } %82, 0
  %147 = getelementptr inbounds i32, ptr %146, i64 %141
  %148 = load i32, ptr %147, align 4
  store i32 %148, ptr %51, align 4
  %149 = load i32, ptr %51, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %153, label %156

151:                                              ; preds = %140
  br label %145

152:                                              ; preds = %140
  call fastcc void @builtin.panicOutOfBounds(i64 %141, i64 %142)
  unreachable

153:                                              ; preds = %145
  %154 = load i64, ptr %53, align 8
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %161, label %162

156:                                              ; preds = %145
  br label %139

157:                                              ; preds = %162
  %158 = load i64, ptr %53, align 8
  %159 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %158, i64 1)
  %160 = extractvalue { i64, i1 } %159, 1
  br i1 %160, label %163, label %164

161:                                              ; preds = %153
  br label %88

162:                                              ; preds = %153
  br label %157

163:                                              ; preds = %157
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

164:                                              ; preds = %157
  %165 = extractvalue { i64, i1 } %159, 0
  store i64 %165, ptr %53, align 8
  br label %144

166:                                              ; preds = %186
  %167 = load i64, ptr %52, align 8
  %168 = load i64, ptr %53, align 8
  %169 = icmp ugt i64 %167, %168
  br i1 %169, label %200, label %203

170:                                              ; preds = %174, %139
  %171 = load i64, ptr %52, align 8
  %172 = extractvalue { ptr, i64 } %84, 1
  %173 = icmp ult i64 %171, %172
  br i1 %173, label %181, label %182

174:                                              ; preds = %194
  br label %170

175:                                              ; preds = %181
  %176 = extractvalue { ptr, i64 } %84, 0
  %177 = getelementptr inbounds i32, ptr %176, i64 %171
  %178 = load i32, ptr %177, align 4
  store i32 %178, ptr %50, align 4
  %179 = load i32, ptr %50, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %183, label %186

181:                                              ; preds = %170
  br label %175

182:                                              ; preds = %170
  call fastcc void @builtin.panicOutOfBounds(i64 %171, i64 %172)
  unreachable

183:                                              ; preds = %175
  %184 = load i64, ptr %52, align 8
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %191, label %192

186:                                              ; preds = %175
  br label %166

187:                                              ; preds = %192
  %188 = load i64, ptr %52, align 8
  %189 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %188, i64 1)
  %190 = extractvalue { i64, i1 } %189, 1
  br i1 %190, label %193, label %194

191:                                              ; preds = %183
  br label %88

192:                                              ; preds = %183
  br label %187

193:                                              ; preds = %187
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

194:                                              ; preds = %187
  %195 = extractvalue { i64, i1 } %189, 0
  store i64 %195, ptr %52, align 8
  br label %174

196:                                              ; preds = %203
  %197 = load i64, ptr %52, align 8
  %198 = extractvalue { ptr, i64 } %84, 1
  %199 = icmp ult i64 %197, %198
  br i1 %199, label %253, label %254

200:                                              ; preds = %166
  %201 = extractvalue { ptr, i64 } %80, 0
  %202 = icmp ne ptr %201, null
  br i1 %202, label %205, label %211

203:                                              ; preds = %166
  br label %196

204:                                              ; preds = %239, %211
  br label %88

205:                                              ; preds = %200
  store { ptr, i64 } %80, ptr %49, align 8
  %206 = extractvalue { ptr, i64 } %82, 1
  %207 = load { ptr, i64 }, ptr %49, align 8
  %208 = extractvalue { ptr, i64 } %207, 0
  %209 = getelementptr inbounds i32, ptr %208, i64 0
  %210 = icmp ule i64 0, %206
  br i1 %210, label %215, label %216

211:                                              ; preds = %200
  br label %204

212:                                              ; preds = %215
  %213 = extractvalue { ptr, i64 } %207, 1
  %214 = icmp ule i64 %206, %213
  br i1 %214, label %219, label %220

215:                                              ; preds = %205
  br label %212

216:                                              ; preds = %205
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %206)
  unreachable

217:                                              ; preds = %219
  %218 = icmp ule i64 0, %206
  br i1 %218, label %227, label %228

219:                                              ; preds = %212
  br label %217

220:                                              ; preds = %212
  call fastcc void @builtin.panicOutOfBounds(i64 %206, i64 %213)
  unreachable

221:                                              ; preds = %227
  %222 = insertvalue { ptr, i64 } poison, ptr %209, 0
  %223 = insertvalue { ptr, i64 } %222, i64 %206, 1
  %224 = extractvalue { ptr, i64 } %223, 1
  %225 = extractvalue { ptr, i64 } %82, 1
  %226 = icmp eq i64 %224, %225
  br i1 %226, label %237, label %238

227:                                              ; preds = %217
  br label %221

228:                                              ; preds = %217
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %206)
  unreachable

229:                                              ; preds = %237
  %230 = extractvalue { ptr, i64 } %82, 0
  %231 = extractvalue { ptr, i64 } %223, 0
  %232 = getelementptr inbounds i32, ptr %230, i64 %224
  %233 = getelementptr inbounds i32, ptr %231, i64 %224
  %234 = icmp uge ptr %231, %232
  %235 = icmp uge ptr %230, %233
  %236 = or i1 %234, %235
  br i1 %236, label %243, label %244

237:                                              ; preds = %221
  br label %229

238:                                              ; preds = %221
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_len_mismatch__anon_3866, i64 40, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

239:                                              ; preds = %243
  %240 = extractvalue { ptr, i64 } %223, 1
  %241 = mul nuw i64 %240, 4
  %242 = extractvalue { ptr, i64 } %223, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %242, ptr align 4 %230, i64 %241, i1 false)
  br label %204

243:                                              ; preds = %229
  br label %239

244:                                              ; preds = %229
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

245:                                              ; preds = %253
  %246 = extractvalue { ptr, i64 } %84, 0
  %247 = getelementptr inbounds i32, ptr %246, i64 %197
  %248 = load i32, ptr %247, align 4
  store i32 %248, ptr %48, align 4
  %249 = load i32, ptr %48, align 4
  %250 = call i32 @llvm.ctlz.i32(i32 %249, i1 false)
  %251 = trunc i32 %250 to i6
  call void @llvm.memset.p0.i64(ptr align 4 %47, i8 -86, i64 8192, i1 false)
  %252 = load i64, ptr %52, align 8
  store i64 %252, ptr %46, align 8
  br label %258

253:                                              ; preds = %196
  br label %245

254:                                              ; preds = %196
  call fastcc void @builtin.panicOutOfBounds(i64 %197, i64 %198)
  unreachable

255:                                              ; preds = %267
  %256 = extractvalue { ptr, i64 } %84, 1
  %257 = icmp ult i64 0, %256
  br i1 %257, label %327, label %328

258:                                              ; preds = %261, %245
  %259 = load i64, ptr %46, align 8
  %260 = icmp ugt i64 %259, 0
  br i1 %260, label %262, label %267

261:                                              ; preds = %313
  br label %258

262:                                              ; preds = %258
  %263 = load i64, ptr %46, align 8
  %264 = load i64, ptr %46, align 8
  %265 = extractvalue { ptr, i64 } %84, 1
  %266 = icmp ult i64 %264, %265
  br i1 %266, label %277, label %278

267:                                              ; preds = %258
  br label %255

268:                                              ; preds = %277
  %269 = extractvalue { ptr, i64 } %84, 0
  %270 = getelementptr inbounds i32, ptr %269, i64 %264
  %271 = load i32, ptr %270, align 4
  store i32 %271, ptr %45, align 4
  %272 = load i32, ptr %45, align 4
  %273 = call fastcc i32 @math.shl__anon_3864(i32 %272, i6 %251)
  %274 = load i64, ptr %46, align 8
  %275 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %274, i64 1)
  %276 = extractvalue { i64, i1 } %275, 1
  br i1 %276, label %279, label %280

277:                                              ; preds = %262
  br label %268

278:                                              ; preds = %262
  call fastcc void @builtin.panicOutOfBounds(i64 %264, i64 %265)
  unreachable

279:                                              ; preds = %268
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

280:                                              ; preds = %268
  %281 = extractvalue { i64, i1 } %275, 0
  %282 = extractvalue { ptr, i64 } %84, 1
  %283 = icmp ult i64 %281, %282
  br i1 %283, label %291, label %292

284:                                              ; preds = %291
  %285 = extractvalue { ptr, i64 } %84, 0
  %286 = getelementptr inbounds i32, ptr %285, i64 %281
  %287 = load i32, ptr %286, align 4
  store i32 %287, ptr %44, align 4
  %288 = load i32, ptr %44, align 4
  %289 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %251)
  %290 = extractvalue { i6, i1 } %289, 1
  br i1 %290, label %293, label %294

291:                                              ; preds = %280
  br label %284

292:                                              ; preds = %280
  call fastcc void @builtin.panicOutOfBounds(i64 %281, i64 %282)
  unreachable

293:                                              ; preds = %284
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

294:                                              ; preds = %284
  %295 = extractvalue { i6, i1 } %289, 0
  %296 = call fastcc i32 @math.shr__anon_3865(i32 %288, i6 %295)
  %297 = or i32 %273, %296
  %298 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %299 = insertvalue { ptr, i64 } poison, ptr %298, 0
  %300 = insertvalue { ptr, i64 } %299, i64 2048, 1
  store { ptr, i64 } %300, ptr %43, align 8
  %301 = load { ptr, i64 }, ptr %43, align 8
  %302 = extractvalue { ptr, i64 } %301, 1
  %303 = icmp ult i64 %263, %302
  br i1 %303, label %310, label %311

304:                                              ; preds = %310
  %305 = extractvalue { ptr, i64 } %301, 0
  %306 = getelementptr inbounds i32, ptr %305, i64 %263
  store i32 %297, ptr %306, align 4
  %307 = load i64, ptr %46, align 8
  %308 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %307, i64 1)
  %309 = extractvalue { i64, i1 } %308, 1
  br i1 %309, label %312, label %313

310:                                              ; preds = %294
  br label %304

311:                                              ; preds = %294
  call fastcc void @builtin.panicOutOfBounds(i64 %263, i64 %302)
  unreachable

312:                                              ; preds = %304
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

313:                                              ; preds = %304
  %314 = extractvalue { i64, i1 } %308, 0
  store i64 %314, ptr %46, align 8
  br label %261

315:                                              ; preds = %327
  %316 = extractvalue { ptr, i64 } %84, 0
  %317 = getelementptr inbounds i32, ptr %316, i64 0
  %318 = load i32, ptr %317, align 4
  store i32 %318, ptr %42, align 4
  %319 = load i32, ptr %42, align 4
  %320 = call fastcc i32 @math.shl__anon_3864(i32 %319, i6 %251)
  %321 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %322 = insertvalue { ptr, i64 } poison, ptr %321, 0
  %323 = insertvalue { ptr, i64 } %322, i64 2048, 1
  store { ptr, i64 } %323, ptr %41, align 8
  %324 = load { ptr, i64 }, ptr %41, align 8
  %325 = extractvalue { ptr, i64 } %324, 1
  %326 = icmp ult i64 0, %325
  br i1 %326, label %335, label %336

327:                                              ; preds = %255
  br label %315

328:                                              ; preds = %255
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %256)
  unreachable

329:                                              ; preds = %335
  %330 = extractvalue { ptr, i64 } %324, 0
  %331 = getelementptr inbounds i32, ptr %330, i64 0
  store i32 %320, ptr %331, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %40, i8 -86, i64 8196, i1 false)
  %332 = load i64, ptr %53, align 8
  %333 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %332, i64 1)
  %334 = extractvalue { i64, i1 } %333, 1
  br i1 %334, label %337, label %338

335:                                              ; preds = %315
  br label %329

336:                                              ; preds = %315
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %325)
  unreachable

337:                                              ; preds = %329
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

338:                                              ; preds = %329
  %339 = extractvalue { i64, i1 } %333, 0
  %340 = load i64, ptr %53, align 8
  %341 = extractvalue { ptr, i64 } %82, 1
  %342 = icmp ult i64 %340, %341
  br i1 %342, label %350, label %351

343:                                              ; preds = %350
  %344 = extractvalue { ptr, i64 } %82, 0
  %345 = getelementptr inbounds i32, ptr %344, i64 %340
  %346 = load i32, ptr %345, align 4
  store i32 %346, ptr %39, align 4
  %347 = load i32, ptr %39, align 4
  %348 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %251)
  %349 = extractvalue { i6, i1 } %348, 1
  br i1 %349, label %352, label %353

350:                                              ; preds = %338
  br label %343

351:                                              ; preds = %338
  call fastcc void @builtin.panicOutOfBounds(i64 %340, i64 %341)
  unreachable

352:                                              ; preds = %343
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

353:                                              ; preds = %343
  %354 = extractvalue { i6, i1 } %348, 0
  %355 = call fastcc i32 @math.shr__anon_3865(i32 %347, i6 %354)
  %356 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %357 = insertvalue { ptr, i64 } poison, ptr %356, 0
  %358 = insertvalue { ptr, i64 } %357, i64 2049, 1
  store { ptr, i64 } %358, ptr %38, align 8
  %359 = load { ptr, i64 }, ptr %38, align 8
  %360 = extractvalue { ptr, i64 } %359, 1
  %361 = icmp ult i64 %339, %360
  br i1 %361, label %366, label %367

362:                                              ; preds = %366
  %363 = extractvalue { ptr, i64 } %359, 0
  %364 = getelementptr inbounds i32, ptr %363, i64 %339
  store i32 %355, ptr %364, align 4
  %365 = load i64, ptr %53, align 8
  store i64 %365, ptr %46, align 8
  br label %371

366:                                              ; preds = %353
  br label %362

367:                                              ; preds = %353
  call fastcc void @builtin.panicOutOfBounds(i64 %339, i64 %360)
  unreachable

368:                                              ; preds = %380
  %369 = extractvalue { ptr, i64 } %82, 1
  %370 = icmp ult i64 0, %369
  br i1 %370, label %440, label %441

371:                                              ; preds = %374, %362
  %372 = load i64, ptr %46, align 8
  %373 = icmp ugt i64 %372, 0
  br i1 %373, label %375, label %380

374:                                              ; preds = %426
  br label %371

375:                                              ; preds = %371
  %376 = load i64, ptr %46, align 8
  %377 = load i64, ptr %46, align 8
  %378 = extractvalue { ptr, i64 } %82, 1
  %379 = icmp ult i64 %377, %378
  br i1 %379, label %390, label %391

380:                                              ; preds = %371
  br label %368

381:                                              ; preds = %390
  %382 = extractvalue { ptr, i64 } %82, 0
  %383 = getelementptr inbounds i32, ptr %382, i64 %377
  %384 = load i32, ptr %383, align 4
  store i32 %384, ptr %37, align 4
  %385 = load i32, ptr %37, align 4
  %386 = call fastcc i32 @math.shl__anon_3864(i32 %385, i6 %251)
  %387 = load i64, ptr %46, align 8
  %388 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %387, i64 1)
  %389 = extractvalue { i64, i1 } %388, 1
  br i1 %389, label %392, label %393

390:                                              ; preds = %375
  br label %381

391:                                              ; preds = %375
  call fastcc void @builtin.panicOutOfBounds(i64 %377, i64 %378)
  unreachable

392:                                              ; preds = %381
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

393:                                              ; preds = %381
  %394 = extractvalue { i64, i1 } %388, 0
  %395 = extractvalue { ptr, i64 } %82, 1
  %396 = icmp ult i64 %394, %395
  br i1 %396, label %404, label %405

397:                                              ; preds = %404
  %398 = extractvalue { ptr, i64 } %82, 0
  %399 = getelementptr inbounds i32, ptr %398, i64 %394
  %400 = load i32, ptr %399, align 4
  store i32 %400, ptr %36, align 4
  %401 = load i32, ptr %36, align 4
  %402 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %251)
  %403 = extractvalue { i6, i1 } %402, 1
  br i1 %403, label %406, label %407

404:                                              ; preds = %393
  br label %397

405:                                              ; preds = %393
  call fastcc void @builtin.panicOutOfBounds(i64 %394, i64 %395)
  unreachable

406:                                              ; preds = %397
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

407:                                              ; preds = %397
  %408 = extractvalue { i6, i1 } %402, 0
  %409 = call fastcc i32 @math.shr__anon_3865(i32 %401, i6 %408)
  %410 = or i32 %386, %409
  %411 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %412 = insertvalue { ptr, i64 } poison, ptr %411, 0
  %413 = insertvalue { ptr, i64 } %412, i64 2049, 1
  store { ptr, i64 } %413, ptr %35, align 8
  %414 = load { ptr, i64 }, ptr %35, align 8
  %415 = extractvalue { ptr, i64 } %414, 1
  %416 = icmp ult i64 %376, %415
  br i1 %416, label %423, label %424

417:                                              ; preds = %423
  %418 = extractvalue { ptr, i64 } %414, 0
  %419 = getelementptr inbounds i32, ptr %418, i64 %376
  store i32 %410, ptr %419, align 4
  %420 = load i64, ptr %46, align 8
  %421 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %420, i64 1)
  %422 = extractvalue { i64, i1 } %421, 1
  br i1 %422, label %425, label %426

423:                                              ; preds = %407
  br label %417

424:                                              ; preds = %407
  call fastcc void @builtin.panicOutOfBounds(i64 %376, i64 %415)
  unreachable

425:                                              ; preds = %417
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

426:                                              ; preds = %417
  %427 = extractvalue { i64, i1 } %421, 0
  store i64 %427, ptr %46, align 8
  br label %374

428:                                              ; preds = %440
  %429 = extractvalue { ptr, i64 } %82, 0
  %430 = getelementptr inbounds i32, ptr %429, i64 0
  %431 = load i32, ptr %430, align 4
  store i32 %431, ptr %34, align 4
  %432 = load i32, ptr %34, align 4
  %433 = call fastcc i32 @math.shl__anon_3864(i32 %432, i6 %251)
  %434 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %435 = insertvalue { ptr, i64 } poison, ptr %434, 0
  %436 = insertvalue { ptr, i64 } %435, i64 2049, 1
  store { ptr, i64 } %436, ptr %33, align 8
  %437 = load { ptr, i64 }, ptr %33, align 8
  %438 = extractvalue { ptr, i64 } %437, 1
  %439 = icmp ult i64 0, %438
  br i1 %439, label %449, label %450

440:                                              ; preds = %368
  br label %428

441:                                              ; preds = %368
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %369)
  unreachable

442:                                              ; preds = %449
  %443 = extractvalue { ptr, i64 } %437, 0
  %444 = getelementptr inbounds i32, ptr %443, i64 0
  store i32 %433, ptr %444, align 4
  %445 = load i64, ptr %53, align 8
  %446 = load i64, ptr %52, align 8
  %447 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %445, i64 %446)
  %448 = extractvalue { i64, i1 } %447, 1
  br i1 %448, label %451, label %452

449:                                              ; preds = %428
  br label %442

450:                                              ; preds = %428
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %438)
  unreachable

451:                                              ; preds = %442
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

452:                                              ; preds = %442
  %453 = extractvalue { i64, i1 } %447, 0
  store i64 %453, ptr %32, align 8
  br label %457

454:                                              ; preds = %947
  %455 = extractvalue { ptr, i64 } %80, 0
  %456 = icmp ne ptr %455, null
  br i1 %456, label %953, label %954

457:                                              ; preds = %950, %452
  %458 = load i64, ptr %32, align 8
  %459 = load i64, ptr %52, align 8
  %460 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %458, i64 %459)
  %461 = extractvalue { i64, i1 } %460, 1
  br i1 %461, label %462, label %463

462:                                              ; preds = %457
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

463:                                              ; preds = %457
  %464 = extractvalue { i64, i1 } %460, 0
  %465 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %464, i64 1)
  %466 = extractvalue { i64, i1 } %465, 1
  br i1 %466, label %467, label %468

467:                                              ; preds = %463
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

468:                                              ; preds = %463
  %469 = extractvalue { i64, i1 } %465, 0
  %470 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %471 = insertvalue { ptr, i64 } poison, ptr %470, 0
  %472 = insertvalue { ptr, i64 } %471, i64 2049, 1
  %473 = extractvalue { ptr, i64 } %472, 1
  %474 = icmp ult i64 %469, %473
  br i1 %474, label %486, label %487

475:                                              ; preds = %486
  %476 = extractvalue { ptr, i64 } %472, 0
  %477 = getelementptr inbounds i32, ptr %476, i64 %469
  %478 = load i32, ptr %477, align 4
  store i32 %478, ptr %31, align 4
  %479 = load i32, ptr %31, align 4
  %480 = zext i32 %479 to i64
  %481 = shl i64 %480, 32
  %482 = load i64, ptr %32, align 8
  %483 = load i64, ptr %52, align 8
  %484 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %482, i64 %483)
  %485 = extractvalue { i64, i1 } %484, 1
  br i1 %485, label %488, label %489

486:                                              ; preds = %468
  br label %475

487:                                              ; preds = %468
  call fastcc void @builtin.panicOutOfBounds(i64 %469, i64 %473)
  unreachable

488:                                              ; preds = %475
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

489:                                              ; preds = %475
  %490 = extractvalue { i64, i1 } %484, 0
  %491 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %492 = insertvalue { ptr, i64 } poison, ptr %491, 0
  %493 = insertvalue { ptr, i64 } %492, i64 2049, 1
  %494 = extractvalue { ptr, i64 } %493, 1
  %495 = icmp ult i64 %490, %494
  br i1 %495, label %504, label %505

496:                                              ; preds = %504
  %497 = extractvalue { ptr, i64 } %493, 0
  %498 = getelementptr inbounds i32, ptr %497, i64 %490
  %499 = load i32, ptr %498, align 4
  store i32 %499, ptr %30, align 4
  %500 = load i32, ptr %30, align 4
  %501 = zext i32 %500 to i64
  %502 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %481, i64 %501)
  %503 = extractvalue { i64, i1 } %502, 1
  br i1 %503, label %506, label %507

504:                                              ; preds = %489
  br label %496

505:                                              ; preds = %489
  call fastcc void @builtin.panicOutOfBounds(i64 %490, i64 %494)
  unreachable

506:                                              ; preds = %496
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

507:                                              ; preds = %496
  %508 = extractvalue { i64, i1 } %502, 0
  %509 = load i64, ptr %52, align 8
  %510 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %511 = insertvalue { ptr, i64 } poison, ptr %510, 0
  %512 = insertvalue { ptr, i64 } %511, i64 2048, 1
  %513 = extractvalue { ptr, i64 } %512, 1
  %514 = icmp ult i64 %509, %513
  br i1 %514, label %522, label %523

515:                                              ; preds = %522
  %516 = extractvalue { ptr, i64 } %512, 0
  %517 = getelementptr inbounds i32, ptr %516, i64 %509
  %518 = load i32, ptr %517, align 4
  store i32 %518, ptr %28, align 4
  %519 = load i32, ptr %28, align 4
  %520 = zext i32 %519 to i64
  %521 = icmp ne i64 %520, 0
  br i1 %521, label %532, label %533

522:                                              ; preds = %507
  br label %515

523:                                              ; preds = %507
  call fastcc void @builtin.panicOutOfBounds(i64 %509, i64 %513)
  unreachable

524:                                              ; preds = %532
  %525 = udiv i64 %508, %520
  store i64 %525, ptr %29, align 8
  %526 = load i64, ptr %52, align 8
  %527 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %528 = insertvalue { ptr, i64 } poison, ptr %527, 0
  %529 = insertvalue { ptr, i64 } %528, i64 2048, 1
  %530 = extractvalue { ptr, i64 } %529, 1
  %531 = icmp ult i64 %526, %530
  br i1 %531, label %541, label %542

532:                                              ; preds = %515
  br label %524

533:                                              ; preds = %515
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

534:                                              ; preds = %541
  %535 = extractvalue { ptr, i64 } %529, 0
  %536 = getelementptr inbounds i32, ptr %535, i64 %526
  %537 = load i32, ptr %536, align 4
  store i32 %537, ptr %26, align 4
  %538 = load i32, ptr %26, align 4
  %539 = zext i32 %538 to i64
  %540 = icmp ne i64 %539, 0
  br i1 %540, label %545, label %546

541:                                              ; preds = %524
  br label %534

542:                                              ; preds = %524
  call fastcc void @builtin.panicOutOfBounds(i64 %526, i64 %530)
  unreachable

543:                                              ; preds = %545
  %544 = urem i64 %508, %539
  store i64 %544, ptr %27, align 8
  br label %548

545:                                              ; preds = %534
  br label %543

546:                                              ; preds = %534
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.divide_by_zero__anon_3531, i64 16, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

547:                                              ; preds = %552
  store i64 0, ptr %22, align 8
  store i64 0, ptr %46, align 8
  br label %659

548:                                              ; preds = %551, %543
  %549 = load i64, ptr %29, align 8
  %550 = icmp uge i64 %549, 4294967296
  br i1 %550, label %555, label %556

551:                                              ; preds = %652
  br label %548

552:                                              ; preds = %651, %625
  br label %547

553:                                              ; preds = %559, %555
  %554 = phi i1 [ true, %555 ], [ %560, %559 ]
  br i1 %554, label %621, label %625

555:                                              ; preds = %548
  br label %553

556:                                              ; preds = %548
  %557 = load i64, ptr %52, align 8
  %558 = icmp ugt i64 %557, 0
  br i1 %558, label %561, label %566

559:                                              ; preds = %618, %566
  %560 = phi i1 [ %620, %618 ], [ false, %566 ]
  br label %553

561:                                              ; preds = %556
  %562 = load i64, ptr %29, align 8
  %563 = load i64, ptr %52, align 8
  %564 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %563, i64 1)
  %565 = extractvalue { i64, i1 } %564, 1
  br i1 %565, label %567, label %568

566:                                              ; preds = %556
  br label %559

567:                                              ; preds = %561
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

568:                                              ; preds = %561
  %569 = extractvalue { i64, i1 } %564, 0
  %570 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %571 = insertvalue { ptr, i64 } poison, ptr %570, 0
  %572 = insertvalue { ptr, i64 } %571, i64 2048, 1
  %573 = extractvalue { ptr, i64 } %572, 1
  %574 = icmp ult i64 %569, %573
  br i1 %574, label %583, label %584

575:                                              ; preds = %583
  %576 = extractvalue { ptr, i64 } %572, 0
  %577 = getelementptr inbounds i32, ptr %576, i64 %569
  %578 = load i32, ptr %577, align 4
  store i32 %578, ptr %25, align 4
  %579 = load i32, ptr %25, align 4
  %580 = zext i32 %579 to i64
  %581 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %562, i64 %580)
  %582 = extractvalue { i64, i1 } %581, 1
  br i1 %582, label %585, label %586

583:                                              ; preds = %568
  br label %575

584:                                              ; preds = %568
  call fastcc void @builtin.panicOutOfBounds(i64 %569, i64 %573)
  unreachable

585:                                              ; preds = %575
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

586:                                              ; preds = %575
  %587 = extractvalue { i64, i1 } %581, 0
  %588 = load i64, ptr %27, align 8
  %589 = shl i64 %588, 32
  %590 = load i64, ptr %32, align 8
  %591 = load i64, ptr %52, align 8
  %592 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %590, i64 %591)
  %593 = extractvalue { i64, i1 } %592, 1
  br i1 %593, label %594, label %595

594:                                              ; preds = %586
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

595:                                              ; preds = %586
  %596 = extractvalue { i64, i1 } %592, 0
  %597 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %596, i64 1)
  %598 = extractvalue { i64, i1 } %597, 1
  br i1 %598, label %599, label %600

599:                                              ; preds = %595
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

600:                                              ; preds = %595
  %601 = extractvalue { i64, i1 } %597, 0
  %602 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %603 = insertvalue { ptr, i64 } poison, ptr %602, 0
  %604 = insertvalue { ptr, i64 } %603, i64 2049, 1
  %605 = extractvalue { ptr, i64 } %604, 1
  %606 = icmp ult i64 %601, %605
  br i1 %606, label %615, label %616

607:                                              ; preds = %615
  %608 = extractvalue { ptr, i64 } %604, 0
  %609 = getelementptr inbounds i32, ptr %608, i64 %601
  %610 = load i32, ptr %609, align 4
  store i32 %610, ptr %24, align 4
  %611 = load i32, ptr %24, align 4
  %612 = zext i32 %611 to i64
  %613 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %589, i64 %612)
  %614 = extractvalue { i64, i1 } %613, 1
  br i1 %614, label %617, label %618

615:                                              ; preds = %600
  br label %607

616:                                              ; preds = %600
  call fastcc void @builtin.panicOutOfBounds(i64 %601, i64 %605)
  unreachable

617:                                              ; preds = %607
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

618:                                              ; preds = %607
  %619 = extractvalue { i64, i1 } %613, 0
  %620 = icmp ugt i64 %587, %619
  br label %559

621:                                              ; preds = %553
  %622 = load i64, ptr %29, align 8
  %623 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %622, i64 1)
  %624 = extractvalue { i64, i1 } %623, 1
  br i1 %624, label %626, label %627

625:                                              ; preds = %553
  br label %552

626:                                              ; preds = %621
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

627:                                              ; preds = %621
  %628 = extractvalue { i64, i1 } %623, 0
  store i64 %628, ptr %29, align 8
  %629 = load i64, ptr %27, align 8
  %630 = load i64, ptr %52, align 8
  %631 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %632 = insertvalue { ptr, i64 } poison, ptr %631, 0
  %633 = insertvalue { ptr, i64 } %632, i64 2048, 1
  %634 = extractvalue { ptr, i64 } %633, 1
  %635 = icmp ult i64 %630, %634
  br i1 %635, label %644, label %645

636:                                              ; preds = %644
  %637 = extractvalue { ptr, i64 } %633, 0
  %638 = getelementptr inbounds i32, ptr %637, i64 %630
  %639 = load i32, ptr %638, align 4
  store i32 %639, ptr %23, align 4
  %640 = load i32, ptr %23, align 4
  %641 = zext i32 %640 to i64
  %642 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %629, i64 %641)
  %643 = extractvalue { i64, i1 } %642, 1
  br i1 %643, label %646, label %647

644:                                              ; preds = %627
  br label %636

645:                                              ; preds = %627
  call fastcc void @builtin.panicOutOfBounds(i64 %630, i64 %634)
  unreachable

646:                                              ; preds = %636
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

647:                                              ; preds = %636
  %648 = extractvalue { i64, i1 } %642, 0
  store i64 %648, ptr %27, align 8
  %649 = load i64, ptr %27, align 8
  %650 = icmp ult i64 %649, 4294967296
  br i1 %650, label %652, label %653

651:                                              ; preds = %653
  br label %552

652:                                              ; preds = %647
  br label %551

653:                                              ; preds = %647
  br label %651

654:                                              ; preds = %672
  %655 = load i64, ptr %32, align 8
  %656 = load i64, ptr %52, align 8
  %657 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %655, i64 %656)
  %658 = extractvalue { i64, i1 } %657, 1
  br i1 %658, label %756, label %757

659:                                              ; preds = %663, %547
  %660 = load i64, ptr %46, align 8
  %661 = load i64, ptr %52, align 8
  %662 = icmp ule i64 %660, %661
  br i1 %662, label %664, label %672

663:                                              ; preds = %754
  br label %659

664:                                              ; preds = %659
  %665 = load i64, ptr %29, align 8
  %666 = load i64, ptr %46, align 8
  %667 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %668 = insertvalue { ptr, i64 } poison, ptr %667, 0
  %669 = insertvalue { ptr, i64 } %668, i64 2048, 1
  %670 = extractvalue { ptr, i64 } %669, 1
  %671 = icmp ult i64 %666, %670
  br i1 %671, label %681, label %682

672:                                              ; preds = %659
  br label %654

673:                                              ; preds = %681
  %674 = extractvalue { ptr, i64 } %669, 0
  %675 = getelementptr inbounds i32, ptr %674, i64 %666
  %676 = load i32, ptr %675, align 4
  store i32 %676, ptr %21, align 4
  %677 = load i32, ptr %21, align 4
  %678 = zext i32 %677 to i64
  %679 = call fastcc { i64, i1 } @llvm.umul.with.overflow.i64(i64 %665, i64 %678)
  %680 = extractvalue { i64, i1 } %679, 1
  br i1 %680, label %683, label %684

681:                                              ; preds = %664
  br label %673

682:                                              ; preds = %664
  call fastcc void @builtin.panicOutOfBounds(i64 %666, i64 %670)
  unreachable

683:                                              ; preds = %673
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

684:                                              ; preds = %673
  %685 = extractvalue { i64, i1 } %679, 0
  %686 = load i64, ptr %46, align 8
  %687 = load i64, ptr %32, align 8
  %688 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %686, i64 %687)
  %689 = extractvalue { i64, i1 } %688, 1
  br i1 %689, label %690, label %691

690:                                              ; preds = %684
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

691:                                              ; preds = %684
  %692 = extractvalue { i64, i1 } %688, 0
  %693 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %694 = insertvalue { ptr, i64 } poison, ptr %693, 0
  %695 = insertvalue { ptr, i64 } %694, i64 2049, 1
  %696 = extractvalue { ptr, i64 } %695, 1
  %697 = icmp ult i64 %692, %696
  br i1 %697, label %707, label %708

698:                                              ; preds = %707
  %699 = extractvalue { ptr, i64 } %695, 0
  %700 = getelementptr inbounds i32, ptr %699, i64 %692
  %701 = load i32, ptr %700, align 4
  store i32 %701, ptr %20, align 4
  %702 = load i32, ptr %20, align 4
  %703 = load i64, ptr %22, align 8
  %704 = zext i32 %702 to i64
  %705 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %704, i64 %703)
  %706 = extractvalue { i64, i1 } %705, 1
  br i1 %706, label %709, label %710

707:                                              ; preds = %691
  br label %698

708:                                              ; preds = %691
  call fastcc void @builtin.panicOutOfBounds(i64 %692, i64 %696)
  unreachable

709:                                              ; preds = %698
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

710:                                              ; preds = %698
  %711 = extractvalue { i64, i1 } %705, 0
  %712 = trunc i64 %685 to i32
  %713 = zext i32 %712 to i64
  %714 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %711, i64 %713)
  %715 = extractvalue { i64, i1 } %714, 1
  br i1 %715, label %716, label %717

716:                                              ; preds = %710
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

717:                                              ; preds = %710
  %718 = extractvalue { i64, i1 } %714, 0
  %719 = load i64, ptr %46, align 8
  %720 = load i64, ptr %32, align 8
  %721 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %719, i64 %720)
  %722 = extractvalue { i64, i1 } %721, 1
  br i1 %722, label %723, label %724

723:                                              ; preds = %717
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

724:                                              ; preds = %717
  %725 = extractvalue { i64, i1 } %721, 0
  %726 = trunc i64 %718 to i32
  %727 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %728 = insertvalue { ptr, i64 } poison, ptr %727, 0
  %729 = insertvalue { ptr, i64 } %728, i64 2049, 1
  store { ptr, i64 } %729, ptr %19, align 8
  %730 = load { ptr, i64 }, ptr %19, align 8
  %731 = extractvalue { ptr, i64 } %730, 1
  %732 = icmp ult i64 %725, %731
  br i1 %732, label %739, label %740

733:                                              ; preds = %739
  %734 = extractvalue { ptr, i64 } %730, 0
  %735 = getelementptr inbounds i32, ptr %734, i64 %725
  store i32 %726, ptr %735, align 4
  %736 = lshr i64 %685, 32
  %737 = sub i64 9223372036854775807, %736
  %738 = icmp ule i64 %737, 9223372036854775807
  br i1 %738, label %745, label %746

739:                                              ; preds = %724
  br label %733

740:                                              ; preds = %724
  call fastcc void @builtin.panicOutOfBounds(i64 %725, i64 %731)
  unreachable

741:                                              ; preds = %745
  %742 = ashr i64 %718, 32
  %743 = call fastcc { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %736, i64 %742)
  %744 = extractvalue { i64, i1 } %743, 1
  br i1 %744, label %747, label %748

745:                                              ; preds = %733
  br label %741

746:                                              ; preds = %733
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.cast_truncated_data__anon_3452, i64 27, ptr align 8 null, ptr nonnull readonly align 8 @115)
  unreachable

747:                                              ; preds = %741
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

748:                                              ; preds = %741
  %749 = extractvalue { i64, i1 } %743, 0
  store i64 %749, ptr %22, align 8
  %750 = load i64, ptr %46, align 8
  %751 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %750, i64 1)
  %752 = extractvalue { i64, i1 } %751, 1
  br i1 %752, label %753, label %754

753:                                              ; preds = %748
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

754:                                              ; preds = %748
  %755 = extractvalue { i64, i1 } %751, 0
  store i64 %755, ptr %46, align 8
  br label %663

756:                                              ; preds = %654
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

757:                                              ; preds = %654
  %758 = extractvalue { i64, i1 } %657, 0
  %759 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %758, i64 1)
  %760 = extractvalue { i64, i1 } %759, 1
  br i1 %760, label %761, label %762

761:                                              ; preds = %757
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

762:                                              ; preds = %757
  %763 = extractvalue { i64, i1 } %759, 0
  %764 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %765 = insertvalue { ptr, i64 } poison, ptr %764, 0
  %766 = insertvalue { ptr, i64 } %765, i64 2049, 1
  %767 = extractvalue { ptr, i64 } %766, 1
  %768 = icmp ult i64 %763, %767
  br i1 %768, label %781, label %782

769:                                              ; preds = %781
  %770 = extractvalue { ptr, i64 } %766, 0
  %771 = getelementptr inbounds i32, ptr %770, i64 %763
  %772 = load i32, ptr %771, align 4
  store i32 %772, ptr %18, align 4
  %773 = load i32, ptr %18, align 4
  %774 = load i64, ptr %22, align 8
  %775 = zext i32 %773 to i64
  %776 = sub i64 %775, %774
  %777 = load i64, ptr %32, align 8
  %778 = load i64, ptr %52, align 8
  %779 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %777, i64 %778)
  %780 = extractvalue { i64, i1 } %779, 1
  br i1 %780, label %783, label %784

781:                                              ; preds = %762
  br label %769

782:                                              ; preds = %762
  call fastcc void @builtin.panicOutOfBounds(i64 %763, i64 %767)
  unreachable

783:                                              ; preds = %769
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

784:                                              ; preds = %769
  %785 = extractvalue { i64, i1 } %779, 0
  %786 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %785, i64 1)
  %787 = extractvalue { i64, i1 } %786, 1
  br i1 %787, label %788, label %789

788:                                              ; preds = %784
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

789:                                              ; preds = %784
  %790 = extractvalue { i64, i1 } %786, 0
  %791 = trunc i64 %776 to i32
  %792 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %793 = insertvalue { ptr, i64 } poison, ptr %792, 0
  %794 = insertvalue { ptr, i64 } %793, i64 2049, 1
  store { ptr, i64 } %794, ptr %17, align 8
  %795 = load { ptr, i64 }, ptr %17, align 8
  %796 = extractvalue { ptr, i64 } %795, 1
  %797 = icmp ult i64 %790, %796
  br i1 %797, label %802, label %803

798:                                              ; preds = %802
  %799 = extractvalue { ptr, i64 } %795, 0
  %800 = getelementptr inbounds i32, ptr %799, i64 %790
  store i32 %791, ptr %800, align 4
  %801 = icmp slt i64 %776, 0
  br i1 %801, label %807, label %808

802:                                              ; preds = %789
  br label %798

803:                                              ; preds = %789
  call fastcc void @builtin.panicOutOfBounds(i64 %790, i64 %796)
  unreachable

804:                                              ; preds = %938, %808
  %805 = load i64, ptr %32, align 8
  %806 = icmp eq i64 %805, 0
  br i1 %806, label %947, label %948

807:                                              ; preds = %798
  store i64 0, ptr %16, align 8
  store i64 0, ptr %46, align 8
  br label %814

808:                                              ; preds = %798
  br label %804

809:                                              ; preds = %824
  %810 = load i64, ptr %32, align 8
  %811 = load i64, ptr %52, align 8
  %812 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %810, i64 %811)
  %813 = extractvalue { i64, i1 } %812, 1
  br i1 %813, label %892, label %893

814:                                              ; preds = %818, %807
  %815 = load i64, ptr %46, align 8
  %816 = load i64, ptr %52, align 8
  %817 = icmp ule i64 %815, %816
  br i1 %817, label %819, label %824

818:                                              ; preds = %890
  br label %814

819:                                              ; preds = %814
  %820 = load i64, ptr %46, align 8
  %821 = load i64, ptr %32, align 8
  %822 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %820, i64 %821)
  %823 = extractvalue { i64, i1 } %822, 1
  br i1 %823, label %825, label %826

824:                                              ; preds = %814
  br label %809

825:                                              ; preds = %819
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

826:                                              ; preds = %819
  %827 = extractvalue { i64, i1 } %822, 0
  %828 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %829 = insertvalue { ptr, i64 } poison, ptr %828, 0
  %830 = insertvalue { ptr, i64 } %829, i64 2049, 1
  %831 = extractvalue { ptr, i64 } %830, 1
  %832 = icmp ult i64 %827, %831
  br i1 %832, label %845, label %846

833:                                              ; preds = %845
  %834 = extractvalue { ptr, i64 } %830, 0
  %835 = getelementptr inbounds i32, ptr %834, i64 %827
  %836 = load i32, ptr %835, align 4
  store i32 %836, ptr %15, align 4
  %837 = load i32, ptr %15, align 4
  %838 = zext i32 %837 to i64
  %839 = load i64, ptr %46, align 8
  %840 = getelementptr inbounds [2048 x i32], ptr %47, i64 0, i64 0
  %841 = insertvalue { ptr, i64 } poison, ptr %840, 0
  %842 = insertvalue { ptr, i64 } %841, i64 2048, 1
  %843 = extractvalue { ptr, i64 } %842, 1
  %844 = icmp ult i64 %839, %843
  br i1 %844, label %855, label %856

845:                                              ; preds = %826
  br label %833

846:                                              ; preds = %826
  call fastcc void @builtin.panicOutOfBounds(i64 %827, i64 %831)
  unreachable

847:                                              ; preds = %855
  %848 = extractvalue { ptr, i64 } %842, 0
  %849 = getelementptr inbounds i32, ptr %848, i64 %839
  %850 = load i32, ptr %849, align 4
  store i32 %850, ptr %14, align 4
  %851 = load i32, ptr %14, align 4
  %852 = zext i32 %851 to i64
  %853 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %838, i64 %852)
  %854 = extractvalue { i64, i1 } %853, 1
  br i1 %854, label %857, label %858

855:                                              ; preds = %833
  br label %847

856:                                              ; preds = %833
  call fastcc void @builtin.panicOutOfBounds(i64 %839, i64 %843)
  unreachable

857:                                              ; preds = %847
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

858:                                              ; preds = %847
  %859 = extractvalue { i64, i1 } %853, 0
  %860 = load i64, ptr %16, align 8
  %861 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %859, i64 %860)
  %862 = extractvalue { i64, i1 } %861, 1
  br i1 %862, label %863, label %864

863:                                              ; preds = %858
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

864:                                              ; preds = %858
  %865 = extractvalue { i64, i1 } %861, 0
  %866 = load i64, ptr %46, align 8
  %867 = load i64, ptr %32, align 8
  %868 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %866, i64 %867)
  %869 = extractvalue { i64, i1 } %868, 1
  br i1 %869, label %870, label %871

870:                                              ; preds = %864
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

871:                                              ; preds = %864
  %872 = extractvalue { i64, i1 } %868, 0
  %873 = trunc i64 %865 to i32
  %874 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %875 = insertvalue { ptr, i64 } poison, ptr %874, 0
  %876 = insertvalue { ptr, i64 } %875, i64 2049, 1
  store { ptr, i64 } %876, ptr %13, align 8
  %877 = load { ptr, i64 }, ptr %13, align 8
  %878 = extractvalue { ptr, i64 } %877, 1
  %879 = icmp ult i64 %872, %878
  br i1 %879, label %887, label %888

880:                                              ; preds = %887
  %881 = extractvalue { ptr, i64 } %877, 0
  %882 = getelementptr inbounds i32, ptr %881, i64 %872
  store i32 %873, ptr %882, align 4
  %883 = lshr i64 %865, 32
  store i64 %883, ptr %16, align 8
  %884 = load i64, ptr %46, align 8
  %885 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %884, i64 1)
  %886 = extractvalue { i64, i1 } %885, 1
  br i1 %886, label %889, label %890

887:                                              ; preds = %871
  br label %880

888:                                              ; preds = %871
  call fastcc void @builtin.panicOutOfBounds(i64 %872, i64 %878)
  unreachable

889:                                              ; preds = %880
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

890:                                              ; preds = %880
  %891 = extractvalue { i64, i1 } %885, 0
  store i64 %891, ptr %46, align 8
  br label %818

892:                                              ; preds = %809
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

893:                                              ; preds = %809
  %894 = extractvalue { i64, i1 } %812, 0
  %895 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %894, i64 1)
  %896 = extractvalue { i64, i1 } %895, 1
  br i1 %896, label %897, label %898

897:                                              ; preds = %893
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

898:                                              ; preds = %893
  %899 = extractvalue { i64, i1 } %895, 0
  %900 = load i64, ptr %32, align 8
  %901 = load i64, ptr %52, align 8
  %902 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %900, i64 %901)
  %903 = extractvalue { i64, i1 } %902, 1
  br i1 %903, label %904, label %905

904:                                              ; preds = %898
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

905:                                              ; preds = %898
  %906 = extractvalue { i64, i1 } %902, 0
  %907 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %906, i64 1)
  %908 = extractvalue { i64, i1 } %907, 1
  br i1 %908, label %909, label %910

909:                                              ; preds = %905
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

910:                                              ; preds = %905
  %911 = extractvalue { i64, i1 } %907, 0
  %912 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %913 = insertvalue { ptr, i64 } poison, ptr %912, 0
  %914 = insertvalue { ptr, i64 } %913, i64 2049, 1
  %915 = extractvalue { ptr, i64 } %914, 1
  %916 = icmp ult i64 %911, %915
  br i1 %916, label %926, label %927

917:                                              ; preds = %926
  %918 = extractvalue { ptr, i64 } %914, 0
  %919 = getelementptr inbounds i32, ptr %918, i64 %911
  %920 = load i32, ptr %919, align 4
  store i32 %920, ptr %12, align 4
  %921 = load i32, ptr %12, align 4
  %922 = load i64, ptr %16, align 8
  %923 = zext i32 %921 to i64
  %924 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %923, i64 %922)
  %925 = extractvalue { i64, i1 } %924, 1
  br i1 %925, label %928, label %929

926:                                              ; preds = %910
  br label %917

927:                                              ; preds = %910
  call fastcc void @builtin.panicOutOfBounds(i64 %911, i64 %915)
  unreachable

928:                                              ; preds = %917
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

929:                                              ; preds = %917
  %930 = extractvalue { i64, i1 } %924, 0
  %931 = trunc i64 %930 to i32
  %932 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %933 = insertvalue { ptr, i64 } poison, ptr %932, 0
  %934 = insertvalue { ptr, i64 } %933, i64 2049, 1
  store { ptr, i64 } %934, ptr %11, align 8
  %935 = load { ptr, i64 }, ptr %11, align 8
  %936 = extractvalue { ptr, i64 } %935, 1
  %937 = icmp ult i64 %899, %936
  br i1 %937, label %941, label %942

938:                                              ; preds = %941
  %939 = extractvalue { ptr, i64 } %935, 0
  %940 = getelementptr inbounds i32, ptr %939, i64 %899
  store i32 %931, ptr %940, align 4
  br label %804

941:                                              ; preds = %929
  br label %938

942:                                              ; preds = %929
  call fastcc void @builtin.panicOutOfBounds(i64 %899, i64 %936)
  unreachable

943:                                              ; preds = %948
  %944 = load i64, ptr %32, align 8
  %945 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %944, i64 1)
  %946 = extractvalue { i64, i1 } %945, 1
  br i1 %946, label %949, label %950

947:                                              ; preds = %804
  br label %454

948:                                              ; preds = %804
  br label %943

949:                                              ; preds = %943
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

950:                                              ; preds = %943
  %951 = extractvalue { i64, i1 } %945, 0
  store i64 %951, ptr %32, align 8
  br label %457

952:                                              ; preds = %1035, %954
  br label %88

953:                                              ; preds = %454
  store i64 0, ptr %46, align 8
  br label %963

954:                                              ; preds = %454
  br label %952

955:                                              ; preds = %976
  %956 = load i64, ptr %52, align 8
  %957 = load i64, ptr %52, align 8
  %958 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %959 = insertvalue { ptr, i64 } poison, ptr %958, 0
  %960 = insertvalue { ptr, i64 } %959, i64 2049, 1
  %961 = extractvalue { ptr, i64 } %960, 1
  %962 = icmp ult i64 %957, %961
  br i1 %962, label %1033, label %1034

963:                                              ; preds = %967, %953
  %964 = load i64, ptr %46, align 8
  %965 = load i64, ptr %52, align 8
  %966 = icmp ule i64 %964, %965
  br i1 %966, label %968, label %976

967:                                              ; preds = %1022
  br label %963

968:                                              ; preds = %963
  %969 = load i64, ptr %46, align 8
  %970 = load i64, ptr %46, align 8
  %971 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %972 = insertvalue { ptr, i64 } poison, ptr %971, 0
  %973 = insertvalue { ptr, i64 } %972, i64 2049, 1
  %974 = extractvalue { ptr, i64 } %973, 1
  %975 = icmp ult i64 %970, %974
  br i1 %975, label %986, label %987

976:                                              ; preds = %963
  br label %955

977:                                              ; preds = %986
  %978 = extractvalue { ptr, i64 } %973, 0
  %979 = getelementptr inbounds i32, ptr %978, i64 %970
  %980 = load i32, ptr %979, align 4
  store i32 %980, ptr %10, align 4
  %981 = load i32, ptr %10, align 4
  %982 = call fastcc i32 @math.shr__anon_3865(i32 %981, i6 %251)
  %983 = load i64, ptr %46, align 8
  %984 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %983, i64 1)
  %985 = extractvalue { i64, i1 } %984, 1
  br i1 %985, label %988, label %989

986:                                              ; preds = %968
  br label %977

987:                                              ; preds = %968
  call fastcc void @builtin.panicOutOfBounds(i64 %970, i64 %974)
  unreachable

988:                                              ; preds = %977
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

989:                                              ; preds = %977
  %990 = extractvalue { i64, i1 } %984, 0
  %991 = getelementptr inbounds [2049 x i32], ptr %40, i64 0, i64 0
  %992 = insertvalue { ptr, i64 } poison, ptr %991, 0
  %993 = insertvalue { ptr, i64 } %992, i64 2049, 1
  %994 = extractvalue { ptr, i64 } %993, 1
  %995 = icmp ult i64 %990, %994
  br i1 %995, label %1003, label %1004

996:                                              ; preds = %1003
  %997 = extractvalue { ptr, i64 } %993, 0
  %998 = getelementptr inbounds i32, ptr %997, i64 %990
  %999 = load i32, ptr %998, align 4
  store i32 %999, ptr %9, align 4
  %1000 = load i32, ptr %9, align 4
  %1001 = call fastcc { i6, i1 } @llvm.usub.with.overflow.i6(i6 -32, i6 %251)
  %1002 = extractvalue { i6, i1 } %1001, 1
  br i1 %1002, label %1005, label %1006

1003:                                             ; preds = %989
  br label %996

1004:                                             ; preds = %989
  call fastcc void @builtin.panicOutOfBounds(i64 %990, i64 %994)
  unreachable

1005:                                             ; preds = %996
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1006:                                             ; preds = %996
  %1007 = extractvalue { i6, i1 } %1001, 0
  %1008 = call fastcc i32 @math.shl__anon_3864(i32 %1000, i6 %1007)
  %1009 = or i32 %982, %1008
  store { ptr, i64 } %80, ptr %8, align 8
  %1010 = load { ptr, i64 }, ptr %8, align 8
  %1011 = extractvalue { ptr, i64 } %1010, 1
  %1012 = icmp ult i64 %969, %1011
  br i1 %1012, label %1019, label %1020

1013:                                             ; preds = %1019
  %1014 = extractvalue { ptr, i64 } %1010, 0
  %1015 = getelementptr inbounds i32, ptr %1014, i64 %969
  store i32 %1009, ptr %1015, align 4
  %1016 = load i64, ptr %46, align 8
  %1017 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1016, i64 1)
  %1018 = extractvalue { i64, i1 } %1017, 1
  br i1 %1018, label %1021, label %1022

1019:                                             ; preds = %1006
  br label %1013

1020:                                             ; preds = %1006
  call fastcc void @builtin.panicOutOfBounds(i64 %969, i64 %1011)
  unreachable

1021:                                             ; preds = %1013
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

1022:                                             ; preds = %1013
  %1023 = extractvalue { i64, i1 } %1017, 0
  store i64 %1023, ptr %46, align 8
  br label %967

1024:                                             ; preds = %1033
  %1025 = extractvalue { ptr, i64 } %960, 0
  %1026 = getelementptr inbounds i32, ptr %1025, i64 %957
  %1027 = load i32, ptr %1026, align 4
  store i32 %1027, ptr %7, align 4
  %1028 = load i32, ptr %7, align 4
  %1029 = call fastcc i32 @math.shr__anon_3865(i32 %1028, i6 %251)
  store { ptr, i64 } %80, ptr %6, align 8
  %1030 = load { ptr, i64 }, ptr %6, align 8
  %1031 = extractvalue { ptr, i64 } %1030, 1
  %1032 = icmp ult i64 %956, %1031
  br i1 %1032, label %1038, label %1039

1033:                                             ; preds = %955
  br label %1024

1034:                                             ; preds = %955
  call fastcc void @builtin.panicOutOfBounds(i64 %957, i64 %961)
  unreachable

1035:                                             ; preds = %1038
  %1036 = extractvalue { ptr, i64 } %1030, 0
  %1037 = getelementptr inbounds i32, ptr %1036, i64 %956
  store i32 %1029, ptr %1037, align 4
  br label %952

1038:                                             ; preds = %1024
  br label %1035

1039:                                             ; preds = %1024
  call fastcc void @builtin.panicOutOfBounds(i64 %956, i64 %1031)
  unreachable

1040:                                             ; preds = %88
  br label %87

1041:                                             ; preds = %88
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__udivmodti4(i128 %0, i128 %1, ptr align 16 %2) #0 {
  %4 = call fastcc i128 @compiler_rt.udivmod.udivmod__anon_3537(i128 %0, i128 %1, ptr align 16 %2)
  ret i128 %4
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__isPlatformVersionAtLeast(i32 %0, i32 %1, i32 %2, i32 %3) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %5 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %5, ptr %StackGuardSlot)
  %6 = alloca [1 x %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508"], align 4
  %7 = alloca %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", align 4
  %8 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %7, i32 0, i32 0
  store i32 %0, ptr %8, align 4
  %9 = getelementptr inbounds %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508", ptr %7, i32 0, i32 1
  %10 = and i32 %1, 65535
  %11 = shl i32 %10, 16
  %12 = and i32 %2, 255
  %13 = shl i32 %12, 8
  %14 = or i32 %11, %13
  %15 = and i32 %3, 255
  %16 = or i32 %14, %15
  store i32 %16, ptr %9, align 4
  %17 = getelementptr inbounds [1 x %"compiler_rt.common.HalveInt(i64,false).HalveInt(i64,false)__struct_3508"], ptr %6, i64 0, i64 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %17, ptr align 4 %7, i64 8, i1 false)
  %18 = call i1 @_availability_version_check(i32 1, ptr readonly align 4 %6)
  %19 = zext i1 %18 to i32
  ret i32 %19
}

; Function Attrs: nounwind uwtable
declare i1 @_availability_version_check(i32, ptr readonly align 4) #3

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__clear_cache(i64 %0, i64 %1) #0 {
  %3 = call fastcc { i64, i1 } @llvm.usub.with.overflow.i64(i64 %1, i64 %0)
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

6:                                                ; preds = %2
  %7 = extractvalue { i64, i1 } %3, 0
  call void @sys_icache_invalidate(i64 %0, i64 %7)
  call fastcc void @compiler_rt.clear_cache.exportIt()
  ret void
}

; Function Attrs: nounwind uwtable
declare void @sys_icache_invalidate(i64, i64) #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.clear_cache.exportIt() unnamed_addr #0 {
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__atomic_load(i32 %0, ptr nonnull align 1 %1, ptr nonnull align 1 %2, i32 %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = ptrtoint ptr %1 to i64
  %8 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %7)
  store ptr %8, ptr %6, align 8
  store ptr %2, ptr %5, align 8
  %9 = load ptr, ptr %5, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 0
  %11 = zext i32 %0 to i64
  %12 = icmp ule i64 0, %11
  br i1 %12, label %15, label %16

13:                                               ; preds = %15
  %14 = icmp ule i64 0, %11
  br i1 %14, label %27, label %28

15:                                               ; preds = %4
  br label %13

16:                                               ; preds = %4
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %11)
  unreachable

17:                                               ; preds = %27
  %18 = insertvalue { ptr, i64 } poison, ptr %10, 0
  %19 = insertvalue { ptr, i64 } %18, i64 %11, 1
  %20 = extractvalue { ptr, i64 } %19, 1
  %21 = extractvalue { ptr, i64 } %19, 0
  %22 = getelementptr inbounds i8, ptr %1, i64 %20
  %23 = getelementptr inbounds i8, ptr %21, i64 %20
  %24 = icmp uge ptr %21, %22
  %25 = icmp uge ptr %1, %23
  %26 = or i1 %24, %25
  br i1 %26, label %33, label %34

27:                                               ; preds = %13
  br label %17

28:                                               ; preds = %13
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %11)
  unreachable

29:                                               ; preds = %33
  %30 = extractvalue { ptr, i64 } %19, 1
  %31 = extractvalue { ptr, i64 } %19, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %31, ptr align 1 %1, i64 %30, i1 false)
  %32 = load ptr, ptr %6, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %32)
  ret void

33:                                               ; preds = %17
  br label %29

34:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @116)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 %0, i64 %1) unnamed_addr #0 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  store ptr %0, ptr %3, align 8
  %5 = load ptr, ptr %3, align 8
  %6 = getelementptr inbounds %compiler_rt.atomics.SpinlockTable, ptr %5, i32 0, i32 0
  %7 = lshr i64 %1, 3
  %8 = urem i64 %7, 64
  %9 = icmp ult i64 %8, 64
  br i1 %9, label %14, label %15

10:                                               ; preds = %14
  %11 = getelementptr inbounds [64 x %compiler_rt.atomics.SpinlockTable.Spinlock], ptr %6, i64 0, i64 %8
  store ptr %11, ptr %4, align 8
  %12 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.acquire(ptr nonnull align 64 %12)
  %13 = load ptr, ptr %4, align 8
  ret ptr %13

14:                                               ; preds = %2
  br label %10

15:                                               ; preds = %2
  call fastcc void @builtin.panicOutOfBounds(i64 %8, i64 64)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %compiler_rt.atomics.SpinlockTable.Spinlock, ptr %3, i32 0, i32 0
  store atomic i64 0, ptr %4 release, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.acquire(ptr nonnull align 64 %0) unnamed_addr #0 {
  %2 = alloca ptr, align 8
  br label %4

3:                                                ; preds = %11
  ret void

4:                                                ; preds = %9, %1
  store ptr %0, ptr %2, align 8
  %5 = load ptr, ptr %2, align 8
  %6 = getelementptr inbounds %compiler_rt.atomics.SpinlockTable.Spinlock, ptr %5, i32 0, i32 0
  %7 = load i64, ptr %6, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %4
  %loaded = phi i64 [ %7, %4 ], [ %newloaded, %atomicrmw.start ]
  %8 = cmpxchg ptr %6, i64 %loaded, i64 1 acquire acquire, align 8
  %success = extractvalue { i64, i1 } %8, 1
  %newloaded = extractvalue { i64, i1 } %8, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  switch i64 %newloaded, label %10 [
    i64 0, label %11
    i64 1, label %12
  ]

9:                                                ; preds = %12
  br label %4

10:                                               ; preds = %atomicrmw.end
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.corrupt_switch__anon_6720, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @191)
  unreachable

11:                                               ; preds = %atomicrmw.end
  br label %3

12:                                               ; preds = %atomicrmw.end
  br label %9
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__atomic_store(i32 %0, ptr nonnull align 1 %1, ptr nonnull align 1 %2, i32 %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = ptrtoint ptr %1 to i64
  %8 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %7)
  store ptr %8, ptr %6, align 8
  store ptr %1, ptr %5, align 8
  %9 = load ptr, ptr %5, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 0
  %11 = zext i32 %0 to i64
  %12 = icmp ule i64 0, %11
  br i1 %12, label %15, label %16

13:                                               ; preds = %15
  %14 = icmp ule i64 0, %11
  br i1 %14, label %27, label %28

15:                                               ; preds = %4
  br label %13

16:                                               ; preds = %4
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %11)
  unreachable

17:                                               ; preds = %27
  %18 = insertvalue { ptr, i64 } poison, ptr %10, 0
  %19 = insertvalue { ptr, i64 } %18, i64 %11, 1
  %20 = extractvalue { ptr, i64 } %19, 1
  %21 = extractvalue { ptr, i64 } %19, 0
  %22 = getelementptr inbounds i8, ptr %2, i64 %20
  %23 = getelementptr inbounds i8, ptr %21, i64 %20
  %24 = icmp uge ptr %21, %22
  %25 = icmp uge ptr %2, %23
  %26 = or i1 %24, %25
  br i1 %26, label %33, label %34

27:                                               ; preds = %13
  br label %17

28:                                               ; preds = %13
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %11)
  unreachable

29:                                               ; preds = %33
  %30 = extractvalue { ptr, i64 } %19, 1
  %31 = extractvalue { ptr, i64 } %19, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %31, ptr align 1 %2, i64 %30, i1 false)
  %32 = load ptr, ptr %6, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %32)
  ret void

33:                                               ; preds = %17
  br label %29

34:                                               ; preds = %17
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @117)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__atomic_exchange(i32 %0, ptr nonnull align 1 %1, ptr nonnull align 1 %2, ptr nonnull align 1 %3, i32 %4) #0 {
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = ptrtoint ptr %1 to i64
  %10 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %9)
  store ptr %10, ptr %8, align 8
  store ptr %3, ptr %7, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 0
  %13 = zext i32 %0 to i64
  %14 = icmp ule i64 0, %13
  br i1 %14, label %17, label %18

15:                                               ; preds = %17
  %16 = icmp ule i64 0, %13
  br i1 %16, label %29, label %30

17:                                               ; preds = %5
  br label %15

18:                                               ; preds = %5
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %13)
  unreachable

19:                                               ; preds = %29
  %20 = insertvalue { ptr, i64 } poison, ptr %12, 0
  %21 = insertvalue { ptr, i64 } %20, i64 %13, 1
  %22 = extractvalue { ptr, i64 } %21, 1
  %23 = extractvalue { ptr, i64 } %21, 0
  %24 = getelementptr inbounds i8, ptr %1, i64 %22
  %25 = getelementptr inbounds i8, ptr %23, i64 %22
  %26 = icmp uge ptr %23, %24
  %27 = icmp uge ptr %1, %25
  %28 = or i1 %26, %27
  br i1 %28, label %38, label %39

29:                                               ; preds = %15
  br label %19

30:                                               ; preds = %15
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %13)
  unreachable

31:                                               ; preds = %38
  %32 = extractvalue { ptr, i64 } %21, 1
  %33 = extractvalue { ptr, i64 } %21, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %33, ptr align 1 %1, i64 %32, i1 false)
  store ptr %1, ptr %6, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = getelementptr inbounds i8, ptr %34, i64 0
  %36 = zext i32 %0 to i64
  %37 = icmp ule i64 0, %36
  br i1 %37, label %42, label %43

38:                                               ; preds = %19
  br label %31

39:                                               ; preds = %19
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @118)
  unreachable

40:                                               ; preds = %42
  %41 = icmp ule i64 0, %36
  br i1 %41, label %54, label %55

42:                                               ; preds = %31
  br label %40

43:                                               ; preds = %31
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %36)
  unreachable

44:                                               ; preds = %54
  %45 = insertvalue { ptr, i64 } poison, ptr %35, 0
  %46 = insertvalue { ptr, i64 } %45, i64 %36, 1
  %47 = extractvalue { ptr, i64 } %46, 1
  %48 = extractvalue { ptr, i64 } %46, 0
  %49 = getelementptr inbounds i8, ptr %2, i64 %47
  %50 = getelementptr inbounds i8, ptr %48, i64 %47
  %51 = icmp uge ptr %48, %49
  %52 = icmp uge ptr %2, %50
  %53 = or i1 %51, %52
  br i1 %53, label %60, label %61

54:                                               ; preds = %40
  br label %44

55:                                               ; preds = %40
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %36)
  unreachable

56:                                               ; preds = %60
  %57 = extractvalue { ptr, i64 } %46, 1
  %58 = extractvalue { ptr, i64 } %46, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %58, ptr align 1 %2, i64 %57, i1 false)
  %59 = load ptr, ptr %8, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %59)
  ret void

60:                                               ; preds = %44
  br label %56

61:                                               ; preds = %44
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @118)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange(i32 %0, ptr nonnull align 1 %1, ptr nonnull align 1 %2, ptr nonnull align 1 %3, i32 %4, i32 %5) #0 {
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca ptr, align 8
  %12 = ptrtoint ptr %1 to i64
  %13 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %12)
  store ptr %13, ptr %11, align 8
  store i64 0, ptr %10, align 8
  store ptr %1, ptr %9, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = getelementptr inbounds i8, ptr %14, i64 0
  %16 = zext i32 %0 to i64
  %17 = icmp ule i64 0, %16
  br i1 %17, label %20, label %21

18:                                               ; preds = %20
  %19 = icmp ule i64 0, %16
  br i1 %19, label %26, label %27

20:                                               ; preds = %6
  br label %18

21:                                               ; preds = %6
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %16)
  unreachable

22:                                               ; preds = %26
  %23 = insertvalue { ptr, i64 } poison, ptr %15, 0
  %24 = insertvalue { ptr, i64 } %23, i64 %16, 1
  %25 = extractvalue { ptr, i64 } %24, 1
  br label %33

26:                                               ; preds = %18
  br label %22

27:                                               ; preds = %18
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %16)
  unreachable

28:                                               ; preds = %51
  store ptr %2, ptr %7, align 8
  %29 = load ptr, ptr %7, align 8
  %30 = getelementptr inbounds i8, ptr %29, i64 0
  %31 = zext i32 %0 to i64
  %32 = icmp ule i64 0, %31
  br i1 %32, label %77, label %78

33:                                               ; preds = %36, %22
  %34 = load i64, ptr %10, align 8
  %35 = icmp ult i64 %34, %25
  br i1 %35, label %38, label %45

36:                                               ; preds = %50
  %37 = add nuw i64 %34, 1
  store i64 %37, ptr %10, align 8
  br label %33

38:                                               ; preds = %33
  %39 = extractvalue { ptr, i64 } %24, 0
  %40 = getelementptr inbounds i8, ptr %39, i64 %34
  %41 = load i8, ptr %40, align 1
  %42 = getelementptr inbounds i8, ptr %2, i64 %34
  %43 = load i8, ptr %42, align 1
  %44 = icmp ne i8 %43, %41
  br i1 %44, label %51, label %52

45:                                               ; preds = %33
  store ptr %1, ptr %8, align 8
  %46 = load ptr, ptr %8, align 8
  %47 = getelementptr inbounds i8, ptr %46, i64 0
  %48 = zext i32 %0 to i64
  %49 = icmp ule i64 0, %48
  br i1 %49, label %55, label %56

50:                                               ; preds = %52
  br label %36

51:                                               ; preds = %38
  br label %28

52:                                               ; preds = %38
  br label %50

53:                                               ; preds = %55
  %54 = icmp ule i64 0, %48
  br i1 %54, label %67, label %68

55:                                               ; preds = %45
  br label %53

56:                                               ; preds = %45
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %48)
  unreachable

57:                                               ; preds = %67
  %58 = insertvalue { ptr, i64 } poison, ptr %47, 0
  %59 = insertvalue { ptr, i64 } %58, i64 %48, 1
  %60 = extractvalue { ptr, i64 } %59, 1
  %61 = extractvalue { ptr, i64 } %59, 0
  %62 = getelementptr inbounds i8, ptr %3, i64 %60
  %63 = getelementptr inbounds i8, ptr %61, i64 %60
  %64 = icmp uge ptr %61, %62
  %65 = icmp uge ptr %3, %63
  %66 = or i1 %64, %65
  br i1 %66, label %73, label %74

67:                                               ; preds = %53
  br label %57

68:                                               ; preds = %53
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %48)
  unreachable

69:                                               ; preds = %73
  %70 = extractvalue { ptr, i64 } %59, 1
  %71 = extractvalue { ptr, i64 } %59, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %71, ptr align 1 %3, i64 %70, i1 false)
  %72 = load ptr, ptr %11, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %72)
  ret i32 1

73:                                               ; preds = %57
  br label %69

74:                                               ; preds = %57
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @119)
  unreachable

75:                                               ; preds = %77
  %76 = icmp ule i64 0, %31
  br i1 %76, label %89, label %90

77:                                               ; preds = %28
  br label %75

78:                                               ; preds = %28
  call fastcc void @builtin.panicStartGreaterThanEnd(i64 0, i64 %31)
  unreachable

79:                                               ; preds = %89
  %80 = insertvalue { ptr, i64 } poison, ptr %30, 0
  %81 = insertvalue { ptr, i64 } %80, i64 %31, 1
  %82 = extractvalue { ptr, i64 } %81, 1
  %83 = extractvalue { ptr, i64 } %81, 0
  %84 = getelementptr inbounds i8, ptr %1, i64 %82
  %85 = getelementptr inbounds i8, ptr %83, i64 %82
  %86 = icmp uge ptr %83, %84
  %87 = icmp uge ptr %1, %85
  %88 = or i1 %86, %87
  br i1 %88, label %95, label %96

89:                                               ; preds = %75
  br label %79

90:                                               ; preds = %75
  call fastcc void @builtin.panicOutOfBounds(i64 0, i64 %31)
  unreachable

91:                                               ; preds = %95
  %92 = extractvalue { ptr, i64 } %81, 1
  %93 = extractvalue { ptr, i64 } %81, 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %93, ptr align 1 %1, i64 %92, i1 false)
  %94 = load ptr, ptr %11, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %94)
  ret i32 0

95:                                               ; preds = %79
  br label %91

96:                                               ; preds = %79
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @builtin.panic_messages.memcpy_alias__anon_3867, i64 23, ptr align 8 null, ptr nonnull readonly align 8 @119)
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_add_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = add i8 %loaded, %1
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_add_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = add i16 %loaded, %1
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_fetch_add_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = add i32 %loaded, %1
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_fetch_add_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = add i64 %loaded, %1
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_fetch_add_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 16
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = add i128 %1, %0
  store i128 %4, ptr %3, align 16
  %5 = load i128, ptr %3, align 16
  ret i128 %5
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_sub_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = sub i8 %loaded, %1
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_sub_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = sub i16 %loaded, %1
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_fetch_sub_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = sub i32 %loaded, %1
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_fetch_sub_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = sub i64 %loaded, %1
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_fetch_sub_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.9(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 16
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.9(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = sub i128 %1, %0
  store i128 %4, ptr %3, align 16
  %5 = load i128, ptr %3, align 16
  ret i128 %5
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_and_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = and i8 %loaded, %1
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_and_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = and i16 %loaded, %1
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_fetch_and_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = and i32 %loaded, %1
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_fetch_and_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = and i64 %loaded, %1
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_fetch_and_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.10(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 16
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.10(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = and i128 %1, %0
  store i128 %4, ptr %3, align 16
  %5 = load i128, ptr %3, align 16
  ret i128 %5
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_or_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = or i8 %loaded, %1
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_or_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = or i16 %loaded, %1
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_fetch_or_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = or i32 %loaded, %1
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_fetch_or_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = or i64 %loaded, %1
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_fetch_or_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.11(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 16
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.11(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = or i128 %1, %0
  store i128 %4, ptr %3, align 16
  %5 = load i128, ptr %3, align 16
  ret i128 %5
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_xor_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = xor i8 %loaded, %1
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_xor_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = xor i16 %loaded, %1
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_fetch_xor_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = xor i32 %loaded, %1
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_fetch_xor_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %new = xor i64 %loaded, %1
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_fetch_xor_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.12(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 16
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.12(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = xor i128 %1, %0
  store i128 %4, ptr %3, align 16
  %5 = load i128, ptr %3, align 16
  ret i128 %5
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_nand_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = and i8 %loaded, %1
  %new = xor i8 %5, -1
  %6 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %6, 1
  %newloaded = extractvalue { i8, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_nand_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = and i16 %loaded, %1
  %new = xor i16 %5, -1
  %6 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %6, 1
  %newloaded = extractvalue { i16, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_fetch_nand_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = and i32 %loaded, %1
  %new = xor i32 %5, -1
  %6 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %6, 1
  %newloaded = extractvalue { i32, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_fetch_nand_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = and i64 %loaded, %1
  %new = xor i64 %5, -1
  %6 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %6, 1
  %newloaded = extractvalue { i64, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_fetch_nand_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.13(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 16
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.13(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = and i128 %1, %0
  %5 = xor i128 %4, -1
  store i128 %5, ptr %3, align 16
  %6 = load i128, ptr %3, align 16
  ret i128 %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_umax_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ugt i8 %loaded, %1
  %new = select i1 %5, i8 %loaded, i8 %1
  %6 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %6, 1
  %newloaded = extractvalue { i8, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_umax_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ugt i16 %loaded, %1
  %new = select i1 %5, i16 %loaded, i16 %1
  %6 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %6, 1
  %newloaded = extractvalue { i16, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_fetch_umax_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ugt i32 %loaded, %1
  %new = select i1 %5, i32 %loaded, i32 %1
  %6 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %6, 1
  %newloaded = extractvalue { i32, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_fetch_umax_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ugt i64 %loaded, %1
  %new = select i1 %5, i64 %loaded, i64 %1
  %6 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %6, 1
  %newloaded = extractvalue { i64, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_fetch_umax_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.14(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 16
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.14(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = call i128 @llvm.umax.i128(i128 %1, i128 %0)
  store i128 %4, ptr %3, align 16
  %5 = load i128, ptr %3, align 16
  ret i128 %5
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.umax.i128(i128, i128) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_fetch_umin_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ule i8 %loaded, %1
  %new = select i1 %5, i8 %loaded, i8 %1
  %6 = cmpxchg ptr %0, i8 %loaded, i8 %new seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %6, 1
  %newloaded = extractvalue { i8, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_fetch_umin_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ule i16 %loaded, %1
  %new = select i1 %5, i16 %loaded, i16 %1
  %6 = cmpxchg ptr %0, i16 %loaded, i16 %new seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %6, 1
  %newloaded = extractvalue { i16, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_fetch_umin_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ule i32 %loaded, %1
  %new = select i1 %5, i32 %loaded, i32 %1
  %6 = cmpxchg ptr %0, i32 %loaded, i32 %new seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %6, 1
  %newloaded = extractvalue { i32, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_fetch_umin_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = icmp ule i64 %loaded, %1
  %new = select i1 %5, i64 %loaded, i64 %1
  %6 = cmpxchg ptr %0, i64 %loaded, i64 %new seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %6, 1
  %newloaded = extractvalue { i64, i1 } %6, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_fetch_umin_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  %8 = call fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.15(i128 %1, i128 %7)
  store i128 %8, ptr %0, align 16
  %9 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %9)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i128 @compiler_rt.atomics.fetch_op_N.Updater.update.15(i128 %0, i128 %1) unnamed_addr #0 {
  %3 = alloca i128, align 16
  %4 = call i128 @llvm.umin.i128(i128 %1, i128 %0)
  store i128 %4, ptr %3, align 16
  %5 = load i128, ptr %3, align 16
  ret i128 %5
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.umin.i128(i128, i128) #6

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_load_1(ptr nonnull align 1 %0, i32 %1) #0 {
  %3 = load atomic i8, ptr %0 seq_cst, align 1
  ret i8 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_load_2(ptr nonnull align 2 %0, i32 %1) #0 {
  %3 = load atomic i16, ptr %0 seq_cst, align 2
  ret i16 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_load_4(ptr nonnull align 4 %0, i32 %1) #0 {
  %3 = load atomic i32, ptr %0 seq_cst, align 4
  ret i32 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_load_8(ptr nonnull align 8 %0, i32 %1) #0 {
  %3 = load atomic i64, ptr %0 seq_cst, align 8
  ret i64 %3
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_load_16(ptr nonnull align 16 %0, i32 %1) #0 {
  %3 = alloca ptr, align 8
  %4 = ptrtoint ptr %0 to i64
  %5 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %4)
  store ptr %5, ptr %3, align 8
  %6 = load i128, ptr %0, align 16
  %7 = load ptr, ptr %3, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %7)
  ret i128 %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__atomic_store_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  store atomic i8 %1, ptr %0 seq_cst, align 1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__atomic_store_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  store atomic i16 %1, ptr %0 seq_cst, align 2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__atomic_store_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  store atomic i32 %1, ptr %0 seq_cst, align 4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__atomic_store_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  store atomic i64 %1, ptr %0 seq_cst, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local void @__atomic_store_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  store i128 %1, ptr %0, align 16
  %7 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %7)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i8 @__atomic_exchange_1(ptr nonnull align 1 %0, i8 zeroext %1, i32 %2) #0 {
  %4 = load i8, ptr %0, align 1
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i8 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = cmpxchg ptr %0, i8 %loaded, i8 %1 seq_cst seq_cst, align 1
  %success = extractvalue { i8, i1 } %5, 1
  %newloaded = extractvalue { i8, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i8 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local zeroext i16 @__atomic_exchange_2(ptr nonnull align 2 %0, i16 zeroext %1, i32 %2) #0 {
  %4 = load i16, ptr %0, align 2
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i16 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = cmpxchg ptr %0, i16 %loaded, i16 %1 seq_cst seq_cst, align 2
  %success = extractvalue { i16, i1 } %5, 1
  %newloaded = extractvalue { i16, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i16 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_exchange_4(ptr nonnull align 4 %0, i32 %1, i32 %2) #0 {
  %4 = load i32, ptr %0, align 4
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i32 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = cmpxchg ptr %0, i32 %loaded, i32 %1 seq_cst seq_cst, align 4
  %success = extractvalue { i32, i1 } %5, 1
  %newloaded = extractvalue { i32, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i32 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i64 @__atomic_exchange_8(ptr nonnull align 8 %0, i64 %1, i32 %2) #0 {
  %4 = load i64, ptr %0, align 8
  br label %atomicrmw.start

atomicrmw.start:                                  ; preds = %atomicrmw.start, %3
  %loaded = phi i64 [ %4, %3 ], [ %newloaded, %atomicrmw.start ]
  %5 = cmpxchg ptr %0, i64 %loaded, i64 %1 seq_cst seq_cst, align 8
  %success = extractvalue { i64, i1 } %5, 1
  %newloaded = extractvalue { i64, i1 } %5, 0
  br i1 %success, label %atomicrmw.end, label %atomicrmw.start

atomicrmw.end:                                    ; preds = %atomicrmw.start
  ret i64 %newloaded
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i128 @__atomic_exchange_16(ptr nonnull align 16 %0, i128 %1, i32 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = ptrtoint ptr %0 to i64
  %6 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = load i128, ptr %0, align 16
  store i128 %1, ptr %0, align 16
  %8 = load ptr, ptr %4, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %8)
  ret i128 %7
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_1(ptr nonnull align 1 %0, ptr nonnull align 1 %1, i8 zeroext %2, i32 %3, i32 %4) #0 {
  %6 = alloca { i8, i8 }, align 1
  %7 = load i8, ptr %1, align 1
  %8 = cmpxchg ptr %0, i8 %7, i8 %2 seq_cst seq_cst, align 1
  %9 = extractvalue { i8, i1 } %8, 0
  %10 = extractvalue { i8, i1 } %8, 1
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds { i8, i8 }, ptr %6, i32 0, i32 0
  store i8 %9, ptr %13, align 1
  %14 = getelementptr inbounds { i8, i8 }, ptr %6, i32 0, i32 1
  store i8 %12, ptr %14, align 1
  %15 = getelementptr inbounds { i8, i8 }, ptr %6, i32 0, i32 1
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %21, label %24

18:                                               ; preds = %21, %20
  %19 = phi i32 [ 0, %21 ], [ 1, %20 ]
  ret i32 %19

20:                                               ; preds = %24
  br label %18

21:                                               ; preds = %5
  %22 = getelementptr inbounds { i8, i8 }, ptr %6, i32 0, i32 0
  %23 = load i8, ptr %22, align 1
  store i8 %23, ptr %1, align 1
  br label %18

24:                                               ; preds = %5
  br label %20
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_2(ptr nonnull align 2 %0, ptr nonnull align 2 %1, i16 zeroext %2, i32 %3, i32 %4) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %6 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %6, ptr %StackGuardSlot)
  %7 = alloca { i16, i8, [1 x i8] }, align 2
  %8 = load i16, ptr %1, align 2
  %9 = cmpxchg ptr %0, i16 %8, i16 %2 seq_cst seq_cst, align 2
  %10 = extractvalue { i16, i1 } %9, 0
  %11 = extractvalue { i16, i1 } %9, 1
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds { i16, i8, [1 x i8] }, ptr %7, i32 0, i32 0
  store i16 %10, ptr %14, align 2
  %15 = getelementptr inbounds { i16, i8, [1 x i8] }, ptr %7, i32 0, i32 1
  store i8 %13, ptr %15, align 1
  %16 = getelementptr inbounds { i16, i8, [1 x i8] }, ptr %7, i32 0, i32 1
  %17 = load i8, ptr %16, align 1
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %22, label %25

19:                                               ; preds = %22, %21
  %20 = phi i32 [ 0, %22 ], [ 1, %21 ]
  ret i32 %20

21:                                               ; preds = %25
  br label %19

22:                                               ; preds = %5
  %23 = getelementptr inbounds { i16, i8, [1 x i8] }, ptr %7, i32 0, i32 0
  %24 = load i16, ptr %23, align 2
  store i16 %24, ptr %1, align 2
  br label %19

25:                                               ; preds = %5
  br label %21
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_4(ptr nonnull align 4 %0, ptr nonnull align 4 %1, i32 %2, i32 %3, i32 %4) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %6 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %6, ptr %StackGuardSlot)
  %7 = alloca { i32, i8, [3 x i8] }, align 4
  %8 = load i32, ptr %1, align 4
  %9 = cmpxchg ptr %0, i32 %8, i32 %2 seq_cst seq_cst, align 4
  %10 = extractvalue { i32, i1 } %9, 0
  %11 = extractvalue { i32, i1 } %9, 1
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %7, i32 0, i32 0
  store i32 %10, ptr %14, align 4
  %15 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %7, i32 0, i32 1
  store i8 %13, ptr %15, align 1
  %16 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %7, i32 0, i32 1
  %17 = load i8, ptr %16, align 1
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %22, label %25

19:                                               ; preds = %22, %21
  %20 = phi i32 [ 0, %22 ], [ 1, %21 ]
  ret i32 %20

21:                                               ; preds = %25
  br label %19

22:                                               ; preds = %5
  %23 = getelementptr inbounds { i32, i8, [3 x i8] }, ptr %7, i32 0, i32 0
  %24 = load i32, ptr %23, align 4
  store i32 %24, ptr %1, align 4
  br label %19

25:                                               ; preds = %5
  br label %21
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_8(ptr nonnull align 8 %0, ptr nonnull align 8 %1, i64 %2, i32 %3, i32 %4) #0 {
  %StackGuardSlot = alloca ptr, align 8
  %6 = call ptr @llvm.stackguard()
  call void @llvm.stackprotector(ptr %6, ptr %StackGuardSlot)
  %7 = alloca { i64, i8, [7 x i8] }, align 8
  %8 = load i64, ptr %1, align 8
  %9 = cmpxchg ptr %0, i64 %8, i64 %2 seq_cst seq_cst, align 8
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %7, i32 0, i32 0
  store i64 %10, ptr %14, align 8
  %15 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %7, i32 0, i32 1
  store i8 %13, ptr %15, align 1
  %16 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %7, i32 0, i32 1
  %17 = load i8, ptr %16, align 1
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %22, label %25

19:                                               ; preds = %22, %21
  %20 = phi i32 [ 0, %22 ], [ 1, %21 ]
  ret i32 %20

21:                                               ; preds = %25
  br label %19

22:                                               ; preds = %5
  %23 = getelementptr inbounds { i64, i8, [7 x i8] }, ptr %7, i32 0, i32 0
  %24 = load i64, ptr %23, align 8
  store i64 %24, ptr %1, align 8
  br label %19

25:                                               ; preds = %5
  br label %21
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @__atomic_compare_exchange_16(ptr nonnull align 16 %0, ptr nonnull align 16 %1, i128 %2, i32 %3, i32 %4) #0 {
  %6 = alloca ptr, align 8
  %7 = ptrtoint ptr %0 to i64
  %8 = call fastcc ptr @compiler_rt.atomics.SpinlockTable.get(ptr nonnull align 64 @compiler_rt.atomics.spinlocks, i64 %7)
  store ptr %8, ptr %6, align 8
  %9 = load i128, ptr %0, align 16
  %10 = load i128, ptr %1, align 16
  %11 = icmp eq i128 %9, %10
  br i1 %11, label %16, label %18

12:                                               ; preds = %16, %14
  %13 = phi i32 [ 1, %16 ], [ 0, %14 ]
  ret i32 %13

14:                                               ; preds = %18
  store i128 %9, ptr %1, align 16
  %15 = load ptr, ptr %6, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %15)
  br label %12

16:                                               ; preds = %5
  store i128 %2, ptr %0, align 16
  %17 = load ptr, ptr %6, align 8
  call fastcc void @compiler_rt.atomics.SpinlockTable.Spinlock.release(ptr nonnull align 64 %17)
  br label %12

18:                                               ; preds = %5
  br label %14
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local ptr @memcpy(ptr noalias align 1 %0, ptr noalias readonly align 1 %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = icmp ne i64 %2, 0
  br i1 %7, label %9, label %10

8:                                                ; preds = %11, %10
  ret ptr %0

9:                                                ; preds = %3
  store ptr %0, ptr %6, align 8
  store ptr %1, ptr %5, align 8
  store i64 %2, ptr %4, align 8
  br label %12

10:                                               ; preds = %3
  br label %8

11:                                               ; preds = %27
  br label %8

12:                                               ; preds = %22, %9
  %13 = load ptr, ptr %6, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 0
  %15 = load ptr, ptr %5, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 0
  %17 = load i8, ptr %16, align 1
  store i8 %17, ptr %14, align 1
  %18 = load i64, ptr %4, align 8
  %19 = sub nuw i64 %18, 1
  store i64 %19, ptr %4, align 8
  %20 = load i64, ptr %4, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %27, label %28

22:                                               ; preds = %28
  %23 = load ptr, ptr %6, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 1
  store ptr %24, ptr %6, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = getelementptr inbounds i8, ptr %25, i64 1
  store ptr %26, ptr %5, align 8
  br label %12

27:                                               ; preds = %12
  br label %11

28:                                               ; preds = %12
  br label %22
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local ptr @memset(ptr align 1 %0, i8 zeroext %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca ptr, align 8
  %6 = icmp ne i64 %2, 0
  br i1 %6, label %8, label %9

7:                                                ; preds = %10, %9
  ret ptr %0

8:                                                ; preds = %3
  store ptr %0, ptr %5, align 8
  store i64 %2, ptr %4, align 8
  br label %11

9:                                                ; preds = %3
  br label %7

10:                                               ; preds = %21
  br label %7

11:                                               ; preds = %18, %8
  %12 = load ptr, ptr %5, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 0
  store i8 %1, ptr %13, align 1
  %14 = load i64, ptr %4, align 8
  %15 = sub nuw i64 %14, 1
  store i64 %15, ptr %4, align 8
  %16 = load i64, ptr %4, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %21, label %22

18:                                               ; preds = %22
  %19 = load ptr, ptr %5, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 1
  store ptr %20, ptr %5, align 8
  br label %11

21:                                               ; preds = %11
  br label %10

22:                                               ; preds = %11
  br label %18
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local ptr @__memset(ptr align 1 %0, i8 zeroext %1, i64 %2, i64 %3) #0 {
  %5 = icmp ult i64 %3, %2
  br i1 %5, label %8, label %9

6:                                                ; preds = %9
  %7 = call ptr @memset(ptr align 1 %0, i8 zeroext %1, i64 %2)
  ret ptr %7

8:                                                ; preds = %4
  call fastcc void @builtin.default_panic(ptr nonnull readonly align 1 @compiler_rt.memset.__memset__anon_4001, i64 15, ptr align 8 null, ptr nonnull readonly align 8 @120)
  unreachable

9:                                                ; preds = %4
  br label %6
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local ptr @memmove(ptr align 1 %0, ptr readonly align 1 %1, i64 %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i64, align 8
  %8 = ptrtoint ptr %0 to i64
  %9 = ptrtoint ptr %1 to i64
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %12, label %13

11:                                               ; preds = %29, %14
  ret ptr %0

12:                                               ; preds = %3
  store i64 0, ptr %7, align 8
  br label %15

13:                                               ; preds = %3
  store i64 %2, ptr %5, align 8
  br label %30

14:                                               ; preds = %28
  br label %11

15:                                               ; preds = %18, %12
  %16 = load i64, ptr %7, align 8
  %17 = icmp ne i64 %16, %2
  br i1 %17, label %19, label %28

18:                                               ; preds = %19
  br label %15

19:                                               ; preds = %15
  store ptr %0, ptr %6, align 8
  %20 = load i64, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 %20
  %23 = load i64, ptr %7, align 8
  %24 = getelementptr inbounds i8, ptr %1, i64 %23
  %25 = load i8, ptr %24, align 1
  store i8 %25, ptr %22, align 1
  %26 = load i64, ptr %7, align 8
  %27 = add nuw i64 %26, 1
  store i64 %27, ptr %7, align 8
  br label %18

28:                                               ; preds = %15
  br label %14

29:                                               ; preds = %43
  br label %11

30:                                               ; preds = %33, %13
  %31 = load i64, ptr %5, align 8
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %34, label %43

33:                                               ; preds = %34
  br label %30

34:                                               ; preds = %30
  %35 = load i64, ptr %5, align 8
  %36 = sub nuw i64 %35, 1
  store i64 %36, ptr %5, align 8
  store ptr %0, ptr %4, align 8
  %37 = load i64, ptr %5, align 8
  %38 = load ptr, ptr %4, align 8
  %39 = getelementptr inbounds i8, ptr %38, i64 %37
  %40 = load i64, ptr %5, align 8
  %41 = getelementptr inbounds i8, ptr %1, i64 %40
  %42 = load i8, ptr %41, align 1
  store i8 %42, ptr %39, align 1
  br label %33

43:                                               ; preds = %30
  br label %29
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @memcmp(ptr nonnull readonly align 1 %0, ptr nonnull readonly align 1 %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  store i64 0, ptr %4, align 8
  br label %6

5:                                                ; preds = %21
  ret i32 0

6:                                                ; preds = %9, %3
  %7 = load i64, ptr %4, align 8
  %8 = icmp ult i64 %7, %2
  br i1 %8, label %10, label %21

9:                                                ; preds = %29
  br label %6

10:                                               ; preds = %6
  %11 = load i64, ptr %4, align 8
  %12 = getelementptr inbounds i8, ptr %0, i64 %11
  %13 = load i8, ptr %12, align 1
  %14 = zext i8 %13 to i32
  %15 = load i64, ptr %4, align 8
  %16 = getelementptr inbounds i8, ptr %1, i64 %15
  %17 = load i8, ptr %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub i32 %14, %18
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %26, label %27

21:                                               ; preds = %6
  br label %5

22:                                               ; preds = %27
  %23 = load i64, ptr %4, align 8
  %24 = call fastcc { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %23, i64 1)
  %25 = extractvalue { i64, i1 } %24, 1
  br i1 %25, label %28, label %29

26:                                               ; preds = %10
  ret i32 %19

27:                                               ; preds = %10
  br label %22

28:                                               ; preds = %22
  call fastcc void @builtin.default_panic(ptr @builtin.panic_messages.integer_overflow__anon_3450, i64 16, ptr null, ptr @0)
  unreachable

29:                                               ; preds = %22
  %30 = extractvalue { i64, i1 } %24, 0
  store i64 %30, ptr %4, align 8
  br label %9
}

; Function Attrs: nounwind sspstrong uwtable
define weak_odr dso_local i32 @bcmp(ptr readonly align 1 %0, ptr readonly align 1 %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  store i64 0, ptr %4, align 8
  br label %6

5:                                                ; preds = %18
  ret i32 0

6:                                                ; preds = %9, %3
  %7 = load i64, ptr %4, align 8
  %8 = icmp ne i64 %7, %2
  br i1 %8, label %10, label %18

9:                                                ; preds = %19
  br label %6

10:                                               ; preds = %6
  %11 = load i64, ptr %4, align 8
  %12 = getelementptr inbounds i8, ptr %0, i64 %11
  %13 = load i8, ptr %12, align 1
  %14 = load i64, ptr %4, align 8
  %15 = getelementptr inbounds i8, ptr %1, i64 %14
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %13, %16
  br i1 %17, label %22, label %23

18:                                               ; preds = %6
  br label %5

19:                                               ; preds = %23
  %20 = load i64, ptr %4, align 8
  %21 = add nuw i64 %20, 1
  store i64 %21, ptr %4, align 8
  br label %9

22:                                               ; preds = %10
  ret i32 1

23:                                               ; preds = %10
  br label %19
}

define void @main() {
main:
  %bool_value = alloca i1, align 1
  store i1 true, ptr %bool_value, align 1
  %call_arg = load i1, ptr %bool_value, align 1
  %bool_value1 = alloca i1, align 1
  store i1 false, ptr %bool_value1, align 1
  %call_arg2 = load i1, ptr %bool_value1, align 1
  %0 = call i1 @compare(i1 %call_arg, i1 %call_arg2)
  %bool_value3 = alloca ptr, align 8
  store i1 %0, ptr %bool_value3, align 1
  %1 = load i1, ptr %bool_value3, align 1
  %2 = call ptr @bool_to_str(i1 %1)
  call void (ptr, ...) @printf(ptr %2)
  ret void
}

define ptr @bool_to_str(i1 %0) {
entry:
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  ret ptr @true_str

else:                                             ; preds = %entry
  ret ptr @false_str
}

declare void @printf(ptr, ...)

declare ptr @sprintf(ptr, ptr, ptr, ptr, ...)

define i1 @compare(i1 %0, i1 %1) {
entry:
  %result = icmp eq i1 %0, %1
  %bool_cmp = alloca i1, align 1
  store i1 %result, ptr %bool_cmp, align 1
  ret i1 %result
}

attributes #0 = { nounwind sspstrong uwtable "frame-pointer"="all" "stack-protector-buffer-size"="4" "target-cpu"="generic" "target-features"="-a510,-a65,-a710,-a76,-a78,-a78c,-aes,-aggressive-fma,-alternate-sextload-cvt-f32-pattern,-altnzcv,-am,-amvs,-arith-bcc-fusion,-arith-cbz-fusion,-ascend-store-address,-b16b16,-balance-fp-ops,-bf16,-brbe,-bti,-call-saved-x10,-call-saved-x11,-call-saved-x12,-call-saved-x13,-call-saved-x14,-call-saved-x15,-call-saved-x18,-call-saved-x8,-call-saved-x9,-ccdp,-ccidx,-ccpp,-clrbhb,-cmp-bcc-fusion,-complxnum,-CONTEXTIDREL2,-cortex-r82,-crc,-crypto,-cssc,-custom-cheap-as-move,-d128,-disable-latency-sched-heuristic,-dit,-dotprod,-ecv,-el2vmsa,-el3,+enable-select-opt,+ete,-exynos-cheap-as-move,-f32mm,-f64mm,-fgt,-fix-cortex-a53-835769,-flagm,-fmv,-force-32bit-jump-tables,-fp16fml,+fp-armv8,-fptoint,-fullfp16,-fuse-address,+fuse-adrp-add,+fuse-aes,-fuse-arith-logic,-fuse-crypto-eor,-fuse-csel,-fuse-literals,-harden-sls-blr,-harden-sls-nocomdat,-harden-sls-retbr,-hbc,-hcx,-i8mm,-ite,-jsconv,-lor,-ls64,-lse,-lse128,-lse2,-lsl-fast,-mec,-mops,-mpam,-mte,+neon,-nmi,-no-bti-at-return-twice,-no-neg-immediates,-no-zcz-fp,-nv,-outline-atomics,-pan,-pan-rwv,-pauth,-perfmon,-predictable-select-expensive,-predres,-prfm-slc-target,-rand,-ras,-rasv2,-rcpc,-rcpc3,-rcpc-immo,-rdm,-reserve-x1,-reserve-x10,-reserve-x11,-reserve-x12,-reserve-x13,-reserve-x14,-reserve-x15,-reserve-x18,-reserve-x2,-reserve-x20,-reserve-x21,-reserve-x22,-reserve-x23,-reserve-x24,-reserve-x25,-reserve-x26,-reserve-x27,-reserve-x28,-reserve-x3,-reserve-x30,-reserve-x4,-reserve-x5,-reserve-x6,-reserve-x7,-reserve-x9,-rme,-sb,-sel2,-sha2,-sha3,-slow-misaligned-128store,-slow-paired-128,-slow-strqro-store,-sm4,-sme,-sme2,-sme2p1,-sme-f16f16,-sme-f64f64,-sme-i16i64,-spe,-spe-eef,-specres2,-specrestrict,-ssbs,-strict-align,-sve,-sve2,-sve2-aes,-sve2-bitperm,-sve2-sha3,-sve2-sm4,-sve2p1,-tagged-globals,-the,-tlb-rmi,-tme,-tpidr-el1,-tpidr-el2,-tpidr-el3,-tracev8.4,+trbe,-uaops,-use-experimental-zeroing-pseudos,+use-postra-scheduler,-use-reciprocal-square-root,-use-scalar-inc-vl,-v8.1a,-v8.2a,-v8.3a,-v8.4a,-v8.5a,-v8.6a,-v8.7a,-v8.8a,-v8.9a,-v8a,-v8r,-v9.1a,-v9.2a,-v9.3a,-v9.4a,-v9a,-vh,-wfxt,-xs,-zcm,-zcz,-zcz-fp-workaround,-zcz-gp" }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nounwind uwtable "frame-pointer"="all" "target-cpu"="generic" "target-features"="-a510,-a65,-a710,-a76,-a78,-a78c,-aes,-aggressive-fma,-alternate-sextload-cvt-f32-pattern,-altnzcv,-am,-amvs,-arith-bcc-fusion,-arith-cbz-fusion,-ascend-store-address,-b16b16,-balance-fp-ops,-bf16,-brbe,-bti,-call-saved-x10,-call-saved-x11,-call-saved-x12,-call-saved-x13,-call-saved-x14,-call-saved-x15,-call-saved-x18,-call-saved-x8,-call-saved-x9,-ccdp,-ccidx,-ccpp,-clrbhb,-cmp-bcc-fusion,-complxnum,-CONTEXTIDREL2,-cortex-r82,-crc,-crypto,-cssc,-custom-cheap-as-move,-d128,-disable-latency-sched-heuristic,-dit,-dotprod,-ecv,-el2vmsa,-el3,+enable-select-opt,+ete,-exynos-cheap-as-move,-f32mm,-f64mm,-fgt,-fix-cortex-a53-835769,-flagm,-fmv,-force-32bit-jump-tables,-fp16fml,+fp-armv8,-fptoint,-fullfp16,-fuse-address,+fuse-adrp-add,+fuse-aes,-fuse-arith-logic,-fuse-crypto-eor,-fuse-csel,-fuse-literals,-harden-sls-blr,-harden-sls-nocomdat,-harden-sls-retbr,-hbc,-hcx,-i8mm,-ite,-jsconv,-lor,-ls64,-lse,-lse128,-lse2,-lsl-fast,-mec,-mops,-mpam,-mte,+neon,-nmi,-no-bti-at-return-twice,-no-neg-immediates,-no-zcz-fp,-nv,-outline-atomics,-pan,-pan-rwv,-pauth,-perfmon,-predictable-select-expensive,-predres,-prfm-slc-target,-rand,-ras,-rasv2,-rcpc,-rcpc3,-rcpc-immo,-rdm,-reserve-x1,-reserve-x10,-reserve-x11,-reserve-x12,-reserve-x13,-reserve-x14,-reserve-x15,-reserve-x18,-reserve-x2,-reserve-x20,-reserve-x21,-reserve-x22,-reserve-x23,-reserve-x24,-reserve-x25,-reserve-x26,-reserve-x27,-reserve-x28,-reserve-x3,-reserve-x30,-reserve-x4,-reserve-x5,-reserve-x6,-reserve-x7,-reserve-x9,-rme,-sb,-sel2,-sha2,-sha3,-slow-misaligned-128store,-slow-paired-128,-slow-strqro-store,-sm4,-sme,-sme2,-sme2p1,-sme-f16f16,-sme-f64f64,-sme-i16i64,-spe,-spe-eef,-specres2,-specrestrict,-ssbs,-strict-align,-sve,-sve2,-sve2-aes,-sve2-bitperm,-sve2-sha3,-sve2-sm4,-sve2p1,-tagged-globals,-the,-tlb-rmi,-tme,-tpidr-el1,-tpidr-el2,-tpidr-el3,-tracev8.4,+trbe,-uaops,-use-experimental-zeroing-pseudos,+use-postra-scheduler,-use-reciprocal-square-root,-use-scalar-inc-vl,-v8.1a,-v8.2a,-v8.3a,-v8.4a,-v8.5a,-v8.6a,-v8.7a,-v8.8a,-v8.9a,-v8a,-v8r,-v9.1a,-v9.2a,-v9.3a,-v9.4a,-v9a,-vh,-wfxt,-xs,-zcm,-zcz,-zcz-fp-workaround,-zcz-gp" }
attributes #4 = { cold noreturn nounwind sspstrong uwtable "frame-pointer"="all" "stack-protector-buffer-size"="4" "target-cpu"="generic" "target-features"="-a510,-a65,-a710,-a76,-a78,-a78c,-aes,-aggressive-fma,-alternate-sextload-cvt-f32-pattern,-altnzcv,-am,-amvs,-arith-bcc-fusion,-arith-cbz-fusion,-ascend-store-address,-b16b16,-balance-fp-ops,-bf16,-brbe,-bti,-call-saved-x10,-call-saved-x11,-call-saved-x12,-call-saved-x13,-call-saved-x14,-call-saved-x15,-call-saved-x18,-call-saved-x8,-call-saved-x9,-ccdp,-ccidx,-ccpp,-clrbhb,-cmp-bcc-fusion,-complxnum,-CONTEXTIDREL2,-cortex-r82,-crc,-crypto,-cssc,-custom-cheap-as-move,-d128,-disable-latency-sched-heuristic,-dit,-dotprod,-ecv,-el2vmsa,-el3,+enable-select-opt,+ete,-exynos-cheap-as-move,-f32mm,-f64mm,-fgt,-fix-cortex-a53-835769,-flagm,-fmv,-force-32bit-jump-tables,-fp16fml,+fp-armv8,-fptoint,-fullfp16,-fuse-address,+fuse-adrp-add,+fuse-aes,-fuse-arith-logic,-fuse-crypto-eor,-fuse-csel,-fuse-literals,-harden-sls-blr,-harden-sls-nocomdat,-harden-sls-retbr,-hbc,-hcx,-i8mm,-ite,-jsconv,-lor,-ls64,-lse,-lse128,-lse2,-lsl-fast,-mec,-mops,-mpam,-mte,+neon,-nmi,-no-bti-at-return-twice,-no-neg-immediates,-no-zcz-fp,-nv,-outline-atomics,-pan,-pan-rwv,-pauth,-perfmon,-predictable-select-expensive,-predres,-prfm-slc-target,-rand,-ras,-rasv2,-rcpc,-rcpc3,-rcpc-immo,-rdm,-reserve-x1,-reserve-x10,-reserve-x11,-reserve-x12,-reserve-x13,-reserve-x14,-reserve-x15,-reserve-x18,-reserve-x2,-reserve-x20,-reserve-x21,-reserve-x22,-reserve-x23,-reserve-x24,-reserve-x25,-reserve-x26,-reserve-x27,-reserve-x28,-reserve-x3,-reserve-x30,-reserve-x4,-reserve-x5,-reserve-x6,-reserve-x7,-reserve-x9,-rme,-sb,-sel2,-sha2,-sha3,-slow-misaligned-128store,-slow-paired-128,-slow-strqro-store,-sm4,-sme,-sme2,-sme2p1,-sme-f16f16,-sme-f64f64,-sme-i16i64,-spe,-spe-eef,-specres2,-specrestrict,-ssbs,-strict-align,-sve,-sve2,-sve2-aes,-sve2-bitperm,-sve2-sha3,-sve2-sm4,-sve2p1,-tagged-globals,-the,-tlb-rmi,-tme,-tpidr-el1,-tpidr-el2,-tpidr-el3,-tracev8.4,+trbe,-uaops,-use-experimental-zeroing-pseudos,+use-postra-scheduler,-use-reciprocal-square-root,-use-scalar-inc-vl,-v8.1a,-v8.2a,-v8.3a,-v8.4a,-v8.5a,-v8.6a,-v8.7a,-v8.8a,-v8.9a,-v8a,-v8r,-v9.1a,-v9.2a,-v9.3a,-v9.4a,-v9a,-vh,-wfxt,-xs,-zcm,-zcz,-zcz-fp-workaround,-zcz-gp" }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #7 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #8 = { cold nounwind sspstrong uwtable "frame-pointer"="all" "stack-protector-buffer-size"="4" "target-cpu"="generic" "target-features"="-a510,-a65,-a710,-a76,-a78,-a78c,-aes,-aggressive-fma,-alternate-sextload-cvt-f32-pattern,-altnzcv,-am,-amvs,-arith-bcc-fusion,-arith-cbz-fusion,-ascend-store-address,-b16b16,-balance-fp-ops,-bf16,-brbe,-bti,-call-saved-x10,-call-saved-x11,-call-saved-x12,-call-saved-x13,-call-saved-x14,-call-saved-x15,-call-saved-x18,-call-saved-x8,-call-saved-x9,-ccdp,-ccidx,-ccpp,-clrbhb,-cmp-bcc-fusion,-complxnum,-CONTEXTIDREL2,-cortex-r82,-crc,-crypto,-cssc,-custom-cheap-as-move,-d128,-disable-latency-sched-heuristic,-dit,-dotprod,-ecv,-el2vmsa,-el3,+enable-select-opt,+ete,-exynos-cheap-as-move,-f32mm,-f64mm,-fgt,-fix-cortex-a53-835769,-flagm,-fmv,-force-32bit-jump-tables,-fp16fml,+fp-armv8,-fptoint,-fullfp16,-fuse-address,+fuse-adrp-add,+fuse-aes,-fuse-arith-logic,-fuse-crypto-eor,-fuse-csel,-fuse-literals,-harden-sls-blr,-harden-sls-nocomdat,-harden-sls-retbr,-hbc,-hcx,-i8mm,-ite,-jsconv,-lor,-ls64,-lse,-lse128,-lse2,-lsl-fast,-mec,-mops,-mpam,-mte,+neon,-nmi,-no-bti-at-return-twice,-no-neg-immediates,-no-zcz-fp,-nv,-outline-atomics,-pan,-pan-rwv,-pauth,-perfmon,-predictable-select-expensive,-predres,-prfm-slc-target,-rand,-ras,-rasv2,-rcpc,-rcpc3,-rcpc-immo,-rdm,-reserve-x1,-reserve-x10,-reserve-x11,-reserve-x12,-reserve-x13,-reserve-x14,-reserve-x15,-reserve-x18,-reserve-x2,-reserve-x20,-reserve-x21,-reserve-x22,-reserve-x23,-reserve-x24,-reserve-x25,-reserve-x26,-reserve-x27,-reserve-x28,-reserve-x3,-reserve-x30,-reserve-x4,-reserve-x5,-reserve-x6,-reserve-x7,-reserve-x9,-rme,-sb,-sel2,-sha2,-sha3,-slow-misaligned-128store,-slow-paired-128,-slow-strqro-store,-sm4,-sme,-sme2,-sme2p1,-sme-f16f16,-sme-f64f64,-sme-i16i64,-spe,-spe-eef,-specres2,-specrestrict,-ssbs,-strict-align,-sve,-sve2,-sve2-aes,-sve2-bitperm,-sve2-sha3,-sve2-sm4,-sve2p1,-tagged-globals,-the,-tlb-rmi,-tme,-tpidr-el1,-tpidr-el2,-tpidr-el3,-tracev8.4,+trbe,-uaops,-use-experimental-zeroing-pseudos,+use-postra-scheduler,-use-reciprocal-square-root,-use-scalar-inc-vl,-v8.1a,-v8.2a,-v8.3a,-v8.4a,-v8.5a,-v8.6a,-v8.7a,-v8.8a,-v8.9a,-v8a,-v8r,-v9.1a,-v9.2a,-v9.3a,-v9.4a,-v9a,-vh,-wfxt,-xs,-zcm,-zcz,-zcz-fp-workaround,-zcz-gp" }
attributes #9 = { noreturn nounwind uwtable "frame-pointer"="all" "target-cpu"="generic" "target-features"="-a510,-a65,-a710,-a76,-a78,-a78c,-aes,-aggressive-fma,-alternate-sextload-cvt-f32-pattern,-altnzcv,-am,-amvs,-arith-bcc-fusion,-arith-cbz-fusion,-ascend-store-address,-b16b16,-balance-fp-ops,-bf16,-brbe,-bti,-call-saved-x10,-call-saved-x11,-call-saved-x12,-call-saved-x13,-call-saved-x14,-call-saved-x15,-call-saved-x18,-call-saved-x8,-call-saved-x9,-ccdp,-ccidx,-ccpp,-clrbhb,-cmp-bcc-fusion,-complxnum,-CONTEXTIDREL2,-cortex-r82,-crc,-crypto,-cssc,-custom-cheap-as-move,-d128,-disable-latency-sched-heuristic,-dit,-dotprod,-ecv,-el2vmsa,-el3,+enable-select-opt,+ete,-exynos-cheap-as-move,-f32mm,-f64mm,-fgt,-fix-cortex-a53-835769,-flagm,-fmv,-force-32bit-jump-tables,-fp16fml,+fp-armv8,-fptoint,-fullfp16,-fuse-address,+fuse-adrp-add,+fuse-aes,-fuse-arith-logic,-fuse-crypto-eor,-fuse-csel,-fuse-literals,-harden-sls-blr,-harden-sls-nocomdat,-harden-sls-retbr,-hbc,-hcx,-i8mm,-ite,-jsconv,-lor,-ls64,-lse,-lse128,-lse2,-lsl-fast,-mec,-mops,-mpam,-mte,+neon,-nmi,-no-bti-at-return-twice,-no-neg-immediates,-no-zcz-fp,-nv,-outline-atomics,-pan,-pan-rwv,-pauth,-perfmon,-predictable-select-expensive,-predres,-prfm-slc-target,-rand,-ras,-rasv2,-rcpc,-rcpc3,-rcpc-immo,-rdm,-reserve-x1,-reserve-x10,-reserve-x11,-reserve-x12,-reserve-x13,-reserve-x14,-reserve-x15,-reserve-x18,-reserve-x2,-reserve-x20,-reserve-x21,-reserve-x22,-reserve-x23,-reserve-x24,-reserve-x25,-reserve-x26,-reserve-x27,-reserve-x28,-reserve-x3,-reserve-x30,-reserve-x4,-reserve-x5,-reserve-x6,-reserve-x7,-reserve-x9,-rme,-sb,-sel2,-sha2,-sha3,-slow-misaligned-128store,-slow-paired-128,-slow-strqro-store,-sm4,-sme,-sme2,-sme2p1,-sme-f16f16,-sme-f64f64,-sme-i16i64,-spe,-spe-eef,-specres2,-specrestrict,-ssbs,-strict-align,-sve,-sve2,-sve2-aes,-sve2-bitperm,-sve2-sha3,-sve2-sm4,-sve2p1,-tagged-globals,-the,-tlb-rmi,-tme,-tpidr-el1,-tpidr-el2,-tpidr-el3,-tracev8.4,+trbe,-uaops,-use-experimental-zeroing-pseudos,+use-postra-scheduler,-use-reciprocal-square-root,-use-scalar-inc-vl,-v8.1a,-v8.2a,-v8.3a,-v8.4a,-v8.5a,-v8.6a,-v8.7a,-v8.8a,-v8.9a,-v8a,-v8r,-v9.1a,-v9.2a,-v9.3a,-v9.4a,-v9a,-vh,-wfxt,-xs,-zcm,-zcz,-zcz-fp-workaround,-zcz-gp" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 8, !"PIC Level", i32 2}
!1 = !{i32 7, !"PIE Level", i32 2}
